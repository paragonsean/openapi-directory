/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionApi_H
#define OAI_OAIPermissionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPermission.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionApi : public QObject {
    Q_OBJECT

public:
    OAIPermissionApi(const int timeOut = 0);
    ~OAIPermissionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePermissionTag(const QString &permission_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPermissionTags(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPermissionsWithTag(const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPermissions(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagFromPermission(const QString &permission_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagsFromPermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getUserPermissions(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getUsersFromPermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void patchPermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postPermission(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putPermission(const QString &permission_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  permission_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putPermissionTag(const QString &permission_id, const QString &tag_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePermissionCallback(OAIHttpRequestWorker *worker);
    void deletePermissionTagCallback(OAIHttpRequestWorker *worker);
    void getAllPermissionTagsCallback(OAIHttpRequestWorker *worker);
    void getAllPermissionsWithTagCallback(OAIHttpRequestWorker *worker);
    void getPermissionCallback(OAIHttpRequestWorker *worker);
    void getPermissionsCallback(OAIHttpRequestWorker *worker);
    void getTagFromPermissionCallback(OAIHttpRequestWorker *worker);
    void getTagsFromPermissionCallback(OAIHttpRequestWorker *worker);
    void getUserPermissionsCallback(OAIHttpRequestWorker *worker);
    void getUsersFromPermissionCallback(OAIHttpRequestWorker *worker);
    void patchPermissionCallback(OAIHttpRequestWorker *worker);
    void postPermissionCallback(OAIHttpRequestWorker *worker);
    void putPermissionCallback(OAIHttpRequestWorker *worker);
    void putPermissionTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePermissionSignal();
    void deletePermissionTagSignal();
    void getAllPermissionTagsSignal(OAILinkCollection summary);
    void getAllPermissionsWithTagSignal(OAILinkCollection summary);
    void getPermissionSignal(OAIPermission summary);
    void getPermissionsSignal(OAILinkCollection summary);
    void getTagFromPermissionSignal(OAITag summary);
    void getTagsFromPermissionSignal(OAILinkCollection summary);
    void getUserPermissionsSignal(OAILinkCollection summary);
    void getUsersFromPermissionSignal(OAILinkCollection summary);
    void patchPermissionSignal(OAIPermission summary);
    void postPermissionSignal(OAILink summary);
    void putPermissionSignal(OAIPermission summary);
    void putPermissionTagSignal(OAITag summary);


    void deletePermissionSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionTagSignalFull(OAIHttpRequestWorker *worker);
    void getAllPermissionTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAllPermissionsWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPermissionSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void getPermissionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getTagFromPermissionSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getTagsFromPermissionSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getUserPermissionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getUsersFromPermissionSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchPermissionSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void postPermissionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putPermissionSignalFull(OAIHttpRequestWorker *worker, OAIPermission summary);
    void putPermissionTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use deletePermissionSignalError() instead")
    void deletePermissionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionTagSignalError() instead")
    void deletePermissionTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionTagsSignalError() instead")
    void getAllPermissionTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsWithTagSignalError() instead")
    void getAllPermissionsWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSignalError() instead")
    void getPermissionSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalError() instead")
    void getPermissionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromPermissionSignalError() instead")
    void getTagFromPermissionSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromPermissionSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromPermissionSignalError() instead")
    void getTagsFromPermissionSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromPermissionSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalError() instead")
    void getUserPermissionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromPermissionSignalError() instead")
    void getUsersFromPermissionSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromPermissionSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPermissionSignalError() instead")
    void patchPermissionSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPermissionSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPermissionSignalError() instead")
    void postPermissionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPermissionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionSignalError() instead")
    void putPermissionSignalE(OAIPermission summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionSignalError(OAIPermission summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionTagSignalError() instead")
    void putPermissionTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePermissionSignalErrorFull() instead")
    void deletePermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionTagSignalErrorFull() instead")
    void deletePermissionTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionTagsSignalErrorFull() instead")
    void getAllPermissionTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsWithTagSignalErrorFull() instead")
    void getAllPermissionsWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSignalErrorFull() instead")
    void getPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalErrorFull() instead")
    void getPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromPermissionSignalErrorFull() instead")
    void getTagFromPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromPermissionSignalErrorFull() instead")
    void getTagsFromPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalErrorFull() instead")
    void getUserPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersFromPermissionSignalErrorFull() instead")
    void getUsersFromPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersFromPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPermissionSignalErrorFull() instead")
    void patchPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPermissionSignalErrorFull() instead")
    void postPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionSignalErrorFull() instead")
    void putPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPermissionTagSignalErrorFull() instead")
    void putPermissionTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPermissionTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
