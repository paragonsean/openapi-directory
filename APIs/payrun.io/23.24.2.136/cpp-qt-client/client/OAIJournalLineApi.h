/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJournalLineApi_H
#define OAI_OAIJournalLineApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILinkCollection.h"
#include "OAITag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJournalLineApi : public QObject {
    Q_OBJECT

public:
    OAIJournalLineApi(const int timeOut = 0);
    ~OAIJournalLineApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_line_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteJournalLineTag(const QString &employer_id, const QString &journal_line_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllJournalLineTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllJournalLinesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_line_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagFromJournalLine(const QString &employer_id, const QString &journal_line_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_line_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagsFromJournalLine(const QString &employer_id, const QString &journal_line_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_line_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putJournalLineTag(const QString &employer_id, const QString &journal_line_id, const QString &tag_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteJournalLineTagCallback(OAIHttpRequestWorker *worker);
    void getAllJournalLineTagsCallback(OAIHttpRequestWorker *worker);
    void getAllJournalLinesWithTagCallback(OAIHttpRequestWorker *worker);
    void getTagFromJournalLineCallback(OAIHttpRequestWorker *worker);
    void getTagsFromJournalLineCallback(OAIHttpRequestWorker *worker);
    void putJournalLineTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteJournalLineTagSignal();
    void getAllJournalLineTagsSignal(OAILinkCollection summary);
    void getAllJournalLinesWithTagSignal(OAILinkCollection summary);
    void getTagFromJournalLineSignal(OAITag summary);
    void getTagsFromJournalLineSignal(OAILinkCollection summary);
    void putJournalLineTagSignal(OAITag summary);


    void deleteJournalLineTagSignalFull(OAIHttpRequestWorker *worker);
    void getAllJournalLineTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAllJournalLinesWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getTagFromJournalLineSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getTagsFromJournalLineSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void putJournalLineTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use deleteJournalLineTagSignalError() instead")
    void deleteJournalLineTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalLineTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllJournalLineTagsSignalError() instead")
    void getAllJournalLineTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllJournalLineTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllJournalLinesWithTagSignalError() instead")
    void getAllJournalLinesWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllJournalLinesWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromJournalLineSignalError() instead")
    void getTagFromJournalLineSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromJournalLineSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromJournalLineSignalError() instead")
    void getTagsFromJournalLineSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromJournalLineSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalLineTagSignalError() instead")
    void putJournalLineTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalLineTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteJournalLineTagSignalErrorFull() instead")
    void deleteJournalLineTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalLineTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllJournalLineTagsSignalErrorFull() instead")
    void getAllJournalLineTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllJournalLineTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllJournalLinesWithTagSignalErrorFull() instead")
    void getAllJournalLinesWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllJournalLinesWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromJournalLineSignalErrorFull() instead")
    void getTagFromJournalLineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromJournalLineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromJournalLineSignalErrorFull() instead")
    void getTagsFromJournalLineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromJournalLineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalLineTagSignalErrorFull() instead")
    void putJournalLineTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalLineTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
