/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDpsMessageApi_H
#define OAI_OAIDpsMessageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDpsMessage.h"
#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDpsMessageApi : public QObject {
    Q_OBJECT

public:
    OAIDpsMessageApi(const int timeOut = 0);
    ~OAIDpsMessageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  dps_message_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteDpsMessage(const QString &employer_id, const QString &dps_message_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  dps_message_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsMessageFromEmployer(const QString &employer_id, const QString &dps_message_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getDpsMessagesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  dps_message_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void patchDpsMessage(const QString &employer_id, const QString &dps_message_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postDpsMessage(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  dps_message_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putDpsMessage(const QString &employer_id, const QString &dps_message_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteDpsMessageCallback(OAIHttpRequestWorker *worker);
    void getDpsMessageFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getDpsMessagesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void patchDpsMessageCallback(OAIHttpRequestWorker *worker);
    void postDpsMessageCallback(OAIHttpRequestWorker *worker);
    void putDpsMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteDpsMessageSignal();
    void getDpsMessageFromEmployerSignal(OAIDpsMessage summary);
    void getDpsMessagesFromEmployerSignal(OAILinkCollection summary);
    void patchDpsMessageSignal(OAIDpsMessage summary);
    void postDpsMessageSignal(OAILink summary);
    void putDpsMessageSignal(OAIDpsMessage summary);


    void deleteDpsMessageSignalFull(OAIHttpRequestWorker *worker);
    void getDpsMessageFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIDpsMessage summary);
    void getDpsMessagesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchDpsMessageSignalFull(OAIHttpRequestWorker *worker, OAIDpsMessage summary);
    void postDpsMessageSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putDpsMessageSignalFull(OAIHttpRequestWorker *worker, OAIDpsMessage summary);

    Q_DECL_DEPRECATED_X("Use deleteDpsMessageSignalError() instead")
    void deleteDpsMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDpsMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessageFromEmployerSignalError() instead")
    void getDpsMessageFromEmployerSignalE(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessageFromEmployerSignalError(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessagesFromEmployerSignalError() instead")
    void getDpsMessagesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessagesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDpsMessageSignalError() instead")
    void patchDpsMessageSignalE(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDpsMessageSignalError(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDpsMessageSignalError() instead")
    void postDpsMessageSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDpsMessageSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDpsMessageSignalError() instead")
    void putDpsMessageSignalE(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putDpsMessageSignalError(OAIDpsMessage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteDpsMessageSignalErrorFull() instead")
    void deleteDpsMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDpsMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessageFromEmployerSignalErrorFull() instead")
    void getDpsMessageFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessageFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessagesFromEmployerSignalErrorFull() instead")
    void getDpsMessagesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessagesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchDpsMessageSignalErrorFull() instead")
    void patchDpsMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchDpsMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDpsMessageSignalErrorFull() instead")
    void postDpsMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDpsMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putDpsMessageSignalErrorFull() instead")
    void putDpsMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putDpsMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
