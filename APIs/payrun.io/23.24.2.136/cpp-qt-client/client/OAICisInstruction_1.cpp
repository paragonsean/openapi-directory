/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICisInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICisInstruction_1::OAICisInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICisInstruction_1::OAICisInstruction_1() {
    this->initializeModel();
}

OAICisInstruction_1::~OAICisInstruction_1() {}

void OAICisInstruction_1::initializeModel() {

    m_cis_line_tag_isSet = false;
    m_cis_line_tag_isValid = false;

    m_cis_line_type_isSet = false;
    m_cis_line_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_pay_frequency_isSet = false;
    m_pay_frequency_isValid = false;

    m_period_end_isSet = false;
    m_period_end_isValid = false;

    m_period_start_isSet = false;
    m_period_start_isValid = false;

    m_tax_year_end_isSet = false;
    m_tax_year_end_isValid = false;

    m_tax_year_start_isSet = false;
    m_tax_year_start_isValid = false;

    m_uom_isSet = false;
    m_uom_isValid = false;

    m_units_isSet = false;
    m_units_isValid = false;

    m_vat_isSet = false;
    m_vat_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAICisInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICisInstruction_1::fromJsonObject(QJsonObject json) {

    m_cis_line_tag_isValid = ::OpenAPI::fromJsonValue(m_cis_line_tag, json[QString("CisLineTag")]);
    m_cis_line_tag_isSet = !json[QString("CisLineTag")].isNull() && m_cis_line_tag_isValid;

    m_cis_line_type_isValid = ::OpenAPI::fromJsonValue(m_cis_line_type, json[QString("CisLineType")]);
    m_cis_line_type_isSet = !json[QString("CisLineType")].isNull() && m_cis_line_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_pay_frequency_isValid = ::OpenAPI::fromJsonValue(m_pay_frequency, json[QString("PayFrequency")]);
    m_pay_frequency_isSet = !json[QString("PayFrequency")].isNull() && m_pay_frequency_isValid;

    m_period_end_isValid = ::OpenAPI::fromJsonValue(m_period_end, json[QString("PeriodEnd")]);
    m_period_end_isSet = !json[QString("PeriodEnd")].isNull() && m_period_end_isValid;

    m_period_start_isValid = ::OpenAPI::fromJsonValue(m_period_start, json[QString("PeriodStart")]);
    m_period_start_isSet = !json[QString("PeriodStart")].isNull() && m_period_start_isValid;

    m_tax_year_end_isValid = ::OpenAPI::fromJsonValue(m_tax_year_end, json[QString("TaxYearEnd")]);
    m_tax_year_end_isSet = !json[QString("TaxYearEnd")].isNull() && m_tax_year_end_isValid;

    m_tax_year_start_isValid = ::OpenAPI::fromJsonValue(m_tax_year_start, json[QString("TaxYearStart")]);
    m_tax_year_start_isSet = !json[QString("TaxYearStart")].isNull() && m_tax_year_start_isValid;

    m_uom_isValid = ::OpenAPI::fromJsonValue(m_uom, json[QString("UOM")]);
    m_uom_isSet = !json[QString("UOM")].isNull() && m_uom_isValid;

    m_units_isValid = ::OpenAPI::fromJsonValue(m_units, json[QString("Units")]);
    m_units_isSet = !json[QString("Units")].isNull() && m_units_isValid;

    m_vat_isValid = ::OpenAPI::fromJsonValue(m_vat, json[QString("VAT")]);
    m_vat_isSet = !json[QString("VAT")].isNull() && m_vat_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAICisInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICisInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_cis_line_tag_isSet) {
        obj.insert(QString("CisLineTag"), ::OpenAPI::toJsonValue(m_cis_line_tag));
    }
    if (m_cis_line_type_isSet) {
        obj.insert(QString("CisLineType"), ::OpenAPI::toJsonValue(m_cis_line_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_pay_frequency_isSet) {
        obj.insert(QString("PayFrequency"), ::OpenAPI::toJsonValue(m_pay_frequency));
    }
    if (m_period_end_isSet) {
        obj.insert(QString("PeriodEnd"), ::OpenAPI::toJsonValue(m_period_end));
    }
    if (m_period_start_isSet) {
        obj.insert(QString("PeriodStart"), ::OpenAPI::toJsonValue(m_period_start));
    }
    if (m_tax_year_end_isSet) {
        obj.insert(QString("TaxYearEnd"), ::OpenAPI::toJsonValue(m_tax_year_end));
    }
    if (m_tax_year_start_isSet) {
        obj.insert(QString("TaxYearStart"), ::OpenAPI::toJsonValue(m_tax_year_start));
    }
    if (m_uom_isSet) {
        obj.insert(QString("UOM"), ::OpenAPI::toJsonValue(m_uom));
    }
    if (m_units_isSet) {
        obj.insert(QString("Units"), ::OpenAPI::toJsonValue(m_units));
    }
    if (m_vat_isSet) {
        obj.insert(QString("VAT"), ::OpenAPI::toJsonValue(m_vat));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAICisInstruction_1::getCisLineTag() const {
    return m_cis_line_tag;
}
void OAICisInstruction_1::setCisLineTag(const QString &cis_line_tag) {
    m_cis_line_tag = cis_line_tag;
    m_cis_line_tag_isSet = true;
}

bool OAICisInstruction_1::is_cis_line_tag_Set() const{
    return m_cis_line_tag_isSet;
}

bool OAICisInstruction_1::is_cis_line_tag_Valid() const{
    return m_cis_line_tag_isValid;
}

QString OAICisInstruction_1::getCisLineType() const {
    return m_cis_line_type;
}
void OAICisInstruction_1::setCisLineType(const QString &cis_line_type) {
    m_cis_line_type = cis_line_type;
    m_cis_line_type_isSet = true;
}

bool OAICisInstruction_1::is_cis_line_type_Set() const{
    return m_cis_line_type_isSet;
}

bool OAICisInstruction_1::is_cis_line_type_Valid() const{
    return m_cis_line_type_isValid;
}

QString OAICisInstruction_1::getDescription() const {
    return m_description;
}
void OAICisInstruction_1::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICisInstruction_1::is_description_Set() const{
    return m_description_isSet;
}

bool OAICisInstruction_1::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICisInstruction_1::getPayFrequency() const {
    return m_pay_frequency;
}
void OAICisInstruction_1::setPayFrequency(const QString &pay_frequency) {
    m_pay_frequency = pay_frequency;
    m_pay_frequency_isSet = true;
}

bool OAICisInstruction_1::is_pay_frequency_Set() const{
    return m_pay_frequency_isSet;
}

bool OAICisInstruction_1::is_pay_frequency_Valid() const{
    return m_pay_frequency_isValid;
}

qint32 OAICisInstruction_1::getPeriodEnd() const {
    return m_period_end;
}
void OAICisInstruction_1::setPeriodEnd(const qint32 &period_end) {
    m_period_end = period_end;
    m_period_end_isSet = true;
}

bool OAICisInstruction_1::is_period_end_Set() const{
    return m_period_end_isSet;
}

bool OAICisInstruction_1::is_period_end_Valid() const{
    return m_period_end_isValid;
}

qint32 OAICisInstruction_1::getPeriodStart() const {
    return m_period_start;
}
void OAICisInstruction_1::setPeriodStart(const qint32 &period_start) {
    m_period_start = period_start;
    m_period_start_isSet = true;
}

bool OAICisInstruction_1::is_period_start_Set() const{
    return m_period_start_isSet;
}

bool OAICisInstruction_1::is_period_start_Valid() const{
    return m_period_start_isValid;
}

qint32 OAICisInstruction_1::getTaxYearEnd() const {
    return m_tax_year_end;
}
void OAICisInstruction_1::setTaxYearEnd(const qint32 &tax_year_end) {
    m_tax_year_end = tax_year_end;
    m_tax_year_end_isSet = true;
}

bool OAICisInstruction_1::is_tax_year_end_Set() const{
    return m_tax_year_end_isSet;
}

bool OAICisInstruction_1::is_tax_year_end_Valid() const{
    return m_tax_year_end_isValid;
}

qint32 OAICisInstruction_1::getTaxYearStart() const {
    return m_tax_year_start;
}
void OAICisInstruction_1::setTaxYearStart(const qint32 &tax_year_start) {
    m_tax_year_start = tax_year_start;
    m_tax_year_start_isSet = true;
}

bool OAICisInstruction_1::is_tax_year_start_Set() const{
    return m_tax_year_start_isSet;
}

bool OAICisInstruction_1::is_tax_year_start_Valid() const{
    return m_tax_year_start_isValid;
}

QString OAICisInstruction_1::getUom() const {
    return m_uom;
}
void OAICisInstruction_1::setUom(const QString &uom) {
    m_uom = uom;
    m_uom_isSet = true;
}

bool OAICisInstruction_1::is_uom_Set() const{
    return m_uom_isSet;
}

bool OAICisInstruction_1::is_uom_Valid() const{
    return m_uom_isValid;
}

double OAICisInstruction_1::getUnits() const {
    return m_units;
}
void OAICisInstruction_1::setUnits(const double &units) {
    m_units = units;
    m_units_isSet = true;
}

bool OAICisInstruction_1::is_units_Set() const{
    return m_units_isSet;
}

bool OAICisInstruction_1::is_units_Valid() const{
    return m_units_isValid;
}

double OAICisInstruction_1::getVat() const {
    return m_vat;
}
void OAICisInstruction_1::setVat(const double &vat) {
    m_vat = vat;
    m_vat_isSet = true;
}

bool OAICisInstruction_1::is_vat_Set() const{
    return m_vat_isSet;
}

bool OAICisInstruction_1::is_vat_Valid() const{
    return m_vat_isValid;
}

double OAICisInstruction_1::getValue() const {
    return m_value;
}
void OAICisInstruction_1::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICisInstruction_1::is_value_Set() const{
    return m_value_isSet;
}

bool OAICisInstruction_1::is_value_Valid() const{
    return m_value_isValid;
}

bool OAICisInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cis_line_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cis_line_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICisInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
