/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPension_2.h
 *
 * 
 */

#ifndef OAIPension_2_H
#define OAIPension_2_H

#include <QJsonObject>

#include "OAIObject.h"
#include "OAIPensionablePayCodes.h"
#include "OAIQualifyingPayCodes.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPensionablePayCodes;
class OAIQualifyingPayCodes;

class OAIPension_2 : public OAIObject {
public:
    OAIPension_2();
    OAIPension_2(QString json);
    ~OAIPension_2() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAeCompatible() const;
    void setAeCompatible(const bool &ae_compatible);
    bool is_ae_compatible_Set() const;
    bool is_ae_compatible_Valid() const;

    QString getCertification() const;
    void setCertification(const QString &certification);
    bool is_certification_Set() const;
    bool is_certification_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    qint32 getContributionDeductionDay() const;
    void setContributionDeductionDay(const qint32 &contribution_deduction_day);
    bool is_contribution_deduction_day_Set() const;
    bool is_contribution_deduction_day_Valid() const;

    QDate getEffectiveDate() const;
    void setEffectiveDate(const QDate &effective_date);
    bool is_effective_date_Set() const;
    bool is_effective_date_Valid() const;

    double getEmployeeContributionCash() const;
    void setEmployeeContributionCash(const double &employee_contribution_cash);
    bool is_employee_contribution_cash_Set() const;
    bool is_employee_contribution_cash_Valid() const;

    double getEmployeeContributionPercent() const;
    void setEmployeeContributionPercent(const double &employee_contribution_percent);
    bool is_employee_contribution_percent_Set() const;
    bool is_employee_contribution_percent_Valid() const;

    double getEmployerContributionCash() const;
    void setEmployerContributionCash(const double &employer_contribution_cash);
    bool is_employer_contribution_cash_Set() const;
    bool is_employer_contribution_cash_Valid() const;

    double getEmployerContributionPercent() const;
    void setEmployerContributionPercent(const double &employer_contribution_percent);
    bool is_employer_contribution_percent_Set() const;
    bool is_employer_contribution_percent_Valid() const;

    bool isEmployerNiSaving() const;
    void setEmployerNiSaving(const bool &employer_ni_saving);
    bool is_employer_ni_saving_Set() const;
    bool is_employer_ni_saving_Valid() const;

    double getEmployerNiSavingPercentage() const;
    void setEmployerNiSavingPercentage(const double &employer_ni_saving_percentage);
    bool is_employer_ni_saving_percentage_Set() const;
    bool is_employer_ni_saving_percentage_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    double getLowerThreshold() const;
    void setLowerThreshold(const double &lower_threshold);
    bool is_lower_threshold_Set() const;
    bool is_lower_threshold_Valid() const;

    OAIObject getMetaData() const;
    void setMetaData(const OAIObject &meta_data);
    bool is_meta_data_Set() const;
    bool is_meta_data_Valid() const;

    QDate getNextRevisionDate() const;
    void setNextRevisionDate(const QDate &next_revision_date);
    bool is_next_revision_date_Set() const;
    bool is_next_revision_date_Valid() const;

    OAIPensionablePayCodes getPensionablePayCodes() const;
    void setPensionablePayCodes(const OAIPensionablePayCodes &pensionable_pay_codes);
    bool is_pensionable_pay_codes_Set() const;
    bool is_pensionable_pay_codes_Valid() const;

    QString getProRataMethod() const;
    void setProRataMethod(const QString &pro_rata_method);
    bool is_pro_rata_method_Set() const;
    bool is_pro_rata_method_Valid() const;

    QString getProviderEmployerRef() const;
    void setProviderEmployerRef(const QString &provider_employer_ref);
    bool is_provider_employer_ref_Set() const;
    bool is_provider_employer_ref_Valid() const;

    QString getProviderName() const;
    void setProviderName(const QString &provider_name);
    bool is_provider_name_Set() const;
    bool is_provider_name_Valid() const;

    OAIQualifyingPayCodes getQualifyingPayCodes() const;
    void setQualifyingPayCodes(const OAIQualifyingPayCodes &qualifying_pay_codes);
    bool is_qualifying_pay_codes_Set() const;
    bool is_qualifying_pay_codes_Valid() const;

    QString getRasRoundingOverride() const;
    void setRasRoundingOverride(const QString &ras_rounding_override);
    bool is_ras_rounding_override_Set() const;
    bool is_ras_rounding_override_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QString getRoundingOption() const;
    void setRoundingOption(const QString &rounding_option);
    bool is_rounding_option_Set() const;
    bool is_rounding_option_Valid() const;

    bool isSalarySacrifice() const;
    void setSalarySacrifice(const bool &salary_sacrifice);
    bool is_salary_sacrifice_Set() const;
    bool is_salary_sacrifice_Valid() const;

    QString getSchemeName() const;
    void setSchemeName(const QString &scheme_name);
    bool is_scheme_name_Set() const;
    bool is_scheme_name_Valid() const;

    QString getSubGroup() const;
    void setSubGroup(const QString &sub_group);
    bool is_sub_group_Set() const;
    bool is_sub_group_Valid() const;

    QString getTaxationMethod() const;
    void setTaxationMethod(const QString &taxation_method);
    bool is_taxation_method_Set() const;
    bool is_taxation_method_Valid() const;

    double getUpperThreshold() const;
    void setUpperThreshold(const double &upper_threshold);
    bool is_upper_threshold_Set() const;
    bool is_upper_threshold_Valid() const;

    bool isUseAeThresholds() const;
    void setUseAeThresholds(const bool &use_ae_thresholds);
    bool is_use_ae_thresholds_Set() const;
    bool is_use_ae_thresholds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_ae_compatible;
    bool m_ae_compatible_isSet;
    bool m_ae_compatible_isValid;

    QString m_certification;
    bool m_certification_isSet;
    bool m_certification_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    qint32 m_contribution_deduction_day;
    bool m_contribution_deduction_day_isSet;
    bool m_contribution_deduction_day_isValid;

    QDate m_effective_date;
    bool m_effective_date_isSet;
    bool m_effective_date_isValid;

    double m_employee_contribution_cash;
    bool m_employee_contribution_cash_isSet;
    bool m_employee_contribution_cash_isValid;

    double m_employee_contribution_percent;
    bool m_employee_contribution_percent_isSet;
    bool m_employee_contribution_percent_isValid;

    double m_employer_contribution_cash;
    bool m_employer_contribution_cash_isSet;
    bool m_employer_contribution_cash_isValid;

    double m_employer_contribution_percent;
    bool m_employer_contribution_percent_isSet;
    bool m_employer_contribution_percent_isValid;

    bool m_employer_ni_saving;
    bool m_employer_ni_saving_isSet;
    bool m_employer_ni_saving_isValid;

    double m_employer_ni_saving_percentage;
    bool m_employer_ni_saving_percentage_isSet;
    bool m_employer_ni_saving_percentage_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    double m_lower_threshold;
    bool m_lower_threshold_isSet;
    bool m_lower_threshold_isValid;

    OAIObject m_meta_data;
    bool m_meta_data_isSet;
    bool m_meta_data_isValid;

    QDate m_next_revision_date;
    bool m_next_revision_date_isSet;
    bool m_next_revision_date_isValid;

    OAIPensionablePayCodes m_pensionable_pay_codes;
    bool m_pensionable_pay_codes_isSet;
    bool m_pensionable_pay_codes_isValid;

    QString m_pro_rata_method;
    bool m_pro_rata_method_isSet;
    bool m_pro_rata_method_isValid;

    QString m_provider_employer_ref;
    bool m_provider_employer_ref_isSet;
    bool m_provider_employer_ref_isValid;

    QString m_provider_name;
    bool m_provider_name_isSet;
    bool m_provider_name_isValid;

    OAIQualifyingPayCodes m_qualifying_pay_codes;
    bool m_qualifying_pay_codes_isSet;
    bool m_qualifying_pay_codes_isValid;

    QString m_ras_rounding_override;
    bool m_ras_rounding_override_isSet;
    bool m_ras_rounding_override_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QString m_rounding_option;
    bool m_rounding_option_isSet;
    bool m_rounding_option_isValid;

    bool m_salary_sacrifice;
    bool m_salary_sacrifice_isSet;
    bool m_salary_sacrifice_isValid;

    QString m_scheme_name;
    bool m_scheme_name_isSet;
    bool m_scheme_name_isValid;

    QString m_sub_group;
    bool m_sub_group_isSet;
    bool m_sub_group_isValid;

    QString m_taxation_method;
    bool m_taxation_method_isSet;
    bool m_taxation_method_isValid;

    double m_upper_threshold;
    bool m_upper_threshold_isSet;
    bool m_upper_threshold_isValid;

    bool m_use_ae_thresholds;
    bool m_use_ae_thresholds_isSet;
    bool m_use_ae_thresholds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPension_2)

#endif // OAIPension_2_H
