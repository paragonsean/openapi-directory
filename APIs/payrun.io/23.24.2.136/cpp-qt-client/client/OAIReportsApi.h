/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAIHttpFileElement.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIReportDefinition.h"
#include "OAITransformDefinition.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  report_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteReportDefinition(const QString &report_definition_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  transform_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteTransformDefinition(const QString &transform_definition_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  employee_key QString [required]
    * @param[in]  from_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  active_on QDate [optional]
    * @param[in]  to_date QDate [optional]
    * @param[in]  type QString [optional]
    */
    virtual void getActivePayInstructionsReportOutput(const QString &employer_key, const QString &employee_key, const QDate &from_date, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QDate> &active_on = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tax_period qint32 [optional]
    * @param[in]  transform_definition_key QString [optional]
    */
    virtual void getAoeLiabilityReportOuput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &tax_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  from_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  to_date QDate [optional]
    * @param[in]  message_types QString [optional]
    * @param[in]  message_statuses QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getDpsMessageReportOutput(const QString &employer_key, const QDate &from_date, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QDate> &to_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &message_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &message_statuses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  context_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployerSummaryReportOuput(const QString &employer_key, const QDate &context_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tax_period qint32 [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getGrossToNetReportOutput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &tax_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  holiday_year_end QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  employee_codes QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getHolidayBalanceReportOutput(const QString &employer_key, const QDate &holiday_year_end, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &employee_codes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_frequency QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  ledger_target QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tax_period qint32 [optional]
    */
    virtual void getJournalReportOuput(const QString &employer_key, const QString &pay_frequency, const qint32 &tax_year, const QString &ledger_target, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &tax_period = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  employee_key QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getLastPayDateReportOuput(const QString &employer_key, const QString &employee_key, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  tax_period qint32 [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getNetPayReportOutput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &tax_period = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getNextPayPeriodDatesReportOutput(const QString &employer_key, const QString &pay_schedule_key, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getP11SummaryReportOutput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getP32NetReportOutput(const QString &employer_key, const qint32 &tax_year, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getP32SummaryNetReportOutput(const QString &employer_key, const qint32 &tax_year, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  employee_key QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  transform_definition_key QString [optional]
    */
    virtual void getP45ReportOutput(const QString &employer_key, const QString &employee_key, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  employee_codes QString [optional]
    * @param[in]  transform_definition_key QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    */
    virtual void getP60ReportOutput(const QString &employer_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &employee_codes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  pension_key QString [required]
    * @param[in]  message_function_code QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  payment_date QDate [optional]
    * @param[in]  transform_definition_key QString [optional]
    */
    virtual void getPapdisReportOuput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &pension_key, const QString &message_function_code, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QDate> &payment_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  pension_key QString [required]
    * @param[in]  message_function_code QString [required]
    * @param[in]  intermediary_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  payment_date QDate [optional]
    */
    virtual void getPassReportOuput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &pension_key, const QString &message_function_code, const QString &intermediary_id, const QString &document_id, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QDate> &payment_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  publication_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  employee_codes QString [optional]
    * @param[in]  transform_definition_key QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    * @param[in]  payment_date QDate [optional]
    */
    virtual void getPayDashboardPayslipReportOuput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QDate &publication_date, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &employee_codes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &payment_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  pay_schedule_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  employee_codes QString [optional]
    * @param[in]  transform_definition_key QString [optional]
    * @param[in]  start_index QString [optional]
    * @param[in]  max_index QString [optional]
    * @param[in]  payment_date QDate [optional]
    */
    virtual void getPayslip3ReportOutput(const QString &employer_key, const QString &pay_schedule_key, const qint32 &tax_year, const QString &authorization, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &employee_codes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transform_definition_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_index = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &payment_date = ::OpenAPI::OptionalParam<QDate>());

    /**
    * @param[in]  employer_key QString [required]
    * @param[in]  tax_year qint32 [required]
    * @param[in]  pension_key QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionLiabilityReportOutput(const QString &employer_key, const qint32 &tax_year, const QString &pension_key, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  report_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportDefinitionFromApplication(const QString &report_definition_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportDefinitionsFromApplication(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  report_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportOutput(const QString &report_definition_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  transform_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTransformDefinitionFromApplication(const QString &transform_definition_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTransformDefinitionsFromApplication(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_report_definition OAIReportDefinition [required]
    */
    virtual void postReportDefinition(const QString &authorization, const QString &api_version, const OAIReportDefinition &oai_report_definition);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_transform_definition OAITransformDefinition [required]
    */
    virtual void postTransformDefinition(const QString &authorization, const QString &api_version, const OAITransformDefinition &oai_transform_definition);

    /**
    * @param[in]  report_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_report_definition OAIReportDefinition [required]
    */
    virtual void putReportDefinition(const QString &report_definition_id, const QString &authorization, const QString &api_version, const OAIReportDefinition &oai_report_definition);

    /**
    * @param[in]  transform_definition_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_transform_definition OAITransformDefinition [required]
    */
    virtual void putTransformDefinition(const QString &transform_definition_id, const QString &authorization, const QString &api_version, const OAITransformDefinition &oai_transform_definition);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteReportDefinitionCallback(OAIHttpRequestWorker *worker);
    void deleteTransformDefinitionCallback(OAIHttpRequestWorker *worker);
    void getActivePayInstructionsReportOutputCallback(OAIHttpRequestWorker *worker);
    void getAoeLiabilityReportOuputCallback(OAIHttpRequestWorker *worker);
    void getDpsMessageReportOutputCallback(OAIHttpRequestWorker *worker);
    void getEmployerSummaryReportOuputCallback(OAIHttpRequestWorker *worker);
    void getGrossToNetReportOutputCallback(OAIHttpRequestWorker *worker);
    void getHolidayBalanceReportOutputCallback(OAIHttpRequestWorker *worker);
    void getJournalReportOuputCallback(OAIHttpRequestWorker *worker);
    void getLastPayDateReportOuputCallback(OAIHttpRequestWorker *worker);
    void getNetPayReportOutputCallback(OAIHttpRequestWorker *worker);
    void getNextPayPeriodDatesReportOutputCallback(OAIHttpRequestWorker *worker);
    void getP11SummaryReportOutputCallback(OAIHttpRequestWorker *worker);
    void getP32NetReportOutputCallback(OAIHttpRequestWorker *worker);
    void getP32SummaryNetReportOutputCallback(OAIHttpRequestWorker *worker);
    void getP45ReportOutputCallback(OAIHttpRequestWorker *worker);
    void getP60ReportOutputCallback(OAIHttpRequestWorker *worker);
    void getPapdisReportOuputCallback(OAIHttpRequestWorker *worker);
    void getPassReportOuputCallback(OAIHttpRequestWorker *worker);
    void getPayDashboardPayslipReportOuputCallback(OAIHttpRequestWorker *worker);
    void getPayslip3ReportOutputCallback(OAIHttpRequestWorker *worker);
    void getPensionLiabilityReportOutputCallback(OAIHttpRequestWorker *worker);
    void getReportDefinitionFromApplicationCallback(OAIHttpRequestWorker *worker);
    void getReportDefinitionsFromApplicationCallback(OAIHttpRequestWorker *worker);
    void getReportOutputCallback(OAIHttpRequestWorker *worker);
    void getTransformDefinitionFromApplicationCallback(OAIHttpRequestWorker *worker);
    void getTransformDefinitionsFromApplicationCallback(OAIHttpRequestWorker *worker);
    void postReportDefinitionCallback(OAIHttpRequestWorker *worker);
    void postTransformDefinitionCallback(OAIHttpRequestWorker *worker);
    void putReportDefinitionCallback(OAIHttpRequestWorker *worker);
    void putTransformDefinitionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteReportDefinitionSignal();
    void deleteTransformDefinitionSignal();
    void getActivePayInstructionsReportOutputSignal(OAIHttpFileElement summary);
    void getAoeLiabilityReportOuputSignal(OAIHttpFileElement summary);
    void getDpsMessageReportOutputSignal(OAIHttpFileElement summary);
    void getEmployerSummaryReportOuputSignal(OAIHttpFileElement summary);
    void getGrossToNetReportOutputSignal(OAIHttpFileElement summary);
    void getHolidayBalanceReportOutputSignal(OAIHttpFileElement summary);
    void getJournalReportOuputSignal(OAIHttpFileElement summary);
    void getLastPayDateReportOuputSignal(OAIHttpFileElement summary);
    void getNetPayReportOutputSignal(OAIHttpFileElement summary);
    void getNextPayPeriodDatesReportOutputSignal(OAIHttpFileElement summary);
    void getP11SummaryReportOutputSignal(OAIHttpFileElement summary);
    void getP32NetReportOutputSignal(OAIHttpFileElement summary);
    void getP32SummaryNetReportOutputSignal(OAIHttpFileElement summary);
    void getP45ReportOutputSignal(OAIHttpFileElement summary);
    void getP60ReportOutputSignal(OAIHttpFileElement summary);
    void getPapdisReportOuputSignal(OAIHttpFileElement summary);
    void getPassReportOuputSignal(OAIHttpFileElement summary);
    void getPayDashboardPayslipReportOuputSignal(OAIHttpFileElement summary);
    void getPayslip3ReportOutputSignal(OAIHttpFileElement summary);
    void getPensionLiabilityReportOutputSignal(OAIHttpFileElement summary);
    void getReportDefinitionFromApplicationSignal(OAIReportDefinition summary);
    void getReportDefinitionsFromApplicationSignal(OAILinkCollection summary);
    void getReportOutputSignal(OAIHttpFileElement summary);
    void getTransformDefinitionFromApplicationSignal(OAITransformDefinition summary);
    void getTransformDefinitionsFromApplicationSignal(OAILinkCollection summary);
    void postReportDefinitionSignal(OAILink summary);
    void postTransformDefinitionSignal(OAILink summary);
    void putReportDefinitionSignal(OAIReportDefinition summary);
    void putTransformDefinitionSignal(OAITransformDefinition summary);


    void deleteReportDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void deleteTransformDefinitionSignalFull(OAIHttpRequestWorker *worker);
    void getActivePayInstructionsReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getAoeLiabilityReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getDpsMessageReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getEmployerSummaryReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getGrossToNetReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getHolidayBalanceReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getJournalReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getLastPayDateReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getNetPayReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getNextPayPeriodDatesReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getP11SummaryReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getP32NetReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getP32SummaryNetReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getP45ReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getP60ReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPapdisReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPassReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPayDashboardPayslipReportOuputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPayslip3ReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getPensionLiabilityReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getReportDefinitionFromApplicationSignalFull(OAIHttpRequestWorker *worker, OAIReportDefinition summary);
    void getReportDefinitionsFromApplicationSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getReportOutputSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getTransformDefinitionFromApplicationSignalFull(OAIHttpRequestWorker *worker, OAITransformDefinition summary);
    void getTransformDefinitionsFromApplicationSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postReportDefinitionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postTransformDefinitionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putReportDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIReportDefinition summary);
    void putTransformDefinitionSignalFull(OAIHttpRequestWorker *worker, OAITransformDefinition summary);

    Q_DECL_DEPRECATED_X("Use deleteReportDefinitionSignalError() instead")
    void deleteReportDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransformDefinitionSignalError() instead")
    void deleteTransformDefinitionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransformDefinitionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivePayInstructionsReportOutputSignalError() instead")
    void getActivePayInstructionsReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivePayInstructionsReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAoeLiabilityReportOuputSignalError() instead")
    void getAoeLiabilityReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAoeLiabilityReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessageReportOutputSignalError() instead")
    void getDpsMessageReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessageReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummaryReportOuputSignalError() instead")
    void getEmployerSummaryReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummaryReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGrossToNetReportOutputSignalError() instead")
    void getGrossToNetReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGrossToNetReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidayBalanceReportOutputSignalError() instead")
    void getHolidayBalanceReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidayBalanceReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalReportOuputSignalError() instead")
    void getJournalReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastPayDateReportOuputSignalError() instead")
    void getLastPayDateReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastPayDateReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetPayReportOutputSignalError() instead")
    void getNetPayReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetPayReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextPayPeriodDatesReportOutputSignalError() instead")
    void getNextPayPeriodDatesReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextPayPeriodDatesReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP11SummaryReportOutputSignalError() instead")
    void getP11SummaryReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getP11SummaryReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP32NetReportOutputSignalError() instead")
    void getP32NetReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getP32NetReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP32SummaryNetReportOutputSignalError() instead")
    void getP32SummaryNetReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getP32SummaryNetReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP45ReportOutputSignalError() instead")
    void getP45ReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getP45ReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP60ReportOutputSignalError() instead")
    void getP60ReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getP60ReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPapdisReportOuputSignalError() instead")
    void getPapdisReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPapdisReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPassReportOuputSignalError() instead")
    void getPassReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPassReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayDashboardPayslipReportOuputSignalError() instead")
    void getPayDashboardPayslipReportOuputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayDashboardPayslipReportOuputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayslip3ReportOutputSignalError() instead")
    void getPayslip3ReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayslip3ReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionLiabilityReportOutputSignalError() instead")
    void getPensionLiabilityReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionLiabilityReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportDefinitionFromApplicationSignalError() instead")
    void getReportDefinitionFromApplicationSignalE(OAIReportDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportDefinitionFromApplicationSignalError(OAIReportDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportDefinitionsFromApplicationSignalError() instead")
    void getReportDefinitionsFromApplicationSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportDefinitionsFromApplicationSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportOutputSignalError() instead")
    void getReportOutputSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportOutputSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransformDefinitionFromApplicationSignalError() instead")
    void getTransformDefinitionFromApplicationSignalE(OAITransformDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransformDefinitionFromApplicationSignalError(OAITransformDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransformDefinitionsFromApplicationSignalError() instead")
    void getTransformDefinitionsFromApplicationSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransformDefinitionsFromApplicationSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postReportDefinitionSignalError() instead")
    void postReportDefinitionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postReportDefinitionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransformDefinitionSignalError() instead")
    void postTransformDefinitionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransformDefinitionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putReportDefinitionSignalError() instead")
    void putReportDefinitionSignalE(OAIReportDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putReportDefinitionSignalError(OAIReportDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putTransformDefinitionSignalError() instead")
    void putTransformDefinitionSignalE(OAITransformDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putTransformDefinitionSignalError(OAITransformDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteReportDefinitionSignalErrorFull() instead")
    void deleteReportDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReportDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTransformDefinitionSignalErrorFull() instead")
    void deleteTransformDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTransformDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getActivePayInstructionsReportOutputSignalErrorFull() instead")
    void getActivePayInstructionsReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getActivePayInstructionsReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAoeLiabilityReportOuputSignalErrorFull() instead")
    void getAoeLiabilityReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAoeLiabilityReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDpsMessageReportOutputSignalErrorFull() instead")
    void getDpsMessageReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDpsMessageReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployerSummaryReportOuputSignalErrorFull() instead")
    void getEmployerSummaryReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployerSummaryReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGrossToNetReportOutputSignalErrorFull() instead")
    void getGrossToNetReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGrossToNetReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHolidayBalanceReportOutputSignalErrorFull() instead")
    void getHolidayBalanceReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHolidayBalanceReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalReportOuputSignalErrorFull() instead")
    void getJournalReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLastPayDateReportOuputSignalErrorFull() instead")
    void getLastPayDateReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLastPayDateReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNetPayReportOutputSignalErrorFull() instead")
    void getNetPayReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNetPayReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getNextPayPeriodDatesReportOutputSignalErrorFull() instead")
    void getNextPayPeriodDatesReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getNextPayPeriodDatesReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP11SummaryReportOutputSignalErrorFull() instead")
    void getP11SummaryReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getP11SummaryReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP32NetReportOutputSignalErrorFull() instead")
    void getP32NetReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getP32NetReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP32SummaryNetReportOutputSignalErrorFull() instead")
    void getP32SummaryNetReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getP32SummaryNetReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP45ReportOutputSignalErrorFull() instead")
    void getP45ReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getP45ReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getP60ReportOutputSignalErrorFull() instead")
    void getP60ReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getP60ReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPapdisReportOuputSignalErrorFull() instead")
    void getPapdisReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPapdisReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPassReportOuputSignalErrorFull() instead")
    void getPassReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPassReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayDashboardPayslipReportOuputSignalErrorFull() instead")
    void getPayDashboardPayslipReportOuputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayDashboardPayslipReportOuputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayslip3ReportOutputSignalErrorFull() instead")
    void getPayslip3ReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayslip3ReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionLiabilityReportOutputSignalErrorFull() instead")
    void getPensionLiabilityReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionLiabilityReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportDefinitionFromApplicationSignalErrorFull() instead")
    void getReportDefinitionFromApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportDefinitionFromApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportDefinitionsFromApplicationSignalErrorFull() instead")
    void getReportDefinitionsFromApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportDefinitionsFromApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportOutputSignalErrorFull() instead")
    void getReportOutputSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportOutputSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransformDefinitionFromApplicationSignalErrorFull() instead")
    void getTransformDefinitionFromApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransformDefinitionFromApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransformDefinitionsFromApplicationSignalErrorFull() instead")
    void getTransformDefinitionsFromApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransformDefinitionsFromApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postReportDefinitionSignalErrorFull() instead")
    void postReportDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postReportDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTransformDefinitionSignalErrorFull() instead")
    void postTransformDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTransformDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putReportDefinitionSignalErrorFull() instead")
    void putReportDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putReportDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putTransformDefinitionSignalErrorFull() instead")
    void putTransformDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putTransformDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
