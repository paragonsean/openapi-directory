/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICisLine_1.h
 *
 * 
 */

#ifndef OAICisLine_1_H
#define OAICisLine_1_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICisLine_1 : public OAIObject {
public:
    OAICisLine_1();
    OAICisLine_1(QString json);
    ~OAICisLine_1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCisDeduction() const;
    void setCisDeduction(const double &cis_deduction);
    bool is_cis_deduction_Set() const;
    bool is_cis_deduction_Valid() const;

    QString getCisLineType() const;
    void setCisLineType(const QString &cis_line_type);
    bool is_cis_line_type_Set() const;
    bool is_cis_line_type_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QDateTime getGenerated() const;
    void setGenerated(const QDateTime &generated);
    bool is_generated_Set() const;
    bool is_generated_Valid() const;

    double getGrossPay() const;
    void setGrossPay(const double &gross_pay);
    bool is_gross_pay_Set() const;
    bool is_gross_pay_Valid() const;

    QString getNominalCodeKey() const;
    void setNominalCodeKey(const QString &nominal_code_key);
    bool is_nominal_code_key_Set() const;
    bool is_nominal_code_key_Valid() const;

    QString getPayFrequency() const;
    void setPayFrequency(const QString &pay_frequency);
    bool is_pay_frequency_Set() const;
    bool is_pay_frequency_Valid() const;

    qint32 getTaxMonth() const;
    void setTaxMonth(const qint32 &tax_month);
    bool is_tax_month_Set() const;
    bool is_tax_month_Valid() const;

    qint32 getTaxPeriod() const;
    void setTaxPeriod(const qint32 &tax_period);
    bool is_tax_period_Set() const;
    bool is_tax_period_Valid() const;

    QString getTaxTreatment() const;
    void setTaxTreatment(const QString &tax_treatment);
    bool is_tax_treatment_Set() const;
    bool is_tax_treatment_Valid() const;

    qint32 getTaxYear() const;
    void setTaxYear(const qint32 &tax_year);
    bool is_tax_year_Set() const;
    bool is_tax_year_Valid() const;

    QString getUom() const;
    void setUom(const QString &uom);
    bool is_uom_Set() const;
    bool is_uom_Valid() const;

    double getUnitRate() const;
    void setUnitRate(const double &unit_rate);
    bool is_unit_rate_Set() const;
    bool is_unit_rate_Valid() const;

    double getUnits() const;
    void setUnits(const double &units);
    bool is_units_Set() const;
    bool is_units_Valid() const;

    double getVat() const;
    void setVat(const double &vat);
    bool is_vat_Set() const;
    bool is_vat_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_cis_deduction;
    bool m_cis_deduction_isSet;
    bool m_cis_deduction_isValid;

    QString m_cis_line_type;
    bool m_cis_line_type_isSet;
    bool m_cis_line_type_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QDateTime m_generated;
    bool m_generated_isSet;
    bool m_generated_isValid;

    double m_gross_pay;
    bool m_gross_pay_isSet;
    bool m_gross_pay_isValid;

    QString m_nominal_code_key;
    bool m_nominal_code_key_isSet;
    bool m_nominal_code_key_isValid;

    QString m_pay_frequency;
    bool m_pay_frequency_isSet;
    bool m_pay_frequency_isValid;

    qint32 m_tax_month;
    bool m_tax_month_isSet;
    bool m_tax_month_isValid;

    qint32 m_tax_period;
    bool m_tax_period_isSet;
    bool m_tax_period_isValid;

    QString m_tax_treatment;
    bool m_tax_treatment_isSet;
    bool m_tax_treatment_isValid;

    qint32 m_tax_year;
    bool m_tax_year_isSet;
    bool m_tax_year_isValid;

    QString m_uom;
    bool m_uom_isSet;
    bool m_uom_isValid;

    double m_unit_rate;
    bool m_unit_rate_isSet;
    bool m_unit_rate_isValid;

    double m_units;
    bool m_units_isSet;
    bool m_units_isValid;

    double m_vat;
    bool m_vat_isSet;
    bool m_vat_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICisLine_1)

#endif // OAICisLine_1_H
