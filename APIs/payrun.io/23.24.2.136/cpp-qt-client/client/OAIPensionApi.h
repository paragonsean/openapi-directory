/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPensionApi_H
#define OAI_OAIPensionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPension.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPensionApi : public QObject {
    Q_OBJECT

public:
    OAIPensionApi(const int timeOut = 0);
    ~OAIPensionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePension(const QString &employer_id, const QString &pension_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePensionRevision(const QString &employer_id, const QString &pension_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePensionRevisionByNumber(const QString &employer_id, const QString &pension_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionByEffectiveDate(const QString &employer_id, const QString &pension_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionFromEmployer(const QString &employer_id, const QString &pension_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionRevisionByNumber(const QString &employer_id, const QString &pension_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionRevisions(const QString &employer_id, const QString &pension_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionsByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPensionsFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pension OAIPension [required]
    */
    virtual void patchPension(const QString &employer_id, const QString &pension_id, const QString &authorization, const QString &api_version, const OAIPension &oai_pension);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pension OAIPension [required]
    */
    virtual void postPensionIntoEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIPension &oai_pension);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pension_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pension OAIPension [required]
    */
    virtual void putPensionIntoEmployer(const QString &employer_id, const QString &pension_id, const QString &authorization, const QString &api_version, const OAIPension &oai_pension);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePensionCallback(OAIHttpRequestWorker *worker);
    void deletePensionRevisionCallback(OAIHttpRequestWorker *worker);
    void deletePensionRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getPensionByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getPensionFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getPensionRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getPensionRevisionsCallback(OAIHttpRequestWorker *worker);
    void getPensionsByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getPensionsFromEmployerCallback(OAIHttpRequestWorker *worker);
    void patchPensionCallback(OAIHttpRequestWorker *worker);
    void postPensionIntoEmployerCallback(OAIHttpRequestWorker *worker);
    void putPensionIntoEmployerCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePensionSignal();
    void deletePensionRevisionSignal();
    void deletePensionRevisionByNumberSignal();
    void getPensionByEffectiveDateSignal(OAIPension summary);
    void getPensionFromEmployerSignal(OAIPension summary);
    void getPensionRevisionByNumberSignal(OAIPension summary);
    void getPensionRevisionsSignal(OAILinkCollection summary);
    void getPensionsByEffectiveDateSignal(OAILinkCollection summary);
    void getPensionsFromEmployerSignal(OAILinkCollection summary);
    void patchPensionSignal(OAIPension summary);
    void postPensionIntoEmployerSignal(OAILink summary);
    void putPensionIntoEmployerSignal(OAIPension summary);


    void deletePensionSignalFull(OAIHttpRequestWorker *worker);
    void deletePensionRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deletePensionRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void getPensionByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIPension summary);
    void getPensionFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIPension summary);
    void getPensionRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAIPension summary);
    void getPensionRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPensionsByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPensionsFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchPensionSignalFull(OAIHttpRequestWorker *worker, OAIPension summary);
    void postPensionIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putPensionIntoEmployerSignalFull(OAIHttpRequestWorker *worker, OAIPension summary);

    Q_DECL_DEPRECATED_X("Use deletePensionSignalError() instead")
    void deletePensionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePensionRevisionSignalError() instead")
    void deletePensionRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePensionRevisionByNumberSignalError() instead")
    void deletePensionRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionByEffectiveDateSignalError() instead")
    void getPensionByEffectiveDateSignalE(OAIPension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionByEffectiveDateSignalError(OAIPension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionFromEmployerSignalError() instead")
    void getPensionFromEmployerSignalE(OAIPension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionFromEmployerSignalError(OAIPension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionRevisionByNumberSignalError() instead")
    void getPensionRevisionByNumberSignalE(OAIPension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionRevisionByNumberSignalError(OAIPension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionRevisionsSignalError() instead")
    void getPensionRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionsByEffectiveDateSignalError() instead")
    void getPensionsByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionsByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionsFromEmployerSignalError() instead")
    void getPensionsFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionsFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPensionSignalError() instead")
    void patchPensionSignalE(OAIPension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPensionSignalError(OAIPension summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPensionIntoEmployerSignalError() instead")
    void postPensionIntoEmployerSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPensionIntoEmployerSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPensionIntoEmployerSignalError() instead")
    void putPensionIntoEmployerSignalE(OAIPension summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPensionIntoEmployerSignalError(OAIPension summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePensionSignalErrorFull() instead")
    void deletePensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePensionRevisionSignalErrorFull() instead")
    void deletePensionRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePensionRevisionByNumberSignalErrorFull() instead")
    void deletePensionRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePensionRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionByEffectiveDateSignalErrorFull() instead")
    void getPensionByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionFromEmployerSignalErrorFull() instead")
    void getPensionFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionRevisionByNumberSignalErrorFull() instead")
    void getPensionRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionRevisionsSignalErrorFull() instead")
    void getPensionRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionsByEffectiveDateSignalErrorFull() instead")
    void getPensionsByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionsByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPensionsFromEmployerSignalErrorFull() instead")
    void getPensionsFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPensionsFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPensionSignalErrorFull() instead")
    void patchPensionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPensionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPensionIntoEmployerSignalErrorFull() instead")
    void postPensionIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPensionIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPensionIntoEmployerSignalErrorFull() instead")
    void putPensionIntoEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPensionIntoEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
