/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportingInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportingInstruction_1::OAIReportingInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportingInstruction_1::OAIReportingInstruction_1() {
    this->initializeModel();
}

OAIReportingInstruction_1::~OAIReportingInstruction_1() {}

void OAIReportingInstruction_1::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_tax_month_isSet = false;
    m_tax_month_isValid = false;

    m_tax_year_isSet = false;
    m_tax_year_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIReportingInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportingInstruction_1::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_tax_month_isValid = ::OpenAPI::fromJsonValue(m_tax_month, json[QString("TaxMonth")]);
    m_tax_month_isSet = !json[QString("TaxMonth")].isNull() && m_tax_month_isValid;

    m_tax_year_isValid = ::OpenAPI::fromJsonValue(m_tax_year, json[QString("TaxYear")]);
    m_tax_year_isSet = !json[QString("TaxYear")].isNull() && m_tax_year_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("Value")]);
    m_value_isSet = !json[QString("Value")].isNull() && m_value_isValid;
}

QString OAIReportingInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportingInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_tax_month_isSet) {
        obj.insert(QString("TaxMonth"), ::OpenAPI::toJsonValue(m_tax_month));
    }
    if (m_tax_year_isSet) {
        obj.insert(QString("TaxYear"), ::OpenAPI::toJsonValue(m_tax_year));
    }
    if (m_value_isSet) {
        obj.insert(QString("Value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDate OAIReportingInstruction_1::getEndDate() const {
    return m_end_date;
}
void OAIReportingInstruction_1::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIReportingInstruction_1::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIReportingInstruction_1::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDate OAIReportingInstruction_1::getStartDate() const {
    return m_start_date;
}
void OAIReportingInstruction_1::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIReportingInstruction_1::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIReportingInstruction_1::is_start_date_Valid() const{
    return m_start_date_isValid;
}

qint32 OAIReportingInstruction_1::getTaxMonth() const {
    return m_tax_month;
}
void OAIReportingInstruction_1::setTaxMonth(const qint32 &tax_month) {
    m_tax_month = tax_month;
    m_tax_month_isSet = true;
}

bool OAIReportingInstruction_1::is_tax_month_Set() const{
    return m_tax_month_isSet;
}

bool OAIReportingInstruction_1::is_tax_month_Valid() const{
    return m_tax_month_isValid;
}

qint32 OAIReportingInstruction_1::getTaxYear() const {
    return m_tax_year;
}
void OAIReportingInstruction_1::setTaxYear(const qint32 &tax_year) {
    m_tax_year = tax_year;
    m_tax_year_isSet = true;
}

bool OAIReportingInstruction_1::is_tax_year_Set() const{
    return m_tax_year_isSet;
}

bool OAIReportingInstruction_1::is_tax_year_Valid() const{
    return m_tax_year_isValid;
}

double OAIReportingInstruction_1::getValue() const {
    return m_value;
}
void OAIReportingInstruction_1::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIReportingInstruction_1::is_value_Set() const{
    return m_value_isSet;
}

bool OAIReportingInstruction_1::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIReportingInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportingInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
