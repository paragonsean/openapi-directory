/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddress_2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddress_2::OAIAddress_2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddress_2::OAIAddress_2() {
    this->initializeModel();
}

OAIAddress_2::~OAIAddress_2() {}

void OAIAddress_2::initializeModel() {

    m_address1_isSet = false;
    m_address1_isValid = false;

    m_address2_isSet = false;
    m_address2_isValid = false;

    m_address3_isSet = false;
    m_address3_isValid = false;

    m_address4_isSet = false;
    m_address4_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postcode_isSet = false;
    m_postcode_isValid = false;
}

void OAIAddress_2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddress_2::fromJsonObject(QJsonObject json) {

    m_address1_isValid = ::OpenAPI::fromJsonValue(m_address1, json[QString("Address1")]);
    m_address1_isSet = !json[QString("Address1")].isNull() && m_address1_isValid;

    m_address2_isValid = ::OpenAPI::fromJsonValue(m_address2, json[QString("Address2")]);
    m_address2_isSet = !json[QString("Address2")].isNull() && m_address2_isValid;

    m_address3_isValid = ::OpenAPI::fromJsonValue(m_address3, json[QString("Address3")]);
    m_address3_isSet = !json[QString("Address3")].isNull() && m_address3_isValid;

    m_address4_isValid = ::OpenAPI::fromJsonValue(m_address4, json[QString("Address4")]);
    m_address4_isSet = !json[QString("Address4")].isNull() && m_address4_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_postcode_isValid = ::OpenAPI::fromJsonValue(m_postcode, json[QString("Postcode")]);
    m_postcode_isSet = !json[QString("Postcode")].isNull() && m_postcode_isValid;
}

QString OAIAddress_2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddress_2::asJsonObject() const {
    QJsonObject obj;
    if (m_address1_isSet) {
        obj.insert(QString("Address1"), ::OpenAPI::toJsonValue(m_address1));
    }
    if (m_address2_isSet) {
        obj.insert(QString("Address2"), ::OpenAPI::toJsonValue(m_address2));
    }
    if (m_address3_isSet) {
        obj.insert(QString("Address3"), ::OpenAPI::toJsonValue(m_address3));
    }
    if (m_address4_isSet) {
        obj.insert(QString("Address4"), ::OpenAPI::toJsonValue(m_address4));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postcode_isSet) {
        obj.insert(QString("Postcode"), ::OpenAPI::toJsonValue(m_postcode));
    }
    return obj;
}

QString OAIAddress_2::getAddress1() const {
    return m_address1;
}
void OAIAddress_2::setAddress1(const QString &address1) {
    m_address1 = address1;
    m_address1_isSet = true;
}

bool OAIAddress_2::is_address1_Set() const{
    return m_address1_isSet;
}

bool OAIAddress_2::is_address1_Valid() const{
    return m_address1_isValid;
}

QString OAIAddress_2::getAddress2() const {
    return m_address2;
}
void OAIAddress_2::setAddress2(const QString &address2) {
    m_address2 = address2;
    m_address2_isSet = true;
}

bool OAIAddress_2::is_address2_Set() const{
    return m_address2_isSet;
}

bool OAIAddress_2::is_address2_Valid() const{
    return m_address2_isValid;
}

QString OAIAddress_2::getAddress3() const {
    return m_address3;
}
void OAIAddress_2::setAddress3(const QString &address3) {
    m_address3 = address3;
    m_address3_isSet = true;
}

bool OAIAddress_2::is_address3_Set() const{
    return m_address3_isSet;
}

bool OAIAddress_2::is_address3_Valid() const{
    return m_address3_isValid;
}

QString OAIAddress_2::getAddress4() const {
    return m_address4;
}
void OAIAddress_2::setAddress4(const QString &address4) {
    m_address4 = address4;
    m_address4_isSet = true;
}

bool OAIAddress_2::is_address4_Set() const{
    return m_address4_isSet;
}

bool OAIAddress_2::is_address4_Valid() const{
    return m_address4_isValid;
}

QString OAIAddress_2::getCountry() const {
    return m_country;
}
void OAIAddress_2::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAddress_2::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAddress_2::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIAddress_2::getPostcode() const {
    return m_postcode;
}
void OAIAddress_2::setPostcode(const QString &postcode) {
    m_postcode = postcode;
    m_postcode_isSet = true;
}

bool OAIAddress_2::is_postcode_Set() const{
    return m_postcode_isSet;
}

bool OAIAddress_2::is_postcode_Valid() const{
    return m_postcode_isValid;
}

bool OAIAddress_2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postcode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddress_2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
