/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHolidaySchemeApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIHolidaySchemeApi::OAIHolidaySchemeApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIHolidaySchemeApi::~OAIHolidaySchemeApi() {
}

void OAIHolidaySchemeApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.test.payrun.io"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("deleteHolidayScheme", defaultConf);
    _serverIndices.insert("deleteHolidayScheme", 0);
    _serverConfigs.insert("deleteHolidaySchemeRevision", defaultConf);
    _serverIndices.insert("deleteHolidaySchemeRevision", 0);
    _serverConfigs.insert("deleteHolidaySchemeRevisionByNumber", defaultConf);
    _serverIndices.insert("deleteHolidaySchemeRevisionByNumber", 0);
    _serverConfigs.insert("deleteHolidaySchemeTag", defaultConf);
    _serverIndices.insert("deleteHolidaySchemeTag", 0);
    _serverConfigs.insert("getAllHolidaySchemeTags", defaultConf);
    _serverIndices.insert("getAllHolidaySchemeTags", 0);
    _serverConfigs.insert("getHolidaySchemeByEffectiveDate", defaultConf);
    _serverIndices.insert("getHolidaySchemeByEffectiveDate", 0);
    _serverConfigs.insert("getHolidaySchemeFromEmployer", defaultConf);
    _serverIndices.insert("getHolidaySchemeFromEmployer", 0);
    _serverConfigs.insert("getHolidaySchemeRevisionByNumber", defaultConf);
    _serverIndices.insert("getHolidaySchemeRevisionByNumber", 0);
    _serverConfigs.insert("getHolidaySchemeRevisions", defaultConf);
    _serverIndices.insert("getHolidaySchemeRevisions", 0);
    _serverConfigs.insert("getHolidaySchemesByEffectiveDate", defaultConf);
    _serverIndices.insert("getHolidaySchemesByEffectiveDate", 0);
    _serverConfigs.insert("getHolidaySchemesFromEmployer", defaultConf);
    _serverIndices.insert("getHolidaySchemesFromEmployer", 0);
    _serverConfigs.insert("getHolidaySchemesWithTag", defaultConf);
    _serverIndices.insert("getHolidaySchemesWithTag", 0);
    _serverConfigs.insert("getTagFromHolidaySchemeRevision", defaultConf);
    _serverIndices.insert("getTagFromHolidaySchemeRevision", 0);
    _serverConfigs.insert("getTagFromHolidayScheme", defaultConf);
    _serverIndices.insert("getTagFromHolidayScheme", 0);
    _serverConfigs.insert("getTagsFromHolidaySchemeRevision", defaultConf);
    _serverIndices.insert("getTagsFromHolidaySchemeRevision", 0);
    _serverConfigs.insert("getTagsFromHolidayScheme", defaultConf);
    _serverIndices.insert("getTagsFromHolidayScheme", 0);
    _serverConfigs.insert("patchHolidayScheme", defaultConf);
    _serverIndices.insert("patchHolidayScheme", 0);
    _serverConfigs.insert("postHolidaySchemeIntoEmployer", defaultConf);
    _serverIndices.insert("postHolidaySchemeIntoEmployer", 0);
    _serverConfigs.insert("putHolidaySchemeIntoEmployer", defaultConf);
    _serverIndices.insert("putHolidaySchemeIntoEmployer", 0);
    _serverConfigs.insert("putHolidaySchemeTag", defaultConf);
    _serverIndices.insert("putHolidaySchemeTag", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIHolidaySchemeApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIHolidaySchemeApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIHolidaySchemeApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIHolidaySchemeApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIHolidaySchemeApi::setUsername(const QString &username) {
    _username = username;
}

void OAIHolidaySchemeApi::setPassword(const QString &password) {
    _password = password;
}


void OAIHolidaySchemeApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIHolidaySchemeApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIHolidaySchemeApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIHolidaySchemeApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHolidaySchemeApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIHolidaySchemeApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIHolidaySchemeApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIHolidaySchemeApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIHolidaySchemeApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIHolidaySchemeApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIHolidaySchemeApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIHolidaySchemeApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIHolidaySchemeApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIHolidaySchemeApi::deleteHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deleteHolidayScheme"][_serverIndices.value("deleteHolidayScheme")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::deleteHolidaySchemeCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::deleteHolidaySchemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteHolidaySchemeSignal();
        Q_EMIT deleteHolidaySchemeSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteHolidaySchemeSignalE(error_type, error_str);
        Q_EMIT deleteHolidaySchemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteHolidaySchemeSignalError(error_type, error_str);
        Q_EMIT deleteHolidaySchemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::deleteHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deleteHolidaySchemeRevision"][_serverIndices.value("deleteHolidaySchemeRevision")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::deleteHolidaySchemeRevisionCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::deleteHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteHolidaySchemeRevisionSignal();
        Q_EMIT deleteHolidaySchemeRevisionSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteHolidaySchemeRevisionSignalE(error_type, error_str);
        Q_EMIT deleteHolidaySchemeRevisionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteHolidaySchemeRevisionSignalError(error_type, error_str);
        Q_EMIT deleteHolidaySchemeRevisionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::deleteHolidaySchemeRevisionByNumber(const QString &employer_id, const QString &holiday_scheme_id, const QString &revision_number, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deleteHolidaySchemeRevisionByNumber"][_serverIndices.value("deleteHolidaySchemeRevisionByNumber")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString revision_numberPathParam("{");
        revision_numberPathParam.append("RevisionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "RevisionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"RevisionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(revision_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(revision_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::deleteHolidaySchemeRevisionByNumberCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::deleteHolidaySchemeRevisionByNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteHolidaySchemeRevisionByNumberSignal();
        Q_EMIT deleteHolidaySchemeRevisionByNumberSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteHolidaySchemeRevisionByNumberSignalE(error_type, error_str);
        Q_EMIT deleteHolidaySchemeRevisionByNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteHolidaySchemeRevisionByNumberSignalError(error_type, error_str);
        Q_EMIT deleteHolidaySchemeRevisionByNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::deleteHolidaySchemeTag(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["deleteHolidaySchemeTag"][_serverIndices.value("deleteHolidaySchemeTag")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::deleteHolidaySchemeTagCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::deleteHolidaySchemeTagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteHolidaySchemeTagSignal();
        Q_EMIT deleteHolidaySchemeTagSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteHolidaySchemeTagSignalE(error_type, error_str);
        Q_EMIT deleteHolidaySchemeTagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteHolidaySchemeTagSignalError(error_type, error_str);
        Q_EMIT deleteHolidaySchemeTagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getAllHolidaySchemeTags(const QString &employer_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getAllHolidaySchemeTags"][_serverIndices.value("getAllHolidaySchemeTags")].URL()+"/Employer/{EmployerId}/HolidaySchemes/Tags");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getAllHolidaySchemeTagsCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getAllHolidaySchemeTagsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getAllHolidaySchemeTagsSignal(output);
        Q_EMIT getAllHolidaySchemeTagsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getAllHolidaySchemeTagsSignalE(output, error_type, error_str);
        Q_EMIT getAllHolidaySchemeTagsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getAllHolidaySchemeTagsSignalError(output, error_type, error_str);
        Q_EMIT getAllHolidaySchemeTagsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemeByEffectiveDate(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemeByEffectiveDate"][_serverIndices.value("getHolidaySchemeByEffectiveDate")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemeByEffectiveDateCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemeByEffectiveDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHolidayScheme output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemeByEffectiveDateSignal(output);
        Q_EMIT getHolidaySchemeByEffectiveDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemeByEffectiveDateSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemeByEffectiveDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemeByEffectiveDateSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemeByEffectiveDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemeFromEmployer(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemeFromEmployer"][_serverIndices.value("getHolidaySchemeFromEmployer")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemeFromEmployerCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemeFromEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHolidayScheme output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemeFromEmployerSignal(output);
        Q_EMIT getHolidaySchemeFromEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemeFromEmployerSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemeFromEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemeFromEmployerSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemeFromEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemeRevisionByNumber(const QString &employer_id, const QString &holiday_scheme_id, const QString &revision_number, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemeRevisionByNumber"][_serverIndices.value("getHolidaySchemeRevisionByNumber")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revision/{RevisionNumber}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString revision_numberPathParam("{");
        revision_numberPathParam.append("RevisionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "RevisionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"RevisionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(revision_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(revision_number)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemeRevisionByNumberCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemeRevisionByNumberCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHolidayScheme output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemeRevisionByNumberSignal(output);
        Q_EMIT getHolidaySchemeRevisionByNumberSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemeRevisionByNumberSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemeRevisionByNumberSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemeRevisionByNumberSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemeRevisionByNumberSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemeRevisions(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemeRevisions"][_serverIndices.value("getHolidaySchemeRevisions")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Revisions");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemeRevisionsCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemeRevisionsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemeRevisionsSignal(output);
        Q_EMIT getHolidaySchemeRevisionsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemeRevisionsSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemeRevisionsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemeRevisionsSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemeRevisionsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemesByEffectiveDate"][_serverIndices.value("getHolidaySchemesByEffectiveDate")].URL()+"/Employer/{EmployerId}/HolidaySchemes/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemesByEffectiveDateCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemesByEffectiveDateCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemesByEffectiveDateSignal(output);
        Q_EMIT getHolidaySchemesByEffectiveDateSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemesByEffectiveDateSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemesByEffectiveDateSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemesByEffectiveDateSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemesByEffectiveDateSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemesFromEmployer"][_serverIndices.value("getHolidaySchemesFromEmployer")].URL()+"/Employer/{EmployerId}/HolidaySchemes");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemesFromEmployerCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemesFromEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemesFromEmployerSignal(output);
        Q_EMIT getHolidaySchemesFromEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemesFromEmployerSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemesFromEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemesFromEmployerSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemesFromEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getHolidaySchemesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getHolidaySchemesWithTag"][_serverIndices.value("getHolidaySchemesWithTag")].URL()+"/Employer/{EmployerId}/HolidaySchemes/Tag/{TagId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getHolidaySchemesWithTagCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getHolidaySchemesWithTagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getHolidaySchemesWithTagSignal(output);
        Q_EMIT getHolidaySchemesWithTagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getHolidaySchemesWithTagSignalE(output, error_type, error_str);
        Q_EMIT getHolidaySchemesWithTagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getHolidaySchemesWithTagSignalError(output, error_type, error_str);
        Q_EMIT getHolidaySchemesWithTagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getTagFromHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getTagFromHolidaySchemeRevision"][_serverIndices.value("getTagFromHolidaySchemeRevision")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getTagFromHolidaySchemeRevisionCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getTagFromHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITag output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTagFromHolidaySchemeRevisionSignal(output);
        Q_EMIT getTagFromHolidaySchemeRevisionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTagFromHolidaySchemeRevisionSignalE(output, error_type, error_str);
        Q_EMIT getTagFromHolidaySchemeRevisionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTagFromHolidaySchemeRevisionSignalError(output, error_type, error_str);
        Q_EMIT getTagFromHolidaySchemeRevisionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getTagFromHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getTagFromHolidayScheme"][_serverIndices.value("getTagFromHolidayScheme")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getTagFromHolidaySchemeCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getTagFromHolidaySchemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITag output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTagFromHolidaySchemeSignal(output);
        Q_EMIT getTagFromHolidaySchemeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTagFromHolidaySchemeSignalE(output, error_type, error_str);
        Q_EMIT getTagFromHolidaySchemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTagFromHolidaySchemeSignalError(output, error_type, error_str);
        Q_EMIT getTagFromHolidaySchemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getTagsFromHolidaySchemeRevision(const QString &employer_id, const QString &holiday_scheme_id, const QDate &effective_date, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getTagsFromHolidaySchemeRevision"][_serverIndices.value("getTagsFromHolidaySchemeRevision")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags/{EffectiveDate}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString effective_datePathParam("{");
        effective_datePathParam.append("EffectiveDate").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EffectiveDate", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EffectiveDate"+pathSuffix : pathPrefix;
        fullPath.replace(effective_datePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(effective_date)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getTagsFromHolidaySchemeRevisionCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getTagsFromHolidaySchemeRevisionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTagsFromHolidaySchemeRevisionSignal(output);
        Q_EMIT getTagsFromHolidaySchemeRevisionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTagsFromHolidaySchemeRevisionSignalE(output, error_type, error_str);
        Q_EMIT getTagsFromHolidaySchemeRevisionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTagsFromHolidaySchemeRevisionSignalError(output, error_type, error_str);
        Q_EMIT getTagsFromHolidaySchemeRevisionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::getTagsFromHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["getTagsFromHolidayScheme"][_serverIndices.value("getTagsFromHolidayScheme")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tags");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::getTagsFromHolidaySchemeCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::getTagsFromHolidaySchemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILinkCollection output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTagsFromHolidaySchemeSignal(output);
        Q_EMIT getTagsFromHolidaySchemeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTagsFromHolidaySchemeSignalE(output, error_type, error_str);
        Q_EMIT getTagsFromHolidaySchemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTagsFromHolidaySchemeSignalError(output, error_type, error_str);
        Q_EMIT getTagsFromHolidaySchemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::patchHolidayScheme(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme) {
    QString fullPath = QString(_serverConfigs["patchHolidayScheme"][_serverIndices.value("patchHolidayScheme")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_holiday_scheme.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::patchHolidaySchemeCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::patchHolidaySchemeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHolidayScheme output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchHolidaySchemeSignal(output);
        Q_EMIT patchHolidaySchemeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchHolidaySchemeSignalE(output, error_type, error_str);
        Q_EMIT patchHolidaySchemeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchHolidaySchemeSignalError(output, error_type, error_str);
        Q_EMIT patchHolidaySchemeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::postHolidaySchemeIntoEmployer(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme) {
    QString fullPath = QString(_serverConfigs["postHolidaySchemeIntoEmployer"][_serverIndices.value("postHolidaySchemeIntoEmployer")].URL()+"/Employer/{EmployerId}/HolidaySchemes");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_holiday_scheme.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::postHolidaySchemeIntoEmployerCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::postHolidaySchemeIntoEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILink output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postHolidaySchemeIntoEmployerSignal(output);
        Q_EMIT postHolidaySchemeIntoEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postHolidaySchemeIntoEmployerSignalE(output, error_type, error_str);
        Q_EMIT postHolidaySchemeIntoEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postHolidaySchemeIntoEmployerSignalError(output, error_type, error_str);
        Q_EMIT postHolidaySchemeIntoEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::putHolidaySchemeIntoEmployer(const QString &employer_id, const QString &holiday_scheme_id, const QString &authorization, const QString &api_version, const OAIHolidayScheme &oai_holiday_scheme) {
    QString fullPath = QString(_serverConfigs["putHolidaySchemeIntoEmployer"][_serverIndices.value("putHolidaySchemeIntoEmployer")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_holiday_scheme.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::putHolidaySchemeIntoEmployerCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::putHolidaySchemeIntoEmployerCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIHolidayScheme output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putHolidaySchemeIntoEmployerSignal(output);
        Q_EMIT putHolidaySchemeIntoEmployerSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putHolidaySchemeIntoEmployerSignalE(output, error_type, error_str);
        Q_EMIT putHolidaySchemeIntoEmployerSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putHolidaySchemeIntoEmployerSignalError(output, error_type, error_str);
        Q_EMIT putHolidaySchemeIntoEmployerSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::putHolidaySchemeTag(const QString &employer_id, const QString &holiday_scheme_id, const QString &tag_id, const QString &authorization, const QString &api_version) {
    QString fullPath = QString(_serverConfigs["putHolidaySchemeTag"][_serverIndices.value("putHolidaySchemeTag")].URL()+"/Employer/{EmployerId}/HolidayScheme/{HolidaySchemeId}/Tag/{TagId}");
    
    
    {
        QString employer_idPathParam("{");
        employer_idPathParam.append("EmployerId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "EmployerId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"EmployerId"+pathSuffix : pathPrefix;
        fullPath.replace(employer_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(employer_id)));
    }
    
    {
        QString holiday_scheme_idPathParam("{");
        holiday_scheme_idPathParam.append("HolidaySchemeId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "HolidaySchemeId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"HolidaySchemeId"+pathSuffix : pathPrefix;
        fullPath.replace(holiday_scheme_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(holiday_scheme_id)));
    }
    
    {
        QString tag_idPathParam("{");
        tag_idPathParam.append("TagId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "TagId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"TagId"+pathSuffix : pathPrefix;
        fullPath.replace(tag_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(tag_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    
    {
        if (!::OpenAPI::toStringValue(authorization).isEmpty()) {
            input.headers.insert("Authorization", ::OpenAPI::toStringValue(authorization));
        }
        }
    
    {
        if (!::OpenAPI::toStringValue(api_version).isEmpty()) {
            input.headers.insert("Api-Version", ::OpenAPI::toStringValue(api_version));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIHolidaySchemeApi::putHolidaySchemeTagCallback);
    connect(this, &OAIHolidaySchemeApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIHolidaySchemeApi::putHolidaySchemeTagCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITag output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putHolidaySchemeTagSignal(output);
        Q_EMIT putHolidaySchemeTagSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putHolidaySchemeTagSignalE(output, error_type, error_str);
        Q_EMIT putHolidaySchemeTagSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putHolidaySchemeTagSignalError(output, error_type, error_str);
        Q_EMIT putHolidaySchemeTagSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIHolidaySchemeApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
