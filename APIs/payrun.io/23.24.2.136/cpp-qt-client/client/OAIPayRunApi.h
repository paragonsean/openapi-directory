/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayRunApi_H
#define OAI_OAIPayRunApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICommentary.h"
#include "OAIErrorModel.h"
#include "OAILinkCollection.h"
#include "OAIPayRun.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayRunApi : public QObject {
    Q_OBJECT

public:
    OAIPayRunApi(const int timeOut = 0);
    ~OAIPayRunApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayRunEmployee(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAEAssessmentsFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPayRunTags(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCommentariesFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getCommentaryFromPayRunByEmployee(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getEmployeesFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunsFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunsFromPaySchedule(const QString &employer_id, const QString &pay_schedule_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayRunsWithTag(const QString &employer_id, const QString &pay_schedule_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getReportLinesFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePayRunCallback(OAIHttpRequestWorker *worker);
    void deletePayRunEmployeeCallback(OAIHttpRequestWorker *worker);
    void getAEAssessmentsFromPayRunCallback(OAIHttpRequestWorker *worker);
    void getAllPayRunTagsCallback(OAIHttpRequestWorker *worker);
    void getCommentariesFromPayRunCallback(OAIHttpRequestWorker *worker);
    void getCommentaryFromPayRunByEmployeeCallback(OAIHttpRequestWorker *worker);
    void getEmployeesFromPayRunCallback(OAIHttpRequestWorker *worker);
    void getPayRunFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getPayRunsFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getPayRunsFromPayScheduleCallback(OAIHttpRequestWorker *worker);
    void getPayRunsWithTagCallback(OAIHttpRequestWorker *worker);
    void getReportLinesFromPayRunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePayRunSignal();
    void deletePayRunEmployeeSignal();
    void getAEAssessmentsFromPayRunSignal(OAILinkCollection summary);
    void getAllPayRunTagsSignal(OAILinkCollection summary);
    void getCommentariesFromPayRunSignal(OAILinkCollection summary);
    void getCommentaryFromPayRunByEmployeeSignal(OAICommentary summary);
    void getEmployeesFromPayRunSignal(OAILinkCollection summary);
    void getPayRunFromPayScheduleSignal(OAIPayRun summary);
    void getPayRunsFromEmployeeSignal(OAILinkCollection summary);
    void getPayRunsFromPayScheduleSignal(OAILinkCollection summary);
    void getPayRunsWithTagSignal(OAILinkCollection summary);
    void getReportLinesFromPayRunSignal(OAILinkCollection summary);


    void deletePayRunSignalFull(OAIHttpRequestWorker *worker);
    void deletePayRunEmployeeSignalFull(OAIHttpRequestWorker *worker);
    void getAEAssessmentsFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAllPayRunTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getCommentariesFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getCommentaryFromPayRunByEmployeeSignalFull(OAIHttpRequestWorker *worker, OAICommentary summary);
    void getEmployeesFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayRunFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAIPayRun summary);
    void getPayRunsFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayRunsFromPayScheduleSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayRunsWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getReportLinesFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);

    Q_DECL_DEPRECATED_X("Use deletePayRunSignalError() instead")
    void deletePayRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayRunEmployeeSignalError() instead")
    void deletePayRunEmployeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunEmployeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromPayRunSignalError() instead")
    void getAEAssessmentsFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayRunTagsSignalError() instead")
    void getAllPayRunTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayRunTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentariesFromPayRunSignalError() instead")
    void getCommentariesFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentariesFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromPayRunByEmployeeSignalError() instead")
    void getCommentaryFromPayRunByEmployeeSignalE(OAICommentary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromPayRunByEmployeeSignalError(OAICommentary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayRunSignalError() instead")
    void getEmployeesFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunFromPayScheduleSignalError() instead")
    void getPayRunFromPayScheduleSignalE(OAIPayRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunFromPayScheduleSignalError(OAIPayRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromEmployeeSignalError() instead")
    void getPayRunsFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromPayScheduleSignalError() instead")
    void getPayRunsFromPayScheduleSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromPayScheduleSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsWithTagSignalError() instead")
    void getPayRunsWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportLinesFromPayRunSignalError() instead")
    void getReportLinesFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportLinesFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePayRunSignalErrorFull() instead")
    void deletePayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayRunEmployeeSignalErrorFull() instead")
    void deletePayRunEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayRunEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAEAssessmentsFromPayRunSignalErrorFull() instead")
    void getAEAssessmentsFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAEAssessmentsFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayRunTagsSignalErrorFull() instead")
    void getAllPayRunTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayRunTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentariesFromPayRunSignalErrorFull() instead")
    void getCommentariesFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentariesFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommentaryFromPayRunByEmployeeSignalErrorFull() instead")
    void getCommentaryFromPayRunByEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommentaryFromPayRunByEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEmployeesFromPayRunSignalErrorFull() instead")
    void getEmployeesFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEmployeesFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunFromPayScheduleSignalErrorFull() instead")
    void getPayRunFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromEmployeeSignalErrorFull() instead")
    void getPayRunsFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsFromPayScheduleSignalErrorFull() instead")
    void getPayRunsFromPayScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsFromPayScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayRunsWithTagSignalErrorFull() instead")
    void getPayRunsWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayRunsWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReportLinesFromPayRunSignalErrorFull() instead")
    void getReportLinesFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReportLinesFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
