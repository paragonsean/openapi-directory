/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobInfo_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobInfo_1::OAIJobInfo_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobInfo_1::OAIJobInfo_1() {
    this->initializeModel();
}

OAIJobInfo_1::~OAIJobInfo_1() {}

void OAIJobInfo_1::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_employer_key_isSet = false;
    m_employer_key_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_status_isSet = false;
    m_job_status_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;
}

void OAIJobInfo_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobInfo_1::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_employer_key_isValid = ::OpenAPI::fromJsonValue(m_employer_key, json[QString("EmployerKey")]);
    m_employer_key_isSet = !json[QString("EmployerKey")].isNull() && m_employer_key_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("Errors")]);
    m_errors_isSet = !json[QString("Errors")].isNull() && m_errors_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_status_isValid = ::OpenAPI::fromJsonValue(m_job_status, json[QString("JobStatus")]);
    m_job_status_isSet = !json[QString("JobStatus")].isNull() && m_job_status_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("LastUpdated")]);
    m_last_updated_isSet = !json[QString("LastUpdated")].isNull() && m_last_updated_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("Progress")]);
    m_progress_isSet = !json[QString("Progress")].isNull() && m_progress_isValid;
}

QString OAIJobInfo_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobInfo_1::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_employer_key_isSet) {
        obj.insert(QString("EmployerKey"), ::OpenAPI::toJsonValue(m_employer_key));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("Errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_status_isSet) {
        obj.insert(QString("JobStatus"), ::OpenAPI::toJsonValue(m_job_status));
    }
    if (m_job_type_isSet) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("LastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_progress_isSet) {
        obj.insert(QString("Progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    return obj;
}

QDateTime OAIJobInfo_1::getCreated() const {
    return m_created;
}
void OAIJobInfo_1::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIJobInfo_1::is_created_Set() const{
    return m_created_isSet;
}

bool OAIJobInfo_1::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIJobInfo_1::getEmployerKey() const {
    return m_employer_key;
}
void OAIJobInfo_1::setEmployerKey(const QString &employer_key) {
    m_employer_key = employer_key;
    m_employer_key_isSet = true;
}

bool OAIJobInfo_1::is_employer_key_Set() const{
    return m_employer_key_isSet;
}

bool OAIJobInfo_1::is_employer_key_Valid() const{
    return m_employer_key_isValid;
}

OAIErrors_1 OAIJobInfo_1::getErrors() const {
    return m_errors;
}
void OAIJobInfo_1::setErrors(const OAIErrors_1 &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIJobInfo_1::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIJobInfo_1::is_errors_Valid() const{
    return m_errors_isValid;
}

QDateTime OAIJobInfo_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIJobInfo_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIJobInfo_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIJobInfo_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

QString OAIJobInfo_1::getJobId() const {
    return m_job_id;
}
void OAIJobInfo_1::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobInfo_1::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobInfo_1::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJobInfo_1::getJobStatus() const {
    return m_job_status;
}
void OAIJobInfo_1::setJobStatus(const QString &job_status) {
    m_job_status = job_status;
    m_job_status_isSet = true;
}

bool OAIJobInfo_1::is_job_status_Set() const{
    return m_job_status_isSet;
}

bool OAIJobInfo_1::is_job_status_Valid() const{
    return m_job_status_isValid;
}

QString OAIJobInfo_1::getJobType() const {
    return m_job_type;
}
void OAIJobInfo_1::setJobType(const QString &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobInfo_1::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobInfo_1::is_job_type_Valid() const{
    return m_job_type_isValid;
}

QDateTime OAIJobInfo_1::getLastUpdated() const {
    return m_last_updated;
}
void OAIJobInfo_1::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIJobInfo_1::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIJobInfo_1::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

double OAIJobInfo_1::getProgress() const {
    return m_progress;
}
void OAIJobInfo_1::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIJobInfo_1::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIJobInfo_1::is_progress_Valid() const{
    return m_progress_isValid;
}

bool OAIJobInfo_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_employer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobInfo_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
