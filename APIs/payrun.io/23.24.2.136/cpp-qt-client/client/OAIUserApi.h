/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAITag.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteUser(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteUserTag(const QString &user_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllUserTags(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllUsersWithTag(const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagFromUser(const QString &user_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getTagsFromUser(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getUser(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getUserPermissions(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getUsers(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void patchUser(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postUser(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putUser(const QString &user_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putUserTag(const QString &user_id, const QString &tag_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserTagCallback(OAIHttpRequestWorker *worker);
    void getAllUserTagsCallback(OAIHttpRequestWorker *worker);
    void getAllUsersWithTagCallback(OAIHttpRequestWorker *worker);
    void getTagFromUserCallback(OAIHttpRequestWorker *worker);
    void getTagsFromUserCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserPermissionsCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void patchUserCallback(OAIHttpRequestWorker *worker);
    void postUserCallback(OAIHttpRequestWorker *worker);
    void putUserCallback(OAIHttpRequestWorker *worker);
    void putUserTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserSignal();
    void deleteUserTagSignal();
    void getAllUserTagsSignal(OAILinkCollection summary);
    void getAllUsersWithTagSignal(OAILinkCollection summary);
    void getTagFromUserSignal(OAITag summary);
    void getTagsFromUserSignal(OAILinkCollection summary);
    void getUserSignal(OAIUser summary);
    void getUserPermissionsSignal(OAILinkCollection summary);
    void getUsersSignal(OAILinkCollection summary);
    void patchUserSignal(OAIUser summary);
    void postUserSignal(OAILink summary);
    void putUserSignal(OAIUser summary);
    void putUserTagSignal(OAITag summary);


    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserTagSignalFull(OAIHttpRequestWorker *worker);
    void getAllUserTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getAllUsersWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getTagFromUserSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void getTagsFromUserSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserPermissionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void postUserSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void putUserTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserTagSignalError() instead")
    void deleteUserTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUserTagsSignalError() instead")
    void getAllUserTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUserTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersWithTagSignalError() instead")
    void getAllUsersWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromUserSignalError() instead")
    void getTagFromUserSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromUserSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromUserSignalError() instead")
    void getTagsFromUserSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromUserSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalError() instead")
    void getUserPermissionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUserSignalError() instead")
    void patchUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserSignalError() instead")
    void postUserSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putUserSignalError() instead")
    void putUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putUserTagSignalError() instead")
    void putUserTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putUserTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserTagSignalErrorFull() instead")
    void deleteUserTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUserTagsSignalErrorFull() instead")
    void getAllUserTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUserTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllUsersWithTagSignalErrorFull() instead")
    void getAllUsersWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllUsersWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagFromUserSignalErrorFull() instead")
    void getTagFromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagFromUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTagsFromUserSignalErrorFull() instead")
    void getTagsFromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTagsFromUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPermissionsSignalErrorFull() instead")
    void getUserPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchUserSignalErrorFull() instead")
    void patchUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserSignalErrorFull() instead")
    void postUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putUserSignalErrorFull() instead")
    void putUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putUserTagSignalErrorFull() instead")
    void putUserTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putUserTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
