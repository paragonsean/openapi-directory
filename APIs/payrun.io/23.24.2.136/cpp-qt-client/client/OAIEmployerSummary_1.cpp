/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployerSummary_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployerSummary_1::OAIEmployerSummary_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployerSummary_1::OAIEmployerSummary_1() {
    this->initializeModel();
}

OAIEmployerSummary_1::~OAIEmployerSummary_1() {}

void OAIEmployerSummary_1::initializeModel() {

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_unique_key_isSet = false;
    m_unique_key_isValid = false;
}

void OAIEmployerSummary_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployerSummary_1::fromJsonObject(QJsonObject json) {

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_unique_key_isValid = ::OpenAPI::fromJsonValue(m_unique_key, json[QString("UniqueKey")]);
    m_unique_key_isSet = !json[QString("UniqueKey")].isNull() && m_unique_key_isValid;
}

QString OAIEmployerSummary_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployerSummary_1::asJsonObject() const {
    QJsonObject obj;
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_unique_key_isSet) {
        obj.insert(QString("UniqueKey"), ::OpenAPI::toJsonValue(m_unique_key));
    }
    return obj;
}

QDate OAIEmployerSummary_1::getEffectiveDate() const {
    return m_effective_date;
}
void OAIEmployerSummary_1::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIEmployerSummary_1::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIEmployerSummary_1::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

OAIObject OAIEmployerSummary_1::getMetaData() const {
    return m_meta_data;
}
void OAIEmployerSummary_1::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIEmployerSummary_1::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIEmployerSummary_1::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIEmployerSummary_1::getName() const {
    return m_name;
}
void OAIEmployerSummary_1::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEmployerSummary_1::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEmployerSummary_1::is_name_Valid() const{
    return m_name_isValid;
}

QDate OAIEmployerSummary_1::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIEmployerSummary_1::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIEmployerSummary_1::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIEmployerSummary_1::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

qint32 OAIEmployerSummary_1::getRevision() const {
    return m_revision;
}
void OAIEmployerSummary_1::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIEmployerSummary_1::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIEmployerSummary_1::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIEmployerSummary_1::getUniqueKey() const {
    return m_unique_key;
}
void OAIEmployerSummary_1::setUniqueKey(const QString &unique_key) {
    m_unique_key = unique_key;
    m_unique_key_isSet = true;
}

bool OAIEmployerSummary_1::is_unique_key_Set() const{
    return m_unique_key_isSet;
}

bool OAIEmployerSummary_1::is_unique_key_Valid() const{
    return m_unique_key_isValid;
}

bool OAIEmployerSummary_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployerSummary_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
