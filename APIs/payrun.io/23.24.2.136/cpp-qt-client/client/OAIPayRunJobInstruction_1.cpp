/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayRunJobInstruction_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayRunJobInstruction_1::OAIPayRunJobInstruction_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayRunJobInstruction_1::OAIPayRunJobInstruction_1() {
    this->initializeModel();
}

OAIPayRunJobInstruction_1::~OAIPayRunJobInstruction_1() {}

void OAIPayRunJobInstruction_1::initializeModel() {

    m_employees_isSet = false;
    m_employees_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_holding_date_isSet = false;
    m_holding_date_isValid = false;

    m_is_supplementary_isSet = false;
    m_is_supplementary_isValid = false;

    m_pay_schedule_isSet = false;
    m_pay_schedule_isValid = false;

    m_payment_date_isSet = false;
    m_payment_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIPayRunJobInstruction_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayRunJobInstruction_1::fromJsonObject(QJsonObject json) {

    m_employees_isValid = ::OpenAPI::fromJsonValue(m_employees, json[QString("Employees")]);
    m_employees_isSet = !json[QString("Employees")].isNull() && m_employees_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_holding_date_isValid = ::OpenAPI::fromJsonValue(m_holding_date, json[QString("HoldingDate")]);
    m_holding_date_isSet = !json[QString("HoldingDate")].isNull() && m_holding_date_isValid;

    m_is_supplementary_isValid = ::OpenAPI::fromJsonValue(m_is_supplementary, json[QString("IsSupplementary")]);
    m_is_supplementary_isSet = !json[QString("IsSupplementary")].isNull() && m_is_supplementary_isValid;

    m_pay_schedule_isValid = ::OpenAPI::fromJsonValue(m_pay_schedule, json[QString("PaySchedule")]);
    m_pay_schedule_isSet = !json[QString("PaySchedule")].isNull() && m_pay_schedule_isValid;

    m_payment_date_isValid = ::OpenAPI::fromJsonValue(m_payment_date, json[QString("PaymentDate")]);
    m_payment_date_isSet = !json[QString("PaymentDate")].isNull() && m_payment_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAIPayRunJobInstruction_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayRunJobInstruction_1::asJsonObject() const {
    QJsonObject obj;
    if (m_employees.isSet()) {
        obj.insert(QString("Employees"), ::OpenAPI::toJsonValue(m_employees));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_holding_date_isSet) {
        obj.insert(QString("HoldingDate"), ::OpenAPI::toJsonValue(m_holding_date));
    }
    if (m_is_supplementary_isSet) {
        obj.insert(QString("IsSupplementary"), ::OpenAPI::toJsonValue(m_is_supplementary));
    }
    if (m_pay_schedule.isSet()) {
        obj.insert(QString("PaySchedule"), ::OpenAPI::toJsonValue(m_pay_schedule));
    }
    if (m_payment_date_isSet) {
        obj.insert(QString("PaymentDate"), ::OpenAPI::toJsonValue(m_payment_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

OAIEmployee_4 OAIPayRunJobInstruction_1::getEmployees() const {
    return m_employees;
}
void OAIPayRunJobInstruction_1::setEmployees(const OAIEmployee_4 &employees) {
    m_employees = employees;
    m_employees_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_employees_Set() const{
    return m_employees_isSet;
}

bool OAIPayRunJobInstruction_1::is_employees_Valid() const{
    return m_employees_isValid;
}

QDate OAIPayRunJobInstruction_1::getEndDate() const {
    return m_end_date;
}
void OAIPayRunJobInstruction_1::setEndDate(const QDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIPayRunJobInstruction_1::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAIPayRunJobInstruction_1::getHoldingDate() const {
    return m_holding_date;
}
void OAIPayRunJobInstruction_1::setHoldingDate(const QDateTime &holding_date) {
    m_holding_date = holding_date;
    m_holding_date_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_holding_date_Set() const{
    return m_holding_date_isSet;
}

bool OAIPayRunJobInstruction_1::is_holding_date_Valid() const{
    return m_holding_date_isValid;
}

bool OAIPayRunJobInstruction_1::isIsSupplementary() const {
    return m_is_supplementary;
}
void OAIPayRunJobInstruction_1::setIsSupplementary(const bool &is_supplementary) {
    m_is_supplementary = is_supplementary;
    m_is_supplementary_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_is_supplementary_Set() const{
    return m_is_supplementary_isSet;
}

bool OAIPayRunJobInstruction_1::is_is_supplementary_Valid() const{
    return m_is_supplementary_isValid;
}

OAIPaySchedule_3 OAIPayRunJobInstruction_1::getPaySchedule() const {
    return m_pay_schedule;
}
void OAIPayRunJobInstruction_1::setPaySchedule(const OAIPaySchedule_3 &pay_schedule) {
    m_pay_schedule = pay_schedule;
    m_pay_schedule_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_pay_schedule_Set() const{
    return m_pay_schedule_isSet;
}

bool OAIPayRunJobInstruction_1::is_pay_schedule_Valid() const{
    return m_pay_schedule_isValid;
}

QDate OAIPayRunJobInstruction_1::getPaymentDate() const {
    return m_payment_date;
}
void OAIPayRunJobInstruction_1::setPaymentDate(const QDate &payment_date) {
    m_payment_date = payment_date;
    m_payment_date_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_payment_date_Set() const{
    return m_payment_date_isSet;
}

bool OAIPayRunJobInstruction_1::is_payment_date_Valid() const{
    return m_payment_date_isValid;
}

QDate OAIPayRunJobInstruction_1::getStartDate() const {
    return m_start_date;
}
void OAIPayRunJobInstruction_1::setStartDate(const QDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIPayRunJobInstruction_1::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIPayRunJobInstruction_1::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIPayRunJobInstruction_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_employees.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holding_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_supplementary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayRunJobInstruction_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
