/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJournalsApi_H
#define OAI_OAIJournalsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAIJournalInstruction.h"
#include "OAIJournalLine.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJournalsApi : public QObject {
    Q_OBJECT

public:
    OAIJournalsApi(const int timeOut = 0);
    ~OAIJournalsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteJournalInstruction(const QString &employer_id, const QString &journal_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deleteJournalInstructionTemplate(const QString &journal_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalInstructionFromEmployer(const QString &employer_id, const QString &journal_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalInstructionTemplate(const QString &journal_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalInstructionTemplates(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalInstructionsFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_line_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalLineFromEmployer(const QString &employer_id, const QString &journal_line_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  employee_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalLinesFromEmployee(const QString &employer_id, const QString &employee_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalLinesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_schedule_id QString [required]
    * @param[in]  pay_run_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalLinesFromPayRun(const QString &employer_id, const QString &pay_schedule_id, const QString &pay_run_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  sub_contractor_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getJournalLinesFromSubContractor(const QString &employer_id, const QString &sub_contractor_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postJournalInstruction(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void postJournalInstructionTemplate(const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putJournalInstruction(const QString &employer_id, const QString &journal_instruction_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  journal_instruction_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void putJournalInstructionTemplate(const QString &journal_instruction_id, const QString &authorization, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteJournalInstructionCallback(OAIHttpRequestWorker *worker);
    void deleteJournalInstructionTemplateCallback(OAIHttpRequestWorker *worker);
    void getJournalInstructionFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getJournalInstructionTemplateCallback(OAIHttpRequestWorker *worker);
    void getJournalInstructionTemplatesCallback(OAIHttpRequestWorker *worker);
    void getJournalInstructionsFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getJournalLineFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getJournalLinesFromEmployeeCallback(OAIHttpRequestWorker *worker);
    void getJournalLinesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getJournalLinesFromPayRunCallback(OAIHttpRequestWorker *worker);
    void getJournalLinesFromSubContractorCallback(OAIHttpRequestWorker *worker);
    void postJournalInstructionCallback(OAIHttpRequestWorker *worker);
    void postJournalInstructionTemplateCallback(OAIHttpRequestWorker *worker);
    void putJournalInstructionCallback(OAIHttpRequestWorker *worker);
    void putJournalInstructionTemplateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteJournalInstructionSignal();
    void deleteJournalInstructionTemplateSignal();
    void getJournalInstructionFromEmployerSignal(OAIJournalInstruction summary);
    void getJournalInstructionTemplateSignal(OAIJournalInstruction summary);
    void getJournalInstructionTemplatesSignal(OAILinkCollection summary);
    void getJournalInstructionsFromEmployerSignal(OAILinkCollection summary);
    void getJournalLineFromEmployerSignal(OAIJournalLine summary);
    void getJournalLinesFromEmployeeSignal(OAILinkCollection summary);
    void getJournalLinesFromEmployerSignal(OAILinkCollection summary);
    void getJournalLinesFromPayRunSignal(OAILinkCollection summary);
    void getJournalLinesFromSubContractorSignal(OAILinkCollection summary);
    void postJournalInstructionSignal(OAILink summary);
    void postJournalInstructionTemplateSignal(OAILink summary);
    void putJournalInstructionSignal(OAIJournalInstruction summary);
    void putJournalInstructionTemplateSignal(OAIJournalInstruction summary);


    void deleteJournalInstructionSignalFull(OAIHttpRequestWorker *worker);
    void deleteJournalInstructionTemplateSignalFull(OAIHttpRequestWorker *worker);
    void getJournalInstructionFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIJournalInstruction summary);
    void getJournalInstructionTemplateSignalFull(OAIHttpRequestWorker *worker, OAIJournalInstruction summary);
    void getJournalInstructionTemplatesSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getJournalInstructionsFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getJournalLineFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIJournalLine summary);
    void getJournalLinesFromEmployeeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getJournalLinesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getJournalLinesFromPayRunSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getJournalLinesFromSubContractorSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void postJournalInstructionSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void postJournalInstructionTemplateSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putJournalInstructionSignalFull(OAIHttpRequestWorker *worker, OAIJournalInstruction summary);
    void putJournalInstructionTemplateSignalFull(OAIHttpRequestWorker *worker, OAIJournalInstruction summary);

    Q_DECL_DEPRECATED_X("Use deleteJournalInstructionSignalError() instead")
    void deleteJournalInstructionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalInstructionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJournalInstructionTemplateSignalError() instead")
    void deleteJournalInstructionTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalInstructionTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionFromEmployerSignalError() instead")
    void getJournalInstructionFromEmployerSignalE(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionFromEmployerSignalError(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionTemplateSignalError() instead")
    void getJournalInstructionTemplateSignalE(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionTemplateSignalError(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionTemplatesSignalError() instead")
    void getJournalInstructionTemplatesSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionTemplatesSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionsFromEmployerSignalError() instead")
    void getJournalInstructionsFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionsFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLineFromEmployerSignalError() instead")
    void getJournalLineFromEmployerSignalE(OAIJournalLine summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLineFromEmployerSignalError(OAIJournalLine summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromEmployeeSignalError() instead")
    void getJournalLinesFromEmployeeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromEmployeeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromEmployerSignalError() instead")
    void getJournalLinesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromPayRunSignalError() instead")
    void getJournalLinesFromPayRunSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromPayRunSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromSubContractorSignalError() instead")
    void getJournalLinesFromSubContractorSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromSubContractorSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJournalInstructionSignalError() instead")
    void postJournalInstructionSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postJournalInstructionSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJournalInstructionTemplateSignalError() instead")
    void postJournalInstructionTemplateSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postJournalInstructionTemplateSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalInstructionSignalError() instead")
    void putJournalInstructionSignalE(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalInstructionSignalError(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalInstructionTemplateSignalError() instead")
    void putJournalInstructionTemplateSignalE(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalInstructionTemplateSignalError(OAIJournalInstruction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteJournalInstructionSignalErrorFull() instead")
    void deleteJournalInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteJournalInstructionTemplateSignalErrorFull() instead")
    void deleteJournalInstructionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteJournalInstructionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionFromEmployerSignalErrorFull() instead")
    void getJournalInstructionFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionTemplateSignalErrorFull() instead")
    void getJournalInstructionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionTemplatesSignalErrorFull() instead")
    void getJournalInstructionTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalInstructionsFromEmployerSignalErrorFull() instead")
    void getJournalInstructionsFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalInstructionsFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLineFromEmployerSignalErrorFull() instead")
    void getJournalLineFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLineFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromEmployeeSignalErrorFull() instead")
    void getJournalLinesFromEmployeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromEmployeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromEmployerSignalErrorFull() instead")
    void getJournalLinesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromPayRunSignalErrorFull() instead")
    void getJournalLinesFromPayRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromPayRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJournalLinesFromSubContractorSignalErrorFull() instead")
    void getJournalLinesFromSubContractorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalLinesFromSubContractorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJournalInstructionSignalErrorFull() instead")
    void postJournalInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postJournalInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postJournalInstructionTemplateSignalErrorFull() instead")
    void postJournalInstructionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postJournalInstructionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalInstructionSignalErrorFull() instead")
    void putJournalInstructionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalInstructionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putJournalInstructionTemplateSignalErrorFull() instead")
    void putJournalInstructionTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putJournalInstructionTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
