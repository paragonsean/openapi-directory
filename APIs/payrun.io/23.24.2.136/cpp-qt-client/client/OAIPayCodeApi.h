/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayCodeApi_H
#define OAI_OAIPayCodeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorModel.h"
#include "OAILink.h"
#include "OAILinkCollection.h"
#include "OAIPayCode.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayCodeApi : public QObject {
    Q_OBJECT

public:
    OAIPayCodeApi(const int timeOut = 0);
    ~OAIPayCodeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayCodeRevision(const QString &employer_id, const QString &pay_code_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void deletePayCodeRevisionByNumber(const QString &employer_id, const QString &pay_code_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getAllPayCodeTags(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodeByEffectiveDate(const QString &employer_id, const QString &pay_code_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodeFromEmployer(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  revision_number QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodeRevisionByNumber(const QString &employer_id, const QString &pay_code_id, const QString &revision_number, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodeRevisions(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  effective_date QDate [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodesByEffectiveDate(const QString &employer_id, const QDate &effective_date, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodesFromEmployer(const QString &employer_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  nominal_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodesFromNominalCode(const QString &employer_id, const QString &nominal_code_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  tag_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void getPayCodesWithTag(const QString &employer_id, const QString &tag_id, const QString &authorization, const QString &api_version);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_code OAIPayCode [required]
    */
    virtual void patchPayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_code OAIPayCode [required]
    */
    virtual void postPayCode(const QString &employer_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code);

    /**
    * @param[in]  employer_id QString [required]
    * @param[in]  pay_code_id QString [required]
    * @param[in]  authorization QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  oai_pay_code OAIPayCode [required]
    */
    virtual void putPayCode(const QString &employer_id, const QString &pay_code_id, const QString &authorization, const QString &api_version, const OAIPayCode &oai_pay_code);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePayCodeCallback(OAIHttpRequestWorker *worker);
    void deletePayCodeRevisionCallback(OAIHttpRequestWorker *worker);
    void deletePayCodeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getAllPayCodeTagsCallback(OAIHttpRequestWorker *worker);
    void getPayCodeByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getPayCodeFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getPayCodeRevisionByNumberCallback(OAIHttpRequestWorker *worker);
    void getPayCodeRevisionsCallback(OAIHttpRequestWorker *worker);
    void getPayCodesByEffectiveDateCallback(OAIHttpRequestWorker *worker);
    void getPayCodesFromEmployerCallback(OAIHttpRequestWorker *worker);
    void getPayCodesFromNominalCodeCallback(OAIHttpRequestWorker *worker);
    void getPayCodesWithTagCallback(OAIHttpRequestWorker *worker);
    void patchPayCodeCallback(OAIHttpRequestWorker *worker);
    void postPayCodeCallback(OAIHttpRequestWorker *worker);
    void putPayCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePayCodeSignal();
    void deletePayCodeRevisionSignal();
    void deletePayCodeRevisionByNumberSignal();
    void getAllPayCodeTagsSignal(OAILinkCollection summary);
    void getPayCodeByEffectiveDateSignal(OAIPayCode summary);
    void getPayCodeFromEmployerSignal(OAIPayCode summary);
    void getPayCodeRevisionByNumberSignal(OAIPayCode summary);
    void getPayCodeRevisionsSignal(OAILinkCollection summary);
    void getPayCodesByEffectiveDateSignal(OAILinkCollection summary);
    void getPayCodesFromEmployerSignal(OAILinkCollection summary);
    void getPayCodesFromNominalCodeSignal(OAILinkCollection summary);
    void getPayCodesWithTagSignal(OAILinkCollection summary);
    void patchPayCodeSignal(OAIPayCode summary);
    void postPayCodeSignal(OAILink summary);
    void putPayCodeSignal(OAIPayCode summary);


    void deletePayCodeSignalFull(OAIHttpRequestWorker *worker);
    void deletePayCodeRevisionSignalFull(OAIHttpRequestWorker *worker);
    void deletePayCodeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker);
    void getAllPayCodeTagsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayCodeByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAIPayCode summary);
    void getPayCodeFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAIPayCode summary);
    void getPayCodeRevisionByNumberSignalFull(OAIHttpRequestWorker *worker, OAIPayCode summary);
    void getPayCodeRevisionsSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayCodesByEffectiveDateSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayCodesFromEmployerSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayCodesFromNominalCodeSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void getPayCodesWithTagSignalFull(OAIHttpRequestWorker *worker, OAILinkCollection summary);
    void patchPayCodeSignalFull(OAIHttpRequestWorker *worker, OAIPayCode summary);
    void postPayCodeSignalFull(OAIHttpRequestWorker *worker, OAILink summary);
    void putPayCodeSignalFull(OAIHttpRequestWorker *worker, OAIPayCode summary);

    Q_DECL_DEPRECATED_X("Use deletePayCodeSignalError() instead")
    void deletePayCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayCodeRevisionSignalError() instead")
    void deletePayCodeRevisionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeRevisionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayCodeRevisionByNumberSignalError() instead")
    void deletePayCodeRevisionByNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeRevisionByNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayCodeTagsSignalError() instead")
    void getAllPayCodeTagsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayCodeTagsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeByEffectiveDateSignalError() instead")
    void getPayCodeByEffectiveDateSignalE(OAIPayCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeByEffectiveDateSignalError(OAIPayCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeFromEmployerSignalError() instead")
    void getPayCodeFromEmployerSignalE(OAIPayCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeFromEmployerSignalError(OAIPayCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeRevisionByNumberSignalError() instead")
    void getPayCodeRevisionByNumberSignalE(OAIPayCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeRevisionByNumberSignalError(OAIPayCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeRevisionsSignalError() instead")
    void getPayCodeRevisionsSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeRevisionsSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesByEffectiveDateSignalError() instead")
    void getPayCodesByEffectiveDateSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesByEffectiveDateSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesFromEmployerSignalError() instead")
    void getPayCodesFromEmployerSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesFromEmployerSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesFromNominalCodeSignalError() instead")
    void getPayCodesFromNominalCodeSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesFromNominalCodeSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesWithTagSignalError() instead")
    void getPayCodesWithTagSignalE(OAILinkCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesWithTagSignalError(OAILinkCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPayCodeSignalError() instead")
    void patchPayCodeSignalE(OAIPayCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPayCodeSignalError(OAIPayCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayCodeSignalError() instead")
    void postPayCodeSignalE(OAILink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayCodeSignalError(OAILink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayCodeSignalError() instead")
    void putPayCodeSignalE(OAIPayCode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayCodeSignalError(OAIPayCode summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePayCodeSignalErrorFull() instead")
    void deletePayCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayCodeRevisionSignalErrorFull() instead")
    void deletePayCodeRevisionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeRevisionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePayCodeRevisionByNumberSignalErrorFull() instead")
    void deletePayCodeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePayCodeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPayCodeTagsSignalErrorFull() instead")
    void getAllPayCodeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPayCodeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeByEffectiveDateSignalErrorFull() instead")
    void getPayCodeByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeFromEmployerSignalErrorFull() instead")
    void getPayCodeFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeRevisionByNumberSignalErrorFull() instead")
    void getPayCodeRevisionByNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeRevisionByNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodeRevisionsSignalErrorFull() instead")
    void getPayCodeRevisionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodeRevisionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesByEffectiveDateSignalErrorFull() instead")
    void getPayCodesByEffectiveDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesByEffectiveDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesFromEmployerSignalErrorFull() instead")
    void getPayCodesFromEmployerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesFromEmployerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesFromNominalCodeSignalErrorFull() instead")
    void getPayCodesFromNominalCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesFromNominalCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPayCodesWithTagSignalErrorFull() instead")
    void getPayCodesWithTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPayCodesWithTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchPayCodeSignalErrorFull() instead")
    void patchPayCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchPayCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPayCodeSignalErrorFull() instead")
    void postPayCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPayCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPayCodeSignalErrorFull() instead")
    void putPayCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPayCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
