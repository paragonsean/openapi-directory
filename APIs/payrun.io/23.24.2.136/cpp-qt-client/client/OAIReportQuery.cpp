/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportQuery::OAIReportQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportQuery::OAIReportQuery() {
    this->initializeModel();
}

OAIReportQuery::~OAIReportQuery() {}

void OAIReportQuery::initializeModel() {

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_exclude_null_or_empty_elements_isSet = false;
    m_exclude_null_or_empty_elements_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_root_node_name_isSet = false;
    m_root_node_name_isValid = false;

    m_suppress_metric_attributes_isSet = false;
    m_suppress_metric_attributes_isValid = false;

    m_variables_isSet = false;
    m_variables_isValid = false;
}

void OAIReportQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportQuery::fromJsonObject(QJsonObject json) {

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("Encoding")]);
    m_encoding_isSet = !json[QString("Encoding")].isNull() && m_encoding_isValid;

    m_exclude_null_or_empty_elements_isValid = ::OpenAPI::fromJsonValue(m_exclude_null_or_empty_elements, json[QString("ExcludeNullOrEmptyElements")]);
    m_exclude_null_or_empty_elements_isSet = !json[QString("ExcludeNullOrEmptyElements")].isNull() && m_exclude_null_or_empty_elements_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("Groups")]);
    m_groups_isSet = !json[QString("Groups")].isNull() && m_groups_isValid;

    m_root_node_name_isValid = ::OpenAPI::fromJsonValue(m_root_node_name, json[QString("RootNodeName")]);
    m_root_node_name_isSet = !json[QString("RootNodeName")].isNull() && m_root_node_name_isValid;

    m_suppress_metric_attributes_isValid = ::OpenAPI::fromJsonValue(m_suppress_metric_attributes, json[QString("SuppressMetricAttributes")]);
    m_suppress_metric_attributes_isSet = !json[QString("SuppressMetricAttributes")].isNull() && m_suppress_metric_attributes_isValid;

    m_variables_isValid = ::OpenAPI::fromJsonValue(m_variables, json[QString("Variables")]);
    m_variables_isSet = !json[QString("Variables")].isNull() && m_variables_isValid;
}

QString OAIReportQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_isSet) {
        obj.insert(QString("Encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_exclude_null_or_empty_elements_isSet) {
        obj.insert(QString("ExcludeNullOrEmptyElements"), ::OpenAPI::toJsonValue(m_exclude_null_or_empty_elements));
    }
    if (m_groups.isSet()) {
        obj.insert(QString("Groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_root_node_name_isSet) {
        obj.insert(QString("RootNodeName"), ::OpenAPI::toJsonValue(m_root_node_name));
    }
    if (m_suppress_metric_attributes_isSet) {
        obj.insert(QString("SuppressMetricAttributes"), ::OpenAPI::toJsonValue(m_suppress_metric_attributes));
    }
    if (m_variables.isSet()) {
        obj.insert(QString("Variables"), ::OpenAPI::toJsonValue(m_variables));
    }
    return obj;
}

QString OAIReportQuery::getEncoding() const {
    return m_encoding;
}
void OAIReportQuery::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIReportQuery::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIReportQuery::is_encoding_Valid() const{
    return m_encoding_isValid;
}

bool OAIReportQuery::isExcludeNullOrEmptyElements() const {
    return m_exclude_null_or_empty_elements;
}
void OAIReportQuery::setExcludeNullOrEmptyElements(const bool &exclude_null_or_empty_elements) {
    m_exclude_null_or_empty_elements = exclude_null_or_empty_elements;
    m_exclude_null_or_empty_elements_isSet = true;
}

bool OAIReportQuery::is_exclude_null_or_empty_elements_Set() const{
    return m_exclude_null_or_empty_elements_isSet;
}

bool OAIReportQuery::is_exclude_null_or_empty_elements_Valid() const{
    return m_exclude_null_or_empty_elements_isValid;
}

OAIGroup OAIReportQuery::getGroups() const {
    return m_groups;
}
void OAIReportQuery::setGroups(const OAIGroup &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIReportQuery::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIReportQuery::is_groups_Valid() const{
    return m_groups_isValid;
}

QString OAIReportQuery::getRootNodeName() const {
    return m_root_node_name;
}
void OAIReportQuery::setRootNodeName(const QString &root_node_name) {
    m_root_node_name = root_node_name;
    m_root_node_name_isSet = true;
}

bool OAIReportQuery::is_root_node_name_Set() const{
    return m_root_node_name_isSet;
}

bool OAIReportQuery::is_root_node_name_Valid() const{
    return m_root_node_name_isValid;
}

bool OAIReportQuery::isSuppressMetricAttributes() const {
    return m_suppress_metric_attributes;
}
void OAIReportQuery::setSuppressMetricAttributes(const bool &suppress_metric_attributes) {
    m_suppress_metric_attributes = suppress_metric_attributes;
    m_suppress_metric_attributes_isSet = true;
}

bool OAIReportQuery::is_suppress_metric_attributes_Set() const{
    return m_suppress_metric_attributes_isSet;
}

bool OAIReportQuery::is_suppress_metric_attributes_Valid() const{
    return m_suppress_metric_attributes_isValid;
}

OAIVariable OAIReportQuery::getVariables() const {
    return m_variables;
}
void OAIReportQuery::setVariables(const OAIVariable &variables) {
    m_variables = variables;
    m_variables_isSet = true;
}

bool OAIReportQuery::is_variables_Set() const{
    return m_variables_isSet;
}

bool OAIReportQuery::is_variables_Valid() const{
    return m_variables_isValid;
}

bool OAIReportQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclude_null_or_empty_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suppress_metric_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variables.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
