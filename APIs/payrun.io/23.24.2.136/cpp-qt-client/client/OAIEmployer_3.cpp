/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEmployer_3.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEmployer_3::OAIEmployer_3(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEmployer_3::OAIEmployer_3() {
    this->initializeModel();
}

OAIEmployer_3::~OAIEmployer_3() {}

void OAIEmployer_3::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_apprenticeship_levy_allowance_isSet = false;
    m_apprenticeship_levy_allowance_isValid = false;

    m_auto_enrolment_isSet = false;
    m_auto_enrolment_isValid = false;

    m_bacs_service_user_number_isSet = false;
    m_bacs_service_user_number_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_calculate_apprenticeship_levy_isSet = false;
    m_calculate_apprenticeship_levy_isValid = false;

    m_claim_employment_allowance_isSet = false;
    m_claim_employment_allowance_isValid = false;

    m_claim_small_employer_relief_isSet = false;
    m_claim_small_employer_relief_isValid = false;

    m_effective_date_isSet = false;
    m_effective_date_isValid = false;

    m_hmrc_settings_isSet = false;
    m_hmrc_settings_isValid = false;

    m_meta_data_isSet = false;
    m_meta_data_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_revision_date_isSet = false;
    m_next_revision_date_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_rule_exclusions_isSet = false;
    m_rule_exclusions_isValid = false;

    m_territory_isSet = false;
    m_territory_isValid = false;
}

void OAIEmployer_3::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEmployer_3::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_apprenticeship_levy_allowance_isValid = ::OpenAPI::fromJsonValue(m_apprenticeship_levy_allowance, json[QString("ApprenticeshipLevyAllowance")]);
    m_apprenticeship_levy_allowance_isSet = !json[QString("ApprenticeshipLevyAllowance")].isNull() && m_apprenticeship_levy_allowance_isValid;

    m_auto_enrolment_isValid = ::OpenAPI::fromJsonValue(m_auto_enrolment, json[QString("AutoEnrolment")]);
    m_auto_enrolment_isSet = !json[QString("AutoEnrolment")].isNull() && m_auto_enrolment_isValid;

    m_bacs_service_user_number_isValid = ::OpenAPI::fromJsonValue(m_bacs_service_user_number, json[QString("BacsServiceUserNumber")]);
    m_bacs_service_user_number_isSet = !json[QString("BacsServiceUserNumber")].isNull() && m_bacs_service_user_number_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("BankAccount")]);
    m_bank_account_isSet = !json[QString("BankAccount")].isNull() && m_bank_account_isValid;

    m_calculate_apprenticeship_levy_isValid = ::OpenAPI::fromJsonValue(m_calculate_apprenticeship_levy, json[QString("CalculateApprenticeshipLevy")]);
    m_calculate_apprenticeship_levy_isSet = !json[QString("CalculateApprenticeshipLevy")].isNull() && m_calculate_apprenticeship_levy_isValid;

    m_claim_employment_allowance_isValid = ::OpenAPI::fromJsonValue(m_claim_employment_allowance, json[QString("ClaimEmploymentAllowance")]);
    m_claim_employment_allowance_isSet = !json[QString("ClaimEmploymentAllowance")].isNull() && m_claim_employment_allowance_isValid;

    m_claim_small_employer_relief_isValid = ::OpenAPI::fromJsonValue(m_claim_small_employer_relief, json[QString("ClaimSmallEmployerRelief")]);
    m_claim_small_employer_relief_isSet = !json[QString("ClaimSmallEmployerRelief")].isNull() && m_claim_small_employer_relief_isValid;

    m_effective_date_isValid = ::OpenAPI::fromJsonValue(m_effective_date, json[QString("EffectiveDate")]);
    m_effective_date_isSet = !json[QString("EffectiveDate")].isNull() && m_effective_date_isValid;

    m_hmrc_settings_isValid = ::OpenAPI::fromJsonValue(m_hmrc_settings, json[QString("HmrcSettings")]);
    m_hmrc_settings_isSet = !json[QString("HmrcSettings")].isNull() && m_hmrc_settings_isValid;

    m_meta_data_isValid = ::OpenAPI::fromJsonValue(m_meta_data, json[QString("MetaData")]);
    m_meta_data_isSet = !json[QString("MetaData")].isNull() && m_meta_data_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_next_revision_date_isValid = ::OpenAPI::fromJsonValue(m_next_revision_date, json[QString("NextRevisionDate")]);
    m_next_revision_date_isSet = !json[QString("NextRevisionDate")].isNull() && m_next_revision_date_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("Revision")]);
    m_revision_isSet = !json[QString("Revision")].isNull() && m_revision_isValid;

    m_rule_exclusions_isValid = ::OpenAPI::fromJsonValue(m_rule_exclusions, json[QString("RuleExclusions")]);
    m_rule_exclusions_isSet = !json[QString("RuleExclusions")].isNull() && m_rule_exclusions_isValid;

    m_territory_isValid = ::OpenAPI::fromJsonValue(m_territory, json[QString("Territory")]);
    m_territory_isSet = !json[QString("Territory")].isNull() && m_territory_isValid;
}

QString OAIEmployer_3::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEmployer_3::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_apprenticeship_levy_allowance_isSet) {
        obj.insert(QString("ApprenticeshipLevyAllowance"), ::OpenAPI::toJsonValue(m_apprenticeship_levy_allowance));
    }
    if (m_auto_enrolment.isSet()) {
        obj.insert(QString("AutoEnrolment"), ::OpenAPI::toJsonValue(m_auto_enrolment));
    }
    if (m_bacs_service_user_number_isSet) {
        obj.insert(QString("BacsServiceUserNumber"), ::OpenAPI::toJsonValue(m_bacs_service_user_number));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("BankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_calculate_apprenticeship_levy_isSet) {
        obj.insert(QString("CalculateApprenticeshipLevy"), ::OpenAPI::toJsonValue(m_calculate_apprenticeship_levy));
    }
    if (m_claim_employment_allowance_isSet) {
        obj.insert(QString("ClaimEmploymentAllowance"), ::OpenAPI::toJsonValue(m_claim_employment_allowance));
    }
    if (m_claim_small_employer_relief_isSet) {
        obj.insert(QString("ClaimSmallEmployerRelief"), ::OpenAPI::toJsonValue(m_claim_small_employer_relief));
    }
    if (m_effective_date_isSet) {
        obj.insert(QString("EffectiveDate"), ::OpenAPI::toJsonValue(m_effective_date));
    }
    if (m_hmrc_settings.isSet()) {
        obj.insert(QString("HmrcSettings"), ::OpenAPI::toJsonValue(m_hmrc_settings));
    }
    if (m_meta_data_isSet) {
        obj.insert(QString("MetaData"), ::OpenAPI::toJsonValue(m_meta_data));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_revision_date_isSet) {
        obj.insert(QString("NextRevisionDate"), ::OpenAPI::toJsonValue(m_next_revision_date));
    }
    if (m_region_isSet) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_revision_isSet) {
        obj.insert(QString("Revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_rule_exclusions_isSet) {
        obj.insert(QString("RuleExclusions"), ::OpenAPI::toJsonValue(m_rule_exclusions));
    }
    if (m_territory_isSet) {
        obj.insert(QString("Territory"), ::OpenAPI::toJsonValue(m_territory));
    }
    return obj;
}

OAIAddress_1 OAIEmployer_3::getAddress() const {
    return m_address;
}
void OAIEmployer_3::setAddress(const OAIAddress_1 &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIEmployer_3::is_address_Set() const{
    return m_address_isSet;
}

bool OAIEmployer_3::is_address_Valid() const{
    return m_address_isValid;
}

double OAIEmployer_3::getApprenticeshipLevyAllowance() const {
    return m_apprenticeship_levy_allowance;
}
void OAIEmployer_3::setApprenticeshipLevyAllowance(const double &apprenticeship_levy_allowance) {
    m_apprenticeship_levy_allowance = apprenticeship_levy_allowance;
    m_apprenticeship_levy_allowance_isSet = true;
}

bool OAIEmployer_3::is_apprenticeship_levy_allowance_Set() const{
    return m_apprenticeship_levy_allowance_isSet;
}

bool OAIEmployer_3::is_apprenticeship_levy_allowance_Valid() const{
    return m_apprenticeship_levy_allowance_isValid;
}

OAIAutoEnrolment OAIEmployer_3::getAutoEnrolment() const {
    return m_auto_enrolment;
}
void OAIEmployer_3::setAutoEnrolment(const OAIAutoEnrolment &auto_enrolment) {
    m_auto_enrolment = auto_enrolment;
    m_auto_enrolment_isSet = true;
}

bool OAIEmployer_3::is_auto_enrolment_Set() const{
    return m_auto_enrolment_isSet;
}

bool OAIEmployer_3::is_auto_enrolment_Valid() const{
    return m_auto_enrolment_isValid;
}

QString OAIEmployer_3::getBacsServiceUserNumber() const {
    return m_bacs_service_user_number;
}
void OAIEmployer_3::setBacsServiceUserNumber(const QString &bacs_service_user_number) {
    m_bacs_service_user_number = bacs_service_user_number;
    m_bacs_service_user_number_isSet = true;
}

bool OAIEmployer_3::is_bacs_service_user_number_Set() const{
    return m_bacs_service_user_number_isSet;
}

bool OAIEmployer_3::is_bacs_service_user_number_Valid() const{
    return m_bacs_service_user_number_isValid;
}

OAIBankAccount_1 OAIEmployer_3::getBankAccount() const {
    return m_bank_account;
}
void OAIEmployer_3::setBankAccount(const OAIBankAccount_1 &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIEmployer_3::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIEmployer_3::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

bool OAIEmployer_3::isCalculateApprenticeshipLevy() const {
    return m_calculate_apprenticeship_levy;
}
void OAIEmployer_3::setCalculateApprenticeshipLevy(const bool &calculate_apprenticeship_levy) {
    m_calculate_apprenticeship_levy = calculate_apprenticeship_levy;
    m_calculate_apprenticeship_levy_isSet = true;
}

bool OAIEmployer_3::is_calculate_apprenticeship_levy_Set() const{
    return m_calculate_apprenticeship_levy_isSet;
}

bool OAIEmployer_3::is_calculate_apprenticeship_levy_Valid() const{
    return m_calculate_apprenticeship_levy_isValid;
}

bool OAIEmployer_3::isClaimEmploymentAllowance() const {
    return m_claim_employment_allowance;
}
void OAIEmployer_3::setClaimEmploymentAllowance(const bool &claim_employment_allowance) {
    m_claim_employment_allowance = claim_employment_allowance;
    m_claim_employment_allowance_isSet = true;
}

bool OAIEmployer_3::is_claim_employment_allowance_Set() const{
    return m_claim_employment_allowance_isSet;
}

bool OAIEmployer_3::is_claim_employment_allowance_Valid() const{
    return m_claim_employment_allowance_isValid;
}

bool OAIEmployer_3::isClaimSmallEmployerRelief() const {
    return m_claim_small_employer_relief;
}
void OAIEmployer_3::setClaimSmallEmployerRelief(const bool &claim_small_employer_relief) {
    m_claim_small_employer_relief = claim_small_employer_relief;
    m_claim_small_employer_relief_isSet = true;
}

bool OAIEmployer_3::is_claim_small_employer_relief_Set() const{
    return m_claim_small_employer_relief_isSet;
}

bool OAIEmployer_3::is_claim_small_employer_relief_Valid() const{
    return m_claim_small_employer_relief_isValid;
}

QDate OAIEmployer_3::getEffectiveDate() const {
    return m_effective_date;
}
void OAIEmployer_3::setEffectiveDate(const QDate &effective_date) {
    m_effective_date = effective_date;
    m_effective_date_isSet = true;
}

bool OAIEmployer_3::is_effective_date_Set() const{
    return m_effective_date_isSet;
}

bool OAIEmployer_3::is_effective_date_Valid() const{
    return m_effective_date_isValid;
}

OAIHmrcSettings OAIEmployer_3::getHmrcSettings() const {
    return m_hmrc_settings;
}
void OAIEmployer_3::setHmrcSettings(const OAIHmrcSettings &hmrc_settings) {
    m_hmrc_settings = hmrc_settings;
    m_hmrc_settings_isSet = true;
}

bool OAIEmployer_3::is_hmrc_settings_Set() const{
    return m_hmrc_settings_isSet;
}

bool OAIEmployer_3::is_hmrc_settings_Valid() const{
    return m_hmrc_settings_isValid;
}

OAIObject OAIEmployer_3::getMetaData() const {
    return m_meta_data;
}
void OAIEmployer_3::setMetaData(const OAIObject &meta_data) {
    m_meta_data = meta_data;
    m_meta_data_isSet = true;
}

bool OAIEmployer_3::is_meta_data_Set() const{
    return m_meta_data_isSet;
}

bool OAIEmployer_3::is_meta_data_Valid() const{
    return m_meta_data_isValid;
}

QString OAIEmployer_3::getName() const {
    return m_name;
}
void OAIEmployer_3::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEmployer_3::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEmployer_3::is_name_Valid() const{
    return m_name_isValid;
}

QDate OAIEmployer_3::getNextRevisionDate() const {
    return m_next_revision_date;
}
void OAIEmployer_3::setNextRevisionDate(const QDate &next_revision_date) {
    m_next_revision_date = next_revision_date;
    m_next_revision_date_isSet = true;
}

bool OAIEmployer_3::is_next_revision_date_Set() const{
    return m_next_revision_date_isSet;
}

bool OAIEmployer_3::is_next_revision_date_Valid() const{
    return m_next_revision_date_isValid;
}

QString OAIEmployer_3::getRegion() const {
    return m_region;
}
void OAIEmployer_3::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIEmployer_3::is_region_Set() const{
    return m_region_isSet;
}

bool OAIEmployer_3::is_region_Valid() const{
    return m_region_isValid;
}

qint32 OAIEmployer_3::getRevision() const {
    return m_revision;
}
void OAIEmployer_3::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIEmployer_3::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIEmployer_3::is_revision_Valid() const{
    return m_revision_isValid;
}

QString OAIEmployer_3::getRuleExclusions() const {
    return m_rule_exclusions;
}
void OAIEmployer_3::setRuleExclusions(const QString &rule_exclusions) {
    m_rule_exclusions = rule_exclusions;
    m_rule_exclusions_isSet = true;
}

bool OAIEmployer_3::is_rule_exclusions_Set() const{
    return m_rule_exclusions_isSet;
}

bool OAIEmployer_3::is_rule_exclusions_Valid() const{
    return m_rule_exclusions_isValid;
}

QString OAIEmployer_3::getTerritory() const {
    return m_territory;
}
void OAIEmployer_3::setTerritory(const QString &territory) {
    m_territory = territory;
    m_territory_isSet = true;
}

bool OAIEmployer_3::is_territory_Set() const{
    return m_territory_isSet;
}

bool OAIEmployer_3::is_territory_Valid() const{
    return m_territory_isValid;
}

bool OAIEmployer_3::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apprenticeship_levy_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_enrolment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bacs_service_user_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_calculate_apprenticeship_levy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_employment_allowance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_claim_small_employer_relief_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hmrc_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_revision_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_exclusions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_territory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEmployer_3::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
