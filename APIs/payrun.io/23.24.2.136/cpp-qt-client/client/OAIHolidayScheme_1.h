/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHolidayScheme_1.h
 *
 * 
 */

#ifndef OAIHolidayScheme_1_H
#define OAIHolidayScheme_1_H

#include <QJsonObject>

#include "OAIAccrualPayCodes.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccrualPayCodes;

class OAIHolidayScheme_1 : public OAIObject {
public:
    OAIHolidayScheme_1();
    OAIHolidayScheme_1(QString json);
    ~OAIHolidayScheme_1() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccrualPayCodes getAccrualPayCodes() const;
    void setAccrualPayCodes(const OAIAccrualPayCodes &accrual_pay_codes);
    bool is_accrual_pay_codes_Set() const;
    bool is_accrual_pay_codes_Valid() const;

    bool isAllowExceedAnnualEntitlement() const;
    void setAllowExceedAnnualEntitlement(const bool &allow_exceed_annual_entitlement);
    bool is_allow_exceed_annual_entitlement_Set() const;
    bool is_allow_exceed_annual_entitlement_Valid() const;

    bool isAllowNegativeBalance() const;
    void setAllowNegativeBalance(const bool &allow_negative_balance);
    bool is_allow_negative_balance_Set() const;
    bool is_allow_negative_balance_Valid() const;

    double getAnnualEntitlementWeeks() const;
    void setAnnualEntitlementWeeks(const double &annual_entitlement_weeks);
    bool is_annual_entitlement_weeks_Set() const;
    bool is_annual_entitlement_weeks_Valid() const;

    bool isBankHolidayInclusive() const;
    void setBankHolidayInclusive(const bool &bank_holiday_inclusive);
    bool is_bank_holiday_inclusive_Set() const;
    bool is_bank_holiday_inclusive_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QDate getEffectiveDate() const;
    void setEffectiveDate(const QDate &effective_date);
    bool is_effective_date_Set() const;
    bool is_effective_date_Valid() const;

    double getMaxCarryOverDays() const;
    void setMaxCarryOverDays(const double &max_carry_over_days);
    bool is_max_carry_over_days_Set() const;
    bool is_max_carry_over_days_Valid() const;

    QDate getNextRevisionDate() const;
    void setNextRevisionDate(const QDate &next_revision_date);
    bool is_next_revision_date_Set() const;
    bool is_next_revision_date_Valid() const;

    bool isOffsetPayment() const;
    void setOffsetPayment(const bool &offset_payment);
    bool is_offset_payment_Set() const;
    bool is_offset_payment_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    QDate getSchemeCeasedDate() const;
    void setSchemeCeasedDate(const QDate &scheme_ceased_date);
    bool is_scheme_ceased_date_Set() const;
    bool is_scheme_ceased_date_Valid() const;

    QString getSchemeKey() const;
    void setSchemeKey(const QString &scheme_key);
    bool is_scheme_key_Set() const;
    bool is_scheme_key_Valid() const;

    QString getSchemeName() const;
    void setSchemeName(const QString &scheme_name);
    bool is_scheme_name_Set() const;
    bool is_scheme_name_Valid() const;

    qint32 getYearStartDay() const;
    void setYearStartDay(const qint32 &year_start_day);
    bool is_year_start_day_Set() const;
    bool is_year_start_day_Valid() const;

    qint32 getYearStartMonth() const;
    void setYearStartMonth(const qint32 &year_start_month);
    bool is_year_start_month_Set() const;
    bool is_year_start_month_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccrualPayCodes m_accrual_pay_codes;
    bool m_accrual_pay_codes_isSet;
    bool m_accrual_pay_codes_isValid;

    bool m_allow_exceed_annual_entitlement;
    bool m_allow_exceed_annual_entitlement_isSet;
    bool m_allow_exceed_annual_entitlement_isValid;

    bool m_allow_negative_balance;
    bool m_allow_negative_balance_isSet;
    bool m_allow_negative_balance_isValid;

    double m_annual_entitlement_weeks;
    bool m_annual_entitlement_weeks_isSet;
    bool m_annual_entitlement_weeks_isValid;

    bool m_bank_holiday_inclusive;
    bool m_bank_holiday_inclusive_isSet;
    bool m_bank_holiday_inclusive_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QDate m_effective_date;
    bool m_effective_date_isSet;
    bool m_effective_date_isValid;

    double m_max_carry_over_days;
    bool m_max_carry_over_days_isSet;
    bool m_max_carry_over_days_isValid;

    QDate m_next_revision_date;
    bool m_next_revision_date_isSet;
    bool m_next_revision_date_isValid;

    bool m_offset_payment;
    bool m_offset_payment_isSet;
    bool m_offset_payment_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    QDate m_scheme_ceased_date;
    bool m_scheme_ceased_date_isSet;
    bool m_scheme_ceased_date_isValid;

    QString m_scheme_key;
    bool m_scheme_key_isSet;
    bool m_scheme_key_isValid;

    QString m_scheme_name;
    bool m_scheme_name_isSet;
    bool m_scheme_name_isValid;

    qint32 m_year_start_day;
    bool m_year_start_day_isSet;
    bool m_year_start_day_isValid;

    qint32 m_year_start_month;
    bool m_year_start_month_isSet;
    bool m_year_start_month_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHolidayScheme_1)

#endif // OAIHolidayScheme_1_H
