/**
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag_1::OAITag_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag_1::OAITag_1() {
    this->initializeModel();
}

OAITag_1::~OAITag_1() {}

void OAITag_1::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_tagged_item_isSet = false;
    m_tagged_item_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAITag_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag_1::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_tagged_item_isValid = ::OpenAPI::fromJsonValue(m_tagged_item, json[QString("TaggedItem")]);
    m_tagged_item_isSet = !json[QString("TaggedItem")].isNull() && m_tagged_item_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAITag_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag_1::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_tagged_item.isSet()) {
        obj.insert(QString("TaggedItem"), ::OpenAPI::toJsonValue(m_tagged_item));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QDateTime OAITag_1::getCreated() const {
    return m_created;
}
void OAITag_1::setCreated(const QDateTime &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAITag_1::is_created_Set() const{
    return m_created_isSet;
}

bool OAITag_1::is_created_Valid() const{
    return m_created_isValid;
}

OAITaggedItem OAITag_1::getTaggedItem() const {
    return m_tagged_item;
}
void OAITag_1::setTaggedItem(const OAITaggedItem &tagged_item) {
    m_tagged_item = tagged_item;
    m_tagged_item_isSet = true;
}

bool OAITag_1::is_tagged_item_Set() const{
    return m_tagged_item_isSet;
}

bool OAITag_1::is_tagged_item_Valid() const{
    return m_tagged_item_isValid;
}

QString OAITag_1::getText() const {
    return m_text;
}
void OAITag_1::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITag_1::is_text_Set() const{
    return m_text_isSet;
}

bool OAITag_1::is_text_Valid() const{
    return m_text_isValid;
}

bool OAITag_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tagged_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
