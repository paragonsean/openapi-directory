# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employer_core1 import EmployerCore1
from openapi_server import util


class RtiTransactionBase1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employer_core: EmployerCore1=None, request_data: str=None, response_data: str=None, rti_type: str=None, tax_year: int=None, timestamp: datetime=None, transaction_status: str=None, transmission_date: datetime=None):
        """RtiTransactionBase1 - a model defined in OpenAPI

        :param employer_core: The employer_core of this RtiTransactionBase1.
        :param request_data: The request_data of this RtiTransactionBase1.
        :param response_data: The response_data of this RtiTransactionBase1.
        :param rti_type: The rti_type of this RtiTransactionBase1.
        :param tax_year: The tax_year of this RtiTransactionBase1.
        :param timestamp: The timestamp of this RtiTransactionBase1.
        :param transaction_status: The transaction_status of this RtiTransactionBase1.
        :param transmission_date: The transmission_date of this RtiTransactionBase1.
        """
        self.openapi_types = {
            'employer_core': EmployerCore1,
            'request_data': str,
            'response_data': str,
            'rti_type': str,
            'tax_year': int,
            'timestamp': datetime,
            'transaction_status': str,
            'transmission_date': datetime
        }

        self.attribute_map = {
            'employer_core': 'EmployerCore',
            'request_data': 'RequestData',
            'response_data': 'ResponseData',
            'rti_type': 'RtiType',
            'tax_year': 'TaxYear',
            'timestamp': 'Timestamp',
            'transaction_status': 'TransactionStatus',
            'transmission_date': 'TransmissionDate'
        }

        self._employer_core = employer_core
        self._request_data = request_data
        self._response_data = response_data
        self._rti_type = rti_type
        self._tax_year = tax_year
        self._timestamp = timestamp
        self._transaction_status = transaction_status
        self._transmission_date = transmission_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtiTransactionBase1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RtiTransactionBase_1 of this RtiTransactionBase1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employer_core(self):
        """Gets the employer_core of this RtiTransactionBase1.


        :return: The employer_core of this RtiTransactionBase1.
        :rtype: EmployerCore1
        """
        return self._employer_core

    @employer_core.setter
    def employer_core(self, employer_core):
        """Sets the employer_core of this RtiTransactionBase1.


        :param employer_core: The employer_core of this RtiTransactionBase1.
        :type employer_core: EmployerCore1
        """

        self._employer_core = employer_core

    @property
    def request_data(self):
        """Gets the request_data of this RtiTransactionBase1.

        The rti transaction bases' request data

        :return: The request_data of this RtiTransactionBase1.
        :rtype: str
        """
        return self._request_data

    @request_data.setter
    def request_data(self, request_data):
        """Sets the request_data of this RtiTransactionBase1.

        The rti transaction bases' request data

        :param request_data: The request_data of this RtiTransactionBase1.
        :type request_data: str
        """

        self._request_data = request_data

    @property
    def response_data(self):
        """Gets the response_data of this RtiTransactionBase1.

        The rti transaction bases' response data

        :return: The response_data of this RtiTransactionBase1.
        :rtype: str
        """
        return self._response_data

    @response_data.setter
    def response_data(self, response_data):
        """Sets the response_data of this RtiTransactionBase1.

        The rti transaction bases' response data

        :param response_data: The response_data of this RtiTransactionBase1.
        :type response_data: str
        """

        self._response_data = response_data

    @property
    def rti_type(self):
        """Gets the rti_type of this RtiTransactionBase1.

        The rti transaction bases' rti type

        :return: The rti_type of this RtiTransactionBase1.
        :rtype: str
        """
        return self._rti_type

    @rti_type.setter
    def rti_type(self, rti_type):
        """Sets the rti_type of this RtiTransactionBase1.

        The rti transaction bases' rti type

        :param rti_type: The rti_type of this RtiTransactionBase1.
        :type rti_type: str
        """

        self._rti_type = rti_type

    @property
    def tax_year(self):
        """Gets the tax_year of this RtiTransactionBase1.

        The rti transaction bases' tax year

        :return: The tax_year of this RtiTransactionBase1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this RtiTransactionBase1.

        The rti transaction bases' tax year

        :param tax_year: The tax_year of this RtiTransactionBase1.
        :type tax_year: int
        """

        self._tax_year = tax_year

    @property
    def timestamp(self):
        """Gets the timestamp of this RtiTransactionBase1.

        The rti transaction bases' timestamp

        :return: The timestamp of this RtiTransactionBase1.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this RtiTransactionBase1.

        The rti transaction bases' timestamp

        :param timestamp: The timestamp of this RtiTransactionBase1.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def transaction_status(self):
        """Gets the transaction_status of this RtiTransactionBase1.

        The rti transaction bases' transaction status

        :return: The transaction_status of this RtiTransactionBase1.
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this RtiTransactionBase1.

        The rti transaction bases' transaction status

        :param transaction_status: The transaction_status of this RtiTransactionBase1.
        :type transaction_status: str
        """
        allowed_values = ["New", "RequestGenerated", "CompletedWithError", "CompletedWithSuccess", "TimeOut"]  # noqa: E501
        if transaction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status

    @property
    def transmission_date(self):
        """Gets the transmission_date of this RtiTransactionBase1.

        The rti transaction bases' transmission date

        :return: The transmission_date of this RtiTransactionBase1.
        :rtype: datetime
        """
        return self._transmission_date

    @transmission_date.setter
    def transmission_date(self, transmission_date):
        """Sets the transmission_date of this RtiTransactionBase1.

        The rti transaction bases' transmission date

        :param transmission_date: The transmission_date of this RtiTransactionBase1.
        :type transmission_date: datetime
        """

        self._transmission_date = transmission_date
