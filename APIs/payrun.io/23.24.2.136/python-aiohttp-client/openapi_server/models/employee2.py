# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.employee_partner import EmployeePartner
from openapi_server.models.pay_schedule1 import PaySchedule1
from openapi_server import util


class Employee2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ae_assessment_override: str=None, ae_assessment_override_date: date=None, ae_exclusion_reason_code: str=None, ae_postponement_date: date=None, address: Address=None, bank_account: BankAccount=None, code: str=None, date_of_birth: date=None, deactivated: bool=None, directorship_appointment_date: date=None, eea_citizen: bool=None, epm6: bool=None, effective_date: date=None, employee_partner: EmployeePartner=None, first_name: str=None, gender: str=None, hours_per_week: float=None, initials: str=None, irregular_employment: bool=None, is_agency_worker: bool=None, last_name: str=None, leaver_reason: str=None, leaving_date: date=None, marital_status: str=None, meta_data: object=None, middle_name: str=None, next_revision_date: date=None, ni_number: str=None, nic_liability: str=None, off_payroll_worker: bool=None, on_strike: bool=None, p45_issued_date: date=None, passport_number: str=None, pay_schedule: PaySchedule1=None, payment_method: str=None, payment_to_a_non_individual: bool=None, region: str=None, revision: int=None, rule_exclusions: str=None, seconded: str=None, start_date: date=None, starter_declaration: str=None, territory: str=None, title: str=None, veteran_period_start_date: date=None, working_week: str=None):
        """Employee2 - a model defined in OpenAPI

        :param ae_assessment_override: The ae_assessment_override of this Employee2.
        :param ae_assessment_override_date: The ae_assessment_override_date of this Employee2.
        :param ae_exclusion_reason_code: The ae_exclusion_reason_code of this Employee2.
        :param ae_postponement_date: The ae_postponement_date of this Employee2.
        :param address: The address of this Employee2.
        :param bank_account: The bank_account of this Employee2.
        :param code: The code of this Employee2.
        :param date_of_birth: The date_of_birth of this Employee2.
        :param deactivated: The deactivated of this Employee2.
        :param directorship_appointment_date: The directorship_appointment_date of this Employee2.
        :param eea_citizen: The eea_citizen of this Employee2.
        :param epm6: The epm6 of this Employee2.
        :param effective_date: The effective_date of this Employee2.
        :param employee_partner: The employee_partner of this Employee2.
        :param first_name: The first_name of this Employee2.
        :param gender: The gender of this Employee2.
        :param hours_per_week: The hours_per_week of this Employee2.
        :param initials: The initials of this Employee2.
        :param irregular_employment: The irregular_employment of this Employee2.
        :param is_agency_worker: The is_agency_worker of this Employee2.
        :param last_name: The last_name of this Employee2.
        :param leaver_reason: The leaver_reason of this Employee2.
        :param leaving_date: The leaving_date of this Employee2.
        :param marital_status: The marital_status of this Employee2.
        :param meta_data: The meta_data of this Employee2.
        :param middle_name: The middle_name of this Employee2.
        :param next_revision_date: The next_revision_date of this Employee2.
        :param ni_number: The ni_number of this Employee2.
        :param nic_liability: The nic_liability of this Employee2.
        :param off_payroll_worker: The off_payroll_worker of this Employee2.
        :param on_strike: The on_strike of this Employee2.
        :param p45_issued_date: The p45_issued_date of this Employee2.
        :param passport_number: The passport_number of this Employee2.
        :param pay_schedule: The pay_schedule of this Employee2.
        :param payment_method: The payment_method of this Employee2.
        :param payment_to_a_non_individual: The payment_to_a_non_individual of this Employee2.
        :param region: The region of this Employee2.
        :param revision: The revision of this Employee2.
        :param rule_exclusions: The rule_exclusions of this Employee2.
        :param seconded: The seconded of this Employee2.
        :param start_date: The start_date of this Employee2.
        :param starter_declaration: The starter_declaration of this Employee2.
        :param territory: The territory of this Employee2.
        :param title: The title of this Employee2.
        :param veteran_period_start_date: The veteran_period_start_date of this Employee2.
        :param working_week: The working_week of this Employee2.
        """
        self.openapi_types = {
            'ae_assessment_override': str,
            'ae_assessment_override_date': date,
            'ae_exclusion_reason_code': str,
            'ae_postponement_date': date,
            'address': Address,
            'bank_account': BankAccount,
            'code': str,
            'date_of_birth': date,
            'deactivated': bool,
            'directorship_appointment_date': date,
            'eea_citizen': bool,
            'epm6': bool,
            'effective_date': date,
            'employee_partner': EmployeePartner,
            'first_name': str,
            'gender': str,
            'hours_per_week': float,
            'initials': str,
            'irregular_employment': bool,
            'is_agency_worker': bool,
            'last_name': str,
            'leaver_reason': str,
            'leaving_date': date,
            'marital_status': str,
            'meta_data': object,
            'middle_name': str,
            'next_revision_date': date,
            'ni_number': str,
            'nic_liability': str,
            'off_payroll_worker': bool,
            'on_strike': bool,
            'p45_issued_date': date,
            'passport_number': str,
            'pay_schedule': PaySchedule1,
            'payment_method': str,
            'payment_to_a_non_individual': bool,
            'region': str,
            'revision': int,
            'rule_exclusions': str,
            'seconded': str,
            'start_date': date,
            'starter_declaration': str,
            'territory': str,
            'title': str,
            'veteran_period_start_date': date,
            'working_week': str
        }

        self.attribute_map = {
            'ae_assessment_override': 'AEAssessmentOverride',
            'ae_assessment_override_date': 'AEAssessmentOverrideDate',
            'ae_exclusion_reason_code': 'AEExclusionReasonCode',
            'ae_postponement_date': 'AEPostponementDate',
            'address': 'Address',
            'bank_account': 'BankAccount',
            'code': 'Code',
            'date_of_birth': 'DateOfBirth',
            'deactivated': 'Deactivated',
            'directorship_appointment_date': 'DirectorshipAppointmentDate',
            'eea_citizen': 'EEACitizen',
            'epm6': 'EPM6',
            'effective_date': 'EffectiveDate',
            'employee_partner': 'EmployeePartner',
            'first_name': 'FirstName',
            'gender': 'Gender',
            'hours_per_week': 'HoursPerWeek',
            'initials': 'Initials',
            'irregular_employment': 'IrregularEmployment',
            'is_agency_worker': 'IsAgencyWorker',
            'last_name': 'LastName',
            'leaver_reason': 'LeaverReason',
            'leaving_date': 'LeavingDate',
            'marital_status': 'MaritalStatus',
            'meta_data': 'MetaData',
            'middle_name': 'MiddleName',
            'next_revision_date': 'NextRevisionDate',
            'ni_number': 'NiNumber',
            'nic_liability': 'NicLiability',
            'off_payroll_worker': 'OffPayrollWorker',
            'on_strike': 'OnStrike',
            'p45_issued_date': 'P45IssuedDate',
            'passport_number': 'PassportNumber',
            'pay_schedule': 'PaySchedule',
            'payment_method': 'PaymentMethod',
            'payment_to_a_non_individual': 'PaymentToANonIndividual',
            'region': 'Region',
            'revision': 'Revision',
            'rule_exclusions': 'RuleExclusions',
            'seconded': 'Seconded',
            'start_date': 'StartDate',
            'starter_declaration': 'StarterDeclaration',
            'territory': 'Territory',
            'title': 'Title',
            'veteran_period_start_date': 'VeteranPeriodStartDate',
            'working_week': 'WorkingWeek'
        }

        self._ae_assessment_override = ae_assessment_override
        self._ae_assessment_override_date = ae_assessment_override_date
        self._ae_exclusion_reason_code = ae_exclusion_reason_code
        self._ae_postponement_date = ae_postponement_date
        self._address = address
        self._bank_account = bank_account
        self._code = code
        self._date_of_birth = date_of_birth
        self._deactivated = deactivated
        self._directorship_appointment_date = directorship_appointment_date
        self._eea_citizen = eea_citizen
        self._epm6 = epm6
        self._effective_date = effective_date
        self._employee_partner = employee_partner
        self._first_name = first_name
        self._gender = gender
        self._hours_per_week = hours_per_week
        self._initials = initials
        self._irregular_employment = irregular_employment
        self._is_agency_worker = is_agency_worker
        self._last_name = last_name
        self._leaver_reason = leaver_reason
        self._leaving_date = leaving_date
        self._marital_status = marital_status
        self._meta_data = meta_data
        self._middle_name = middle_name
        self._next_revision_date = next_revision_date
        self._ni_number = ni_number
        self._nic_liability = nic_liability
        self._off_payroll_worker = off_payroll_worker
        self._on_strike = on_strike
        self._p45_issued_date = p45_issued_date
        self._passport_number = passport_number
        self._pay_schedule = pay_schedule
        self._payment_method = payment_method
        self._payment_to_a_non_individual = payment_to_a_non_individual
        self._region = region
        self._revision = revision
        self._rule_exclusions = rule_exclusions
        self._seconded = seconded
        self._start_date = start_date
        self._starter_declaration = starter_declaration
        self._territory = territory
        self._title = title
        self._veteran_period_start_date = veteran_period_start_date
        self._working_week = working_week

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employee2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employee_2 of this Employee2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ae_assessment_override(self):
        """Gets the ae_assessment_override of this Employee2.

        The employees' a e assessment override

        :return: The ae_assessment_override of this Employee2.
        :rtype: str
        """
        return self._ae_assessment_override

    @ae_assessment_override.setter
    def ae_assessment_override(self, ae_assessment_override):
        """Sets the ae_assessment_override of this Employee2.

        The employees' a e assessment override

        :param ae_assessment_override: The ae_assessment_override of this Employee2.
        :type ae_assessment_override: str
        """
        allowed_values = ["None", "OptOut", "OptIn", "VoluntaryJoiner", "ContractualPension", "CeasedMembership", "Leaver", "Excluded"]  # noqa: E501
        if ae_assessment_override not in allowed_values:
            raise ValueError(
                "Invalid value for `ae_assessment_override` ({0}), must be one of {1}"
                .format(ae_assessment_override, allowed_values)
            )

        self._ae_assessment_override = ae_assessment_override

    @property
    def ae_assessment_override_date(self):
        """Gets the ae_assessment_override_date of this Employee2.

        The employees' a e assessment override date

        :return: The ae_assessment_override_date of this Employee2.
        :rtype: date
        """
        return self._ae_assessment_override_date

    @ae_assessment_override_date.setter
    def ae_assessment_override_date(self, ae_assessment_override_date):
        """Sets the ae_assessment_override_date of this Employee2.

        The employees' a e assessment override date

        :param ae_assessment_override_date: The ae_assessment_override_date of this Employee2.
        :type ae_assessment_override_date: date
        """

        self._ae_assessment_override_date = ae_assessment_override_date

    @property
    def ae_exclusion_reason_code(self):
        """Gets the ae_exclusion_reason_code of this Employee2.

        The employees' a e exclusion reason code

        :return: The ae_exclusion_reason_code of this Employee2.
        :rtype: str
        """
        return self._ae_exclusion_reason_code

    @ae_exclusion_reason_code.setter
    def ae_exclusion_reason_code(self, ae_exclusion_reason_code):
        """Sets the ae_exclusion_reason_code of this Employee2.

        The employees' a e exclusion reason code

        :param ae_exclusion_reason_code: The ae_exclusion_reason_code of this Employee2.
        :type ae_exclusion_reason_code: str
        """
        allowed_values = ["OtherNotKnown", "NotAWorker", "NotUKWorker", "TemporaryUKWorker", "OutsideAgeRange", "SingleEmployeeDirector", "CeasedMembershipWithin12Months", "CeasedMembershipBeyond12Months", "WorkerWULSWithin12Month", "WorkerWULSBeyond12Month", "WorkerInNoticePeriod", "WorkerTaxProtection"]  # noqa: E501
        if ae_exclusion_reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `ae_exclusion_reason_code` ({0}), must be one of {1}"
                .format(ae_exclusion_reason_code, allowed_values)
            )

        self._ae_exclusion_reason_code = ae_exclusion_reason_code

    @property
    def ae_postponement_date(self):
        """Gets the ae_postponement_date of this Employee2.

        The employees' a e postponement date

        :return: The ae_postponement_date of this Employee2.
        :rtype: date
        """
        return self._ae_postponement_date

    @ae_postponement_date.setter
    def ae_postponement_date(self, ae_postponement_date):
        """Sets the ae_postponement_date of this Employee2.

        The employees' a e postponement date

        :param ae_postponement_date: The ae_postponement_date of this Employee2.
        :type ae_postponement_date: date
        """

        self._ae_postponement_date = ae_postponement_date

    @property
    def address(self):
        """Gets the address of this Employee2.


        :return: The address of this Employee2.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Employee2.


        :param address: The address of this Employee2.
        :type address: Address
        """

        self._address = address

    @property
    def bank_account(self):
        """Gets the bank_account of this Employee2.


        :return: The bank_account of this Employee2.
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this Employee2.


        :param bank_account: The bank_account of this Employee2.
        :type bank_account: BankAccount
        """

        self._bank_account = bank_account

    @property
    def code(self):
        """Gets the code of this Employee2.

        The employees' code

        :return: The code of this Employee2.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Employee2.

        The employees' code

        :param code: The code of this Employee2.
        :type code: str
        """

        self._code = code

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Employee2.

        The employees' date of birth

        :return: The date_of_birth of this Employee2.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Employee2.

        The employees' date of birth

        :param date_of_birth: The date_of_birth of this Employee2.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def deactivated(self):
        """Gets the deactivated of this Employee2.

        The employees' deactivated

        :return: The deactivated of this Employee2.
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this Employee2.

        The employees' deactivated

        :param deactivated: The deactivated of this Employee2.
        :type deactivated: bool
        """

        self._deactivated = deactivated

    @property
    def directorship_appointment_date(self):
        """Gets the directorship_appointment_date of this Employee2.

        The employees' directorship appointment date

        :return: The directorship_appointment_date of this Employee2.
        :rtype: date
        """
        return self._directorship_appointment_date

    @directorship_appointment_date.setter
    def directorship_appointment_date(self, directorship_appointment_date):
        """Sets the directorship_appointment_date of this Employee2.

        The employees' directorship appointment date

        :param directorship_appointment_date: The directorship_appointment_date of this Employee2.
        :type directorship_appointment_date: date
        """

        self._directorship_appointment_date = directorship_appointment_date

    @property
    def eea_citizen(self):
        """Gets the eea_citizen of this Employee2.

        The employees' e e a citizen

        :return: The eea_citizen of this Employee2.
        :rtype: bool
        """
        return self._eea_citizen

    @eea_citizen.setter
    def eea_citizen(self, eea_citizen):
        """Sets the eea_citizen of this Employee2.

        The employees' e e a citizen

        :param eea_citizen: The eea_citizen of this Employee2.
        :type eea_citizen: bool
        """

        self._eea_citizen = eea_citizen

    @property
    def epm6(self):
        """Gets the epm6 of this Employee2.

        The employees' e p m6

        :return: The epm6 of this Employee2.
        :rtype: bool
        """
        return self._epm6

    @epm6.setter
    def epm6(self, epm6):
        """Sets the epm6 of this Employee2.

        The employees' e p m6

        :param epm6: The epm6 of this Employee2.
        :type epm6: bool
        """

        self._epm6 = epm6

    @property
    def effective_date(self):
        """Gets the effective_date of this Employee2.

        The employees' effective date

        :return: The effective_date of this Employee2.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Employee2.

        The employees' effective date

        :param effective_date: The effective_date of this Employee2.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def employee_partner(self):
        """Gets the employee_partner of this Employee2.


        :return: The employee_partner of this Employee2.
        :rtype: EmployeePartner
        """
        return self._employee_partner

    @employee_partner.setter
    def employee_partner(self, employee_partner):
        """Sets the employee_partner of this Employee2.


        :param employee_partner: The employee_partner of this Employee2.
        :type employee_partner: EmployeePartner
        """

        self._employee_partner = employee_partner

    @property
    def first_name(self):
        """Gets the first_name of this Employee2.

        The employees' the first name

        :return: The first_name of this Employee2.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Employee2.

        The employees' the first name

        :param first_name: The first_name of this Employee2.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Employee2.

        The employees' gender

        :return: The gender of this Employee2.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Employee2.

        The employees' gender

        :param gender: The gender of this Employee2.
        :type gender: str
        """
        allowed_values = ["Unknown", "Male", "Female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def hours_per_week(self):
        """Gets the hours_per_week of this Employee2.

        The employees' hours per week

        :return: The hours_per_week of this Employee2.
        :rtype: float
        """
        return self._hours_per_week

    @hours_per_week.setter
    def hours_per_week(self, hours_per_week):
        """Sets the hours_per_week of this Employee2.

        The employees' hours per week

        :param hours_per_week: The hours_per_week of this Employee2.
        :type hours_per_week: float
        """

        self._hours_per_week = hours_per_week

    @property
    def initials(self):
        """Gets the initials of this Employee2.

        The employees' initials

        :return: The initials of this Employee2.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this Employee2.

        The employees' initials

        :param initials: The initials of this Employee2.
        :type initials: str
        """

        self._initials = initials

    @property
    def irregular_employment(self):
        """Gets the irregular_employment of this Employee2.

        The employees' irregular employment

        :return: The irregular_employment of this Employee2.
        :rtype: bool
        """
        return self._irregular_employment

    @irregular_employment.setter
    def irregular_employment(self, irregular_employment):
        """Sets the irregular_employment of this Employee2.

        The employees' irregular employment

        :param irregular_employment: The irregular_employment of this Employee2.
        :type irregular_employment: bool
        """

        self._irregular_employment = irregular_employment

    @property
    def is_agency_worker(self):
        """Gets the is_agency_worker of this Employee2.

        The employees' is agency worker

        :return: The is_agency_worker of this Employee2.
        :rtype: bool
        """
        return self._is_agency_worker

    @is_agency_worker.setter
    def is_agency_worker(self, is_agency_worker):
        """Sets the is_agency_worker of this Employee2.

        The employees' is agency worker

        :param is_agency_worker: The is_agency_worker of this Employee2.
        :type is_agency_worker: bool
        """

        self._is_agency_worker = is_agency_worker

    @property
    def last_name(self):
        """Gets the last_name of this Employee2.

        The employees' last name

        :return: The last_name of this Employee2.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Employee2.

        The employees' last name

        :param last_name: The last_name of this Employee2.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def leaver_reason(self):
        """Gets the leaver_reason of this Employee2.

        The employees' leaver reason

        :return: The leaver_reason of this Employee2.
        :rtype: str
        """
        return self._leaver_reason

    @leaver_reason.setter
    def leaver_reason(self, leaver_reason):
        """Sets the leaver_reason of this Employee2.

        The employees' leaver reason

        :param leaver_reason: The leaver_reason of this Employee2.
        :type leaver_reason: str
        """
        allowed_values = ["Resigned", "Dismissed", "Redundant", "Retired", "Deceased", "LegalCustody", "Other"]  # noqa: E501
        if leaver_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `leaver_reason` ({0}), must be one of {1}"
                .format(leaver_reason, allowed_values)
            )

        self._leaver_reason = leaver_reason

    @property
    def leaving_date(self):
        """Gets the leaving_date of this Employee2.

        The employees' leaving date

        :return: The leaving_date of this Employee2.
        :rtype: date
        """
        return self._leaving_date

    @leaving_date.setter
    def leaving_date(self, leaving_date):
        """Sets the leaving_date of this Employee2.

        The employees' leaving date

        :param leaving_date: The leaving_date of this Employee2.
        :type leaving_date: date
        """

        self._leaving_date = leaving_date

    @property
    def marital_status(self):
        """Gets the marital_status of this Employee2.

        The employees' marital status

        :return: The marital_status of this Employee2.
        :rtype: str
        """
        return self._marital_status

    @marital_status.setter
    def marital_status(self, marital_status):
        """Sets the marital_status of this Employee2.

        The employees' marital status

        :param marital_status: The marital_status of this Employee2.
        :type marital_status: str
        """
        allowed_values = ["NotSet", "Single", "Married", "Divorced", "Widowed"]  # noqa: E501
        if marital_status not in allowed_values:
            raise ValueError(
                "Invalid value for `marital_status` ({0}), must be one of {1}"
                .format(marital_status, allowed_values)
            )

        self._marital_status = marital_status

    @property
    def meta_data(self):
        """Gets the meta_data of this Employee2.

        The employees' meta data

        :return: The meta_data of this Employee2.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Employee2.

        The employees' meta data

        :param meta_data: The meta_data of this Employee2.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def middle_name(self):
        """Gets the middle_name of this Employee2.

        The employees' middle name

        :return: The middle_name of this Employee2.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Employee2.

        The employees' middle name

        :param middle_name: The middle_name of this Employee2.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this Employee2.

        The employees' next revision date

        :return: The next_revision_date of this Employee2.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this Employee2.

        The employees' next revision date

        :param next_revision_date: The next_revision_date of this Employee2.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def ni_number(self):
        """Gets the ni_number of this Employee2.

        The employees' ni number

        :return: The ni_number of this Employee2.
        :rtype: str
        """
        return self._ni_number

    @ni_number.setter
    def ni_number(self, ni_number):
        """Sets the ni_number of this Employee2.

        The employees' ni number

        :param ni_number: The ni_number of this Employee2.
        :type ni_number: str
        """

        self._ni_number = ni_number

    @property
    def nic_liability(self):
        """Gets the nic_liability of this Employee2.

        The employees' nic liability

        :return: The nic_liability of this Employee2.
        :rtype: str
        """
        return self._nic_liability

    @nic_liability.setter
    def nic_liability(self, nic_liability):
        """Sets the nic_liability of this Employee2.

        The employees' nic liability

        :param nic_liability: The nic_liability of this Employee2.
        :type nic_liability: str
        """
        allowed_values = ["HasOtherJob", "IsFemaleEntitledToReducedRate", "IsNotLiable", "IsContractedOut", "IsFullyLiable", "IsApprentice", "LeaverBeyond6Weeks", "PaymentAfterLeavingIrregular", "IsFreePortWorker", "IsNotLiableForEmployerNi"]  # noqa: E501
        if nic_liability not in allowed_values:
            raise ValueError(
                "Invalid value for `nic_liability` ({0}), must be one of {1}"
                .format(nic_liability, allowed_values)
            )

        self._nic_liability = nic_liability

    @property
    def off_payroll_worker(self):
        """Gets the off_payroll_worker of this Employee2.

        The employees' off payroll worker

        :return: The off_payroll_worker of this Employee2.
        :rtype: bool
        """
        return self._off_payroll_worker

    @off_payroll_worker.setter
    def off_payroll_worker(self, off_payroll_worker):
        """Sets the off_payroll_worker of this Employee2.

        The employees' off payroll worker

        :param off_payroll_worker: The off_payroll_worker of this Employee2.
        :type off_payroll_worker: bool
        """

        self._off_payroll_worker = off_payroll_worker

    @property
    def on_strike(self):
        """Gets the on_strike of this Employee2.

        The employees' on strike

        :return: The on_strike of this Employee2.
        :rtype: bool
        """
        return self._on_strike

    @on_strike.setter
    def on_strike(self, on_strike):
        """Sets the on_strike of this Employee2.

        The employees' on strike

        :param on_strike: The on_strike of this Employee2.
        :type on_strike: bool
        """

        self._on_strike = on_strike

    @property
    def p45_issued_date(self):
        """Gets the p45_issued_date of this Employee2.

        The employees' p45 issued date

        :return: The p45_issued_date of this Employee2.
        :rtype: date
        """
        return self._p45_issued_date

    @p45_issued_date.setter
    def p45_issued_date(self, p45_issued_date):
        """Sets the p45_issued_date of this Employee2.

        The employees' p45 issued date

        :param p45_issued_date: The p45_issued_date of this Employee2.
        :type p45_issued_date: date
        """

        self._p45_issued_date = p45_issued_date

    @property
    def passport_number(self):
        """Gets the passport_number of this Employee2.

        The employees' passport number

        :return: The passport_number of this Employee2.
        :rtype: str
        """
        return self._passport_number

    @passport_number.setter
    def passport_number(self, passport_number):
        """Sets the passport_number of this Employee2.

        The employees' passport number

        :param passport_number: The passport_number of this Employee2.
        :type passport_number: str
        """

        self._passport_number = passport_number

    @property
    def pay_schedule(self):
        """Gets the pay_schedule of this Employee2.


        :return: The pay_schedule of this Employee2.
        :rtype: PaySchedule1
        """
        return self._pay_schedule

    @pay_schedule.setter
    def pay_schedule(self, pay_schedule):
        """Sets the pay_schedule of this Employee2.


        :param pay_schedule: The pay_schedule of this Employee2.
        :type pay_schedule: PaySchedule1
        """

        self._pay_schedule = pay_schedule

    @property
    def payment_method(self):
        """Gets the payment_method of this Employee2.

        The employees' payment method

        :return: The payment_method of this Employee2.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this Employee2.

        The employees' payment method

        :param payment_method: The payment_method of this Employee2.
        :type payment_method: str
        """
        allowed_values = ["NotSet", "Cash", "Cheque", "BACS", "FasterPayments", "Other"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def payment_to_a_non_individual(self):
        """Gets the payment_to_a_non_individual of this Employee2.

        The employees' payment to a non individual

        :return: The payment_to_a_non_individual of this Employee2.
        :rtype: bool
        """
        return self._payment_to_a_non_individual

    @payment_to_a_non_individual.setter
    def payment_to_a_non_individual(self, payment_to_a_non_individual):
        """Sets the payment_to_a_non_individual of this Employee2.

        The employees' payment to a non individual

        :param payment_to_a_non_individual: The payment_to_a_non_individual of this Employee2.
        :type payment_to_a_non_individual: bool
        """

        self._payment_to_a_non_individual = payment_to_a_non_individual

    @property
    def region(self):
        """Gets the region of this Employee2.

        The employees' region

        :return: The region of this Employee2.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Employee2.

        The employees' region

        :param region: The region of this Employee2.
        :type region: str
        """
        allowed_values = ["NotSet", "England", "Scotland", "Wales"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this Employee2.

        The employees' revision

        :return: The revision of this Employee2.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Employee2.

        The employees' revision

        :param revision: The revision of this Employee2.
        :type revision: int
        """

        self._revision = revision

    @property
    def rule_exclusions(self):
        """Gets the rule_exclusions of this Employee2.

        The employees' rule exclusions

        :return: The rule_exclusions of this Employee2.
        :rtype: str
        """
        return self._rule_exclusions

    @rule_exclusions.setter
    def rule_exclusions(self, rule_exclusions):
        """Sets the rule_exclusions of this Employee2.

        The employees' rule exclusions

        :param rule_exclusions: The rule_exclusions of this Employee2.
        :type rule_exclusions: str
        """
        allowed_values = ["None", "NiMissingPayInstructionRule", "TaxMissingPayInstructionRule", "TaxCodeUpliftRule", "NiSetExpectedLetterRule", "NiDateOfBirthChangeRetrospectiveCRule", "NiDefermentStatusChangeRule", "NiEndContractedOutTransferRule", "PaymentAfterLeavingTaxCodeRule", "LeaverEndInstructionsRule", "P45StudentLoanInstructionRule", "P45TaxInstructionRule", "P45YtdTaxRule", "YtdInstructionRule", "TaxCodeRegionChangeRule", "AutoEnrolmentStatusChangeRule", "EmployeeDeceasedRule", "BenefitInstructionAutoEndRule"]  # noqa: E501
        if rule_exclusions not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_exclusions` ({0}), must be one of {1}"
                .format(rule_exclusions, allowed_values)
            )

        self._rule_exclusions = rule_exclusions

    @property
    def seconded(self):
        """Gets the seconded of this Employee2.

        The employees' seconded

        :return: The seconded of this Employee2.
        :rtype: str
        """
        return self._seconded

    @seconded.setter
    def seconded(self, seconded):
        """Sets the seconded of this Employee2.

        The employees' seconded

        :param seconded: The seconded of this Employee2.
        :type seconded: str
        """
        allowed_values = ["NotSet", "Stay183DaysOrMore", "StayLessThan183Days", "InOutUk"]  # noqa: E501
        if seconded not in allowed_values:
            raise ValueError(
                "Invalid value for `seconded` ({0}), must be one of {1}"
                .format(seconded, allowed_values)
            )

        self._seconded = seconded

    @property
    def start_date(self):
        """Gets the start_date of this Employee2.

        The employees' start date

        :return: The start_date of this Employee2.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Employee2.

        The employees' start date

        :param start_date: The start_date of this Employee2.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def starter_declaration(self):
        """Gets the starter_declaration of this Employee2.

        The employees' starter declaration

        :return: The starter_declaration of this Employee2.
        :rtype: str
        """
        return self._starter_declaration

    @starter_declaration.setter
    def starter_declaration(self, starter_declaration):
        """Sets the starter_declaration of this Employee2.

        The employees' starter declaration

        :param starter_declaration: The starter_declaration of this Employee2.
        :type starter_declaration: str
        """
        allowed_values = ["PreviouslyReported", "A", "B", "C"]  # noqa: E501
        if starter_declaration not in allowed_values:
            raise ValueError(
                "Invalid value for `starter_declaration` ({0}), must be one of {1}"
                .format(starter_declaration, allowed_values)
            )

        self._starter_declaration = starter_declaration

    @property
    def territory(self):
        """Gets the territory of this Employee2.

        The employees' territory

        :return: The territory of this Employee2.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this Employee2.

        The employees' territory

        :param territory: The territory of this Employee2.
        :type territory: str
        """
        allowed_values = ["UnitedKingdom"]  # noqa: E501
        if territory not in allowed_values:
            raise ValueError(
                "Invalid value for `territory` ({0}), must be one of {1}"
                .format(territory, allowed_values)
            )

        self._territory = territory

    @property
    def title(self):
        """Gets the title of this Employee2.

        The employees' title

        :return: The title of this Employee2.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Employee2.

        The employees' title

        :param title: The title of this Employee2.
        :type title: str
        """

        self._title = title

    @property
    def veteran_period_start_date(self):
        """Gets the veteran_period_start_date of this Employee2.

        The employees' veteran period start date

        :return: The veteran_period_start_date of this Employee2.
        :rtype: date
        """
        return self._veteran_period_start_date

    @veteran_period_start_date.setter
    def veteran_period_start_date(self, veteran_period_start_date):
        """Sets the veteran_period_start_date of this Employee2.

        The employees' veteran period start date

        :param veteran_period_start_date: The veteran_period_start_date of this Employee2.
        :type veteran_period_start_date: date
        """

        self._veteran_period_start_date = veteran_period_start_date

    @property
    def working_week(self):
        """Gets the working_week of this Employee2.

        The employees' working week

        :return: The working_week of this Employee2.
        :rtype: str
        """
        return self._working_week

    @working_week.setter
    def working_week(self, working_week):
        """Sets the working_week of this Employee2.

        The employees' working week

        :param working_week: The working_week of this Employee2.
        :type working_week: str
        """
        allowed_values = ["None", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "AllWeekDays", "Saturday", "Sunday", "AllDays"]  # noqa: E501
        if working_week not in allowed_values:
            raise ValueError(
                "Invalid value for `working_week` ({0}), must be one of {1}"
                .format(working_week, allowed_values)
            )

        self._working_week = working_week
