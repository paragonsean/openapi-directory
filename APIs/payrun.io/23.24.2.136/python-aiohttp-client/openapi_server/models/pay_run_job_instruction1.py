# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employee4 import Employee4
from openapi_server.models.pay_schedule3 import PaySchedule3
from openapi_server import util


class PayRunJobInstruction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employees: Employee4=None, end_date: date=None, holding_date: datetime=None, is_supplementary: bool=None, pay_schedule: PaySchedule3=None, payment_date: date=None, start_date: date=None):
        """PayRunJobInstruction1 - a model defined in OpenAPI

        :param employees: The employees of this PayRunJobInstruction1.
        :param end_date: The end_date of this PayRunJobInstruction1.
        :param holding_date: The holding_date of this PayRunJobInstruction1.
        :param is_supplementary: The is_supplementary of this PayRunJobInstruction1.
        :param pay_schedule: The pay_schedule of this PayRunJobInstruction1.
        :param payment_date: The payment_date of this PayRunJobInstruction1.
        :param start_date: The start_date of this PayRunJobInstruction1.
        """
        self.openapi_types = {
            'employees': Employee4,
            'end_date': date,
            'holding_date': datetime,
            'is_supplementary': bool,
            'pay_schedule': PaySchedule3,
            'payment_date': date,
            'start_date': date
        }

        self.attribute_map = {
            'employees': 'Employees',
            'end_date': 'EndDate',
            'holding_date': 'HoldingDate',
            'is_supplementary': 'IsSupplementary',
            'pay_schedule': 'PaySchedule',
            'payment_date': 'PaymentDate',
            'start_date': 'StartDate'
        }

        self._employees = employees
        self._end_date = end_date
        self._holding_date = holding_date
        self._is_supplementary = is_supplementary
        self._pay_schedule = pay_schedule
        self._payment_date = payment_date
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayRunJobInstruction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayRunJobInstruction_1 of this PayRunJobInstruction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employees(self):
        """Gets the employees of this PayRunJobInstruction1.


        :return: The employees of this PayRunJobInstruction1.
        :rtype: Employee4
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this PayRunJobInstruction1.


        :param employees: The employees of this PayRunJobInstruction1.
        :type employees: Employee4
        """

        self._employees = employees

    @property
    def end_date(self):
        """Gets the end_date of this PayRunJobInstruction1.

        The pay run job instructions' end date

        :return: The end_date of this PayRunJobInstruction1.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PayRunJobInstruction1.

        The pay run job instructions' end date

        :param end_date: The end_date of this PayRunJobInstruction1.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def holding_date(self):
        """Gets the holding_date of this PayRunJobInstruction1.

        The pay run job instructions' holding date

        :return: The holding_date of this PayRunJobInstruction1.
        :rtype: datetime
        """
        return self._holding_date

    @holding_date.setter
    def holding_date(self, holding_date):
        """Sets the holding_date of this PayRunJobInstruction1.

        The pay run job instructions' holding date

        :param holding_date: The holding_date of this PayRunJobInstruction1.
        :type holding_date: datetime
        """

        self._holding_date = holding_date

    @property
    def is_supplementary(self):
        """Gets the is_supplementary of this PayRunJobInstruction1.

        The pay run job instructions' is supplementary

        :return: The is_supplementary of this PayRunJobInstruction1.
        :rtype: bool
        """
        return self._is_supplementary

    @is_supplementary.setter
    def is_supplementary(self, is_supplementary):
        """Sets the is_supplementary of this PayRunJobInstruction1.

        The pay run job instructions' is supplementary

        :param is_supplementary: The is_supplementary of this PayRunJobInstruction1.
        :type is_supplementary: bool
        """

        self._is_supplementary = is_supplementary

    @property
    def pay_schedule(self):
        """Gets the pay_schedule of this PayRunJobInstruction1.


        :return: The pay_schedule of this PayRunJobInstruction1.
        :rtype: PaySchedule3
        """
        return self._pay_schedule

    @pay_schedule.setter
    def pay_schedule(self, pay_schedule):
        """Sets the pay_schedule of this PayRunJobInstruction1.


        :param pay_schedule: The pay_schedule of this PayRunJobInstruction1.
        :type pay_schedule: PaySchedule3
        """

        self._pay_schedule = pay_schedule

    @property
    def payment_date(self):
        """Gets the payment_date of this PayRunJobInstruction1.

        The pay run job instructions' payment date

        :return: The payment_date of this PayRunJobInstruction1.
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PayRunJobInstruction1.

        The pay run job instructions' payment date

        :param payment_date: The payment_date of this PayRunJobInstruction1.
        :type payment_date: date
        """

        self._payment_date = payment_date

    @property
    def start_date(self):
        """Gets the start_date of this PayRunJobInstruction1.

        The pay run job instructions' start date

        :return: The start_date of this PayRunJobInstruction1.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PayRunJobInstruction1.

        The pay run job instructions' start date

        :param start_date: The start_date of this PayRunJobInstruction1.
        :type start_date: date
        """

        self._start_date = start_date
