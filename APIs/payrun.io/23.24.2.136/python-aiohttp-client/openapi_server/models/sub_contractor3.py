# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address2 import Address2
from openapi_server.models.bank_account2 import BankAccount2
from openapi_server import util


class SubContractor3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address2=None, bank_account: BankAccount2=None, business_type: str=None, company_name: str=None, company_registration_number: str=None, deactivated: bool=None, effective_date: date=None, first_name: str=None, initials: str=None, last_name: str=None, meta_data: object=None, middle_name: str=None, next_revision_date: date=None, ni_number: str=None, partnership_name: str=None, partnership_unique_tax_reference: str=None, pay_frequency: str=None, payment_method: str=None, region: str=None, revision: int=None, taxation_status: str=None, telephone: str=None, territory: str=None, title: str=None, trading_name: str=None, unique_tax_reference: str=None, vat_registered: bool=None, vat_registration_number: str=None, verification_date: datetime=None, verification_number: str=None, works_number: str=None):
        """SubContractor3 - a model defined in OpenAPI

        :param address: The address of this SubContractor3.
        :param bank_account: The bank_account of this SubContractor3.
        :param business_type: The business_type of this SubContractor3.
        :param company_name: The company_name of this SubContractor3.
        :param company_registration_number: The company_registration_number of this SubContractor3.
        :param deactivated: The deactivated of this SubContractor3.
        :param effective_date: The effective_date of this SubContractor3.
        :param first_name: The first_name of this SubContractor3.
        :param initials: The initials of this SubContractor3.
        :param last_name: The last_name of this SubContractor3.
        :param meta_data: The meta_data of this SubContractor3.
        :param middle_name: The middle_name of this SubContractor3.
        :param next_revision_date: The next_revision_date of this SubContractor3.
        :param ni_number: The ni_number of this SubContractor3.
        :param partnership_name: The partnership_name of this SubContractor3.
        :param partnership_unique_tax_reference: The partnership_unique_tax_reference of this SubContractor3.
        :param pay_frequency: The pay_frequency of this SubContractor3.
        :param payment_method: The payment_method of this SubContractor3.
        :param region: The region of this SubContractor3.
        :param revision: The revision of this SubContractor3.
        :param taxation_status: The taxation_status of this SubContractor3.
        :param telephone: The telephone of this SubContractor3.
        :param territory: The territory of this SubContractor3.
        :param title: The title of this SubContractor3.
        :param trading_name: The trading_name of this SubContractor3.
        :param unique_tax_reference: The unique_tax_reference of this SubContractor3.
        :param vat_registered: The vat_registered of this SubContractor3.
        :param vat_registration_number: The vat_registration_number of this SubContractor3.
        :param verification_date: The verification_date of this SubContractor3.
        :param verification_number: The verification_number of this SubContractor3.
        :param works_number: The works_number of this SubContractor3.
        """
        self.openapi_types = {
            'address': Address2,
            'bank_account': BankAccount2,
            'business_type': str,
            'company_name': str,
            'company_registration_number': str,
            'deactivated': bool,
            'effective_date': date,
            'first_name': str,
            'initials': str,
            'last_name': str,
            'meta_data': object,
            'middle_name': str,
            'next_revision_date': date,
            'ni_number': str,
            'partnership_name': str,
            'partnership_unique_tax_reference': str,
            'pay_frequency': str,
            'payment_method': str,
            'region': str,
            'revision': int,
            'taxation_status': str,
            'telephone': str,
            'territory': str,
            'title': str,
            'trading_name': str,
            'unique_tax_reference': str,
            'vat_registered': bool,
            'vat_registration_number': str,
            'verification_date': datetime,
            'verification_number': str,
            'works_number': str
        }

        self.attribute_map = {
            'address': 'Address',
            'bank_account': 'BankAccount',
            'business_type': 'BusinessType',
            'company_name': 'CompanyName',
            'company_registration_number': 'CompanyRegistrationNumber',
            'deactivated': 'Deactivated',
            'effective_date': 'EffectiveDate',
            'first_name': 'FirstName',
            'initials': 'Initials',
            'last_name': 'LastName',
            'meta_data': 'MetaData',
            'middle_name': 'MiddleName',
            'next_revision_date': 'NextRevisionDate',
            'ni_number': 'NiNumber',
            'partnership_name': 'PartnershipName',
            'partnership_unique_tax_reference': 'PartnershipUniqueTaxReference',
            'pay_frequency': 'PayFrequency',
            'payment_method': 'PaymentMethod',
            'region': 'Region',
            'revision': 'Revision',
            'taxation_status': 'TaxationStatus',
            'telephone': 'Telephone',
            'territory': 'Territory',
            'title': 'Title',
            'trading_name': 'TradingName',
            'unique_tax_reference': 'UniqueTaxReference',
            'vat_registered': 'VatRegistered',
            'vat_registration_number': 'VatRegistrationNumber',
            'verification_date': 'VerificationDate',
            'verification_number': 'VerificationNumber',
            'works_number': 'WorksNumber'
        }

        self._address = address
        self._bank_account = bank_account
        self._business_type = business_type
        self._company_name = company_name
        self._company_registration_number = company_registration_number
        self._deactivated = deactivated
        self._effective_date = effective_date
        self._first_name = first_name
        self._initials = initials
        self._last_name = last_name
        self._meta_data = meta_data
        self._middle_name = middle_name
        self._next_revision_date = next_revision_date
        self._ni_number = ni_number
        self._partnership_name = partnership_name
        self._partnership_unique_tax_reference = partnership_unique_tax_reference
        self._pay_frequency = pay_frequency
        self._payment_method = payment_method
        self._region = region
        self._revision = revision
        self._taxation_status = taxation_status
        self._telephone = telephone
        self._territory = territory
        self._title = title
        self._trading_name = trading_name
        self._unique_tax_reference = unique_tax_reference
        self._vat_registered = vat_registered
        self._vat_registration_number = vat_registration_number
        self._verification_date = verification_date
        self._verification_number = verification_number
        self._works_number = works_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubContractor3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubContractor_3 of this SubContractor3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SubContractor3.


        :return: The address of this SubContractor3.
        :rtype: Address2
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SubContractor3.


        :param address: The address of this SubContractor3.
        :type address: Address2
        """

        self._address = address

    @property
    def bank_account(self):
        """Gets the bank_account of this SubContractor3.


        :return: The bank_account of this SubContractor3.
        :rtype: BankAccount2
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this SubContractor3.


        :param bank_account: The bank_account of this SubContractor3.
        :type bank_account: BankAccount2
        """

        self._bank_account = bank_account

    @property
    def business_type(self):
        """Gets the business_type of this SubContractor3.

        The sub contractors' business type

        :return: The business_type of this SubContractor3.
        :rtype: str
        """
        return self._business_type

    @business_type.setter
    def business_type(self, business_type):
        """Sets the business_type of this SubContractor3.

        The sub contractors' business type

        :param business_type: The business_type of this SubContractor3.
        :type business_type: str
        """
        allowed_values = ["SoleTrader", "Company", "Partnership", "Trust"]  # noqa: E501
        if business_type not in allowed_values:
            raise ValueError(
                "Invalid value for `business_type` ({0}), must be one of {1}"
                .format(business_type, allowed_values)
            )

        self._business_type = business_type

    @property
    def company_name(self):
        """Gets the company_name of this SubContractor3.

        The sub contractors' company name

        :return: The company_name of this SubContractor3.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SubContractor3.

        The sub contractors' company name

        :param company_name: The company_name of this SubContractor3.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def company_registration_number(self):
        """Gets the company_registration_number of this SubContractor3.

        The sub contractors' company registration number

        :return: The company_registration_number of this SubContractor3.
        :rtype: str
        """
        return self._company_registration_number

    @company_registration_number.setter
    def company_registration_number(self, company_registration_number):
        """Sets the company_registration_number of this SubContractor3.

        The sub contractors' company registration number

        :param company_registration_number: The company_registration_number of this SubContractor3.
        :type company_registration_number: str
        """

        self._company_registration_number = company_registration_number

    @property
    def deactivated(self):
        """Gets the deactivated of this SubContractor3.

        The sub contractors' deactivated

        :return: The deactivated of this SubContractor3.
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this SubContractor3.

        The sub contractors' deactivated

        :param deactivated: The deactivated of this SubContractor3.
        :type deactivated: bool
        """

        self._deactivated = deactivated

    @property
    def effective_date(self):
        """Gets the effective_date of this SubContractor3.

        The sub contractors' effective date

        :return: The effective_date of this SubContractor3.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this SubContractor3.

        The sub contractors' effective date

        :param effective_date: The effective_date of this SubContractor3.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def first_name(self):
        """Gets the first_name of this SubContractor3.

        The sub contractors' first name

        :return: The first_name of this SubContractor3.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SubContractor3.

        The sub contractors' first name

        :param first_name: The first_name of this SubContractor3.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def initials(self):
        """Gets the initials of this SubContractor3.

        The sub contractors' initials

        :return: The initials of this SubContractor3.
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this SubContractor3.

        The sub contractors' initials

        :param initials: The initials of this SubContractor3.
        :type initials: str
        """

        self._initials = initials

    @property
    def last_name(self):
        """Gets the last_name of this SubContractor3.

        The sub contractors' last name

        :return: The last_name of this SubContractor3.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SubContractor3.

        The sub contractors' last name

        :param last_name: The last_name of this SubContractor3.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def meta_data(self):
        """Gets the meta_data of this SubContractor3.

        The sub contractors' meta data

        :return: The meta_data of this SubContractor3.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this SubContractor3.

        The sub contractors' meta data

        :param meta_data: The meta_data of this SubContractor3.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def middle_name(self):
        """Gets the middle_name of this SubContractor3.

        The sub contractors' middle name

        :return: The middle_name of this SubContractor3.
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this SubContractor3.

        The sub contractors' middle name

        :param middle_name: The middle_name of this SubContractor3.
        :type middle_name: str
        """

        self._middle_name = middle_name

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this SubContractor3.

        The sub contractors' next revision date

        :return: The next_revision_date of this SubContractor3.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this SubContractor3.

        The sub contractors' next revision date

        :param next_revision_date: The next_revision_date of this SubContractor3.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def ni_number(self):
        """Gets the ni_number of this SubContractor3.

        The sub contractors' ni number

        :return: The ni_number of this SubContractor3.
        :rtype: str
        """
        return self._ni_number

    @ni_number.setter
    def ni_number(self, ni_number):
        """Sets the ni_number of this SubContractor3.

        The sub contractors' ni number

        :param ni_number: The ni_number of this SubContractor3.
        :type ni_number: str
        """

        self._ni_number = ni_number

    @property
    def partnership_name(self):
        """Gets the partnership_name of this SubContractor3.

        The sub contractors' partnership name

        :return: The partnership_name of this SubContractor3.
        :rtype: str
        """
        return self._partnership_name

    @partnership_name.setter
    def partnership_name(self, partnership_name):
        """Sets the partnership_name of this SubContractor3.

        The sub contractors' partnership name

        :param partnership_name: The partnership_name of this SubContractor3.
        :type partnership_name: str
        """

        self._partnership_name = partnership_name

    @property
    def partnership_unique_tax_reference(self):
        """Gets the partnership_unique_tax_reference of this SubContractor3.

        The sub contractors' partnership unique tax reference

        :return: The partnership_unique_tax_reference of this SubContractor3.
        :rtype: str
        """
        return self._partnership_unique_tax_reference

    @partnership_unique_tax_reference.setter
    def partnership_unique_tax_reference(self, partnership_unique_tax_reference):
        """Sets the partnership_unique_tax_reference of this SubContractor3.

        The sub contractors' partnership unique tax reference

        :param partnership_unique_tax_reference: The partnership_unique_tax_reference of this SubContractor3.
        :type partnership_unique_tax_reference: str
        """

        self._partnership_unique_tax_reference = partnership_unique_tax_reference

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this SubContractor3.

        The sub contractors' pay frequency

        :return: The pay_frequency of this SubContractor3.
        :rtype: str
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this SubContractor3.

        The sub contractors' pay frequency

        :param pay_frequency: The pay_frequency of this SubContractor3.
        :type pay_frequency: str
        """
        allowed_values = ["Monthly", "Weekly"]  # noqa: E501
        if pay_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_frequency` ({0}), must be one of {1}"
                .format(pay_frequency, allowed_values)
            )

        self._pay_frequency = pay_frequency

    @property
    def payment_method(self):
        """Gets the payment_method of this SubContractor3.

        The sub contractors' payment method

        :return: The payment_method of this SubContractor3.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this SubContractor3.

        The sub contractors' payment method

        :param payment_method: The payment_method of this SubContractor3.
        :type payment_method: str
        """
        allowed_values = ["NotSet", "Cash", "Cheque", "BACS", "FasterPayments", "Other"]  # noqa: E501
        if payment_method not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_method` ({0}), must be one of {1}"
                .format(payment_method, allowed_values)
            )

        self._payment_method = payment_method

    @property
    def region(self):
        """Gets the region of this SubContractor3.

        The sub contractors' region

        :return: The region of this SubContractor3.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SubContractor3.

        The sub contractors' region

        :param region: The region of this SubContractor3.
        :type region: str
        """
        allowed_values = ["NotSet", "England", "Scotland", "Wales"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this SubContractor3.

        The sub contractors' revision

        :return: The revision of this SubContractor3.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SubContractor3.

        The sub contractors' revision

        :param revision: The revision of this SubContractor3.
        :type revision: int
        """

        self._revision = revision

    @property
    def taxation_status(self):
        """Gets the taxation_status of this SubContractor3.

        The sub contractors' taxation status

        :return: The taxation_status of this SubContractor3.
        :rtype: str
        """
        return self._taxation_status

    @taxation_status.setter
    def taxation_status(self, taxation_status):
        """Sets the taxation_status of this SubContractor3.

        The sub contractors' taxation status

        :param taxation_status: The taxation_status of this SubContractor3.
        :type taxation_status: str
        """
        allowed_values = ["Unmatched", "Net", "Gross"]  # noqa: E501
        if taxation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `taxation_status` ({0}), must be one of {1}"
                .format(taxation_status, allowed_values)
            )

        self._taxation_status = taxation_status

    @property
    def telephone(self):
        """Gets the telephone of this SubContractor3.

        The sub contractors' telephone

        :return: The telephone of this SubContractor3.
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this SubContractor3.

        The sub contractors' telephone

        :param telephone: The telephone of this SubContractor3.
        :type telephone: str
        """

        self._telephone = telephone

    @property
    def territory(self):
        """Gets the territory of this SubContractor3.

        The sub contractors' territory

        :return: The territory of this SubContractor3.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this SubContractor3.

        The sub contractors' territory

        :param territory: The territory of this SubContractor3.
        :type territory: str
        """
        allowed_values = ["UnitedKingdom"]  # noqa: E501
        if territory not in allowed_values:
            raise ValueError(
                "Invalid value for `territory` ({0}), must be one of {1}"
                .format(territory, allowed_values)
            )

        self._territory = territory

    @property
    def title(self):
        """Gets the title of this SubContractor3.

        The sub contractors' title

        :return: The title of this SubContractor3.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubContractor3.

        The sub contractors' title

        :param title: The title of this SubContractor3.
        :type title: str
        """

        self._title = title

    @property
    def trading_name(self):
        """Gets the trading_name of this SubContractor3.

        The sub contractors' trading name

        :return: The trading_name of this SubContractor3.
        :rtype: str
        """
        return self._trading_name

    @trading_name.setter
    def trading_name(self, trading_name):
        """Sets the trading_name of this SubContractor3.

        The sub contractors' trading name

        :param trading_name: The trading_name of this SubContractor3.
        :type trading_name: str
        """

        self._trading_name = trading_name

    @property
    def unique_tax_reference(self):
        """Gets the unique_tax_reference of this SubContractor3.

        The sub contractors' unique tax reference

        :return: The unique_tax_reference of this SubContractor3.
        :rtype: str
        """
        return self._unique_tax_reference

    @unique_tax_reference.setter
    def unique_tax_reference(self, unique_tax_reference):
        """Sets the unique_tax_reference of this SubContractor3.

        The sub contractors' unique tax reference

        :param unique_tax_reference: The unique_tax_reference of this SubContractor3.
        :type unique_tax_reference: str
        """

        self._unique_tax_reference = unique_tax_reference

    @property
    def vat_registered(self):
        """Gets the vat_registered of this SubContractor3.

        The sub contractors' vat registered

        :return: The vat_registered of this SubContractor3.
        :rtype: bool
        """
        return self._vat_registered

    @vat_registered.setter
    def vat_registered(self, vat_registered):
        """Sets the vat_registered of this SubContractor3.

        The sub contractors' vat registered

        :param vat_registered: The vat_registered of this SubContractor3.
        :type vat_registered: bool
        """

        self._vat_registered = vat_registered

    @property
    def vat_registration_number(self):
        """Gets the vat_registration_number of this SubContractor3.

        The sub contractors' vat registration number

        :return: The vat_registration_number of this SubContractor3.
        :rtype: str
        """
        return self._vat_registration_number

    @vat_registration_number.setter
    def vat_registration_number(self, vat_registration_number):
        """Sets the vat_registration_number of this SubContractor3.

        The sub contractors' vat registration number

        :param vat_registration_number: The vat_registration_number of this SubContractor3.
        :type vat_registration_number: str
        """

        self._vat_registration_number = vat_registration_number

    @property
    def verification_date(self):
        """Gets the verification_date of this SubContractor3.

        The sub contractors' verification date

        :return: The verification_date of this SubContractor3.
        :rtype: datetime
        """
        return self._verification_date

    @verification_date.setter
    def verification_date(self, verification_date):
        """Sets the verification_date of this SubContractor3.

        The sub contractors' verification date

        :param verification_date: The verification_date of this SubContractor3.
        :type verification_date: datetime
        """

        self._verification_date = verification_date

    @property
    def verification_number(self):
        """Gets the verification_number of this SubContractor3.

        The sub contractors' verification number

        :return: The verification_number of this SubContractor3.
        :rtype: str
        """
        return self._verification_number

    @verification_number.setter
    def verification_number(self, verification_number):
        """Sets the verification_number of this SubContractor3.

        The sub contractors' verification number

        :param verification_number: The verification_number of this SubContractor3.
        :type verification_number: str
        """

        self._verification_number = verification_number

    @property
    def works_number(self):
        """Gets the works_number of this SubContractor3.

        The sub contractors' works number

        :return: The works_number of this SubContractor3.
        :rtype: str
        """
        return self._works_number

    @works_number.setter
    def works_number(self, works_number):
        """Sets the works_number of this SubContractor3.

        The sub contractors' works number

        :param works_number: The works_number of this SubContractor3.
        :type works_number: str
        """

        self._works_number = works_number
