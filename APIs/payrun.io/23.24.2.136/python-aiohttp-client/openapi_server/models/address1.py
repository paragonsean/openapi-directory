# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address1: str=None, address2: str=None, address3: str=None, address4: str=None, country: str=None, postcode: str=None):
        """Address1 - a model defined in OpenAPI

        :param address1: The address1 of this Address1.
        :param address2: The address2 of this Address1.
        :param address3: The address3 of this Address1.
        :param address4: The address4 of this Address1.
        :param country: The country of this Address1.
        :param postcode: The postcode of this Address1.
        """
        self.openapi_types = {
            'address1': str,
            'address2': str,
            'address3': str,
            'address4': str,
            'country': str,
            'postcode': str
        }

        self.attribute_map = {
            'address1': 'Address1',
            'address2': 'Address2',
            'address3': 'Address3',
            'address4': 'Address4',
            'country': 'Country',
            'postcode': 'Postcode'
        }

        self._address1 = address1
        self._address2 = address2
        self._address3 = address3
        self._address4 = address4
        self._country = country
        self._postcode = postcode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address_1 of this Address1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address1(self):
        """Gets the address1 of this Address1.

        The addresss' line 1

        :return: The address1 of this Address1.
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this Address1.

        The addresss' line 1

        :param address1: The address1 of this Address1.
        :type address1: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this Address1.

        The addresss' line 2

        :return: The address2 of this Address1.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Address1.

        The addresss' line 2

        :param address2: The address2 of this Address1.
        :type address2: str
        """

        self._address2 = address2

    @property
    def address3(self):
        """Gets the address3 of this Address1.

        The addresss' line 3

        :return: The address3 of this Address1.
        :rtype: str
        """
        return self._address3

    @address3.setter
    def address3(self, address3):
        """Sets the address3 of this Address1.

        The addresss' line 3

        :param address3: The address3 of this Address1.
        :type address3: str
        """

        self._address3 = address3

    @property
    def address4(self):
        """Gets the address4 of this Address1.

        The addresss' line 4

        :return: The address4 of this Address1.
        :rtype: str
        """
        return self._address4

    @address4.setter
    def address4(self, address4):
        """Sets the address4 of this Address1.

        The addresss' line 4

        :param address4: The address4 of this Address1.
        :type address4: str
        """

        self._address4 = address4

    @property
    def country(self):
        """Gets the country of this Address1.

        The addresss' country

        :return: The country of this Address1.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address1.

        The addresss' country

        :param country: The country of this Address1.
        :type country: str
        """

        self._country = country

    @property
    def postcode(self):
        """Gets the postcode of this Address1.

        The addresss' postcode

        :return: The postcode of this Address1.
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this Address1.

        The addresss' postcode

        :param postcode: The postcode of this Address1.
        :type postcode: str
        """

        self._postcode = postcode
