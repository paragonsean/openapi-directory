# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employee1 import Employee1
from openapi_server.models.pay_run1 import PayRun1
from openapi_server import util


class Commentary1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, detail: str=None, employee: Employee1=None, pay_run: PayRun1=None):
        """Commentary1 - a model defined in OpenAPI

        :param created: The created of this Commentary1.
        :param detail: The detail of this Commentary1.
        :param employee: The employee of this Commentary1.
        :param pay_run: The pay_run of this Commentary1.
        """
        self.openapi_types = {
            'created': datetime,
            'detail': str,
            'employee': Employee1,
            'pay_run': PayRun1
        }

        self.attribute_map = {
            'created': 'Created',
            'detail': 'Detail',
            'employee': 'Employee',
            'pay_run': 'PayRun'
        }

        self._created = created
        self._detail = detail
        self._employee = employee
        self._pay_run = pay_run

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Commentary1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Commentary_1 of this Commentary1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Commentary1.

        The commentarys' created

        :return: The created of this Commentary1.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Commentary1.

        The commentarys' created

        :param created: The created of this Commentary1.
        :type created: datetime
        """

        self._created = created

    @property
    def detail(self):
        """Gets the detail of this Commentary1.

        The commentarys' detail

        :return: The detail of this Commentary1.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Commentary1.

        The commentarys' detail

        :param detail: The detail of this Commentary1.
        :type detail: str
        """

        self._detail = detail

    @property
    def employee(self):
        """Gets the employee of this Commentary1.


        :return: The employee of this Commentary1.
        :rtype: Employee1
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this Commentary1.


        :param employee: The employee of this Commentary1.
        :type employee: Employee1
        """

        self._employee = employee

    @property
    def pay_run(self):
        """Gets the pay_run of this Commentary1.


        :return: The pay_run of this Commentary1.
        :rtype: PayRun1
        """
        return self._pay_run

    @pay_run.setter
    def pay_run(self, pay_run):
        """Sets the pay_run of this Commentary1.


        :param pay_run: The pay_run of this Commentary1.
        :type pay_run: PayRun1
        """

        self._pay_run = pay_run
