# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nominal_code3 import NominalCode3
from openapi_server import util


class PayCode1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, benefit: bool=None, code: str=None, description: str=None, effective_date: date=None, meta_data: object=None, next_revision_date: date=None, niable: bool=None, nominal_code: NominalCode3=None, non_arrestable: bool=None, notional: bool=None, readonly: bool=None, region: str=None, revision: int=None, taxable: bool=None, territory: str=None, type: str=None):
        """PayCode1 - a model defined in OpenAPI

        :param benefit: The benefit of this PayCode1.
        :param code: The code of this PayCode1.
        :param description: The description of this PayCode1.
        :param effective_date: The effective_date of this PayCode1.
        :param meta_data: The meta_data of this PayCode1.
        :param next_revision_date: The next_revision_date of this PayCode1.
        :param niable: The niable of this PayCode1.
        :param nominal_code: The nominal_code of this PayCode1.
        :param non_arrestable: The non_arrestable of this PayCode1.
        :param notional: The notional of this PayCode1.
        :param readonly: The readonly of this PayCode1.
        :param region: The region of this PayCode1.
        :param revision: The revision of this PayCode1.
        :param taxable: The taxable of this PayCode1.
        :param territory: The territory of this PayCode1.
        :param type: The type of this PayCode1.
        """
        self.openapi_types = {
            'benefit': bool,
            'code': str,
            'description': str,
            'effective_date': date,
            'meta_data': object,
            'next_revision_date': date,
            'niable': bool,
            'nominal_code': NominalCode3,
            'non_arrestable': bool,
            'notional': bool,
            'readonly': bool,
            'region': str,
            'revision': int,
            'taxable': bool,
            'territory': str,
            'type': str
        }

        self.attribute_map = {
            'benefit': 'Benefit',
            'code': 'Code',
            'description': 'Description',
            'effective_date': 'EffectiveDate',
            'meta_data': 'MetaData',
            'next_revision_date': 'NextRevisionDate',
            'niable': 'Niable',
            'nominal_code': 'NominalCode',
            'non_arrestable': 'NonArrestable',
            'notional': 'Notional',
            'readonly': 'Readonly',
            'region': 'Region',
            'revision': 'Revision',
            'taxable': 'Taxable',
            'territory': 'Territory',
            'type': 'Type'
        }

        self._benefit = benefit
        self._code = code
        self._description = description
        self._effective_date = effective_date
        self._meta_data = meta_data
        self._next_revision_date = next_revision_date
        self._niable = niable
        self._nominal_code = nominal_code
        self._non_arrestable = non_arrestable
        self._notional = notional
        self._readonly = readonly
        self._region = region
        self._revision = revision
        self._taxable = taxable
        self._territory = territory
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayCode1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayCode_1 of this PayCode1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def benefit(self):
        """Gets the benefit of this PayCode1.

        The pay codes' benefit

        :return: The benefit of this PayCode1.
        :rtype: bool
        """
        return self._benefit

    @benefit.setter
    def benefit(self, benefit):
        """Sets the benefit of this PayCode1.

        The pay codes' benefit

        :param benefit: The benefit of this PayCode1.
        :type benefit: bool
        """

        self._benefit = benefit

    @property
    def code(self):
        """Gets the code of this PayCode1.

        The pay codes' code

        :return: The code of this PayCode1.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PayCode1.

        The pay codes' code

        :param code: The code of this PayCode1.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this PayCode1.

        The pay codes' description

        :return: The description of this PayCode1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayCode1.

        The pay codes' description

        :param description: The description of this PayCode1.
        :type description: str
        """

        self._description = description

    @property
    def effective_date(self):
        """Gets the effective_date of this PayCode1.

        The pay codes' effective date

        :return: The effective_date of this PayCode1.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this PayCode1.

        The pay codes' effective date

        :param effective_date: The effective_date of this PayCode1.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def meta_data(self):
        """Gets the meta_data of this PayCode1.

        The pay codes' meta data

        :return: The meta_data of this PayCode1.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PayCode1.

        The pay codes' meta data

        :param meta_data: The meta_data of this PayCode1.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this PayCode1.

        The pay codes' next revision date

        :return: The next_revision_date of this PayCode1.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this PayCode1.

        The pay codes' next revision date

        :param next_revision_date: The next_revision_date of this PayCode1.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def niable(self):
        """Gets the niable of this PayCode1.

        The pay codes' niable

        :return: The niable of this PayCode1.
        :rtype: bool
        """
        return self._niable

    @niable.setter
    def niable(self, niable):
        """Sets the niable of this PayCode1.

        The pay codes' niable

        :param niable: The niable of this PayCode1.
        :type niable: bool
        """

        self._niable = niable

    @property
    def nominal_code(self):
        """Gets the nominal_code of this PayCode1.


        :return: The nominal_code of this PayCode1.
        :rtype: NominalCode3
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this PayCode1.


        :param nominal_code: The nominal_code of this PayCode1.
        :type nominal_code: NominalCode3
        """

        self._nominal_code = nominal_code

    @property
    def non_arrestable(self):
        """Gets the non_arrestable of this PayCode1.

        The pay codes' non arrestable

        :return: The non_arrestable of this PayCode1.
        :rtype: bool
        """
        return self._non_arrestable

    @non_arrestable.setter
    def non_arrestable(self, non_arrestable):
        """Sets the non_arrestable of this PayCode1.

        The pay codes' non arrestable

        :param non_arrestable: The non_arrestable of this PayCode1.
        :type non_arrestable: bool
        """

        self._non_arrestable = non_arrestable

    @property
    def notional(self):
        """Gets the notional of this PayCode1.

        The pay codes' notional

        :return: The notional of this PayCode1.
        :rtype: bool
        """
        return self._notional

    @notional.setter
    def notional(self, notional):
        """Sets the notional of this PayCode1.

        The pay codes' notional

        :param notional: The notional of this PayCode1.
        :type notional: bool
        """

        self._notional = notional

    @property
    def readonly(self):
        """Gets the readonly of this PayCode1.

        The pay codes' readonly

        :return: The readonly of this PayCode1.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this PayCode1.

        The pay codes' readonly

        :param readonly: The readonly of this PayCode1.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def region(self):
        """Gets the region of this PayCode1.

        The pay codes' region

        :return: The region of this PayCode1.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this PayCode1.

        The pay codes' region

        :param region: The region of this PayCode1.
        :type region: str
        """
        allowed_values = ["NotSet", "England", "Scotland", "Wales"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this PayCode1.

        The pay codes' revision

        :return: The revision of this PayCode1.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this PayCode1.

        The pay codes' revision

        :param revision: The revision of this PayCode1.
        :type revision: int
        """

        self._revision = revision

    @property
    def taxable(self):
        """Gets the taxable of this PayCode1.

        The pay codes' taxable

        :return: The taxable of this PayCode1.
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this PayCode1.

        The pay codes' taxable

        :param taxable: The taxable of this PayCode1.
        :type taxable: bool
        """

        self._taxable = taxable

    @property
    def territory(self):
        """Gets the territory of this PayCode1.

        The pay codes' territory

        :return: The territory of this PayCode1.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this PayCode1.

        The pay codes' territory

        :param territory: The territory of this PayCode1.
        :type territory: str
        """
        allowed_values = ["UnitedKingdom"]  # noqa: E501
        if territory not in allowed_values:
            raise ValueError(
                "Invalid value for `territory` ({0}), must be one of {1}"
                .format(territory, allowed_values)
            )

        self._territory = territory

    @property
    def type(self):
        """Gets the type of this PayCode1.

        The pay codes' type

        :return: The type of this PayCode1.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PayCode1.

        The pay codes' type

        :param type: The type of this PayCode1.
        :type type: str
        """
        allowed_values = ["NotSet", "Payment", "Deduction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
