# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pensionable_pay_codes import PensionablePayCodes
from openapi_server.models.qualifying_pay_codes import QualifyingPayCodes
from openapi_server import util


class Pension2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ae_compatible: bool=None, certification: str=None, code: str=None, contribution_deduction_day: int=None, effective_date: date=None, employee_contribution_cash: float=None, employee_contribution_percent: float=None, employer_contribution_cash: float=None, employer_contribution_percent: float=None, employer_ni_saving: bool=None, employer_ni_saving_percentage: float=None, group: str=None, lower_threshold: float=None, meta_data: object=None, next_revision_date: date=None, pensionable_pay_codes: PensionablePayCodes=None, pro_rata_method: str=None, provider_employer_ref: str=None, provider_name: str=None, qualifying_pay_codes: QualifyingPayCodes=None, ras_rounding_override: str=None, revision: int=None, rounding_option: str=None, salary_sacrifice: bool=None, scheme_name: str=None, sub_group: str=None, taxation_method: str=None, upper_threshold: float=None, use_ae_thresholds: bool=None):
        """Pension2 - a model defined in OpenAPI

        :param ae_compatible: The ae_compatible of this Pension2.
        :param certification: The certification of this Pension2.
        :param code: The code of this Pension2.
        :param contribution_deduction_day: The contribution_deduction_day of this Pension2.
        :param effective_date: The effective_date of this Pension2.
        :param employee_contribution_cash: The employee_contribution_cash of this Pension2.
        :param employee_contribution_percent: The employee_contribution_percent of this Pension2.
        :param employer_contribution_cash: The employer_contribution_cash of this Pension2.
        :param employer_contribution_percent: The employer_contribution_percent of this Pension2.
        :param employer_ni_saving: The employer_ni_saving of this Pension2.
        :param employer_ni_saving_percentage: The employer_ni_saving_percentage of this Pension2.
        :param group: The group of this Pension2.
        :param lower_threshold: The lower_threshold of this Pension2.
        :param meta_data: The meta_data of this Pension2.
        :param next_revision_date: The next_revision_date of this Pension2.
        :param pensionable_pay_codes: The pensionable_pay_codes of this Pension2.
        :param pro_rata_method: The pro_rata_method of this Pension2.
        :param provider_employer_ref: The provider_employer_ref of this Pension2.
        :param provider_name: The provider_name of this Pension2.
        :param qualifying_pay_codes: The qualifying_pay_codes of this Pension2.
        :param ras_rounding_override: The ras_rounding_override of this Pension2.
        :param revision: The revision of this Pension2.
        :param rounding_option: The rounding_option of this Pension2.
        :param salary_sacrifice: The salary_sacrifice of this Pension2.
        :param scheme_name: The scheme_name of this Pension2.
        :param sub_group: The sub_group of this Pension2.
        :param taxation_method: The taxation_method of this Pension2.
        :param upper_threshold: The upper_threshold of this Pension2.
        :param use_ae_thresholds: The use_ae_thresholds of this Pension2.
        """
        self.openapi_types = {
            'ae_compatible': bool,
            'certification': str,
            'code': str,
            'contribution_deduction_day': int,
            'effective_date': date,
            'employee_contribution_cash': float,
            'employee_contribution_percent': float,
            'employer_contribution_cash': float,
            'employer_contribution_percent': float,
            'employer_ni_saving': bool,
            'employer_ni_saving_percentage': float,
            'group': str,
            'lower_threshold': float,
            'meta_data': object,
            'next_revision_date': date,
            'pensionable_pay_codes': PensionablePayCodes,
            'pro_rata_method': str,
            'provider_employer_ref': str,
            'provider_name': str,
            'qualifying_pay_codes': QualifyingPayCodes,
            'ras_rounding_override': str,
            'revision': int,
            'rounding_option': str,
            'salary_sacrifice': bool,
            'scheme_name': str,
            'sub_group': str,
            'taxation_method': str,
            'upper_threshold': float,
            'use_ae_thresholds': bool
        }

        self.attribute_map = {
            'ae_compatible': 'AECompatible',
            'certification': 'Certification',
            'code': 'Code',
            'contribution_deduction_day': 'ContributionDeductionDay',
            'effective_date': 'EffectiveDate',
            'employee_contribution_cash': 'EmployeeContributionCash',
            'employee_contribution_percent': 'EmployeeContributionPercent',
            'employer_contribution_cash': 'EmployerContributionCash',
            'employer_contribution_percent': 'EmployerContributionPercent',
            'employer_ni_saving': 'EmployerNiSaving',
            'employer_ni_saving_percentage': 'EmployerNiSavingPercentage',
            'group': 'Group',
            'lower_threshold': 'LowerThreshold',
            'meta_data': 'MetaData',
            'next_revision_date': 'NextRevisionDate',
            'pensionable_pay_codes': 'PensionablePayCodes',
            'pro_rata_method': 'ProRataMethod',
            'provider_employer_ref': 'ProviderEmployerRef',
            'provider_name': 'ProviderName',
            'qualifying_pay_codes': 'QualifyingPayCodes',
            'ras_rounding_override': 'RasRoundingOverride',
            'revision': 'Revision',
            'rounding_option': 'RoundingOption',
            'salary_sacrifice': 'SalarySacrifice',
            'scheme_name': 'SchemeName',
            'sub_group': 'SubGroup',
            'taxation_method': 'TaxationMethod',
            'upper_threshold': 'UpperThreshold',
            'use_ae_thresholds': 'UseAEThresholds'
        }

        self._ae_compatible = ae_compatible
        self._certification = certification
        self._code = code
        self._contribution_deduction_day = contribution_deduction_day
        self._effective_date = effective_date
        self._employee_contribution_cash = employee_contribution_cash
        self._employee_contribution_percent = employee_contribution_percent
        self._employer_contribution_cash = employer_contribution_cash
        self._employer_contribution_percent = employer_contribution_percent
        self._employer_ni_saving = employer_ni_saving
        self._employer_ni_saving_percentage = employer_ni_saving_percentage
        self._group = group
        self._lower_threshold = lower_threshold
        self._meta_data = meta_data
        self._next_revision_date = next_revision_date
        self._pensionable_pay_codes = pensionable_pay_codes
        self._pro_rata_method = pro_rata_method
        self._provider_employer_ref = provider_employer_ref
        self._provider_name = provider_name
        self._qualifying_pay_codes = qualifying_pay_codes
        self._ras_rounding_override = ras_rounding_override
        self._revision = revision
        self._rounding_option = rounding_option
        self._salary_sacrifice = salary_sacrifice
        self._scheme_name = scheme_name
        self._sub_group = sub_group
        self._taxation_method = taxation_method
        self._upper_threshold = upper_threshold
        self._use_ae_thresholds = use_ae_thresholds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pension2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pension_2 of this Pension2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ae_compatible(self):
        """Gets the ae_compatible of this Pension2.

        The pensions' a e compatible

        :return: The ae_compatible of this Pension2.
        :rtype: bool
        """
        return self._ae_compatible

    @ae_compatible.setter
    def ae_compatible(self, ae_compatible):
        """Sets the ae_compatible of this Pension2.

        The pensions' a e compatible

        :param ae_compatible: The ae_compatible of this Pension2.
        :type ae_compatible: bool
        """

        self._ae_compatible = ae_compatible

    @property
    def certification(self):
        """Gets the certification of this Pension2.

        The pensions' certification

        :return: The certification of this Pension2.
        :rtype: str
        """
        return self._certification

    @certification.setter
    def certification(self, certification):
        """Sets the certification of this Pension2.

        The pensions' certification

        :param certification: The certification of this Pension2.
        :type certification: str
        """
        allowed_values = ["NotSet", "Set1", "Set2", "Set3"]  # noqa: E501
        if certification not in allowed_values:
            raise ValueError(
                "Invalid value for `certification` ({0}), must be one of {1}"
                .format(certification, allowed_values)
            )

        self._certification = certification

    @property
    def code(self):
        """Gets the code of this Pension2.

        The pensions' code

        :return: The code of this Pension2.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Pension2.

        The pensions' code

        :param code: The code of this Pension2.
        :type code: str
        """

        self._code = code

    @property
    def contribution_deduction_day(self):
        """Gets the contribution_deduction_day of this Pension2.

        The pensions' contribution deduction day

        :return: The contribution_deduction_day of this Pension2.
        :rtype: int
        """
        return self._contribution_deduction_day

    @contribution_deduction_day.setter
    def contribution_deduction_day(self, contribution_deduction_day):
        """Sets the contribution_deduction_day of this Pension2.

        The pensions' contribution deduction day

        :param contribution_deduction_day: The contribution_deduction_day of this Pension2.
        :type contribution_deduction_day: int
        """

        self._contribution_deduction_day = contribution_deduction_day

    @property
    def effective_date(self):
        """Gets the effective_date of this Pension2.

        The pensions' effective date

        :return: The effective_date of this Pension2.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Pension2.

        The pensions' effective date

        :param effective_date: The effective_date of this Pension2.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def employee_contribution_cash(self):
        """Gets the employee_contribution_cash of this Pension2.

        The pensions' employee contribution cash

        :return: The employee_contribution_cash of this Pension2.
        :rtype: float
        """
        return self._employee_contribution_cash

    @employee_contribution_cash.setter
    def employee_contribution_cash(self, employee_contribution_cash):
        """Sets the employee_contribution_cash of this Pension2.

        The pensions' employee contribution cash

        :param employee_contribution_cash: The employee_contribution_cash of this Pension2.
        :type employee_contribution_cash: float
        """

        self._employee_contribution_cash = employee_contribution_cash

    @property
    def employee_contribution_percent(self):
        """Gets the employee_contribution_percent of this Pension2.

        The pensions' employee contribution percent

        :return: The employee_contribution_percent of this Pension2.
        :rtype: float
        """
        return self._employee_contribution_percent

    @employee_contribution_percent.setter
    def employee_contribution_percent(self, employee_contribution_percent):
        """Sets the employee_contribution_percent of this Pension2.

        The pensions' employee contribution percent

        :param employee_contribution_percent: The employee_contribution_percent of this Pension2.
        :type employee_contribution_percent: float
        """

        self._employee_contribution_percent = employee_contribution_percent

    @property
    def employer_contribution_cash(self):
        """Gets the employer_contribution_cash of this Pension2.

        The pensions' employer contribution cash

        :return: The employer_contribution_cash of this Pension2.
        :rtype: float
        """
        return self._employer_contribution_cash

    @employer_contribution_cash.setter
    def employer_contribution_cash(self, employer_contribution_cash):
        """Sets the employer_contribution_cash of this Pension2.

        The pensions' employer contribution cash

        :param employer_contribution_cash: The employer_contribution_cash of this Pension2.
        :type employer_contribution_cash: float
        """

        self._employer_contribution_cash = employer_contribution_cash

    @property
    def employer_contribution_percent(self):
        """Gets the employer_contribution_percent of this Pension2.

        The pensions' employer contribution percent

        :return: The employer_contribution_percent of this Pension2.
        :rtype: float
        """
        return self._employer_contribution_percent

    @employer_contribution_percent.setter
    def employer_contribution_percent(self, employer_contribution_percent):
        """Sets the employer_contribution_percent of this Pension2.

        The pensions' employer contribution percent

        :param employer_contribution_percent: The employer_contribution_percent of this Pension2.
        :type employer_contribution_percent: float
        """

        self._employer_contribution_percent = employer_contribution_percent

    @property
    def employer_ni_saving(self):
        """Gets the employer_ni_saving of this Pension2.

        The pensions' employer ni saving

        :return: The employer_ni_saving of this Pension2.
        :rtype: bool
        """
        return self._employer_ni_saving

    @employer_ni_saving.setter
    def employer_ni_saving(self, employer_ni_saving):
        """Sets the employer_ni_saving of this Pension2.

        The pensions' employer ni saving

        :param employer_ni_saving: The employer_ni_saving of this Pension2.
        :type employer_ni_saving: bool
        """

        self._employer_ni_saving = employer_ni_saving

    @property
    def employer_ni_saving_percentage(self):
        """Gets the employer_ni_saving_percentage of this Pension2.

        The pensions' employer ni saving percentage

        :return: The employer_ni_saving_percentage of this Pension2.
        :rtype: float
        """
        return self._employer_ni_saving_percentage

    @employer_ni_saving_percentage.setter
    def employer_ni_saving_percentage(self, employer_ni_saving_percentage):
        """Sets the employer_ni_saving_percentage of this Pension2.

        The pensions' employer ni saving percentage

        :param employer_ni_saving_percentage: The employer_ni_saving_percentage of this Pension2.
        :type employer_ni_saving_percentage: float
        """

        self._employer_ni_saving_percentage = employer_ni_saving_percentage

    @property
    def group(self):
        """Gets the group of this Pension2.

        The pensions' group

        :return: The group of this Pension2.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Pension2.

        The pensions' group

        :param group: The group of this Pension2.
        :type group: str
        """

        self._group = group

    @property
    def lower_threshold(self):
        """Gets the lower_threshold of this Pension2.

        The pensions' lower threshold

        :return: The lower_threshold of this Pension2.
        :rtype: float
        """
        return self._lower_threshold

    @lower_threshold.setter
    def lower_threshold(self, lower_threshold):
        """Sets the lower_threshold of this Pension2.

        The pensions' lower threshold

        :param lower_threshold: The lower_threshold of this Pension2.
        :type lower_threshold: float
        """

        self._lower_threshold = lower_threshold

    @property
    def meta_data(self):
        """Gets the meta_data of this Pension2.

        The pensions' meta data

        :return: The meta_data of this Pension2.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Pension2.

        The pensions' meta data

        :param meta_data: The meta_data of this Pension2.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this Pension2.

        The pensions' next revision date

        :return: The next_revision_date of this Pension2.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this Pension2.

        The pensions' next revision date

        :param next_revision_date: The next_revision_date of this Pension2.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def pensionable_pay_codes(self):
        """Gets the pensionable_pay_codes of this Pension2.


        :return: The pensionable_pay_codes of this Pension2.
        :rtype: PensionablePayCodes
        """
        return self._pensionable_pay_codes

    @pensionable_pay_codes.setter
    def pensionable_pay_codes(self, pensionable_pay_codes):
        """Sets the pensionable_pay_codes of this Pension2.


        :param pensionable_pay_codes: The pensionable_pay_codes of this Pension2.
        :type pensionable_pay_codes: PensionablePayCodes
        """

        self._pensionable_pay_codes = pensionable_pay_codes

    @property
    def pro_rata_method(self):
        """Gets the pro_rata_method of this Pension2.

        The pensions' pro rata method

        :return: The pro_rata_method of this Pension2.
        :rtype: str
        """
        return self._pro_rata_method

    @pro_rata_method.setter
    def pro_rata_method(self, pro_rata_method):
        """Sets the pro_rata_method of this Pension2.

        The pensions' pro rata method

        :param pro_rata_method: The pro_rata_method of this Pension2.
        :type pro_rata_method: str
        """
        allowed_values = ["NotSet", "Annual260Days", "Annual365Days", "AnnualQualifyingDays", "DaysPerCalendarMonth", "DaysPerTaxPeriod", "WorkingDaysPerCalendarMonth", "WeekDaysPerCalendarMonth"]  # noqa: E501
        if pro_rata_method not in allowed_values:
            raise ValueError(
                "Invalid value for `pro_rata_method` ({0}), must be one of {1}"
                .format(pro_rata_method, allowed_values)
            )

        self._pro_rata_method = pro_rata_method

    @property
    def provider_employer_ref(self):
        """Gets the provider_employer_ref of this Pension2.

        The pensions' provider employer ref

        :return: The provider_employer_ref of this Pension2.
        :rtype: str
        """
        return self._provider_employer_ref

    @provider_employer_ref.setter
    def provider_employer_ref(self, provider_employer_ref):
        """Sets the provider_employer_ref of this Pension2.

        The pensions' provider employer ref

        :param provider_employer_ref: The provider_employer_ref of this Pension2.
        :type provider_employer_ref: str
        """

        self._provider_employer_ref = provider_employer_ref

    @property
    def provider_name(self):
        """Gets the provider_name of this Pension2.

        The pensions' provider name

        :return: The provider_name of this Pension2.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Pension2.

        The pensions' provider name

        :param provider_name: The provider_name of this Pension2.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def qualifying_pay_codes(self):
        """Gets the qualifying_pay_codes of this Pension2.


        :return: The qualifying_pay_codes of this Pension2.
        :rtype: QualifyingPayCodes
        """
        return self._qualifying_pay_codes

    @qualifying_pay_codes.setter
    def qualifying_pay_codes(self, qualifying_pay_codes):
        """Sets the qualifying_pay_codes of this Pension2.


        :param qualifying_pay_codes: The qualifying_pay_codes of this Pension2.
        :type qualifying_pay_codes: QualifyingPayCodes
        """

        self._qualifying_pay_codes = qualifying_pay_codes

    @property
    def ras_rounding_override(self):
        """Gets the ras_rounding_override of this Pension2.

        The pensions' ras rounding override

        :return: The ras_rounding_override of this Pension2.
        :rtype: str
        """
        return self._ras_rounding_override

    @ras_rounding_override.setter
    def ras_rounding_override(self, ras_rounding_override):
        """Sets the ras_rounding_override of this Pension2.

        The pensions' ras rounding override

        :param ras_rounding_override: The ras_rounding_override of this Pension2.
        :type ras_rounding_override: str
        """
        allowed_values = ["NotSet", "PennyUp", "PennyDown", "Bankers", "FiveUp", "FiveDown", "Floor", "Ceiling"]  # noqa: E501
        if ras_rounding_override not in allowed_values:
            raise ValueError(
                "Invalid value for `ras_rounding_override` ({0}), must be one of {1}"
                .format(ras_rounding_override, allowed_values)
            )

        self._ras_rounding_override = ras_rounding_override

    @property
    def revision(self):
        """Gets the revision of this Pension2.

        The pensions' revision

        :return: The revision of this Pension2.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Pension2.

        The pensions' revision

        :param revision: The revision of this Pension2.
        :type revision: int
        """

        self._revision = revision

    @property
    def rounding_option(self):
        """Gets the rounding_option of this Pension2.

        The pensions' rounding option

        :return: The rounding_option of this Pension2.
        :rtype: str
        """
        return self._rounding_option

    @rounding_option.setter
    def rounding_option(self, rounding_option):
        """Sets the rounding_option of this Pension2.

        The pensions' rounding option

        :param rounding_option: The rounding_option of this Pension2.
        :type rounding_option: str
        """
        allowed_values = ["NotSet", "PennyUp", "PennyDown", "Bankers", "FiveUp", "FiveDown", "Floor", "Ceiling"]  # noqa: E501
        if rounding_option not in allowed_values:
            raise ValueError(
                "Invalid value for `rounding_option` ({0}), must be one of {1}"
                .format(rounding_option, allowed_values)
            )

        self._rounding_option = rounding_option

    @property
    def salary_sacrifice(self):
        """Gets the salary_sacrifice of this Pension2.

        The pensions' salary sacrifice

        :return: The salary_sacrifice of this Pension2.
        :rtype: bool
        """
        return self._salary_sacrifice

    @salary_sacrifice.setter
    def salary_sacrifice(self, salary_sacrifice):
        """Sets the salary_sacrifice of this Pension2.

        The pensions' salary sacrifice

        :param salary_sacrifice: The salary_sacrifice of this Pension2.
        :type salary_sacrifice: bool
        """

        self._salary_sacrifice = salary_sacrifice

    @property
    def scheme_name(self):
        """Gets the scheme_name of this Pension2.

        The pensions' scheme name

        :return: The scheme_name of this Pension2.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this Pension2.

        The pensions' scheme name

        :param scheme_name: The scheme_name of this Pension2.
        :type scheme_name: str
        """

        self._scheme_name = scheme_name

    @property
    def sub_group(self):
        """Gets the sub_group of this Pension2.

        The pensions' sub group

        :return: The sub_group of this Pension2.
        :rtype: str
        """
        return self._sub_group

    @sub_group.setter
    def sub_group(self, sub_group):
        """Sets the sub_group of this Pension2.

        The pensions' sub group

        :param sub_group: The sub_group of this Pension2.
        :type sub_group: str
        """

        self._sub_group = sub_group

    @property
    def taxation_method(self):
        """Gets the taxation_method of this Pension2.

        The pensions' taxation method

        :return: The taxation_method of this Pension2.
        :rtype: str
        """
        return self._taxation_method

    @taxation_method.setter
    def taxation_method(self, taxation_method):
        """Sets the taxation_method of this Pension2.

        The pensions' taxation method

        :param taxation_method: The taxation_method of this Pension2.
        :type taxation_method: str
        """
        allowed_values = ["NotSet", "NetBased", "ReliefAtSource", "TaxReliefExcluded"]  # noqa: E501
        if taxation_method not in allowed_values:
            raise ValueError(
                "Invalid value for `taxation_method` ({0}), must be one of {1}"
                .format(taxation_method, allowed_values)
            )

        self._taxation_method = taxation_method

    @property
    def upper_threshold(self):
        """Gets the upper_threshold of this Pension2.

        The pensions' upper threshold

        :return: The upper_threshold of this Pension2.
        :rtype: float
        """
        return self._upper_threshold

    @upper_threshold.setter
    def upper_threshold(self, upper_threshold):
        """Sets the upper_threshold of this Pension2.

        The pensions' upper threshold

        :param upper_threshold: The upper_threshold of this Pension2.
        :type upper_threshold: float
        """

        self._upper_threshold = upper_threshold

    @property
    def use_ae_thresholds(self):
        """Gets the use_ae_thresholds of this Pension2.

        The pensions' use a e thresholds

        :return: The use_ae_thresholds of this Pension2.
        :rtype: bool
        """
        return self._use_ae_thresholds

    @use_ae_thresholds.setter
    def use_ae_thresholds(self, use_ae_thresholds):
        """Sets the use_ae_thresholds of this Pension2.

        The pensions' use a e thresholds

        :param use_ae_thresholds: The use_ae_thresholds of this Pension2.
        :type use_ae_thresholds: bool
        """

        self._use_ae_thresholds = use_ae_thresholds
