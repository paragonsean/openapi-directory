# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, expression: str=None, name: str=None, policy: str=None, verbs: str=None):
        """Permission1 - a model defined in OpenAPI

        :param description: The description of this Permission1.
        :param expression: The expression of this Permission1.
        :param name: The name of this Permission1.
        :param policy: The policy of this Permission1.
        :param verbs: The verbs of this Permission1.
        """
        self.openapi_types = {
            'description': str,
            'expression': str,
            'name': str,
            'policy': str,
            'verbs': str
        }

        self.attribute_map = {
            'description': 'Description',
            'expression': 'Expression',
            'name': 'Name',
            'policy': 'Policy',
            'verbs': 'Verbs'
        }

        self._description = description
        self._expression = expression
        self._name = name
        self._policy = policy
        self._verbs = verbs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission_1 of this Permission1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Permission1.

        The permissions' description

        :return: The description of this Permission1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Permission1.

        The permissions' description

        :param description: The description of this Permission1.
        :type description: str
        """

        self._description = description

    @property
    def expression(self):
        """Gets the expression of this Permission1.

        The permissions' expression

        :return: The expression of this Permission1.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this Permission1.

        The permissions' expression

        :param expression: The expression of this Permission1.
        :type expression: str
        """

        self._expression = expression

    @property
    def name(self):
        """Gets the name of this Permission1.

        The permissions' name

        :return: The name of this Permission1.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission1.

        The permissions' name

        :param name: The name of this Permission1.
        :type name: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this Permission1.

        The permissions' policy

        :return: The policy of this Permission1.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this Permission1.

        The permissions' policy

        :param policy: The policy of this Permission1.
        :type policy: str
        """
        allowed_values = ["Allow", "Deny"]  # noqa: E501
        if policy not in allowed_values:
            raise ValueError(
                "Invalid value for `policy` ({0}), must be one of {1}"
                .format(policy, allowed_values)
            )

        self._policy = policy

    @property
    def verbs(self):
        """Gets the verbs of this Permission1.

        The permissions' verbs

        :return: The verbs of this Permission1.
        :rtype: str
        """
        return self._verbs

    @verbs.setter
    def verbs(self, verbs):
        """Sets the verbs of this Permission1.

        The permissions' verbs

        :param verbs: The verbs of this Permission1.
        :type verbs: str
        """
        allowed_values = ["Read", "Write", "Delete", "All"]  # noqa: E501
        if verbs not in allowed_values:
            raise ValueError(
                "Invalid value for `verbs` ({0}), must be one of {1}"
                .format(verbs, allowed_values)
            )

        self._verbs = verbs
