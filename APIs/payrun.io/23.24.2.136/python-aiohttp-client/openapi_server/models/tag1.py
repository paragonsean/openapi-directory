# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tagged_item import TaggedItem
from openapi_server import util


class Tag1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, tagged_item: TaggedItem=None, text: str=None):
        """Tag1 - a model defined in OpenAPI

        :param created: The created of this Tag1.
        :param tagged_item: The tagged_item of this Tag1.
        :param text: The text of this Tag1.
        """
        self.openapi_types = {
            'created': datetime,
            'tagged_item': TaggedItem,
            'text': str
        }

        self.attribute_map = {
            'created': 'Created',
            'tagged_item': 'TaggedItem',
            'text': 'Text'
        }

        self._created = created
        self._tagged_item = tagged_item
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tag_1 of this Tag1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this Tag1.

        The tags' created

        :return: The created of this Tag1.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Tag1.

        The tags' created

        :param created: The created of this Tag1.
        :type created: datetime
        """

        self._created = created

    @property
    def tagged_item(self):
        """Gets the tagged_item of this Tag1.


        :return: The tagged_item of this Tag1.
        :rtype: TaggedItem
        """
        return self._tagged_item

    @tagged_item.setter
    def tagged_item(self, tagged_item):
        """Sets the tagged_item of this Tag1.


        :param tagged_item: The tagged_item of this Tag1.
        :type tagged_item: TaggedItem
        """

        self._tagged_item = tagged_item

    @property
    def text(self):
        """Gets the text of this Tag1.

        The tags' text

        :return: The text of this Tag1.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Tag1.

        The tags' text

        :param text: The text of this Tag1.
        :type text: str
        """

        self._text = text
