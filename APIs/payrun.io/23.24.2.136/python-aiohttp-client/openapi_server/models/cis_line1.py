# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CisLine1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cis_deduction: float=None, cis_line_type: str=None, description: str=None, generated: datetime=None, gross_pay: float=None, nominal_code_key: str=None, pay_frequency: str=None, tax_month: int=None, tax_period: int=None, tax_treatment: str=None, tax_year: int=None, uom: str=None, unit_rate: float=None, units: float=None, vat: float=None):
        """CisLine1 - a model defined in OpenAPI

        :param cis_deduction: The cis_deduction of this CisLine1.
        :param cis_line_type: The cis_line_type of this CisLine1.
        :param description: The description of this CisLine1.
        :param generated: The generated of this CisLine1.
        :param gross_pay: The gross_pay of this CisLine1.
        :param nominal_code_key: The nominal_code_key of this CisLine1.
        :param pay_frequency: The pay_frequency of this CisLine1.
        :param tax_month: The tax_month of this CisLine1.
        :param tax_period: The tax_period of this CisLine1.
        :param tax_treatment: The tax_treatment of this CisLine1.
        :param tax_year: The tax_year of this CisLine1.
        :param uom: The uom of this CisLine1.
        :param unit_rate: The unit_rate of this CisLine1.
        :param units: The units of this CisLine1.
        :param vat: The vat of this CisLine1.
        """
        self.openapi_types = {
            'cis_deduction': float,
            'cis_line_type': str,
            'description': str,
            'generated': datetime,
            'gross_pay': float,
            'nominal_code_key': str,
            'pay_frequency': str,
            'tax_month': int,
            'tax_period': int,
            'tax_treatment': str,
            'tax_year': int,
            'uom': str,
            'unit_rate': float,
            'units': float,
            'vat': float
        }

        self.attribute_map = {
            'cis_deduction': 'CisDeduction',
            'cis_line_type': 'CisLineType',
            'description': 'Description',
            'generated': 'Generated',
            'gross_pay': 'GrossPay',
            'nominal_code_key': 'NominalCodeKey',
            'pay_frequency': 'PayFrequency',
            'tax_month': 'TaxMonth',
            'tax_period': 'TaxPeriod',
            'tax_treatment': 'TaxTreatment',
            'tax_year': 'TaxYear',
            'uom': 'UOM',
            'unit_rate': 'UnitRate',
            'units': 'Units',
            'vat': 'VAT'
        }

        self._cis_deduction = cis_deduction
        self._cis_line_type = cis_line_type
        self._description = description
        self._generated = generated
        self._gross_pay = gross_pay
        self._nominal_code_key = nominal_code_key
        self._pay_frequency = pay_frequency
        self._tax_month = tax_month
        self._tax_period = tax_period
        self._tax_treatment = tax_treatment
        self._tax_year = tax_year
        self._uom = uom
        self._unit_rate = unit_rate
        self._units = units
        self._vat = vat

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CisLine1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CisLine_1 of this CisLine1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cis_deduction(self):
        """Gets the cis_deduction of this CisLine1.

        The cis lines' cis deduction

        :return: The cis_deduction of this CisLine1.
        :rtype: float
        """
        return self._cis_deduction

    @cis_deduction.setter
    def cis_deduction(self, cis_deduction):
        """Sets the cis_deduction of this CisLine1.

        The cis lines' cis deduction

        :param cis_deduction: The cis_deduction of this CisLine1.
        :type cis_deduction: float
        """

        self._cis_deduction = cis_deduction

    @property
    def cis_line_type(self):
        """Gets the cis_line_type of this CisLine1.

        The cis lines' cis line type

        :return: The cis_line_type of this CisLine1.
        :rtype: str
        """
        return self._cis_line_type

    @cis_line_type.setter
    def cis_line_type(self, cis_line_type):
        """Sets the cis_line_type of this CisLine1.

        The cis lines' cis line type

        :param cis_line_type: The cis_line_type of this CisLine1.
        :type cis_line_type: str
        """

        self._cis_line_type = cis_line_type

    @property
    def description(self):
        """Gets the description of this CisLine1.

        The cis lines' description

        :return: The description of this CisLine1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CisLine1.

        The cis lines' description

        :param description: The description of this CisLine1.
        :type description: str
        """

        self._description = description

    @property
    def generated(self):
        """Gets the generated of this CisLine1.

        The cis lines' generated

        :return: The generated of this CisLine1.
        :rtype: datetime
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this CisLine1.

        The cis lines' generated

        :param generated: The generated of this CisLine1.
        :type generated: datetime
        """

        self._generated = generated

    @property
    def gross_pay(self):
        """Gets the gross_pay of this CisLine1.

        The cis lines' gross pay

        :return: The gross_pay of this CisLine1.
        :rtype: float
        """
        return self._gross_pay

    @gross_pay.setter
    def gross_pay(self, gross_pay):
        """Sets the gross_pay of this CisLine1.

        The cis lines' gross pay

        :param gross_pay: The gross_pay of this CisLine1.
        :type gross_pay: float
        """

        self._gross_pay = gross_pay

    @property
    def nominal_code_key(self):
        """Gets the nominal_code_key of this CisLine1.

        The cis lines' nominal code key

        :return: The nominal_code_key of this CisLine1.
        :rtype: str
        """
        return self._nominal_code_key

    @nominal_code_key.setter
    def nominal_code_key(self, nominal_code_key):
        """Sets the nominal_code_key of this CisLine1.

        The cis lines' nominal code key

        :param nominal_code_key: The nominal_code_key of this CisLine1.
        :type nominal_code_key: str
        """

        self._nominal_code_key = nominal_code_key

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this CisLine1.

        The cis lines' pay frequency

        :return: The pay_frequency of this CisLine1.
        :rtype: str
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this CisLine1.

        The cis lines' pay frequency

        :param pay_frequency: The pay_frequency of this CisLine1.
        :type pay_frequency: str
        """
        allowed_values = ["Monthly", "Weekly"]  # noqa: E501
        if pay_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_frequency` ({0}), must be one of {1}"
                .format(pay_frequency, allowed_values)
            )

        self._pay_frequency = pay_frequency

    @property
    def tax_month(self):
        """Gets the tax_month of this CisLine1.

        The cis lines' tax month

        :return: The tax_month of this CisLine1.
        :rtype: int
        """
        return self._tax_month

    @tax_month.setter
    def tax_month(self, tax_month):
        """Sets the tax_month of this CisLine1.

        The cis lines' tax month

        :param tax_month: The tax_month of this CisLine1.
        :type tax_month: int
        """

        self._tax_month = tax_month

    @property
    def tax_period(self):
        """Gets the tax_period of this CisLine1.

        The cis lines' tax period

        :return: The tax_period of this CisLine1.
        :rtype: int
        """
        return self._tax_period

    @tax_period.setter
    def tax_period(self, tax_period):
        """Sets the tax_period of this CisLine1.

        The cis lines' tax period

        :param tax_period: The tax_period of this CisLine1.
        :type tax_period: int
        """

        self._tax_period = tax_period

    @property
    def tax_treatment(self):
        """Gets the tax_treatment of this CisLine1.

        The cis lines' tax treatment

        :return: The tax_treatment of this CisLine1.
        :rtype: str
        """
        return self._tax_treatment

    @tax_treatment.setter
    def tax_treatment(self, tax_treatment):
        """Sets the tax_treatment of this CisLine1.

        The cis lines' tax treatment

        :param tax_treatment: The tax_treatment of this CisLine1.
        :type tax_treatment: str
        """
        allowed_values = ["Taxable", "NonTaxable", "Notional", "Materials"]  # noqa: E501
        if tax_treatment not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_treatment` ({0}), must be one of {1}"
                .format(tax_treatment, allowed_values)
            )

        self._tax_treatment = tax_treatment

    @property
    def tax_year(self):
        """Gets the tax_year of this CisLine1.

        The cis lines' tax year

        :return: The tax_year of this CisLine1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this CisLine1.

        The cis lines' tax year

        :param tax_year: The tax_year of this CisLine1.
        :type tax_year: int
        """

        self._tax_year = tax_year

    @property
    def uom(self):
        """Gets the uom of this CisLine1.

        The cis lines' u o m

        :return: The uom of this CisLine1.
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this CisLine1.

        The cis lines' u o m

        :param uom: The uom of this CisLine1.
        :type uom: str
        """
        allowed_values = ["NotSet", "Minute", "Hour", "Day", "Week", "Month", "Year", "Unit"]  # noqa: E501
        if uom not in allowed_values:
            raise ValueError(
                "Invalid value for `uom` ({0}), must be one of {1}"
                .format(uom, allowed_values)
            )

        self._uom = uom

    @property
    def unit_rate(self):
        """Gets the unit_rate of this CisLine1.

        The cis lines' unit rate

        :return: The unit_rate of this CisLine1.
        :rtype: float
        """
        return self._unit_rate

    @unit_rate.setter
    def unit_rate(self, unit_rate):
        """Sets the unit_rate of this CisLine1.

        The cis lines' unit rate

        :param unit_rate: The unit_rate of this CisLine1.
        :type unit_rate: float
        """

        self._unit_rate = unit_rate

    @property
    def units(self):
        """Gets the units of this CisLine1.

        The cis lines' units

        :return: The units of this CisLine1.
        :rtype: float
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this CisLine1.

        The cis lines' units

        :param units: The units of this CisLine1.
        :type units: float
        """

        self._units = units

    @property
    def vat(self):
        """Gets the vat of this CisLine1.

        The cis lines' v a t

        :return: The vat of this CisLine1.
        :rtype: float
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this CisLine1.

        The cis lines' v a t

        :param vat: The vat of this CisLine1.
        :type vat: float
        """

        self._vat = vat
