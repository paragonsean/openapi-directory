# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AEAssessment1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, age: int=None, assessment_code: str=None, assessment_date: date=None, assessment_event: str=None, assessment_override: str=None, assessment_result: str=None, is_member_of_alternative_pension_scheme: bool=None, opt_out_window_end_date: date=None, qualifying_earnings: float=None, reenrolment_date: date=None, state_pension_age: int=None, state_pension_date: date=None, tax_period: int=None, tax_year: int=None):
        """AEAssessment1 - a model defined in OpenAPI

        :param age: The age of this AEAssessment1.
        :param assessment_code: The assessment_code of this AEAssessment1.
        :param assessment_date: The assessment_date of this AEAssessment1.
        :param assessment_event: The assessment_event of this AEAssessment1.
        :param assessment_override: The assessment_override of this AEAssessment1.
        :param assessment_result: The assessment_result of this AEAssessment1.
        :param is_member_of_alternative_pension_scheme: The is_member_of_alternative_pension_scheme of this AEAssessment1.
        :param opt_out_window_end_date: The opt_out_window_end_date of this AEAssessment1.
        :param qualifying_earnings: The qualifying_earnings of this AEAssessment1.
        :param reenrolment_date: The reenrolment_date of this AEAssessment1.
        :param state_pension_age: The state_pension_age of this AEAssessment1.
        :param state_pension_date: The state_pension_date of this AEAssessment1.
        :param tax_period: The tax_period of this AEAssessment1.
        :param tax_year: The tax_year of this AEAssessment1.
        """
        self.openapi_types = {
            'age': int,
            'assessment_code': str,
            'assessment_date': date,
            'assessment_event': str,
            'assessment_override': str,
            'assessment_result': str,
            'is_member_of_alternative_pension_scheme': bool,
            'opt_out_window_end_date': date,
            'qualifying_earnings': float,
            'reenrolment_date': date,
            'state_pension_age': int,
            'state_pension_date': date,
            'tax_period': int,
            'tax_year': int
        }

        self.attribute_map = {
            'age': 'Age',
            'assessment_code': 'AssessmentCode',
            'assessment_date': 'AssessmentDate',
            'assessment_event': 'AssessmentEvent',
            'assessment_override': 'AssessmentOverride',
            'assessment_result': 'AssessmentResult',
            'is_member_of_alternative_pension_scheme': 'IsMemberOfAlternativePensionScheme',
            'opt_out_window_end_date': 'OptOutWindowEndDate',
            'qualifying_earnings': 'QualifyingEarnings',
            'reenrolment_date': 'ReenrolmentDate',
            'state_pension_age': 'StatePensionAge',
            'state_pension_date': 'StatePensionDate',
            'tax_period': 'TaxPeriod',
            'tax_year': 'TaxYear'
        }

        self._age = age
        self._assessment_code = assessment_code
        self._assessment_date = assessment_date
        self._assessment_event = assessment_event
        self._assessment_override = assessment_override
        self._assessment_result = assessment_result
        self._is_member_of_alternative_pension_scheme = is_member_of_alternative_pension_scheme
        self._opt_out_window_end_date = opt_out_window_end_date
        self._qualifying_earnings = qualifying_earnings
        self._reenrolment_date = reenrolment_date
        self._state_pension_age = state_pension_age
        self._state_pension_date = state_pension_date
        self._tax_period = tax_period
        self._tax_year = tax_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AEAssessment1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AEAssessment_1 of this AEAssessment1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self):
        """Gets the age of this AEAssessment1.

        The a e assessments' age

        :return: The age of this AEAssessment1.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this AEAssessment1.

        The a e assessments' age

        :param age: The age of this AEAssessment1.
        :type age: int
        """

        self._age = age

    @property
    def assessment_code(self):
        """Gets the assessment_code of this AEAssessment1.

        The a e assessments' assessment code

        :return: The assessment_code of this AEAssessment1.
        :rtype: str
        """
        return self._assessment_code

    @assessment_code.setter
    def assessment_code(self, assessment_code):
        """Sets the assessment_code of this AEAssessment1.

        The a e assessments' assessment code

        :param assessment_code: The assessment_code of this AEAssessment1.
        :type assessment_code: str
        """
        allowed_values = ["Excluded", "EligibleJobHolder", "NonEligibleJobHolder", "EntitledWorker"]  # noqa: E501
        if assessment_code not in allowed_values:
            raise ValueError(
                "Invalid value for `assessment_code` ({0}), must be one of {1}"
                .format(assessment_code, allowed_values)
            )

        self._assessment_code = assessment_code

    @property
    def assessment_date(self):
        """Gets the assessment_date of this AEAssessment1.

        The a e assessments' assessment date

        :return: The assessment_date of this AEAssessment1.
        :rtype: date
        """
        return self._assessment_date

    @assessment_date.setter
    def assessment_date(self, assessment_date):
        """Sets the assessment_date of this AEAssessment1.

        The a e assessments' assessment date

        :param assessment_date: The assessment_date of this AEAssessment1.
        :type assessment_date: date
        """

        self._assessment_date = assessment_date

    @property
    def assessment_event(self):
        """Gets the assessment_event of this AEAssessment1.

        The a e assessments' assessment event

        :return: The assessment_event of this AEAssessment1.
        :rtype: str
        """
        return self._assessment_event

    @assessment_event.setter
    def assessment_event(self, assessment_event):
        """Sets the assessment_event of this AEAssessment1.

        The a e assessments' assessment event

        :param assessment_event: The assessment_event of this AEAssessment1.
        :type assessment_event: str
        """
        allowed_values = ["NonEnrolmentEvent", "AutomaticEnrolment", "OptIn", "VoluntaryJoiner", "ContractualEnrolment"]  # noqa: E501
        if assessment_event not in allowed_values:
            raise ValueError(
                "Invalid value for `assessment_event` ({0}), must be one of {1}"
                .format(assessment_event, allowed_values)
            )

        self._assessment_event = assessment_event

    @property
    def assessment_override(self):
        """Gets the assessment_override of this AEAssessment1.

        The a e assessments' assessment override

        :return: The assessment_override of this AEAssessment1.
        :rtype: str
        """
        return self._assessment_override

    @assessment_override.setter
    def assessment_override(self, assessment_override):
        """Sets the assessment_override of this AEAssessment1.

        The a e assessments' assessment override

        :param assessment_override: The assessment_override of this AEAssessment1.
        :type assessment_override: str
        """
        allowed_values = ["None", "OptOut", "OptIn", "VoluntaryJoiner", "ContractualPension", "CeasedMembership", "Leaver", "Excluded"]  # noqa: E501
        if assessment_override not in allowed_values:
            raise ValueError(
                "Invalid value for `assessment_override` ({0}), must be one of {1}"
                .format(assessment_override, allowed_values)
            )

        self._assessment_override = assessment_override

    @property
    def assessment_result(self):
        """Gets the assessment_result of this AEAssessment1.

        The a e assessments' assessment result

        :return: The assessment_result of this AEAssessment1.
        :rtype: str
        """
        return self._assessment_result

    @assessment_result.setter
    def assessment_result(self, assessment_result):
        """Sets the assessment_result of this AEAssessment1.

        The a e assessments' assessment result

        :param assessment_result: The assessment_result of this AEAssessment1.
        :type assessment_result: str
        """
        allowed_values = ["Inconclusive", "NoChange", "Enrol", "Exit"]  # noqa: E501
        if assessment_result not in allowed_values:
            raise ValueError(
                "Invalid value for `assessment_result` ({0}), must be one of {1}"
                .format(assessment_result, allowed_values)
            )

        self._assessment_result = assessment_result

    @property
    def is_member_of_alternative_pension_scheme(self):
        """Gets the is_member_of_alternative_pension_scheme of this AEAssessment1.

        The a e assessments' is member of alternative pension scheme

        :return: The is_member_of_alternative_pension_scheme of this AEAssessment1.
        :rtype: bool
        """
        return self._is_member_of_alternative_pension_scheme

    @is_member_of_alternative_pension_scheme.setter
    def is_member_of_alternative_pension_scheme(self, is_member_of_alternative_pension_scheme):
        """Sets the is_member_of_alternative_pension_scheme of this AEAssessment1.

        The a e assessments' is member of alternative pension scheme

        :param is_member_of_alternative_pension_scheme: The is_member_of_alternative_pension_scheme of this AEAssessment1.
        :type is_member_of_alternative_pension_scheme: bool
        """

        self._is_member_of_alternative_pension_scheme = is_member_of_alternative_pension_scheme

    @property
    def opt_out_window_end_date(self):
        """Gets the opt_out_window_end_date of this AEAssessment1.

        The a e assessments' opt out window end date

        :return: The opt_out_window_end_date of this AEAssessment1.
        :rtype: date
        """
        return self._opt_out_window_end_date

    @opt_out_window_end_date.setter
    def opt_out_window_end_date(self, opt_out_window_end_date):
        """Sets the opt_out_window_end_date of this AEAssessment1.

        The a e assessments' opt out window end date

        :param opt_out_window_end_date: The opt_out_window_end_date of this AEAssessment1.
        :type opt_out_window_end_date: date
        """

        self._opt_out_window_end_date = opt_out_window_end_date

    @property
    def qualifying_earnings(self):
        """Gets the qualifying_earnings of this AEAssessment1.

        The a e assessments' qualifying earnings

        :return: The qualifying_earnings of this AEAssessment1.
        :rtype: float
        """
        return self._qualifying_earnings

    @qualifying_earnings.setter
    def qualifying_earnings(self, qualifying_earnings):
        """Sets the qualifying_earnings of this AEAssessment1.

        The a e assessments' qualifying earnings

        :param qualifying_earnings: The qualifying_earnings of this AEAssessment1.
        :type qualifying_earnings: float
        """

        self._qualifying_earnings = qualifying_earnings

    @property
    def reenrolment_date(self):
        """Gets the reenrolment_date of this AEAssessment1.

        The a e assessments' reenrolment date

        :return: The reenrolment_date of this AEAssessment1.
        :rtype: date
        """
        return self._reenrolment_date

    @reenrolment_date.setter
    def reenrolment_date(self, reenrolment_date):
        """Sets the reenrolment_date of this AEAssessment1.

        The a e assessments' reenrolment date

        :param reenrolment_date: The reenrolment_date of this AEAssessment1.
        :type reenrolment_date: date
        """

        self._reenrolment_date = reenrolment_date

    @property
    def state_pension_age(self):
        """Gets the state_pension_age of this AEAssessment1.

        The a e assessments' state pension age

        :return: The state_pension_age of this AEAssessment1.
        :rtype: int
        """
        return self._state_pension_age

    @state_pension_age.setter
    def state_pension_age(self, state_pension_age):
        """Sets the state_pension_age of this AEAssessment1.

        The a e assessments' state pension age

        :param state_pension_age: The state_pension_age of this AEAssessment1.
        :type state_pension_age: int
        """

        self._state_pension_age = state_pension_age

    @property
    def state_pension_date(self):
        """Gets the state_pension_date of this AEAssessment1.

        The a e assessments' state pension date

        :return: The state_pension_date of this AEAssessment1.
        :rtype: date
        """
        return self._state_pension_date

    @state_pension_date.setter
    def state_pension_date(self, state_pension_date):
        """Sets the state_pension_date of this AEAssessment1.

        The a e assessments' state pension date

        :param state_pension_date: The state_pension_date of this AEAssessment1.
        :type state_pension_date: date
        """

        self._state_pension_date = state_pension_date

    @property
    def tax_period(self):
        """Gets the tax_period of this AEAssessment1.

        The a e assessments' tax period

        :return: The tax_period of this AEAssessment1.
        :rtype: int
        """
        return self._tax_period

    @tax_period.setter
    def tax_period(self, tax_period):
        """Sets the tax_period of this AEAssessment1.

        The a e assessments' tax period

        :param tax_period: The tax_period of this AEAssessment1.
        :type tax_period: int
        """

        self._tax_period = tax_period

    @property
    def tax_year(self):
        """Gets the tax_year of this AEAssessment1.

        The a e assessments' tax year

        :return: The tax_year of this AEAssessment1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this AEAssessment1.

        The a e assessments' tax year

        :param tax_year: The tax_year of this AEAssessment1.
        :type tax_year: int
        """

        self._tax_year = tax_year
