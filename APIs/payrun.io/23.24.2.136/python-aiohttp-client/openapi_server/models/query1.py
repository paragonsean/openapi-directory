# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group import Group
from openapi_server.models.variable import Variable
from openapi_server import util


class Query1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding: str=None, exclude_null_or_empty_elements: bool=None, groups: Group=None, root_node_name: str=None, suppress_metric_attributes: bool=None, variables: Variable=None):
        """Query1 - a model defined in OpenAPI

        :param encoding: The encoding of this Query1.
        :param exclude_null_or_empty_elements: The exclude_null_or_empty_elements of this Query1.
        :param groups: The groups of this Query1.
        :param root_node_name: The root_node_name of this Query1.
        :param suppress_metric_attributes: The suppress_metric_attributes of this Query1.
        :param variables: The variables of this Query1.
        """
        self.openapi_types = {
            'encoding': str,
            'exclude_null_or_empty_elements': bool,
            'groups': Group,
            'root_node_name': str,
            'suppress_metric_attributes': bool,
            'variables': Variable
        }

        self.attribute_map = {
            'encoding': 'Encoding',
            'exclude_null_or_empty_elements': 'ExcludeNullOrEmptyElements',
            'groups': 'Groups',
            'root_node_name': 'RootNodeName',
            'suppress_metric_attributes': 'SuppressMetricAttributes',
            'variables': 'Variables'
        }

        self._encoding = encoding
        self._exclude_null_or_empty_elements = exclude_null_or_empty_elements
        self._groups = groups
        self._root_node_name = root_node_name
        self._suppress_metric_attributes = suppress_metric_attributes
        self._variables = variables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query_1 of this Query1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding(self):
        """Gets the encoding of this Query1.

        The querys' encoding

        :return: The encoding of this Query1.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this Query1.

        The querys' encoding

        :param encoding: The encoding of this Query1.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def exclude_null_or_empty_elements(self):
        """Gets the exclude_null_or_empty_elements of this Query1.

        The querys' exclude null or empty elements

        :return: The exclude_null_or_empty_elements of this Query1.
        :rtype: bool
        """
        return self._exclude_null_or_empty_elements

    @exclude_null_or_empty_elements.setter
    def exclude_null_or_empty_elements(self, exclude_null_or_empty_elements):
        """Sets the exclude_null_or_empty_elements of this Query1.

        The querys' exclude null or empty elements

        :param exclude_null_or_empty_elements: The exclude_null_or_empty_elements of this Query1.
        :type exclude_null_or_empty_elements: bool
        """

        self._exclude_null_or_empty_elements = exclude_null_or_empty_elements

    @property
    def groups(self):
        """Gets the groups of this Query1.


        :return: The groups of this Query1.
        :rtype: Group
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Query1.


        :param groups: The groups of this Query1.
        :type groups: Group
        """

        self._groups = groups

    @property
    def root_node_name(self):
        """Gets the root_node_name of this Query1.

        The querys' root node name

        :return: The root_node_name of this Query1.
        :rtype: str
        """
        return self._root_node_name

    @root_node_name.setter
    def root_node_name(self, root_node_name):
        """Sets the root_node_name of this Query1.

        The querys' root node name

        :param root_node_name: The root_node_name of this Query1.
        :type root_node_name: str
        """

        self._root_node_name = root_node_name

    @property
    def suppress_metric_attributes(self):
        """Gets the suppress_metric_attributes of this Query1.

        The querys' suppress metric attributes

        :return: The suppress_metric_attributes of this Query1.
        :rtype: bool
        """
        return self._suppress_metric_attributes

    @suppress_metric_attributes.setter
    def suppress_metric_attributes(self, suppress_metric_attributes):
        """Sets the suppress_metric_attributes of this Query1.

        The querys' suppress metric attributes

        :param suppress_metric_attributes: The suppress_metric_attributes of this Query1.
        :type suppress_metric_attributes: bool
        """

        self._suppress_metric_attributes = suppress_metric_attributes

    @property
    def variables(self):
        """Gets the variables of this Query1.


        :return: The variables of this Query1.
        :rtype: Variable
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this Query1.


        :param variables: The variables of this Query1.
        :type variables: Variable
        """

        self._variables = variables
