# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.errors import Errors
from openapi_server import util


class ErrorModel1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, error_category: str=None, errors: Errors=None):
        """ErrorModel1 - a model defined in OpenAPI

        :param description: The description of this ErrorModel1.
        :param error_category: The error_category of this ErrorModel1.
        :param errors: The errors of this ErrorModel1.
        """
        self.openapi_types = {
            'description': str,
            'error_category': str,
            'errors': Errors
        }

        self.attribute_map = {
            'description': 'Description',
            'error_category': 'ErrorCategory',
            'errors': 'Errors'
        }

        self._description = description
        self._error_category = error_category
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorModel1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorModel_1 of this ErrorModel1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ErrorModel1.

        The error models' description

        :return: The description of this ErrorModel1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ErrorModel1.

        The error models' description

        :param description: The description of this ErrorModel1.
        :type description: str
        """

        self._description = description

    @property
    def error_category(self):
        """Gets the error_category of this ErrorModel1.

        The error models' error category

        :return: The error_category of this ErrorModel1.
        :rtype: str
        """
        return self._error_category

    @error_category.setter
    def error_category(self, error_category):
        """Sets the error_category of this ErrorModel1.

        The error models' error category

        :param error_category: The error_category of this ErrorModel1.
        :type error_category: str
        """
        allowed_values = ["General", "NotFound", "NotAuthorised", "ValidationFailure"]  # noqa: E501
        if error_category not in allowed_values:
            raise ValueError(
                "Invalid value for `error_category` ({0}), must be one of {1}"
                .format(error_category, allowed_values)
            )

        self._error_category = error_category

    @property
    def errors(self):
        """Gets the errors of this ErrorModel1.


        :return: The errors of this ErrorModel1.
        :rtype: Errors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ErrorModel1.


        :param errors: The errors of this ErrorModel1.
        :type errors: Errors
        """

        self._errors = errors
