# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OutputInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_length: str=None, output: str=None):
        """OutputInner - a model defined in OpenAPI

        :param max_length: The max_length of this OutputInner.
        :param output: The output of this OutputInner.
        """
        self.openapi_types = {
            'max_length': str,
            'output': str
        }

        self.attribute_map = {
            'max_length': '@MaxLength',
            'output': '@Output'
        }

        self._max_length = max_length
        self._output = output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Output_inner of this OutputInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_length(self):
        """Gets the max_length of this OutputInner.

        The output bases' max length

        :return: The max_length of this OutputInner.
        :rtype: str
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this OutputInner.

        The output bases' max length

        :param max_length: The max_length of this OutputInner.
        :type max_length: str
        """

        self._max_length = max_length

    @property
    def output(self):
        """Gets the output of this OutputInner.

        The output bases' output

        :return: The output of this OutputInner.
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this OutputInner.

        The output bases' output

        :param output: The output of this OutputInner.
        :type output: str
        """
        allowed_values = ["Element", "Attribute", "Variable", "VariableSum", "VariableAppend", "VariablePrepend", "ElementDatePart", "InnerText"]  # noqa: E501
        if output not in allowed_values:
            raise ValueError(
                "Invalid value for `output` ({0}), must be one of {1}"
                .format(output, allowed_values)
            )

        self._output = output
