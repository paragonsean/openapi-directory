# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HmrcSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_office_ref: str=None, cotax_ref: str=None, contact_email: str=None, contact_fax: str=None, contact_first_name: str=None, contact_last_name: str=None, contact_telephone: str=None, employment_allowance_override: float=None, password: str=None, sautr: str=None, sender: str=None, sender_id: str=None, state_aid_sector: str=None, tax_office_number: str=None, tax_office_reference: str=None):
        """HmrcSettings - a model defined in OpenAPI

        :param accounting_office_ref: The accounting_office_ref of this HmrcSettings.
        :param cotax_ref: The cotax_ref of this HmrcSettings.
        :param contact_email: The contact_email of this HmrcSettings.
        :param contact_fax: The contact_fax of this HmrcSettings.
        :param contact_first_name: The contact_first_name of this HmrcSettings.
        :param contact_last_name: The contact_last_name of this HmrcSettings.
        :param contact_telephone: The contact_telephone of this HmrcSettings.
        :param employment_allowance_override: The employment_allowance_override of this HmrcSettings.
        :param password: The password of this HmrcSettings.
        :param sautr: The sautr of this HmrcSettings.
        :param sender: The sender of this HmrcSettings.
        :param sender_id: The sender_id of this HmrcSettings.
        :param state_aid_sector: The state_aid_sector of this HmrcSettings.
        :param tax_office_number: The tax_office_number of this HmrcSettings.
        :param tax_office_reference: The tax_office_reference of this HmrcSettings.
        """
        self.openapi_types = {
            'accounting_office_ref': str,
            'cotax_ref': str,
            'contact_email': str,
            'contact_fax': str,
            'contact_first_name': str,
            'contact_last_name': str,
            'contact_telephone': str,
            'employment_allowance_override': float,
            'password': str,
            'sautr': str,
            'sender': str,
            'sender_id': str,
            'state_aid_sector': str,
            'tax_office_number': str,
            'tax_office_reference': str
        }

        self.attribute_map = {
            'accounting_office_ref': 'AccountingOfficeRef',
            'cotax_ref': 'COTAXRef',
            'contact_email': 'ContactEmail',
            'contact_fax': 'ContactFax',
            'contact_first_name': 'ContactFirstName',
            'contact_last_name': 'ContactLastName',
            'contact_telephone': 'ContactTelephone',
            'employment_allowance_override': 'EmploymentAllowanceOverride',
            'password': 'Password',
            'sautr': 'SAUTR',
            'sender': 'Sender',
            'sender_id': 'SenderId',
            'state_aid_sector': 'StateAidSector',
            'tax_office_number': 'TaxOfficeNumber',
            'tax_office_reference': 'TaxOfficeReference'
        }

        self._accounting_office_ref = accounting_office_ref
        self._cotax_ref = cotax_ref
        self._contact_email = contact_email
        self._contact_fax = contact_fax
        self._contact_first_name = contact_first_name
        self._contact_last_name = contact_last_name
        self._contact_telephone = contact_telephone
        self._employment_allowance_override = employment_allowance_override
        self._password = password
        self._sautr = sautr
        self._sender = sender
        self._sender_id = sender_id
        self._state_aid_sector = state_aid_sector
        self._tax_office_number = tax_office_number
        self._tax_office_reference = tax_office_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HmrcSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HmrcSettings of this HmrcSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_office_ref(self):
        """Gets the accounting_office_ref of this HmrcSettings.

        The hmrc settingss' accounting office ref

        :return: The accounting_office_ref of this HmrcSettings.
        :rtype: str
        """
        return self._accounting_office_ref

    @accounting_office_ref.setter
    def accounting_office_ref(self, accounting_office_ref):
        """Sets the accounting_office_ref of this HmrcSettings.

        The hmrc settingss' accounting office ref

        :param accounting_office_ref: The accounting_office_ref of this HmrcSettings.
        :type accounting_office_ref: str
        """

        self._accounting_office_ref = accounting_office_ref

    @property
    def cotax_ref(self):
        """Gets the cotax_ref of this HmrcSettings.

        The hmrc settingss' c o t a x ref

        :return: The cotax_ref of this HmrcSettings.
        :rtype: str
        """
        return self._cotax_ref

    @cotax_ref.setter
    def cotax_ref(self, cotax_ref):
        """Sets the cotax_ref of this HmrcSettings.

        The hmrc settingss' c o t a x ref

        :param cotax_ref: The cotax_ref of this HmrcSettings.
        :type cotax_ref: str
        """

        self._cotax_ref = cotax_ref

    @property
    def contact_email(self):
        """Gets the contact_email of this HmrcSettings.

        The hmrc settingss' contact email

        :return: The contact_email of this HmrcSettings.
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this HmrcSettings.

        The hmrc settingss' contact email

        :param contact_email: The contact_email of this HmrcSettings.
        :type contact_email: str
        """

        self._contact_email = contact_email

    @property
    def contact_fax(self):
        """Gets the contact_fax of this HmrcSettings.

        The hmrc settingss' contact fax

        :return: The contact_fax of this HmrcSettings.
        :rtype: str
        """
        return self._contact_fax

    @contact_fax.setter
    def contact_fax(self, contact_fax):
        """Sets the contact_fax of this HmrcSettings.

        The hmrc settingss' contact fax

        :param contact_fax: The contact_fax of this HmrcSettings.
        :type contact_fax: str
        """

        self._contact_fax = contact_fax

    @property
    def contact_first_name(self):
        """Gets the contact_first_name of this HmrcSettings.

        The hmrc settingss' contact first name

        :return: The contact_first_name of this HmrcSettings.
        :rtype: str
        """
        return self._contact_first_name

    @contact_first_name.setter
    def contact_first_name(self, contact_first_name):
        """Sets the contact_first_name of this HmrcSettings.

        The hmrc settingss' contact first name

        :param contact_first_name: The contact_first_name of this HmrcSettings.
        :type contact_first_name: str
        """

        self._contact_first_name = contact_first_name

    @property
    def contact_last_name(self):
        """Gets the contact_last_name of this HmrcSettings.

        The hmrc settingss' contact last name

        :return: The contact_last_name of this HmrcSettings.
        :rtype: str
        """
        return self._contact_last_name

    @contact_last_name.setter
    def contact_last_name(self, contact_last_name):
        """Sets the contact_last_name of this HmrcSettings.

        The hmrc settingss' contact last name

        :param contact_last_name: The contact_last_name of this HmrcSettings.
        :type contact_last_name: str
        """

        self._contact_last_name = contact_last_name

    @property
    def contact_telephone(self):
        """Gets the contact_telephone of this HmrcSettings.

        The hmrc settingss' contact telephone

        :return: The contact_telephone of this HmrcSettings.
        :rtype: str
        """
        return self._contact_telephone

    @contact_telephone.setter
    def contact_telephone(self, contact_telephone):
        """Sets the contact_telephone of this HmrcSettings.

        The hmrc settingss' contact telephone

        :param contact_telephone: The contact_telephone of this HmrcSettings.
        :type contact_telephone: str
        """

        self._contact_telephone = contact_telephone

    @property
    def employment_allowance_override(self):
        """Gets the employment_allowance_override of this HmrcSettings.

        The hmrc settingss' employment allowance override

        :return: The employment_allowance_override of this HmrcSettings.
        :rtype: float
        """
        return self._employment_allowance_override

    @employment_allowance_override.setter
    def employment_allowance_override(self, employment_allowance_override):
        """Sets the employment_allowance_override of this HmrcSettings.

        The hmrc settingss' employment allowance override

        :param employment_allowance_override: The employment_allowance_override of this HmrcSettings.
        :type employment_allowance_override: float
        """

        self._employment_allowance_override = employment_allowance_override

    @property
    def password(self):
        """Gets the password of this HmrcSettings.

        The hmrc settingss' password

        :return: The password of this HmrcSettings.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this HmrcSettings.

        The hmrc settingss' password

        :param password: The password of this HmrcSettings.
        :type password: str
        """

        self._password = password

    @property
    def sautr(self):
        """Gets the sautr of this HmrcSettings.

        The hmrc settingss' s a u t r

        :return: The sautr of this HmrcSettings.
        :rtype: str
        """
        return self._sautr

    @sautr.setter
    def sautr(self, sautr):
        """Sets the sautr of this HmrcSettings.

        The hmrc settingss' s a u t r

        :param sautr: The sautr of this HmrcSettings.
        :type sautr: str
        """

        self._sautr = sautr

    @property
    def sender(self):
        """Gets the sender of this HmrcSettings.

        The hmrc settingss' sender

        :return: The sender of this HmrcSettings.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this HmrcSettings.

        The hmrc settingss' sender

        :param sender: The sender of this HmrcSettings.
        :type sender: str
        """
        allowed_values = ["Employer", "Individual", "Company", "Agent", "Bureau", "Partnership", "Trust", "Government", "ActingInCapacity", "Other"]  # noqa: E501
        if sender not in allowed_values:
            raise ValueError(
                "Invalid value for `sender` ({0}), must be one of {1}"
                .format(sender, allowed_values)
            )

        self._sender = sender

    @property
    def sender_id(self):
        """Gets the sender_id of this HmrcSettings.

        The hmrc settingss' sender id

        :return: The sender_id of this HmrcSettings.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this HmrcSettings.

        The hmrc settingss' sender id

        :param sender_id: The sender_id of this HmrcSettings.
        :type sender_id: str
        """

        self._sender_id = sender_id

    @property
    def state_aid_sector(self):
        """Gets the state_aid_sector of this HmrcSettings.

        The hmrc settingss' state aid sector

        :return: The state_aid_sector of this HmrcSettings.
        :rtype: str
        """
        return self._state_aid_sector

    @state_aid_sector.setter
    def state_aid_sector(self, state_aid_sector):
        """Sets the state_aid_sector of this HmrcSettings.

        The hmrc settingss' state aid sector

        :param state_aid_sector: The state_aid_sector of this HmrcSettings.
        :type state_aid_sector: str
        """
        allowed_values = ["Agriculture", "FisheriesAquaculture", "RoadTransport", "Industrial", "NotApplicable"]  # noqa: E501
        if state_aid_sector not in allowed_values:
            raise ValueError(
                "Invalid value for `state_aid_sector` ({0}), must be one of {1}"
                .format(state_aid_sector, allowed_values)
            )

        self._state_aid_sector = state_aid_sector

    @property
    def tax_office_number(self):
        """Gets the tax_office_number of this HmrcSettings.

        The hmrc settingss' tax office number

        :return: The tax_office_number of this HmrcSettings.
        :rtype: str
        """
        return self._tax_office_number

    @tax_office_number.setter
    def tax_office_number(self, tax_office_number):
        """Sets the tax_office_number of this HmrcSettings.

        The hmrc settingss' tax office number

        :param tax_office_number: The tax_office_number of this HmrcSettings.
        :type tax_office_number: str
        """

        self._tax_office_number = tax_office_number

    @property
    def tax_office_reference(self):
        """Gets the tax_office_reference of this HmrcSettings.

        The hmrc settingss' tax office reference

        :return: The tax_office_reference of this HmrcSettings.
        :rtype: str
        """
        return self._tax_office_reference

    @tax_office_reference.setter
    def tax_office_reference(self, tax_office_reference):
        """Sets the tax_office_reference of this HmrcSettings.

        The hmrc settingss' tax office reference

        :param tax_office_reference: The tax_office_reference of this HmrcSettings.
        :type tax_office_reference: str
        """

        self._tax_office_reference = tax_office_reference
