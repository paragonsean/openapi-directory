# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JournalInstruction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accounting_type: str=None, description: str=None, end_date: date=None, expression: str=None, journal_line_tag: str=None, ledger_target: str=None, nom_code: str=None, start_date: date=None, sub_nom_code: str=None):
        """JournalInstruction1 - a model defined in OpenAPI

        :param accounting_type: The accounting_type of this JournalInstruction1.
        :param description: The description of this JournalInstruction1.
        :param end_date: The end_date of this JournalInstruction1.
        :param expression: The expression of this JournalInstruction1.
        :param journal_line_tag: The journal_line_tag of this JournalInstruction1.
        :param ledger_target: The ledger_target of this JournalInstruction1.
        :param nom_code: The nom_code of this JournalInstruction1.
        :param start_date: The start_date of this JournalInstruction1.
        :param sub_nom_code: The sub_nom_code of this JournalInstruction1.
        """
        self.openapi_types = {
            'accounting_type': str,
            'description': str,
            'end_date': date,
            'expression': str,
            'journal_line_tag': str,
            'ledger_target': str,
            'nom_code': str,
            'start_date': date,
            'sub_nom_code': str
        }

        self.attribute_map = {
            'accounting_type': 'AccountingType',
            'description': 'Description',
            'end_date': 'EndDate',
            'expression': 'Expression',
            'journal_line_tag': 'JournalLineTag',
            'ledger_target': 'LedgerTarget',
            'nom_code': 'NomCode',
            'start_date': 'StartDate',
            'sub_nom_code': 'SubNomCode'
        }

        self._accounting_type = accounting_type
        self._description = description
        self._end_date = end_date
        self._expression = expression
        self._journal_line_tag = journal_line_tag
        self._ledger_target = ledger_target
        self._nom_code = nom_code
        self._start_date = start_date
        self._sub_nom_code = sub_nom_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalInstruction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalInstruction_1 of this JournalInstruction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accounting_type(self):
        """Gets the accounting_type of this JournalInstruction1.

        The journal instructions' accounting type

        :return: The accounting_type of this JournalInstruction1.
        :rtype: str
        """
        return self._accounting_type

    @accounting_type.setter
    def accounting_type(self, accounting_type):
        """Sets the accounting_type of this JournalInstruction1.

        The journal instructions' accounting type

        :param accounting_type: The accounting_type of this JournalInstruction1.
        :type accounting_type: str
        """
        allowed_values = ["Credit", "Debit"]  # noqa: E501
        if accounting_type not in allowed_values:
            raise ValueError(
                "Invalid value for `accounting_type` ({0}), must be one of {1}"
                .format(accounting_type, allowed_values)
            )

        self._accounting_type = accounting_type

    @property
    def description(self):
        """Gets the description of this JournalInstruction1.

        The journal instructions' description

        :return: The description of this JournalInstruction1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalInstruction1.

        The journal instructions' description

        :param description: The description of this JournalInstruction1.
        :type description: str
        """

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this JournalInstruction1.

        The journal instructions' end date

        :return: The end_date of this JournalInstruction1.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this JournalInstruction1.

        The journal instructions' end date

        :param end_date: The end_date of this JournalInstruction1.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def expression(self):
        """Gets the expression of this JournalInstruction1.

        The journal instructions' expression

        :return: The expression of this JournalInstruction1.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this JournalInstruction1.

        The journal instructions' expression

        :param expression: The expression of this JournalInstruction1.
        :type expression: str
        """

        self._expression = expression

    @property
    def journal_line_tag(self):
        """Gets the journal_line_tag of this JournalInstruction1.

        The journal instructions' journal line tag

        :return: The journal_line_tag of this JournalInstruction1.
        :rtype: str
        """
        return self._journal_line_tag

    @journal_line_tag.setter
    def journal_line_tag(self, journal_line_tag):
        """Sets the journal_line_tag of this JournalInstruction1.

        The journal instructions' journal line tag

        :param journal_line_tag: The journal_line_tag of this JournalInstruction1.
        :type journal_line_tag: str
        """

        self._journal_line_tag = journal_line_tag

    @property
    def ledger_target(self):
        """Gets the ledger_target of this JournalInstruction1.

        The journal instructions' ledger target

        :return: The ledger_target of this JournalInstruction1.
        :rtype: str
        """
        return self._ledger_target

    @ledger_target.setter
    def ledger_target(self, ledger_target):
        """Sets the ledger_target of this JournalInstruction1.

        The journal instructions' ledger target

        :param ledger_target: The ledger_target of this JournalInstruction1.
        :type ledger_target: str
        """

        self._ledger_target = ledger_target

    @property
    def nom_code(self):
        """Gets the nom_code of this JournalInstruction1.

        The journal instructions' nom code

        :return: The nom_code of this JournalInstruction1.
        :rtype: str
        """
        return self._nom_code

    @nom_code.setter
    def nom_code(self, nom_code):
        """Sets the nom_code of this JournalInstruction1.

        The journal instructions' nom code

        :param nom_code: The nom_code of this JournalInstruction1.
        :type nom_code: str
        """

        self._nom_code = nom_code

    @property
    def start_date(self):
        """Gets the start_date of this JournalInstruction1.

        The journal instructions' start date

        :return: The start_date of this JournalInstruction1.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this JournalInstruction1.

        The journal instructions' start date

        :param start_date: The start_date of this JournalInstruction1.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def sub_nom_code(self):
        """Gets the sub_nom_code of this JournalInstruction1.

        The journal instructions' sub nom code

        :return: The sub_nom_code of this JournalInstruction1.
        :rtype: str
        """
        return self._sub_nom_code

    @sub_nom_code.setter
    def sub_nom_code(self, sub_nom_code):
        """Sets the sub_nom_code of this JournalInstruction1.

        The journal instructions' sub nom code

        :param sub_nom_code: The sub_nom_code of this JournalInstruction1.
        :type sub_nom_code: str
        """

        self._sub_nom_code = sub_nom_code
