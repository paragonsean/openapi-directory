# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccount1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, account_number: str=None, branch_name: str=None, reference: str=None, sort_code: str=None):
        """BankAccount1 - a model defined in OpenAPI

        :param account_name: The account_name of this BankAccount1.
        :param account_number: The account_number of this BankAccount1.
        :param branch_name: The branch_name of this BankAccount1.
        :param reference: The reference of this BankAccount1.
        :param sort_code: The sort_code of this BankAccount1.
        """
        self.openapi_types = {
            'account_name': str,
            'account_number': str,
            'branch_name': str,
            'reference': str,
            'sort_code': str
        }

        self.attribute_map = {
            'account_name': 'AccountName',
            'account_number': 'AccountNumber',
            'branch_name': 'BranchName',
            'reference': 'Reference',
            'sort_code': 'SortCode'
        }

        self._account_name = account_name
        self._account_number = account_number
        self._branch_name = branch_name
        self._reference = reference
        self._sort_code = sort_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount_1 of this BankAccount1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this BankAccount1.

        The bank accounts' account name

        :return: The account_name of this BankAccount1.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this BankAccount1.

        The bank accounts' account name

        :param account_name: The account_name of this BankAccount1.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this BankAccount1.

        The bank accounts' account number

        :return: The account_number of this BankAccount1.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccount1.

        The bank accounts' account number

        :param account_number: The account_number of this BankAccount1.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def branch_name(self):
        """Gets the branch_name of this BankAccount1.

        The bank accounts' branch name

        :return: The branch_name of this BankAccount1.
        :rtype: str
        """
        return self._branch_name

    @branch_name.setter
    def branch_name(self, branch_name):
        """Sets the branch_name of this BankAccount1.

        The bank accounts' branch name

        :param branch_name: The branch_name of this BankAccount1.
        :type branch_name: str
        """

        self._branch_name = branch_name

    @property
    def reference(self):
        """Gets the reference of this BankAccount1.

        The bank accounts' reference

        :return: The reference of this BankAccount1.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BankAccount1.

        The bank accounts' reference

        :param reference: The reference of this BankAccount1.
        :type reference: str
        """

        self._reference = reference

    @property
    def sort_code(self):
        """Gets the sort_code of this BankAccount1.

        The bank accounts' sort code

        :return: The sort_code of this BankAccount1.
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this BankAccount1.

        The bank accounts' sort code

        :param sort_code: The sort_code of this BankAccount1.
        :type sort_code: str
        """

        self._sort_code = sort_code
