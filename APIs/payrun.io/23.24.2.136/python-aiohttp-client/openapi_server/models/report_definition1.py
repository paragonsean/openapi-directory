# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_query import ReportQuery
from openapi_server import util


class ReportDefinition1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, readonly: bool=None, report_query: ReportQuery=None, supported_transforms: str=None, title: str=None, version: str=None):
        """ReportDefinition1 - a model defined in OpenAPI

        :param active: The active of this ReportDefinition1.
        :param readonly: The readonly of this ReportDefinition1.
        :param report_query: The report_query of this ReportDefinition1.
        :param supported_transforms: The supported_transforms of this ReportDefinition1.
        :param title: The title of this ReportDefinition1.
        :param version: The version of this ReportDefinition1.
        """
        self.openapi_types = {
            'active': bool,
            'readonly': bool,
            'report_query': ReportQuery,
            'supported_transforms': str,
            'title': str,
            'version': str
        }

        self.attribute_map = {
            'active': 'Active',
            'readonly': 'Readonly',
            'report_query': 'ReportQuery',
            'supported_transforms': 'SupportedTransforms',
            'title': 'Title',
            'version': 'Version'
        }

        self._active = active
        self._readonly = readonly
        self._report_query = report_query
        self._supported_transforms = supported_transforms
        self._title = title
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportDefinition1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportDefinition_1 of this ReportDefinition1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this ReportDefinition1.

        The report definitions' active

        :return: The active of this ReportDefinition1.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ReportDefinition1.

        The report definitions' active

        :param active: The active of this ReportDefinition1.
        :type active: bool
        """

        self._active = active

    @property
    def readonly(self):
        """Gets the readonly of this ReportDefinition1.

        The report definitions' readonly

        :return: The readonly of this ReportDefinition1.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this ReportDefinition1.

        The report definitions' readonly

        :param readonly: The readonly of this ReportDefinition1.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def report_query(self):
        """Gets the report_query of this ReportDefinition1.


        :return: The report_query of this ReportDefinition1.
        :rtype: ReportQuery
        """
        return self._report_query

    @report_query.setter
    def report_query(self, report_query):
        """Sets the report_query of this ReportDefinition1.


        :param report_query: The report_query of this ReportDefinition1.
        :type report_query: ReportQuery
        """

        self._report_query = report_query

    @property
    def supported_transforms(self):
        """Gets the supported_transforms of this ReportDefinition1.

        The report definitions' supported transforms

        :return: The supported_transforms of this ReportDefinition1.
        :rtype: str
        """
        return self._supported_transforms

    @supported_transforms.setter
    def supported_transforms(self, supported_transforms):
        """Sets the supported_transforms of this ReportDefinition1.

        The report definitions' supported transforms

        :param supported_transforms: The supported_transforms of this ReportDefinition1.
        :type supported_transforms: str
        """

        self._supported_transforms = supported_transforms

    @property
    def title(self):
        """Gets the title of this ReportDefinition1.

        The report definitions' title

        :return: The title of this ReportDefinition1.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportDefinition1.

        The report definitions' title

        :param title: The title of this ReportDefinition1.
        :type title: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this ReportDefinition1.

        The report definitions' version

        :return: The version of this ReportDefinition1.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReportDefinition1.

        The report definitions' version

        :param version: The version of this ReportDefinition1.
        :type version: str
        """

        self._version = version
