# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayLine1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculator: str=None, description: str=None, generated: datetime=None, pay_code: str=None, pay_code_type: str=None, pay_run_sequence: int=None, payment_date: date=None, tax_period: int=None, tax_year: int=None, value: float=None):
        """PayLine1 - a model defined in OpenAPI

        :param calculator: The calculator of this PayLine1.
        :param description: The description of this PayLine1.
        :param generated: The generated of this PayLine1.
        :param pay_code: The pay_code of this PayLine1.
        :param pay_code_type: The pay_code_type of this PayLine1.
        :param pay_run_sequence: The pay_run_sequence of this PayLine1.
        :param payment_date: The payment_date of this PayLine1.
        :param tax_period: The tax_period of this PayLine1.
        :param tax_year: The tax_year of this PayLine1.
        :param value: The value of this PayLine1.
        """
        self.openapi_types = {
            'calculator': str,
            'description': str,
            'generated': datetime,
            'pay_code': str,
            'pay_code_type': str,
            'pay_run_sequence': int,
            'payment_date': date,
            'tax_period': int,
            'tax_year': int,
            'value': float
        }

        self.attribute_map = {
            'calculator': 'Calculator',
            'description': 'Description',
            'generated': 'Generated',
            'pay_code': 'PayCode',
            'pay_code_type': 'PayCodeType',
            'pay_run_sequence': 'PayRunSequence',
            'payment_date': 'PaymentDate',
            'tax_period': 'TaxPeriod',
            'tax_year': 'TaxYear',
            'value': 'Value'
        }

        self._calculator = calculator
        self._description = description
        self._generated = generated
        self._pay_code = pay_code
        self._pay_code_type = pay_code_type
        self._pay_run_sequence = pay_run_sequence
        self._payment_date = payment_date
        self._tax_period = tax_period
        self._tax_year = tax_year
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayLine1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayLine_1 of this PayLine1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculator(self):
        """Gets the calculator of this PayLine1.

        The pay lines' calculator

        :return: The calculator of this PayLine1.
        :rtype: str
        """
        return self._calculator

    @calculator.setter
    def calculator(self, calculator):
        """Sets the calculator of this PayLine1.

        The pay lines' calculator

        :param calculator: The calculator of this PayLine1.
        :type calculator: str
        """

        self._calculator = calculator

    @property
    def description(self):
        """Gets the description of this PayLine1.

        The pay lines' description

        :return: The description of this PayLine1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayLine1.

        The pay lines' description

        :param description: The description of this PayLine1.
        :type description: str
        """

        self._description = description

    @property
    def generated(self):
        """Gets the generated of this PayLine1.

        The pay lines' generated

        :return: The generated of this PayLine1.
        :rtype: datetime
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this PayLine1.

        The pay lines' generated

        :param generated: The generated of this PayLine1.
        :type generated: datetime
        """

        self._generated = generated

    @property
    def pay_code(self):
        """Gets the pay_code of this PayLine1.

        The pay lines' pay code

        :return: The pay_code of this PayLine1.
        :rtype: str
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this PayLine1.

        The pay lines' pay code

        :param pay_code: The pay_code of this PayLine1.
        :type pay_code: str
        """

        self._pay_code = pay_code

    @property
    def pay_code_type(self):
        """Gets the pay_code_type of this PayLine1.

        The pay lines' pay code type

        :return: The pay_code_type of this PayLine1.
        :rtype: str
        """
        return self._pay_code_type

    @pay_code_type.setter
    def pay_code_type(self, pay_code_type):
        """Sets the pay_code_type of this PayLine1.

        The pay lines' pay code type

        :param pay_code_type: The pay_code_type of this PayLine1.
        :type pay_code_type: str
        """
        allowed_values = ["NotSet", "Payment", "Deduction"]  # noqa: E501
        if pay_code_type not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_code_type` ({0}), must be one of {1}"
                .format(pay_code_type, allowed_values)
            )

        self._pay_code_type = pay_code_type

    @property
    def pay_run_sequence(self):
        """Gets the pay_run_sequence of this PayLine1.

        The pay lines' pay run sequence

        :return: The pay_run_sequence of this PayLine1.
        :rtype: int
        """
        return self._pay_run_sequence

    @pay_run_sequence.setter
    def pay_run_sequence(self, pay_run_sequence):
        """Sets the pay_run_sequence of this PayLine1.

        The pay lines' pay run sequence

        :param pay_run_sequence: The pay_run_sequence of this PayLine1.
        :type pay_run_sequence: int
        """

        self._pay_run_sequence = pay_run_sequence

    @property
    def payment_date(self):
        """Gets the payment_date of this PayLine1.

        The pay lines' payment date

        :return: The payment_date of this PayLine1.
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PayLine1.

        The pay lines' payment date

        :param payment_date: The payment_date of this PayLine1.
        :type payment_date: date
        """

        self._payment_date = payment_date

    @property
    def tax_period(self):
        """Gets the tax_period of this PayLine1.

        The pay lines' tax period

        :return: The tax_period of this PayLine1.
        :rtype: int
        """
        return self._tax_period

    @tax_period.setter
    def tax_period(self, tax_period):
        """Sets the tax_period of this PayLine1.

        The pay lines' tax period

        :param tax_period: The tax_period of this PayLine1.
        :type tax_period: int
        """

        self._tax_period = tax_period

    @property
    def tax_year(self):
        """Gets the tax_year of this PayLine1.

        The pay lines' tax year

        :return: The tax_year of this PayLine1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this PayLine1.

        The pay lines' tax year

        :param tax_year: The tax_year of this PayLine1.
        :type tax_year: int
        """

        self._tax_year = tax_year

    @property
    def value(self):
        """Gets the value of this PayLine1.

        The pay lines' value

        :return: The value of this PayLine1.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PayLine1.

        The pay lines' value

        :param value: The value of this PayLine1.
        :type value: float
        """

        self._value = value
