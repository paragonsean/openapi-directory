# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address1 import Address1
from openapi_server.models.auto_enrolment import AutoEnrolment
from openapi_server.models.bank_account1 import BankAccount1
from openapi_server.models.hmrc_settings import HmrcSettings
from openapi_server import util


class Employer3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address1=None, apprenticeship_levy_allowance: float=None, auto_enrolment: AutoEnrolment=None, bacs_service_user_number: str=None, bank_account: BankAccount1=None, calculate_apprenticeship_levy: bool=None, claim_employment_allowance: bool=None, claim_small_employer_relief: bool=None, effective_date: date=None, hmrc_settings: HmrcSettings=None, meta_data: object=None, name: str=None, next_revision_date: date=None, region: str=None, revision: int=None, rule_exclusions: str=None, territory: str=None):
        """Employer3 - a model defined in OpenAPI

        :param address: The address of this Employer3.
        :param apprenticeship_levy_allowance: The apprenticeship_levy_allowance of this Employer3.
        :param auto_enrolment: The auto_enrolment of this Employer3.
        :param bacs_service_user_number: The bacs_service_user_number of this Employer3.
        :param bank_account: The bank_account of this Employer3.
        :param calculate_apprenticeship_levy: The calculate_apprenticeship_levy of this Employer3.
        :param claim_employment_allowance: The claim_employment_allowance of this Employer3.
        :param claim_small_employer_relief: The claim_small_employer_relief of this Employer3.
        :param effective_date: The effective_date of this Employer3.
        :param hmrc_settings: The hmrc_settings of this Employer3.
        :param meta_data: The meta_data of this Employer3.
        :param name: The name of this Employer3.
        :param next_revision_date: The next_revision_date of this Employer3.
        :param region: The region of this Employer3.
        :param revision: The revision of this Employer3.
        :param rule_exclusions: The rule_exclusions of this Employer3.
        :param territory: The territory of this Employer3.
        """
        self.openapi_types = {
            'address': Address1,
            'apprenticeship_levy_allowance': float,
            'auto_enrolment': AutoEnrolment,
            'bacs_service_user_number': str,
            'bank_account': BankAccount1,
            'calculate_apprenticeship_levy': bool,
            'claim_employment_allowance': bool,
            'claim_small_employer_relief': bool,
            'effective_date': date,
            'hmrc_settings': HmrcSettings,
            'meta_data': object,
            'name': str,
            'next_revision_date': date,
            'region': str,
            'revision': int,
            'rule_exclusions': str,
            'territory': str
        }

        self.attribute_map = {
            'address': 'Address',
            'apprenticeship_levy_allowance': 'ApprenticeshipLevyAllowance',
            'auto_enrolment': 'AutoEnrolment',
            'bacs_service_user_number': 'BacsServiceUserNumber',
            'bank_account': 'BankAccount',
            'calculate_apprenticeship_levy': 'CalculateApprenticeshipLevy',
            'claim_employment_allowance': 'ClaimEmploymentAllowance',
            'claim_small_employer_relief': 'ClaimSmallEmployerRelief',
            'effective_date': 'EffectiveDate',
            'hmrc_settings': 'HmrcSettings',
            'meta_data': 'MetaData',
            'name': 'Name',
            'next_revision_date': 'NextRevisionDate',
            'region': 'Region',
            'revision': 'Revision',
            'rule_exclusions': 'RuleExclusions',
            'territory': 'Territory'
        }

        self._address = address
        self._apprenticeship_levy_allowance = apprenticeship_levy_allowance
        self._auto_enrolment = auto_enrolment
        self._bacs_service_user_number = bacs_service_user_number
        self._bank_account = bank_account
        self._calculate_apprenticeship_levy = calculate_apprenticeship_levy
        self._claim_employment_allowance = claim_employment_allowance
        self._claim_small_employer_relief = claim_small_employer_relief
        self._effective_date = effective_date
        self._hmrc_settings = hmrc_settings
        self._meta_data = meta_data
        self._name = name
        self._next_revision_date = next_revision_date
        self._region = region
        self._revision = revision
        self._rule_exclusions = rule_exclusions
        self._territory = territory

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Employer3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Employer_3 of this Employer3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Employer3.


        :return: The address of this Employer3.
        :rtype: Address1
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Employer3.


        :param address: The address of this Employer3.
        :type address: Address1
        """

        self._address = address

    @property
    def apprenticeship_levy_allowance(self):
        """Gets the apprenticeship_levy_allowance of this Employer3.

        The employers' apprenticeship levy allowance

        :return: The apprenticeship_levy_allowance of this Employer3.
        :rtype: float
        """
        return self._apprenticeship_levy_allowance

    @apprenticeship_levy_allowance.setter
    def apprenticeship_levy_allowance(self, apprenticeship_levy_allowance):
        """Sets the apprenticeship_levy_allowance of this Employer3.

        The employers' apprenticeship levy allowance

        :param apprenticeship_levy_allowance: The apprenticeship_levy_allowance of this Employer3.
        :type apprenticeship_levy_allowance: float
        """

        self._apprenticeship_levy_allowance = apprenticeship_levy_allowance

    @property
    def auto_enrolment(self):
        """Gets the auto_enrolment of this Employer3.


        :return: The auto_enrolment of this Employer3.
        :rtype: AutoEnrolment
        """
        return self._auto_enrolment

    @auto_enrolment.setter
    def auto_enrolment(self, auto_enrolment):
        """Sets the auto_enrolment of this Employer3.


        :param auto_enrolment: The auto_enrolment of this Employer3.
        :type auto_enrolment: AutoEnrolment
        """

        self._auto_enrolment = auto_enrolment

    @property
    def bacs_service_user_number(self):
        """Gets the bacs_service_user_number of this Employer3.

        The employers' bacs service user number

        :return: The bacs_service_user_number of this Employer3.
        :rtype: str
        """
        return self._bacs_service_user_number

    @bacs_service_user_number.setter
    def bacs_service_user_number(self, bacs_service_user_number):
        """Sets the bacs_service_user_number of this Employer3.

        The employers' bacs service user number

        :param bacs_service_user_number: The bacs_service_user_number of this Employer3.
        :type bacs_service_user_number: str
        """

        self._bacs_service_user_number = bacs_service_user_number

    @property
    def bank_account(self):
        """Gets the bank_account of this Employer3.


        :return: The bank_account of this Employer3.
        :rtype: BankAccount1
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this Employer3.


        :param bank_account: The bank_account of this Employer3.
        :type bank_account: BankAccount1
        """

        self._bank_account = bank_account

    @property
    def calculate_apprenticeship_levy(self):
        """Gets the calculate_apprenticeship_levy of this Employer3.

        The employers' calculate apprenticeship levy

        :return: The calculate_apprenticeship_levy of this Employer3.
        :rtype: bool
        """
        return self._calculate_apprenticeship_levy

    @calculate_apprenticeship_levy.setter
    def calculate_apprenticeship_levy(self, calculate_apprenticeship_levy):
        """Sets the calculate_apprenticeship_levy of this Employer3.

        The employers' calculate apprenticeship levy

        :param calculate_apprenticeship_levy: The calculate_apprenticeship_levy of this Employer3.
        :type calculate_apprenticeship_levy: bool
        """

        self._calculate_apprenticeship_levy = calculate_apprenticeship_levy

    @property
    def claim_employment_allowance(self):
        """Gets the claim_employment_allowance of this Employer3.

        The employers' claim employment allowance

        :return: The claim_employment_allowance of this Employer3.
        :rtype: bool
        """
        return self._claim_employment_allowance

    @claim_employment_allowance.setter
    def claim_employment_allowance(self, claim_employment_allowance):
        """Sets the claim_employment_allowance of this Employer3.

        The employers' claim employment allowance

        :param claim_employment_allowance: The claim_employment_allowance of this Employer3.
        :type claim_employment_allowance: bool
        """

        self._claim_employment_allowance = claim_employment_allowance

    @property
    def claim_small_employer_relief(self):
        """Gets the claim_small_employer_relief of this Employer3.

        The employers' claim small employer relief

        :return: The claim_small_employer_relief of this Employer3.
        :rtype: bool
        """
        return self._claim_small_employer_relief

    @claim_small_employer_relief.setter
    def claim_small_employer_relief(self, claim_small_employer_relief):
        """Sets the claim_small_employer_relief of this Employer3.

        The employers' claim small employer relief

        :param claim_small_employer_relief: The claim_small_employer_relief of this Employer3.
        :type claim_small_employer_relief: bool
        """

        self._claim_small_employer_relief = claim_small_employer_relief

    @property
    def effective_date(self):
        """Gets the effective_date of this Employer3.

        The employers' effective date

        :return: The effective_date of this Employer3.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this Employer3.

        The employers' effective date

        :param effective_date: The effective_date of this Employer3.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def hmrc_settings(self):
        """Gets the hmrc_settings of this Employer3.


        :return: The hmrc_settings of this Employer3.
        :rtype: HmrcSettings
        """
        return self._hmrc_settings

    @hmrc_settings.setter
    def hmrc_settings(self, hmrc_settings):
        """Sets the hmrc_settings of this Employer3.


        :param hmrc_settings: The hmrc_settings of this Employer3.
        :type hmrc_settings: HmrcSettings
        """

        self._hmrc_settings = hmrc_settings

    @property
    def meta_data(self):
        """Gets the meta_data of this Employer3.

        The employers' meta data

        :return: The meta_data of this Employer3.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this Employer3.

        The employers' meta data

        :param meta_data: The meta_data of this Employer3.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this Employer3.

        The employers' name

        :return: The name of this Employer3.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Employer3.

        The employers' name

        :param name: The name of this Employer3.
        :type name: str
        """

        self._name = name

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this Employer3.

        The employers' next revision date

        :return: The next_revision_date of this Employer3.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this Employer3.

        The employers' next revision date

        :param next_revision_date: The next_revision_date of this Employer3.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def region(self):
        """Gets the region of this Employer3.

        The employers' region

        :return: The region of this Employer3.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Employer3.

        The employers' region

        :param region: The region of this Employer3.
        :type region: str
        """
        allowed_values = ["NotSet", "England", "Scotland", "Wales"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def revision(self):
        """Gets the revision of this Employer3.

        The employers' revision

        :return: The revision of this Employer3.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Employer3.

        The employers' revision

        :param revision: The revision of this Employer3.
        :type revision: int
        """

        self._revision = revision

    @property
    def rule_exclusions(self):
        """Gets the rule_exclusions of this Employer3.

        The employers' rule exclusions

        :return: The rule_exclusions of this Employer3.
        :rtype: str
        """
        return self._rule_exclusions

    @rule_exclusions.setter
    def rule_exclusions(self, rule_exclusions):
        """Sets the rule_exclusions of this Employer3.

        The employers' rule exclusions

        :param rule_exclusions: The rule_exclusions of this Employer3.
        :type rule_exclusions: str
        """
        allowed_values = ["None", "NiMissingPayInstructionRule", "TaxMissingPayInstructionRule", "TaxCodeUpliftRule", "NiSetExpectedLetterRule", "NiDateOfBirthChangeRetrospectiveCRule", "NiDefermentStatusChangeRule", "NiEndContractedOutTransferRule", "PaymentAfterLeavingTaxCodeRule", "LeaverEndInstructionsRule", "P45StudentLoanInstructionRule", "P45TaxInstructionRule", "P45YtdTaxRule", "YtdInstructionRule", "TaxCodeRegionChangeRule", "AutoEnrolmentStatusChangeRule", "EmployeeDeceasedRule", "BenefitInstructionAutoEndRule"]  # noqa: E501
        if rule_exclusions not in allowed_values:
            raise ValueError(
                "Invalid value for `rule_exclusions` ({0}), must be one of {1}"
                .format(rule_exclusions, allowed_values)
            )

        self._rule_exclusions = rule_exclusions

    @property
    def territory(self):
        """Gets the territory of this Employer3.

        The employers' territory

        :return: The territory of this Employer3.
        :rtype: str
        """
        return self._territory

    @territory.setter
    def territory(self, territory):
        """Sets the territory of this Employer3.

        The employers' territory

        :param territory: The territory of this Employer3.
        :type territory: str
        """
        allowed_values = ["UnitedKingdom"]  # noqa: E501
        if territory not in allowed_values:
            raise ValueError(
                "Invalid value for `territory` ({0}), must be one of {1}"
                .format(territory, allowed_values)
            )

        self._territory = territory
