# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaySchedule4(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_data: object=None, name: str=None, pay_frequency: str=None):
        """PaySchedule4 - a model defined in OpenAPI

        :param meta_data: The meta_data of this PaySchedule4.
        :param name: The name of this PaySchedule4.
        :param pay_frequency: The pay_frequency of this PaySchedule4.
        """
        self.openapi_types = {
            'meta_data': object,
            'name': str,
            'pay_frequency': str
        }

        self.attribute_map = {
            'meta_data': 'MetaData',
            'name': 'Name',
            'pay_frequency': 'PayFrequency'
        }

        self._meta_data = meta_data
        self._name = name
        self._pay_frequency = pay_frequency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaySchedule4':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaySchedule_4 of this PaySchedule4.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_data(self):
        """Gets the meta_data of this PaySchedule4.

        The pay schedules' meta data

        :return: The meta_data of this PaySchedule4.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PaySchedule4.

        The pay schedules' meta data

        :param meta_data: The meta_data of this PaySchedule4.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this PaySchedule4.

        The pay schedules' name

        :return: The name of this PaySchedule4.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaySchedule4.

        The pay schedules' name

        :param name: The name of this PaySchedule4.
        :type name: str
        """

        self._name = name

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this PaySchedule4.

        The pay schedules' pay frequency

        :return: The pay_frequency of this PaySchedule4.
        :rtype: str
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this PaySchedule4.

        The pay schedules' pay frequency

        :param pay_frequency: The pay_frequency of this PaySchedule4.
        :type pay_frequency: str
        """
        allowed_values = ["Weekly", "Monthly", "TwoWeekly", "FourWeekly", "Yearly"]  # noqa: E501
        if pay_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_frequency` ({0}), must be one of {1}"
                .format(pay_frequency, allowed_values)
            )

        self._pay_frequency = pay_frequency
