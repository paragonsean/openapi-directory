# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delete import DELETE
from openapi_server import util


class BatchJobInstruction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, holding_date: datetime=None, instructions: DELETE=None, validate_only: bool=None):
        """BatchJobInstruction1 - a model defined in OpenAPI

        :param holding_date: The holding_date of this BatchJobInstruction1.
        :param instructions: The instructions of this BatchJobInstruction1.
        :param validate_only: The validate_only of this BatchJobInstruction1.
        """
        self.openapi_types = {
            'holding_date': datetime,
            'instructions': DELETE,
            'validate_only': bool
        }

        self.attribute_map = {
            'holding_date': 'HoldingDate',
            'instructions': 'Instructions',
            'validate_only': 'ValidateOnly'
        }

        self._holding_date = holding_date
        self._instructions = instructions
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchJobInstruction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchJobInstruction_1 of this BatchJobInstruction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def holding_date(self):
        """Gets the holding_date of this BatchJobInstruction1.

        The batch job instructions' holding date

        :return: The holding_date of this BatchJobInstruction1.
        :rtype: datetime
        """
        return self._holding_date

    @holding_date.setter
    def holding_date(self, holding_date):
        """Sets the holding_date of this BatchJobInstruction1.

        The batch job instructions' holding date

        :param holding_date: The holding_date of this BatchJobInstruction1.
        :type holding_date: datetime
        """

        self._holding_date = holding_date

    @property
    def instructions(self):
        """Gets the instructions of this BatchJobInstruction1.


        :return: The instructions of this BatchJobInstruction1.
        :rtype: DELETE
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this BatchJobInstruction1.


        :param instructions: The instructions of this BatchJobInstruction1.
        :type instructions: DELETE
        """

        self._instructions = instructions

    @property
    def validate_only(self):
        """Gets the validate_only of this BatchJobInstruction1.

        The batch job instructions' validate only

        :return: The validate_only of this BatchJobInstruction1.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this BatchJobInstruction1.

        The batch job instructions' validate only

        :param validate_only: The validate_only of this BatchJobInstruction1.
        :type validate_only: bool
        """

        self._validate_only = validate_only
