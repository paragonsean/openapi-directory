# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition_inner import ConditionInner
from openapi_server.models.filter_inner import FilterInner
from openapi_server.models.order_inner import OrderInner
from openapi_server.models.output_inner import OutputInner
from openapi_server import util


class GroupGroupInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name: str=None, item_name: str=None, loop_expression: str=None, predicate: str=None, selector: str=None, unique_key_variable: str=None, condition: List[ConditionInner]=None, filter: List[FilterInner]=None, order: List[OrderInner]=None, output: List[OutputInner]=None):
        """GroupGroupInner - a model defined in OpenAPI

        :param group_name: The group_name of this GroupGroupInner.
        :param item_name: The item_name of this GroupGroupInner.
        :param loop_expression: The loop_expression of this GroupGroupInner.
        :param predicate: The predicate of this GroupGroupInner.
        :param selector: The selector of this GroupGroupInner.
        :param unique_key_variable: The unique_key_variable of this GroupGroupInner.
        :param condition: The condition of this GroupGroupInner.
        :param filter: The filter of this GroupGroupInner.
        :param order: The order of this GroupGroupInner.
        :param output: The output of this GroupGroupInner.
        """
        self.openapi_types = {
            'group_name': str,
            'item_name': str,
            'loop_expression': str,
            'predicate': str,
            'selector': str,
            'unique_key_variable': str,
            'condition': List[ConditionInner],
            'filter': List[FilterInner],
            'order': List[OrderInner],
            'output': List[OutputInner]
        }

        self.attribute_map = {
            'group_name': '@GroupName',
            'item_name': '@ItemName',
            'loop_expression': '@LoopExpression',
            'predicate': '@Predicate',
            'selector': '@Selector',
            'unique_key_variable': '@UniqueKeyVariable',
            'condition': 'Condition',
            'filter': 'Filter',
            'order': 'Order',
            'output': 'Output'
        }

        self._group_name = group_name
        self._item_name = item_name
        self._loop_expression = loop_expression
        self._predicate = predicate
        self._selector = selector
        self._unique_key_variable = unique_key_variable
        self._condition = condition
        self._filter = filter
        self._order = order
        self._output = output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupGroupInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group_Group_inner of this GroupGroupInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self):
        """Gets the group_name of this GroupGroupInner.

        The entity groups' group name

        :return: The group_name of this GroupGroupInner.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this GroupGroupInner.

        The entity groups' group name

        :param group_name: The group_name of this GroupGroupInner.
        :type group_name: str
        """

        self._group_name = group_name

    @property
    def item_name(self):
        """Gets the item_name of this GroupGroupInner.

        The entity groups' item name

        :return: The item_name of this GroupGroupInner.
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this GroupGroupInner.

        The entity groups' item name

        :param item_name: The item_name of this GroupGroupInner.
        :type item_name: str
        """

        self._item_name = item_name

    @property
    def loop_expression(self):
        """Gets the loop_expression of this GroupGroupInner.

        The entity groups' loop expression

        :return: The loop_expression of this GroupGroupInner.
        :rtype: str
        """
        return self._loop_expression

    @loop_expression.setter
    def loop_expression(self, loop_expression):
        """Sets the loop_expression of this GroupGroupInner.

        The entity groups' loop expression

        :param loop_expression: The loop_expression of this GroupGroupInner.
        :type loop_expression: str
        """

        self._loop_expression = loop_expression

    @property
    def predicate(self):
        """Gets the predicate of this GroupGroupInner.

        The entity groups' predicate

        :return: The predicate of this GroupGroupInner.
        :rtype: str
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this GroupGroupInner.

        The entity groups' predicate

        :param predicate: The predicate of this GroupGroupInner.
        :type predicate: str
        """

        self._predicate = predicate

    @property
    def selector(self):
        """Gets the selector of this GroupGroupInner.

        The entity groups' selector

        :return: The selector of this GroupGroupInner.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this GroupGroupInner.

        The entity groups' selector

        :param selector: The selector of this GroupGroupInner.
        :type selector: str
        """

        self._selector = selector

    @property
    def unique_key_variable(self):
        """Gets the unique_key_variable of this GroupGroupInner.

        The entity groups' unique key variable

        :return: The unique_key_variable of this GroupGroupInner.
        :rtype: str
        """
        return self._unique_key_variable

    @unique_key_variable.setter
    def unique_key_variable(self, unique_key_variable):
        """Sets the unique_key_variable of this GroupGroupInner.

        The entity groups' unique key variable

        :param unique_key_variable: The unique_key_variable of this GroupGroupInner.
        :type unique_key_variable: str
        """

        self._unique_key_variable = unique_key_variable

    @property
    def condition(self):
        """Gets the condition of this GroupGroupInner.

        The entity groups' conditions

        :return: The condition of this GroupGroupInner.
        :rtype: List[ConditionInner]
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GroupGroupInner.

        The entity groups' conditions

        :param condition: The condition of this GroupGroupInner.
        :type condition: List[ConditionInner]
        """

        self._condition = condition

    @property
    def filter(self):
        """Gets the filter of this GroupGroupInner.

        The entity groups' filters

        :return: The filter of this GroupGroupInner.
        :rtype: List[FilterInner]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GroupGroupInner.

        The entity groups' filters

        :param filter: The filter of this GroupGroupInner.
        :type filter: List[FilterInner]
        """

        self._filter = filter

    @property
    def order(self):
        """Gets the order of this GroupGroupInner.

        The entity groups' ordering

        :return: The order of this GroupGroupInner.
        :rtype: List[OrderInner]
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GroupGroupInner.

        The entity groups' ordering

        :param order: The order of this GroupGroupInner.
        :type order: List[OrderInner]
        """

        self._order = order

    @property
    def output(self):
        """Gets the output of this GroupGroupInner.

        The entity groups' outputs

        :return: The output of this GroupGroupInner.
        :rtype: List[OutputInner]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this GroupGroupInner.

        The entity groups' outputs

        :param output: The output of this GroupGroupInner.
        :type output: List[OutputInner]
        """

        self._output = output
