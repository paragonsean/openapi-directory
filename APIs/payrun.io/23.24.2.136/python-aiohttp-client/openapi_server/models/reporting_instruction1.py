# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportingInstruction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_date: date=None, start_date: date=None, tax_month: int=None, tax_year: int=None, value: float=None):
        """ReportingInstruction1 - a model defined in OpenAPI

        :param end_date: The end_date of this ReportingInstruction1.
        :param start_date: The start_date of this ReportingInstruction1.
        :param tax_month: The tax_month of this ReportingInstruction1.
        :param tax_year: The tax_year of this ReportingInstruction1.
        :param value: The value of this ReportingInstruction1.
        """
        self.openapi_types = {
            'end_date': date,
            'start_date': date,
            'tax_month': int,
            'tax_year': int,
            'value': float
        }

        self.attribute_map = {
            'end_date': 'EndDate',
            'start_date': 'StartDate',
            'tax_month': 'TaxMonth',
            'tax_year': 'TaxYear',
            'value': 'Value'
        }

        self._end_date = end_date
        self._start_date = start_date
        self._tax_month = tax_month
        self._tax_year = tax_year
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportingInstruction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportingInstruction_1 of this ReportingInstruction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_date(self):
        """Gets the end_date of this ReportingInstruction1.

        The reporting instructions' end date

        :return: The end_date of this ReportingInstruction1.
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ReportingInstruction1.

        The reporting instructions' end date

        :param end_date: The end_date of this ReportingInstruction1.
        :type end_date: date
        """

        self._end_date = end_date

    @property
    def start_date(self):
        """Gets the start_date of this ReportingInstruction1.

        The reporting instructions' start date

        :return: The start_date of this ReportingInstruction1.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ReportingInstruction1.

        The reporting instructions' start date

        :param start_date: The start_date of this ReportingInstruction1.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def tax_month(self):
        """Gets the tax_month of this ReportingInstruction1.

        The reporting instructions' tax month

        :return: The tax_month of this ReportingInstruction1.
        :rtype: int
        """
        return self._tax_month

    @tax_month.setter
    def tax_month(self, tax_month):
        """Sets the tax_month of this ReportingInstruction1.

        The reporting instructions' tax month

        :param tax_month: The tax_month of this ReportingInstruction1.
        :type tax_month: int
        """

        self._tax_month = tax_month

    @property
    def tax_year(self):
        """Gets the tax_year of this ReportingInstruction1.

        The reporting instructions' tax year

        :return: The tax_year of this ReportingInstruction1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this ReportingInstruction1.

        The reporting instructions' tax year

        :param tax_year: The tax_year of this ReportingInstruction1.
        :type tax_year: int
        """

        self._tax_year = tax_year

    @property
    def value(self):
        """Gets the value of this ReportingInstruction1.

        The reporting instructions' value

        :return: The value of this ReportingInstruction1.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ReportingInstruction1.

        The reporting instructions' value

        :param value: The value of this ReportingInstruction1.
        :type value: float
        """

        self._value = value
