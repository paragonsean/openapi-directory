# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission2 import Permission2
from openapi_server.models.roles import Roles
from openapi_server import util


class User1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, meta_data: object=None, permissions: Permission2=None, roles: Roles=None, user_identifier: str=None):
        """User1 - a model defined in OpenAPI

        :param meta_data: The meta_data of this User1.
        :param permissions: The permissions of this User1.
        :param roles: The roles of this User1.
        :param user_identifier: The user_identifier of this User1.
        """
        self.openapi_types = {
            'meta_data': object,
            'permissions': Permission2,
            'roles': Roles,
            'user_identifier': str
        }

        self.attribute_map = {
            'meta_data': 'MetaData',
            'permissions': 'Permissions',
            'roles': 'Roles',
            'user_identifier': 'UserIdentifier'
        }

        self._meta_data = meta_data
        self._permissions = permissions
        self._roles = roles
        self._user_identifier = user_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_1 of this User1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def meta_data(self):
        """Gets the meta_data of this User1.

        The users' meta data

        :return: The meta_data of this User1.
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this User1.

        The users' meta data

        :param meta_data: The meta_data of this User1.
        :type meta_data: object
        """

        self._meta_data = meta_data

    @property
    def permissions(self):
        """Gets the permissions of this User1.


        :return: The permissions of this User1.
        :rtype: Permission2
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this User1.


        :param permissions: The permissions of this User1.
        :type permissions: Permission2
        """

        self._permissions = permissions

    @property
    def roles(self):
        """Gets the roles of this User1.


        :return: The roles of this User1.
        :rtype: Roles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this User1.


        :param roles: The roles of this User1.
        :type roles: Roles
        """

        self._roles = roles

    @property
    def user_identifier(self):
        """Gets the user_identifier of this User1.

        The users' user identifier

        :return: The user_identifier of this User1.
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """Sets the user_identifier of this User1.

        The users' user identifier

        :param user_identifier: The user_identifier of this User1.
        :type user_identifier: str
        """

        self._user_identifier = user_identifier
