# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransformDefinition1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: bool=None, content_type: str=None, definition: str=None, definition_type: str=None, readonly: bool=None, supported_reports: str=None, tax_year: int=None, title: str=None, version: str=None):
        """TransformDefinition1 - a model defined in OpenAPI

        :param active: The active of this TransformDefinition1.
        :param content_type: The content_type of this TransformDefinition1.
        :param definition: The definition of this TransformDefinition1.
        :param definition_type: The definition_type of this TransformDefinition1.
        :param readonly: The readonly of this TransformDefinition1.
        :param supported_reports: The supported_reports of this TransformDefinition1.
        :param tax_year: The tax_year of this TransformDefinition1.
        :param title: The title of this TransformDefinition1.
        :param version: The version of this TransformDefinition1.
        """
        self.openapi_types = {
            'active': bool,
            'content_type': str,
            'definition': str,
            'definition_type': str,
            'readonly': bool,
            'supported_reports': str,
            'tax_year': int,
            'title': str,
            'version': str
        }

        self.attribute_map = {
            'active': 'Active',
            'content_type': 'ContentType',
            'definition': 'Definition',
            'definition_type': 'DefinitionType',
            'readonly': 'Readonly',
            'supported_reports': 'SupportedReports',
            'tax_year': 'TaxYear',
            'title': 'Title',
            'version': 'Version'
        }

        self._active = active
        self._content_type = content_type
        self._definition = definition
        self._definition_type = definition_type
        self._readonly = readonly
        self._supported_reports = supported_reports
        self._tax_year = tax_year
        self._title = title
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransformDefinition1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransformDefinition_1 of this TransformDefinition1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this TransformDefinition1.

        The transform definitions' active

        :return: The active of this TransformDefinition1.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TransformDefinition1.

        The transform definitions' active

        :param active: The active of this TransformDefinition1.
        :type active: bool
        """

        self._active = active

    @property
    def content_type(self):
        """Gets the content_type of this TransformDefinition1.

        The transform definitions' content type

        :return: The content_type of this TransformDefinition1.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this TransformDefinition1.

        The transform definitions' content type

        :param content_type: The content_type of this TransformDefinition1.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def definition(self):
        """Gets the definition of this TransformDefinition1.

        The transform definitions' definition

        :return: The definition of this TransformDefinition1.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this TransformDefinition1.

        The transform definitions' definition

        :param definition: The definition of this TransformDefinition1.
        :type definition: str
        """

        self._definition = definition

    @property
    def definition_type(self):
        """Gets the definition_type of this TransformDefinition1.

        The transform definitions' definition type

        :return: The definition_type of this TransformDefinition1.
        :rtype: str
        """
        return self._definition_type

    @definition_type.setter
    def definition_type(self, definition_type):
        """Sets the definition_type of this TransformDefinition1.

        The transform definitions' definition type

        :param definition_type: The definition_type of this TransformDefinition1.
        :type definition_type: str
        """

        self._definition_type = definition_type

    @property
    def readonly(self):
        """Gets the readonly of this TransformDefinition1.

        The transform definitions' readonly

        :return: The readonly of this TransformDefinition1.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this TransformDefinition1.

        The transform definitions' readonly

        :param readonly: The readonly of this TransformDefinition1.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def supported_reports(self):
        """Gets the supported_reports of this TransformDefinition1.

        The transform definitions' supported reports

        :return: The supported_reports of this TransformDefinition1.
        :rtype: str
        """
        return self._supported_reports

    @supported_reports.setter
    def supported_reports(self, supported_reports):
        """Sets the supported_reports of this TransformDefinition1.

        The transform definitions' supported reports

        :param supported_reports: The supported_reports of this TransformDefinition1.
        :type supported_reports: str
        """

        self._supported_reports = supported_reports

    @property
    def tax_year(self):
        """Gets the tax_year of this TransformDefinition1.

        The transform definitions' tax year

        :return: The tax_year of this TransformDefinition1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this TransformDefinition1.

        The transform definitions' tax year

        :param tax_year: The tax_year of this TransformDefinition1.
        :type tax_year: int
        """

        self._tax_year = tax_year

    @property
    def title(self):
        """Gets the title of this TransformDefinition1.

        The transform definitions' title

        :return: The title of this TransformDefinition1.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TransformDefinition1.

        The transform definitions' title

        :param title: The title of this TransformDefinition1.
        :type title: str
        """

        self._title = title

    @property
    def version(self):
        """Gets the version of this TransformDefinition1.

        The transform definitions' version

        :return: The version of this TransformDefinition1.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransformDefinition1.

        The transform definitions' version

        :param version: The version of this TransformDefinition1.
        :type version: str
        """

        self._version = version
