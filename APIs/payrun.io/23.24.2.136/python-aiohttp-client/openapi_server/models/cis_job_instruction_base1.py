# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employer1 import Employer1
from openapi_server.models.sub_contractor1 import SubContractor1
from openapi_server import util


class CisJobInstructionBase1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employer: Employer1=None, holding_date: datetime=None, sub_contractors: SubContractor1=None):
        """CisJobInstructionBase1 - a model defined in OpenAPI

        :param employer: The employer of this CisJobInstructionBase1.
        :param holding_date: The holding_date of this CisJobInstructionBase1.
        :param sub_contractors: The sub_contractors of this CisJobInstructionBase1.
        """
        self.openapi_types = {
            'employer': Employer1,
            'holding_date': datetime,
            'sub_contractors': SubContractor1
        }

        self.attribute_map = {
            'employer': 'Employer',
            'holding_date': 'HoldingDate',
            'sub_contractors': 'SubContractors'
        }

        self._employer = employer
        self._holding_date = holding_date
        self._sub_contractors = sub_contractors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CisJobInstructionBase1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CisJobInstructionBase_1 of this CisJobInstructionBase1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employer(self):
        """Gets the employer of this CisJobInstructionBase1.


        :return: The employer of this CisJobInstructionBase1.
        :rtype: Employer1
        """
        return self._employer

    @employer.setter
    def employer(self, employer):
        """Sets the employer of this CisJobInstructionBase1.


        :param employer: The employer of this CisJobInstructionBase1.
        :type employer: Employer1
        """

        self._employer = employer

    @property
    def holding_date(self):
        """Gets the holding_date of this CisJobInstructionBase1.

        The cis job instruction bases' holding date

        :return: The holding_date of this CisJobInstructionBase1.
        :rtype: datetime
        """
        return self._holding_date

    @holding_date.setter
    def holding_date(self, holding_date):
        """Sets the holding_date of this CisJobInstructionBase1.

        The cis job instruction bases' holding date

        :param holding_date: The holding_date of this CisJobInstructionBase1.
        :type holding_date: datetime
        """

        self._holding_date = holding_date

    @property
    def sub_contractors(self):
        """Gets the sub_contractors of this CisJobInstructionBase1.


        :return: The sub_contractors of this CisJobInstructionBase1.
        :rtype: SubContractor1
        """
        return self._sub_contractors

    @sub_contractors.setter
    def sub_contractors(self, sub_contractors):
        """Sets the sub_contractors of this CisJobInstructionBase1.


        :param sub_contractors: The sub_contractors of this CisJobInstructionBase1.
        :type sub_contractors: SubContractor1
        """

        self._sub_contractors = sub_contractors
