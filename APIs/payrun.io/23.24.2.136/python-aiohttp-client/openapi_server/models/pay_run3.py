# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pay_schedule2 import PaySchedule2
from openapi_server.models.proceeding_pay_run import ProceedingPayRun
from openapi_server import util


class PayRun3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executed: datetime=None, is_supplementary: bool=None, pay_frequency: str=None, pay_schedule: PaySchedule2=None, payment_date: date=None, period_end: date=None, period_start: date=None, proceeding_pay_run: ProceedingPayRun=None, sequence: int=None, tax_period: int=None, tax_year: int=None):
        """PayRun3 - a model defined in OpenAPI

        :param executed: The executed of this PayRun3.
        :param is_supplementary: The is_supplementary of this PayRun3.
        :param pay_frequency: The pay_frequency of this PayRun3.
        :param pay_schedule: The pay_schedule of this PayRun3.
        :param payment_date: The payment_date of this PayRun3.
        :param period_end: The period_end of this PayRun3.
        :param period_start: The period_start of this PayRun3.
        :param proceeding_pay_run: The proceeding_pay_run of this PayRun3.
        :param sequence: The sequence of this PayRun3.
        :param tax_period: The tax_period of this PayRun3.
        :param tax_year: The tax_year of this PayRun3.
        """
        self.openapi_types = {
            'executed': datetime,
            'is_supplementary': bool,
            'pay_frequency': str,
            'pay_schedule': PaySchedule2,
            'payment_date': date,
            'period_end': date,
            'period_start': date,
            'proceeding_pay_run': ProceedingPayRun,
            'sequence': int,
            'tax_period': int,
            'tax_year': int
        }

        self.attribute_map = {
            'executed': 'Executed',
            'is_supplementary': 'IsSupplementary',
            'pay_frequency': 'PayFrequency',
            'pay_schedule': 'PaySchedule',
            'payment_date': 'PaymentDate',
            'period_end': 'PeriodEnd',
            'period_start': 'PeriodStart',
            'proceeding_pay_run': 'ProceedingPayRun',
            'sequence': 'Sequence',
            'tax_period': 'TaxPeriod',
            'tax_year': 'TaxYear'
        }

        self._executed = executed
        self._is_supplementary = is_supplementary
        self._pay_frequency = pay_frequency
        self._pay_schedule = pay_schedule
        self._payment_date = payment_date
        self._period_end = period_end
        self._period_start = period_start
        self._proceeding_pay_run = proceeding_pay_run
        self._sequence = sequence
        self._tax_period = tax_period
        self._tax_year = tax_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayRun3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayRun_3 of this PayRun3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executed(self):
        """Gets the executed of this PayRun3.

        The pay runs' executed

        :return: The executed of this PayRun3.
        :rtype: datetime
        """
        return self._executed

    @executed.setter
    def executed(self, executed):
        """Sets the executed of this PayRun3.

        The pay runs' executed

        :param executed: The executed of this PayRun3.
        :type executed: datetime
        """

        self._executed = executed

    @property
    def is_supplementary(self):
        """Gets the is_supplementary of this PayRun3.

        The pay runs' is supplementary

        :return: The is_supplementary of this PayRun3.
        :rtype: bool
        """
        return self._is_supplementary

    @is_supplementary.setter
    def is_supplementary(self, is_supplementary):
        """Sets the is_supplementary of this PayRun3.

        The pay runs' is supplementary

        :param is_supplementary: The is_supplementary of this PayRun3.
        :type is_supplementary: bool
        """

        self._is_supplementary = is_supplementary

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this PayRun3.

        The pay runs' pay frequency

        :return: The pay_frequency of this PayRun3.
        :rtype: str
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this PayRun3.

        The pay runs' pay frequency

        :param pay_frequency: The pay_frequency of this PayRun3.
        :type pay_frequency: str
        """
        allowed_values = ["Weekly", "Monthly", "TwoWeekly", "FourWeekly", "Yearly"]  # noqa: E501
        if pay_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_frequency` ({0}), must be one of {1}"
                .format(pay_frequency, allowed_values)
            )

        self._pay_frequency = pay_frequency

    @property
    def pay_schedule(self):
        """Gets the pay_schedule of this PayRun3.


        :return: The pay_schedule of this PayRun3.
        :rtype: PaySchedule2
        """
        return self._pay_schedule

    @pay_schedule.setter
    def pay_schedule(self, pay_schedule):
        """Sets the pay_schedule of this PayRun3.


        :param pay_schedule: The pay_schedule of this PayRun3.
        :type pay_schedule: PaySchedule2
        """

        self._pay_schedule = pay_schedule

    @property
    def payment_date(self):
        """Gets the payment_date of this PayRun3.

        The pay runs' payment date

        :return: The payment_date of this PayRun3.
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this PayRun3.

        The pay runs' payment date

        :param payment_date: The payment_date of this PayRun3.
        :type payment_date: date
        """

        self._payment_date = payment_date

    @property
    def period_end(self):
        """Gets the period_end of this PayRun3.

        The pay runs' period end

        :return: The period_end of this PayRun3.
        :rtype: date
        """
        return self._period_end

    @period_end.setter
    def period_end(self, period_end):
        """Sets the period_end of this PayRun3.

        The pay runs' period end

        :param period_end: The period_end of this PayRun3.
        :type period_end: date
        """

        self._period_end = period_end

    @property
    def period_start(self):
        """Gets the period_start of this PayRun3.

        The pay runs' period start

        :return: The period_start of this PayRun3.
        :rtype: date
        """
        return self._period_start

    @period_start.setter
    def period_start(self, period_start):
        """Sets the period_start of this PayRun3.

        The pay runs' period start

        :param period_start: The period_start of this PayRun3.
        :type period_start: date
        """

        self._period_start = period_start

    @property
    def proceeding_pay_run(self):
        """Gets the proceeding_pay_run of this PayRun3.


        :return: The proceeding_pay_run of this PayRun3.
        :rtype: ProceedingPayRun
        """
        return self._proceeding_pay_run

    @proceeding_pay_run.setter
    def proceeding_pay_run(self, proceeding_pay_run):
        """Sets the proceeding_pay_run of this PayRun3.


        :param proceeding_pay_run: The proceeding_pay_run of this PayRun3.
        :type proceeding_pay_run: ProceedingPayRun
        """

        self._proceeding_pay_run = proceeding_pay_run

    @property
    def sequence(self):
        """Gets the sequence of this PayRun3.

        The pay runs' sequence

        :return: The sequence of this PayRun3.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this PayRun3.

        The pay runs' sequence

        :param sequence: The sequence of this PayRun3.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def tax_period(self):
        """Gets the tax_period of this PayRun3.

        The pay runs' tax period

        :return: The tax_period of this PayRun3.
        :rtype: int
        """
        return self._tax_period

    @tax_period.setter
    def tax_period(self, tax_period):
        """Sets the tax_period of this PayRun3.

        The pay runs' tax period

        :param tax_period: The tax_period of this PayRun3.
        :type tax_period: int
        """

        self._tax_period = tax_period

    @property
    def tax_year(self):
        """Gets the tax_year of this PayRun3.

        The pay runs' tax year

        :return: The tax_year of this PayRun3.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this PayRun3.

        The pay runs' tax year

        :param tax_year: The tax_year of this PayRun3.
        :type tax_year: int
        """

        self._tax_year = tax_year
