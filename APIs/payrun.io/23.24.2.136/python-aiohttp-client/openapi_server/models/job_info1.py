# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.errors1 import Errors1
from openapi_server import util


class JobInfo1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: datetime=None, employer_key: str=None, errors: Errors1=None, holding_date: datetime=None, job_id: str=None, job_status: str=None, job_type: str=None, last_updated: datetime=None, progress: float=None):
        """JobInfo1 - a model defined in OpenAPI

        :param created: The created of this JobInfo1.
        :param employer_key: The employer_key of this JobInfo1.
        :param errors: The errors of this JobInfo1.
        :param holding_date: The holding_date of this JobInfo1.
        :param job_id: The job_id of this JobInfo1.
        :param job_status: The job_status of this JobInfo1.
        :param job_type: The job_type of this JobInfo1.
        :param last_updated: The last_updated of this JobInfo1.
        :param progress: The progress of this JobInfo1.
        """
        self.openapi_types = {
            'created': datetime,
            'employer_key': str,
            'errors': Errors1,
            'holding_date': datetime,
            'job_id': str,
            'job_status': str,
            'job_type': str,
            'last_updated': datetime,
            'progress': float
        }

        self.attribute_map = {
            'created': 'Created',
            'employer_key': 'EmployerKey',
            'errors': 'Errors',
            'holding_date': 'HoldingDate',
            'job_id': 'JobId',
            'job_status': 'JobStatus',
            'job_type': 'JobType',
            'last_updated': 'LastUpdated',
            'progress': 'Progress'
        }

        self._created = created
        self._employer_key = employer_key
        self._errors = errors
        self._holding_date = holding_date
        self._job_id = job_id
        self._job_status = job_status
        self._job_type = job_type
        self._last_updated = last_updated
        self._progress = progress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobInfo1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobInfo_1 of this JobInfo1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this JobInfo1.

        The job infos' created

        :return: The created of this JobInfo1.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this JobInfo1.

        The job infos' created

        :param created: The created of this JobInfo1.
        :type created: datetime
        """

        self._created = created

    @property
    def employer_key(self):
        """Gets the employer_key of this JobInfo1.

        The job infos' employer key

        :return: The employer_key of this JobInfo1.
        :rtype: str
        """
        return self._employer_key

    @employer_key.setter
    def employer_key(self, employer_key):
        """Sets the employer_key of this JobInfo1.

        The job infos' employer key

        :param employer_key: The employer_key of this JobInfo1.
        :type employer_key: str
        """

        self._employer_key = employer_key

    @property
    def errors(self):
        """Gets the errors of this JobInfo1.


        :return: The errors of this JobInfo1.
        :rtype: Errors1
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this JobInfo1.


        :param errors: The errors of this JobInfo1.
        :type errors: Errors1
        """

        self._errors = errors

    @property
    def holding_date(self):
        """Gets the holding_date of this JobInfo1.

        The job infos' holding date

        :return: The holding_date of this JobInfo1.
        :rtype: datetime
        """
        return self._holding_date

    @holding_date.setter
    def holding_date(self, holding_date):
        """Sets the holding_date of this JobInfo1.

        The job infos' holding date

        :param holding_date: The holding_date of this JobInfo1.
        :type holding_date: datetime
        """

        self._holding_date = holding_date

    @property
    def job_id(self):
        """Gets the job_id of this JobInfo1.

        The job infos' job id

        :return: The job_id of this JobInfo1.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobInfo1.

        The job infos' job id

        :param job_id: The job_id of this JobInfo1.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_status(self):
        """Gets the job_status of this JobInfo1.

        The job infos' job status

        :return: The job_status of this JobInfo1.
        :rtype: str
        """
        return self._job_status

    @job_status.setter
    def job_status(self, job_status):
        """Sets the job_status of this JobInfo1.

        The job infos' job status

        :param job_status: The job_status of this JobInfo1.
        :type job_status: str
        """
        allowed_values = ["New", "Pending", "InProgress", "Success", "Failed", "OnHold"]  # noqa: E501
        if job_status not in allowed_values:
            raise ValueError(
                "Invalid value for `job_status` ({0}), must be one of {1}"
                .format(job_status, allowed_values)
            )

        self._job_status = job_status

    @property
    def job_type(self):
        """Gets the job_type of this JobInfo1.

        The job infos' job type

        :return: The job_type of this JobInfo1.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobInfo1.

        The job infos' job type

        :param job_type: The job_type of this JobInfo1.
        :type job_type: str
        """

        self._job_type = job_type

    @property
    def last_updated(self):
        """Gets the last_updated of this JobInfo1.

        The job infos' last updated

        :return: The last_updated of this JobInfo1.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this JobInfo1.

        The job infos' last updated

        :param last_updated: The last_updated of this JobInfo1.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def progress(self):
        """Gets the progress of this JobInfo1.

        The job infos' progress

        :return: The progress of this JobInfo1.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this JobInfo1.

        The job infos' progress

        :param progress: The progress of this JobInfo1.
        :type progress: float
        """

        self._progress = progress
