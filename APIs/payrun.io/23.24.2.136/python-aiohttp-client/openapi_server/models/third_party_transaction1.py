# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employer_core2 import EmployerCore2
from openapi_server import util


class ThirdPartyTransaction1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, employer_core: EmployerCore2=None, job_type: str=None, request: str=None, response: str=None, transaction_status: str=None, transmission_date: datetime=None):
        """ThirdPartyTransaction1 - a model defined in OpenAPI

        :param employer_core: The employer_core of this ThirdPartyTransaction1.
        :param job_type: The job_type of this ThirdPartyTransaction1.
        :param request: The request of this ThirdPartyTransaction1.
        :param response: The response of this ThirdPartyTransaction1.
        :param transaction_status: The transaction_status of this ThirdPartyTransaction1.
        :param transmission_date: The transmission_date of this ThirdPartyTransaction1.
        """
        self.openapi_types = {
            'employer_core': EmployerCore2,
            'job_type': str,
            'request': str,
            'response': str,
            'transaction_status': str,
            'transmission_date': datetime
        }

        self.attribute_map = {
            'employer_core': 'EmployerCore',
            'job_type': 'JobType',
            'request': 'Request',
            'response': 'Response',
            'transaction_status': 'TransactionStatus',
            'transmission_date': 'TransmissionDate'
        }

        self._employer_core = employer_core
        self._job_type = job_type
        self._request = request
        self._response = response
        self._transaction_status = transaction_status
        self._transmission_date = transmission_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyTransaction1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyTransaction_1 of this ThirdPartyTransaction1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def employer_core(self):
        """Gets the employer_core of this ThirdPartyTransaction1.


        :return: The employer_core of this ThirdPartyTransaction1.
        :rtype: EmployerCore2
        """
        return self._employer_core

    @employer_core.setter
    def employer_core(self, employer_core):
        """Sets the employer_core of this ThirdPartyTransaction1.


        :param employer_core: The employer_core of this ThirdPartyTransaction1.
        :type employer_core: EmployerCore2
        """

        self._employer_core = employer_core

    @property
    def job_type(self):
        """Gets the job_type of this ThirdPartyTransaction1.

        The third party transactions' job type

        :return: The job_type of this ThirdPartyTransaction1.
        :rtype: str
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this ThirdPartyTransaction1.

        The third party transactions' job type

        :param job_type: The job_type of this ThirdPartyTransaction1.
        :type job_type: str
        """

        self._job_type = job_type

    @property
    def request(self):
        """Gets the request of this ThirdPartyTransaction1.

        The third party transactions' request

        :return: The request of this ThirdPartyTransaction1.
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this ThirdPartyTransaction1.

        The third party transactions' request

        :param request: The request of this ThirdPartyTransaction1.
        :type request: str
        """

        self._request = request

    @property
    def response(self):
        """Gets the response of this ThirdPartyTransaction1.

        The third party transactions' response

        :return: The response of this ThirdPartyTransaction1.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ThirdPartyTransaction1.

        The third party transactions' response

        :param response: The response of this ThirdPartyTransaction1.
        :type response: str
        """

        self._response = response

    @property
    def transaction_status(self):
        """Gets the transaction_status of this ThirdPartyTransaction1.

        The third party transactions' transaction status

        :return: The transaction_status of this ThirdPartyTransaction1.
        :rtype: str
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status):
        """Sets the transaction_status of this ThirdPartyTransaction1.

        The third party transactions' transaction status

        :param transaction_status: The transaction_status of this ThirdPartyTransaction1.
        :type transaction_status: str
        """
        allowed_values = ["Unknown", "Success", "Failure"]  # noqa: E501
        if transaction_status not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_status` ({0}), must be one of {1}"
                .format(transaction_status, allowed_values)
            )

        self._transaction_status = transaction_status

    @property
    def transmission_date(self):
        """Gets the transmission_date of this ThirdPartyTransaction1.

        The third party transactions' transmission date

        :return: The transmission_date of this ThirdPartyTransaction1.
        :rtype: datetime
        """
        return self._transmission_date

    @transmission_date.setter
    def transmission_date(self, transmission_date):
        """Sets the transmission_date of this ThirdPartyTransaction1.

        The third party transactions' transmission date

        :param transmission_date: The transmission_date of this ThirdPartyTransaction1.
        :type transmission_date: datetime
        """

        self._transmission_date = transmission_date
