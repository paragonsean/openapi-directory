# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.accrual_pay_codes import AccrualPayCodes
from openapi_server import util


class HolidayScheme1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accrual_pay_codes: AccrualPayCodes=None, allow_exceed_annual_entitlement: bool=None, allow_negative_balance: bool=None, annual_entitlement_weeks: float=None, bank_holiday_inclusive: bool=None, code: str=None, effective_date: date=None, max_carry_over_days: float=None, next_revision_date: date=None, offset_payment: bool=None, revision: int=None, scheme_ceased_date: date=None, scheme_key: str=None, scheme_name: str=None, year_start_day: int=None, year_start_month: int=None):
        """HolidayScheme1 - a model defined in OpenAPI

        :param accrual_pay_codes: The accrual_pay_codes of this HolidayScheme1.
        :param allow_exceed_annual_entitlement: The allow_exceed_annual_entitlement of this HolidayScheme1.
        :param allow_negative_balance: The allow_negative_balance of this HolidayScheme1.
        :param annual_entitlement_weeks: The annual_entitlement_weeks of this HolidayScheme1.
        :param bank_holiday_inclusive: The bank_holiday_inclusive of this HolidayScheme1.
        :param code: The code of this HolidayScheme1.
        :param effective_date: The effective_date of this HolidayScheme1.
        :param max_carry_over_days: The max_carry_over_days of this HolidayScheme1.
        :param next_revision_date: The next_revision_date of this HolidayScheme1.
        :param offset_payment: The offset_payment of this HolidayScheme1.
        :param revision: The revision of this HolidayScheme1.
        :param scheme_ceased_date: The scheme_ceased_date of this HolidayScheme1.
        :param scheme_key: The scheme_key of this HolidayScheme1.
        :param scheme_name: The scheme_name of this HolidayScheme1.
        :param year_start_day: The year_start_day of this HolidayScheme1.
        :param year_start_month: The year_start_month of this HolidayScheme1.
        """
        self.openapi_types = {
            'accrual_pay_codes': AccrualPayCodes,
            'allow_exceed_annual_entitlement': bool,
            'allow_negative_balance': bool,
            'annual_entitlement_weeks': float,
            'bank_holiday_inclusive': bool,
            'code': str,
            'effective_date': date,
            'max_carry_over_days': float,
            'next_revision_date': date,
            'offset_payment': bool,
            'revision': int,
            'scheme_ceased_date': date,
            'scheme_key': str,
            'scheme_name': str,
            'year_start_day': int,
            'year_start_month': int
        }

        self.attribute_map = {
            'accrual_pay_codes': 'AccrualPayCodes',
            'allow_exceed_annual_entitlement': 'AllowExceedAnnualEntitlement',
            'allow_negative_balance': 'AllowNegativeBalance',
            'annual_entitlement_weeks': 'AnnualEntitlementWeeks',
            'bank_holiday_inclusive': 'BankHolidayInclusive',
            'code': 'Code',
            'effective_date': 'EffectiveDate',
            'max_carry_over_days': 'MaxCarryOverDays',
            'next_revision_date': 'NextRevisionDate',
            'offset_payment': 'OffsetPayment',
            'revision': 'Revision',
            'scheme_ceased_date': 'SchemeCeasedDate',
            'scheme_key': 'SchemeKey',
            'scheme_name': 'SchemeName',
            'year_start_day': 'YearStartDay',
            'year_start_month': 'YearStartMonth'
        }

        self._accrual_pay_codes = accrual_pay_codes
        self._allow_exceed_annual_entitlement = allow_exceed_annual_entitlement
        self._allow_negative_balance = allow_negative_balance
        self._annual_entitlement_weeks = annual_entitlement_weeks
        self._bank_holiday_inclusive = bank_holiday_inclusive
        self._code = code
        self._effective_date = effective_date
        self._max_carry_over_days = max_carry_over_days
        self._next_revision_date = next_revision_date
        self._offset_payment = offset_payment
        self._revision = revision
        self._scheme_ceased_date = scheme_ceased_date
        self._scheme_key = scheme_key
        self._scheme_name = scheme_name
        self._year_start_day = year_start_day
        self._year_start_month = year_start_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HolidayScheme1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HolidayScheme_1 of this HolidayScheme1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accrual_pay_codes(self):
        """Gets the accrual_pay_codes of this HolidayScheme1.


        :return: The accrual_pay_codes of this HolidayScheme1.
        :rtype: AccrualPayCodes
        """
        return self._accrual_pay_codes

    @accrual_pay_codes.setter
    def accrual_pay_codes(self, accrual_pay_codes):
        """Sets the accrual_pay_codes of this HolidayScheme1.


        :param accrual_pay_codes: The accrual_pay_codes of this HolidayScheme1.
        :type accrual_pay_codes: AccrualPayCodes
        """

        self._accrual_pay_codes = accrual_pay_codes

    @property
    def allow_exceed_annual_entitlement(self):
        """Gets the allow_exceed_annual_entitlement of this HolidayScheme1.

        The holiday schemes' allow exceed annual entitlement

        :return: The allow_exceed_annual_entitlement of this HolidayScheme1.
        :rtype: bool
        """
        return self._allow_exceed_annual_entitlement

    @allow_exceed_annual_entitlement.setter
    def allow_exceed_annual_entitlement(self, allow_exceed_annual_entitlement):
        """Sets the allow_exceed_annual_entitlement of this HolidayScheme1.

        The holiday schemes' allow exceed annual entitlement

        :param allow_exceed_annual_entitlement: The allow_exceed_annual_entitlement of this HolidayScheme1.
        :type allow_exceed_annual_entitlement: bool
        """

        self._allow_exceed_annual_entitlement = allow_exceed_annual_entitlement

    @property
    def allow_negative_balance(self):
        """Gets the allow_negative_balance of this HolidayScheme1.

        The holiday schemes' allow negative balance

        :return: The allow_negative_balance of this HolidayScheme1.
        :rtype: bool
        """
        return self._allow_negative_balance

    @allow_negative_balance.setter
    def allow_negative_balance(self, allow_negative_balance):
        """Sets the allow_negative_balance of this HolidayScheme1.

        The holiday schemes' allow negative balance

        :param allow_negative_balance: The allow_negative_balance of this HolidayScheme1.
        :type allow_negative_balance: bool
        """

        self._allow_negative_balance = allow_negative_balance

    @property
    def annual_entitlement_weeks(self):
        """Gets the annual_entitlement_weeks of this HolidayScheme1.

        The holiday schemes' annual entitlement weeks

        :return: The annual_entitlement_weeks of this HolidayScheme1.
        :rtype: float
        """
        return self._annual_entitlement_weeks

    @annual_entitlement_weeks.setter
    def annual_entitlement_weeks(self, annual_entitlement_weeks):
        """Sets the annual_entitlement_weeks of this HolidayScheme1.

        The holiday schemes' annual entitlement weeks

        :param annual_entitlement_weeks: The annual_entitlement_weeks of this HolidayScheme1.
        :type annual_entitlement_weeks: float
        """

        self._annual_entitlement_weeks = annual_entitlement_weeks

    @property
    def bank_holiday_inclusive(self):
        """Gets the bank_holiday_inclusive of this HolidayScheme1.

        The holiday schemes' bank holiday inclusive

        :return: The bank_holiday_inclusive of this HolidayScheme1.
        :rtype: bool
        """
        return self._bank_holiday_inclusive

    @bank_holiday_inclusive.setter
    def bank_holiday_inclusive(self, bank_holiday_inclusive):
        """Sets the bank_holiday_inclusive of this HolidayScheme1.

        The holiday schemes' bank holiday inclusive

        :param bank_holiday_inclusive: The bank_holiday_inclusive of this HolidayScheme1.
        :type bank_holiday_inclusive: bool
        """

        self._bank_holiday_inclusive = bank_holiday_inclusive

    @property
    def code(self):
        """Gets the code of this HolidayScheme1.

        The holiday schemes' code

        :return: The code of this HolidayScheme1.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this HolidayScheme1.

        The holiday schemes' code

        :param code: The code of this HolidayScheme1.
        :type code: str
        """

        self._code = code

    @property
    def effective_date(self):
        """Gets the effective_date of this HolidayScheme1.

        The holiday schemes' effective date

        :return: The effective_date of this HolidayScheme1.
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this HolidayScheme1.

        The holiday schemes' effective date

        :param effective_date: The effective_date of this HolidayScheme1.
        :type effective_date: date
        """

        self._effective_date = effective_date

    @property
    def max_carry_over_days(self):
        """Gets the max_carry_over_days of this HolidayScheme1.

        The holiday schemes' max carry over days

        :return: The max_carry_over_days of this HolidayScheme1.
        :rtype: float
        """
        return self._max_carry_over_days

    @max_carry_over_days.setter
    def max_carry_over_days(self, max_carry_over_days):
        """Sets the max_carry_over_days of this HolidayScheme1.

        The holiday schemes' max carry over days

        :param max_carry_over_days: The max_carry_over_days of this HolidayScheme1.
        :type max_carry_over_days: float
        """

        self._max_carry_over_days = max_carry_over_days

    @property
    def next_revision_date(self):
        """Gets the next_revision_date of this HolidayScheme1.

        The holiday schemes' next revision date

        :return: The next_revision_date of this HolidayScheme1.
        :rtype: date
        """
        return self._next_revision_date

    @next_revision_date.setter
    def next_revision_date(self, next_revision_date):
        """Sets the next_revision_date of this HolidayScheme1.

        The holiday schemes' next revision date

        :param next_revision_date: The next_revision_date of this HolidayScheme1.
        :type next_revision_date: date
        """

        self._next_revision_date = next_revision_date

    @property
    def offset_payment(self):
        """Gets the offset_payment of this HolidayScheme1.

        The holiday schemes' offset payment

        :return: The offset_payment of this HolidayScheme1.
        :rtype: bool
        """
        return self._offset_payment

    @offset_payment.setter
    def offset_payment(self, offset_payment):
        """Sets the offset_payment of this HolidayScheme1.

        The holiday schemes' offset payment

        :param offset_payment: The offset_payment of this HolidayScheme1.
        :type offset_payment: bool
        """

        self._offset_payment = offset_payment

    @property
    def revision(self):
        """Gets the revision of this HolidayScheme1.

        The holiday schemes' revision

        :return: The revision of this HolidayScheme1.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this HolidayScheme1.

        The holiday schemes' revision

        :param revision: The revision of this HolidayScheme1.
        :type revision: int
        """

        self._revision = revision

    @property
    def scheme_ceased_date(self):
        """Gets the scheme_ceased_date of this HolidayScheme1.

        The holiday schemes' scheme ceased date

        :return: The scheme_ceased_date of this HolidayScheme1.
        :rtype: date
        """
        return self._scheme_ceased_date

    @scheme_ceased_date.setter
    def scheme_ceased_date(self, scheme_ceased_date):
        """Sets the scheme_ceased_date of this HolidayScheme1.

        The holiday schemes' scheme ceased date

        :param scheme_ceased_date: The scheme_ceased_date of this HolidayScheme1.
        :type scheme_ceased_date: date
        """

        self._scheme_ceased_date = scheme_ceased_date

    @property
    def scheme_key(self):
        """Gets the scheme_key of this HolidayScheme1.

        The holiday schemes' scheme key

        :return: The scheme_key of this HolidayScheme1.
        :rtype: str
        """
        return self._scheme_key

    @scheme_key.setter
    def scheme_key(self, scheme_key):
        """Sets the scheme_key of this HolidayScheme1.

        The holiday schemes' scheme key

        :param scheme_key: The scheme_key of this HolidayScheme1.
        :type scheme_key: str
        """

        self._scheme_key = scheme_key

    @property
    def scheme_name(self):
        """Gets the scheme_name of this HolidayScheme1.

        The holiday schemes' scheme name

        :return: The scheme_name of this HolidayScheme1.
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this HolidayScheme1.

        The holiday schemes' scheme name

        :param scheme_name: The scheme_name of this HolidayScheme1.
        :type scheme_name: str
        """

        self._scheme_name = scheme_name

    @property
    def year_start_day(self):
        """Gets the year_start_day of this HolidayScheme1.

        The holiday schemes' year start day

        :return: The year_start_day of this HolidayScheme1.
        :rtype: int
        """
        return self._year_start_day

    @year_start_day.setter
    def year_start_day(self, year_start_day):
        """Sets the year_start_day of this HolidayScheme1.

        The holiday schemes' year start day

        :param year_start_day: The year_start_day of this HolidayScheme1.
        :type year_start_day: int
        """

        self._year_start_day = year_start_day

    @property
    def year_start_month(self):
        """Gets the year_start_month of this HolidayScheme1.

        The holiday schemes' year start month

        :return: The year_start_month of this HolidayScheme1.
        :rtype: int
        """
        return self._year_start_month

    @year_start_month.setter
    def year_start_month(self, year_start_month):
        """Sets the year_start_month of this HolidayScheme1.

        The holiday schemes' year start month

        :param year_start_month: The year_start_month of this HolidayScheme1.
        :type year_start_month: int
        """

        self._year_start_month = year_start_month
