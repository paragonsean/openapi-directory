# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.nominal_code1 import NominalCode1
from openapi_server import util


class CisLineType1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, line_type: str=None, nominal_code: NominalCode1=None, tax_treatment: str=None):
        """CisLineType1 - a model defined in OpenAPI

        :param description: The description of this CisLineType1.
        :param line_type: The line_type of this CisLineType1.
        :param nominal_code: The nominal_code of this CisLineType1.
        :param tax_treatment: The tax_treatment of this CisLineType1.
        """
        self.openapi_types = {
            'description': str,
            'line_type': str,
            'nominal_code': NominalCode1,
            'tax_treatment': str
        }

        self.attribute_map = {
            'description': 'Description',
            'line_type': 'LineType',
            'nominal_code': 'NominalCode',
            'tax_treatment': 'TaxTreatment'
        }

        self._description = description
        self._line_type = line_type
        self._nominal_code = nominal_code
        self._tax_treatment = tax_treatment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CisLineType1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CisLineType_1 of this CisLineType1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this CisLineType1.

        The cis line types' description

        :return: The description of this CisLineType1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CisLineType1.

        The cis line types' description

        :param description: The description of this CisLineType1.
        :type description: str
        """

        self._description = description

    @property
    def line_type(self):
        """Gets the line_type of this CisLineType1.

        The cis line types' line type

        :return: The line_type of this CisLineType1.
        :rtype: str
        """
        return self._line_type

    @line_type.setter
    def line_type(self, line_type):
        """Sets the line_type of this CisLineType1.

        The cis line types' line type

        :param line_type: The line_type of this CisLineType1.
        :type line_type: str
        """

        self._line_type = line_type

    @property
    def nominal_code(self):
        """Gets the nominal_code of this CisLineType1.


        :return: The nominal_code of this CisLineType1.
        :rtype: NominalCode1
        """
        return self._nominal_code

    @nominal_code.setter
    def nominal_code(self, nominal_code):
        """Sets the nominal_code of this CisLineType1.


        :param nominal_code: The nominal_code of this CisLineType1.
        :type nominal_code: NominalCode1
        """

        self._nominal_code = nominal_code

    @property
    def tax_treatment(self):
        """Gets the tax_treatment of this CisLineType1.

        The cis line types' tax treatment

        :return: The tax_treatment of this CisLineType1.
        :rtype: str
        """
        return self._tax_treatment

    @tax_treatment.setter
    def tax_treatment(self, tax_treatment):
        """Sets the tax_treatment of this CisLineType1.

        The cis line types' tax treatment

        :param tax_treatment: The tax_treatment of this CisLineType1.
        :type tax_treatment: str
        """
        allowed_values = ["Taxable", "NonTaxable", "Notional", "Materials"]  # noqa: E501
        if tax_treatment not in allowed_values:
            raise ValueError(
                "Invalid value for `tax_treatment` ({0}), must be one of {1}"
                .format(tax_treatment, allowed_values)
            )

        self._tax_treatment = tax_treatment
