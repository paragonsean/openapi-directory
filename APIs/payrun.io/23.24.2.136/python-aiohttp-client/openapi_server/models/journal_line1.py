# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.employee3 import Employee3
from openapi_server.models.pay_run2 import PayRun2
from openapi_server.models.sub_contractor2 import SubContractor2
from openapi_server import util


class JournalLine1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credit: float=None, debit: float=None, description: str=None, employee: Employee3=None, generated: datetime=None, grouping: str=None, ledger_target: str=None, nom_code: str=None, pay_frequency: str=None, pay_run: PayRun2=None, sub_contractor: SubContractor2=None, sub_nom_code: str=None, tax_period: int=None, tax_year: int=None):
        """JournalLine1 - a model defined in OpenAPI

        :param credit: The credit of this JournalLine1.
        :param debit: The debit of this JournalLine1.
        :param description: The description of this JournalLine1.
        :param employee: The employee of this JournalLine1.
        :param generated: The generated of this JournalLine1.
        :param grouping: The grouping of this JournalLine1.
        :param ledger_target: The ledger_target of this JournalLine1.
        :param nom_code: The nom_code of this JournalLine1.
        :param pay_frequency: The pay_frequency of this JournalLine1.
        :param pay_run: The pay_run of this JournalLine1.
        :param sub_contractor: The sub_contractor of this JournalLine1.
        :param sub_nom_code: The sub_nom_code of this JournalLine1.
        :param tax_period: The tax_period of this JournalLine1.
        :param tax_year: The tax_year of this JournalLine1.
        """
        self.openapi_types = {
            'credit': float,
            'debit': float,
            'description': str,
            'employee': Employee3,
            'generated': datetime,
            'grouping': str,
            'ledger_target': str,
            'nom_code': str,
            'pay_frequency': str,
            'pay_run': PayRun2,
            'sub_contractor': SubContractor2,
            'sub_nom_code': str,
            'tax_period': int,
            'tax_year': int
        }

        self.attribute_map = {
            'credit': 'Credit',
            'debit': 'Debit',
            'description': 'Description',
            'employee': 'Employee',
            'generated': 'Generated',
            'grouping': 'Grouping',
            'ledger_target': 'LedgerTarget',
            'nom_code': 'NomCode',
            'pay_frequency': 'PayFrequency',
            'pay_run': 'PayRun',
            'sub_contractor': 'SubContractor',
            'sub_nom_code': 'SubNomCode',
            'tax_period': 'TaxPeriod',
            'tax_year': 'TaxYear'
        }

        self._credit = credit
        self._debit = debit
        self._description = description
        self._employee = employee
        self._generated = generated
        self._grouping = grouping
        self._ledger_target = ledger_target
        self._nom_code = nom_code
        self._pay_frequency = pay_frequency
        self._pay_run = pay_run
        self._sub_contractor = sub_contractor
        self._sub_nom_code = sub_nom_code
        self._tax_period = tax_period
        self._tax_year = tax_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JournalLine1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JournalLine_1 of this JournalLine1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credit(self):
        """Gets the credit of this JournalLine1.

        The journal lines' credit

        :return: The credit of this JournalLine1.
        :rtype: float
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this JournalLine1.

        The journal lines' credit

        :param credit: The credit of this JournalLine1.
        :type credit: float
        """

        self._credit = credit

    @property
    def debit(self):
        """Gets the debit of this JournalLine1.

        The journal lines' debit

        :return: The debit of this JournalLine1.
        :rtype: float
        """
        return self._debit

    @debit.setter
    def debit(self, debit):
        """Sets the debit of this JournalLine1.

        The journal lines' debit

        :param debit: The debit of this JournalLine1.
        :type debit: float
        """

        self._debit = debit

    @property
    def description(self):
        """Gets the description of this JournalLine1.

        The journal lines' description

        :return: The description of this JournalLine1.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JournalLine1.

        The journal lines' description

        :param description: The description of this JournalLine1.
        :type description: str
        """

        self._description = description

    @property
    def employee(self):
        """Gets the employee of this JournalLine1.


        :return: The employee of this JournalLine1.
        :rtype: Employee3
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this JournalLine1.


        :param employee: The employee of this JournalLine1.
        :type employee: Employee3
        """

        self._employee = employee

    @property
    def generated(self):
        """Gets the generated of this JournalLine1.

        The journal lines' generated

        :return: The generated of this JournalLine1.
        :rtype: datetime
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this JournalLine1.

        The journal lines' generated

        :param generated: The generated of this JournalLine1.
        :type generated: datetime
        """

        self._generated = generated

    @property
    def grouping(self):
        """Gets the grouping of this JournalLine1.

        The journal lines' grouping

        :return: The grouping of this JournalLine1.
        :rtype: str
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this JournalLine1.

        The journal lines' grouping

        :param grouping: The grouping of this JournalLine1.
        :type grouping: str
        """

        self._grouping = grouping

    @property
    def ledger_target(self):
        """Gets the ledger_target of this JournalLine1.

        The journal lines' ledger target

        :return: The ledger_target of this JournalLine1.
        :rtype: str
        """
        return self._ledger_target

    @ledger_target.setter
    def ledger_target(self, ledger_target):
        """Sets the ledger_target of this JournalLine1.

        The journal lines' ledger target

        :param ledger_target: The ledger_target of this JournalLine1.
        :type ledger_target: str
        """

        self._ledger_target = ledger_target

    @property
    def nom_code(self):
        """Gets the nom_code of this JournalLine1.

        The journal lines' nom code

        :return: The nom_code of this JournalLine1.
        :rtype: str
        """
        return self._nom_code

    @nom_code.setter
    def nom_code(self, nom_code):
        """Sets the nom_code of this JournalLine1.

        The journal lines' nom code

        :param nom_code: The nom_code of this JournalLine1.
        :type nom_code: str
        """

        self._nom_code = nom_code

    @property
    def pay_frequency(self):
        """Gets the pay_frequency of this JournalLine1.

        The journal lines' pay frequency

        :return: The pay_frequency of this JournalLine1.
        :rtype: str
        """
        return self._pay_frequency

    @pay_frequency.setter
    def pay_frequency(self, pay_frequency):
        """Sets the pay_frequency of this JournalLine1.

        The journal lines' pay frequency

        :param pay_frequency: The pay_frequency of this JournalLine1.
        :type pay_frequency: str
        """
        allowed_values = ["Weekly", "Monthly", "TwoWeekly", "FourWeekly", "Yearly"]  # noqa: E501
        if pay_frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `pay_frequency` ({0}), must be one of {1}"
                .format(pay_frequency, allowed_values)
            )

        self._pay_frequency = pay_frequency

    @property
    def pay_run(self):
        """Gets the pay_run of this JournalLine1.


        :return: The pay_run of this JournalLine1.
        :rtype: PayRun2
        """
        return self._pay_run

    @pay_run.setter
    def pay_run(self, pay_run):
        """Sets the pay_run of this JournalLine1.


        :param pay_run: The pay_run of this JournalLine1.
        :type pay_run: PayRun2
        """

        self._pay_run = pay_run

    @property
    def sub_contractor(self):
        """Gets the sub_contractor of this JournalLine1.


        :return: The sub_contractor of this JournalLine1.
        :rtype: SubContractor2
        """
        return self._sub_contractor

    @sub_contractor.setter
    def sub_contractor(self, sub_contractor):
        """Sets the sub_contractor of this JournalLine1.


        :param sub_contractor: The sub_contractor of this JournalLine1.
        :type sub_contractor: SubContractor2
        """

        self._sub_contractor = sub_contractor

    @property
    def sub_nom_code(self):
        """Gets the sub_nom_code of this JournalLine1.

        The journal lines' sub nom code

        :return: The sub_nom_code of this JournalLine1.
        :rtype: str
        """
        return self._sub_nom_code

    @sub_nom_code.setter
    def sub_nom_code(self, sub_nom_code):
        """Sets the sub_nom_code of this JournalLine1.

        The journal lines' sub nom code

        :param sub_nom_code: The sub_nom_code of this JournalLine1.
        :type sub_nom_code: str
        """

        self._sub_nom_code = sub_nom_code

    @property
    def tax_period(self):
        """Gets the tax_period of this JournalLine1.

        The journal lines' tax period

        :return: The tax_period of this JournalLine1.
        :rtype: int
        """
        return self._tax_period

    @tax_period.setter
    def tax_period(self, tax_period):
        """Sets the tax_period of this JournalLine1.

        The journal lines' tax period

        :param tax_period: The tax_period of this JournalLine1.
        :type tax_period: int
        """

        self._tax_period = tax_period

    @property
    def tax_year(self):
        """Gets the tax_year of this JournalLine1.

        The journal lines' tax year

        :return: The tax_year of this JournalLine1.
        :rtype: int
        """
        return self._tax_year

    @tax_year.setter
    def tax_year(self, tax_year):
        """Sets the tax_year of this JournalLine1.

        The journal lines' tax year

        :param tax_year: The tax_year of this JournalLine1.
        :type tax_year: int
        """

        self._tax_year = tax_year
