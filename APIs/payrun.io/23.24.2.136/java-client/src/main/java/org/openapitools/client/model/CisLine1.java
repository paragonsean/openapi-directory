/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CisLine1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CisLine1 {
  public static final String SERIALIZED_NAME_CIS_DEDUCTION = "CisDeduction";
  @SerializedName(SERIALIZED_NAME_CIS_DEDUCTION)
  private Double cisDeduction;

  public static final String SERIALIZED_NAME_CIS_LINE_TYPE = "CisLineType";
  @SerializedName(SERIALIZED_NAME_CIS_LINE_TYPE)
  private String cisLineType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GENERATED = "Generated";
  @SerializedName(SERIALIZED_NAME_GENERATED)
  private OffsetDateTime generated;

  public static final String SERIALIZED_NAME_GROSS_PAY = "GrossPay";
  @SerializedName(SERIALIZED_NAME_GROSS_PAY)
  private Double grossPay;

  public static final String SERIALIZED_NAME_NOMINAL_CODE_KEY = "NominalCodeKey";
  @SerializedName(SERIALIZED_NAME_NOMINAL_CODE_KEY)
  private String nominalCodeKey;

  /**
   * The cis lines&#39; pay frequency
   */
  @JsonAdapter(PayFrequencyEnum.Adapter.class)
  public enum PayFrequencyEnum {
    MONTHLY("Monthly"),
    
    WEEKLY("Weekly");

    private String value;

    PayFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayFrequencyEnum fromValue(String value) {
      for (PayFrequencyEnum b : PayFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private PayFrequencyEnum payFrequency;

  public static final String SERIALIZED_NAME_TAX_MONTH = "TaxMonth";
  @SerializedName(SERIALIZED_NAME_TAX_MONTH)
  private Integer taxMonth;

  public static final String SERIALIZED_NAME_TAX_PERIOD = "TaxPeriod";
  @SerializedName(SERIALIZED_NAME_TAX_PERIOD)
  private Integer taxPeriod;

  /**
   * The cis lines&#39; tax treatment
   */
  @JsonAdapter(TaxTreatmentEnum.Adapter.class)
  public enum TaxTreatmentEnum {
    TAXABLE("Taxable"),
    
    NON_TAXABLE("NonTaxable"),
    
    NOTIONAL("Notional"),
    
    MATERIALS("Materials");

    private String value;

    TaxTreatmentEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxTreatmentEnum fromValue(String value) {
      for (TaxTreatmentEnum b : TaxTreatmentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxTreatmentEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxTreatmentEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxTreatmentEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxTreatmentEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxTreatmentEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_TREATMENT = "TaxTreatment";
  @SerializedName(SERIALIZED_NAME_TAX_TREATMENT)
  private TaxTreatmentEnum taxTreatment;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  /**
   * The cis lines&#39; u o m
   */
  @JsonAdapter(UOMEnum.Adapter.class)
  public enum UOMEnum {
    NOT_SET("NotSet"),
    
    MINUTE("Minute"),
    
    HOUR("Hour"),
    
    DAY("Day"),
    
    WEEK("Week"),
    
    MONTH("Month"),
    
    YEAR("Year"),
    
    UNIT("Unit");

    private String value;

    UOMEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UOMEnum fromValue(String value) {
      for (UOMEnum b : UOMEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UOMEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UOMEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UOMEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UOMEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UOMEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_U_O_M = "UOM";
  @SerializedName(SERIALIZED_NAME_U_O_M)
  private UOMEnum UOM;

  public static final String SERIALIZED_NAME_UNIT_RATE = "UnitRate";
  @SerializedName(SERIALIZED_NAME_UNIT_RATE)
  private Double unitRate;

  public static final String SERIALIZED_NAME_UNITS = "Units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private Double units;

  public static final String SERIALIZED_NAME_V_A_T = "VAT";
  @SerializedName(SERIALIZED_NAME_V_A_T)
  private Double VAT;

  public CisLine1() {
  }

  public CisLine1 cisDeduction(Double cisDeduction) {
    this.cisDeduction = cisDeduction;
    return this;
  }

  /**
   * The cis lines&#39; cis deduction
   * @return cisDeduction
   */
  @javax.annotation.Nullable
  public Double getCisDeduction() {
    return cisDeduction;
  }

  public void setCisDeduction(Double cisDeduction) {
    this.cisDeduction = cisDeduction;
  }


  public CisLine1 cisLineType(String cisLineType) {
    this.cisLineType = cisLineType;
    return this;
  }

  /**
   * The cis lines&#39; cis line type
   * @return cisLineType
   */
  @javax.annotation.Nullable
  public String getCisLineType() {
    return cisLineType;
  }

  public void setCisLineType(String cisLineType) {
    this.cisLineType = cisLineType;
  }


  public CisLine1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The cis lines&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CisLine1 generated(OffsetDateTime generated) {
    this.generated = generated;
    return this;
  }

  /**
   * The cis lines&#39; generated
   * @return generated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGenerated() {
    return generated;
  }

  public void setGenerated(OffsetDateTime generated) {
    this.generated = generated;
  }


  public CisLine1 grossPay(Double grossPay) {
    this.grossPay = grossPay;
    return this;
  }

  /**
   * The cis lines&#39; gross pay
   * @return grossPay
   */
  @javax.annotation.Nullable
  public Double getGrossPay() {
    return grossPay;
  }

  public void setGrossPay(Double grossPay) {
    this.grossPay = grossPay;
  }


  public CisLine1 nominalCodeKey(String nominalCodeKey) {
    this.nominalCodeKey = nominalCodeKey;
    return this;
  }

  /**
   * The cis lines&#39; nominal code key
   * @return nominalCodeKey
   */
  @javax.annotation.Nullable
  public String getNominalCodeKey() {
    return nominalCodeKey;
  }

  public void setNominalCodeKey(String nominalCodeKey) {
    this.nominalCodeKey = nominalCodeKey;
  }


  public CisLine1 payFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
    return this;
  }

  /**
   * The cis lines&#39; pay frequency
   * @return payFrequency
   */
  @javax.annotation.Nullable
  public PayFrequencyEnum getPayFrequency() {
    return payFrequency;
  }

  public void setPayFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
  }


  public CisLine1 taxMonth(Integer taxMonth) {
    this.taxMonth = taxMonth;
    return this;
  }

  /**
   * The cis lines&#39; tax month
   * @return taxMonth
   */
  @javax.annotation.Nullable
  public Integer getTaxMonth() {
    return taxMonth;
  }

  public void setTaxMonth(Integer taxMonth) {
    this.taxMonth = taxMonth;
  }


  public CisLine1 taxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
    return this;
  }

  /**
   * The cis lines&#39; tax period
   * @return taxPeriod
   */
  @javax.annotation.Nullable
  public Integer getTaxPeriod() {
    return taxPeriod;
  }

  public void setTaxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
  }


  public CisLine1 taxTreatment(TaxTreatmentEnum taxTreatment) {
    this.taxTreatment = taxTreatment;
    return this;
  }

  /**
   * The cis lines&#39; tax treatment
   * @return taxTreatment
   */
  @javax.annotation.Nullable
  public TaxTreatmentEnum getTaxTreatment() {
    return taxTreatment;
  }

  public void setTaxTreatment(TaxTreatmentEnum taxTreatment) {
    this.taxTreatment = taxTreatment;
  }


  public CisLine1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The cis lines&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }


  public CisLine1 UOM(UOMEnum UOM) {
    this.UOM = UOM;
    return this;
  }

  /**
   * The cis lines&#39; u o m
   * @return UOM
   */
  @javax.annotation.Nullable
  public UOMEnum getUOM() {
    return UOM;
  }

  public void setUOM(UOMEnum UOM) {
    this.UOM = UOM;
  }


  public CisLine1 unitRate(Double unitRate) {
    this.unitRate = unitRate;
    return this;
  }

  /**
   * The cis lines&#39; unit rate
   * @return unitRate
   */
  @javax.annotation.Nullable
  public Double getUnitRate() {
    return unitRate;
  }

  public void setUnitRate(Double unitRate) {
    this.unitRate = unitRate;
  }


  public CisLine1 units(Double units) {
    this.units = units;
    return this;
  }

  /**
   * The cis lines&#39; units
   * @return units
   */
  @javax.annotation.Nullable
  public Double getUnits() {
    return units;
  }

  public void setUnits(Double units) {
    this.units = units;
  }


  public CisLine1 VAT(Double VAT) {
    this.VAT = VAT;
    return this;
  }

  /**
   * The cis lines&#39; v a t
   * @return VAT
   */
  @javax.annotation.Nullable
  public Double getVAT() {
    return VAT;
  }

  public void setVAT(Double VAT) {
    this.VAT = VAT;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CisLine1 cisLine1 = (CisLine1) o;
    return Objects.equals(this.cisDeduction, cisLine1.cisDeduction) &&
        Objects.equals(this.cisLineType, cisLine1.cisLineType) &&
        Objects.equals(this.description, cisLine1.description) &&
        Objects.equals(this.generated, cisLine1.generated) &&
        Objects.equals(this.grossPay, cisLine1.grossPay) &&
        Objects.equals(this.nominalCodeKey, cisLine1.nominalCodeKey) &&
        Objects.equals(this.payFrequency, cisLine1.payFrequency) &&
        Objects.equals(this.taxMonth, cisLine1.taxMonth) &&
        Objects.equals(this.taxPeriod, cisLine1.taxPeriod) &&
        Objects.equals(this.taxTreatment, cisLine1.taxTreatment) &&
        Objects.equals(this.taxYear, cisLine1.taxYear) &&
        Objects.equals(this.UOM, cisLine1.UOM) &&
        Objects.equals(this.unitRate, cisLine1.unitRate) &&
        Objects.equals(this.units, cisLine1.units) &&
        Objects.equals(this.VAT, cisLine1.VAT);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cisDeduction, cisLineType, description, generated, grossPay, nominalCodeKey, payFrequency, taxMonth, taxPeriod, taxTreatment, taxYear, UOM, unitRate, units, VAT);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CisLine1 {\n");
    sb.append("    cisDeduction: ").append(toIndentedString(cisDeduction)).append("\n");
    sb.append("    cisLineType: ").append(toIndentedString(cisLineType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    generated: ").append(toIndentedString(generated)).append("\n");
    sb.append("    grossPay: ").append(toIndentedString(grossPay)).append("\n");
    sb.append("    nominalCodeKey: ").append(toIndentedString(nominalCodeKey)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    taxMonth: ").append(toIndentedString(taxMonth)).append("\n");
    sb.append("    taxPeriod: ").append(toIndentedString(taxPeriod)).append("\n");
    sb.append("    taxTreatment: ").append(toIndentedString(taxTreatment)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    UOM: ").append(toIndentedString(UOM)).append("\n");
    sb.append("    unitRate: ").append(toIndentedString(unitRate)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    VAT: ").append(toIndentedString(VAT)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CisDeduction");
    openapiFields.add("CisLineType");
    openapiFields.add("Description");
    openapiFields.add("Generated");
    openapiFields.add("GrossPay");
    openapiFields.add("NominalCodeKey");
    openapiFields.add("PayFrequency");
    openapiFields.add("TaxMonth");
    openapiFields.add("TaxPeriod");
    openapiFields.add("TaxTreatment");
    openapiFields.add("TaxYear");
    openapiFields.add("UOM");
    openapiFields.add("UnitRate");
    openapiFields.add("Units");
    openapiFields.add("VAT");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CisLine1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CisLine1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CisLine1 is not found in the empty JSON string", CisLine1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CisLine1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CisLine1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CisLineType") != null && !jsonObj.get("CisLineType").isJsonNull()) && !jsonObj.get("CisLineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CisLineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CisLineType").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("NominalCodeKey") != null && !jsonObj.get("NominalCodeKey").isJsonNull()) && !jsonObj.get("NominalCodeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NominalCodeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NominalCodeKey").toString()));
      }
      if ((jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      // validate the optional field `PayFrequency`
      if (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) {
        PayFrequencyEnum.validateJsonElement(jsonObj.get("PayFrequency"));
      }
      if ((jsonObj.get("TaxTreatment") != null && !jsonObj.get("TaxTreatment").isJsonNull()) && !jsonObj.get("TaxTreatment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxTreatment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxTreatment").toString()));
      }
      // validate the optional field `TaxTreatment`
      if (jsonObj.get("TaxTreatment") != null && !jsonObj.get("TaxTreatment").isJsonNull()) {
        TaxTreatmentEnum.validateJsonElement(jsonObj.get("TaxTreatment"));
      }
      if ((jsonObj.get("UOM") != null && !jsonObj.get("UOM").isJsonNull()) && !jsonObj.get("UOM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UOM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UOM").toString()));
      }
      // validate the optional field `UOM`
      if (jsonObj.get("UOM") != null && !jsonObj.get("UOM").isJsonNull()) {
        UOMEnum.validateJsonElement(jsonObj.get("UOM"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CisLine1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CisLine1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CisLine1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CisLine1.class));

       return (TypeAdapter<T>) new TypeAdapter<CisLine1>() {
           @Override
           public void write(JsonWriter out, CisLine1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CisLine1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CisLine1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CisLine1
   * @throws IOException if the JSON string is invalid with respect to CisLine1
   */
  public static CisLine1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CisLine1.class);
  }

  /**
   * Convert an instance of CisLine1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

