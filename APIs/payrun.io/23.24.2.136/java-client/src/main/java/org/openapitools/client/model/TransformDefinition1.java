/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransformDefinition1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransformDefinition1 {
  public static final String SERIALIZED_NAME_ACTIVE = "Active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "ContentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_DEFINITION = "Definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_DEFINITION_TYPE = "DefinitionType";
  @SerializedName(SERIALIZED_NAME_DEFINITION_TYPE)
  private String definitionType;

  public static final String SERIALIZED_NAME_READONLY = "Readonly";
  @SerializedName(SERIALIZED_NAME_READONLY)
  private Boolean readonly;

  public static final String SERIALIZED_NAME_SUPPORTED_REPORTS = "SupportedReports";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_REPORTS)
  private String supportedReports;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public TransformDefinition1() {
  }

  public TransformDefinition1 active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * The transform definitions&#39; active
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public TransformDefinition1 contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The transform definitions&#39; content type
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public TransformDefinition1 definition(String definition) {
    this.definition = definition;
    return this;
  }

  /**
   * The transform definitions&#39; definition
   * @return definition
   */
  @javax.annotation.Nullable
  public String getDefinition() {
    return definition;
  }

  public void setDefinition(String definition) {
    this.definition = definition;
  }


  public TransformDefinition1 definitionType(String definitionType) {
    this.definitionType = definitionType;
    return this;
  }

  /**
   * The transform definitions&#39; definition type
   * @return definitionType
   */
  @javax.annotation.Nullable
  public String getDefinitionType() {
    return definitionType;
  }

  public void setDefinitionType(String definitionType) {
    this.definitionType = definitionType;
  }


  public TransformDefinition1 readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

  /**
   * The transform definitions&#39; readonly
   * @return readonly
   */
  @javax.annotation.Nullable
  public Boolean getReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }


  public TransformDefinition1 supportedReports(String supportedReports) {
    this.supportedReports = supportedReports;
    return this;
  }

  /**
   * The transform definitions&#39; supported reports
   * @return supportedReports
   */
  @javax.annotation.Nullable
  public String getSupportedReports() {
    return supportedReports;
  }

  public void setSupportedReports(String supportedReports) {
    this.supportedReports = supportedReports;
  }


  public TransformDefinition1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The transform definitions&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }


  public TransformDefinition1 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The transform definitions&#39; title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TransformDefinition1 version(String version) {
    this.version = version;
    return this;
  }

  /**
   * The transform definitions&#39; version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransformDefinition1 transformDefinition1 = (TransformDefinition1) o;
    return Objects.equals(this.active, transformDefinition1.active) &&
        Objects.equals(this.contentType, transformDefinition1.contentType) &&
        Objects.equals(this.definition, transformDefinition1.definition) &&
        Objects.equals(this.definitionType, transformDefinition1.definitionType) &&
        Objects.equals(this.readonly, transformDefinition1.readonly) &&
        Objects.equals(this.supportedReports, transformDefinition1.supportedReports) &&
        Objects.equals(this.taxYear, transformDefinition1.taxYear) &&
        Objects.equals(this.title, transformDefinition1.title) &&
        Objects.equals(this.version, transformDefinition1.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, contentType, definition, definitionType, readonly, supportedReports, taxYear, title, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransformDefinition1 {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    definitionType: ").append(toIndentedString(definitionType)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    supportedReports: ").append(toIndentedString(supportedReports)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Active");
    openapiFields.add("ContentType");
    openapiFields.add("Definition");
    openapiFields.add("DefinitionType");
    openapiFields.add("Readonly");
    openapiFields.add("SupportedReports");
    openapiFields.add("TaxYear");
    openapiFields.add("Title");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransformDefinition1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransformDefinition1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransformDefinition1 is not found in the empty JSON string", TransformDefinition1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransformDefinition1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransformDefinition1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ContentType") != null && !jsonObj.get("ContentType").isJsonNull()) && !jsonObj.get("ContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentType").toString()));
      }
      if ((jsonObj.get("Definition") != null && !jsonObj.get("Definition").isJsonNull()) && !jsonObj.get("Definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Definition").toString()));
      }
      if ((jsonObj.get("DefinitionType") != null && !jsonObj.get("DefinitionType").isJsonNull()) && !jsonObj.get("DefinitionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefinitionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefinitionType").toString()));
      }
      if ((jsonObj.get("SupportedReports") != null && !jsonObj.get("SupportedReports").isJsonNull()) && !jsonObj.get("SupportedReports").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedReports` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SupportedReports").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransformDefinition1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransformDefinition1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransformDefinition1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransformDefinition1.class));

       return (TypeAdapter<T>) new TypeAdapter<TransformDefinition1>() {
           @Override
           public void write(JsonWriter out, TransformDefinition1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransformDefinition1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransformDefinition1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransformDefinition1
   * @throws IOException if the JSON string is invalid with respect to TransformDefinition1
   */
  public static TransformDefinition1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransformDefinition1.class);
  }

  /**
   * Convert an instance of TransformDefinition1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

