/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Address1;
import org.openapitools.client.model.AutoEnrolment;
import org.openapitools.client.model.BankAccount1;
import org.openapitools.client.model.HmrcSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Employer3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Employer3 {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address1 address;

  public static final String SERIALIZED_NAME_APPRENTICESHIP_LEVY_ALLOWANCE = "ApprenticeshipLevyAllowance";
  @SerializedName(SERIALIZED_NAME_APPRENTICESHIP_LEVY_ALLOWANCE)
  private Double apprenticeshipLevyAllowance;

  public static final String SERIALIZED_NAME_AUTO_ENROLMENT = "AutoEnrolment";
  @SerializedName(SERIALIZED_NAME_AUTO_ENROLMENT)
  private AutoEnrolment autoEnrolment;

  public static final String SERIALIZED_NAME_BACS_SERVICE_USER_NUMBER = "BacsServiceUserNumber";
  @SerializedName(SERIALIZED_NAME_BACS_SERVICE_USER_NUMBER)
  private String bacsServiceUserNumber;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "BankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private BankAccount1 bankAccount;

  public static final String SERIALIZED_NAME_CALCULATE_APPRENTICESHIP_LEVY = "CalculateApprenticeshipLevy";
  @SerializedName(SERIALIZED_NAME_CALCULATE_APPRENTICESHIP_LEVY)
  private Boolean calculateApprenticeshipLevy;

  public static final String SERIALIZED_NAME_CLAIM_EMPLOYMENT_ALLOWANCE = "ClaimEmploymentAllowance";
  @SerializedName(SERIALIZED_NAME_CLAIM_EMPLOYMENT_ALLOWANCE)
  private Boolean claimEmploymentAllowance;

  public static final String SERIALIZED_NAME_CLAIM_SMALL_EMPLOYER_RELIEF = "ClaimSmallEmployerRelief";
  @SerializedName(SERIALIZED_NAME_CLAIM_SMALL_EMPLOYER_RELIEF)
  private Boolean claimSmallEmployerRelief;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_HMRC_SETTINGS = "HmrcSettings";
  @SerializedName(SERIALIZED_NAME_HMRC_SETTINGS)
  private HmrcSettings hmrcSettings;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  /**
   * The employers&#39; region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    NOT_SET("NotSet"),
    
    ENGLAND("England"),
    
    SCOTLAND("Scotland"),
    
    WALES("Wales");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  /**
   * The employers&#39; rule exclusions
   */
  @JsonAdapter(RuleExclusionsEnum.Adapter.class)
  public enum RuleExclusionsEnum {
    NONE("None"),
    
    NI_MISSING_PAY_INSTRUCTION_RULE("NiMissingPayInstructionRule"),
    
    TAX_MISSING_PAY_INSTRUCTION_RULE("TaxMissingPayInstructionRule"),
    
    TAX_CODE_UPLIFT_RULE("TaxCodeUpliftRule"),
    
    NI_SET_EXPECTED_LETTER_RULE("NiSetExpectedLetterRule"),
    
    NI_DATE_OF_BIRTH_CHANGE_RETROSPECTIVE_C_RULE("NiDateOfBirthChangeRetrospectiveCRule"),
    
    NI_DEFERMENT_STATUS_CHANGE_RULE("NiDefermentStatusChangeRule"),
    
    NI_END_CONTRACTED_OUT_TRANSFER_RULE("NiEndContractedOutTransferRule"),
    
    PAYMENT_AFTER_LEAVING_TAX_CODE_RULE("PaymentAfterLeavingTaxCodeRule"),
    
    LEAVER_END_INSTRUCTIONS_RULE("LeaverEndInstructionsRule"),
    
    P45_STUDENT_LOAN_INSTRUCTION_RULE("P45StudentLoanInstructionRule"),
    
    P45_TAX_INSTRUCTION_RULE("P45TaxInstructionRule"),
    
    P45_YTD_TAX_RULE("P45YtdTaxRule"),
    
    YTD_INSTRUCTION_RULE("YtdInstructionRule"),
    
    TAX_CODE_REGION_CHANGE_RULE("TaxCodeRegionChangeRule"),
    
    AUTO_ENROLMENT_STATUS_CHANGE_RULE("AutoEnrolmentStatusChangeRule"),
    
    EMPLOYEE_DECEASED_RULE("EmployeeDeceasedRule"),
    
    BENEFIT_INSTRUCTION_AUTO_END_RULE("BenefitInstructionAutoEndRule");

    private String value;

    RuleExclusionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleExclusionsEnum fromValue(String value) {
      for (RuleExclusionsEnum b : RuleExclusionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleExclusionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleExclusionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleExclusionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleExclusionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleExclusionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_EXCLUSIONS = "RuleExclusions";
  @SerializedName(SERIALIZED_NAME_RULE_EXCLUSIONS)
  private RuleExclusionsEnum ruleExclusions;

  /**
   * The employers&#39; territory
   */
  @JsonAdapter(TerritoryEnum.Adapter.class)
  public enum TerritoryEnum {
    UNITED_KINGDOM("UnitedKingdom");

    private String value;

    TerritoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerritoryEnum fromValue(String value) {
      for (TerritoryEnum b : TerritoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TerritoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerritoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerritoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TerritoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TerritoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERRITORY = "Territory";
  @SerializedName(SERIALIZED_NAME_TERRITORY)
  private TerritoryEnum territory;

  public Employer3() {
  }

  public Employer3 address(Address1 address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address1 getAddress() {
    return address;
  }

  public void setAddress(Address1 address) {
    this.address = address;
  }


  public Employer3 apprenticeshipLevyAllowance(Double apprenticeshipLevyAllowance) {
    this.apprenticeshipLevyAllowance = apprenticeshipLevyAllowance;
    return this;
  }

  /**
   * The employers&#39; apprenticeship levy allowance
   * @return apprenticeshipLevyAllowance
   */
  @javax.annotation.Nullable
  public Double getApprenticeshipLevyAllowance() {
    return apprenticeshipLevyAllowance;
  }

  public void setApprenticeshipLevyAllowance(Double apprenticeshipLevyAllowance) {
    this.apprenticeshipLevyAllowance = apprenticeshipLevyAllowance;
  }


  public Employer3 autoEnrolment(AutoEnrolment autoEnrolment) {
    this.autoEnrolment = autoEnrolment;
    return this;
  }

  /**
   * Get autoEnrolment
   * @return autoEnrolment
   */
  @javax.annotation.Nullable
  public AutoEnrolment getAutoEnrolment() {
    return autoEnrolment;
  }

  public void setAutoEnrolment(AutoEnrolment autoEnrolment) {
    this.autoEnrolment = autoEnrolment;
  }


  public Employer3 bacsServiceUserNumber(String bacsServiceUserNumber) {
    this.bacsServiceUserNumber = bacsServiceUserNumber;
    return this;
  }

  /**
   * The employers&#39; bacs service user number
   * @return bacsServiceUserNumber
   */
  @javax.annotation.Nullable
  public String getBacsServiceUserNumber() {
    return bacsServiceUserNumber;
  }

  public void setBacsServiceUserNumber(String bacsServiceUserNumber) {
    this.bacsServiceUserNumber = bacsServiceUserNumber;
  }


  public Employer3 bankAccount(BankAccount1 bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  /**
   * Get bankAccount
   * @return bankAccount
   */
  @javax.annotation.Nullable
  public BankAccount1 getBankAccount() {
    return bankAccount;
  }

  public void setBankAccount(BankAccount1 bankAccount) {
    this.bankAccount = bankAccount;
  }


  public Employer3 calculateApprenticeshipLevy(Boolean calculateApprenticeshipLevy) {
    this.calculateApprenticeshipLevy = calculateApprenticeshipLevy;
    return this;
  }

  /**
   * The employers&#39; calculate apprenticeship levy
   * @return calculateApprenticeshipLevy
   */
  @javax.annotation.Nullable
  public Boolean getCalculateApprenticeshipLevy() {
    return calculateApprenticeshipLevy;
  }

  public void setCalculateApprenticeshipLevy(Boolean calculateApprenticeshipLevy) {
    this.calculateApprenticeshipLevy = calculateApprenticeshipLevy;
  }


  public Employer3 claimEmploymentAllowance(Boolean claimEmploymentAllowance) {
    this.claimEmploymentAllowance = claimEmploymentAllowance;
    return this;
  }

  /**
   * The employers&#39; claim employment allowance
   * @return claimEmploymentAllowance
   */
  @javax.annotation.Nullable
  public Boolean getClaimEmploymentAllowance() {
    return claimEmploymentAllowance;
  }

  public void setClaimEmploymentAllowance(Boolean claimEmploymentAllowance) {
    this.claimEmploymentAllowance = claimEmploymentAllowance;
  }


  public Employer3 claimSmallEmployerRelief(Boolean claimSmallEmployerRelief) {
    this.claimSmallEmployerRelief = claimSmallEmployerRelief;
    return this;
  }

  /**
   * The employers&#39; claim small employer relief
   * @return claimSmallEmployerRelief
   */
  @javax.annotation.Nullable
  public Boolean getClaimSmallEmployerRelief() {
    return claimSmallEmployerRelief;
  }

  public void setClaimSmallEmployerRelief(Boolean claimSmallEmployerRelief) {
    this.claimSmallEmployerRelief = claimSmallEmployerRelief;
  }


  public Employer3 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The employers&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public Employer3 hmrcSettings(HmrcSettings hmrcSettings) {
    this.hmrcSettings = hmrcSettings;
    return this;
  }

  /**
   * Get hmrcSettings
   * @return hmrcSettings
   */
  @javax.annotation.Nullable
  public HmrcSettings getHmrcSettings() {
    return hmrcSettings;
  }

  public void setHmrcSettings(HmrcSettings hmrcSettings) {
    this.hmrcSettings = hmrcSettings;
  }


  public Employer3 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The employers&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public Employer3 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The employers&#39; name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Employer3 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The employers&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public Employer3 region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The employers&#39; region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public Employer3 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The employers&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public Employer3 ruleExclusions(RuleExclusionsEnum ruleExclusions) {
    this.ruleExclusions = ruleExclusions;
    return this;
  }

  /**
   * The employers&#39; rule exclusions
   * @return ruleExclusions
   */
  @javax.annotation.Nullable
  public RuleExclusionsEnum getRuleExclusions() {
    return ruleExclusions;
  }

  public void setRuleExclusions(RuleExclusionsEnum ruleExclusions) {
    this.ruleExclusions = ruleExclusions;
  }


  public Employer3 territory(TerritoryEnum territory) {
    this.territory = territory;
    return this;
  }

  /**
   * The employers&#39; territory
   * @return territory
   */
  @javax.annotation.Nullable
  public TerritoryEnum getTerritory() {
    return territory;
  }

  public void setTerritory(TerritoryEnum territory) {
    this.territory = territory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employer3 employer3 = (Employer3) o;
    return Objects.equals(this.address, employer3.address) &&
        Objects.equals(this.apprenticeshipLevyAllowance, employer3.apprenticeshipLevyAllowance) &&
        Objects.equals(this.autoEnrolment, employer3.autoEnrolment) &&
        Objects.equals(this.bacsServiceUserNumber, employer3.bacsServiceUserNumber) &&
        Objects.equals(this.bankAccount, employer3.bankAccount) &&
        Objects.equals(this.calculateApprenticeshipLevy, employer3.calculateApprenticeshipLevy) &&
        Objects.equals(this.claimEmploymentAllowance, employer3.claimEmploymentAllowance) &&
        Objects.equals(this.claimSmallEmployerRelief, employer3.claimSmallEmployerRelief) &&
        Objects.equals(this.effectiveDate, employer3.effectiveDate) &&
        Objects.equals(this.hmrcSettings, employer3.hmrcSettings) &&
        Objects.equals(this.metaData, employer3.metaData) &&
        Objects.equals(this.name, employer3.name) &&
        Objects.equals(this.nextRevisionDate, employer3.nextRevisionDate) &&
        Objects.equals(this.region, employer3.region) &&
        Objects.equals(this.revision, employer3.revision) &&
        Objects.equals(this.ruleExclusions, employer3.ruleExclusions) &&
        Objects.equals(this.territory, employer3.territory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, apprenticeshipLevyAllowance, autoEnrolment, bacsServiceUserNumber, bankAccount, calculateApprenticeshipLevy, claimEmploymentAllowance, claimSmallEmployerRelief, effectiveDate, hmrcSettings, metaData, name, nextRevisionDate, region, revision, ruleExclusions, territory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employer3 {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    apprenticeshipLevyAllowance: ").append(toIndentedString(apprenticeshipLevyAllowance)).append("\n");
    sb.append("    autoEnrolment: ").append(toIndentedString(autoEnrolment)).append("\n");
    sb.append("    bacsServiceUserNumber: ").append(toIndentedString(bacsServiceUserNumber)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    calculateApprenticeshipLevy: ").append(toIndentedString(calculateApprenticeshipLevy)).append("\n");
    sb.append("    claimEmploymentAllowance: ").append(toIndentedString(claimEmploymentAllowance)).append("\n");
    sb.append("    claimSmallEmployerRelief: ").append(toIndentedString(claimSmallEmployerRelief)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    hmrcSettings: ").append(toIndentedString(hmrcSettings)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    ruleExclusions: ").append(toIndentedString(ruleExclusions)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("ApprenticeshipLevyAllowance");
    openapiFields.add("AutoEnrolment");
    openapiFields.add("BacsServiceUserNumber");
    openapiFields.add("BankAccount");
    openapiFields.add("CalculateApprenticeshipLevy");
    openapiFields.add("ClaimEmploymentAllowance");
    openapiFields.add("ClaimSmallEmployerRelief");
    openapiFields.add("EffectiveDate");
    openapiFields.add("HmrcSettings");
    openapiFields.add("MetaData");
    openapiFields.add("Name");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("Region");
    openapiFields.add("Revision");
    openapiFields.add("RuleExclusions");
    openapiFields.add("Territory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Employer3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Employer3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employer3 is not found in the empty JSON string", Employer3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Employer3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Employer3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address1.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `AutoEnrolment`
      if (jsonObj.get("AutoEnrolment") != null && !jsonObj.get("AutoEnrolment").isJsonNull()) {
        AutoEnrolment.validateJsonElement(jsonObj.get("AutoEnrolment"));
      }
      if ((jsonObj.get("BacsServiceUserNumber") != null && !jsonObj.get("BacsServiceUserNumber").isJsonNull()) && !jsonObj.get("BacsServiceUserNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BacsServiceUserNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BacsServiceUserNumber").toString()));
      }
      // validate the optional field `BankAccount`
      if (jsonObj.get("BankAccount") != null && !jsonObj.get("BankAccount").isJsonNull()) {
        BankAccount1.validateJsonElement(jsonObj.get("BankAccount"));
      }
      // validate the optional field `HmrcSettings`
      if (jsonObj.get("HmrcSettings") != null && !jsonObj.get("HmrcSettings").isJsonNull()) {
        HmrcSettings.validateJsonElement(jsonObj.get("HmrcSettings"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        RegionEnum.validateJsonElement(jsonObj.get("Region"));
      }
      if ((jsonObj.get("RuleExclusions") != null && !jsonObj.get("RuleExclusions").isJsonNull()) && !jsonObj.get("RuleExclusions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RuleExclusions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RuleExclusions").toString()));
      }
      // validate the optional field `RuleExclusions`
      if (jsonObj.get("RuleExclusions") != null && !jsonObj.get("RuleExclusions").isJsonNull()) {
        RuleExclusionsEnum.validateJsonElement(jsonObj.get("RuleExclusions"));
      }
      if ((jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) && !jsonObj.get("Territory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Territory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Territory").toString()));
      }
      // validate the optional field `Territory`
      if (jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) {
        TerritoryEnum.validateJsonElement(jsonObj.get("Territory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employer3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employer3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employer3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employer3.class));

       return (TypeAdapter<T>) new TypeAdapter<Employer3>() {
           @Override
           public void write(JsonWriter out, Employer3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Employer3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Employer3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Employer3
   * @throws IOException if the JSON string is invalid with respect to Employer3
   */
  public static Employer3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employer3.class);
  }

  /**
   * Convert an instance of Employer3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

