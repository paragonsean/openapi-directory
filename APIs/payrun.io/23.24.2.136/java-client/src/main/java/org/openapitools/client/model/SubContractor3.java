/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Address2;
import org.openapitools.client.model.BankAccount2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SubContractor3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SubContractor3 {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address2 address;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "BankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private BankAccount2 bankAccount;

  /**
   * The sub contractors&#39; business type
   */
  @JsonAdapter(BusinessTypeEnum.Adapter.class)
  public enum BusinessTypeEnum {
    SOLE_TRADER("SoleTrader"),
    
    COMPANY("Company"),
    
    PARTNERSHIP("Partnership"),
    
    TRUST("Trust");

    private String value;

    BusinessTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BusinessTypeEnum fromValue(String value) {
      for (BusinessTypeEnum b : BusinessTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BusinessTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BusinessTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BusinessTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BusinessTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BusinessTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUSINESS_TYPE = "BusinessType";
  @SerializedName(SERIALIZED_NAME_BUSINESS_TYPE)
  private BusinessTypeEnum businessType;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "CompanyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COMPANY_REGISTRATION_NUMBER = "CompanyRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_COMPANY_REGISTRATION_NUMBER)
  private String companyRegistrationNumber;

  public static final String SERIALIZED_NAME_DEACTIVATED = "Deactivated";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED)
  private Boolean deactivated;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INITIALS = "Initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_NI_NUMBER = "NiNumber";
  @SerializedName(SERIALIZED_NAME_NI_NUMBER)
  private String niNumber;

  public static final String SERIALIZED_NAME_PARTNERSHIP_NAME = "PartnershipName";
  @SerializedName(SERIALIZED_NAME_PARTNERSHIP_NAME)
  private String partnershipName;

  public static final String SERIALIZED_NAME_PARTNERSHIP_UNIQUE_TAX_REFERENCE = "PartnershipUniqueTaxReference";
  @SerializedName(SERIALIZED_NAME_PARTNERSHIP_UNIQUE_TAX_REFERENCE)
  private String partnershipUniqueTaxReference;

  /**
   * The sub contractors&#39; pay frequency
   */
  @JsonAdapter(PayFrequencyEnum.Adapter.class)
  public enum PayFrequencyEnum {
    MONTHLY("Monthly"),
    
    WEEKLY("Weekly");

    private String value;

    PayFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayFrequencyEnum fromValue(String value) {
      for (PayFrequencyEnum b : PayFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private PayFrequencyEnum payFrequency;

  /**
   * The sub contractors&#39; payment method
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    NOT_SET("NotSet"),
    
    CASH("Cash"),
    
    CHEQUE("Cheque"),
    
    BACS("BACS"),
    
    FASTER_PAYMENTS("FasterPayments"),
    
    OTHER("Other");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "PaymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  /**
   * The sub contractors&#39; region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    NOT_SET("NotSet"),
    
    ENGLAND("England"),
    
    SCOTLAND("Scotland"),
    
    WALES("Wales");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  /**
   * The sub contractors&#39; taxation status
   */
  @JsonAdapter(TaxationStatusEnum.Adapter.class)
  public enum TaxationStatusEnum {
    UNMATCHED("Unmatched"),
    
    NET("Net"),
    
    GROSS("Gross");

    private String value;

    TaxationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxationStatusEnum fromValue(String value) {
      for (TaxationStatusEnum b : TaxationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAXATION_STATUS = "TaxationStatus";
  @SerializedName(SERIALIZED_NAME_TAXATION_STATUS)
  private TaxationStatusEnum taxationStatus;

  public static final String SERIALIZED_NAME_TELEPHONE = "Telephone";
  @SerializedName(SERIALIZED_NAME_TELEPHONE)
  private String telephone;

  /**
   * The sub contractors&#39; territory
   */
  @JsonAdapter(TerritoryEnum.Adapter.class)
  public enum TerritoryEnum {
    UNITED_KINGDOM("UnitedKingdom");

    private String value;

    TerritoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerritoryEnum fromValue(String value) {
      for (TerritoryEnum b : TerritoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TerritoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerritoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerritoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TerritoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TerritoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERRITORY = "Territory";
  @SerializedName(SERIALIZED_NAME_TERRITORY)
  private TerritoryEnum territory;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TRADING_NAME = "TradingName";
  @SerializedName(SERIALIZED_NAME_TRADING_NAME)
  private String tradingName;

  public static final String SERIALIZED_NAME_UNIQUE_TAX_REFERENCE = "UniqueTaxReference";
  @SerializedName(SERIALIZED_NAME_UNIQUE_TAX_REFERENCE)
  private String uniqueTaxReference;

  public static final String SERIALIZED_NAME_VAT_REGISTERED = "VatRegistered";
  @SerializedName(SERIALIZED_NAME_VAT_REGISTERED)
  private Boolean vatRegistered;

  public static final String SERIALIZED_NAME_VAT_REGISTRATION_NUMBER = "VatRegistrationNumber";
  @SerializedName(SERIALIZED_NAME_VAT_REGISTRATION_NUMBER)
  private String vatRegistrationNumber;

  public static final String SERIALIZED_NAME_VERIFICATION_DATE = "VerificationDate";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_DATE)
  private OffsetDateTime verificationDate;

  public static final String SERIALIZED_NAME_VERIFICATION_NUMBER = "VerificationNumber";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_NUMBER)
  private String verificationNumber;

  public static final String SERIALIZED_NAME_WORKS_NUMBER = "WorksNumber";
  @SerializedName(SERIALIZED_NAME_WORKS_NUMBER)
  private String worksNumber;

  public SubContractor3() {
  }

  public SubContractor3 address(Address2 address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address2 getAddress() {
    return address;
  }

  public void setAddress(Address2 address) {
    this.address = address;
  }


  public SubContractor3 bankAccount(BankAccount2 bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  /**
   * Get bankAccount
   * @return bankAccount
   */
  @javax.annotation.Nullable
  public BankAccount2 getBankAccount() {
    return bankAccount;
  }

  public void setBankAccount(BankAccount2 bankAccount) {
    this.bankAccount = bankAccount;
  }


  public SubContractor3 businessType(BusinessTypeEnum businessType) {
    this.businessType = businessType;
    return this;
  }

  /**
   * The sub contractors&#39; business type
   * @return businessType
   */
  @javax.annotation.Nullable
  public BusinessTypeEnum getBusinessType() {
    return businessType;
  }

  public void setBusinessType(BusinessTypeEnum businessType) {
    this.businessType = businessType;
  }


  public SubContractor3 companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The sub contractors&#39; company name
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public SubContractor3 companyRegistrationNumber(String companyRegistrationNumber) {
    this.companyRegistrationNumber = companyRegistrationNumber;
    return this;
  }

  /**
   * The sub contractors&#39; company registration number
   * @return companyRegistrationNumber
   */
  @javax.annotation.Nullable
  public String getCompanyRegistrationNumber() {
    return companyRegistrationNumber;
  }

  public void setCompanyRegistrationNumber(String companyRegistrationNumber) {
    this.companyRegistrationNumber = companyRegistrationNumber;
  }


  public SubContractor3 deactivated(Boolean deactivated) {
    this.deactivated = deactivated;
    return this;
  }

  /**
   * The sub contractors&#39; deactivated
   * @return deactivated
   */
  @javax.annotation.Nullable
  public Boolean getDeactivated() {
    return deactivated;
  }

  public void setDeactivated(Boolean deactivated) {
    this.deactivated = deactivated;
  }


  public SubContractor3 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The sub contractors&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public SubContractor3 firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The sub contractors&#39; first name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public SubContractor3 initials(String initials) {
    this.initials = initials;
    return this;
  }

  /**
   * The sub contractors&#39; initials
   * @return initials
   */
  @javax.annotation.Nullable
  public String getInitials() {
    return initials;
  }

  public void setInitials(String initials) {
    this.initials = initials;
  }


  public SubContractor3 lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The sub contractors&#39; last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public SubContractor3 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The sub contractors&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public SubContractor3 middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * The sub contractors&#39; middle name
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public SubContractor3 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The sub contractors&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public SubContractor3 niNumber(String niNumber) {
    this.niNumber = niNumber;
    return this;
  }

  /**
   * The sub contractors&#39; ni number
   * @return niNumber
   */
  @javax.annotation.Nullable
  public String getNiNumber() {
    return niNumber;
  }

  public void setNiNumber(String niNumber) {
    this.niNumber = niNumber;
  }


  public SubContractor3 partnershipName(String partnershipName) {
    this.partnershipName = partnershipName;
    return this;
  }

  /**
   * The sub contractors&#39; partnership name
   * @return partnershipName
   */
  @javax.annotation.Nullable
  public String getPartnershipName() {
    return partnershipName;
  }

  public void setPartnershipName(String partnershipName) {
    this.partnershipName = partnershipName;
  }


  public SubContractor3 partnershipUniqueTaxReference(String partnershipUniqueTaxReference) {
    this.partnershipUniqueTaxReference = partnershipUniqueTaxReference;
    return this;
  }

  /**
   * The sub contractors&#39; partnership unique tax reference
   * @return partnershipUniqueTaxReference
   */
  @javax.annotation.Nullable
  public String getPartnershipUniqueTaxReference() {
    return partnershipUniqueTaxReference;
  }

  public void setPartnershipUniqueTaxReference(String partnershipUniqueTaxReference) {
    this.partnershipUniqueTaxReference = partnershipUniqueTaxReference;
  }


  public SubContractor3 payFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
    return this;
  }

  /**
   * The sub contractors&#39; pay frequency
   * @return payFrequency
   */
  @javax.annotation.Nullable
  public PayFrequencyEnum getPayFrequency() {
    return payFrequency;
  }

  public void setPayFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
  }


  public SubContractor3 paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * The sub contractors&#39; payment method
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public SubContractor3 region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The sub contractors&#39; region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public SubContractor3 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The sub contractors&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public SubContractor3 taxationStatus(TaxationStatusEnum taxationStatus) {
    this.taxationStatus = taxationStatus;
    return this;
  }

  /**
   * The sub contractors&#39; taxation status
   * @return taxationStatus
   */
  @javax.annotation.Nullable
  public TaxationStatusEnum getTaxationStatus() {
    return taxationStatus;
  }

  public void setTaxationStatus(TaxationStatusEnum taxationStatus) {
    this.taxationStatus = taxationStatus;
  }


  public SubContractor3 telephone(String telephone) {
    this.telephone = telephone;
    return this;
  }

  /**
   * The sub contractors&#39; telephone
   * @return telephone
   */
  @javax.annotation.Nullable
  public String getTelephone() {
    return telephone;
  }

  public void setTelephone(String telephone) {
    this.telephone = telephone;
  }


  public SubContractor3 territory(TerritoryEnum territory) {
    this.territory = territory;
    return this;
  }

  /**
   * The sub contractors&#39; territory
   * @return territory
   */
  @javax.annotation.Nullable
  public TerritoryEnum getTerritory() {
    return territory;
  }

  public void setTerritory(TerritoryEnum territory) {
    this.territory = territory;
  }


  public SubContractor3 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The sub contractors&#39; title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SubContractor3 tradingName(String tradingName) {
    this.tradingName = tradingName;
    return this;
  }

  /**
   * The sub contractors&#39; trading name
   * @return tradingName
   */
  @javax.annotation.Nullable
  public String getTradingName() {
    return tradingName;
  }

  public void setTradingName(String tradingName) {
    this.tradingName = tradingName;
  }


  public SubContractor3 uniqueTaxReference(String uniqueTaxReference) {
    this.uniqueTaxReference = uniqueTaxReference;
    return this;
  }

  /**
   * The sub contractors&#39; unique tax reference
   * @return uniqueTaxReference
   */
  @javax.annotation.Nullable
  public String getUniqueTaxReference() {
    return uniqueTaxReference;
  }

  public void setUniqueTaxReference(String uniqueTaxReference) {
    this.uniqueTaxReference = uniqueTaxReference;
  }


  public SubContractor3 vatRegistered(Boolean vatRegistered) {
    this.vatRegistered = vatRegistered;
    return this;
  }

  /**
   * The sub contractors&#39; vat registered
   * @return vatRegistered
   */
  @javax.annotation.Nullable
  public Boolean getVatRegistered() {
    return vatRegistered;
  }

  public void setVatRegistered(Boolean vatRegistered) {
    this.vatRegistered = vatRegistered;
  }


  public SubContractor3 vatRegistrationNumber(String vatRegistrationNumber) {
    this.vatRegistrationNumber = vatRegistrationNumber;
    return this;
  }

  /**
   * The sub contractors&#39; vat registration number
   * @return vatRegistrationNumber
   */
  @javax.annotation.Nullable
  public String getVatRegistrationNumber() {
    return vatRegistrationNumber;
  }

  public void setVatRegistrationNumber(String vatRegistrationNumber) {
    this.vatRegistrationNumber = vatRegistrationNumber;
  }


  public SubContractor3 verificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
    return this;
  }

  /**
   * The sub contractors&#39; verification date
   * @return verificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getVerificationDate() {
    return verificationDate;
  }

  public void setVerificationDate(OffsetDateTime verificationDate) {
    this.verificationDate = verificationDate;
  }


  public SubContractor3 verificationNumber(String verificationNumber) {
    this.verificationNumber = verificationNumber;
    return this;
  }

  /**
   * The sub contractors&#39; verification number
   * @return verificationNumber
   */
  @javax.annotation.Nullable
  public String getVerificationNumber() {
    return verificationNumber;
  }

  public void setVerificationNumber(String verificationNumber) {
    this.verificationNumber = verificationNumber;
  }


  public SubContractor3 worksNumber(String worksNumber) {
    this.worksNumber = worksNumber;
    return this;
  }

  /**
   * The sub contractors&#39; works number
   * @return worksNumber
   */
  @javax.annotation.Nullable
  public String getWorksNumber() {
    return worksNumber;
  }

  public void setWorksNumber(String worksNumber) {
    this.worksNumber = worksNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SubContractor3 subContractor3 = (SubContractor3) o;
    return Objects.equals(this.address, subContractor3.address) &&
        Objects.equals(this.bankAccount, subContractor3.bankAccount) &&
        Objects.equals(this.businessType, subContractor3.businessType) &&
        Objects.equals(this.companyName, subContractor3.companyName) &&
        Objects.equals(this.companyRegistrationNumber, subContractor3.companyRegistrationNumber) &&
        Objects.equals(this.deactivated, subContractor3.deactivated) &&
        Objects.equals(this.effectiveDate, subContractor3.effectiveDate) &&
        Objects.equals(this.firstName, subContractor3.firstName) &&
        Objects.equals(this.initials, subContractor3.initials) &&
        Objects.equals(this.lastName, subContractor3.lastName) &&
        Objects.equals(this.metaData, subContractor3.metaData) &&
        Objects.equals(this.middleName, subContractor3.middleName) &&
        Objects.equals(this.nextRevisionDate, subContractor3.nextRevisionDate) &&
        Objects.equals(this.niNumber, subContractor3.niNumber) &&
        Objects.equals(this.partnershipName, subContractor3.partnershipName) &&
        Objects.equals(this.partnershipUniqueTaxReference, subContractor3.partnershipUniqueTaxReference) &&
        Objects.equals(this.payFrequency, subContractor3.payFrequency) &&
        Objects.equals(this.paymentMethod, subContractor3.paymentMethod) &&
        Objects.equals(this.region, subContractor3.region) &&
        Objects.equals(this.revision, subContractor3.revision) &&
        Objects.equals(this.taxationStatus, subContractor3.taxationStatus) &&
        Objects.equals(this.telephone, subContractor3.telephone) &&
        Objects.equals(this.territory, subContractor3.territory) &&
        Objects.equals(this.title, subContractor3.title) &&
        Objects.equals(this.tradingName, subContractor3.tradingName) &&
        Objects.equals(this.uniqueTaxReference, subContractor3.uniqueTaxReference) &&
        Objects.equals(this.vatRegistered, subContractor3.vatRegistered) &&
        Objects.equals(this.vatRegistrationNumber, subContractor3.vatRegistrationNumber) &&
        Objects.equals(this.verificationDate, subContractor3.verificationDate) &&
        Objects.equals(this.verificationNumber, subContractor3.verificationNumber) &&
        Objects.equals(this.worksNumber, subContractor3.worksNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, bankAccount, businessType, companyName, companyRegistrationNumber, deactivated, effectiveDate, firstName, initials, lastName, metaData, middleName, nextRevisionDate, niNumber, partnershipName, partnershipUniqueTaxReference, payFrequency, paymentMethod, region, revision, taxationStatus, telephone, territory, title, tradingName, uniqueTaxReference, vatRegistered, vatRegistrationNumber, verificationDate, verificationNumber, worksNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SubContractor3 {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    businessType: ").append(toIndentedString(businessType)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyRegistrationNumber: ").append(toIndentedString(companyRegistrationNumber)).append("\n");
    sb.append("    deactivated: ").append(toIndentedString(deactivated)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    niNumber: ").append(toIndentedString(niNumber)).append("\n");
    sb.append("    partnershipName: ").append(toIndentedString(partnershipName)).append("\n");
    sb.append("    partnershipUniqueTaxReference: ").append(toIndentedString(partnershipUniqueTaxReference)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    taxationStatus: ").append(toIndentedString(taxationStatus)).append("\n");
    sb.append("    telephone: ").append(toIndentedString(telephone)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    tradingName: ").append(toIndentedString(tradingName)).append("\n");
    sb.append("    uniqueTaxReference: ").append(toIndentedString(uniqueTaxReference)).append("\n");
    sb.append("    vatRegistered: ").append(toIndentedString(vatRegistered)).append("\n");
    sb.append("    vatRegistrationNumber: ").append(toIndentedString(vatRegistrationNumber)).append("\n");
    sb.append("    verificationDate: ").append(toIndentedString(verificationDate)).append("\n");
    sb.append("    verificationNumber: ").append(toIndentedString(verificationNumber)).append("\n");
    sb.append("    worksNumber: ").append(toIndentedString(worksNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("BankAccount");
    openapiFields.add("BusinessType");
    openapiFields.add("CompanyName");
    openapiFields.add("CompanyRegistrationNumber");
    openapiFields.add("Deactivated");
    openapiFields.add("EffectiveDate");
    openapiFields.add("FirstName");
    openapiFields.add("Initials");
    openapiFields.add("LastName");
    openapiFields.add("MetaData");
    openapiFields.add("MiddleName");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("NiNumber");
    openapiFields.add("PartnershipName");
    openapiFields.add("PartnershipUniqueTaxReference");
    openapiFields.add("PayFrequency");
    openapiFields.add("PaymentMethod");
    openapiFields.add("Region");
    openapiFields.add("Revision");
    openapiFields.add("TaxationStatus");
    openapiFields.add("Telephone");
    openapiFields.add("Territory");
    openapiFields.add("Title");
    openapiFields.add("TradingName");
    openapiFields.add("UniqueTaxReference");
    openapiFields.add("VatRegistered");
    openapiFields.add("VatRegistrationNumber");
    openapiFields.add("VerificationDate");
    openapiFields.add("VerificationNumber");
    openapiFields.add("WorksNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SubContractor3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SubContractor3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SubContractor3 is not found in the empty JSON string", SubContractor3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SubContractor3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SubContractor3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address2.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `BankAccount`
      if (jsonObj.get("BankAccount") != null && !jsonObj.get("BankAccount").isJsonNull()) {
        BankAccount2.validateJsonElement(jsonObj.get("BankAccount"));
      }
      if ((jsonObj.get("BusinessType") != null && !jsonObj.get("BusinessType").isJsonNull()) && !jsonObj.get("BusinessType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BusinessType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BusinessType").toString()));
      }
      // validate the optional field `BusinessType`
      if (jsonObj.get("BusinessType") != null && !jsonObj.get("BusinessType").isJsonNull()) {
        BusinessTypeEnum.validateJsonElement(jsonObj.get("BusinessType"));
      }
      if ((jsonObj.get("CompanyName") != null && !jsonObj.get("CompanyName").isJsonNull()) && !jsonObj.get("CompanyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyName").toString()));
      }
      if ((jsonObj.get("CompanyRegistrationNumber") != null && !jsonObj.get("CompanyRegistrationNumber").isJsonNull()) && !jsonObj.get("CompanyRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CompanyRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CompanyRegistrationNumber").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Initials") != null && !jsonObj.get("Initials").isJsonNull()) && !jsonObj.get("Initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Initials").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if ((jsonObj.get("NiNumber") != null && !jsonObj.get("NiNumber").isJsonNull()) && !jsonObj.get("NiNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NiNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NiNumber").toString()));
      }
      if ((jsonObj.get("PartnershipName") != null && !jsonObj.get("PartnershipName").isJsonNull()) && !jsonObj.get("PartnershipName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartnershipName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartnershipName").toString()));
      }
      if ((jsonObj.get("PartnershipUniqueTaxReference") != null && !jsonObj.get("PartnershipUniqueTaxReference").isJsonNull()) && !jsonObj.get("PartnershipUniqueTaxReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartnershipUniqueTaxReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartnershipUniqueTaxReference").toString()));
      }
      if ((jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      // validate the optional field `PayFrequency`
      if (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) {
        PayFrequencyEnum.validateJsonElement(jsonObj.get("PayFrequency"));
      }
      if ((jsonObj.get("PaymentMethod") != null && !jsonObj.get("PaymentMethod").isJsonNull()) && !jsonObj.get("PaymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentMethod").toString()));
      }
      // validate the optional field `PaymentMethod`
      if (jsonObj.get("PaymentMethod") != null && !jsonObj.get("PaymentMethod").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("PaymentMethod"));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        RegionEnum.validateJsonElement(jsonObj.get("Region"));
      }
      if ((jsonObj.get("TaxationStatus") != null && !jsonObj.get("TaxationStatus").isJsonNull()) && !jsonObj.get("TaxationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxationStatus").toString()));
      }
      // validate the optional field `TaxationStatus`
      if (jsonObj.get("TaxationStatus") != null && !jsonObj.get("TaxationStatus").isJsonNull()) {
        TaxationStatusEnum.validateJsonElement(jsonObj.get("TaxationStatus"));
      }
      if ((jsonObj.get("Telephone") != null && !jsonObj.get("Telephone").isJsonNull()) && !jsonObj.get("Telephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Telephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Telephone").toString()));
      }
      if ((jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) && !jsonObj.get("Territory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Territory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Territory").toString()));
      }
      // validate the optional field `Territory`
      if (jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) {
        TerritoryEnum.validateJsonElement(jsonObj.get("Territory"));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("TradingName") != null && !jsonObj.get("TradingName").isJsonNull()) && !jsonObj.get("TradingName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TradingName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TradingName").toString()));
      }
      if ((jsonObj.get("UniqueTaxReference") != null && !jsonObj.get("UniqueTaxReference").isJsonNull()) && !jsonObj.get("UniqueTaxReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UniqueTaxReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UniqueTaxReference").toString()));
      }
      if ((jsonObj.get("VatRegistrationNumber") != null && !jsonObj.get("VatRegistrationNumber").isJsonNull()) && !jsonObj.get("VatRegistrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VatRegistrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VatRegistrationNumber").toString()));
      }
      if ((jsonObj.get("VerificationNumber") != null && !jsonObj.get("VerificationNumber").isJsonNull()) && !jsonObj.get("VerificationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `VerificationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("VerificationNumber").toString()));
      }
      if ((jsonObj.get("WorksNumber") != null && !jsonObj.get("WorksNumber").isJsonNull()) && !jsonObj.get("WorksNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorksNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorksNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SubContractor3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SubContractor3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SubContractor3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SubContractor3.class));

       return (TypeAdapter<T>) new TypeAdapter<SubContractor3>() {
           @Override
           public void write(JsonWriter out, SubContractor3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SubContractor3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SubContractor3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SubContractor3
   * @throws IOException if the JSON string is invalid with respect to SubContractor3
   */
  public static SubContractor3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SubContractor3.class);
  }

  /**
   * Convert an instance of SubContractor3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

