/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.NominalCode3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayCode1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayCode1 {
  public static final String SERIALIZED_NAME_BENEFIT = "Benefit";
  @SerializedName(SERIALIZED_NAME_BENEFIT)
  private Boolean benefit;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_NIABLE = "Niable";
  @SerializedName(SERIALIZED_NAME_NIABLE)
  private Boolean niable;

  public static final String SERIALIZED_NAME_NOMINAL_CODE = "NominalCode";
  @SerializedName(SERIALIZED_NAME_NOMINAL_CODE)
  private NominalCode3 nominalCode;

  public static final String SERIALIZED_NAME_NON_ARRESTABLE = "NonArrestable";
  @SerializedName(SERIALIZED_NAME_NON_ARRESTABLE)
  private Boolean nonArrestable;

  public static final String SERIALIZED_NAME_NOTIONAL = "Notional";
  @SerializedName(SERIALIZED_NAME_NOTIONAL)
  private Boolean notional;

  public static final String SERIALIZED_NAME_READONLY = "Readonly";
  @SerializedName(SERIALIZED_NAME_READONLY)
  private Boolean readonly;

  /**
   * The pay codes&#39; region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    NOT_SET("NotSet"),
    
    ENGLAND("England"),
    
    SCOTLAND("Scotland"),
    
    WALES("Wales");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_TAXABLE = "Taxable";
  @SerializedName(SERIALIZED_NAME_TAXABLE)
  private Boolean taxable;

  /**
   * The pay codes&#39; territory
   */
  @JsonAdapter(TerritoryEnum.Adapter.class)
  public enum TerritoryEnum {
    UNITED_KINGDOM("UnitedKingdom");

    private String value;

    TerritoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerritoryEnum fromValue(String value) {
      for (TerritoryEnum b : TerritoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TerritoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerritoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerritoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TerritoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TerritoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERRITORY = "Territory";
  @SerializedName(SERIALIZED_NAME_TERRITORY)
  private TerritoryEnum territory;

  /**
   * The pay codes&#39; type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NOT_SET("NotSet"),
    
    PAYMENT("Payment"),
    
    DEDUCTION("Deduction");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public PayCode1() {
  }

  public PayCode1 benefit(Boolean benefit) {
    this.benefit = benefit;
    return this;
  }

  /**
   * The pay codes&#39; benefit
   * @return benefit
   */
  @javax.annotation.Nullable
  public Boolean getBenefit() {
    return benefit;
  }

  public void setBenefit(Boolean benefit) {
    this.benefit = benefit;
  }


  public PayCode1 code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The pay codes&#39; code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public PayCode1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The pay codes&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PayCode1 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The pay codes&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public PayCode1 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The pay codes&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public PayCode1 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The pay codes&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public PayCode1 niable(Boolean niable) {
    this.niable = niable;
    return this;
  }

  /**
   * The pay codes&#39; niable
   * @return niable
   */
  @javax.annotation.Nullable
  public Boolean getNiable() {
    return niable;
  }

  public void setNiable(Boolean niable) {
    this.niable = niable;
  }


  public PayCode1 nominalCode(NominalCode3 nominalCode) {
    this.nominalCode = nominalCode;
    return this;
  }

  /**
   * Get nominalCode
   * @return nominalCode
   */
  @javax.annotation.Nullable
  public NominalCode3 getNominalCode() {
    return nominalCode;
  }

  public void setNominalCode(NominalCode3 nominalCode) {
    this.nominalCode = nominalCode;
  }


  public PayCode1 nonArrestable(Boolean nonArrestable) {
    this.nonArrestable = nonArrestable;
    return this;
  }

  /**
   * The pay codes&#39; non arrestable
   * @return nonArrestable
   */
  @javax.annotation.Nullable
  public Boolean getNonArrestable() {
    return nonArrestable;
  }

  public void setNonArrestable(Boolean nonArrestable) {
    this.nonArrestable = nonArrestable;
  }


  public PayCode1 notional(Boolean notional) {
    this.notional = notional;
    return this;
  }

  /**
   * The pay codes&#39; notional
   * @return notional
   */
  @javax.annotation.Nullable
  public Boolean getNotional() {
    return notional;
  }

  public void setNotional(Boolean notional) {
    this.notional = notional;
  }


  public PayCode1 readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

  /**
   * The pay codes&#39; readonly
   * @return readonly
   */
  @javax.annotation.Nullable
  public Boolean getReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }


  public PayCode1 region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The pay codes&#39; region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public PayCode1 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The pay codes&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public PayCode1 taxable(Boolean taxable) {
    this.taxable = taxable;
    return this;
  }

  /**
   * The pay codes&#39; taxable
   * @return taxable
   */
  @javax.annotation.Nullable
  public Boolean getTaxable() {
    return taxable;
  }

  public void setTaxable(Boolean taxable) {
    this.taxable = taxable;
  }


  public PayCode1 territory(TerritoryEnum territory) {
    this.territory = territory;
    return this;
  }

  /**
   * The pay codes&#39; territory
   * @return territory
   */
  @javax.annotation.Nullable
  public TerritoryEnum getTerritory() {
    return territory;
  }

  public void setTerritory(TerritoryEnum territory) {
    this.territory = territory;
  }


  public PayCode1 type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The pay codes&#39; type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayCode1 payCode1 = (PayCode1) o;
    return Objects.equals(this.benefit, payCode1.benefit) &&
        Objects.equals(this.code, payCode1.code) &&
        Objects.equals(this.description, payCode1.description) &&
        Objects.equals(this.effectiveDate, payCode1.effectiveDate) &&
        Objects.equals(this.metaData, payCode1.metaData) &&
        Objects.equals(this.nextRevisionDate, payCode1.nextRevisionDate) &&
        Objects.equals(this.niable, payCode1.niable) &&
        Objects.equals(this.nominalCode, payCode1.nominalCode) &&
        Objects.equals(this.nonArrestable, payCode1.nonArrestable) &&
        Objects.equals(this.notional, payCode1.notional) &&
        Objects.equals(this.readonly, payCode1.readonly) &&
        Objects.equals(this.region, payCode1.region) &&
        Objects.equals(this.revision, payCode1.revision) &&
        Objects.equals(this.taxable, payCode1.taxable) &&
        Objects.equals(this.territory, payCode1.territory) &&
        Objects.equals(this.type, payCode1.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(benefit, code, description, effectiveDate, metaData, nextRevisionDate, niable, nominalCode, nonArrestable, notional, readonly, region, revision, taxable, territory, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayCode1 {\n");
    sb.append("    benefit: ").append(toIndentedString(benefit)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    niable: ").append(toIndentedString(niable)).append("\n");
    sb.append("    nominalCode: ").append(toIndentedString(nominalCode)).append("\n");
    sb.append("    nonArrestable: ").append(toIndentedString(nonArrestable)).append("\n");
    sb.append("    notional: ").append(toIndentedString(notional)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    taxable: ").append(toIndentedString(taxable)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Benefit");
    openapiFields.add("Code");
    openapiFields.add("Description");
    openapiFields.add("EffectiveDate");
    openapiFields.add("MetaData");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("Niable");
    openapiFields.add("NominalCode");
    openapiFields.add("NonArrestable");
    openapiFields.add("Notional");
    openapiFields.add("Readonly");
    openapiFields.add("Region");
    openapiFields.add("Revision");
    openapiFields.add("Taxable");
    openapiFields.add("Territory");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayCode1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayCode1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayCode1 is not found in the empty JSON string", PayCode1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayCode1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayCode1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `NominalCode`
      if (jsonObj.get("NominalCode") != null && !jsonObj.get("NominalCode").isJsonNull()) {
        NominalCode3.validateJsonElement(jsonObj.get("NominalCode"));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        RegionEnum.validateJsonElement(jsonObj.get("Region"));
      }
      if ((jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) && !jsonObj.get("Territory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Territory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Territory").toString()));
      }
      // validate the optional field `Territory`
      if (jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) {
        TerritoryEnum.validateJsonElement(jsonObj.get("Territory"));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("Type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayCode1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayCode1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayCode1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayCode1.class));

       return (TypeAdapter<T>) new TypeAdapter<PayCode1>() {
           @Override
           public void write(JsonWriter out, PayCode1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayCode1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayCode1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayCode1
   * @throws IOException if the JSON string is invalid with respect to PayCode1
   */
  public static PayCode1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayCode1.class);
  }

  /**
   * Convert an instance of PayCode1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

