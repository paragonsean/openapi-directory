/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.ReportingInstruction;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportLineInstructionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportLineInstructionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportLineInstructionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteReportingInstruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportingInstructionCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "ReportingInstructionId" + "}", localVarApiClient.escapeString(reportingInstructionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReportingInstructionValidateBeforeCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling deleteReportingInstruction(Async)");
        }

        // verify the required parameter 'reportingInstructionId' is set
        if (reportingInstructionId == null) {
            throw new ApiException("Missing the required parameter 'reportingInstructionId' when calling deleteReportingInstruction(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteReportingInstruction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteReportingInstruction(Async)");
        }

        return deleteReportingInstructionCall(employerId, reportingInstructionId, authorization, apiVersion, _callback);

    }

    /**
     * Deletes a reporting instruction
     * Delete the specified reporting instruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReportingInstruction(String employerId, String reportingInstructionId, String authorization, String apiVersion) throws ApiException {
        deleteReportingInstructionWithHttpInfo(employerId, reportingInstructionId, authorization, apiVersion);
    }

    /**
     * Deletes a reporting instruction
     * Delete the specified reporting instruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReportingInstructionWithHttpInfo(String employerId, String reportingInstructionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteReportingInstructionValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a reporting instruction (asynchronously)
     * Delete the specified reporting instruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportingInstructionAsync(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReportingInstructionValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportingInstructionFromEmployer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportingInstructionFromEmployerCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "ReportingInstructionId" + "}", localVarApiClient.escapeString(reportingInstructionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportingInstructionFromEmployerValidateBeforeCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getReportingInstructionFromEmployer(Async)");
        }

        // verify the required parameter 'reportingInstructionId' is set
        if (reportingInstructionId == null) {
            throw new ApiException("Missing the required parameter 'reportingInstructionId' when calling getReportingInstructionFromEmployer(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportingInstructionFromEmployer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReportingInstructionFromEmployer(Async)");
        }

        return getReportingInstructionFromEmployerCall(employerId, reportingInstructionId, authorization, apiVersion, _callback);

    }

    /**
     * Gets the specified reporting instruction from the employer
     * Returns the specified pay instruction from employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ReportingInstruction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportingInstruction getReportingInstructionFromEmployer(String employerId, String reportingInstructionId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<ReportingInstruction> localVarResp = getReportingInstructionFromEmployerWithHttpInfo(employerId, reportingInstructionId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the specified reporting instruction from the employer
     * Returns the specified pay instruction from employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;ReportingInstruction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingInstruction> getReportingInstructionFromEmployerWithHttpInfo(String employerId, String reportingInstructionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getReportingInstructionFromEmployerValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<ReportingInstruction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified reporting instruction from the employer (asynchronously)
     * Returns the specified pay instruction from employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportingInstructionFromEmployerAsync(String employerId, String reportingInstructionId, String authorization, String apiVersion, final ApiCallback<ReportingInstruction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportingInstructionFromEmployerValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReportingInstruction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportingInstructionsFromEmployer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportingInstructionsFromEmployerCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/ReportingInstructions"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportingInstructionsFromEmployerValidateBeforeCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getReportingInstructionsFromEmployer(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportingInstructionsFromEmployer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReportingInstructionsFromEmployer(Async)");
        }

        return getReportingInstructionsFromEmployerCall(employerId, authorization, apiVersion, _callback);

    }

    /**
     * Gets the reporting instructions from the specified employer
     * Get links to all pay instructions for the specified employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getReportingInstructionsFromEmployer(String employerId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getReportingInstructionsFromEmployerWithHttpInfo(employerId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the reporting instructions from the specified employer
     * Get links to all pay instructions for the specified employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getReportingInstructionsFromEmployerWithHttpInfo(String employerId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getReportingInstructionsFromEmployerValidateBeforeCall(employerId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the reporting instructions from the specified employer (asynchronously)
     * Get links to all pay instructions for the specified employee
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportingInstructionsFromEmployerAsync(String employerId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportingInstructionsFromEmployerValidateBeforeCall(employerId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postReportingInstruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postReportingInstructionCall(String employerId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportingInstruction;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/ReportingInstructions"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postReportingInstructionValidateBeforeCall(String employerId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling postReportingInstruction(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postReportingInstruction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postReportingInstruction(Async)");
        }

        // verify the required parameter 'reportingInstruction' is set
        if (reportingInstruction == null) {
            throw new ApiException("Missing the required parameter 'reportingInstruction' when calling postReportingInstruction(Async)");
        }

        return postReportingInstructionCall(employerId, authorization, apiVersion, reportingInstruction, _callback);

    }

    /**
     * Creates a new Reporting Instruction
     * Creates a new reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Link postReportingInstruction(String employerId, String authorization, String apiVersion, ReportingInstruction reportingInstruction) throws ApiException {
        ApiResponse<Link> localVarResp = postReportingInstructionWithHttpInfo(employerId, authorization, apiVersion, reportingInstruction);
        return localVarResp.getData();
    }

    /**
     * Creates a new Reporting Instruction
     * Creates a new reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Link> postReportingInstructionWithHttpInfo(String employerId, String authorization, String apiVersion, ReportingInstruction reportingInstruction) throws ApiException {
        okhttp3.Call localVarCall = postReportingInstructionValidateBeforeCall(employerId, authorization, apiVersion, reportingInstruction, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a new Reporting Instruction (asynchronously)
     * Creates a new reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postReportingInstructionAsync(String employerId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback<Link> _callback) throws ApiException {

        okhttp3.Call localVarCall = postReportingInstructionValidateBeforeCall(employerId, authorization, apiVersion, reportingInstruction, _callback);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putReportingInstruction
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putReportingInstructionCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportingInstruction;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/ReportingInstruction/{ReportingInstructionId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "ReportingInstructionId" + "}", localVarApiClient.escapeString(reportingInstructionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putReportingInstructionValidateBeforeCall(String employerId, String reportingInstructionId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling putReportingInstruction(Async)");
        }

        // verify the required parameter 'reportingInstructionId' is set
        if (reportingInstructionId == null) {
            throw new ApiException("Missing the required parameter 'reportingInstructionId' when calling putReportingInstruction(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putReportingInstruction(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putReportingInstruction(Async)");
        }

        // verify the required parameter 'reportingInstruction' is set
        if (reportingInstruction == null) {
            throw new ApiException("Missing the required parameter 'reportingInstruction' when calling putReportingInstruction(Async)");
        }

        return putReportingInstructionCall(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction, _callback);

    }

    /**
     * Update a reporting Instruction
     * Updates the existing specified reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @return ReportingInstruction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportingInstruction putReportingInstruction(String employerId, String reportingInstructionId, String authorization, String apiVersion, ReportingInstruction reportingInstruction) throws ApiException {
        ApiResponse<ReportingInstruction> localVarResp = putReportingInstructionWithHttpInfo(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction);
        return localVarResp.getData();
    }

    /**
     * Update a reporting Instruction
     * Updates the existing specified reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @return ApiResponse&lt;ReportingInstruction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportingInstruction> putReportingInstructionWithHttpInfo(String employerId, String reportingInstructionId, String authorization, String apiVersion, ReportingInstruction reportingInstruction) throws ApiException {
        okhttp3.Call localVarCall = putReportingInstructionValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction, null);
        Type localVarReturnType = new TypeToken<ReportingInstruction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a reporting Instruction (asynchronously)
     * Updates the existing specified reporting instruction object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param reportingInstructionId The reporting instruction unique identifier. E.g. SERRPT001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportingInstruction The reporting instruction object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The reporting instruction object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putReportingInstructionAsync(String employerId, String reportingInstructionId, String authorization, String apiVersion, ReportingInstruction reportingInstruction, final ApiCallback<ReportingInstruction> _callback) throws ApiException {

        okhttp3.Call localVarCall = putReportingInstructionValidateBeforeCall(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction, _callback);
        Type localVarReturnType = new TypeToken<ReportingInstruction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
