/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayLine1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayLine1 {
  public static final String SERIALIZED_NAME_CALCULATOR = "Calculator";
  @SerializedName(SERIALIZED_NAME_CALCULATOR)
  private String calculator;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GENERATED = "Generated";
  @SerializedName(SERIALIZED_NAME_GENERATED)
  private OffsetDateTime generated;

  public static final String SERIALIZED_NAME_PAY_CODE = "PayCode";
  @SerializedName(SERIALIZED_NAME_PAY_CODE)
  private String payCode;

  /**
   * The pay lines&#39; pay code type
   */
  @JsonAdapter(PayCodeTypeEnum.Adapter.class)
  public enum PayCodeTypeEnum {
    NOT_SET("NotSet"),
    
    PAYMENT("Payment"),
    
    DEDUCTION("Deduction");

    private String value;

    PayCodeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayCodeTypeEnum fromValue(String value) {
      for (PayCodeTypeEnum b : PayCodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayCodeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayCodeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayCodeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayCodeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayCodeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_CODE_TYPE = "PayCodeType";
  @SerializedName(SERIALIZED_NAME_PAY_CODE_TYPE)
  private PayCodeTypeEnum payCodeType;

  public static final String SERIALIZED_NAME_PAY_RUN_SEQUENCE = "PayRunSequence";
  @SerializedName(SERIALIZED_NAME_PAY_RUN_SEQUENCE)
  private Integer payRunSequence;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "PaymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private LocalDate paymentDate;

  public static final String SERIALIZED_NAME_TAX_PERIOD = "TaxPeriod";
  @SerializedName(SERIALIZED_NAME_TAX_PERIOD)
  private Integer taxPeriod;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public PayLine1() {
  }

  public PayLine1 calculator(String calculator) {
    this.calculator = calculator;
    return this;
  }

  /**
   * The pay lines&#39; calculator
   * @return calculator
   */
  @javax.annotation.Nullable
  public String getCalculator() {
    return calculator;
  }

  public void setCalculator(String calculator) {
    this.calculator = calculator;
  }


  public PayLine1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The pay lines&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PayLine1 generated(OffsetDateTime generated) {
    this.generated = generated;
    return this;
  }

  /**
   * The pay lines&#39; generated
   * @return generated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGenerated() {
    return generated;
  }

  public void setGenerated(OffsetDateTime generated) {
    this.generated = generated;
  }


  public PayLine1 payCode(String payCode) {
    this.payCode = payCode;
    return this;
  }

  /**
   * The pay lines&#39; pay code
   * @return payCode
   */
  @javax.annotation.Nullable
  public String getPayCode() {
    return payCode;
  }

  public void setPayCode(String payCode) {
    this.payCode = payCode;
  }


  public PayLine1 payCodeType(PayCodeTypeEnum payCodeType) {
    this.payCodeType = payCodeType;
    return this;
  }

  /**
   * The pay lines&#39; pay code type
   * @return payCodeType
   */
  @javax.annotation.Nullable
  public PayCodeTypeEnum getPayCodeType() {
    return payCodeType;
  }

  public void setPayCodeType(PayCodeTypeEnum payCodeType) {
    this.payCodeType = payCodeType;
  }


  public PayLine1 payRunSequence(Integer payRunSequence) {
    this.payRunSequence = payRunSequence;
    return this;
  }

  /**
   * The pay lines&#39; pay run sequence
   * @return payRunSequence
   */
  @javax.annotation.Nullable
  public Integer getPayRunSequence() {
    return payRunSequence;
  }

  public void setPayRunSequence(Integer payRunSequence) {
    this.payRunSequence = payRunSequence;
  }


  public PayLine1 paymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * The pay lines&#39; payment date
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
  }


  public PayLine1 taxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
    return this;
  }

  /**
   * The pay lines&#39; tax period
   * @return taxPeriod
   */
  @javax.annotation.Nullable
  public Integer getTaxPeriod() {
    return taxPeriod;
  }

  public void setTaxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
  }


  public PayLine1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The pay lines&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }


  public PayLine1 value(Double value) {
    this.value = value;
    return this;
  }

  /**
   * The pay lines&#39; value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayLine1 payLine1 = (PayLine1) o;
    return Objects.equals(this.calculator, payLine1.calculator) &&
        Objects.equals(this.description, payLine1.description) &&
        Objects.equals(this.generated, payLine1.generated) &&
        Objects.equals(this.payCode, payLine1.payCode) &&
        Objects.equals(this.payCodeType, payLine1.payCodeType) &&
        Objects.equals(this.payRunSequence, payLine1.payRunSequence) &&
        Objects.equals(this.paymentDate, payLine1.paymentDate) &&
        Objects.equals(this.taxPeriod, payLine1.taxPeriod) &&
        Objects.equals(this.taxYear, payLine1.taxYear) &&
        Objects.equals(this.value, payLine1.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculator, description, generated, payCode, payCodeType, payRunSequence, paymentDate, taxPeriod, taxYear, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayLine1 {\n");
    sb.append("    calculator: ").append(toIndentedString(calculator)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    generated: ").append(toIndentedString(generated)).append("\n");
    sb.append("    payCode: ").append(toIndentedString(payCode)).append("\n");
    sb.append("    payCodeType: ").append(toIndentedString(payCodeType)).append("\n");
    sb.append("    payRunSequence: ").append(toIndentedString(payRunSequence)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    taxPeriod: ").append(toIndentedString(taxPeriod)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Calculator");
    openapiFields.add("Description");
    openapiFields.add("Generated");
    openapiFields.add("PayCode");
    openapiFields.add("PayCodeType");
    openapiFields.add("PayRunSequence");
    openapiFields.add("PaymentDate");
    openapiFields.add("TaxPeriod");
    openapiFields.add("TaxYear");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayLine1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayLine1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayLine1 is not found in the empty JSON string", PayLine1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayLine1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayLine1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Calculator") != null && !jsonObj.get("Calculator").isJsonNull()) && !jsonObj.get("Calculator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Calculator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Calculator").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("PayCode") != null && !jsonObj.get("PayCode").isJsonNull()) && !jsonObj.get("PayCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayCode").toString()));
      }
      if ((jsonObj.get("PayCodeType") != null && !jsonObj.get("PayCodeType").isJsonNull()) && !jsonObj.get("PayCodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayCodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayCodeType").toString()));
      }
      // validate the optional field `PayCodeType`
      if (jsonObj.get("PayCodeType") != null && !jsonObj.get("PayCodeType").isJsonNull()) {
        PayCodeTypeEnum.validateJsonElement(jsonObj.get("PayCodeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayLine1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayLine1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayLine1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayLine1.class));

       return (TypeAdapter<T>) new TypeAdapter<PayLine1>() {
           @Override
           public void write(JsonWriter out, PayLine1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayLine1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayLine1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayLine1
   * @throws IOException if the JSON string is invalid with respect to PayLine1
   */
  public static PayLine1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayLine1.class);
  }

  /**
   * Convert an instance of PayLine1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

