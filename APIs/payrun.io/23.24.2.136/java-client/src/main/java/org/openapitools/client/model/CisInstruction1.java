/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CisInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CisInstruction1 {
  public static final String SERIALIZED_NAME_CIS_LINE_TAG = "CisLineTag";
  @SerializedName(SERIALIZED_NAME_CIS_LINE_TAG)
  private String cisLineTag;

  public static final String SERIALIZED_NAME_CIS_LINE_TYPE = "CisLineType";
  @SerializedName(SERIALIZED_NAME_CIS_LINE_TYPE)
  private String cisLineType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The cis instructions&#39; pay frequency
   */
  @JsonAdapter(PayFrequencyEnum.Adapter.class)
  public enum PayFrequencyEnum {
    MONTHLY("Monthly"),
    
    WEEKLY("Weekly");

    private String value;

    PayFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayFrequencyEnum fromValue(String value) {
      for (PayFrequencyEnum b : PayFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private PayFrequencyEnum payFrequency;

  public static final String SERIALIZED_NAME_PERIOD_END = "PeriodEnd";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private Integer periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "PeriodStart";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private Integer periodStart;

  public static final String SERIALIZED_NAME_TAX_YEAR_END = "TaxYearEnd";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR_END)
  private Integer taxYearEnd;

  public static final String SERIALIZED_NAME_TAX_YEAR_START = "TaxYearStart";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR_START)
  private Integer taxYearStart;

  /**
   * The cis instructions&#39; u o m
   */
  @JsonAdapter(UOMEnum.Adapter.class)
  public enum UOMEnum {
    NOT_SET("NotSet"),
    
    MINUTE("Minute"),
    
    HOUR("Hour"),
    
    DAY("Day"),
    
    WEEK("Week"),
    
    MONTH("Month"),
    
    YEAR("Year"),
    
    UNIT("Unit");

    private String value;

    UOMEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UOMEnum fromValue(String value) {
      for (UOMEnum b : UOMEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UOMEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UOMEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UOMEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UOMEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UOMEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_U_O_M = "UOM";
  @SerializedName(SERIALIZED_NAME_U_O_M)
  private UOMEnum UOM;

  public static final String SERIALIZED_NAME_UNITS = "Units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private Double units;

  public static final String SERIALIZED_NAME_V_A_T = "VAT";
  @SerializedName(SERIALIZED_NAME_V_A_T)
  private Double VAT;

  public static final String SERIALIZED_NAME_VALUE = "Value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public CisInstruction1() {
  }

  public CisInstruction1 cisLineTag(String cisLineTag) {
    this.cisLineTag = cisLineTag;
    return this;
  }

  /**
   * The cis instructions&#39; cis line tag
   * @return cisLineTag
   */
  @javax.annotation.Nullable
  public String getCisLineTag() {
    return cisLineTag;
  }

  public void setCisLineTag(String cisLineTag) {
    this.cisLineTag = cisLineTag;
  }


  public CisInstruction1 cisLineType(String cisLineType) {
    this.cisLineType = cisLineType;
    return this;
  }

  /**
   * The cis instructions&#39; cis line type
   * @return cisLineType
   */
  @javax.annotation.Nullable
  public String getCisLineType() {
    return cisLineType;
  }

  public void setCisLineType(String cisLineType) {
    this.cisLineType = cisLineType;
  }


  public CisInstruction1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The cis instructions&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CisInstruction1 payFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
    return this;
  }

  /**
   * The cis instructions&#39; pay frequency
   * @return payFrequency
   */
  @javax.annotation.Nullable
  public PayFrequencyEnum getPayFrequency() {
    return payFrequency;
  }

  public void setPayFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
  }


  public CisInstruction1 periodEnd(Integer periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * The cis instructions&#39; period end
   * @return periodEnd
   */
  @javax.annotation.Nullable
  public Integer getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(Integer periodEnd) {
    this.periodEnd = periodEnd;
  }


  public CisInstruction1 periodStart(Integer periodStart) {
    this.periodStart = periodStart;
    return this;
  }

  /**
   * The cis instructions&#39; period start
   * @return periodStart
   */
  @javax.annotation.Nullable
  public Integer getPeriodStart() {
    return periodStart;
  }

  public void setPeriodStart(Integer periodStart) {
    this.periodStart = periodStart;
  }


  public CisInstruction1 taxYearEnd(Integer taxYearEnd) {
    this.taxYearEnd = taxYearEnd;
    return this;
  }

  /**
   * The cis instructions&#39; tax year end
   * @return taxYearEnd
   */
  @javax.annotation.Nullable
  public Integer getTaxYearEnd() {
    return taxYearEnd;
  }

  public void setTaxYearEnd(Integer taxYearEnd) {
    this.taxYearEnd = taxYearEnd;
  }


  public CisInstruction1 taxYearStart(Integer taxYearStart) {
    this.taxYearStart = taxYearStart;
    return this;
  }

  /**
   * The cis instructions&#39; tax year start
   * @return taxYearStart
   */
  @javax.annotation.Nullable
  public Integer getTaxYearStart() {
    return taxYearStart;
  }

  public void setTaxYearStart(Integer taxYearStart) {
    this.taxYearStart = taxYearStart;
  }


  public CisInstruction1 UOM(UOMEnum UOM) {
    this.UOM = UOM;
    return this;
  }

  /**
   * The cis instructions&#39; u o m
   * @return UOM
   */
  @javax.annotation.Nullable
  public UOMEnum getUOM() {
    return UOM;
  }

  public void setUOM(UOMEnum UOM) {
    this.UOM = UOM;
  }


  public CisInstruction1 units(Double units) {
    this.units = units;
    return this;
  }

  /**
   * The cis instructions&#39; units
   * @return units
   */
  @javax.annotation.Nullable
  public Double getUnits() {
    return units;
  }

  public void setUnits(Double units) {
    this.units = units;
  }


  public CisInstruction1 VAT(Double VAT) {
    this.VAT = VAT;
    return this;
  }

  /**
   * The cis instructions&#39; v a t
   * @return VAT
   */
  @javax.annotation.Nullable
  public Double getVAT() {
    return VAT;
  }

  public void setVAT(Double VAT) {
    this.VAT = VAT;
  }


  public CisInstruction1 value(Double value) {
    this.value = value;
    return this;
  }

  /**
   * The cis instructions&#39; value
   * @return value
   */
  @javax.annotation.Nullable
  public Double getValue() {
    return value;
  }

  public void setValue(Double value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CisInstruction1 cisInstruction1 = (CisInstruction1) o;
    return Objects.equals(this.cisLineTag, cisInstruction1.cisLineTag) &&
        Objects.equals(this.cisLineType, cisInstruction1.cisLineType) &&
        Objects.equals(this.description, cisInstruction1.description) &&
        Objects.equals(this.payFrequency, cisInstruction1.payFrequency) &&
        Objects.equals(this.periodEnd, cisInstruction1.periodEnd) &&
        Objects.equals(this.periodStart, cisInstruction1.periodStart) &&
        Objects.equals(this.taxYearEnd, cisInstruction1.taxYearEnd) &&
        Objects.equals(this.taxYearStart, cisInstruction1.taxYearStart) &&
        Objects.equals(this.UOM, cisInstruction1.UOM) &&
        Objects.equals(this.units, cisInstruction1.units) &&
        Objects.equals(this.VAT, cisInstruction1.VAT) &&
        Objects.equals(this.value, cisInstruction1.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cisLineTag, cisLineType, description, payFrequency, periodEnd, periodStart, taxYearEnd, taxYearStart, UOM, units, VAT, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CisInstruction1 {\n");
    sb.append("    cisLineTag: ").append(toIndentedString(cisLineTag)).append("\n");
    sb.append("    cisLineType: ").append(toIndentedString(cisLineType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    taxYearEnd: ").append(toIndentedString(taxYearEnd)).append("\n");
    sb.append("    taxYearStart: ").append(toIndentedString(taxYearStart)).append("\n");
    sb.append("    UOM: ").append(toIndentedString(UOM)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    VAT: ").append(toIndentedString(VAT)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CisLineTag");
    openapiFields.add("CisLineType");
    openapiFields.add("Description");
    openapiFields.add("PayFrequency");
    openapiFields.add("PeriodEnd");
    openapiFields.add("PeriodStart");
    openapiFields.add("TaxYearEnd");
    openapiFields.add("TaxYearStart");
    openapiFields.add("UOM");
    openapiFields.add("Units");
    openapiFields.add("VAT");
    openapiFields.add("Value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CisInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CisInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CisInstruction1 is not found in the empty JSON string", CisInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CisInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CisInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CisLineTag") != null && !jsonObj.get("CisLineTag").isJsonNull()) && !jsonObj.get("CisLineTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CisLineTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CisLineTag").toString()));
      }
      if ((jsonObj.get("CisLineType") != null && !jsonObj.get("CisLineType").isJsonNull()) && !jsonObj.get("CisLineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CisLineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CisLineType").toString()));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      // validate the optional field `PayFrequency`
      if (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) {
        PayFrequencyEnum.validateJsonElement(jsonObj.get("PayFrequency"));
      }
      if ((jsonObj.get("UOM") != null && !jsonObj.get("UOM").isJsonNull()) && !jsonObj.get("UOM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UOM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UOM").toString()));
      }
      // validate the optional field `UOM`
      if (jsonObj.get("UOM") != null && !jsonObj.get("UOM").isJsonNull()) {
        UOMEnum.validateJsonElement(jsonObj.get("UOM"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CisInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CisInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CisInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CisInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<CisInstruction1>() {
           @Override
           public void write(JsonWriter out, CisInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CisInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CisInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CisInstruction1
   * @throws IOException if the JSON string is invalid with respect to CisInstruction1
   */
  public static CisInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CisInstruction1.class);
  }

  /**
   * Convert an instance of CisInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

