/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.EmployeeLink;
import org.openapitools.client.model.EmployerLink;
import org.openapitools.client.model.PayScheduleLink;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmployeeSummary1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmployeeSummary1 {
  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_LINK = "EmployeeLink";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_LINK)
  private EmployeeLink employeeLink;

  public static final String SERIALIZED_NAME_EMPLOYER_LINK = "EmployerLink";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_LINK)
  private EmployerLink employerLink;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_INITIALS = "Initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LAST_PAY_DAY = "LastPayDay";
  @SerializedName(SERIALIZED_NAME_LAST_PAY_DAY)
  private LocalDate lastPayDay;

  public static final String SERIALIZED_NAME_LAST_PAY_DAY_SCHEDULE = "LastPayDaySchedule";
  @SerializedName(SERIALIZED_NAME_LAST_PAY_DAY_SCHEDULE)
  private String lastPayDaySchedule;

  public static final String SERIALIZED_NAME_LAST_PAY_DAY_TAX_YEAR = "LastPayDayTaxYear";
  @SerializedName(SERIALIZED_NAME_LAST_PAY_DAY_TAX_YEAR)
  private Integer lastPayDayTaxYear;

  public static final String SERIALIZED_NAME_LEAVING_DATE = "LeavingDate";
  @SerializedName(SERIALIZED_NAME_LEAVING_DATE)
  private LocalDate leavingDate;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_NEXT_PAY_DAY = "NextPayDay";
  @SerializedName(SERIALIZED_NAME_NEXT_PAY_DAY)
  private LocalDate nextPayDay;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_NI_LETTER = "NiLetter";
  @SerializedName(SERIALIZED_NAME_NI_LETTER)
  private String niLetter;

  public static final String SERIALIZED_NAME_NI_NUMBER = "NiNumber";
  @SerializedName(SERIALIZED_NAME_NI_NUMBER)
  private String niNumber;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE_LINK = "PayScheduleLink";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE_LINK)
  private PayScheduleLink payScheduleLink;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE_NAME = "PayScheduleName";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE_NAME)
  private String payScheduleName;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  /**
   * The employee summarys&#39; tax basis
   */
  @JsonAdapter(TaxBasisEnum.Adapter.class)
  public enum TaxBasisEnum {
    CUMULATIVE("Cumulative"),
    
    WEEK1_MONTH1("Week1Month1");

    private String value;

    TaxBasisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxBasisEnum fromValue(String value) {
      for (TaxBasisEnum b : TaxBasisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxBasisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxBasisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxBasisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxBasisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxBasisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAX_BASIS = "TaxBasis";
  @SerializedName(SERIALIZED_NAME_TAX_BASIS)
  private TaxBasisEnum taxBasis;

  public static final String SERIALIZED_NAME_TAX_CODE = "TaxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private String taxCode;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UNIQUE_KEY = "UniqueKey";
  @SerializedName(SERIALIZED_NAME_UNIQUE_KEY)
  private String uniqueKey;

  public EmployeeSummary1() {
  }

  public EmployeeSummary1 code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The employee summarys&#39; code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public EmployeeSummary1 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The employee summarys&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public EmployeeSummary1 employeeLink(EmployeeLink employeeLink) {
    this.employeeLink = employeeLink;
    return this;
  }

  /**
   * Get employeeLink
   * @return employeeLink
   */
  @javax.annotation.Nullable
  public EmployeeLink getEmployeeLink() {
    return employeeLink;
  }

  public void setEmployeeLink(EmployeeLink employeeLink) {
    this.employeeLink = employeeLink;
  }


  public EmployeeSummary1 employerLink(EmployerLink employerLink) {
    this.employerLink = employerLink;
    return this;
  }

  /**
   * Get employerLink
   * @return employerLink
   */
  @javax.annotation.Nullable
  public EmployerLink getEmployerLink() {
    return employerLink;
  }

  public void setEmployerLink(EmployerLink employerLink) {
    this.employerLink = employerLink;
  }


  public EmployeeSummary1 firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The employee summarys&#39; first name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public EmployeeSummary1 initials(String initials) {
    this.initials = initials;
    return this;
  }

  /**
   * The employee summarys&#39; initials
   * @return initials
   */
  @javax.annotation.Nullable
  public String getInitials() {
    return initials;
  }

  public void setInitials(String initials) {
    this.initials = initials;
  }


  public EmployeeSummary1 lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The employee summarys&#39; last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public EmployeeSummary1 lastPayDay(LocalDate lastPayDay) {
    this.lastPayDay = lastPayDay;
    return this;
  }

  /**
   * The employee summarys&#39; last pay day
   * @return lastPayDay
   */
  @javax.annotation.Nullable
  public LocalDate getLastPayDay() {
    return lastPayDay;
  }

  public void setLastPayDay(LocalDate lastPayDay) {
    this.lastPayDay = lastPayDay;
  }


  public EmployeeSummary1 lastPayDaySchedule(String lastPayDaySchedule) {
    this.lastPayDaySchedule = lastPayDaySchedule;
    return this;
  }

  /**
   * The employee summarys&#39; last pay day schedule
   * @return lastPayDaySchedule
   */
  @javax.annotation.Nullable
  public String getLastPayDaySchedule() {
    return lastPayDaySchedule;
  }

  public void setLastPayDaySchedule(String lastPayDaySchedule) {
    this.lastPayDaySchedule = lastPayDaySchedule;
  }


  public EmployeeSummary1 lastPayDayTaxYear(Integer lastPayDayTaxYear) {
    this.lastPayDayTaxYear = lastPayDayTaxYear;
    return this;
  }

  /**
   * The employee summarys&#39; last pay day tax year
   * @return lastPayDayTaxYear
   */
  @javax.annotation.Nullable
  public Integer getLastPayDayTaxYear() {
    return lastPayDayTaxYear;
  }

  public void setLastPayDayTaxYear(Integer lastPayDayTaxYear) {
    this.lastPayDayTaxYear = lastPayDayTaxYear;
  }


  public EmployeeSummary1 leavingDate(LocalDate leavingDate) {
    this.leavingDate = leavingDate;
    return this;
  }

  /**
   * The employee summarys&#39; leaving date
   * @return leavingDate
   */
  @javax.annotation.Nullable
  public LocalDate getLeavingDate() {
    return leavingDate;
  }

  public void setLeavingDate(LocalDate leavingDate) {
    this.leavingDate = leavingDate;
  }


  public EmployeeSummary1 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The employee summarys&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public EmployeeSummary1 nextPayDay(LocalDate nextPayDay) {
    this.nextPayDay = nextPayDay;
    return this;
  }

  /**
   * The employee summarys&#39; next pay day
   * @return nextPayDay
   */
  @javax.annotation.Nullable
  public LocalDate getNextPayDay() {
    return nextPayDay;
  }

  public void setNextPayDay(LocalDate nextPayDay) {
    this.nextPayDay = nextPayDay;
  }


  public EmployeeSummary1 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The employee summarys&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public EmployeeSummary1 niLetter(String niLetter) {
    this.niLetter = niLetter;
    return this;
  }

  /**
   * The employee summarys&#39; ni letter
   * @return niLetter
   */
  @javax.annotation.Nullable
  public String getNiLetter() {
    return niLetter;
  }

  public void setNiLetter(String niLetter) {
    this.niLetter = niLetter;
  }


  public EmployeeSummary1 niNumber(String niNumber) {
    this.niNumber = niNumber;
    return this;
  }

  /**
   * The employee summarys&#39; ni number
   * @return niNumber
   */
  @javax.annotation.Nullable
  public String getNiNumber() {
    return niNumber;
  }

  public void setNiNumber(String niNumber) {
    this.niNumber = niNumber;
  }


  public EmployeeSummary1 payScheduleLink(PayScheduleLink payScheduleLink) {
    this.payScheduleLink = payScheduleLink;
    return this;
  }

  /**
   * Get payScheduleLink
   * @return payScheduleLink
   */
  @javax.annotation.Nullable
  public PayScheduleLink getPayScheduleLink() {
    return payScheduleLink;
  }

  public void setPayScheduleLink(PayScheduleLink payScheduleLink) {
    this.payScheduleLink = payScheduleLink;
  }


  public EmployeeSummary1 payScheduleName(String payScheduleName) {
    this.payScheduleName = payScheduleName;
    return this;
  }

  /**
   * The employee summarys&#39; pay schedule name
   * @return payScheduleName
   */
  @javax.annotation.Nullable
  public String getPayScheduleName() {
    return payScheduleName;
  }

  public void setPayScheduleName(String payScheduleName) {
    this.payScheduleName = payScheduleName;
  }


  public EmployeeSummary1 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The employee summarys&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public EmployeeSummary1 startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The employee summarys&#39; start date
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public EmployeeSummary1 status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The employee summarys&#39; status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public EmployeeSummary1 taxBasis(TaxBasisEnum taxBasis) {
    this.taxBasis = taxBasis;
    return this;
  }

  /**
   * The employee summarys&#39; tax basis
   * @return taxBasis
   */
  @javax.annotation.Nullable
  public TaxBasisEnum getTaxBasis() {
    return taxBasis;
  }

  public void setTaxBasis(TaxBasisEnum taxBasis) {
    this.taxBasis = taxBasis;
  }


  public EmployeeSummary1 taxCode(String taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   * The employee summarys&#39; tax code
   * @return taxCode
   */
  @javax.annotation.Nullable
  public String getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(String taxCode) {
    this.taxCode = taxCode;
  }


  public EmployeeSummary1 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The employee summarys&#39; title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EmployeeSummary1 uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

  /**
   * The employee summarys&#39; unique key
   * @return uniqueKey
   */
  @javax.annotation.Nullable
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeSummary1 employeeSummary1 = (EmployeeSummary1) o;
    return Objects.equals(this.code, employeeSummary1.code) &&
        Objects.equals(this.effectiveDate, employeeSummary1.effectiveDate) &&
        Objects.equals(this.employeeLink, employeeSummary1.employeeLink) &&
        Objects.equals(this.employerLink, employeeSummary1.employerLink) &&
        Objects.equals(this.firstName, employeeSummary1.firstName) &&
        Objects.equals(this.initials, employeeSummary1.initials) &&
        Objects.equals(this.lastName, employeeSummary1.lastName) &&
        Objects.equals(this.lastPayDay, employeeSummary1.lastPayDay) &&
        Objects.equals(this.lastPayDaySchedule, employeeSummary1.lastPayDaySchedule) &&
        Objects.equals(this.lastPayDayTaxYear, employeeSummary1.lastPayDayTaxYear) &&
        Objects.equals(this.leavingDate, employeeSummary1.leavingDate) &&
        Objects.equals(this.metaData, employeeSummary1.metaData) &&
        Objects.equals(this.nextPayDay, employeeSummary1.nextPayDay) &&
        Objects.equals(this.nextRevisionDate, employeeSummary1.nextRevisionDate) &&
        Objects.equals(this.niLetter, employeeSummary1.niLetter) &&
        Objects.equals(this.niNumber, employeeSummary1.niNumber) &&
        Objects.equals(this.payScheduleLink, employeeSummary1.payScheduleLink) &&
        Objects.equals(this.payScheduleName, employeeSummary1.payScheduleName) &&
        Objects.equals(this.revision, employeeSummary1.revision) &&
        Objects.equals(this.startDate, employeeSummary1.startDate) &&
        Objects.equals(this.status, employeeSummary1.status) &&
        Objects.equals(this.taxBasis, employeeSummary1.taxBasis) &&
        Objects.equals(this.taxCode, employeeSummary1.taxCode) &&
        Objects.equals(this.title, employeeSummary1.title) &&
        Objects.equals(this.uniqueKey, employeeSummary1.uniqueKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, effectiveDate, employeeLink, employerLink, firstName, initials, lastName, lastPayDay, lastPayDaySchedule, lastPayDayTaxYear, leavingDate, metaData, nextPayDay, nextRevisionDate, niLetter, niNumber, payScheduleLink, payScheduleName, revision, startDate, status, taxBasis, taxCode, title, uniqueKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeSummary1 {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employeeLink: ").append(toIndentedString(employeeLink)).append("\n");
    sb.append("    employerLink: ").append(toIndentedString(employerLink)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    lastPayDay: ").append(toIndentedString(lastPayDay)).append("\n");
    sb.append("    lastPayDaySchedule: ").append(toIndentedString(lastPayDaySchedule)).append("\n");
    sb.append("    lastPayDayTaxYear: ").append(toIndentedString(lastPayDayTaxYear)).append("\n");
    sb.append("    leavingDate: ").append(toIndentedString(leavingDate)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    nextPayDay: ").append(toIndentedString(nextPayDay)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    niLetter: ").append(toIndentedString(niLetter)).append("\n");
    sb.append("    niNumber: ").append(toIndentedString(niNumber)).append("\n");
    sb.append("    payScheduleLink: ").append(toIndentedString(payScheduleLink)).append("\n");
    sb.append("    payScheduleName: ").append(toIndentedString(payScheduleName)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxBasis: ").append(toIndentedString(taxBasis)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Code");
    openapiFields.add("EffectiveDate");
    openapiFields.add("EmployeeLink");
    openapiFields.add("EmployerLink");
    openapiFields.add("FirstName");
    openapiFields.add("Initials");
    openapiFields.add("LastName");
    openapiFields.add("LastPayDay");
    openapiFields.add("LastPayDaySchedule");
    openapiFields.add("LastPayDayTaxYear");
    openapiFields.add("LeavingDate");
    openapiFields.add("MetaData");
    openapiFields.add("NextPayDay");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("NiLetter");
    openapiFields.add("NiNumber");
    openapiFields.add("PayScheduleLink");
    openapiFields.add("PayScheduleName");
    openapiFields.add("Revision");
    openapiFields.add("StartDate");
    openapiFields.add("Status");
    openapiFields.add("TaxBasis");
    openapiFields.add("TaxCode");
    openapiFields.add("Title");
    openapiFields.add("UniqueKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmployeeSummary1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmployeeSummary1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeSummary1 is not found in the empty JSON string", EmployeeSummary1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmployeeSummary1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmployeeSummary1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      // validate the optional field `EmployeeLink`
      if (jsonObj.get("EmployeeLink") != null && !jsonObj.get("EmployeeLink").isJsonNull()) {
        EmployeeLink.validateJsonElement(jsonObj.get("EmployeeLink"));
      }
      // validate the optional field `EmployerLink`
      if (jsonObj.get("EmployerLink") != null && !jsonObj.get("EmployerLink").isJsonNull()) {
        EmployerLink.validateJsonElement(jsonObj.get("EmployerLink"));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Initials") != null && !jsonObj.get("Initials").isJsonNull()) && !jsonObj.get("Initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Initials").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("LastPayDaySchedule") != null && !jsonObj.get("LastPayDaySchedule").isJsonNull()) && !jsonObj.get("LastPayDaySchedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastPayDaySchedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastPayDaySchedule").toString()));
      }
      if ((jsonObj.get("NiLetter") != null && !jsonObj.get("NiLetter").isJsonNull()) && !jsonObj.get("NiLetter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NiLetter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NiLetter").toString()));
      }
      if ((jsonObj.get("NiNumber") != null && !jsonObj.get("NiNumber").isJsonNull()) && !jsonObj.get("NiNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NiNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NiNumber").toString()));
      }
      // validate the optional field `PayScheduleLink`
      if (jsonObj.get("PayScheduleLink") != null && !jsonObj.get("PayScheduleLink").isJsonNull()) {
        PayScheduleLink.validateJsonElement(jsonObj.get("PayScheduleLink"));
      }
      if ((jsonObj.get("PayScheduleName") != null && !jsonObj.get("PayScheduleName").isJsonNull()) && !jsonObj.get("PayScheduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayScheduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayScheduleName").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TaxBasis") != null && !jsonObj.get("TaxBasis").isJsonNull()) && !jsonObj.get("TaxBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxBasis").toString()));
      }
      // validate the optional field `TaxBasis`
      if (jsonObj.get("TaxBasis") != null && !jsonObj.get("TaxBasis").isJsonNull()) {
        TaxBasisEnum.validateJsonElement(jsonObj.get("TaxBasis"));
      }
      if ((jsonObj.get("TaxCode") != null && !jsonObj.get("TaxCode").isJsonNull()) && !jsonObj.get("TaxCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxCode").toString()));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("UniqueKey") != null && !jsonObj.get("UniqueKey").isJsonNull()) && !jsonObj.get("UniqueKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UniqueKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UniqueKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeSummary1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeSummary1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeSummary1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeSummary1.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeSummary1>() {
           @Override
           public void write(JsonWriter out, EmployeeSummary1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeSummary1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmployeeSummary1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmployeeSummary1
   * @throws IOException if the JSON string is invalid with respect to EmployeeSummary1
   */
  public static EmployeeSummary1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeSummary1.class);
  }

  /**
   * Convert an instance of EmployeeSummary1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

