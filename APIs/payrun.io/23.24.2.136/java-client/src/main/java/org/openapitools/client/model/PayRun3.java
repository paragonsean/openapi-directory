/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.PaySchedule2;
import org.openapitools.client.model.ProceedingPayRun;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayRun3
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayRun3 {
  public static final String SERIALIZED_NAME_EXECUTED = "Executed";
  @SerializedName(SERIALIZED_NAME_EXECUTED)
  private OffsetDateTime executed;

  public static final String SERIALIZED_NAME_IS_SUPPLEMENTARY = "IsSupplementary";
  @SerializedName(SERIALIZED_NAME_IS_SUPPLEMENTARY)
  private Boolean isSupplementary;

  /**
   * The pay runs&#39; pay frequency
   */
  @JsonAdapter(PayFrequencyEnum.Adapter.class)
  public enum PayFrequencyEnum {
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    TWO_WEEKLY("TwoWeekly"),
    
    FOUR_WEEKLY("FourWeekly"),
    
    YEARLY("Yearly");

    private String value;

    PayFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayFrequencyEnum fromValue(String value) {
      for (PayFrequencyEnum b : PayFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private PayFrequencyEnum payFrequency;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE = "PaySchedule";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE)
  private PaySchedule2 paySchedule;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "PaymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private LocalDate paymentDate;

  public static final String SERIALIZED_NAME_PERIOD_END = "PeriodEnd";
  @SerializedName(SERIALIZED_NAME_PERIOD_END)
  private LocalDate periodEnd;

  public static final String SERIALIZED_NAME_PERIOD_START = "PeriodStart";
  @SerializedName(SERIALIZED_NAME_PERIOD_START)
  private LocalDate periodStart;

  public static final String SERIALIZED_NAME_PROCEEDING_PAY_RUN = "ProceedingPayRun";
  @SerializedName(SERIALIZED_NAME_PROCEEDING_PAY_RUN)
  private ProceedingPayRun proceedingPayRun;

  public static final String SERIALIZED_NAME_SEQUENCE = "Sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_TAX_PERIOD = "TaxPeriod";
  @SerializedName(SERIALIZED_NAME_TAX_PERIOD)
  private Integer taxPeriod;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public PayRun3() {
  }

  public PayRun3 executed(OffsetDateTime executed) {
    this.executed = executed;
    return this;
  }

  /**
   * The pay runs&#39; executed
   * @return executed
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExecuted() {
    return executed;
  }

  public void setExecuted(OffsetDateTime executed) {
    this.executed = executed;
  }


  public PayRun3 isSupplementary(Boolean isSupplementary) {
    this.isSupplementary = isSupplementary;
    return this;
  }

  /**
   * The pay runs&#39; is supplementary
   * @return isSupplementary
   */
  @javax.annotation.Nullable
  public Boolean getIsSupplementary() {
    return isSupplementary;
  }

  public void setIsSupplementary(Boolean isSupplementary) {
    this.isSupplementary = isSupplementary;
  }


  public PayRun3 payFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
    return this;
  }

  /**
   * The pay runs&#39; pay frequency
   * @return payFrequency
   */
  @javax.annotation.Nullable
  public PayFrequencyEnum getPayFrequency() {
    return payFrequency;
  }

  public void setPayFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
  }


  public PayRun3 paySchedule(PaySchedule2 paySchedule) {
    this.paySchedule = paySchedule;
    return this;
  }

  /**
   * Get paySchedule
   * @return paySchedule
   */
  @javax.annotation.Nullable
  public PaySchedule2 getPaySchedule() {
    return paySchedule;
  }

  public void setPaySchedule(PaySchedule2 paySchedule) {
    this.paySchedule = paySchedule;
  }


  public PayRun3 paymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * The pay runs&#39; payment date
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
  }


  public PayRun3 periodEnd(LocalDate periodEnd) {
    this.periodEnd = periodEnd;
    return this;
  }

  /**
   * The pay runs&#39; period end
   * @return periodEnd
   */
  @javax.annotation.Nullable
  public LocalDate getPeriodEnd() {
    return periodEnd;
  }

  public void setPeriodEnd(LocalDate periodEnd) {
    this.periodEnd = periodEnd;
  }


  public PayRun3 periodStart(LocalDate periodStart) {
    this.periodStart = periodStart;
    return this;
  }

  /**
   * The pay runs&#39; period start
   * @return periodStart
   */
  @javax.annotation.Nullable
  public LocalDate getPeriodStart() {
    return periodStart;
  }

  public void setPeriodStart(LocalDate periodStart) {
    this.periodStart = periodStart;
  }


  public PayRun3 proceedingPayRun(ProceedingPayRun proceedingPayRun) {
    this.proceedingPayRun = proceedingPayRun;
    return this;
  }

  /**
   * Get proceedingPayRun
   * @return proceedingPayRun
   */
  @javax.annotation.Nullable
  public ProceedingPayRun getProceedingPayRun() {
    return proceedingPayRun;
  }

  public void setProceedingPayRun(ProceedingPayRun proceedingPayRun) {
    this.proceedingPayRun = proceedingPayRun;
  }


  public PayRun3 sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

  /**
   * The pay runs&#39; sequence
   * @return sequence
   */
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public PayRun3 taxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
    return this;
  }

  /**
   * The pay runs&#39; tax period
   * @return taxPeriod
   */
  @javax.annotation.Nullable
  public Integer getTaxPeriod() {
    return taxPeriod;
  }

  public void setTaxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
  }


  public PayRun3 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The pay runs&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayRun3 payRun3 = (PayRun3) o;
    return Objects.equals(this.executed, payRun3.executed) &&
        Objects.equals(this.isSupplementary, payRun3.isSupplementary) &&
        Objects.equals(this.payFrequency, payRun3.payFrequency) &&
        Objects.equals(this.paySchedule, payRun3.paySchedule) &&
        Objects.equals(this.paymentDate, payRun3.paymentDate) &&
        Objects.equals(this.periodEnd, payRun3.periodEnd) &&
        Objects.equals(this.periodStart, payRun3.periodStart) &&
        Objects.equals(this.proceedingPayRun, payRun3.proceedingPayRun) &&
        Objects.equals(this.sequence, payRun3.sequence) &&
        Objects.equals(this.taxPeriod, payRun3.taxPeriod) &&
        Objects.equals(this.taxYear, payRun3.taxYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(executed, isSupplementary, payFrequency, paySchedule, paymentDate, periodEnd, periodStart, proceedingPayRun, sequence, taxPeriod, taxYear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayRun3 {\n");
    sb.append("    executed: ").append(toIndentedString(executed)).append("\n");
    sb.append("    isSupplementary: ").append(toIndentedString(isSupplementary)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    paySchedule: ").append(toIndentedString(paySchedule)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    periodEnd: ").append(toIndentedString(periodEnd)).append("\n");
    sb.append("    periodStart: ").append(toIndentedString(periodStart)).append("\n");
    sb.append("    proceedingPayRun: ").append(toIndentedString(proceedingPayRun)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    taxPeriod: ").append(toIndentedString(taxPeriod)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Executed");
    openapiFields.add("IsSupplementary");
    openapiFields.add("PayFrequency");
    openapiFields.add("PaySchedule");
    openapiFields.add("PaymentDate");
    openapiFields.add("PeriodEnd");
    openapiFields.add("PeriodStart");
    openapiFields.add("ProceedingPayRun");
    openapiFields.add("Sequence");
    openapiFields.add("TaxPeriod");
    openapiFields.add("TaxYear");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayRun3
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayRun3.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayRun3 is not found in the empty JSON string", PayRun3.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayRun3.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayRun3` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      // validate the optional field `PayFrequency`
      if (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) {
        PayFrequencyEnum.validateJsonElement(jsonObj.get("PayFrequency"));
      }
      // validate the optional field `PaySchedule`
      if (jsonObj.get("PaySchedule") != null && !jsonObj.get("PaySchedule").isJsonNull()) {
        PaySchedule2.validateJsonElement(jsonObj.get("PaySchedule"));
      }
      // validate the optional field `ProceedingPayRun`
      if (jsonObj.get("ProceedingPayRun") != null && !jsonObj.get("ProceedingPayRun").isJsonNull()) {
        ProceedingPayRun.validateJsonElement(jsonObj.get("ProceedingPayRun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayRun3.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayRun3' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayRun3> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayRun3.class));

       return (TypeAdapter<T>) new TypeAdapter<PayRun3>() {
           @Override
           public void write(JsonWriter out, PayRun3 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayRun3 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayRun3 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayRun3
   * @throws IOException if the JSON string is invalid with respect to PayRun3
   */
  public static PayRun3 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayRun3.class);
  }

  /**
   * Convert an instance of PayRun3 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

