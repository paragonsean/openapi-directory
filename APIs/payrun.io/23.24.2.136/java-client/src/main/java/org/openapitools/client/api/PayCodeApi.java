/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.PayCode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PayCodeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayCodeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PayCodeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePayCode
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayCodeValidateBeforeCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling deletePayCode(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling deletePayCode(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePayCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deletePayCode(Async)");
        }

        return deletePayCodeCall(employerId, payCodeId, authorization, apiVersion, _callback);

    }

    /**
     * Deletes a pay code
     * Delete the specified pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayCode(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        deletePayCodeWithHttpInfo(employerId, payCodeId, authorization, apiVersion);
    }

    /**
     * Deletes a pay code
     * Delete the specified pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayCodeWithHttpInfo(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deletePayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a pay code (asynchronously)
     * Delete the specified pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeAsync(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayCodeRevision
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeRevisionCall(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()))
            .replace("{" + "EffectiveDate" + "}", localVarApiClient.escapeString(effectiveDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayCodeRevisionValidateBeforeCall(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling deletePayCodeRevision(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling deletePayCodeRevision(Async)");
        }

        // verify the required parameter 'effectiveDate' is set
        if (effectiveDate == null) {
            throw new ApiException("Missing the required parameter 'effectiveDate' when calling deletePayCodeRevision(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePayCodeRevision(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deletePayCodeRevision(Async)");
        }

        return deletePayCodeRevisionCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, _callback);

    }

    /**
     * Deletes a pay code revision
     * Delete the pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayCodeRevision(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        deletePayCodeRevisionWithHttpInfo(employerId, payCodeId, effectiveDate, authorization, apiVersion);
    }

    /**
     * Deletes a pay code revision
     * Delete the pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayCodeRevisionWithHttpInfo(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deletePayCodeRevisionValidateBeforeCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a pay code revision (asynchronously)
     * Delete the pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeRevisionAsync(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayCodeRevisionValidateBeforeCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePayCodeRevisionByNumber
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeRevisionByNumberCall(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()))
            .replace("{" + "RevisionNumber" + "}", localVarApiClient.escapeString(revisionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePayCodeRevisionByNumberValidateBeforeCall(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling deletePayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling deletePayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'revisionNumber' is set
        if (revisionNumber == null) {
            throw new ApiException("Missing the required parameter 'revisionNumber' when calling deletePayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deletePayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deletePayCodeRevisionByNumber(Async)");
        }

        return deletePayCodeRevisionByNumberCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, _callback);

    }

    /**
     * Delete an PayCode revision matching the specified revision number.
     * Deletes the specified pay code revision for the matching revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deletePayCodeRevisionByNumber(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion) throws ApiException {
        deletePayCodeRevisionByNumberWithHttpInfo(employerId, payCodeId, revisionNumber, authorization, apiVersion);
    }

    /**
     * Delete an PayCode revision matching the specified revision number.
     * Deletes the specified pay code revision for the matching revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePayCodeRevisionByNumberWithHttpInfo(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deletePayCodeRevisionByNumberValidateBeforeCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an PayCode revision matching the specified revision number. (asynchronously)
     * Deletes the specified pay code revision for the matching revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePayCodeRevisionByNumberAsync(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePayCodeRevisionByNumberValidateBeforeCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPayCodeTags_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPayCodeTags_0Call(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCodes/Tags"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPayCodeTags_0ValidateBeforeCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getAllPayCodeTags_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAllPayCodeTags_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getAllPayCodeTags_0(Async)");
        }

        return getAllPayCodeTags_0Call(employerId, authorization, apiVersion, _callback);

    }

    /**
     * Get all pay code tags
     * Gets all the pay code tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getAllPayCodeTags_0(String employerId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getAllPayCodeTags_0WithHttpInfo(employerId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all pay code tags
     * Gets all the pay code tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getAllPayCodeTags_0WithHttpInfo(String employerId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllPayCodeTags_0ValidateBeforeCall(employerId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all pay code tags (asynchronously)
     * Gets all the pay code tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPayCodeTags_0Async(String employerId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPayCodeTags_0ValidateBeforeCall(employerId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodeByEffectiveDate
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeByEffectiveDateCall(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}/{EffectiveDate}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()))
            .replace("{" + "EffectiveDate" + "}", localVarApiClient.escapeString(effectiveDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodeByEffectiveDateValidateBeforeCall(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodeByEffectiveDate(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling getPayCodeByEffectiveDate(Async)");
        }

        // verify the required parameter 'effectiveDate' is set
        if (effectiveDate == null) {
            throw new ApiException("Missing the required parameter 'effectiveDate' when calling getPayCodeByEffectiveDate(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodeByEffectiveDate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodeByEffectiveDate(Async)");
        }

        return getPayCodeByEffectiveDateCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, _callback);

    }

    /**
     * Gets pay code for specified date
     * Gets the pay code revision for the specified effective date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return PayCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PayCode getPayCodeByEffectiveDate(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        ApiResponse<PayCode> localVarResp = getPayCodeByEffectiveDateWithHttpInfo(employerId, payCodeId, effectiveDate, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets pay code for specified date
     * Gets the pay code revision for the specified effective date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;PayCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayCode> getPayCodeByEffectiveDateWithHttpInfo(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodeByEffectiveDateValidateBeforeCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets pay code for specified date (asynchronously)
     * Gets the pay code revision for the specified effective date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeByEffectiveDateAsync(String employerId, String payCodeId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback<PayCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodeByEffectiveDateValidateBeforeCall(employerId, payCodeId, effectiveDate, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodeFromEmployer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeFromEmployerCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodeFromEmployerValidateBeforeCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodeFromEmployer(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling getPayCodeFromEmployer(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodeFromEmployer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodeFromEmployer(Async)");
        }

        return getPayCodeFromEmployerCall(employerId, payCodeId, authorization, apiVersion, _callback);

    }

    /**
     * Gets the specified pay code from the employer
     * Returns the specified pay code from the employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return PayCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PayCode getPayCodeFromEmployer(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<PayCode> localVarResp = getPayCodeFromEmployerWithHttpInfo(employerId, payCodeId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the specified pay code from the employer
     * Returns the specified pay code from the employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;PayCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayCode> getPayCodeFromEmployerWithHttpInfo(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodeFromEmployerValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the specified pay code from the employer (asynchronously)
     * Returns the specified pay code from the employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeFromEmployerAsync(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback<PayCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodeFromEmployerValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodeRevisionByNumber
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeRevisionByNumberCall(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}/Revision/{RevisionNumber}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()))
            .replace("{" + "RevisionNumber" + "}", localVarApiClient.escapeString(revisionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodeRevisionByNumberValidateBeforeCall(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling getPayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'revisionNumber' is set
        if (revisionNumber == null) {
            throw new ApiException("Missing the required parameter 'revisionNumber' when calling getPayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodeRevisionByNumber(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodeRevisionByNumber(Async)");
        }

        return getPayCodeRevisionByNumberCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, _callback);

    }

    /**
     * Gets the pay code by revision number
     * Get the pay code revision matching the specified revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return PayCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PayCode getPayCodeRevisionByNumber(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion) throws ApiException {
        ApiResponse<PayCode> localVarResp = getPayCodeRevisionByNumberWithHttpInfo(employerId, payCodeId, revisionNumber, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the pay code by revision number
     * Get the pay code revision matching the specified revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;PayCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayCode> getPayCodeRevisionByNumberWithHttpInfo(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodeRevisionByNumberValidateBeforeCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the pay code by revision number (asynchronously)
     * Get the pay code revision matching the specified revision number
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param revisionNumber The revision number. E.g. 1 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeRevisionByNumberAsync(String employerId, String payCodeId, String revisionNumber, String authorization, String apiVersion, final ApiCallback<PayCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodeRevisionByNumberValidateBeforeCall(employerId, payCodeId, revisionNumber, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodeRevisions
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeRevisionsCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}/Revisions"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodeRevisionsValidateBeforeCall(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodeRevisions(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling getPayCodeRevisions(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodeRevisions(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodeRevisions(Async)");
        }

        return getPayCodeRevisionsCall(employerId, payCodeId, authorization, apiVersion, _callback);

    }

    /**
     * Get all revisions of the Pay Code
     * Returns links to all revisions of the pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getPayCodeRevisions(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getPayCodeRevisionsWithHttpInfo(employerId, payCodeId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all revisions of the Pay Code
     * Returns links to all revisions of the pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getPayCodeRevisionsWithHttpInfo(String employerId, String payCodeId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodeRevisionsValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all revisions of the Pay Code (asynchronously)
     * Returns links to all revisions of the pay code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodeRevisionsAsync(String employerId, String payCodeId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodeRevisionsValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodesByEffectiveDate
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesByEffectiveDateCall(String employerId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCodes/{EffectiveDate}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "EffectiveDate" + "}", localVarApiClient.escapeString(effectiveDate.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodesByEffectiveDateValidateBeforeCall(String employerId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodesByEffectiveDate(Async)");
        }

        // verify the required parameter 'effectiveDate' is set
        if (effectiveDate == null) {
            throw new ApiException("Missing the required parameter 'effectiveDate' when calling getPayCodesByEffectiveDate(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodesByEffectiveDate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodesByEffectiveDate(Async)");
        }

        return getPayCodesByEffectiveDateCall(employerId, effectiveDate, authorization, apiVersion, _callback);

    }

    /**
     * Gets all pay codes for specified date
     * Gets the effective pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getPayCodesByEffectiveDate(String employerId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getPayCodesByEffectiveDateWithHttpInfo(employerId, effectiveDate, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all pay codes for specified date
     * Gets the effective pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getPayCodesByEffectiveDateWithHttpInfo(String employerId, LocalDate effectiveDate, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodesByEffectiveDateValidateBeforeCall(employerId, effectiveDate, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all pay codes for specified date (asynchronously)
     * Gets the effective pay code revision for the specified date
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param effectiveDate The effective date to be applied. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesByEffectiveDateAsync(String employerId, LocalDate effectiveDate, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodesByEffectiveDateValidateBeforeCall(employerId, effectiveDate, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodesFromEmployer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesFromEmployerCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCodes"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodesFromEmployerValidateBeforeCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodesFromEmployer(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodesFromEmployer(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodesFromEmployer(Async)");
        }

        return getPayCodesFromEmployerCall(employerId, authorization, apiVersion, _callback);

    }

    /**
     * Gets the pay codes from the employer
     * Get links to all the pay codes for the specified employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getPayCodesFromEmployer(String employerId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getPayCodesFromEmployerWithHttpInfo(employerId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the pay codes from the employer
     * Get links to all the pay codes for the specified employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getPayCodesFromEmployerWithHttpInfo(String employerId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodesFromEmployerValidateBeforeCall(employerId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the pay codes from the employer (asynchronously)
     * Get links to all the pay codes for the specified employer
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesFromEmployerAsync(String employerId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodesFromEmployerValidateBeforeCall(employerId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodesFromNominalCode
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param nominalCodeId The nominal code unique identifier. E.g. NOM001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesFromNominalCodeCall(String employerId, String nominalCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/NominalCode/{NominalCodeId}/PayCodes"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "NominalCodeId" + "}", localVarApiClient.escapeString(nominalCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodesFromNominalCodeValidateBeforeCall(String employerId, String nominalCodeId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodesFromNominalCode(Async)");
        }

        // verify the required parameter 'nominalCodeId' is set
        if (nominalCodeId == null) {
            throw new ApiException("Missing the required parameter 'nominalCodeId' when calling getPayCodesFromNominalCode(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodesFromNominalCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodesFromNominalCode(Async)");
        }

        return getPayCodesFromNominalCodeCall(employerId, nominalCodeId, authorization, apiVersion, _callback);

    }

    /**
     * Gets the pay codes by nominal code
     * Get the pay codes that share the specified nominal code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param nominalCodeId The nominal code unique identifier. E.g. NOM001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getPayCodesFromNominalCode(String employerId, String nominalCodeId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getPayCodesFromNominalCodeWithHttpInfo(employerId, nominalCodeId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets the pay codes by nominal code
     * Get the pay codes that share the specified nominal code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param nominalCodeId The nominal code unique identifier. E.g. NOM001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getPayCodesFromNominalCodeWithHttpInfo(String employerId, String nominalCodeId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodesFromNominalCodeValidateBeforeCall(employerId, nominalCodeId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the pay codes by nominal code (asynchronously)
     * Get the pay codes that share the specified nominal code
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param nominalCodeId The nominal code unique identifier. E.g. NOM001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesFromNominalCodeAsync(String employerId, String nominalCodeId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodesFromNominalCodeValidateBeforeCall(employerId, nominalCodeId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayCodesWithTag_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesWithTag_0Call(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCodes/Tag/{TagId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "TagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayCodesWithTag_0ValidateBeforeCall(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getPayCodesWithTag_0(Async)");
        }

        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getPayCodesWithTag_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayCodesWithTag_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayCodesWithTag_0(Async)");
        }

        return getPayCodesWithTag_0Call(employerId, tagId, authorization, apiVersion, _callback);

    }

    /**
     * Get pay codes with tag
     * Gets the pay codes with the tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getPayCodesWithTag_0(String employerId, String tagId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getPayCodesWithTag_0WithHttpInfo(employerId, tagId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get pay codes with tag
     * Gets the pay codes with the tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getPayCodesWithTag_0WithHttpInfo(String employerId, String tagId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPayCodesWithTag_0ValidateBeforeCall(employerId, tagId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pay codes with tag (asynchronously)
     * Gets the pay codes with the tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayCodesWithTag_0Async(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayCodesWithTag_0ValidateBeforeCall(employerId, tagId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchPayCode
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPayCodeCall(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payCode;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchPayCodeValidateBeforeCall(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling patchPayCode(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling patchPayCode(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling patchPayCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling patchPayCode(Async)");
        }

        // verify the required parameter 'payCode' is set
        if (payCode == null) {
            throw new ApiException("Missing the required parameter 'payCode' when calling patchPayCode(Async)");
        }

        return patchPayCodeCall(employerId, payCodeId, authorization, apiVersion, payCode, _callback);

    }

    /**
     * Patches the pay code
     * Patches the specified pay code object with the supplied values
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return PayCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PayCode patchPayCode(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        ApiResponse<PayCode> localVarResp = patchPayCodeWithHttpInfo(employerId, payCodeId, authorization, apiVersion, payCode);
        return localVarResp.getData();
    }

    /**
     * Patches the pay code
     * Patches the specified pay code object with the supplied values
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return ApiResponse&lt;PayCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayCode> patchPayCodeWithHttpInfo(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        okhttp3.Call localVarCall = patchPayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, payCode, null);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patches the pay code (asynchronously)
     * Patches the specified pay code object with the supplied values
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchPayCodeAsync(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback<PayCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchPayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, payCode, _callback);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPayCode
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayCodeCall(String employerId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payCode;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCodes"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPayCodeValidateBeforeCall(String employerId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling postPayCode(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postPayCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postPayCode(Async)");
        }

        // verify the required parameter 'payCode' is set
        if (payCode == null) {
            throw new ApiException("Missing the required parameter 'payCode' when calling postPayCode(Async)");
        }

        return postPayCodeCall(employerId, authorization, apiVersion, payCode, _callback);

    }

    /**
     * Create a new pay code
     * Create a new pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Link postPayCode(String employerId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        ApiResponse<Link> localVarResp = postPayCodeWithHttpInfo(employerId, authorization, apiVersion, payCode);
        return localVarResp.getData();
    }

    /**
     * Create a new pay code
     * Create a new pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Link> postPayCodeWithHttpInfo(String employerId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        okhttp3.Call localVarCall = postPayCodeValidateBeforeCall(employerId, authorization, apiVersion, payCode, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new pay code (asynchronously)
     * Create a new pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPayCodeAsync(String employerId, String authorization, String apiVersion, PayCode payCode, final ApiCallback<Link> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPayCodeValidateBeforeCall(employerId, authorization, apiVersion, payCode, _callback);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPayCode
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPayCodeCall(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = payCode;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/PayCode/{PayCodeId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "PayCodeId" + "}", localVarApiClient.escapeString(payCodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPayCodeValidateBeforeCall(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling putPayCode(Async)");
        }

        // verify the required parameter 'payCodeId' is set
        if (payCodeId == null) {
            throw new ApiException("Missing the required parameter 'payCodeId' when calling putPayCode(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putPayCode(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putPayCode(Async)");
        }

        // verify the required parameter 'payCode' is set
        if (payCode == null) {
            throw new ApiException("Missing the required parameter 'payCode' when calling putPayCode(Async)");
        }

        return putPayCodeCall(employerId, payCodeId, authorization, apiVersion, payCode, _callback);

    }

    /**
     * Updates a pay code
     * Updates the existing specified pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return PayCode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public PayCode putPayCode(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        ApiResponse<PayCode> localVarResp = putPayCodeWithHttpInfo(employerId, payCodeId, authorization, apiVersion, payCode);
        return localVarResp.getData();
    }

    /**
     * Updates a pay code
     * Updates the existing specified pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @return ApiResponse&lt;PayCode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PayCode> putPayCodeWithHttpInfo(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode) throws ApiException {
        okhttp3.Call localVarCall = putPayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, payCode, null);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a pay code (asynchronously)
     * Updates the existing specified pay code object
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param payCodeId The pay code unique identifier. E.g. BASIC (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param payCode The pay code object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pay code object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPayCodeAsync(String employerId, String payCodeId, String authorization, String apiVersion, PayCode payCode, final ApiCallback<PayCode> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPayCodeValidateBeforeCall(employerId, payCodeId, authorization, apiVersion, payCode, _callback);
        Type localVarReturnType = new TypeToken<PayCode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
