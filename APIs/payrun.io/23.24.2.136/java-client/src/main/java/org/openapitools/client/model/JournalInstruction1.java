/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JournalInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JournalInstruction1 {
  /**
   * The journal instructions&#39; accounting type
   */
  @JsonAdapter(AccountingTypeEnum.Adapter.class)
  public enum AccountingTypeEnum {
    CREDIT("Credit"),
    
    DEBIT("Debit");

    private String value;

    AccountingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountingTypeEnum fromValue(String value) {
      for (AccountingTypeEnum b : AccountingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AccountingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AccountingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNTING_TYPE = "AccountingType";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_TYPE)
  private AccountingTypeEnum accountingType;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_EXPRESSION = "Expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_JOURNAL_LINE_TAG = "JournalLineTag";
  @SerializedName(SERIALIZED_NAME_JOURNAL_LINE_TAG)
  private String journalLineTag;

  public static final String SERIALIZED_NAME_LEDGER_TARGET = "LedgerTarget";
  @SerializedName(SERIALIZED_NAME_LEDGER_TARGET)
  private String ledgerTarget;

  public static final String SERIALIZED_NAME_NOM_CODE = "NomCode";
  @SerializedName(SERIALIZED_NAME_NOM_CODE)
  private String nomCode;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_SUB_NOM_CODE = "SubNomCode";
  @SerializedName(SERIALIZED_NAME_SUB_NOM_CODE)
  private String subNomCode;

  public JournalInstruction1() {
  }

  public JournalInstruction1 accountingType(AccountingTypeEnum accountingType) {
    this.accountingType = accountingType;
    return this;
  }

  /**
   * The journal instructions&#39; accounting type
   * @return accountingType
   */
  @javax.annotation.Nullable
  public AccountingTypeEnum getAccountingType() {
    return accountingType;
  }

  public void setAccountingType(AccountingTypeEnum accountingType) {
    this.accountingType = accountingType;
  }


  public JournalInstruction1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The journal instructions&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JournalInstruction1 endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The journal instructions&#39; end date
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public JournalInstruction1 expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * The journal instructions&#39; expression
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public JournalInstruction1 journalLineTag(String journalLineTag) {
    this.journalLineTag = journalLineTag;
    return this;
  }

  /**
   * The journal instructions&#39; journal line tag
   * @return journalLineTag
   */
  @javax.annotation.Nullable
  public String getJournalLineTag() {
    return journalLineTag;
  }

  public void setJournalLineTag(String journalLineTag) {
    this.journalLineTag = journalLineTag;
  }


  public JournalInstruction1 ledgerTarget(String ledgerTarget) {
    this.ledgerTarget = ledgerTarget;
    return this;
  }

  /**
   * The journal instructions&#39; ledger target
   * @return ledgerTarget
   */
  @javax.annotation.Nullable
  public String getLedgerTarget() {
    return ledgerTarget;
  }

  public void setLedgerTarget(String ledgerTarget) {
    this.ledgerTarget = ledgerTarget;
  }


  public JournalInstruction1 nomCode(String nomCode) {
    this.nomCode = nomCode;
    return this;
  }

  /**
   * The journal instructions&#39; nom code
   * @return nomCode
   */
  @javax.annotation.Nullable
  public String getNomCode() {
    return nomCode;
  }

  public void setNomCode(String nomCode) {
    this.nomCode = nomCode;
  }


  public JournalInstruction1 startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The journal instructions&#39; start date
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public JournalInstruction1 subNomCode(String subNomCode) {
    this.subNomCode = subNomCode;
    return this;
  }

  /**
   * The journal instructions&#39; sub nom code
   * @return subNomCode
   */
  @javax.annotation.Nullable
  public String getSubNomCode() {
    return subNomCode;
  }

  public void setSubNomCode(String subNomCode) {
    this.subNomCode = subNomCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JournalInstruction1 journalInstruction1 = (JournalInstruction1) o;
    return Objects.equals(this.accountingType, journalInstruction1.accountingType) &&
        Objects.equals(this.description, journalInstruction1.description) &&
        Objects.equals(this.endDate, journalInstruction1.endDate) &&
        Objects.equals(this.expression, journalInstruction1.expression) &&
        Objects.equals(this.journalLineTag, journalInstruction1.journalLineTag) &&
        Objects.equals(this.ledgerTarget, journalInstruction1.ledgerTarget) &&
        Objects.equals(this.nomCode, journalInstruction1.nomCode) &&
        Objects.equals(this.startDate, journalInstruction1.startDate) &&
        Objects.equals(this.subNomCode, journalInstruction1.subNomCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingType, description, endDate, expression, journalLineTag, ledgerTarget, nomCode, startDate, subNomCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JournalInstruction1 {\n");
    sb.append("    accountingType: ").append(toIndentedString(accountingType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    journalLineTag: ").append(toIndentedString(journalLineTag)).append("\n");
    sb.append("    ledgerTarget: ").append(toIndentedString(ledgerTarget)).append("\n");
    sb.append("    nomCode: ").append(toIndentedString(nomCode)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    subNomCode: ").append(toIndentedString(subNomCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountingType");
    openapiFields.add("Description");
    openapiFields.add("EndDate");
    openapiFields.add("Expression");
    openapiFields.add("JournalLineTag");
    openapiFields.add("LedgerTarget");
    openapiFields.add("NomCode");
    openapiFields.add("StartDate");
    openapiFields.add("SubNomCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JournalInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JournalInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JournalInstruction1 is not found in the empty JSON string", JournalInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JournalInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JournalInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountingType") != null && !jsonObj.get("AccountingType").isJsonNull()) && !jsonObj.get("AccountingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountingType").toString()));
      }
      // validate the optional field `AccountingType`
      if (jsonObj.get("AccountingType") != null && !jsonObj.get("AccountingType").isJsonNull()) {
        AccountingTypeEnum.validateJsonElement(jsonObj.get("AccountingType"));
      }
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Expression") != null && !jsonObj.get("Expression").isJsonNull()) && !jsonObj.get("Expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Expression").toString()));
      }
      if ((jsonObj.get("JournalLineTag") != null && !jsonObj.get("JournalLineTag").isJsonNull()) && !jsonObj.get("JournalLineTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JournalLineTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JournalLineTag").toString()));
      }
      if ((jsonObj.get("LedgerTarget") != null && !jsonObj.get("LedgerTarget").isJsonNull()) && !jsonObj.get("LedgerTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LedgerTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LedgerTarget").toString()));
      }
      if ((jsonObj.get("NomCode") != null && !jsonObj.get("NomCode").isJsonNull()) && !jsonObj.get("NomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NomCode").toString()));
      }
      if ((jsonObj.get("SubNomCode") != null && !jsonObj.get("SubNomCode").isJsonNull()) && !jsonObj.get("SubNomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubNomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubNomCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JournalInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JournalInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JournalInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JournalInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<JournalInstruction1>() {
           @Override
           public void write(JsonWriter out, JournalInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JournalInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JournalInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JournalInstruction1
   * @throws IOException if the JSON string is invalid with respect to JournalInstruction1
   */
  public static JournalInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JournalInstruction1.class);
  }

  /**
   * Convert an instance of JournalInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

