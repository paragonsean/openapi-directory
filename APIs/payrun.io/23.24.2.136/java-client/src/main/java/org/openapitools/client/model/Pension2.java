/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.PensionablePayCodes;
import org.openapitools.client.model.QualifyingPayCodes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pension2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Pension2 {
  public static final String SERIALIZED_NAME_AE_COMPATIBLE = "AECompatible";
  @SerializedName(SERIALIZED_NAME_AE_COMPATIBLE)
  private Boolean aeCompatible;

  /**
   * The pensions&#39; certification
   */
  @JsonAdapter(CertificationEnum.Adapter.class)
  public enum CertificationEnum {
    NOT_SET("NotSet"),
    
    SET1("Set1"),
    
    SET2("Set2"),
    
    SET3("Set3");

    private String value;

    CertificationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificationEnum fromValue(String value) {
      for (CertificationEnum b : CertificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATION = "Certification";
  @SerializedName(SERIALIZED_NAME_CERTIFICATION)
  private CertificationEnum certification;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CONTRIBUTION_DEDUCTION_DAY = "ContributionDeductionDay";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTION_DEDUCTION_DAY)
  private Integer contributionDeductionDay;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_CONTRIBUTION_CASH = "EmployeeContributionCash";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CONTRIBUTION_CASH)
  private Double employeeContributionCash;

  public static final String SERIALIZED_NAME_EMPLOYEE_CONTRIBUTION_PERCENT = "EmployeeContributionPercent";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_CONTRIBUTION_PERCENT)
  private Double employeeContributionPercent;

  public static final String SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_CASH = "EmployerContributionCash";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_CASH)
  private Double employerContributionCash;

  public static final String SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_PERCENT = "EmployerContributionPercent";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_CONTRIBUTION_PERCENT)
  private Double employerContributionPercent;

  public static final String SERIALIZED_NAME_EMPLOYER_NI_SAVING = "EmployerNiSaving";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NI_SAVING)
  private Boolean employerNiSaving;

  public static final String SERIALIZED_NAME_EMPLOYER_NI_SAVING_PERCENTAGE = "EmployerNiSavingPercentage";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NI_SAVING_PERCENTAGE)
  private Double employerNiSavingPercentage;

  public static final String SERIALIZED_NAME_GROUP = "Group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_LOWER_THRESHOLD = "LowerThreshold";
  @SerializedName(SERIALIZED_NAME_LOWER_THRESHOLD)
  private Double lowerThreshold;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_PENSIONABLE_PAY_CODES = "PensionablePayCodes";
  @SerializedName(SERIALIZED_NAME_PENSIONABLE_PAY_CODES)
  private PensionablePayCodes pensionablePayCodes;

  /**
   * The pensions&#39; pro rata method
   */
  @JsonAdapter(ProRataMethodEnum.Adapter.class)
  public enum ProRataMethodEnum {
    NOT_SET("NotSet"),
    
    ANNUAL260_DAYS("Annual260Days"),
    
    ANNUAL365_DAYS("Annual365Days"),
    
    ANNUAL_QUALIFYING_DAYS("AnnualQualifyingDays"),
    
    DAYS_PER_CALENDAR_MONTH("DaysPerCalendarMonth"),
    
    DAYS_PER_TAX_PERIOD("DaysPerTaxPeriod"),
    
    WORKING_DAYS_PER_CALENDAR_MONTH("WorkingDaysPerCalendarMonth"),
    
    WEEK_DAYS_PER_CALENDAR_MONTH("WeekDaysPerCalendarMonth");

    private String value;

    ProRataMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProRataMethodEnum fromValue(String value) {
      for (ProRataMethodEnum b : ProRataMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProRataMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProRataMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProRataMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProRataMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProRataMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PRO_RATA_METHOD = "ProRataMethod";
  @SerializedName(SERIALIZED_NAME_PRO_RATA_METHOD)
  private ProRataMethodEnum proRataMethod;

  public static final String SERIALIZED_NAME_PROVIDER_EMPLOYER_REF = "ProviderEmployerRef";
  @SerializedName(SERIALIZED_NAME_PROVIDER_EMPLOYER_REF)
  private String providerEmployerRef;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "ProviderName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_QUALIFYING_PAY_CODES = "QualifyingPayCodes";
  @SerializedName(SERIALIZED_NAME_QUALIFYING_PAY_CODES)
  private QualifyingPayCodes qualifyingPayCodes;

  /**
   * The pensions&#39; ras rounding override
   */
  @JsonAdapter(RasRoundingOverrideEnum.Adapter.class)
  public enum RasRoundingOverrideEnum {
    NOT_SET("NotSet"),
    
    PENNY_UP("PennyUp"),
    
    PENNY_DOWN("PennyDown"),
    
    BANKERS("Bankers"),
    
    FIVE_UP("FiveUp"),
    
    FIVE_DOWN("FiveDown"),
    
    FLOOR("Floor"),
    
    CEILING("Ceiling");

    private String value;

    RasRoundingOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RasRoundingOverrideEnum fromValue(String value) {
      for (RasRoundingOverrideEnum b : RasRoundingOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RasRoundingOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RasRoundingOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RasRoundingOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RasRoundingOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RasRoundingOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RAS_ROUNDING_OVERRIDE = "RasRoundingOverride";
  @SerializedName(SERIALIZED_NAME_RAS_ROUNDING_OVERRIDE)
  private RasRoundingOverrideEnum rasRoundingOverride;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  /**
   * The pensions&#39; rounding option
   */
  @JsonAdapter(RoundingOptionEnum.Adapter.class)
  public enum RoundingOptionEnum {
    NOT_SET("NotSet"),
    
    PENNY_UP("PennyUp"),
    
    PENNY_DOWN("PennyDown"),
    
    BANKERS("Bankers"),
    
    FIVE_UP("FiveUp"),
    
    FIVE_DOWN("FiveDown"),
    
    FLOOR("Floor"),
    
    CEILING("Ceiling");

    private String value;

    RoundingOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoundingOptionEnum fromValue(String value) {
      for (RoundingOptionEnum b : RoundingOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoundingOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoundingOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoundingOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoundingOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoundingOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROUNDING_OPTION = "RoundingOption";
  @SerializedName(SERIALIZED_NAME_ROUNDING_OPTION)
  private RoundingOptionEnum roundingOption;

  public static final String SERIALIZED_NAME_SALARY_SACRIFICE = "SalarySacrifice";
  @SerializedName(SERIALIZED_NAME_SALARY_SACRIFICE)
  private Boolean salarySacrifice;

  public static final String SERIALIZED_NAME_SCHEME_NAME = "SchemeName";
  @SerializedName(SERIALIZED_NAME_SCHEME_NAME)
  private String schemeName;

  public static final String SERIALIZED_NAME_SUB_GROUP = "SubGroup";
  @SerializedName(SERIALIZED_NAME_SUB_GROUP)
  private String subGroup;

  /**
   * The pensions&#39; taxation method
   */
  @JsonAdapter(TaxationMethodEnum.Adapter.class)
  public enum TaxationMethodEnum {
    NOT_SET("NotSet"),
    
    NET_BASED("NetBased"),
    
    RELIEF_AT_SOURCE("ReliefAtSource"),
    
    TAX_RELIEF_EXCLUDED("TaxReliefExcluded");

    private String value;

    TaxationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TaxationMethodEnum fromValue(String value) {
      for (TaxationMethodEnum b : TaxationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TaxationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TaxationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TaxationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TaxationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TaxationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TAXATION_METHOD = "TaxationMethod";
  @SerializedName(SERIALIZED_NAME_TAXATION_METHOD)
  private TaxationMethodEnum taxationMethod;

  public static final String SERIALIZED_NAME_UPPER_THRESHOLD = "UpperThreshold";
  @SerializedName(SERIALIZED_NAME_UPPER_THRESHOLD)
  private Double upperThreshold;

  public static final String SERIALIZED_NAME_USE_A_E_THRESHOLDS = "UseAEThresholds";
  @SerializedName(SERIALIZED_NAME_USE_A_E_THRESHOLDS)
  private Boolean useAEThresholds;

  public Pension2() {
  }

  public Pension2 aeCompatible(Boolean aeCompatible) {
    this.aeCompatible = aeCompatible;
    return this;
  }

  /**
   * The pensions&#39; a e compatible
   * @return aeCompatible
   */
  @javax.annotation.Nullable
  public Boolean getAeCompatible() {
    return aeCompatible;
  }

  public void setAeCompatible(Boolean aeCompatible) {
    this.aeCompatible = aeCompatible;
  }


  public Pension2 certification(CertificationEnum certification) {
    this.certification = certification;
    return this;
  }

  /**
   * The pensions&#39; certification
   * @return certification
   */
  @javax.annotation.Nullable
  public CertificationEnum getCertification() {
    return certification;
  }

  public void setCertification(CertificationEnum certification) {
    this.certification = certification;
  }


  public Pension2 code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The pensions&#39; code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Pension2 contributionDeductionDay(Integer contributionDeductionDay) {
    this.contributionDeductionDay = contributionDeductionDay;
    return this;
  }

  /**
   * The pensions&#39; contribution deduction day
   * @return contributionDeductionDay
   */
  @javax.annotation.Nullable
  public Integer getContributionDeductionDay() {
    return contributionDeductionDay;
  }

  public void setContributionDeductionDay(Integer contributionDeductionDay) {
    this.contributionDeductionDay = contributionDeductionDay;
  }


  public Pension2 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The pensions&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public Pension2 employeeContributionCash(Double employeeContributionCash) {
    this.employeeContributionCash = employeeContributionCash;
    return this;
  }

  /**
   * The pensions&#39; employee contribution cash
   * @return employeeContributionCash
   */
  @javax.annotation.Nullable
  public Double getEmployeeContributionCash() {
    return employeeContributionCash;
  }

  public void setEmployeeContributionCash(Double employeeContributionCash) {
    this.employeeContributionCash = employeeContributionCash;
  }


  public Pension2 employeeContributionPercent(Double employeeContributionPercent) {
    this.employeeContributionPercent = employeeContributionPercent;
    return this;
  }

  /**
   * The pensions&#39; employee contribution percent
   * @return employeeContributionPercent
   */
  @javax.annotation.Nullable
  public Double getEmployeeContributionPercent() {
    return employeeContributionPercent;
  }

  public void setEmployeeContributionPercent(Double employeeContributionPercent) {
    this.employeeContributionPercent = employeeContributionPercent;
  }


  public Pension2 employerContributionCash(Double employerContributionCash) {
    this.employerContributionCash = employerContributionCash;
    return this;
  }

  /**
   * The pensions&#39; employer contribution cash
   * @return employerContributionCash
   */
  @javax.annotation.Nullable
  public Double getEmployerContributionCash() {
    return employerContributionCash;
  }

  public void setEmployerContributionCash(Double employerContributionCash) {
    this.employerContributionCash = employerContributionCash;
  }


  public Pension2 employerContributionPercent(Double employerContributionPercent) {
    this.employerContributionPercent = employerContributionPercent;
    return this;
  }

  /**
   * The pensions&#39; employer contribution percent
   * @return employerContributionPercent
   */
  @javax.annotation.Nullable
  public Double getEmployerContributionPercent() {
    return employerContributionPercent;
  }

  public void setEmployerContributionPercent(Double employerContributionPercent) {
    this.employerContributionPercent = employerContributionPercent;
  }


  public Pension2 employerNiSaving(Boolean employerNiSaving) {
    this.employerNiSaving = employerNiSaving;
    return this;
  }

  /**
   * The pensions&#39; employer ni saving
   * @return employerNiSaving
   */
  @javax.annotation.Nullable
  public Boolean getEmployerNiSaving() {
    return employerNiSaving;
  }

  public void setEmployerNiSaving(Boolean employerNiSaving) {
    this.employerNiSaving = employerNiSaving;
  }


  public Pension2 employerNiSavingPercentage(Double employerNiSavingPercentage) {
    this.employerNiSavingPercentage = employerNiSavingPercentage;
    return this;
  }

  /**
   * The pensions&#39; employer ni saving percentage
   * @return employerNiSavingPercentage
   */
  @javax.annotation.Nullable
  public Double getEmployerNiSavingPercentage() {
    return employerNiSavingPercentage;
  }

  public void setEmployerNiSavingPercentage(Double employerNiSavingPercentage) {
    this.employerNiSavingPercentage = employerNiSavingPercentage;
  }


  public Pension2 group(String group) {
    this.group = group;
    return this;
  }

  /**
   * The pensions&#39; group
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Pension2 lowerThreshold(Double lowerThreshold) {
    this.lowerThreshold = lowerThreshold;
    return this;
  }

  /**
   * The pensions&#39; lower threshold
   * @return lowerThreshold
   */
  @javax.annotation.Nullable
  public Double getLowerThreshold() {
    return lowerThreshold;
  }

  public void setLowerThreshold(Double lowerThreshold) {
    this.lowerThreshold = lowerThreshold;
  }


  public Pension2 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The pensions&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public Pension2 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The pensions&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public Pension2 pensionablePayCodes(PensionablePayCodes pensionablePayCodes) {
    this.pensionablePayCodes = pensionablePayCodes;
    return this;
  }

  /**
   * Get pensionablePayCodes
   * @return pensionablePayCodes
   */
  @javax.annotation.Nullable
  public PensionablePayCodes getPensionablePayCodes() {
    return pensionablePayCodes;
  }

  public void setPensionablePayCodes(PensionablePayCodes pensionablePayCodes) {
    this.pensionablePayCodes = pensionablePayCodes;
  }


  public Pension2 proRataMethod(ProRataMethodEnum proRataMethod) {
    this.proRataMethod = proRataMethod;
    return this;
  }

  /**
   * The pensions&#39; pro rata method
   * @return proRataMethod
   */
  @javax.annotation.Nullable
  public ProRataMethodEnum getProRataMethod() {
    return proRataMethod;
  }

  public void setProRataMethod(ProRataMethodEnum proRataMethod) {
    this.proRataMethod = proRataMethod;
  }


  public Pension2 providerEmployerRef(String providerEmployerRef) {
    this.providerEmployerRef = providerEmployerRef;
    return this;
  }

  /**
   * The pensions&#39; provider employer ref
   * @return providerEmployerRef
   */
  @javax.annotation.Nullable
  public String getProviderEmployerRef() {
    return providerEmployerRef;
  }

  public void setProviderEmployerRef(String providerEmployerRef) {
    this.providerEmployerRef = providerEmployerRef;
  }


  public Pension2 providerName(String providerName) {
    this.providerName = providerName;
    return this;
  }

  /**
   * The pensions&#39; provider name
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }

  public void setProviderName(String providerName) {
    this.providerName = providerName;
  }


  public Pension2 qualifyingPayCodes(QualifyingPayCodes qualifyingPayCodes) {
    this.qualifyingPayCodes = qualifyingPayCodes;
    return this;
  }

  /**
   * Get qualifyingPayCodes
   * @return qualifyingPayCodes
   */
  @javax.annotation.Nullable
  public QualifyingPayCodes getQualifyingPayCodes() {
    return qualifyingPayCodes;
  }

  public void setQualifyingPayCodes(QualifyingPayCodes qualifyingPayCodes) {
    this.qualifyingPayCodes = qualifyingPayCodes;
  }


  public Pension2 rasRoundingOverride(RasRoundingOverrideEnum rasRoundingOverride) {
    this.rasRoundingOverride = rasRoundingOverride;
    return this;
  }

  /**
   * The pensions&#39; ras rounding override
   * @return rasRoundingOverride
   */
  @javax.annotation.Nullable
  public RasRoundingOverrideEnum getRasRoundingOverride() {
    return rasRoundingOverride;
  }

  public void setRasRoundingOverride(RasRoundingOverrideEnum rasRoundingOverride) {
    this.rasRoundingOverride = rasRoundingOverride;
  }


  public Pension2 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The pensions&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public Pension2 roundingOption(RoundingOptionEnum roundingOption) {
    this.roundingOption = roundingOption;
    return this;
  }

  /**
   * The pensions&#39; rounding option
   * @return roundingOption
   */
  @javax.annotation.Nullable
  public RoundingOptionEnum getRoundingOption() {
    return roundingOption;
  }

  public void setRoundingOption(RoundingOptionEnum roundingOption) {
    this.roundingOption = roundingOption;
  }


  public Pension2 salarySacrifice(Boolean salarySacrifice) {
    this.salarySacrifice = salarySacrifice;
    return this;
  }

  /**
   * The pensions&#39; salary sacrifice
   * @return salarySacrifice
   */
  @javax.annotation.Nullable
  public Boolean getSalarySacrifice() {
    return salarySacrifice;
  }

  public void setSalarySacrifice(Boolean salarySacrifice) {
    this.salarySacrifice = salarySacrifice;
  }


  public Pension2 schemeName(String schemeName) {
    this.schemeName = schemeName;
    return this;
  }

  /**
   * The pensions&#39; scheme name
   * @return schemeName
   */
  @javax.annotation.Nullable
  public String getSchemeName() {
    return schemeName;
  }

  public void setSchemeName(String schemeName) {
    this.schemeName = schemeName;
  }


  public Pension2 subGroup(String subGroup) {
    this.subGroup = subGroup;
    return this;
  }

  /**
   * The pensions&#39; sub group
   * @return subGroup
   */
  @javax.annotation.Nullable
  public String getSubGroup() {
    return subGroup;
  }

  public void setSubGroup(String subGroup) {
    this.subGroup = subGroup;
  }


  public Pension2 taxationMethod(TaxationMethodEnum taxationMethod) {
    this.taxationMethod = taxationMethod;
    return this;
  }

  /**
   * The pensions&#39; taxation method
   * @return taxationMethod
   */
  @javax.annotation.Nullable
  public TaxationMethodEnum getTaxationMethod() {
    return taxationMethod;
  }

  public void setTaxationMethod(TaxationMethodEnum taxationMethod) {
    this.taxationMethod = taxationMethod;
  }


  public Pension2 upperThreshold(Double upperThreshold) {
    this.upperThreshold = upperThreshold;
    return this;
  }

  /**
   * The pensions&#39; upper threshold
   * @return upperThreshold
   */
  @javax.annotation.Nullable
  public Double getUpperThreshold() {
    return upperThreshold;
  }

  public void setUpperThreshold(Double upperThreshold) {
    this.upperThreshold = upperThreshold;
  }


  public Pension2 useAEThresholds(Boolean useAEThresholds) {
    this.useAEThresholds = useAEThresholds;
    return this;
  }

  /**
   * The pensions&#39; use a e thresholds
   * @return useAEThresholds
   */
  @javax.annotation.Nullable
  public Boolean getUseAEThresholds() {
    return useAEThresholds;
  }

  public void setUseAEThresholds(Boolean useAEThresholds) {
    this.useAEThresholds = useAEThresholds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pension2 pension2 = (Pension2) o;
    return Objects.equals(this.aeCompatible, pension2.aeCompatible) &&
        Objects.equals(this.certification, pension2.certification) &&
        Objects.equals(this.code, pension2.code) &&
        Objects.equals(this.contributionDeductionDay, pension2.contributionDeductionDay) &&
        Objects.equals(this.effectiveDate, pension2.effectiveDate) &&
        Objects.equals(this.employeeContributionCash, pension2.employeeContributionCash) &&
        Objects.equals(this.employeeContributionPercent, pension2.employeeContributionPercent) &&
        Objects.equals(this.employerContributionCash, pension2.employerContributionCash) &&
        Objects.equals(this.employerContributionPercent, pension2.employerContributionPercent) &&
        Objects.equals(this.employerNiSaving, pension2.employerNiSaving) &&
        Objects.equals(this.employerNiSavingPercentage, pension2.employerNiSavingPercentage) &&
        Objects.equals(this.group, pension2.group) &&
        Objects.equals(this.lowerThreshold, pension2.lowerThreshold) &&
        Objects.equals(this.metaData, pension2.metaData) &&
        Objects.equals(this.nextRevisionDate, pension2.nextRevisionDate) &&
        Objects.equals(this.pensionablePayCodes, pension2.pensionablePayCodes) &&
        Objects.equals(this.proRataMethod, pension2.proRataMethod) &&
        Objects.equals(this.providerEmployerRef, pension2.providerEmployerRef) &&
        Objects.equals(this.providerName, pension2.providerName) &&
        Objects.equals(this.qualifyingPayCodes, pension2.qualifyingPayCodes) &&
        Objects.equals(this.rasRoundingOverride, pension2.rasRoundingOverride) &&
        Objects.equals(this.revision, pension2.revision) &&
        Objects.equals(this.roundingOption, pension2.roundingOption) &&
        Objects.equals(this.salarySacrifice, pension2.salarySacrifice) &&
        Objects.equals(this.schemeName, pension2.schemeName) &&
        Objects.equals(this.subGroup, pension2.subGroup) &&
        Objects.equals(this.taxationMethod, pension2.taxationMethod) &&
        Objects.equals(this.upperThreshold, pension2.upperThreshold) &&
        Objects.equals(this.useAEThresholds, pension2.useAEThresholds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aeCompatible, certification, code, contributionDeductionDay, effectiveDate, employeeContributionCash, employeeContributionPercent, employerContributionCash, employerContributionPercent, employerNiSaving, employerNiSavingPercentage, group, lowerThreshold, metaData, nextRevisionDate, pensionablePayCodes, proRataMethod, providerEmployerRef, providerName, qualifyingPayCodes, rasRoundingOverride, revision, roundingOption, salarySacrifice, schemeName, subGroup, taxationMethod, upperThreshold, useAEThresholds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pension2 {\n");
    sb.append("    aeCompatible: ").append(toIndentedString(aeCompatible)).append("\n");
    sb.append("    certification: ").append(toIndentedString(certification)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    contributionDeductionDay: ").append(toIndentedString(contributionDeductionDay)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employeeContributionCash: ").append(toIndentedString(employeeContributionCash)).append("\n");
    sb.append("    employeeContributionPercent: ").append(toIndentedString(employeeContributionPercent)).append("\n");
    sb.append("    employerContributionCash: ").append(toIndentedString(employerContributionCash)).append("\n");
    sb.append("    employerContributionPercent: ").append(toIndentedString(employerContributionPercent)).append("\n");
    sb.append("    employerNiSaving: ").append(toIndentedString(employerNiSaving)).append("\n");
    sb.append("    employerNiSavingPercentage: ").append(toIndentedString(employerNiSavingPercentage)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    lowerThreshold: ").append(toIndentedString(lowerThreshold)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    pensionablePayCodes: ").append(toIndentedString(pensionablePayCodes)).append("\n");
    sb.append("    proRataMethod: ").append(toIndentedString(proRataMethod)).append("\n");
    sb.append("    providerEmployerRef: ").append(toIndentedString(providerEmployerRef)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    qualifyingPayCodes: ").append(toIndentedString(qualifyingPayCodes)).append("\n");
    sb.append("    rasRoundingOverride: ").append(toIndentedString(rasRoundingOverride)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    roundingOption: ").append(toIndentedString(roundingOption)).append("\n");
    sb.append("    salarySacrifice: ").append(toIndentedString(salarySacrifice)).append("\n");
    sb.append("    schemeName: ").append(toIndentedString(schemeName)).append("\n");
    sb.append("    subGroup: ").append(toIndentedString(subGroup)).append("\n");
    sb.append("    taxationMethod: ").append(toIndentedString(taxationMethod)).append("\n");
    sb.append("    upperThreshold: ").append(toIndentedString(upperThreshold)).append("\n");
    sb.append("    useAEThresholds: ").append(toIndentedString(useAEThresholds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AECompatible");
    openapiFields.add("Certification");
    openapiFields.add("Code");
    openapiFields.add("ContributionDeductionDay");
    openapiFields.add("EffectiveDate");
    openapiFields.add("EmployeeContributionCash");
    openapiFields.add("EmployeeContributionPercent");
    openapiFields.add("EmployerContributionCash");
    openapiFields.add("EmployerContributionPercent");
    openapiFields.add("EmployerNiSaving");
    openapiFields.add("EmployerNiSavingPercentage");
    openapiFields.add("Group");
    openapiFields.add("LowerThreshold");
    openapiFields.add("MetaData");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("PensionablePayCodes");
    openapiFields.add("ProRataMethod");
    openapiFields.add("ProviderEmployerRef");
    openapiFields.add("ProviderName");
    openapiFields.add("QualifyingPayCodes");
    openapiFields.add("RasRoundingOverride");
    openapiFields.add("Revision");
    openapiFields.add("RoundingOption");
    openapiFields.add("SalarySacrifice");
    openapiFields.add("SchemeName");
    openapiFields.add("SubGroup");
    openapiFields.add("TaxationMethod");
    openapiFields.add("UpperThreshold");
    openapiFields.add("UseAEThresholds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Pension2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Pension2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Pension2 is not found in the empty JSON string", Pension2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Pension2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Pension2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Certification") != null && !jsonObj.get("Certification").isJsonNull()) && !jsonObj.get("Certification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Certification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Certification").toString()));
      }
      // validate the optional field `Certification`
      if (jsonObj.get("Certification") != null && !jsonObj.get("Certification").isJsonNull()) {
        CertificationEnum.validateJsonElement(jsonObj.get("Certification"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("Group") != null && !jsonObj.get("Group").isJsonNull()) && !jsonObj.get("Group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Group").toString()));
      }
      // validate the optional field `PensionablePayCodes`
      if (jsonObj.get("PensionablePayCodes") != null && !jsonObj.get("PensionablePayCodes").isJsonNull()) {
        PensionablePayCodes.validateJsonElement(jsonObj.get("PensionablePayCodes"));
      }
      if ((jsonObj.get("ProRataMethod") != null && !jsonObj.get("ProRataMethod").isJsonNull()) && !jsonObj.get("ProRataMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProRataMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProRataMethod").toString()));
      }
      // validate the optional field `ProRataMethod`
      if (jsonObj.get("ProRataMethod") != null && !jsonObj.get("ProRataMethod").isJsonNull()) {
        ProRataMethodEnum.validateJsonElement(jsonObj.get("ProRataMethod"));
      }
      if ((jsonObj.get("ProviderEmployerRef") != null && !jsonObj.get("ProviderEmployerRef").isJsonNull()) && !jsonObj.get("ProviderEmployerRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderEmployerRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderEmployerRef").toString()));
      }
      if ((jsonObj.get("ProviderName") != null && !jsonObj.get("ProviderName").isJsonNull()) && !jsonObj.get("ProviderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProviderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProviderName").toString()));
      }
      // validate the optional field `QualifyingPayCodes`
      if (jsonObj.get("QualifyingPayCodes") != null && !jsonObj.get("QualifyingPayCodes").isJsonNull()) {
        QualifyingPayCodes.validateJsonElement(jsonObj.get("QualifyingPayCodes"));
      }
      if ((jsonObj.get("RasRoundingOverride") != null && !jsonObj.get("RasRoundingOverride").isJsonNull()) && !jsonObj.get("RasRoundingOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RasRoundingOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RasRoundingOverride").toString()));
      }
      // validate the optional field `RasRoundingOverride`
      if (jsonObj.get("RasRoundingOverride") != null && !jsonObj.get("RasRoundingOverride").isJsonNull()) {
        RasRoundingOverrideEnum.validateJsonElement(jsonObj.get("RasRoundingOverride"));
      }
      if ((jsonObj.get("RoundingOption") != null && !jsonObj.get("RoundingOption").isJsonNull()) && !jsonObj.get("RoundingOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoundingOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoundingOption").toString()));
      }
      // validate the optional field `RoundingOption`
      if (jsonObj.get("RoundingOption") != null && !jsonObj.get("RoundingOption").isJsonNull()) {
        RoundingOptionEnum.validateJsonElement(jsonObj.get("RoundingOption"));
      }
      if ((jsonObj.get("SchemeName") != null && !jsonObj.get("SchemeName").isJsonNull()) && !jsonObj.get("SchemeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SchemeName").toString()));
      }
      if ((jsonObj.get("SubGroup") != null && !jsonObj.get("SubGroup").isJsonNull()) && !jsonObj.get("SubGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubGroup").toString()));
      }
      if ((jsonObj.get("TaxationMethod") != null && !jsonObj.get("TaxationMethod").isJsonNull()) && !jsonObj.get("TaxationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxationMethod").toString()));
      }
      // validate the optional field `TaxationMethod`
      if (jsonObj.get("TaxationMethod") != null && !jsonObj.get("TaxationMethod").isJsonNull()) {
        TaxationMethodEnum.validateJsonElement(jsonObj.get("TaxationMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Pension2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Pension2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Pension2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Pension2.class));

       return (TypeAdapter<T>) new TypeAdapter<Pension2>() {
           @Override
           public void write(JsonWriter out, Pension2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Pension2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Pension2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Pension2
   * @throws IOException if the JSON string is invalid with respect to Pension2
   */
  public static Pension2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Pension2.class);
  }

  /**
   * Convert an instance of Pension2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

