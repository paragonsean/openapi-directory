/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EmployerSummary1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EmployerSummary1 {
  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_UNIQUE_KEY = "UniqueKey";
  @SerializedName(SERIALIZED_NAME_UNIQUE_KEY)
  private String uniqueKey;

  public EmployerSummary1() {
  }

  public EmployerSummary1 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The employer summarys&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public EmployerSummary1 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The employer summarys&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public EmployerSummary1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The employer summarys&#39; name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public EmployerSummary1 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The employer summarys&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public EmployerSummary1 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The employer summarys&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public EmployerSummary1 uniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
    return this;
  }

  /**
   * The employer summarys&#39; unique key
   * @return uniqueKey
   */
  @javax.annotation.Nullable
  public String getUniqueKey() {
    return uniqueKey;
  }

  public void setUniqueKey(String uniqueKey) {
    this.uniqueKey = uniqueKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployerSummary1 employerSummary1 = (EmployerSummary1) o;
    return Objects.equals(this.effectiveDate, employerSummary1.effectiveDate) &&
        Objects.equals(this.metaData, employerSummary1.metaData) &&
        Objects.equals(this.name, employerSummary1.name) &&
        Objects.equals(this.nextRevisionDate, employerSummary1.nextRevisionDate) &&
        Objects.equals(this.revision, employerSummary1.revision) &&
        Objects.equals(this.uniqueKey, employerSummary1.uniqueKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(effectiveDate, metaData, name, nextRevisionDate, revision, uniqueKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployerSummary1 {\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    uniqueKey: ").append(toIndentedString(uniqueKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EffectiveDate");
    openapiFields.add("MetaData");
    openapiFields.add("Name");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("Revision");
    openapiFields.add("UniqueKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmployerSummary1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmployerSummary1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployerSummary1 is not found in the empty JSON string", EmployerSummary1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmployerSummary1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmployerSummary1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("UniqueKey") != null && !jsonObj.get("UniqueKey").isJsonNull()) && !jsonObj.get("UniqueKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UniqueKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UniqueKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployerSummary1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployerSummary1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployerSummary1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployerSummary1.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployerSummary1>() {
           @Override
           public void write(JsonWriter out, EmployerSummary1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployerSummary1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmployerSummary1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmployerSummary1
   * @throws IOException if the JSON string is invalid with respect to EmployerSummary1
   */
  public static EmployerSummary1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployerSummary1.class);
  }

  /**
   * Convert an instance of EmployerSummary1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

