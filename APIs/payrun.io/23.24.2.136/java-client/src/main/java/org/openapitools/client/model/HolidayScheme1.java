/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.AccrualPayCodes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HolidayScheme1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HolidayScheme1 {
  public static final String SERIALIZED_NAME_ACCRUAL_PAY_CODES = "AccrualPayCodes";
  @SerializedName(SERIALIZED_NAME_ACCRUAL_PAY_CODES)
  private AccrualPayCodes accrualPayCodes;

  public static final String SERIALIZED_NAME_ALLOW_EXCEED_ANNUAL_ENTITLEMENT = "AllowExceedAnnualEntitlement";
  @SerializedName(SERIALIZED_NAME_ALLOW_EXCEED_ANNUAL_ENTITLEMENT)
  private Boolean allowExceedAnnualEntitlement;

  public static final String SERIALIZED_NAME_ALLOW_NEGATIVE_BALANCE = "AllowNegativeBalance";
  @SerializedName(SERIALIZED_NAME_ALLOW_NEGATIVE_BALANCE)
  private Boolean allowNegativeBalance;

  public static final String SERIALIZED_NAME_ANNUAL_ENTITLEMENT_WEEKS = "AnnualEntitlementWeeks";
  @SerializedName(SERIALIZED_NAME_ANNUAL_ENTITLEMENT_WEEKS)
  private Double annualEntitlementWeeks;

  public static final String SERIALIZED_NAME_BANK_HOLIDAY_INCLUSIVE = "BankHolidayInclusive";
  @SerializedName(SERIALIZED_NAME_BANK_HOLIDAY_INCLUSIVE)
  private Boolean bankHolidayInclusive;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_MAX_CARRY_OVER_DAYS = "MaxCarryOverDays";
  @SerializedName(SERIALIZED_NAME_MAX_CARRY_OVER_DAYS)
  private Double maxCarryOverDays;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_OFFSET_PAYMENT = "OffsetPayment";
  @SerializedName(SERIALIZED_NAME_OFFSET_PAYMENT)
  private Boolean offsetPayment;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  public static final String SERIALIZED_NAME_SCHEME_CEASED_DATE = "SchemeCeasedDate";
  @SerializedName(SERIALIZED_NAME_SCHEME_CEASED_DATE)
  private LocalDate schemeCeasedDate;

  public static final String SERIALIZED_NAME_SCHEME_KEY = "SchemeKey";
  @SerializedName(SERIALIZED_NAME_SCHEME_KEY)
  private String schemeKey;

  public static final String SERIALIZED_NAME_SCHEME_NAME = "SchemeName";
  @SerializedName(SERIALIZED_NAME_SCHEME_NAME)
  private String schemeName;

  public static final String SERIALIZED_NAME_YEAR_START_DAY = "YearStartDay";
  @SerializedName(SERIALIZED_NAME_YEAR_START_DAY)
  private Integer yearStartDay;

  public static final String SERIALIZED_NAME_YEAR_START_MONTH = "YearStartMonth";
  @SerializedName(SERIALIZED_NAME_YEAR_START_MONTH)
  private Integer yearStartMonth;

  public HolidayScheme1() {
  }

  public HolidayScheme1 accrualPayCodes(AccrualPayCodes accrualPayCodes) {
    this.accrualPayCodes = accrualPayCodes;
    return this;
  }

  /**
   * Get accrualPayCodes
   * @return accrualPayCodes
   */
  @javax.annotation.Nullable
  public AccrualPayCodes getAccrualPayCodes() {
    return accrualPayCodes;
  }

  public void setAccrualPayCodes(AccrualPayCodes accrualPayCodes) {
    this.accrualPayCodes = accrualPayCodes;
  }


  public HolidayScheme1 allowExceedAnnualEntitlement(Boolean allowExceedAnnualEntitlement) {
    this.allowExceedAnnualEntitlement = allowExceedAnnualEntitlement;
    return this;
  }

  /**
   * The holiday schemes&#39; allow exceed annual entitlement
   * @return allowExceedAnnualEntitlement
   */
  @javax.annotation.Nullable
  public Boolean getAllowExceedAnnualEntitlement() {
    return allowExceedAnnualEntitlement;
  }

  public void setAllowExceedAnnualEntitlement(Boolean allowExceedAnnualEntitlement) {
    this.allowExceedAnnualEntitlement = allowExceedAnnualEntitlement;
  }


  public HolidayScheme1 allowNegativeBalance(Boolean allowNegativeBalance) {
    this.allowNegativeBalance = allowNegativeBalance;
    return this;
  }

  /**
   * The holiday schemes&#39; allow negative balance
   * @return allowNegativeBalance
   */
  @javax.annotation.Nullable
  public Boolean getAllowNegativeBalance() {
    return allowNegativeBalance;
  }

  public void setAllowNegativeBalance(Boolean allowNegativeBalance) {
    this.allowNegativeBalance = allowNegativeBalance;
  }


  public HolidayScheme1 annualEntitlementWeeks(Double annualEntitlementWeeks) {
    this.annualEntitlementWeeks = annualEntitlementWeeks;
    return this;
  }

  /**
   * The holiday schemes&#39; annual entitlement weeks
   * @return annualEntitlementWeeks
   */
  @javax.annotation.Nullable
  public Double getAnnualEntitlementWeeks() {
    return annualEntitlementWeeks;
  }

  public void setAnnualEntitlementWeeks(Double annualEntitlementWeeks) {
    this.annualEntitlementWeeks = annualEntitlementWeeks;
  }


  public HolidayScheme1 bankHolidayInclusive(Boolean bankHolidayInclusive) {
    this.bankHolidayInclusive = bankHolidayInclusive;
    return this;
  }

  /**
   * The holiday schemes&#39; bank holiday inclusive
   * @return bankHolidayInclusive
   */
  @javax.annotation.Nullable
  public Boolean getBankHolidayInclusive() {
    return bankHolidayInclusive;
  }

  public void setBankHolidayInclusive(Boolean bankHolidayInclusive) {
    this.bankHolidayInclusive = bankHolidayInclusive;
  }


  public HolidayScheme1 code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The holiday schemes&#39; code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public HolidayScheme1 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The holiday schemes&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public HolidayScheme1 maxCarryOverDays(Double maxCarryOverDays) {
    this.maxCarryOverDays = maxCarryOverDays;
    return this;
  }

  /**
   * The holiday schemes&#39; max carry over days
   * @return maxCarryOverDays
   */
  @javax.annotation.Nullable
  public Double getMaxCarryOverDays() {
    return maxCarryOverDays;
  }

  public void setMaxCarryOverDays(Double maxCarryOverDays) {
    this.maxCarryOverDays = maxCarryOverDays;
  }


  public HolidayScheme1 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The holiday schemes&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public HolidayScheme1 offsetPayment(Boolean offsetPayment) {
    this.offsetPayment = offsetPayment;
    return this;
  }

  /**
   * The holiday schemes&#39; offset payment
   * @return offsetPayment
   */
  @javax.annotation.Nullable
  public Boolean getOffsetPayment() {
    return offsetPayment;
  }

  public void setOffsetPayment(Boolean offsetPayment) {
    this.offsetPayment = offsetPayment;
  }


  public HolidayScheme1 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The holiday schemes&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public HolidayScheme1 schemeCeasedDate(LocalDate schemeCeasedDate) {
    this.schemeCeasedDate = schemeCeasedDate;
    return this;
  }

  /**
   * The holiday schemes&#39; scheme ceased date
   * @return schemeCeasedDate
   */
  @javax.annotation.Nullable
  public LocalDate getSchemeCeasedDate() {
    return schemeCeasedDate;
  }

  public void setSchemeCeasedDate(LocalDate schemeCeasedDate) {
    this.schemeCeasedDate = schemeCeasedDate;
  }


  public HolidayScheme1 schemeKey(String schemeKey) {
    this.schemeKey = schemeKey;
    return this;
  }

  /**
   * The holiday schemes&#39; scheme key
   * @return schemeKey
   */
  @javax.annotation.Nullable
  public String getSchemeKey() {
    return schemeKey;
  }

  public void setSchemeKey(String schemeKey) {
    this.schemeKey = schemeKey;
  }


  public HolidayScheme1 schemeName(String schemeName) {
    this.schemeName = schemeName;
    return this;
  }

  /**
   * The holiday schemes&#39; scheme name
   * @return schemeName
   */
  @javax.annotation.Nullable
  public String getSchemeName() {
    return schemeName;
  }

  public void setSchemeName(String schemeName) {
    this.schemeName = schemeName;
  }


  public HolidayScheme1 yearStartDay(Integer yearStartDay) {
    this.yearStartDay = yearStartDay;
    return this;
  }

  /**
   * The holiday schemes&#39; year start day
   * @return yearStartDay
   */
  @javax.annotation.Nullable
  public Integer getYearStartDay() {
    return yearStartDay;
  }

  public void setYearStartDay(Integer yearStartDay) {
    this.yearStartDay = yearStartDay;
  }


  public HolidayScheme1 yearStartMonth(Integer yearStartMonth) {
    this.yearStartMonth = yearStartMonth;
    return this;
  }

  /**
   * The holiday schemes&#39; year start month
   * @return yearStartMonth
   */
  @javax.annotation.Nullable
  public Integer getYearStartMonth() {
    return yearStartMonth;
  }

  public void setYearStartMonth(Integer yearStartMonth) {
    this.yearStartMonth = yearStartMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HolidayScheme1 holidayScheme1 = (HolidayScheme1) o;
    return Objects.equals(this.accrualPayCodes, holidayScheme1.accrualPayCodes) &&
        Objects.equals(this.allowExceedAnnualEntitlement, holidayScheme1.allowExceedAnnualEntitlement) &&
        Objects.equals(this.allowNegativeBalance, holidayScheme1.allowNegativeBalance) &&
        Objects.equals(this.annualEntitlementWeeks, holidayScheme1.annualEntitlementWeeks) &&
        Objects.equals(this.bankHolidayInclusive, holidayScheme1.bankHolidayInclusive) &&
        Objects.equals(this.code, holidayScheme1.code) &&
        Objects.equals(this.effectiveDate, holidayScheme1.effectiveDate) &&
        Objects.equals(this.maxCarryOverDays, holidayScheme1.maxCarryOverDays) &&
        Objects.equals(this.nextRevisionDate, holidayScheme1.nextRevisionDate) &&
        Objects.equals(this.offsetPayment, holidayScheme1.offsetPayment) &&
        Objects.equals(this.revision, holidayScheme1.revision) &&
        Objects.equals(this.schemeCeasedDate, holidayScheme1.schemeCeasedDate) &&
        Objects.equals(this.schemeKey, holidayScheme1.schemeKey) &&
        Objects.equals(this.schemeName, holidayScheme1.schemeName) &&
        Objects.equals(this.yearStartDay, holidayScheme1.yearStartDay) &&
        Objects.equals(this.yearStartMonth, holidayScheme1.yearStartMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accrualPayCodes, allowExceedAnnualEntitlement, allowNegativeBalance, annualEntitlementWeeks, bankHolidayInclusive, code, effectiveDate, maxCarryOverDays, nextRevisionDate, offsetPayment, revision, schemeCeasedDate, schemeKey, schemeName, yearStartDay, yearStartMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HolidayScheme1 {\n");
    sb.append("    accrualPayCodes: ").append(toIndentedString(accrualPayCodes)).append("\n");
    sb.append("    allowExceedAnnualEntitlement: ").append(toIndentedString(allowExceedAnnualEntitlement)).append("\n");
    sb.append("    allowNegativeBalance: ").append(toIndentedString(allowNegativeBalance)).append("\n");
    sb.append("    annualEntitlementWeeks: ").append(toIndentedString(annualEntitlementWeeks)).append("\n");
    sb.append("    bankHolidayInclusive: ").append(toIndentedString(bankHolidayInclusive)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    maxCarryOverDays: ").append(toIndentedString(maxCarryOverDays)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    offsetPayment: ").append(toIndentedString(offsetPayment)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    schemeCeasedDate: ").append(toIndentedString(schemeCeasedDate)).append("\n");
    sb.append("    schemeKey: ").append(toIndentedString(schemeKey)).append("\n");
    sb.append("    schemeName: ").append(toIndentedString(schemeName)).append("\n");
    sb.append("    yearStartDay: ").append(toIndentedString(yearStartDay)).append("\n");
    sb.append("    yearStartMonth: ").append(toIndentedString(yearStartMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccrualPayCodes");
    openapiFields.add("AllowExceedAnnualEntitlement");
    openapiFields.add("AllowNegativeBalance");
    openapiFields.add("AnnualEntitlementWeeks");
    openapiFields.add("BankHolidayInclusive");
    openapiFields.add("Code");
    openapiFields.add("EffectiveDate");
    openapiFields.add("MaxCarryOverDays");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("OffsetPayment");
    openapiFields.add("Revision");
    openapiFields.add("SchemeCeasedDate");
    openapiFields.add("SchemeKey");
    openapiFields.add("SchemeName");
    openapiFields.add("YearStartDay");
    openapiFields.add("YearStartMonth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HolidayScheme1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HolidayScheme1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HolidayScheme1 is not found in the empty JSON string", HolidayScheme1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HolidayScheme1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HolidayScheme1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccrualPayCodes`
      if (jsonObj.get("AccrualPayCodes") != null && !jsonObj.get("AccrualPayCodes").isJsonNull()) {
        AccrualPayCodes.validateJsonElement(jsonObj.get("AccrualPayCodes"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      if ((jsonObj.get("SchemeKey") != null && !jsonObj.get("SchemeKey").isJsonNull()) && !jsonObj.get("SchemeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SchemeKey").toString()));
      }
      if ((jsonObj.get("SchemeName") != null && !jsonObj.get("SchemeName").isJsonNull()) && !jsonObj.get("SchemeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SchemeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SchemeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HolidayScheme1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HolidayScheme1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HolidayScheme1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HolidayScheme1.class));

       return (TypeAdapter<T>) new TypeAdapter<HolidayScheme1>() {
           @Override
           public void write(JsonWriter out, HolidayScheme1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HolidayScheme1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HolidayScheme1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HolidayScheme1
   * @throws IOException if the JSON string is invalid with respect to HolidayScheme1
   */
  public static HolidayScheme1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HolidayScheme1.class);
  }

  /**
   * Convert an instance of HolidayScheme1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

