/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Employee4;
import org.openapitools.client.model.PaySchedule3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PayRunJobInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PayRunJobInstruction1 {
  public static final String SERIALIZED_NAME_EMPLOYEES = "Employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private Employee4 employees;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_HOLDING_DATE = "HoldingDate";
  @SerializedName(SERIALIZED_NAME_HOLDING_DATE)
  private OffsetDateTime holdingDate;

  public static final String SERIALIZED_NAME_IS_SUPPLEMENTARY = "IsSupplementary";
  @SerializedName(SERIALIZED_NAME_IS_SUPPLEMENTARY)
  private Boolean isSupplementary;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE = "PaySchedule";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE)
  private PaySchedule3 paySchedule;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "PaymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private LocalDate paymentDate;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public PayRunJobInstruction1() {
  }

  public PayRunJobInstruction1 employees(Employee4 employees) {
    this.employees = employees;
    return this;
  }

  /**
   * Get employees
   * @return employees
   */
  @javax.annotation.Nullable
  public Employee4 getEmployees() {
    return employees;
  }

  public void setEmployees(Employee4 employees) {
    this.employees = employees;
  }


  public PayRunJobInstruction1 endDate(LocalDate endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * The pay run job instructions&#39; end date
   * @return endDate
   */
  @javax.annotation.Nullable
  public LocalDate getEndDate() {
    return endDate;
  }

  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public PayRunJobInstruction1 holdingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
    return this;
  }

  /**
   * The pay run job instructions&#39; holding date
   * @return holdingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHoldingDate() {
    return holdingDate;
  }

  public void setHoldingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
  }


  public PayRunJobInstruction1 isSupplementary(Boolean isSupplementary) {
    this.isSupplementary = isSupplementary;
    return this;
  }

  /**
   * The pay run job instructions&#39; is supplementary
   * @return isSupplementary
   */
  @javax.annotation.Nullable
  public Boolean getIsSupplementary() {
    return isSupplementary;
  }

  public void setIsSupplementary(Boolean isSupplementary) {
    this.isSupplementary = isSupplementary;
  }


  public PayRunJobInstruction1 paySchedule(PaySchedule3 paySchedule) {
    this.paySchedule = paySchedule;
    return this;
  }

  /**
   * Get paySchedule
   * @return paySchedule
   */
  @javax.annotation.Nullable
  public PaySchedule3 getPaySchedule() {
    return paySchedule;
  }

  public void setPaySchedule(PaySchedule3 paySchedule) {
    this.paySchedule = paySchedule;
  }


  public PayRunJobInstruction1 paymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * The pay run job instructions&#39; payment date
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
  }


  public PayRunJobInstruction1 startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The pay run job instructions&#39; start date
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayRunJobInstruction1 payRunJobInstruction1 = (PayRunJobInstruction1) o;
    return Objects.equals(this.employees, payRunJobInstruction1.employees) &&
        Objects.equals(this.endDate, payRunJobInstruction1.endDate) &&
        Objects.equals(this.holdingDate, payRunJobInstruction1.holdingDate) &&
        Objects.equals(this.isSupplementary, payRunJobInstruction1.isSupplementary) &&
        Objects.equals(this.paySchedule, payRunJobInstruction1.paySchedule) &&
        Objects.equals(this.paymentDate, payRunJobInstruction1.paymentDate) &&
        Objects.equals(this.startDate, payRunJobInstruction1.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employees, endDate, holdingDate, isSupplementary, paySchedule, paymentDate, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayRunJobInstruction1 {\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    holdingDate: ").append(toIndentedString(holdingDate)).append("\n");
    sb.append("    isSupplementary: ").append(toIndentedString(isSupplementary)).append("\n");
    sb.append("    paySchedule: ").append(toIndentedString(paySchedule)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Employees");
    openapiFields.add("EndDate");
    openapiFields.add("HoldingDate");
    openapiFields.add("IsSupplementary");
    openapiFields.add("PaySchedule");
    openapiFields.add("PaymentDate");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PayRunJobInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PayRunJobInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PayRunJobInstruction1 is not found in the empty JSON string", PayRunJobInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PayRunJobInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PayRunJobInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Employees`
      if (jsonObj.get("Employees") != null && !jsonObj.get("Employees").isJsonNull()) {
        Employee4.validateJsonElement(jsonObj.get("Employees"));
      }
      // validate the optional field `PaySchedule`
      if (jsonObj.get("PaySchedule") != null && !jsonObj.get("PaySchedule").isJsonNull()) {
        PaySchedule3.validateJsonElement(jsonObj.get("PaySchedule"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PayRunJobInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PayRunJobInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PayRunJobInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PayRunJobInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<PayRunJobInstruction1>() {
           @Override
           public void write(JsonWriter out, PayRunJobInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PayRunJobInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PayRunJobInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PayRunJobInstruction1
   * @throws IOException if the JSON string is invalid with respect to PayRunJobInstruction1
   */
  public static PayRunJobInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PayRunJobInstruction1.class);
  }

  /**
   * Convert an instance of PayRunJobInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

