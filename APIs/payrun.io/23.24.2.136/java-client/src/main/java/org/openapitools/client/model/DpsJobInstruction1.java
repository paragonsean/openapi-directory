/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Employer2;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.Type;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DpsJobInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DpsJobInstruction1 {
  public static final String SERIALIZED_NAME_APPLY = "Apply";
  @SerializedName(SERIALIZED_NAME_APPLY)
  private Boolean apply;

  public static final String SERIALIZED_NAME_EMPLOYER = "Employer";
  @SerializedName(SERIALIZED_NAME_EMPLOYER)
  private Employer2 employer;

  public static final String SERIALIZED_NAME_FROM_DATE = "FromDate";
  @SerializedName(SERIALIZED_NAME_FROM_DATE)
  private LocalDate fromDate;

  public static final String SERIALIZED_NAME_HOLDING_DATE = "HoldingDate";
  @SerializedName(SERIALIZED_NAME_HOLDING_DATE)
  private OffsetDateTime holdingDate;

  public static final String SERIALIZED_NAME_MESSAGE_TYPES = "MessageTypes";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPES)
  private Type messageTypes;

  public static final String SERIALIZED_NAME_MESSAGES_TO_PROCESS = "MessagesToProcess";
  @SerializedName(SERIALIZED_NAME_MESSAGES_TO_PROCESS)
  private Message messagesToProcess;

  public static final String SERIALIZED_NAME_RETRIEVE = "Retrieve";
  @SerializedName(SERIALIZED_NAME_RETRIEVE)
  private Boolean retrieve;

  public DpsJobInstruction1() {
  }

  public DpsJobInstruction1 apply(Boolean apply) {
    this.apply = apply;
    return this;
  }

  /**
   * The dps job instructions&#39; apply
   * @return apply
   */
  @javax.annotation.Nullable
  public Boolean getApply() {
    return apply;
  }

  public void setApply(Boolean apply) {
    this.apply = apply;
  }


  public DpsJobInstruction1 employer(Employer2 employer) {
    this.employer = employer;
    return this;
  }

  /**
   * Get employer
   * @return employer
   */
  @javax.annotation.Nullable
  public Employer2 getEmployer() {
    return employer;
  }

  public void setEmployer(Employer2 employer) {
    this.employer = employer;
  }


  public DpsJobInstruction1 fromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
    return this;
  }

  /**
   * The dps job instructions&#39; from date
   * @return fromDate
   */
  @javax.annotation.Nullable
  public LocalDate getFromDate() {
    return fromDate;
  }

  public void setFromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
  }


  public DpsJobInstruction1 holdingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
    return this;
  }

  /**
   * The dps job instructions&#39; holding date
   * @return holdingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHoldingDate() {
    return holdingDate;
  }

  public void setHoldingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
  }


  public DpsJobInstruction1 messageTypes(Type messageTypes) {
    this.messageTypes = messageTypes;
    return this;
  }

  /**
   * Get messageTypes
   * @return messageTypes
   */
  @javax.annotation.Nullable
  public Type getMessageTypes() {
    return messageTypes;
  }

  public void setMessageTypes(Type messageTypes) {
    this.messageTypes = messageTypes;
  }


  public DpsJobInstruction1 messagesToProcess(Message messagesToProcess) {
    this.messagesToProcess = messagesToProcess;
    return this;
  }

  /**
   * Get messagesToProcess
   * @return messagesToProcess
   */
  @javax.annotation.Nullable
  public Message getMessagesToProcess() {
    return messagesToProcess;
  }

  public void setMessagesToProcess(Message messagesToProcess) {
    this.messagesToProcess = messagesToProcess;
  }


  public DpsJobInstruction1 retrieve(Boolean retrieve) {
    this.retrieve = retrieve;
    return this;
  }

  /**
   * The dps job instructions&#39; retrieve
   * @return retrieve
   */
  @javax.annotation.Nullable
  public Boolean getRetrieve() {
    return retrieve;
  }

  public void setRetrieve(Boolean retrieve) {
    this.retrieve = retrieve;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpsJobInstruction1 dpsJobInstruction1 = (DpsJobInstruction1) o;
    return Objects.equals(this.apply, dpsJobInstruction1.apply) &&
        Objects.equals(this.employer, dpsJobInstruction1.employer) &&
        Objects.equals(this.fromDate, dpsJobInstruction1.fromDate) &&
        Objects.equals(this.holdingDate, dpsJobInstruction1.holdingDate) &&
        Objects.equals(this.messageTypes, dpsJobInstruction1.messageTypes) &&
        Objects.equals(this.messagesToProcess, dpsJobInstruction1.messagesToProcess) &&
        Objects.equals(this.retrieve, dpsJobInstruction1.retrieve);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apply, employer, fromDate, holdingDate, messageTypes, messagesToProcess, retrieve);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpsJobInstruction1 {\n");
    sb.append("    apply: ").append(toIndentedString(apply)).append("\n");
    sb.append("    employer: ").append(toIndentedString(employer)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    holdingDate: ").append(toIndentedString(holdingDate)).append("\n");
    sb.append("    messageTypes: ").append(toIndentedString(messageTypes)).append("\n");
    sb.append("    messagesToProcess: ").append(toIndentedString(messagesToProcess)).append("\n");
    sb.append("    retrieve: ").append(toIndentedString(retrieve)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Apply");
    openapiFields.add("Employer");
    openapiFields.add("FromDate");
    openapiFields.add("HoldingDate");
    openapiFields.add("MessageTypes");
    openapiFields.add("MessagesToProcess");
    openapiFields.add("Retrieve");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DpsJobInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpsJobInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpsJobInstruction1 is not found in the empty JSON string", DpsJobInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DpsJobInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DpsJobInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Employer`
      if (jsonObj.get("Employer") != null && !jsonObj.get("Employer").isJsonNull()) {
        Employer2.validateJsonElement(jsonObj.get("Employer"));
      }
      // validate the optional field `MessageTypes`
      if (jsonObj.get("MessageTypes") != null && !jsonObj.get("MessageTypes").isJsonNull()) {
        Type.validateJsonElement(jsonObj.get("MessageTypes"));
      }
      // validate the optional field `MessagesToProcess`
      if (jsonObj.get("MessagesToProcess") != null && !jsonObj.get("MessagesToProcess").isJsonNull()) {
        Message.validateJsonElement(jsonObj.get("MessagesToProcess"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpsJobInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpsJobInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpsJobInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpsJobInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<DpsJobInstruction1>() {
           @Override
           public void write(JsonWriter out, DpsJobInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DpsJobInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DpsJobInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DpsJobInstruction1
   * @throws IOException if the JSON string is invalid with respect to DpsJobInstruction1
   */
  public static DpsJobInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpsJobInstruction1.class);
  }

  /**
   * Convert an instance of DpsJobInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

