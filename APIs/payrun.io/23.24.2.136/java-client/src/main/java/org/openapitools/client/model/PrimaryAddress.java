/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The employer auto enrolments&#39; primary address
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrimaryAddress {
  public static final String SERIALIZED_NAME_ADDRESS1 = "Address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "Address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_ADDRESS3 = "Address3";
  @SerializedName(SERIALIZED_NAME_ADDRESS3)
  private String address3;

  public static final String SERIALIZED_NAME_ADDRESS4 = "Address4";
  @SerializedName(SERIALIZED_NAME_ADDRESS4)
  private String address4;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_POSTCODE = "Postcode";
  @SerializedName(SERIALIZED_NAME_POSTCODE)
  private String postcode;

  public PrimaryAddress() {
  }

  public PrimaryAddress address1(String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * The addresss&#39; line 1
   * @return address1
   */
  @javax.annotation.Nullable
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }


  public PrimaryAddress address2(String address2) {
    this.address2 = address2;
    return this;
  }

  /**
   * The addresss&#39; line 2
   * @return address2
   */
  @javax.annotation.Nullable
  public String getAddress2() {
    return address2;
  }

  public void setAddress2(String address2) {
    this.address2 = address2;
  }


  public PrimaryAddress address3(String address3) {
    this.address3 = address3;
    return this;
  }

  /**
   * The addresss&#39; line 3
   * @return address3
   */
  @javax.annotation.Nullable
  public String getAddress3() {
    return address3;
  }

  public void setAddress3(String address3) {
    this.address3 = address3;
  }


  public PrimaryAddress address4(String address4) {
    this.address4 = address4;
    return this;
  }

  /**
   * The addresss&#39; line 4
   * @return address4
   */
  @javax.annotation.Nullable
  public String getAddress4() {
    return address4;
  }

  public void setAddress4(String address4) {
    this.address4 = address4;
  }


  public PrimaryAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The addresss&#39; country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PrimaryAddress postcode(String postcode) {
    this.postcode = postcode;
    return this;
  }

  /**
   * The addresss&#39; postcode
   * @return postcode
   */
  @javax.annotation.Nullable
  public String getPostcode() {
    return postcode;
  }

  public void setPostcode(String postcode) {
    this.postcode = postcode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrimaryAddress primaryAddress = (PrimaryAddress) o;
    return Objects.equals(this.address1, primaryAddress.address1) &&
        Objects.equals(this.address2, primaryAddress.address2) &&
        Objects.equals(this.address3, primaryAddress.address3) &&
        Objects.equals(this.address4, primaryAddress.address4) &&
        Objects.equals(this.country, primaryAddress.country) &&
        Objects.equals(this.postcode, primaryAddress.postcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address1, address2, address3, address4, country, postcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrimaryAddress {\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    address3: ").append(toIndentedString(address3)).append("\n");
    sb.append("    address4: ").append(toIndentedString(address4)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    postcode: ").append(toIndentedString(postcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address1");
    openapiFields.add("Address2");
    openapiFields.add("Address3");
    openapiFields.add("Address4");
    openapiFields.add("Country");
    openapiFields.add("Postcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrimaryAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrimaryAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrimaryAddress is not found in the empty JSON string", PrimaryAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrimaryAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrimaryAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Address1") != null && !jsonObj.get("Address1").isJsonNull()) && !jsonObj.get("Address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address1").toString()));
      }
      if ((jsonObj.get("Address2") != null && !jsonObj.get("Address2").isJsonNull()) && !jsonObj.get("Address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address2").toString()));
      }
      if ((jsonObj.get("Address3") != null && !jsonObj.get("Address3").isJsonNull()) && !jsonObj.get("Address3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address3").toString()));
      }
      if ((jsonObj.get("Address4") != null && !jsonObj.get("Address4").isJsonNull()) && !jsonObj.get("Address4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Address4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Address4").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      if ((jsonObj.get("Postcode") != null && !jsonObj.get("Postcode").isJsonNull()) && !jsonObj.get("Postcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Postcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Postcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrimaryAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrimaryAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrimaryAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrimaryAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<PrimaryAddress>() {
           @Override
           public void write(JsonWriter out, PrimaryAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrimaryAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrimaryAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrimaryAddress
   * @throws IOException if the JSON string is invalid with respect to PrimaryAddress
   */
  public static PrimaryAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrimaryAddress.class);
  }

  /**
   * Convert an instance of PrimaryAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

