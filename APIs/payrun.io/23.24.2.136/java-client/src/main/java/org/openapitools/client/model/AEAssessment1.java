/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AEAssessment1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AEAssessment1 {
  public static final String SERIALIZED_NAME_AGE = "Age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  /**
   * The a e assessments&#39; assessment code
   */
  @JsonAdapter(AssessmentCodeEnum.Adapter.class)
  public enum AssessmentCodeEnum {
    EXCLUDED("Excluded"),
    
    ELIGIBLE_JOB_HOLDER("EligibleJobHolder"),
    
    NON_ELIGIBLE_JOB_HOLDER("NonEligibleJobHolder"),
    
    ENTITLED_WORKER("EntitledWorker");

    private String value;

    AssessmentCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssessmentCodeEnum fromValue(String value) {
      for (AssessmentCodeEnum b : AssessmentCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssessmentCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssessmentCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssessmentCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssessmentCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssessmentCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSESSMENT_CODE = "AssessmentCode";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_CODE)
  private AssessmentCodeEnum assessmentCode;

  public static final String SERIALIZED_NAME_ASSESSMENT_DATE = "AssessmentDate";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_DATE)
  private LocalDate assessmentDate;

  /**
   * The a e assessments&#39; assessment event
   */
  @JsonAdapter(AssessmentEventEnum.Adapter.class)
  public enum AssessmentEventEnum {
    NON_ENROLMENT_EVENT("NonEnrolmentEvent"),
    
    AUTOMATIC_ENROLMENT("AutomaticEnrolment"),
    
    OPT_IN("OptIn"),
    
    VOLUNTARY_JOINER("VoluntaryJoiner"),
    
    CONTRACTUAL_ENROLMENT("ContractualEnrolment");

    private String value;

    AssessmentEventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssessmentEventEnum fromValue(String value) {
      for (AssessmentEventEnum b : AssessmentEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssessmentEventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssessmentEventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssessmentEventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssessmentEventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssessmentEventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSESSMENT_EVENT = "AssessmentEvent";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_EVENT)
  private AssessmentEventEnum assessmentEvent;

  /**
   * The a e assessments&#39; assessment override
   */
  @JsonAdapter(AssessmentOverrideEnum.Adapter.class)
  public enum AssessmentOverrideEnum {
    NONE("None"),
    
    OPT_OUT("OptOut"),
    
    OPT_IN("OptIn"),
    
    VOLUNTARY_JOINER("VoluntaryJoiner"),
    
    CONTRACTUAL_PENSION("ContractualPension"),
    
    CEASED_MEMBERSHIP("CeasedMembership"),
    
    LEAVER("Leaver"),
    
    EXCLUDED("Excluded");

    private String value;

    AssessmentOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssessmentOverrideEnum fromValue(String value) {
      for (AssessmentOverrideEnum b : AssessmentOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssessmentOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssessmentOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssessmentOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssessmentOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssessmentOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSESSMENT_OVERRIDE = "AssessmentOverride";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_OVERRIDE)
  private AssessmentOverrideEnum assessmentOverride;

  /**
   * The a e assessments&#39; assessment result
   */
  @JsonAdapter(AssessmentResultEnum.Adapter.class)
  public enum AssessmentResultEnum {
    INCONCLUSIVE("Inconclusive"),
    
    NO_CHANGE("NoChange"),
    
    ENROL("Enrol"),
    
    EXIT("Exit");

    private String value;

    AssessmentResultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssessmentResultEnum fromValue(String value) {
      for (AssessmentResultEnum b : AssessmentResultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssessmentResultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssessmentResultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssessmentResultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssessmentResultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssessmentResultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSESSMENT_RESULT = "AssessmentResult";
  @SerializedName(SERIALIZED_NAME_ASSESSMENT_RESULT)
  private AssessmentResultEnum assessmentResult;

  public static final String SERIALIZED_NAME_IS_MEMBER_OF_ALTERNATIVE_PENSION_SCHEME = "IsMemberOfAlternativePensionScheme";
  @SerializedName(SERIALIZED_NAME_IS_MEMBER_OF_ALTERNATIVE_PENSION_SCHEME)
  private Boolean isMemberOfAlternativePensionScheme;

  public static final String SERIALIZED_NAME_OPT_OUT_WINDOW_END_DATE = "OptOutWindowEndDate";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_WINDOW_END_DATE)
  private LocalDate optOutWindowEndDate;

  public static final String SERIALIZED_NAME_QUALIFYING_EARNINGS = "QualifyingEarnings";
  @SerializedName(SERIALIZED_NAME_QUALIFYING_EARNINGS)
  private Double qualifyingEarnings;

  public static final String SERIALIZED_NAME_REENROLMENT_DATE = "ReenrolmentDate";
  @SerializedName(SERIALIZED_NAME_REENROLMENT_DATE)
  private LocalDate reenrolmentDate;

  public static final String SERIALIZED_NAME_STATE_PENSION_AGE = "StatePensionAge";
  @SerializedName(SERIALIZED_NAME_STATE_PENSION_AGE)
  private Integer statePensionAge;

  public static final String SERIALIZED_NAME_STATE_PENSION_DATE = "StatePensionDate";
  @SerializedName(SERIALIZED_NAME_STATE_PENSION_DATE)
  private LocalDate statePensionDate;

  public static final String SERIALIZED_NAME_TAX_PERIOD = "TaxPeriod";
  @SerializedName(SERIALIZED_NAME_TAX_PERIOD)
  private Integer taxPeriod;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public AEAssessment1() {
  }

  public AEAssessment1 age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * The a e assessments&#39; age
   * @return age
   */
  @javax.annotation.Nullable
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public AEAssessment1 assessmentCode(AssessmentCodeEnum assessmentCode) {
    this.assessmentCode = assessmentCode;
    return this;
  }

  /**
   * The a e assessments&#39; assessment code
   * @return assessmentCode
   */
  @javax.annotation.Nullable
  public AssessmentCodeEnum getAssessmentCode() {
    return assessmentCode;
  }

  public void setAssessmentCode(AssessmentCodeEnum assessmentCode) {
    this.assessmentCode = assessmentCode;
  }


  public AEAssessment1 assessmentDate(LocalDate assessmentDate) {
    this.assessmentDate = assessmentDate;
    return this;
  }

  /**
   * The a e assessments&#39; assessment date
   * @return assessmentDate
   */
  @javax.annotation.Nullable
  public LocalDate getAssessmentDate() {
    return assessmentDate;
  }

  public void setAssessmentDate(LocalDate assessmentDate) {
    this.assessmentDate = assessmentDate;
  }


  public AEAssessment1 assessmentEvent(AssessmentEventEnum assessmentEvent) {
    this.assessmentEvent = assessmentEvent;
    return this;
  }

  /**
   * The a e assessments&#39; assessment event
   * @return assessmentEvent
   */
  @javax.annotation.Nullable
  public AssessmentEventEnum getAssessmentEvent() {
    return assessmentEvent;
  }

  public void setAssessmentEvent(AssessmentEventEnum assessmentEvent) {
    this.assessmentEvent = assessmentEvent;
  }


  public AEAssessment1 assessmentOverride(AssessmentOverrideEnum assessmentOverride) {
    this.assessmentOverride = assessmentOverride;
    return this;
  }

  /**
   * The a e assessments&#39; assessment override
   * @return assessmentOverride
   */
  @javax.annotation.Nullable
  public AssessmentOverrideEnum getAssessmentOverride() {
    return assessmentOverride;
  }

  public void setAssessmentOverride(AssessmentOverrideEnum assessmentOverride) {
    this.assessmentOverride = assessmentOverride;
  }


  public AEAssessment1 assessmentResult(AssessmentResultEnum assessmentResult) {
    this.assessmentResult = assessmentResult;
    return this;
  }

  /**
   * The a e assessments&#39; assessment result
   * @return assessmentResult
   */
  @javax.annotation.Nullable
  public AssessmentResultEnum getAssessmentResult() {
    return assessmentResult;
  }

  public void setAssessmentResult(AssessmentResultEnum assessmentResult) {
    this.assessmentResult = assessmentResult;
  }


  public AEAssessment1 isMemberOfAlternativePensionScheme(Boolean isMemberOfAlternativePensionScheme) {
    this.isMemberOfAlternativePensionScheme = isMemberOfAlternativePensionScheme;
    return this;
  }

  /**
   * The a e assessments&#39; is member of alternative pension scheme
   * @return isMemberOfAlternativePensionScheme
   */
  @javax.annotation.Nullable
  public Boolean getIsMemberOfAlternativePensionScheme() {
    return isMemberOfAlternativePensionScheme;
  }

  public void setIsMemberOfAlternativePensionScheme(Boolean isMemberOfAlternativePensionScheme) {
    this.isMemberOfAlternativePensionScheme = isMemberOfAlternativePensionScheme;
  }


  public AEAssessment1 optOutWindowEndDate(LocalDate optOutWindowEndDate) {
    this.optOutWindowEndDate = optOutWindowEndDate;
    return this;
  }

  /**
   * The a e assessments&#39; opt out window end date
   * @return optOutWindowEndDate
   */
  @javax.annotation.Nullable
  public LocalDate getOptOutWindowEndDate() {
    return optOutWindowEndDate;
  }

  public void setOptOutWindowEndDate(LocalDate optOutWindowEndDate) {
    this.optOutWindowEndDate = optOutWindowEndDate;
  }


  public AEAssessment1 qualifyingEarnings(Double qualifyingEarnings) {
    this.qualifyingEarnings = qualifyingEarnings;
    return this;
  }

  /**
   * The a e assessments&#39; qualifying earnings
   * @return qualifyingEarnings
   */
  @javax.annotation.Nullable
  public Double getQualifyingEarnings() {
    return qualifyingEarnings;
  }

  public void setQualifyingEarnings(Double qualifyingEarnings) {
    this.qualifyingEarnings = qualifyingEarnings;
  }


  public AEAssessment1 reenrolmentDate(LocalDate reenrolmentDate) {
    this.reenrolmentDate = reenrolmentDate;
    return this;
  }

  /**
   * The a e assessments&#39; reenrolment date
   * @return reenrolmentDate
   */
  @javax.annotation.Nullable
  public LocalDate getReenrolmentDate() {
    return reenrolmentDate;
  }

  public void setReenrolmentDate(LocalDate reenrolmentDate) {
    this.reenrolmentDate = reenrolmentDate;
  }


  public AEAssessment1 statePensionAge(Integer statePensionAge) {
    this.statePensionAge = statePensionAge;
    return this;
  }

  /**
   * The a e assessments&#39; state pension age
   * @return statePensionAge
   */
  @javax.annotation.Nullable
  public Integer getStatePensionAge() {
    return statePensionAge;
  }

  public void setStatePensionAge(Integer statePensionAge) {
    this.statePensionAge = statePensionAge;
  }


  public AEAssessment1 statePensionDate(LocalDate statePensionDate) {
    this.statePensionDate = statePensionDate;
    return this;
  }

  /**
   * The a e assessments&#39; state pension date
   * @return statePensionDate
   */
  @javax.annotation.Nullable
  public LocalDate getStatePensionDate() {
    return statePensionDate;
  }

  public void setStatePensionDate(LocalDate statePensionDate) {
    this.statePensionDate = statePensionDate;
  }


  public AEAssessment1 taxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
    return this;
  }

  /**
   * The a e assessments&#39; tax period
   * @return taxPeriod
   */
  @javax.annotation.Nullable
  public Integer getTaxPeriod() {
    return taxPeriod;
  }

  public void setTaxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
  }


  public AEAssessment1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The a e assessments&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AEAssessment1 aeAssessment1 = (AEAssessment1) o;
    return Objects.equals(this.age, aeAssessment1.age) &&
        Objects.equals(this.assessmentCode, aeAssessment1.assessmentCode) &&
        Objects.equals(this.assessmentDate, aeAssessment1.assessmentDate) &&
        Objects.equals(this.assessmentEvent, aeAssessment1.assessmentEvent) &&
        Objects.equals(this.assessmentOverride, aeAssessment1.assessmentOverride) &&
        Objects.equals(this.assessmentResult, aeAssessment1.assessmentResult) &&
        Objects.equals(this.isMemberOfAlternativePensionScheme, aeAssessment1.isMemberOfAlternativePensionScheme) &&
        Objects.equals(this.optOutWindowEndDate, aeAssessment1.optOutWindowEndDate) &&
        Objects.equals(this.qualifyingEarnings, aeAssessment1.qualifyingEarnings) &&
        Objects.equals(this.reenrolmentDate, aeAssessment1.reenrolmentDate) &&
        Objects.equals(this.statePensionAge, aeAssessment1.statePensionAge) &&
        Objects.equals(this.statePensionDate, aeAssessment1.statePensionDate) &&
        Objects.equals(this.taxPeriod, aeAssessment1.taxPeriod) &&
        Objects.equals(this.taxYear, aeAssessment1.taxYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(age, assessmentCode, assessmentDate, assessmentEvent, assessmentOverride, assessmentResult, isMemberOfAlternativePensionScheme, optOutWindowEndDate, qualifyingEarnings, reenrolmentDate, statePensionAge, statePensionDate, taxPeriod, taxYear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AEAssessment1 {\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    assessmentCode: ").append(toIndentedString(assessmentCode)).append("\n");
    sb.append("    assessmentDate: ").append(toIndentedString(assessmentDate)).append("\n");
    sb.append("    assessmentEvent: ").append(toIndentedString(assessmentEvent)).append("\n");
    sb.append("    assessmentOverride: ").append(toIndentedString(assessmentOverride)).append("\n");
    sb.append("    assessmentResult: ").append(toIndentedString(assessmentResult)).append("\n");
    sb.append("    isMemberOfAlternativePensionScheme: ").append(toIndentedString(isMemberOfAlternativePensionScheme)).append("\n");
    sb.append("    optOutWindowEndDate: ").append(toIndentedString(optOutWindowEndDate)).append("\n");
    sb.append("    qualifyingEarnings: ").append(toIndentedString(qualifyingEarnings)).append("\n");
    sb.append("    reenrolmentDate: ").append(toIndentedString(reenrolmentDate)).append("\n");
    sb.append("    statePensionAge: ").append(toIndentedString(statePensionAge)).append("\n");
    sb.append("    statePensionDate: ").append(toIndentedString(statePensionDate)).append("\n");
    sb.append("    taxPeriod: ").append(toIndentedString(taxPeriod)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Age");
    openapiFields.add("AssessmentCode");
    openapiFields.add("AssessmentDate");
    openapiFields.add("AssessmentEvent");
    openapiFields.add("AssessmentOverride");
    openapiFields.add("AssessmentResult");
    openapiFields.add("IsMemberOfAlternativePensionScheme");
    openapiFields.add("OptOutWindowEndDate");
    openapiFields.add("QualifyingEarnings");
    openapiFields.add("ReenrolmentDate");
    openapiFields.add("StatePensionAge");
    openapiFields.add("StatePensionDate");
    openapiFields.add("TaxPeriod");
    openapiFields.add("TaxYear");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AEAssessment1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AEAssessment1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AEAssessment1 is not found in the empty JSON string", AEAssessment1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AEAssessment1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AEAssessment1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AssessmentCode") != null && !jsonObj.get("AssessmentCode").isJsonNull()) && !jsonObj.get("AssessmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessmentCode").toString()));
      }
      // validate the optional field `AssessmentCode`
      if (jsonObj.get("AssessmentCode") != null && !jsonObj.get("AssessmentCode").isJsonNull()) {
        AssessmentCodeEnum.validateJsonElement(jsonObj.get("AssessmentCode"));
      }
      if ((jsonObj.get("AssessmentEvent") != null && !jsonObj.get("AssessmentEvent").isJsonNull()) && !jsonObj.get("AssessmentEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessmentEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessmentEvent").toString()));
      }
      // validate the optional field `AssessmentEvent`
      if (jsonObj.get("AssessmentEvent") != null && !jsonObj.get("AssessmentEvent").isJsonNull()) {
        AssessmentEventEnum.validateJsonElement(jsonObj.get("AssessmentEvent"));
      }
      if ((jsonObj.get("AssessmentOverride") != null && !jsonObj.get("AssessmentOverride").isJsonNull()) && !jsonObj.get("AssessmentOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessmentOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessmentOverride").toString()));
      }
      // validate the optional field `AssessmentOverride`
      if (jsonObj.get("AssessmentOverride") != null && !jsonObj.get("AssessmentOverride").isJsonNull()) {
        AssessmentOverrideEnum.validateJsonElement(jsonObj.get("AssessmentOverride"));
      }
      if ((jsonObj.get("AssessmentResult") != null && !jsonObj.get("AssessmentResult").isJsonNull()) && !jsonObj.get("AssessmentResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AssessmentResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AssessmentResult").toString()));
      }
      // validate the optional field `AssessmentResult`
      if (jsonObj.get("AssessmentResult") != null && !jsonObj.get("AssessmentResult").isJsonNull()) {
        AssessmentResultEnum.validateJsonElement(jsonObj.get("AssessmentResult"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AEAssessment1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AEAssessment1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AEAssessment1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AEAssessment1.class));

       return (TypeAdapter<T>) new TypeAdapter<AEAssessment1>() {
           @Override
           public void write(JsonWriter out, AEAssessment1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AEAssessment1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AEAssessment1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AEAssessment1
   * @throws IOException if the JSON string is invalid with respect to AEAssessment1
   */
  public static AEAssessment1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AEAssessment1.class);
  }

  /**
   * Convert an instance of AEAssessment1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

