/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Permission1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Permission1 {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPRESSION = "Expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private String expression;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The permissions&#39; policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    ALLOW("Allow"),
    
    DENY("Deny");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY = "Policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private PolicyEnum policy;

  /**
   * The permissions&#39; verbs
   */
  @JsonAdapter(VerbsEnum.Adapter.class)
  public enum VerbsEnum {
    READ("Read"),
    
    WRITE("Write"),
    
    DELETE("Delete"),
    
    ALL("All");

    private String value;

    VerbsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerbsEnum fromValue(String value) {
      for (VerbsEnum b : VerbsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerbsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerbsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerbsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerbsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VerbsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERBS = "Verbs";
  @SerializedName(SERIALIZED_NAME_VERBS)
  private VerbsEnum verbs;

  public Permission1() {
  }

  public Permission1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The permissions&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Permission1 expression(String expression) {
    this.expression = expression;
    return this;
  }

  /**
   * The permissions&#39; expression
   * @return expression
   */
  @javax.annotation.Nullable
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  public Permission1 name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The permissions&#39; name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Permission1 policy(PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * The permissions&#39; policy
   * @return policy
   */
  @javax.annotation.Nullable
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(PolicyEnum policy) {
    this.policy = policy;
  }


  public Permission1 verbs(VerbsEnum verbs) {
    this.verbs = verbs;
    return this;
  }

  /**
   * The permissions&#39; verbs
   * @return verbs
   */
  @javax.annotation.Nullable
  public VerbsEnum getVerbs() {
    return verbs;
  }

  public void setVerbs(VerbsEnum verbs) {
    this.verbs = verbs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Permission1 permission1 = (Permission1) o;
    return Objects.equals(this.description, permission1.description) &&
        Objects.equals(this.expression, permission1.expression) &&
        Objects.equals(this.name, permission1.name) &&
        Objects.equals(this.policy, permission1.policy) &&
        Objects.equals(this.verbs, permission1.verbs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, expression, name, policy, verbs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Permission1 {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    verbs: ").append(toIndentedString(verbs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("Expression");
    openapiFields.add("Name");
    openapiFields.add("Policy");
    openapiFields.add("Verbs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Permission1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Permission1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Permission1 is not found in the empty JSON string", Permission1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Permission1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Permission1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("Expression") != null && !jsonObj.get("Expression").isJsonNull()) && !jsonObj.get("Expression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Expression").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("Policy") != null && !jsonObj.get("Policy").isJsonNull()) && !jsonObj.get("Policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Policy").toString()));
      }
      // validate the optional field `Policy`
      if (jsonObj.get("Policy") != null && !jsonObj.get("Policy").isJsonNull()) {
        PolicyEnum.validateJsonElement(jsonObj.get("Policy"));
      }
      if ((jsonObj.get("Verbs") != null && !jsonObj.get("Verbs").isJsonNull()) && !jsonObj.get("Verbs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Verbs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Verbs").toString()));
      }
      // validate the optional field `Verbs`
      if (jsonObj.get("Verbs") != null && !jsonObj.get("Verbs").isJsonNull()) {
        VerbsEnum.validateJsonElement(jsonObj.get("Verbs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Permission1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Permission1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Permission1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Permission1.class));

       return (TypeAdapter<T>) new TypeAdapter<Permission1>() {
           @Override
           public void write(JsonWriter out, Permission1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Permission1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Permission1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Permission1
   * @throws IOException if the JSON string is invalid with respect to Permission1
   */
  public static Permission1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Permission1.class);
  }

  /**
   * Convert an instance of Permission1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

