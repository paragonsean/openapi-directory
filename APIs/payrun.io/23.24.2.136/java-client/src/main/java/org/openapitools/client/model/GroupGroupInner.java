/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConditionInner;
import org.openapitools.client.model.FilterInner;
import org.openapitools.client.model.OrderInner;
import org.openapitools.client.model.OutputInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GroupGroupInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GroupGroupInner {
  public static final String SERIALIZED_NAME_AT_GROUP_NAME = "@GroupName";
  @SerializedName(SERIALIZED_NAME_AT_GROUP_NAME)
  private String atGroupName;

  public static final String SERIALIZED_NAME_AT_ITEM_NAME = "@ItemName";
  @SerializedName(SERIALIZED_NAME_AT_ITEM_NAME)
  private String atItemName;

  public static final String SERIALIZED_NAME_AT_LOOP_EXPRESSION = "@LoopExpression";
  @SerializedName(SERIALIZED_NAME_AT_LOOP_EXPRESSION)
  private String atLoopExpression;

  public static final String SERIALIZED_NAME_AT_PREDICATE = "@Predicate";
  @SerializedName(SERIALIZED_NAME_AT_PREDICATE)
  private String atPredicate;

  public static final String SERIALIZED_NAME_AT_SELECTOR = "@Selector";
  @SerializedName(SERIALIZED_NAME_AT_SELECTOR)
  private String atSelector;

  public static final String SERIALIZED_NAME_AT_UNIQUE_KEY_VARIABLE = "@UniqueKeyVariable";
  @SerializedName(SERIALIZED_NAME_AT_UNIQUE_KEY_VARIABLE)
  private String atUniqueKeyVariable;

  public static final String SERIALIZED_NAME_CONDITION = "Condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private List<ConditionInner> condition = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private List<FilterInner> filter = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "Order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private List<OrderInner> order = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT = "Output";
  @SerializedName(SERIALIZED_NAME_OUTPUT)
  private List<OutputInner> output = new ArrayList<>();

  public GroupGroupInner() {
  }

  public GroupGroupInner atGroupName(String atGroupName) {
    this.atGroupName = atGroupName;
    return this;
  }

  /**
   * The entity groups&#39; group name
   * @return atGroupName
   */
  @javax.annotation.Nullable
  public String getAtGroupName() {
    return atGroupName;
  }

  public void setAtGroupName(String atGroupName) {
    this.atGroupName = atGroupName;
  }


  public GroupGroupInner atItemName(String atItemName) {
    this.atItemName = atItemName;
    return this;
  }

  /**
   * The entity groups&#39; item name
   * @return atItemName
   */
  @javax.annotation.Nullable
  public String getAtItemName() {
    return atItemName;
  }

  public void setAtItemName(String atItemName) {
    this.atItemName = atItemName;
  }


  public GroupGroupInner atLoopExpression(String atLoopExpression) {
    this.atLoopExpression = atLoopExpression;
    return this;
  }

  /**
   * The entity groups&#39; loop expression
   * @return atLoopExpression
   */
  @javax.annotation.Nullable
  public String getAtLoopExpression() {
    return atLoopExpression;
  }

  public void setAtLoopExpression(String atLoopExpression) {
    this.atLoopExpression = atLoopExpression;
  }


  public GroupGroupInner atPredicate(String atPredicate) {
    this.atPredicate = atPredicate;
    return this;
  }

  /**
   * The entity groups&#39; predicate
   * @return atPredicate
   */
  @javax.annotation.Nullable
  public String getAtPredicate() {
    return atPredicate;
  }

  public void setAtPredicate(String atPredicate) {
    this.atPredicate = atPredicate;
  }


  public GroupGroupInner atSelector(String atSelector) {
    this.atSelector = atSelector;
    return this;
  }

  /**
   * The entity groups&#39; selector
   * @return atSelector
   */
  @javax.annotation.Nullable
  public String getAtSelector() {
    return atSelector;
  }

  public void setAtSelector(String atSelector) {
    this.atSelector = atSelector;
  }


  public GroupGroupInner atUniqueKeyVariable(String atUniqueKeyVariable) {
    this.atUniqueKeyVariable = atUniqueKeyVariable;
    return this;
  }

  /**
   * The entity groups&#39; unique key variable
   * @return atUniqueKeyVariable
   */
  @javax.annotation.Nullable
  public String getAtUniqueKeyVariable() {
    return atUniqueKeyVariable;
  }

  public void setAtUniqueKeyVariable(String atUniqueKeyVariable) {
    this.atUniqueKeyVariable = atUniqueKeyVariable;
  }


  public GroupGroupInner condition(List<ConditionInner> condition) {
    this.condition = condition;
    return this;
  }

  public GroupGroupInner addConditionItem(ConditionInner conditionItem) {
    if (this.condition == null) {
      this.condition = new ArrayList<>();
    }
    this.condition.add(conditionItem);
    return this;
  }

  /**
   * The entity groups&#39; conditions
   * @return condition
   */
  @javax.annotation.Nullable
  public List<ConditionInner> getCondition() {
    return condition;
  }

  public void setCondition(List<ConditionInner> condition) {
    this.condition = condition;
  }


  public GroupGroupInner filter(List<FilterInner> filter) {
    this.filter = filter;
    return this;
  }

  public GroupGroupInner addFilterItem(FilterInner filterItem) {
    if (this.filter == null) {
      this.filter = new ArrayList<>();
    }
    this.filter.add(filterItem);
    return this;
  }

  /**
   * The entity groups&#39; filters
   * @return filter
   */
  @javax.annotation.Nullable
  public List<FilterInner> getFilter() {
    return filter;
  }

  public void setFilter(List<FilterInner> filter) {
    this.filter = filter;
  }


  public GroupGroupInner order(List<OrderInner> order) {
    this.order = order;
    return this;
  }

  public GroupGroupInner addOrderItem(OrderInner orderItem) {
    if (this.order == null) {
      this.order = new ArrayList<>();
    }
    this.order.add(orderItem);
    return this;
  }

  /**
   * The entity groups&#39; ordering
   * @return order
   */
  @javax.annotation.Nullable
  public List<OrderInner> getOrder() {
    return order;
  }

  public void setOrder(List<OrderInner> order) {
    this.order = order;
  }


  public GroupGroupInner output(List<OutputInner> output) {
    this.output = output;
    return this;
  }

  public GroupGroupInner addOutputItem(OutputInner outputItem) {
    if (this.output == null) {
      this.output = new ArrayList<>();
    }
    this.output.add(outputItem);
    return this;
  }

  /**
   * The entity groups&#39; outputs
   * @return output
   */
  @javax.annotation.Nullable
  public List<OutputInner> getOutput() {
    return output;
  }

  public void setOutput(List<OutputInner> output) {
    this.output = output;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GroupGroupInner groupGroupInner = (GroupGroupInner) o;
    return Objects.equals(this.atGroupName, groupGroupInner.atGroupName) &&
        Objects.equals(this.atItemName, groupGroupInner.atItemName) &&
        Objects.equals(this.atLoopExpression, groupGroupInner.atLoopExpression) &&
        Objects.equals(this.atPredicate, groupGroupInner.atPredicate) &&
        Objects.equals(this.atSelector, groupGroupInner.atSelector) &&
        Objects.equals(this.atUniqueKeyVariable, groupGroupInner.atUniqueKeyVariable) &&
        Objects.equals(this.condition, groupGroupInner.condition) &&
        Objects.equals(this.filter, groupGroupInner.filter) &&
        Objects.equals(this.order, groupGroupInner.order) &&
        Objects.equals(this.output, groupGroupInner.output);
  }

  @Override
  public int hashCode() {
    return Objects.hash(atGroupName, atItemName, atLoopExpression, atPredicate, atSelector, atUniqueKeyVariable, condition, filter, order, output);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GroupGroupInner {\n");
    sb.append("    atGroupName: ").append(toIndentedString(atGroupName)).append("\n");
    sb.append("    atItemName: ").append(toIndentedString(atItemName)).append("\n");
    sb.append("    atLoopExpression: ").append(toIndentedString(atLoopExpression)).append("\n");
    sb.append("    atPredicate: ").append(toIndentedString(atPredicate)).append("\n");
    sb.append("    atSelector: ").append(toIndentedString(atSelector)).append("\n");
    sb.append("    atUniqueKeyVariable: ").append(toIndentedString(atUniqueKeyVariable)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    output: ").append(toIndentedString(output)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("@GroupName");
    openapiFields.add("@ItemName");
    openapiFields.add("@LoopExpression");
    openapiFields.add("@Predicate");
    openapiFields.add("@Selector");
    openapiFields.add("@UniqueKeyVariable");
    openapiFields.add("Condition");
    openapiFields.add("Filter");
    openapiFields.add("Order");
    openapiFields.add("Output");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GroupGroupInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GroupGroupInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GroupGroupInner is not found in the empty JSON string", GroupGroupInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GroupGroupInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GroupGroupInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("@GroupName") != null && !jsonObj.get("@GroupName").isJsonNull()) && !jsonObj.get("@GroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@GroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@GroupName").toString()));
      }
      if ((jsonObj.get("@ItemName") != null && !jsonObj.get("@ItemName").isJsonNull()) && !jsonObj.get("@ItemName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@ItemName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@ItemName").toString()));
      }
      if ((jsonObj.get("@LoopExpression") != null && !jsonObj.get("@LoopExpression").isJsonNull()) && !jsonObj.get("@LoopExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@LoopExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@LoopExpression").toString()));
      }
      if ((jsonObj.get("@Predicate") != null && !jsonObj.get("@Predicate").isJsonNull()) && !jsonObj.get("@Predicate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@Predicate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@Predicate").toString()));
      }
      if ((jsonObj.get("@Selector") != null && !jsonObj.get("@Selector").isJsonNull()) && !jsonObj.get("@Selector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@Selector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@Selector").toString()));
      }
      if ((jsonObj.get("@UniqueKeyVariable") != null && !jsonObj.get("@UniqueKeyVariable").isJsonNull()) && !jsonObj.get("@UniqueKeyVariable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `@UniqueKeyVariable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("@UniqueKeyVariable").toString()));
      }
      if (jsonObj.get("Condition") != null && !jsonObj.get("Condition").isJsonNull()) {
        JsonArray jsonArraycondition = jsonObj.getAsJsonArray("Condition");
        if (jsonArraycondition != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Condition").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Condition` to be an array in the JSON string but got `%s`", jsonObj.get("Condition").toString()));
          }

          // validate the optional field `Condition` (array)
          for (int i = 0; i < jsonArraycondition.size(); i++) {
            ConditionInner.validateJsonElement(jsonArraycondition.get(i));
          };
        }
      }
      if (jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) {
        JsonArray jsonArrayfilter = jsonObj.getAsJsonArray("Filter");
        if (jsonArrayfilter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Filter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Filter` to be an array in the JSON string but got `%s`", jsonObj.get("Filter").toString()));
          }

          // validate the optional field `Filter` (array)
          for (int i = 0; i < jsonArrayfilter.size(); i++) {
            FilterInner.validateJsonElement(jsonArrayfilter.get(i));
          };
        }
      }
      if (jsonObj.get("Order") != null && !jsonObj.get("Order").isJsonNull()) {
        JsonArray jsonArrayorder = jsonObj.getAsJsonArray("Order");
        if (jsonArrayorder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Order").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Order` to be an array in the JSON string but got `%s`", jsonObj.get("Order").toString()));
          }

          // validate the optional field `Order` (array)
          for (int i = 0; i < jsonArrayorder.size(); i++) {
            OrderInner.validateJsonElement(jsonArrayorder.get(i));
          };
        }
      }
      if (jsonObj.get("Output") != null && !jsonObj.get("Output").isJsonNull()) {
        JsonArray jsonArrayoutput = jsonObj.getAsJsonArray("Output");
        if (jsonArrayoutput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Output").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Output` to be an array in the JSON string but got `%s`", jsonObj.get("Output").toString()));
          }

          // validate the optional field `Output` (array)
          for (int i = 0; i < jsonArrayoutput.size(); i++) {
            OutputInner.validateJsonElement(jsonArrayoutput.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GroupGroupInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GroupGroupInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GroupGroupInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GroupGroupInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GroupGroupInner>() {
           @Override
           public void write(JsonWriter out, GroupGroupInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GroupGroupInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GroupGroupInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GroupGroupInner
   * @throws IOException if the JSON string is invalid with respect to GroupGroupInner
   */
  public static GroupGroupInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GroupGroupInner.class);
  }

  /**
   * Convert an instance of GroupGroupInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

