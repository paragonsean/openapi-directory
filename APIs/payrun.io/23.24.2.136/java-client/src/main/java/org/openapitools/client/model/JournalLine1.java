/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Employee3;
import org.openapitools.client.model.PayRun2;
import org.openapitools.client.model.SubContractor2;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JournalLine1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JournalLine1 {
  public static final String SERIALIZED_NAME_CREDIT = "Credit";
  @SerializedName(SERIALIZED_NAME_CREDIT)
  private Double credit;

  public static final String SERIALIZED_NAME_DEBIT = "Debit";
  @SerializedName(SERIALIZED_NAME_DEBIT)
  private Double debit;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EMPLOYEE = "Employee";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE)
  private Employee3 employee;

  public static final String SERIALIZED_NAME_GENERATED = "Generated";
  @SerializedName(SERIALIZED_NAME_GENERATED)
  private OffsetDateTime generated;

  public static final String SERIALIZED_NAME_GROUPING = "Grouping";
  @SerializedName(SERIALIZED_NAME_GROUPING)
  private String grouping;

  public static final String SERIALIZED_NAME_LEDGER_TARGET = "LedgerTarget";
  @SerializedName(SERIALIZED_NAME_LEDGER_TARGET)
  private String ledgerTarget;

  public static final String SERIALIZED_NAME_NOM_CODE = "NomCode";
  @SerializedName(SERIALIZED_NAME_NOM_CODE)
  private String nomCode;

  /**
   * The journal lines&#39; pay frequency
   */
  @JsonAdapter(PayFrequencyEnum.Adapter.class)
  public enum PayFrequencyEnum {
    WEEKLY("Weekly"),
    
    MONTHLY("Monthly"),
    
    TWO_WEEKLY("TwoWeekly"),
    
    FOUR_WEEKLY("FourWeekly"),
    
    YEARLY("Yearly");

    private String value;

    PayFrequencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayFrequencyEnum fromValue(String value) {
      for (PayFrequencyEnum b : PayFrequencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayFrequencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayFrequencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayFrequencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayFrequencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayFrequencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "PayFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private PayFrequencyEnum payFrequency;

  public static final String SERIALIZED_NAME_PAY_RUN = "PayRun";
  @SerializedName(SERIALIZED_NAME_PAY_RUN)
  private PayRun2 payRun;

  public static final String SERIALIZED_NAME_SUB_CONTRACTOR = "SubContractor";
  @SerializedName(SERIALIZED_NAME_SUB_CONTRACTOR)
  private SubContractor2 subContractor;

  public static final String SERIALIZED_NAME_SUB_NOM_CODE = "SubNomCode";
  @SerializedName(SERIALIZED_NAME_SUB_NOM_CODE)
  private String subNomCode;

  public static final String SERIALIZED_NAME_TAX_PERIOD = "TaxPeriod";
  @SerializedName(SERIALIZED_NAME_TAX_PERIOD)
  private Integer taxPeriod;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public JournalLine1() {
  }

  public JournalLine1 credit(Double credit) {
    this.credit = credit;
    return this;
  }

  /**
   * The journal lines&#39; credit
   * @return credit
   */
  @javax.annotation.Nullable
  public Double getCredit() {
    return credit;
  }

  public void setCredit(Double credit) {
    this.credit = credit;
  }


  public JournalLine1 debit(Double debit) {
    this.debit = debit;
    return this;
  }

  /**
   * The journal lines&#39; debit
   * @return debit
   */
  @javax.annotation.Nullable
  public Double getDebit() {
    return debit;
  }

  public void setDebit(Double debit) {
    this.debit = debit;
  }


  public JournalLine1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The journal lines&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public JournalLine1 employee(Employee3 employee) {
    this.employee = employee;
    return this;
  }

  /**
   * Get employee
   * @return employee
   */
  @javax.annotation.Nullable
  public Employee3 getEmployee() {
    return employee;
  }

  public void setEmployee(Employee3 employee) {
    this.employee = employee;
  }


  public JournalLine1 generated(OffsetDateTime generated) {
    this.generated = generated;
    return this;
  }

  /**
   * The journal lines&#39; generated
   * @return generated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getGenerated() {
    return generated;
  }

  public void setGenerated(OffsetDateTime generated) {
    this.generated = generated;
  }


  public JournalLine1 grouping(String grouping) {
    this.grouping = grouping;
    return this;
  }

  /**
   * The journal lines&#39; grouping
   * @return grouping
   */
  @javax.annotation.Nullable
  public String getGrouping() {
    return grouping;
  }

  public void setGrouping(String grouping) {
    this.grouping = grouping;
  }


  public JournalLine1 ledgerTarget(String ledgerTarget) {
    this.ledgerTarget = ledgerTarget;
    return this;
  }

  /**
   * The journal lines&#39; ledger target
   * @return ledgerTarget
   */
  @javax.annotation.Nullable
  public String getLedgerTarget() {
    return ledgerTarget;
  }

  public void setLedgerTarget(String ledgerTarget) {
    this.ledgerTarget = ledgerTarget;
  }


  public JournalLine1 nomCode(String nomCode) {
    this.nomCode = nomCode;
    return this;
  }

  /**
   * The journal lines&#39; nom code
   * @return nomCode
   */
  @javax.annotation.Nullable
  public String getNomCode() {
    return nomCode;
  }

  public void setNomCode(String nomCode) {
    this.nomCode = nomCode;
  }


  public JournalLine1 payFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
    return this;
  }

  /**
   * The journal lines&#39; pay frequency
   * @return payFrequency
   */
  @javax.annotation.Nullable
  public PayFrequencyEnum getPayFrequency() {
    return payFrequency;
  }

  public void setPayFrequency(PayFrequencyEnum payFrequency) {
    this.payFrequency = payFrequency;
  }


  public JournalLine1 payRun(PayRun2 payRun) {
    this.payRun = payRun;
    return this;
  }

  /**
   * Get payRun
   * @return payRun
   */
  @javax.annotation.Nullable
  public PayRun2 getPayRun() {
    return payRun;
  }

  public void setPayRun(PayRun2 payRun) {
    this.payRun = payRun;
  }


  public JournalLine1 subContractor(SubContractor2 subContractor) {
    this.subContractor = subContractor;
    return this;
  }

  /**
   * Get subContractor
   * @return subContractor
   */
  @javax.annotation.Nullable
  public SubContractor2 getSubContractor() {
    return subContractor;
  }

  public void setSubContractor(SubContractor2 subContractor) {
    this.subContractor = subContractor;
  }


  public JournalLine1 subNomCode(String subNomCode) {
    this.subNomCode = subNomCode;
    return this;
  }

  /**
   * The journal lines&#39; sub nom code
   * @return subNomCode
   */
  @javax.annotation.Nullable
  public String getSubNomCode() {
    return subNomCode;
  }

  public void setSubNomCode(String subNomCode) {
    this.subNomCode = subNomCode;
  }


  public JournalLine1 taxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
    return this;
  }

  /**
   * The journal lines&#39; tax period
   * @return taxPeriod
   */
  @javax.annotation.Nullable
  public Integer getTaxPeriod() {
    return taxPeriod;
  }

  public void setTaxPeriod(Integer taxPeriod) {
    this.taxPeriod = taxPeriod;
  }


  public JournalLine1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The journal lines&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JournalLine1 journalLine1 = (JournalLine1) o;
    return Objects.equals(this.credit, journalLine1.credit) &&
        Objects.equals(this.debit, journalLine1.debit) &&
        Objects.equals(this.description, journalLine1.description) &&
        Objects.equals(this.employee, journalLine1.employee) &&
        Objects.equals(this.generated, journalLine1.generated) &&
        Objects.equals(this.grouping, journalLine1.grouping) &&
        Objects.equals(this.ledgerTarget, journalLine1.ledgerTarget) &&
        Objects.equals(this.nomCode, journalLine1.nomCode) &&
        Objects.equals(this.payFrequency, journalLine1.payFrequency) &&
        Objects.equals(this.payRun, journalLine1.payRun) &&
        Objects.equals(this.subContractor, journalLine1.subContractor) &&
        Objects.equals(this.subNomCode, journalLine1.subNomCode) &&
        Objects.equals(this.taxPeriod, journalLine1.taxPeriod) &&
        Objects.equals(this.taxYear, journalLine1.taxYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(credit, debit, description, employee, generated, grouping, ledgerTarget, nomCode, payFrequency, payRun, subContractor, subNomCode, taxPeriod, taxYear);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JournalLine1 {\n");
    sb.append("    credit: ").append(toIndentedString(credit)).append("\n");
    sb.append("    debit: ").append(toIndentedString(debit)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    generated: ").append(toIndentedString(generated)).append("\n");
    sb.append("    grouping: ").append(toIndentedString(grouping)).append("\n");
    sb.append("    ledgerTarget: ").append(toIndentedString(ledgerTarget)).append("\n");
    sb.append("    nomCode: ").append(toIndentedString(nomCode)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    payRun: ").append(toIndentedString(payRun)).append("\n");
    sb.append("    subContractor: ").append(toIndentedString(subContractor)).append("\n");
    sb.append("    subNomCode: ").append(toIndentedString(subNomCode)).append("\n");
    sb.append("    taxPeriod: ").append(toIndentedString(taxPeriod)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Credit");
    openapiFields.add("Debit");
    openapiFields.add("Description");
    openapiFields.add("Employee");
    openapiFields.add("Generated");
    openapiFields.add("Grouping");
    openapiFields.add("LedgerTarget");
    openapiFields.add("NomCode");
    openapiFields.add("PayFrequency");
    openapiFields.add("PayRun");
    openapiFields.add("SubContractor");
    openapiFields.add("SubNomCode");
    openapiFields.add("TaxPeriod");
    openapiFields.add("TaxYear");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JournalLine1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JournalLine1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JournalLine1 is not found in the empty JSON string", JournalLine1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JournalLine1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JournalLine1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      // validate the optional field `Employee`
      if (jsonObj.get("Employee") != null && !jsonObj.get("Employee").isJsonNull()) {
        Employee3.validateJsonElement(jsonObj.get("Employee"));
      }
      if ((jsonObj.get("Grouping") != null && !jsonObj.get("Grouping").isJsonNull()) && !jsonObj.get("Grouping").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Grouping` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Grouping").toString()));
      }
      if ((jsonObj.get("LedgerTarget") != null && !jsonObj.get("LedgerTarget").isJsonNull()) && !jsonObj.get("LedgerTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LedgerTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LedgerTarget").toString()));
      }
      if ((jsonObj.get("NomCode") != null && !jsonObj.get("NomCode").isJsonNull()) && !jsonObj.get("NomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NomCode").toString()));
      }
      if ((jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) && !jsonObj.get("PayFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayFrequency").toString()));
      }
      // validate the optional field `PayFrequency`
      if (jsonObj.get("PayFrequency") != null && !jsonObj.get("PayFrequency").isJsonNull()) {
        PayFrequencyEnum.validateJsonElement(jsonObj.get("PayFrequency"));
      }
      // validate the optional field `PayRun`
      if (jsonObj.get("PayRun") != null && !jsonObj.get("PayRun").isJsonNull()) {
        PayRun2.validateJsonElement(jsonObj.get("PayRun"));
      }
      // validate the optional field `SubContractor`
      if (jsonObj.get("SubContractor") != null && !jsonObj.get("SubContractor").isJsonNull()) {
        SubContractor2.validateJsonElement(jsonObj.get("SubContractor"));
      }
      if ((jsonObj.get("SubNomCode") != null && !jsonObj.get("SubNomCode").isJsonNull()) && !jsonObj.get("SubNomCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubNomCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubNomCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JournalLine1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JournalLine1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JournalLine1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JournalLine1.class));

       return (TypeAdapter<T>) new TypeAdapter<JournalLine1>() {
           @Override
           public void write(JsonWriter out, JournalLine1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JournalLine1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JournalLine1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JournalLine1
   * @throws IOException if the JSON string is invalid with respect to JournalLine1
   */
  public static JournalLine1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JournalLine1.class);
  }

  /**
   * Convert an instance of JournalLine1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

