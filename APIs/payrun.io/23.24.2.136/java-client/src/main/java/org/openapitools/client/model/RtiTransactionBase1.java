/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.EmployerCore1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RtiTransactionBase1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RtiTransactionBase1 {
  public static final String SERIALIZED_NAME_EMPLOYER_CORE = "EmployerCore";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_CORE)
  private EmployerCore1 employerCore;

  public static final String SERIALIZED_NAME_REQUEST_DATA = "RequestData";
  @SerializedName(SERIALIZED_NAME_REQUEST_DATA)
  private String requestData;

  public static final String SERIALIZED_NAME_RESPONSE_DATA = "ResponseData";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DATA)
  private String responseData;

  public static final String SERIALIZED_NAME_RTI_TYPE = "RtiType";
  @SerializedName(SERIALIZED_NAME_RTI_TYPE)
  private String rtiType;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * The rti transaction bases&#39; transaction status
   */
  @JsonAdapter(TransactionStatusEnum.Adapter.class)
  public enum TransactionStatusEnum {
    NEW("New"),
    
    REQUEST_GENERATED("RequestGenerated"),
    
    COMPLETED_WITH_ERROR("CompletedWithError"),
    
    COMPLETED_WITH_SUCCESS("CompletedWithSuccess"),
    
    TIME_OUT("TimeOut");

    private String value;

    TransactionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionStatusEnum fromValue(String value) {
      for (TransactionStatusEnum b : TransactionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "TransactionStatus";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
  private TransactionStatusEnum transactionStatus;

  public static final String SERIALIZED_NAME_TRANSMISSION_DATE = "TransmissionDate";
  @SerializedName(SERIALIZED_NAME_TRANSMISSION_DATE)
  private OffsetDateTime transmissionDate;

  public RtiTransactionBase1() {
  }

  public RtiTransactionBase1 employerCore(EmployerCore1 employerCore) {
    this.employerCore = employerCore;
    return this;
  }

  /**
   * Get employerCore
   * @return employerCore
   */
  @javax.annotation.Nullable
  public EmployerCore1 getEmployerCore() {
    return employerCore;
  }

  public void setEmployerCore(EmployerCore1 employerCore) {
    this.employerCore = employerCore;
  }


  public RtiTransactionBase1 requestData(String requestData) {
    this.requestData = requestData;
    return this;
  }

  /**
   * The rti transaction bases&#39; request data
   * @return requestData
   */
  @javax.annotation.Nullable
  public String getRequestData() {
    return requestData;
  }

  public void setRequestData(String requestData) {
    this.requestData = requestData;
  }


  public RtiTransactionBase1 responseData(String responseData) {
    this.responseData = responseData;
    return this;
  }

  /**
   * The rti transaction bases&#39; response data
   * @return responseData
   */
  @javax.annotation.Nullable
  public String getResponseData() {
    return responseData;
  }

  public void setResponseData(String responseData) {
    this.responseData = responseData;
  }


  public RtiTransactionBase1 rtiType(String rtiType) {
    this.rtiType = rtiType;
    return this;
  }

  /**
   * The rti transaction bases&#39; rti type
   * @return rtiType
   */
  @javax.annotation.Nullable
  public String getRtiType() {
    return rtiType;
  }

  public void setRtiType(String rtiType) {
    this.rtiType = rtiType;
  }


  public RtiTransactionBase1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The rti transaction bases&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }


  public RtiTransactionBase1 timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The rti transaction bases&#39; timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public RtiTransactionBase1 transactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
    return this;
  }

  /**
   * The rti transaction bases&#39; transaction status
   * @return transactionStatus
   */
  @javax.annotation.Nullable
  public TransactionStatusEnum getTransactionStatus() {
    return transactionStatus;
  }

  public void setTransactionStatus(TransactionStatusEnum transactionStatus) {
    this.transactionStatus = transactionStatus;
  }


  public RtiTransactionBase1 transmissionDate(OffsetDateTime transmissionDate) {
    this.transmissionDate = transmissionDate;
    return this;
  }

  /**
   * The rti transaction bases&#39; transmission date
   * @return transmissionDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTransmissionDate() {
    return transmissionDate;
  }

  public void setTransmissionDate(OffsetDateTime transmissionDate) {
    this.transmissionDate = transmissionDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RtiTransactionBase1 rtiTransactionBase1 = (RtiTransactionBase1) o;
    return Objects.equals(this.employerCore, rtiTransactionBase1.employerCore) &&
        Objects.equals(this.requestData, rtiTransactionBase1.requestData) &&
        Objects.equals(this.responseData, rtiTransactionBase1.responseData) &&
        Objects.equals(this.rtiType, rtiTransactionBase1.rtiType) &&
        Objects.equals(this.taxYear, rtiTransactionBase1.taxYear) &&
        Objects.equals(this.timestamp, rtiTransactionBase1.timestamp) &&
        Objects.equals(this.transactionStatus, rtiTransactionBase1.transactionStatus) &&
        Objects.equals(this.transmissionDate, rtiTransactionBase1.transmissionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employerCore, requestData, responseData, rtiType, taxYear, timestamp, transactionStatus, transmissionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RtiTransactionBase1 {\n");
    sb.append("    employerCore: ").append(toIndentedString(employerCore)).append("\n");
    sb.append("    requestData: ").append(toIndentedString(requestData)).append("\n");
    sb.append("    responseData: ").append(toIndentedString(responseData)).append("\n");
    sb.append("    rtiType: ").append(toIndentedString(rtiType)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
    sb.append("    transmissionDate: ").append(toIndentedString(transmissionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployerCore");
    openapiFields.add("RequestData");
    openapiFields.add("ResponseData");
    openapiFields.add("RtiType");
    openapiFields.add("TaxYear");
    openapiFields.add("Timestamp");
    openapiFields.add("TransactionStatus");
    openapiFields.add("TransmissionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RtiTransactionBase1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RtiTransactionBase1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RtiTransactionBase1 is not found in the empty JSON string", RtiTransactionBase1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RtiTransactionBase1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RtiTransactionBase1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `EmployerCore`
      if (jsonObj.get("EmployerCore") != null && !jsonObj.get("EmployerCore").isJsonNull()) {
        EmployerCore1.validateJsonElement(jsonObj.get("EmployerCore"));
      }
      if ((jsonObj.get("RequestData") != null && !jsonObj.get("RequestData").isJsonNull()) && !jsonObj.get("RequestData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RequestData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RequestData").toString()));
      }
      if ((jsonObj.get("ResponseData") != null && !jsonObj.get("ResponseData").isJsonNull()) && !jsonObj.get("ResponseData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResponseData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResponseData").toString()));
      }
      if ((jsonObj.get("RtiType") != null && !jsonObj.get("RtiType").isJsonNull()) && !jsonObj.get("RtiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RtiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RtiType").toString()));
      }
      if ((jsonObj.get("TransactionStatus") != null && !jsonObj.get("TransactionStatus").isJsonNull()) && !jsonObj.get("TransactionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionStatus").toString()));
      }
      // validate the optional field `TransactionStatus`
      if (jsonObj.get("TransactionStatus") != null && !jsonObj.get("TransactionStatus").isJsonNull()) {
        TransactionStatusEnum.validateJsonElement(jsonObj.get("TransactionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RtiTransactionBase1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RtiTransactionBase1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RtiTransactionBase1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RtiTransactionBase1.class));

       return (TypeAdapter<T>) new TypeAdapter<RtiTransactionBase1>() {
           @Override
           public void write(JsonWriter out, RtiTransactionBase1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RtiTransactionBase1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RtiTransactionBase1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RtiTransactionBase1
   * @throws IOException if the JSON string is invalid with respect to RtiTransactionBase1
   */
  public static RtiTransactionBase1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RtiTransactionBase1.class);
  }

  /**
   * Convert an instance of RtiTransactionBase1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

