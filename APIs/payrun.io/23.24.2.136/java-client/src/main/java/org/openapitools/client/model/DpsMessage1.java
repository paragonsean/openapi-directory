/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DpsMessage1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DpsMessage1 {
  public static final String SERIALIZED_NAME_FORM_TYPE = "FormType";
  @SerializedName(SERIALIZED_NAME_FORM_TYPE)
  private String formType;

  public static final String SERIALIZED_NAME_ISSUE_DATE = "IssueDate";
  @SerializedName(SERIALIZED_NAME_ISSUE_DATE)
  private LocalDate issueDate;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  /**
   * The dps messages&#39; message status
   */
  @JsonAdapter(MessageStatusEnum.Adapter.class)
  public enum MessageStatusEnum {
    RETRIEVED("Retrieved"),
    
    APPLIED("Applied"),
    
    UNRESOLVED("Unresolved"),
    
    IGNORED("Ignored"),
    
    INFORMATION("Information");

    private String value;

    MessageStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageStatusEnum fromValue(String value) {
      for (MessageStatusEnum b : MessageStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessageStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_STATUS = "MessageStatus";
  @SerializedName(SERIALIZED_NAME_MESSAGE_STATUS)
  private MessageStatusEnum messageStatus;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private String messageType;

  public static final String SERIALIZED_NAME_PROCESSING_RESULT = "ProcessingResult";
  @SerializedName(SERIALIZED_NAME_PROCESSING_RESULT)
  private String processingResult;

  public static final String SERIALIZED_NAME_RETRIEVE_DATE = "RetrieveDate";
  @SerializedName(SERIALIZED_NAME_RETRIEVE_DATE)
  private OffsetDateTime retrieveDate;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public DpsMessage1() {
  }

  public DpsMessage1 formType(String formType) {
    this.formType = formType;
    return this;
  }

  /**
   * The dps messages&#39; form type
   * @return formType
   */
  @javax.annotation.Nullable
  public String getFormType() {
    return formType;
  }

  public void setFormType(String formType) {
    this.formType = formType;
  }


  public DpsMessage1 issueDate(LocalDate issueDate) {
    this.issueDate = issueDate;
    return this;
  }

  /**
   * The dps messages&#39; issue date
   * @return issueDate
   */
  @javax.annotation.Nullable
  public LocalDate getIssueDate() {
    return issueDate;
  }

  public void setIssueDate(LocalDate issueDate) {
    this.issueDate = issueDate;
  }


  public DpsMessage1 lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The dps messages&#39; last updated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public DpsMessage1 message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The dps messages&#39; message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public DpsMessage1 messageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
    return this;
  }

  /**
   * The dps messages&#39; message status
   * @return messageStatus
   */
  @javax.annotation.Nullable
  public MessageStatusEnum getMessageStatus() {
    return messageStatus;
  }

  public void setMessageStatus(MessageStatusEnum messageStatus) {
    this.messageStatus = messageStatus;
  }


  public DpsMessage1 messageType(String messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * The dps messages&#39; message type
   * @return messageType
   */
  @javax.annotation.Nullable
  public String getMessageType() {
    return messageType;
  }

  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  public DpsMessage1 processingResult(String processingResult) {
    this.processingResult = processingResult;
    return this;
  }

  /**
   * The dps messages&#39; processing result
   * @return processingResult
   */
  @javax.annotation.Nullable
  public String getProcessingResult() {
    return processingResult;
  }

  public void setProcessingResult(String processingResult) {
    this.processingResult = processingResult;
  }


  public DpsMessage1 retrieveDate(OffsetDateTime retrieveDate) {
    this.retrieveDate = retrieveDate;
    return this;
  }

  /**
   * The dps messages&#39; retrieve date
   * @return retrieveDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRetrieveDate() {
    return retrieveDate;
  }

  public void setRetrieveDate(OffsetDateTime retrieveDate) {
    this.retrieveDate = retrieveDate;
  }


  public DpsMessage1 sequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * The dps messages&#39; sequence number
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DpsMessage1 dpsMessage1 = (DpsMessage1) o;
    return Objects.equals(this.formType, dpsMessage1.formType) &&
        Objects.equals(this.issueDate, dpsMessage1.issueDate) &&
        Objects.equals(this.lastUpdated, dpsMessage1.lastUpdated) &&
        Objects.equals(this.message, dpsMessage1.message) &&
        Objects.equals(this.messageStatus, dpsMessage1.messageStatus) &&
        Objects.equals(this.messageType, dpsMessage1.messageType) &&
        Objects.equals(this.processingResult, dpsMessage1.processingResult) &&
        Objects.equals(this.retrieveDate, dpsMessage1.retrieveDate) &&
        Objects.equals(this.sequenceNumber, dpsMessage1.sequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formType, issueDate, lastUpdated, message, messageStatus, messageType, processingResult, retrieveDate, sequenceNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DpsMessage1 {\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    issueDate: ").append(toIndentedString(issueDate)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    messageStatus: ").append(toIndentedString(messageStatus)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    processingResult: ").append(toIndentedString(processingResult)).append("\n");
    sb.append("    retrieveDate: ").append(toIndentedString(retrieveDate)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FormType");
    openapiFields.add("IssueDate");
    openapiFields.add("LastUpdated");
    openapiFields.add("Message");
    openapiFields.add("MessageStatus");
    openapiFields.add("MessageType");
    openapiFields.add("ProcessingResult");
    openapiFields.add("RetrieveDate");
    openapiFields.add("SequenceNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DpsMessage1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DpsMessage1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DpsMessage1 is not found in the empty JSON string", DpsMessage1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DpsMessage1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DpsMessage1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FormType") != null && !jsonObj.get("FormType").isJsonNull()) && !jsonObj.get("FormType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FormType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FormType").toString()));
      }
      if ((jsonObj.get("Message") != null && !jsonObj.get("Message").isJsonNull()) && !jsonObj.get("Message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Message").toString()));
      }
      if ((jsonObj.get("MessageStatus") != null && !jsonObj.get("MessageStatus").isJsonNull()) && !jsonObj.get("MessageStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageStatus").toString()));
      }
      // validate the optional field `MessageStatus`
      if (jsonObj.get("MessageStatus") != null && !jsonObj.get("MessageStatus").isJsonNull()) {
        MessageStatusEnum.validateJsonElement(jsonObj.get("MessageStatus"));
      }
      if ((jsonObj.get("MessageType") != null && !jsonObj.get("MessageType").isJsonNull()) && !jsonObj.get("MessageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MessageType").toString()));
      }
      if ((jsonObj.get("ProcessingResult") != null && !jsonObj.get("ProcessingResult").isJsonNull()) && !jsonObj.get("ProcessingResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProcessingResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProcessingResult").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DpsMessage1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DpsMessage1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DpsMessage1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DpsMessage1.class));

       return (TypeAdapter<T>) new TypeAdapter<DpsMessage1>() {
           @Override
           public void write(JsonWriter out, DpsMessage1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DpsMessage1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DpsMessage1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DpsMessage1
   * @throws IOException if the JSON string is invalid with respect to DpsMessage1
   */
  public static DpsMessage1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DpsMessage1.class);
  }

  /**
   * Convert an instance of DpsMessage1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

