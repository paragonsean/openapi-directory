/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Errors;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ErrorModel1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ErrorModel1 {
  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The error models&#39; error category
   */
  @JsonAdapter(ErrorCategoryEnum.Adapter.class)
  public enum ErrorCategoryEnum {
    GENERAL("General"),
    
    NOT_FOUND("NotFound"),
    
    NOT_AUTHORISED("NotAuthorised"),
    
    VALIDATION_FAILURE("ValidationFailure");

    private String value;

    ErrorCategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorCategoryEnum fromValue(String value) {
      for (ErrorCategoryEnum b : ErrorCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorCategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorCategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorCategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorCategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorCategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_CATEGORY = "ErrorCategory";
  @SerializedName(SERIALIZED_NAME_ERROR_CATEGORY)
  private ErrorCategoryEnum errorCategory;

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Errors errors;

  public ErrorModel1() {
  }

  public ErrorModel1 description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The error models&#39; description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ErrorModel1 errorCategory(ErrorCategoryEnum errorCategory) {
    this.errorCategory = errorCategory;
    return this;
  }

  /**
   * The error models&#39; error category
   * @return errorCategory
   */
  @javax.annotation.Nullable
  public ErrorCategoryEnum getErrorCategory() {
    return errorCategory;
  }

  public void setErrorCategory(ErrorCategoryEnum errorCategory) {
    this.errorCategory = errorCategory;
  }


  public ErrorModel1 errors(Errors errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public Errors getErrors() {
    return errors;
  }

  public void setErrors(Errors errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorModel1 errorModel1 = (ErrorModel1) o;
    return Objects.equals(this.description, errorModel1.description) &&
        Objects.equals(this.errorCategory, errorModel1.errorCategory) &&
        Objects.equals(this.errors, errorModel1.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, errorCategory, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorModel1 {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    errorCategory: ").append(toIndentedString(errorCategory)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Description");
    openapiFields.add("ErrorCategory");
    openapiFields.add("Errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ErrorModel1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorModel1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorModel1 is not found in the empty JSON string", ErrorModel1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ErrorModel1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ErrorModel1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) && !jsonObj.get("Description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Description").toString()));
      }
      if ((jsonObj.get("ErrorCategory") != null && !jsonObj.get("ErrorCategory").isJsonNull()) && !jsonObj.get("ErrorCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorCategory").toString()));
      }
      // validate the optional field `ErrorCategory`
      if (jsonObj.get("ErrorCategory") != null && !jsonObj.get("ErrorCategory").isJsonNull()) {
        ErrorCategoryEnum.validateJsonElement(jsonObj.get("ErrorCategory"));
      }
      // validate the optional field `Errors`
      if (jsonObj.get("Errors") != null && !jsonObj.get("Errors").isJsonNull()) {
        Errors.validateJsonElement(jsonObj.get("Errors"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorModel1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorModel1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorModel1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorModel1.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorModel1>() {
           @Override
           public void write(JsonWriter out, ErrorModel1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorModel1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ErrorModel1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ErrorModel1
   * @throws IOException if the JSON string is invalid with respect to ErrorModel1
   */
  public static ErrorModel1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorModel1.class);
  }

  /**
   * Convert an instance of ErrorModel1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

