/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Employer4;
import org.openapitools.client.model.PaySchedule5;
import org.openapitools.client.model.RtiTransaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RtiJobInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RtiJobInstruction1 {
  public static final String SERIALIZED_NAME_EARLIER_TAX_YEAR = "EarlierTaxYear";
  @SerializedName(SERIALIZED_NAME_EARLIER_TAX_YEAR)
  private Integer earlierTaxYear;

  public static final String SERIALIZED_NAME_EMPLOYER = "Employer";
  @SerializedName(SERIALIZED_NAME_EMPLOYER)
  private Employer4 employer;

  public static final String SERIALIZED_NAME_FINAL_SUBMISSION_FOR_YEAR = "FinalSubmissionForYear";
  @SerializedName(SERIALIZED_NAME_FINAL_SUBMISSION_FOR_YEAR)
  private Boolean finalSubmissionForYear;

  public static final String SERIALIZED_NAME_GENERATE = "Generate";
  @SerializedName(SERIALIZED_NAME_GENERATE)
  private Boolean generate;

  public static final String SERIALIZED_NAME_HOLDING_DATE = "HoldingDate";
  @SerializedName(SERIALIZED_NAME_HOLDING_DATE)
  private OffsetDateTime holdingDate;

  /**
   * The rti job instructions&#39; late reason
   */
  @JsonAdapter(LateReasonEnum.Adapter.class)
  public enum LateReasonEnum {
    A("A"),
    
    B("B"),
    
    C("C"),
    
    D("D"),
    
    F("F"),
    
    G("G"),
    
    H("H");

    private String value;

    LateReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LateReasonEnum fromValue(String value) {
      for (LateReasonEnum b : LateReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LateReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LateReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LateReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LateReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LateReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATE_REASON = "LateReason";
  @SerializedName(SERIALIZED_NAME_LATE_REASON)
  private LateReasonEnum lateReason;

  public static final String SERIALIZED_NAME_NO_PAYMENT_FOR_PERIOD_FROM = "NoPaymentForPeriodFrom";
  @SerializedName(SERIALIZED_NAME_NO_PAYMENT_FOR_PERIOD_FROM)
  private LocalDate noPaymentForPeriodFrom;

  public static final String SERIALIZED_NAME_NO_PAYMENT_FOR_PERIOD_TO = "NoPaymentForPeriodTo";
  @SerializedName(SERIALIZED_NAME_NO_PAYMENT_FOR_PERIOD_TO)
  private LocalDate noPaymentForPeriodTo;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE = "PaySchedule";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE)
  private PaySchedule5 paySchedule;

  public static final String SERIALIZED_NAME_PAYMENT_DATE = "PaymentDate";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATE)
  private LocalDate paymentDate;

  public static final String SERIALIZED_NAME_PERIOD_OF_INACTIVITY_FROM = "PeriodOfInactivityFrom";
  @SerializedName(SERIALIZED_NAME_PERIOD_OF_INACTIVITY_FROM)
  private LocalDate periodOfInactivityFrom;

  public static final String SERIALIZED_NAME_PERIOD_OF_INACTIVITY_TO = "PeriodOfInactivityTo";
  @SerializedName(SERIALIZED_NAME_PERIOD_OF_INACTIVITY_TO)
  private LocalDate periodOfInactivityTo;

  public static final String SERIALIZED_NAME_RTI_TRANSACTION = "RtiTransaction";
  @SerializedName(SERIALIZED_NAME_RTI_TRANSACTION)
  private RtiTransaction rtiTransaction;

  public static final String SERIALIZED_NAME_RTI_TYPE = "RtiType";
  @SerializedName(SERIALIZED_NAME_RTI_TYPE)
  private String rtiType;

  public static final String SERIALIZED_NAME_SCHEME_CEASED = "SchemeCeased";
  @SerializedName(SERIALIZED_NAME_SCHEME_CEASED)
  private LocalDate schemeCeased;

  public static final String SERIALIZED_NAME_TAX_MONTH = "TaxMonth";
  @SerializedName(SERIALIZED_NAME_TAX_MONTH)
  private Integer taxMonth;

  public static final String SERIALIZED_NAME_TAX_YEAR = "TaxYear";
  @SerializedName(SERIALIZED_NAME_TAX_YEAR)
  private Integer taxYear;

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_TRANSMIT = "Transmit";
  @SerializedName(SERIALIZED_NAME_TRANSMIT)
  private Boolean transmit;

  public RtiJobInstruction1() {
  }

  public RtiJobInstruction1 earlierTaxYear(Integer earlierTaxYear) {
    this.earlierTaxYear = earlierTaxYear;
    return this;
  }

  /**
   * The rti job instructions&#39; earlier tax year
   * @return earlierTaxYear
   */
  @javax.annotation.Nullable
  public Integer getEarlierTaxYear() {
    return earlierTaxYear;
  }

  public void setEarlierTaxYear(Integer earlierTaxYear) {
    this.earlierTaxYear = earlierTaxYear;
  }


  public RtiJobInstruction1 employer(Employer4 employer) {
    this.employer = employer;
    return this;
  }

  /**
   * Get employer
   * @return employer
   */
  @javax.annotation.Nullable
  public Employer4 getEmployer() {
    return employer;
  }

  public void setEmployer(Employer4 employer) {
    this.employer = employer;
  }


  public RtiJobInstruction1 finalSubmissionForYear(Boolean finalSubmissionForYear) {
    this.finalSubmissionForYear = finalSubmissionForYear;
    return this;
  }

  /**
   * The rti job instructions&#39; final submission for year
   * @return finalSubmissionForYear
   */
  @javax.annotation.Nullable
  public Boolean getFinalSubmissionForYear() {
    return finalSubmissionForYear;
  }

  public void setFinalSubmissionForYear(Boolean finalSubmissionForYear) {
    this.finalSubmissionForYear = finalSubmissionForYear;
  }


  public RtiJobInstruction1 generate(Boolean generate) {
    this.generate = generate;
    return this;
  }

  /**
   * The rti job instructions&#39; generate
   * @return generate
   */
  @javax.annotation.Nullable
  public Boolean getGenerate() {
    return generate;
  }

  public void setGenerate(Boolean generate) {
    this.generate = generate;
  }


  public RtiJobInstruction1 holdingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
    return this;
  }

  /**
   * The rti job instructions&#39; holding date
   * @return holdingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHoldingDate() {
    return holdingDate;
  }

  public void setHoldingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
  }


  public RtiJobInstruction1 lateReason(LateReasonEnum lateReason) {
    this.lateReason = lateReason;
    return this;
  }

  /**
   * The rti job instructions&#39; late reason
   * @return lateReason
   */
  @javax.annotation.Nullable
  public LateReasonEnum getLateReason() {
    return lateReason;
  }

  public void setLateReason(LateReasonEnum lateReason) {
    this.lateReason = lateReason;
  }


  public RtiJobInstruction1 noPaymentForPeriodFrom(LocalDate noPaymentForPeriodFrom) {
    this.noPaymentForPeriodFrom = noPaymentForPeriodFrom;
    return this;
  }

  /**
   * The rti job instructions&#39; no payment for period from
   * @return noPaymentForPeriodFrom
   */
  @javax.annotation.Nullable
  public LocalDate getNoPaymentForPeriodFrom() {
    return noPaymentForPeriodFrom;
  }

  public void setNoPaymentForPeriodFrom(LocalDate noPaymentForPeriodFrom) {
    this.noPaymentForPeriodFrom = noPaymentForPeriodFrom;
  }


  public RtiJobInstruction1 noPaymentForPeriodTo(LocalDate noPaymentForPeriodTo) {
    this.noPaymentForPeriodTo = noPaymentForPeriodTo;
    return this;
  }

  /**
   * The rti job instructions&#39; no payment for period to
   * @return noPaymentForPeriodTo
   */
  @javax.annotation.Nullable
  public LocalDate getNoPaymentForPeriodTo() {
    return noPaymentForPeriodTo;
  }

  public void setNoPaymentForPeriodTo(LocalDate noPaymentForPeriodTo) {
    this.noPaymentForPeriodTo = noPaymentForPeriodTo;
  }


  public RtiJobInstruction1 paySchedule(PaySchedule5 paySchedule) {
    this.paySchedule = paySchedule;
    return this;
  }

  /**
   * Get paySchedule
   * @return paySchedule
   */
  @javax.annotation.Nullable
  public PaySchedule5 getPaySchedule() {
    return paySchedule;
  }

  public void setPaySchedule(PaySchedule5 paySchedule) {
    this.paySchedule = paySchedule;
  }


  public RtiJobInstruction1 paymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
    return this;
  }

  /**
   * The rti job instructions&#39; payment date
   * @return paymentDate
   */
  @javax.annotation.Nullable
  public LocalDate getPaymentDate() {
    return paymentDate;
  }

  public void setPaymentDate(LocalDate paymentDate) {
    this.paymentDate = paymentDate;
  }


  public RtiJobInstruction1 periodOfInactivityFrom(LocalDate periodOfInactivityFrom) {
    this.periodOfInactivityFrom = periodOfInactivityFrom;
    return this;
  }

  /**
   * The rti job instructions&#39; period of inactivity from
   * @return periodOfInactivityFrom
   */
  @javax.annotation.Nullable
  public LocalDate getPeriodOfInactivityFrom() {
    return periodOfInactivityFrom;
  }

  public void setPeriodOfInactivityFrom(LocalDate periodOfInactivityFrom) {
    this.periodOfInactivityFrom = periodOfInactivityFrom;
  }


  public RtiJobInstruction1 periodOfInactivityTo(LocalDate periodOfInactivityTo) {
    this.periodOfInactivityTo = periodOfInactivityTo;
    return this;
  }

  /**
   * The rti job instructions&#39; period of inactivity to
   * @return periodOfInactivityTo
   */
  @javax.annotation.Nullable
  public LocalDate getPeriodOfInactivityTo() {
    return periodOfInactivityTo;
  }

  public void setPeriodOfInactivityTo(LocalDate periodOfInactivityTo) {
    this.periodOfInactivityTo = periodOfInactivityTo;
  }


  public RtiJobInstruction1 rtiTransaction(RtiTransaction rtiTransaction) {
    this.rtiTransaction = rtiTransaction;
    return this;
  }

  /**
   * Get rtiTransaction
   * @return rtiTransaction
   */
  @javax.annotation.Nullable
  public RtiTransaction getRtiTransaction() {
    return rtiTransaction;
  }

  public void setRtiTransaction(RtiTransaction rtiTransaction) {
    this.rtiTransaction = rtiTransaction;
  }


  public RtiJobInstruction1 rtiType(String rtiType) {
    this.rtiType = rtiType;
    return this;
  }

  /**
   * The rti job instructions&#39; rti type
   * @return rtiType
   */
  @javax.annotation.Nullable
  public String getRtiType() {
    return rtiType;
  }

  public void setRtiType(String rtiType) {
    this.rtiType = rtiType;
  }


  public RtiJobInstruction1 schemeCeased(LocalDate schemeCeased) {
    this.schemeCeased = schemeCeased;
    return this;
  }

  /**
   * The rti job instructions&#39; scheme ceased
   * @return schemeCeased
   */
  @javax.annotation.Nullable
  public LocalDate getSchemeCeased() {
    return schemeCeased;
  }

  public void setSchemeCeased(LocalDate schemeCeased) {
    this.schemeCeased = schemeCeased;
  }


  public RtiJobInstruction1 taxMonth(Integer taxMonth) {
    this.taxMonth = taxMonth;
    return this;
  }

  /**
   * The rti job instructions&#39; tax month
   * @return taxMonth
   */
  @javax.annotation.Nullable
  public Integer getTaxMonth() {
    return taxMonth;
  }

  public void setTaxMonth(Integer taxMonth) {
    this.taxMonth = taxMonth;
  }


  public RtiJobInstruction1 taxYear(Integer taxYear) {
    this.taxYear = taxYear;
    return this;
  }

  /**
   * The rti job instructions&#39; tax year
   * @return taxYear
   */
  @javax.annotation.Nullable
  public Integer getTaxYear() {
    return taxYear;
  }

  public void setTaxYear(Integer taxYear) {
    this.taxYear = taxYear;
  }


  public RtiJobInstruction1 timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * The rti job instructions&#39; timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public RtiJobInstruction1 transmit(Boolean transmit) {
    this.transmit = transmit;
    return this;
  }

  /**
   * The rti job instructions&#39; transmit
   * @return transmit
   */
  @javax.annotation.Nullable
  public Boolean getTransmit() {
    return transmit;
  }

  public void setTransmit(Boolean transmit) {
    this.transmit = transmit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RtiJobInstruction1 rtiJobInstruction1 = (RtiJobInstruction1) o;
    return Objects.equals(this.earlierTaxYear, rtiJobInstruction1.earlierTaxYear) &&
        Objects.equals(this.employer, rtiJobInstruction1.employer) &&
        Objects.equals(this.finalSubmissionForYear, rtiJobInstruction1.finalSubmissionForYear) &&
        Objects.equals(this.generate, rtiJobInstruction1.generate) &&
        Objects.equals(this.holdingDate, rtiJobInstruction1.holdingDate) &&
        Objects.equals(this.lateReason, rtiJobInstruction1.lateReason) &&
        Objects.equals(this.noPaymentForPeriodFrom, rtiJobInstruction1.noPaymentForPeriodFrom) &&
        Objects.equals(this.noPaymentForPeriodTo, rtiJobInstruction1.noPaymentForPeriodTo) &&
        Objects.equals(this.paySchedule, rtiJobInstruction1.paySchedule) &&
        Objects.equals(this.paymentDate, rtiJobInstruction1.paymentDate) &&
        Objects.equals(this.periodOfInactivityFrom, rtiJobInstruction1.periodOfInactivityFrom) &&
        Objects.equals(this.periodOfInactivityTo, rtiJobInstruction1.periodOfInactivityTo) &&
        Objects.equals(this.rtiTransaction, rtiJobInstruction1.rtiTransaction) &&
        Objects.equals(this.rtiType, rtiJobInstruction1.rtiType) &&
        Objects.equals(this.schemeCeased, rtiJobInstruction1.schemeCeased) &&
        Objects.equals(this.taxMonth, rtiJobInstruction1.taxMonth) &&
        Objects.equals(this.taxYear, rtiJobInstruction1.taxYear) &&
        Objects.equals(this.timestamp, rtiJobInstruction1.timestamp) &&
        Objects.equals(this.transmit, rtiJobInstruction1.transmit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(earlierTaxYear, employer, finalSubmissionForYear, generate, holdingDate, lateReason, noPaymentForPeriodFrom, noPaymentForPeriodTo, paySchedule, paymentDate, periodOfInactivityFrom, periodOfInactivityTo, rtiTransaction, rtiType, schemeCeased, taxMonth, taxYear, timestamp, transmit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RtiJobInstruction1 {\n");
    sb.append("    earlierTaxYear: ").append(toIndentedString(earlierTaxYear)).append("\n");
    sb.append("    employer: ").append(toIndentedString(employer)).append("\n");
    sb.append("    finalSubmissionForYear: ").append(toIndentedString(finalSubmissionForYear)).append("\n");
    sb.append("    generate: ").append(toIndentedString(generate)).append("\n");
    sb.append("    holdingDate: ").append(toIndentedString(holdingDate)).append("\n");
    sb.append("    lateReason: ").append(toIndentedString(lateReason)).append("\n");
    sb.append("    noPaymentForPeriodFrom: ").append(toIndentedString(noPaymentForPeriodFrom)).append("\n");
    sb.append("    noPaymentForPeriodTo: ").append(toIndentedString(noPaymentForPeriodTo)).append("\n");
    sb.append("    paySchedule: ").append(toIndentedString(paySchedule)).append("\n");
    sb.append("    paymentDate: ").append(toIndentedString(paymentDate)).append("\n");
    sb.append("    periodOfInactivityFrom: ").append(toIndentedString(periodOfInactivityFrom)).append("\n");
    sb.append("    periodOfInactivityTo: ").append(toIndentedString(periodOfInactivityTo)).append("\n");
    sb.append("    rtiTransaction: ").append(toIndentedString(rtiTransaction)).append("\n");
    sb.append("    rtiType: ").append(toIndentedString(rtiType)).append("\n");
    sb.append("    schemeCeased: ").append(toIndentedString(schemeCeased)).append("\n");
    sb.append("    taxMonth: ").append(toIndentedString(taxMonth)).append("\n");
    sb.append("    taxYear: ").append(toIndentedString(taxYear)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    transmit: ").append(toIndentedString(transmit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EarlierTaxYear");
    openapiFields.add("Employer");
    openapiFields.add("FinalSubmissionForYear");
    openapiFields.add("Generate");
    openapiFields.add("HoldingDate");
    openapiFields.add("LateReason");
    openapiFields.add("NoPaymentForPeriodFrom");
    openapiFields.add("NoPaymentForPeriodTo");
    openapiFields.add("PaySchedule");
    openapiFields.add("PaymentDate");
    openapiFields.add("PeriodOfInactivityFrom");
    openapiFields.add("PeriodOfInactivityTo");
    openapiFields.add("RtiTransaction");
    openapiFields.add("RtiType");
    openapiFields.add("SchemeCeased");
    openapiFields.add("TaxMonth");
    openapiFields.add("TaxYear");
    openapiFields.add("Timestamp");
    openapiFields.add("Transmit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RtiJobInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RtiJobInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RtiJobInstruction1 is not found in the empty JSON string", RtiJobInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RtiJobInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RtiJobInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Employer`
      if (jsonObj.get("Employer") != null && !jsonObj.get("Employer").isJsonNull()) {
        Employer4.validateJsonElement(jsonObj.get("Employer"));
      }
      if ((jsonObj.get("LateReason") != null && !jsonObj.get("LateReason").isJsonNull()) && !jsonObj.get("LateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LateReason").toString()));
      }
      // validate the optional field `LateReason`
      if (jsonObj.get("LateReason") != null && !jsonObj.get("LateReason").isJsonNull()) {
        LateReasonEnum.validateJsonElement(jsonObj.get("LateReason"));
      }
      // validate the optional field `PaySchedule`
      if (jsonObj.get("PaySchedule") != null && !jsonObj.get("PaySchedule").isJsonNull()) {
        PaySchedule5.validateJsonElement(jsonObj.get("PaySchedule"));
      }
      // validate the optional field `RtiTransaction`
      if (jsonObj.get("RtiTransaction") != null && !jsonObj.get("RtiTransaction").isJsonNull()) {
        RtiTransaction.validateJsonElement(jsonObj.get("RtiTransaction"));
      }
      if ((jsonObj.get("RtiType") != null && !jsonObj.get("RtiType").isJsonNull()) && !jsonObj.get("RtiType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RtiType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RtiType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RtiJobInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RtiJobInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RtiJobInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RtiJobInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<RtiJobInstruction1>() {
           @Override
           public void write(JsonWriter out, RtiJobInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RtiJobInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RtiJobInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RtiJobInstruction1
   * @throws IOException if the JSON string is invalid with respect to RtiJobInstruction1
   */
  public static RtiJobInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RtiJobInstruction1.class);
  }

  /**
   * Convert an instance of RtiJobInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

