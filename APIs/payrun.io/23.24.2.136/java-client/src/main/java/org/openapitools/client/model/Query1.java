/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.Variable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Query1 {
  public static final String SERIALIZED_NAME_ENCODING = "Encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private String encoding;

  public static final String SERIALIZED_NAME_EXCLUDE_NULL_OR_EMPTY_ELEMENTS = "ExcludeNullOrEmptyElements";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_NULL_OR_EMPTY_ELEMENTS)
  private Boolean excludeNullOrEmptyElements;

  public static final String SERIALIZED_NAME_GROUPS = "Groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private Group groups;

  public static final String SERIALIZED_NAME_ROOT_NODE_NAME = "RootNodeName";
  @SerializedName(SERIALIZED_NAME_ROOT_NODE_NAME)
  private String rootNodeName;

  public static final String SERIALIZED_NAME_SUPPRESS_METRIC_ATTRIBUTES = "SuppressMetricAttributes";
  @SerializedName(SERIALIZED_NAME_SUPPRESS_METRIC_ATTRIBUTES)
  private Boolean suppressMetricAttributes;

  public static final String SERIALIZED_NAME_VARIABLES = "Variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private Variable variables;

  public Query1() {
  }

  public Query1 encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * The querys&#39; encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  public Query1 excludeNullOrEmptyElements(Boolean excludeNullOrEmptyElements) {
    this.excludeNullOrEmptyElements = excludeNullOrEmptyElements;
    return this;
  }

  /**
   * The querys&#39; exclude null or empty elements
   * @return excludeNullOrEmptyElements
   */
  @javax.annotation.Nullable
  public Boolean getExcludeNullOrEmptyElements() {
    return excludeNullOrEmptyElements;
  }

  public void setExcludeNullOrEmptyElements(Boolean excludeNullOrEmptyElements) {
    this.excludeNullOrEmptyElements = excludeNullOrEmptyElements;
  }


  public Query1 groups(Group groups) {
    this.groups = groups;
    return this;
  }

  /**
   * Get groups
   * @return groups
   */
  @javax.annotation.Nullable
  public Group getGroups() {
    return groups;
  }

  public void setGroups(Group groups) {
    this.groups = groups;
  }


  public Query1 rootNodeName(String rootNodeName) {
    this.rootNodeName = rootNodeName;
    return this;
  }

  /**
   * The querys&#39; root node name
   * @return rootNodeName
   */
  @javax.annotation.Nullable
  public String getRootNodeName() {
    return rootNodeName;
  }

  public void setRootNodeName(String rootNodeName) {
    this.rootNodeName = rootNodeName;
  }


  public Query1 suppressMetricAttributes(Boolean suppressMetricAttributes) {
    this.suppressMetricAttributes = suppressMetricAttributes;
    return this;
  }

  /**
   * The querys&#39; suppress metric attributes
   * @return suppressMetricAttributes
   */
  @javax.annotation.Nullable
  public Boolean getSuppressMetricAttributes() {
    return suppressMetricAttributes;
  }

  public void setSuppressMetricAttributes(Boolean suppressMetricAttributes) {
    this.suppressMetricAttributes = suppressMetricAttributes;
  }


  public Query1 variables(Variable variables) {
    this.variables = variables;
    return this;
  }

  /**
   * Get variables
   * @return variables
   */
  @javax.annotation.Nullable
  public Variable getVariables() {
    return variables;
  }

  public void setVariables(Variable variables) {
    this.variables = variables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query1 query1 = (Query1) o;
    return Objects.equals(this.encoding, query1.encoding) &&
        Objects.equals(this.excludeNullOrEmptyElements, query1.excludeNullOrEmptyElements) &&
        Objects.equals(this.groups, query1.groups) &&
        Objects.equals(this.rootNodeName, query1.rootNodeName) &&
        Objects.equals(this.suppressMetricAttributes, query1.suppressMetricAttributes) &&
        Objects.equals(this.variables, query1.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encoding, excludeNullOrEmptyElements, groups, rootNodeName, suppressMetricAttributes, variables);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query1 {\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    excludeNullOrEmptyElements: ").append(toIndentedString(excludeNullOrEmptyElements)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    rootNodeName: ").append(toIndentedString(rootNodeName)).append("\n");
    sb.append("    suppressMetricAttributes: ").append(toIndentedString(suppressMetricAttributes)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Encoding");
    openapiFields.add("ExcludeNullOrEmptyElements");
    openapiFields.add("Groups");
    openapiFields.add("RootNodeName");
    openapiFields.add("SuppressMetricAttributes");
    openapiFields.add("Variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Query1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Query1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Query1 is not found in the empty JSON string", Query1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Query1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Query1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Encoding") != null && !jsonObj.get("Encoding").isJsonNull()) && !jsonObj.get("Encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Encoding").toString()));
      }
      // validate the optional field `Groups`
      if (jsonObj.get("Groups") != null && !jsonObj.get("Groups").isJsonNull()) {
        Group.validateJsonElement(jsonObj.get("Groups"));
      }
      if ((jsonObj.get("RootNodeName") != null && !jsonObj.get("RootNodeName").isJsonNull()) && !jsonObj.get("RootNodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RootNodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RootNodeName").toString()));
      }
      // validate the optional field `Variables`
      if (jsonObj.get("Variables") != null && !jsonObj.get("Variables").isJsonNull()) {
        Variable.validateJsonElement(jsonObj.get("Variables"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Query1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Query1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Query1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Query1.class));

       return (TypeAdapter<T>) new TypeAdapter<Query1>() {
           @Override
           public void write(JsonWriter out, Query1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Query1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Query1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Query1
   * @throws IOException if the JSON string is invalid with respect to Query1
   */
  public static Query1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Query1.class);
  }

  /**
   * Convert an instance of Query1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

