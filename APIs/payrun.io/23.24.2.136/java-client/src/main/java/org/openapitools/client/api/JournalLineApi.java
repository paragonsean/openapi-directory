/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.Tag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JournalLineApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JournalLineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JournalLineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteJournalLineTag_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJournalLineTag_0Call(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "JournalLineId" + "}", localVarApiClient.escapeString(journalLineId.toString()))
            .replace("{" + "TagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteJournalLineTag_0ValidateBeforeCall(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling deleteJournalLineTag_0(Async)");
        }

        // verify the required parameter 'journalLineId' is set
        if (journalLineId == null) {
            throw new ApiException("Missing the required parameter 'journalLineId' when calling deleteJournalLineTag_0(Async)");
        }

        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteJournalLineTag_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteJournalLineTag_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteJournalLineTag_0(Async)");
        }

        return deleteJournalLineTag_0Call(employerId, journalLineId, tagId, authorization, apiVersion, _callback);

    }

    /**
     * Delete journal line tag
     * Deletes a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteJournalLineTag_0(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        deleteJournalLineTag_0WithHttpInfo(employerId, journalLineId, tagId, authorization, apiVersion);
    }

    /**
     * Delete journal line tag
     * Deletes a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteJournalLineTag_0WithHttpInfo(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteJournalLineTag_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete journal line tag (asynchronously)
     * Deletes a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteJournalLineTag_0Async(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteJournalLineTag_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllJournalLineTags_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJournalLineTags_0Call(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLines/Tags"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllJournalLineTags_0ValidateBeforeCall(String employerId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getAllJournalLineTags_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAllJournalLineTags_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getAllJournalLineTags_0(Async)");
        }

        return getAllJournalLineTags_0Call(employerId, authorization, apiVersion, _callback);

    }

    /**
     * Get all journal line tags
     * Gets all the journal line tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getAllJournalLineTags_0(String employerId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getAllJournalLineTags_0WithHttpInfo(employerId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get all journal line tags
     * Gets all the journal line tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getAllJournalLineTags_0WithHttpInfo(String employerId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllJournalLineTags_0ValidateBeforeCall(employerId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all journal line tags (asynchronously)
     * Gets all the journal line tags
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJournalLineTags_0Async(String employerId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllJournalLineTags_0ValidateBeforeCall(employerId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllJournalLinesWithTag_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJournalLinesWithTag_0Call(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLines/Tag/{TagId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "TagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllJournalLinesWithTag_0ValidateBeforeCall(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getAllJournalLinesWithTag_0(Async)");
        }

        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getAllJournalLinesWithTag_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAllJournalLinesWithTag_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getAllJournalLinesWithTag_0(Async)");
        }

        return getAllJournalLinesWithTag_0Call(employerId, tagId, authorization, apiVersion, _callback);

    }

    /**
     * Get links to tagged journal lines
     * Gets the journal lines with the specified tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getAllJournalLinesWithTag_0(String employerId, String tagId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getAllJournalLinesWithTag_0WithHttpInfo(employerId, tagId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get links to tagged journal lines
     * Gets the journal lines with the specified tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getAllJournalLinesWithTag_0WithHttpInfo(String employerId, String tagId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getAllJournalLinesWithTag_0ValidateBeforeCall(employerId, tagId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get links to tagged journal lines (asynchronously)
     * Gets the journal lines with the specified tag
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllJournalLinesWithTag_0Async(String employerId, String tagId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllJournalLinesWithTag_0ValidateBeforeCall(employerId, tagId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagFromJournalLine_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagFromJournalLine_0Call(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "JournalLineId" + "}", localVarApiClient.escapeString(journalLineId.toString()))
            .replace("{" + "TagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagFromJournalLine_0ValidateBeforeCall(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getTagFromJournalLine_0(Async)");
        }

        // verify the required parameter 'journalLineId' is set
        if (journalLineId == null) {
            throw new ApiException("Missing the required parameter 'journalLineId' when calling getTagFromJournalLine_0(Async)");
        }

        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getTagFromJournalLine_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTagFromJournalLine_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getTagFromJournalLine_0(Async)");
        }

        return getTagFromJournalLine_0Call(employerId, journalLineId, tagId, authorization, apiVersion, _callback);

    }

    /**
     * Get journal line tag
     * Gets a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Tag getTagFromJournalLine_0(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<Tag> localVarResp = getTagFromJournalLine_0WithHttpInfo(employerId, journalLineId, tagId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get journal line tag
     * Gets a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> getTagFromJournalLine_0WithHttpInfo(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getTagFromJournalLine_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get journal line tag (asynchronously)
     * Gets a tag from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagFromJournalLine_0Async(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagFromJournalLine_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTagsFromJournalLine_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsFromJournalLine_0Call(String employerId, String journalLineId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tags"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "JournalLineId" + "}", localVarApiClient.escapeString(journalLineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsFromJournalLine_0ValidateBeforeCall(String employerId, String journalLineId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling getTagsFromJournalLine_0(Async)");
        }

        // verify the required parameter 'journalLineId' is set
        if (journalLineId == null) {
            throw new ApiException("Missing the required parameter 'journalLineId' when calling getTagsFromJournalLine_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTagsFromJournalLine_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getTagsFromJournalLine_0(Async)");
        }

        return getTagsFromJournalLine_0Call(employerId, journalLineId, authorization, apiVersion, _callback);

    }

    /**
     * Get tags from journal line
     * Gets all tags from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getTagsFromJournalLine_0(String employerId, String journalLineId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getTagsFromJournalLine_0WithHttpInfo(employerId, journalLineId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get tags from journal line
     * Gets all tags from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getTagsFromJournalLine_0WithHttpInfo(String employerId, String journalLineId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getTagsFromJournalLine_0ValidateBeforeCall(employerId, journalLineId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tags from journal line (asynchronously)
     * Gets all tags from the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTagsFromJournalLine_0Async(String employerId, String journalLineId, String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsFromJournalLine_0ValidateBeforeCall(employerId, journalLineId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putJournalLineTag_0
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putJournalLineTag_0Call(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Employer/{EmployerId}/JournalLine/{JournalLineId}/Tag/{TagId}"
            .replace("{" + "EmployerId" + "}", localVarApiClient.escapeString(employerId.toString()))
            .replace("{" + "JournalLineId" + "}", localVarApiClient.escapeString(journalLineId.toString()))
            .replace("{" + "TagId" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putJournalLineTag_0ValidateBeforeCall(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerId' is set
        if (employerId == null) {
            throw new ApiException("Missing the required parameter 'employerId' when calling putJournalLineTag_0(Async)");
        }

        // verify the required parameter 'journalLineId' is set
        if (journalLineId == null) {
            throw new ApiException("Missing the required parameter 'journalLineId' when calling putJournalLineTag_0(Async)");
        }

        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling putJournalLineTag_0(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putJournalLineTag_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putJournalLineTag_0(Async)");
        }

        return putJournalLineTag_0Call(employerId, journalLineId, tagId, authorization, apiVersion, _callback);

    }

    /**
     * Insert journal line tag
     * Inserts a tag on the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return Tag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Tag putJournalLineTag_0(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<Tag> localVarResp = putJournalLineTag_0WithHttpInfo(employerId, journalLineId, tagId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Insert journal line tag
     * Inserts a tag on the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Tag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tag> putJournalLineTag_0WithHttpInfo(String employerId, String journalLineId, String tagId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = putJournalLineTag_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Insert journal line tag (asynchronously)
     * Inserts a tag on the journal line
     * @param employerId The employers&#39; unique identifier. E.g ER001 (required)
     * @param journalLineId The journal line unique identifier. E.g JL001 (required)
     * @param tagId The tag unique identifier. E.g. MyTag (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The tag object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putJournalLineTag_0Async(String employerId, String journalLineId, String tagId, String authorization, String apiVersion, final ApiCallback<Tag> _callback) throws ApiException {

        okhttp3.Call localVarCall = putJournalLineTag_0ValidateBeforeCall(employerId, journalLineId, tagId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Tag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
