/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThirdPartyJobInstruction1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThirdPartyJobInstruction1 {
  public static final String SERIALIZED_NAME_EMPLOYER_HREF = "EmployerHref";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_HREF)
  private String employerHref;

  public static final String SERIALIZED_NAME_HOLDING_DATE = "HoldingDate";
  @SerializedName(SERIALIZED_NAME_HOLDING_DATE)
  private OffsetDateTime holdingDate;

  public static final String SERIALIZED_NAME_INSTRUCTION_TYPE = "InstructionType";
  @SerializedName(SERIALIZED_NAME_INSTRUCTION_TYPE)
  private String instructionType;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_PAY_LOAD = "PayLoad";
  @SerializedName(SERIALIZED_NAME_PAY_LOAD)
  private String payLoad;

  public ThirdPartyJobInstruction1() {
  }

  public ThirdPartyJobInstruction1 employerHref(String employerHref) {
    this.employerHref = employerHref;
    return this;
  }

  /**
   * The third party job instructions&#39; employer href
   * @return employerHref
   */
  @javax.annotation.Nullable
  public String getEmployerHref() {
    return employerHref;
  }

  public void setEmployerHref(String employerHref) {
    this.employerHref = employerHref;
  }


  public ThirdPartyJobInstruction1 holdingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
    return this;
  }

  /**
   * The third party job instructions&#39; holding date
   * @return holdingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHoldingDate() {
    return holdingDate;
  }

  public void setHoldingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
  }


  public ThirdPartyJobInstruction1 instructionType(String instructionType) {
    this.instructionType = instructionType;
    return this;
  }

  /**
   * The third party job instructions&#39; instruction type
   * @return instructionType
   */
  @javax.annotation.Nullable
  public String getInstructionType() {
    return instructionType;
  }

  public void setInstructionType(String instructionType) {
    this.instructionType = instructionType;
  }


  public ThirdPartyJobInstruction1 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The third party job instructions&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public ThirdPartyJobInstruction1 payLoad(String payLoad) {
    this.payLoad = payLoad;
    return this;
  }

  /**
   * The third party job instructions&#39; pay load
   * @return payLoad
   */
  @javax.annotation.Nullable
  public String getPayLoad() {
    return payLoad;
  }

  public void setPayLoad(String payLoad) {
    this.payLoad = payLoad;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThirdPartyJobInstruction1 thirdPartyJobInstruction1 = (ThirdPartyJobInstruction1) o;
    return Objects.equals(this.employerHref, thirdPartyJobInstruction1.employerHref) &&
        Objects.equals(this.holdingDate, thirdPartyJobInstruction1.holdingDate) &&
        Objects.equals(this.instructionType, thirdPartyJobInstruction1.instructionType) &&
        Objects.equals(this.metaData, thirdPartyJobInstruction1.metaData) &&
        Objects.equals(this.payLoad, thirdPartyJobInstruction1.payLoad);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employerHref, holdingDate, instructionType, metaData, payLoad);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThirdPartyJobInstruction1 {\n");
    sb.append("    employerHref: ").append(toIndentedString(employerHref)).append("\n");
    sb.append("    holdingDate: ").append(toIndentedString(holdingDate)).append("\n");
    sb.append("    instructionType: ").append(toIndentedString(instructionType)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    payLoad: ").append(toIndentedString(payLoad)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmployerHref");
    openapiFields.add("HoldingDate");
    openapiFields.add("InstructionType");
    openapiFields.add("MetaData");
    openapiFields.add("PayLoad");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThirdPartyJobInstruction1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThirdPartyJobInstruction1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThirdPartyJobInstruction1 is not found in the empty JSON string", ThirdPartyJobInstruction1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThirdPartyJobInstruction1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThirdPartyJobInstruction1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EmployerHref") != null && !jsonObj.get("EmployerHref").isJsonNull()) && !jsonObj.get("EmployerHref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployerHref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployerHref").toString()));
      }
      if ((jsonObj.get("InstructionType") != null && !jsonObj.get("InstructionType").isJsonNull()) && !jsonObj.get("InstructionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InstructionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InstructionType").toString()));
      }
      if ((jsonObj.get("PayLoad") != null && !jsonObj.get("PayLoad").isJsonNull()) && !jsonObj.get("PayLoad").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PayLoad` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PayLoad").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThirdPartyJobInstruction1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThirdPartyJobInstruction1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThirdPartyJobInstruction1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThirdPartyJobInstruction1.class));

       return (TypeAdapter<T>) new TypeAdapter<ThirdPartyJobInstruction1>() {
           @Override
           public void write(JsonWriter out, ThirdPartyJobInstruction1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThirdPartyJobInstruction1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThirdPartyJobInstruction1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThirdPartyJobInstruction1
   * @throws IOException if the JSON string is invalid with respect to ThirdPartyJobInstruction1
   */
  public static ThirdPartyJobInstruction1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThirdPartyJobInstruction1.class);
  }

  /**
   * Convert an instance of ThirdPartyJobInstruction1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

