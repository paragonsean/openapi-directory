/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorModel;
import java.io.File;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.ReportDefinition;
import org.openapitools.client.model.TransformDefinition;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteReportDefinition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportDefinitionCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/{ReportDefinitionId}"
            .replace("{" + "ReportDefinitionId" + "}", localVarApiClient.escapeString(reportDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteReportDefinitionValidateBeforeCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportDefinitionId' is set
        if (reportDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'reportDefinitionId' when calling deleteReportDefinition(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteReportDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteReportDefinition(Async)");
        }

        return deleteReportDefinitionCall(reportDefinitionId, authorization, apiVersion, _callback);

    }

    /**
     * Deletes a report definition
     * Delete the specified report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteReportDefinition(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        deleteReportDefinitionWithHttpInfo(reportDefinitionId, authorization, apiVersion);
    }

    /**
     * Deletes a report definition
     * Delete the specified report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteReportDefinitionWithHttpInfo(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteReportDefinitionValidateBeforeCall(reportDefinitionId, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a report definition (asynchronously)
     * Delete the specified report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteReportDefinitionAsync(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteReportDefinitionValidateBeforeCall(reportDefinitionId, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTransformDefinition
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransformDefinitionCall(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Transform/{TransformDefinitionId}"
            .replace("{" + "TransformDefinitionId" + "}", localVarApiClient.escapeString(transformDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformDefinitionValidateBeforeCall(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformDefinitionId' is set
        if (transformDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'transformDefinitionId' when calling deleteTransformDefinition(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteTransformDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling deleteTransformDefinition(Async)");
        }

        return deleteTransformDefinitionCall(transformDefinitionId, authorization, apiVersion, _callback);

    }

    /**
     * Deletes a transform definition
     * Delete the specified transform definition
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteTransformDefinition(String transformDefinitionId, String authorization, String apiVersion) throws ApiException {
        deleteTransformDefinitionWithHttpInfo(transformDefinitionId, authorization, apiVersion);
    }

    /**
     * Deletes a transform definition
     * Delete the specified transform definition
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteTransformDefinitionWithHttpInfo(String transformDefinitionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = deleteTransformDefinitionValidateBeforeCall(transformDefinitionId, authorization, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a transform definition (asynchronously)
     * Delete the specified transform definition
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTransformDefinitionAsync(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransformDefinitionValidateBeforeCall(transformDefinitionId, authorization, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActivePayInstructionsReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param activeOn The active date to consider. E.g 2017-04-05 (optional)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param type the data type to filter on. E.g. TaxPayInstruction (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the active pay instructions report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivePayInstructionsReportOutputCall(String employerKey, String employeeKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate activeOn, LocalDate toDate, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/ACTPAYINS/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (employeeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeKey", employeeKey));
        }

        if (activeOn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ActiveOn", activeOn));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToDate", toDate));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Type", type));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActivePayInstructionsReportOutputValidateBeforeCall(String employerKey, String employeeKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate activeOn, LocalDate toDate, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getActivePayInstructionsReportOutput(Async)");
        }

        // verify the required parameter 'employeeKey' is set
        if (employeeKey == null) {
            throw new ApiException("Missing the required parameter 'employeeKey' when calling getActivePayInstructionsReportOutput(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getActivePayInstructionsReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getActivePayInstructionsReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getActivePayInstructionsReportOutput(Async)");
        }

        return getActivePayInstructionsReportOutputCall(employerKey, employeeKey, fromDate, authorization, apiVersion, activeOn, toDate, type, _callback);

    }

    /**
     * Runs the active pay instructions report
     * Returns the result of the executed active pay instructions report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param activeOn The active date to consider. E.g 2017-04-05 (optional)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param type the data type to filter on. E.g. TaxPayInstruction (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the active pay instructions report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getActivePayInstructionsReportOutput(String employerKey, String employeeKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate activeOn, LocalDate toDate, String type) throws ApiException {
        ApiResponse<File> localVarResp = getActivePayInstructionsReportOutputWithHttpInfo(employerKey, employeeKey, fromDate, authorization, apiVersion, activeOn, toDate, type);
        return localVarResp.getData();
    }

    /**
     * Runs the active pay instructions report
     * Returns the result of the executed active pay instructions report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param activeOn The active date to consider. E.g 2017-04-05 (optional)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param type the data type to filter on. E.g. TaxPayInstruction (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the active pay instructions report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getActivePayInstructionsReportOutputWithHttpInfo(String employerKey, String employeeKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate activeOn, LocalDate toDate, String type) throws ApiException {
        okhttp3.Call localVarCall = getActivePayInstructionsReportOutputValidateBeforeCall(employerKey, employeeKey, fromDate, authorization, apiVersion, activeOn, toDate, type, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the active pay instructions report (asynchronously)
     * Returns the result of the executed active pay instructions report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param activeOn The active date to consider. E.g 2017-04-05 (optional)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param type the data type to filter on. E.g. TaxPayInstruction (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the active pay instructions report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getActivePayInstructionsReportOutputAsync(String employerKey, String employeeKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate activeOn, LocalDate toDate, String type, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActivePayInstructionsReportOutputValidateBeforeCall(employerKey, employeeKey, fromDate, authorization, apiVersion, activeOn, toDate, type, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAoeLiabilityReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the AOE liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAoeLiabilityReportOuputCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/AOELIABILITY/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (taxPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxPeriod", taxPeriod));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAoeLiabilityReportOuputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getAoeLiabilityReportOuput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getAoeLiabilityReportOuput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getAoeLiabilityReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAoeLiabilityReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getAoeLiabilityReportOuput(Async)");
        }

        return getAoeLiabilityReportOuputCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, transformDefinitionKey, _callback);

    }

    /**
     * Runs the AOE liability report
     * Returns the result of the executed AOE liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the AOE liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getAoeLiabilityReportOuput(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String transformDefinitionKey) throws ApiException {
        ApiResponse<File> localVarResp = getAoeLiabilityReportOuputWithHttpInfo(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, transformDefinitionKey);
        return localVarResp.getData();
    }

    /**
     * Runs the AOE liability report
     * Returns the result of the executed AOE liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the AOE liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getAoeLiabilityReportOuputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String transformDefinitionKey) throws ApiException {
        okhttp3.Call localVarCall = getAoeLiabilityReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, transformDefinitionKey, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the AOE liability report (asynchronously)
     * Returns the result of the executed AOE liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the AOE liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAoeLiabilityReportOuputAsync(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String transformDefinitionKey, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAoeLiabilityReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, transformDefinitionKey, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDpsMessageReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param messageTypes The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2 (optional)
     * @param messageStatuses The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the DPS message report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDpsMessageReportOutputCall(String employerKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate toDate, String messageTypes, String messageStatuses, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/DPSMSG/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (fromDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("FromDate", fromDate));
        }

        if (toDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ToDate", toDate));
        }

        if (messageTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageTypes", messageTypes));
        }

        if (messageStatuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageStatuses", messageStatuses));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDpsMessageReportOutputValidateBeforeCall(String employerKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate toDate, String messageTypes, String messageStatuses, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getDpsMessageReportOutput(Async)");
        }

        // verify the required parameter 'fromDate' is set
        if (fromDate == null) {
            throw new ApiException("Missing the required parameter 'fromDate' when calling getDpsMessageReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getDpsMessageReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getDpsMessageReportOutput(Async)");
        }

        return getDpsMessageReportOutputCall(employerKey, fromDate, authorization, apiVersion, toDate, messageTypes, messageStatuses, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the DPS message report
     * Returns the result of the executed DPS message report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param messageTypes The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2 (optional)
     * @param messageStatuses The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the DPS message report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getDpsMessageReportOutput(String employerKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate toDate, String messageTypes, String messageStatuses, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getDpsMessageReportOutputWithHttpInfo(employerKey, fromDate, authorization, apiVersion, toDate, messageTypes, messageStatuses, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the DPS message report
     * Returns the result of the executed DPS message report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param messageTypes The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2 (optional)
     * @param messageStatuses The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the DPS message report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getDpsMessageReportOutputWithHttpInfo(String employerKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate toDate, String messageTypes, String messageStatuses, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getDpsMessageReportOutputValidateBeforeCall(employerKey, fromDate, authorization, apiVersion, toDate, messageTypes, messageStatuses, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the DPS message report (asynchronously)
     * Returns the result of the executed DPS message report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param fromDate The lower filter date. E.g 2016-04-06 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param toDate The upper filter date. E.g 2017-04-05 (optional)
     * @param messageTypes The DPS message types as a CSV list. E.g. P6,P9,SL1,SL2 (optional)
     * @param messageStatuses The DPS message status as a CSV list. E.g. Retrieved,Processed,Blocked,Ignored (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the DPS message report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDpsMessageReportOutputAsync(String employerKey, LocalDate fromDate, String authorization, String apiVersion, LocalDate toDate, String messageTypes, String messageStatuses, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDpsMessageReportOutputValidateBeforeCall(employerKey, fromDate, authorization, apiVersion, toDate, messageTypes, messageStatuses, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEmployerSummaryReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param contextDate The date context for the report. E.g. 2018-04-30 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the employer summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployerSummaryReportOuputCall(String employerKey, LocalDate contextDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/EMPSUM/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (contextDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContextDate", contextDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployerSummaryReportOuputValidateBeforeCall(String employerKey, LocalDate contextDate, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getEmployerSummaryReportOuput(Async)");
        }

        // verify the required parameter 'contextDate' is set
        if (contextDate == null) {
            throw new ApiException("Missing the required parameter 'contextDate' when calling getEmployerSummaryReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getEmployerSummaryReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getEmployerSummaryReportOuput(Async)");
        }

        return getEmployerSummaryReportOuputCall(employerKey, contextDate, authorization, apiVersion, _callback);

    }

    /**
     * Runs the employer summary report
     * Returns the result of the employer summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param contextDate The date context for the report. E.g. 2018-04-30 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the employer summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getEmployerSummaryReportOuput(String employerKey, LocalDate contextDate, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getEmployerSummaryReportOuputWithHttpInfo(employerKey, contextDate, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the employer summary report
     * Returns the result of the employer summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param contextDate The date context for the report. E.g. 2018-04-30 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the employer summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getEmployerSummaryReportOuputWithHttpInfo(String employerKey, LocalDate contextDate, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getEmployerSummaryReportOuputValidateBeforeCall(employerKey, contextDate, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the employer summary report (asynchronously)
     * Returns the result of the employer summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param contextDate The date context for the report. E.g. 2018-04-30 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the employer summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEmployerSummaryReportOuputAsync(String employerKey, LocalDate contextDate, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployerSummaryReportOuputValidateBeforeCall(employerKey, contextDate, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGrossToNetReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the gross to net report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGrossToNetReportOutputCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/GRO2NET/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (taxPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxPeriod", taxPeriod));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGrossToNetReportOutputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getGrossToNetReportOutput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getGrossToNetReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getGrossToNetReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getGrossToNetReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getGrossToNetReportOutput(Async)");
        }

        return getGrossToNetReportOutputCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the gross to net report
     * Returns the result of the executed gross to net report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the gross to net report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getGrossToNetReportOutput(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getGrossToNetReportOutputWithHttpInfo(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the gross to net report
     * Returns the result of the executed gross to net report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the gross to net report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getGrossToNetReportOutputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getGrossToNetReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the gross to net report (asynchronously)
     * Returns the result of the executed gross to net report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the gross to net report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGrossToNetReportOutputAsync(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGrossToNetReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHolidayBalanceReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param holidayYearEnd The holiday year end for the report. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the holiday balance report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHolidayBalanceReportOutputCall(String employerKey, LocalDate holidayYearEnd, String authorization, String apiVersion, String employeeCodes, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/HOLBAL/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (holidayYearEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("HolidayYearEnd", holidayYearEnd));
        }

        if (employeeCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeCodes", employeeCodes));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHolidayBalanceReportOutputValidateBeforeCall(String employerKey, LocalDate holidayYearEnd, String authorization, String apiVersion, String employeeCodes, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getHolidayBalanceReportOutput(Async)");
        }

        // verify the required parameter 'holidayYearEnd' is set
        if (holidayYearEnd == null) {
            throw new ApiException("Missing the required parameter 'holidayYearEnd' when calling getHolidayBalanceReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getHolidayBalanceReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getHolidayBalanceReportOutput(Async)");
        }

        return getHolidayBalanceReportOutputCall(employerKey, holidayYearEnd, authorization, apiVersion, employeeCodes, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the holiday balance report
     * Returns the result of the executed holiday balance report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param holidayYearEnd The holiday year end for the report. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the holiday balance report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getHolidayBalanceReportOutput(String employerKey, LocalDate holidayYearEnd, String authorization, String apiVersion, String employeeCodes, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getHolidayBalanceReportOutputWithHttpInfo(employerKey, holidayYearEnd, authorization, apiVersion, employeeCodes, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the holiday balance report
     * Returns the result of the executed holiday balance report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param holidayYearEnd The holiday year end for the report. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the holiday balance report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getHolidayBalanceReportOutputWithHttpInfo(String employerKey, LocalDate holidayYearEnd, String authorization, String apiVersion, String employeeCodes, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getHolidayBalanceReportOutputValidateBeforeCall(employerKey, holidayYearEnd, authorization, apiVersion, employeeCodes, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the holiday balance report (asynchronously)
     * Returns the result of the executed holiday balance report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param holidayYearEnd The holiday year end for the report. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the holiday balance report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHolidayBalanceReportOutputAsync(String employerKey, LocalDate holidayYearEnd, String authorization, String apiVersion, String employeeCodes, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHolidayBalanceReportOutputValidateBeforeCall(employerKey, holidayYearEnd, authorization, apiVersion, employeeCodes, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJournalReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payFrequency The pay frequency option. E.g. Monthly (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param ledgerTarget Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default] (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the journal report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalReportOuputCall(String employerKey, String payFrequency, Integer taxYear, String ledgerTarget, String authorization, String apiVersion, Integer taxPeriod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/JOURNAL/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payFrequency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayFrequency", payFrequency));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (taxPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxPeriod", taxPeriod));
        }

        if (ledgerTarget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("LedgerTarget", ledgerTarget));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalReportOuputValidateBeforeCall(String employerKey, String payFrequency, Integer taxYear, String ledgerTarget, String authorization, String apiVersion, Integer taxPeriod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getJournalReportOuput(Async)");
        }

        // verify the required parameter 'payFrequency' is set
        if (payFrequency == null) {
            throw new ApiException("Missing the required parameter 'payFrequency' when calling getJournalReportOuput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getJournalReportOuput(Async)");
        }

        // verify the required parameter 'ledgerTarget' is set
        if (ledgerTarget == null) {
            throw new ApiException("Missing the required parameter 'ledgerTarget' when calling getJournalReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getJournalReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getJournalReportOuput(Async)");
        }

        return getJournalReportOuputCall(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, taxPeriod, _callback);

    }

    /**
     * Runs the journal report
     * Returns the result of the journal report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payFrequency The pay frequency option. E.g. Monthly (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param ledgerTarget Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default] (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the journal report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getJournalReportOuput(String employerKey, String payFrequency, Integer taxYear, String ledgerTarget, String authorization, String apiVersion, Integer taxPeriod) throws ApiException {
        ApiResponse<File> localVarResp = getJournalReportOuputWithHttpInfo(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, taxPeriod);
        return localVarResp.getData();
    }

    /**
     * Runs the journal report
     * Returns the result of the journal report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payFrequency The pay frequency option. E.g. Monthly (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param ledgerTarget Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default] (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the journal report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getJournalReportOuputWithHttpInfo(String employerKey, String payFrequency, Integer taxYear, String ledgerTarget, String authorization, String apiVersion, Integer taxPeriod) throws ApiException {
        okhttp3.Call localVarCall = getJournalReportOuputValidateBeforeCall(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, taxPeriod, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the journal report (asynchronously)
     * Returns the result of the journal report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payFrequency The pay frequency option. E.g. Monthly (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param ledgerTarget Specific to JOURNAL report, a filter used to select the journal lines for the specified ledger target. E.g. [Default] (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the journal report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalReportOuputAsync(String employerKey, String payFrequency, Integer taxYear, String ledgerTarget, String authorization, String apiVersion, Integer taxPeriod, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalReportOuputValidateBeforeCall(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, taxPeriod, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLastPayDateReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the last pay date report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastPayDateReportOuputCall(String employerKey, String employeeKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/LASTPAYDATE/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (employeeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeKey", employeeKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastPayDateReportOuputValidateBeforeCall(String employerKey, String employeeKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getLastPayDateReportOuput(Async)");
        }

        // verify the required parameter 'employeeKey' is set
        if (employeeKey == null) {
            throw new ApiException("Missing the required parameter 'employeeKey' when calling getLastPayDateReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getLastPayDateReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getLastPayDateReportOuput(Async)");
        }

        return getLastPayDateReportOuputCall(employerKey, employeeKey, authorization, apiVersion, _callback);

    }

    /**
     * Runs the last pay date report
     * Returns the result of the executed last pay date report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the last pay date report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getLastPayDateReportOuput(String employerKey, String employeeKey, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getLastPayDateReportOuputWithHttpInfo(employerKey, employeeKey, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the last pay date report
     * Returns the result of the executed last pay date report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the last pay date report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getLastPayDateReportOuputWithHttpInfo(String employerKey, String employeeKey, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getLastPayDateReportOuputValidateBeforeCall(employerKey, employeeKey, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the last pay date report (asynchronously)
     * Returns the result of the executed last pay date report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the last pay date report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLastPayDateReportOuputAsync(String employerKey, String employeeKey, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastPayDateReportOuputValidateBeforeCall(employerKey, employeeKey, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetPayReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the net pay report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetPayReportOutputCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/NETPAY/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (taxPeriod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxPeriod", taxPeriod));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetPayReportOutputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getNetPayReportOutput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getNetPayReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getNetPayReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getNetPayReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getNetPayReportOutput(Async)");
        }

        return getNetPayReportOutputCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the net pay report
     * Returns the result of the executed net pay report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the net pay report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getNetPayReportOutput(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getNetPayReportOutputWithHttpInfo(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the net pay report
     * Returns the result of the executed net pay report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the net pay report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getNetPayReportOutputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getNetPayReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the net pay report (asynchronously)
     * Returns the result of the executed net pay report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param taxPeriod The tax period number. (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the net pay report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetPayReportOutputAsync(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, Integer taxPeriod, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetPayReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNextPayPeriodDatesReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the next pay period report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextPayPeriodDatesReportOutputCall(String employerKey, String payScheduleKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/NEXTPERIOD/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNextPayPeriodDatesReportOutputValidateBeforeCall(String employerKey, String payScheduleKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getNextPayPeriodDatesReportOutput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getNextPayPeriodDatesReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getNextPayPeriodDatesReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getNextPayPeriodDatesReportOutput(Async)");
        }

        return getNextPayPeriodDatesReportOutputCall(employerKey, payScheduleKey, authorization, apiVersion, _callback);

    }

    /**
     * Runs the next pay period report
     * Returns the result of the executed next pay period report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the next pay period report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getNextPayPeriodDatesReportOutput(String employerKey, String payScheduleKey, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getNextPayPeriodDatesReportOutputWithHttpInfo(employerKey, payScheduleKey, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the next pay period report
     * Returns the result of the executed next pay period report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the next pay period report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getNextPayPeriodDatesReportOutputWithHttpInfo(String employerKey, String payScheduleKey, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getNextPayPeriodDatesReportOutputValidateBeforeCall(employerKey, payScheduleKey, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the next pay period report (asynchronously)
     * Returns the result of the executed next pay period report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the next pay period report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNextPayPeriodDatesReportOutputAsync(String employerKey, String payScheduleKey, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNextPayPeriodDatesReportOutputValidateBeforeCall(employerKey, payScheduleKey, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getP11SummaryReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P11 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP11SummaryReportOutputCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/P11SUM/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getP11SummaryReportOutputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getP11SummaryReportOutput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getP11SummaryReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getP11SummaryReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getP11SummaryReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getP11SummaryReportOutput(Async)");
        }

        return getP11SummaryReportOutputCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the P11 summary report
     * Returns the result of the executed P11 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P11 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getP11SummaryReportOutput(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getP11SummaryReportOutputWithHttpInfo(employerKey, payScheduleKey, taxYear, authorization, apiVersion, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the P11 summary report
     * Returns the result of the executed P11 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P11 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getP11SummaryReportOutputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getP11SummaryReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the P11 summary report (asynchronously)
     * Returns the result of the executed P11 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P11 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP11SummaryReportOutputAsync(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getP11SummaryReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getP32NetReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP32NetReportOutputCall(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/P32/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getP32NetReportOutputValidateBeforeCall(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getP32NetReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getP32NetReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getP32NetReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getP32NetReportOutput(Async)");
        }

        return getP32NetReportOutputCall(employerKey, taxYear, authorization, apiVersion, _callback);

    }

    /**
     * Runs the P32 report
     * Returns the result of the executed P32 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getP32NetReportOutput(String employerKey, Integer taxYear, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getP32NetReportOutputWithHttpInfo(employerKey, taxYear, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the P32 report
     * Returns the result of the executed P32 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getP32NetReportOutputWithHttpInfo(String employerKey, Integer taxYear, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getP32NetReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the P32 report (asynchronously)
     * Returns the result of the executed P32 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP32NetReportOutputAsync(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getP32NetReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getP32SummaryNetReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP32SummaryNetReportOutputCall(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/P32SUM/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getP32SummaryNetReportOutputValidateBeforeCall(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getP32SummaryNetReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getP32SummaryNetReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getP32SummaryNetReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getP32SummaryNetReportOutput(Async)");
        }

        return getP32SummaryNetReportOutputCall(employerKey, taxYear, authorization, apiVersion, _callback);

    }

    /**
     * Runs the P32 summary report
     * Returns the result of the executed P32 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getP32SummaryNetReportOutput(String employerKey, Integer taxYear, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getP32SummaryNetReportOutputWithHttpInfo(employerKey, taxYear, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the P32 summary report
     * Returns the result of the executed P32 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getP32SummaryNetReportOutputWithHttpInfo(String employerKey, Integer taxYear, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getP32SummaryNetReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the P32 summary report (asynchronously)
     * Returns the result of the executed P32 summary report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P32 summary report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP32SummaryNetReportOutputAsync(String employerKey, Integer taxYear, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getP32SummaryNetReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getP45ReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P45 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP45ReportOutputCall(String employerKey, String employeeKey, String authorization, String apiVersion, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/P45/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (employeeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeKey", employeeKey));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getP45ReportOutputValidateBeforeCall(String employerKey, String employeeKey, String authorization, String apiVersion, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getP45ReportOutput(Async)");
        }

        // verify the required parameter 'employeeKey' is set
        if (employeeKey == null) {
            throw new ApiException("Missing the required parameter 'employeeKey' when calling getP45ReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getP45ReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getP45ReportOutput(Async)");
        }

        return getP45ReportOutputCall(employerKey, employeeKey, authorization, apiVersion, transformDefinitionKey, _callback);

    }

    /**
     * Runs the P45 report
     * Returns the result of the executed P45 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P45 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getP45ReportOutput(String employerKey, String employeeKey, String authorization, String apiVersion, String transformDefinitionKey) throws ApiException {
        ApiResponse<File> localVarResp = getP45ReportOutputWithHttpInfo(employerKey, employeeKey, authorization, apiVersion, transformDefinitionKey);
        return localVarResp.getData();
    }

    /**
     * Runs the P45 report
     * Returns the result of the executed P45 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P45 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getP45ReportOutputWithHttpInfo(String employerKey, String employeeKey, String authorization, String apiVersion, String transformDefinitionKey) throws ApiException {
        okhttp3.Call localVarCall = getP45ReportOutputValidateBeforeCall(employerKey, employeeKey, authorization, apiVersion, transformDefinitionKey, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the P45 report (asynchronously)
     * Returns the result of the executed P45 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param employeeKey The employee unique key. E.g. EE001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P45 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP45ReportOutputAsync(String employerKey, String employeeKey, String authorization, String apiVersion, String transformDefinitionKey, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getP45ReportOutputValidateBeforeCall(employerKey, employeeKey, authorization, apiVersion, transformDefinitionKey, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getP60ReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P60 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP60ReportOutputCall(String employerKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/P60/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (employeeCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeCodes", employeeCodes));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getP60ReportOutputValidateBeforeCall(String employerKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getP60ReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getP60ReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getP60ReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getP60ReportOutput(Async)");
        }

        return getP60ReportOutputCall(employerKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, _callback);

    }

    /**
     * Runs the P60 report
     * Returns the result of the executed P60 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P60 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getP60ReportOutput(String employerKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex) throws ApiException {
        ApiResponse<File> localVarResp = getP60ReportOutputWithHttpInfo(employerKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex);
        return localVarResp.getData();
    }

    /**
     * Runs the P60 report
     * Returns the result of the executed P60 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P60 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getP60ReportOutputWithHttpInfo(String employerKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex) throws ApiException {
        okhttp3.Call localVarCall = getP60ReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the P60 report (asynchronously)
     * Returns the result of the executed P60 report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the P60 report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getP60ReportOutputAsync(String employerKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getP60ReportOutputValidateBeforeCall(employerKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPapdisReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PAPDIS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPapdisReportOuputCall(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String authorization, String apiVersion, LocalDate paymentDate, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/PAPDIS/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaymentDate", paymentDate));
        }

        if (pensionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PensionKey", pensionKey));
        }

        if (messageFunctionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageFunctionCode", messageFunctionCode));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPapdisReportOuputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String authorization, String apiVersion, LocalDate paymentDate, String transformDefinitionKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'pensionKey' is set
        if (pensionKey == null) {
            throw new ApiException("Missing the required parameter 'pensionKey' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'messageFunctionCode' is set
        if (messageFunctionCode == null) {
            throw new ApiException("Missing the required parameter 'messageFunctionCode' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPapdisReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPapdisReportOuput(Async)");
        }

        return getPapdisReportOuputCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, paymentDate, transformDefinitionKey, _callback);

    }

    /**
     * Runs the PAPDIS report
     * Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PAPDIS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getPapdisReportOuput(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String authorization, String apiVersion, LocalDate paymentDate, String transformDefinitionKey) throws ApiException {
        ApiResponse<File> localVarResp = getPapdisReportOuputWithHttpInfo(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, paymentDate, transformDefinitionKey);
        return localVarResp.getData();
    }

    /**
     * Runs the PAPDIS report
     * Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PAPDIS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPapdisReportOuputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String authorization, String apiVersion, LocalDate paymentDate, String transformDefinitionKey) throws ApiException {
        okhttp3.Call localVarCall = getPapdisReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, paymentDate, transformDefinitionKey, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the PAPDIS report (asynchronously)
     * Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PAPDIS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPapdisReportOuputAsync(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String authorization, String apiVersion, LocalDate paymentDate, String transformDefinitionKey, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPapdisReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, paymentDate, transformDefinitionKey, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPassReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param intermediaryId Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer. (required)
     * @param documentId Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PASS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPassReportOuputCall(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String intermediaryId, String documentId, String authorization, String apiVersion, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/PASS/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaymentDate", paymentDate));
        }

        if (pensionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PensionKey", pensionKey));
        }

        if (messageFunctionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MessageFunctionCode", messageFunctionCode));
        }

        if (intermediaryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("IntermediaryId", intermediaryId));
        }

        if (documentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DocumentId", documentId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPassReportOuputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String intermediaryId, String documentId, String authorization, String apiVersion, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'pensionKey' is set
        if (pensionKey == null) {
            throw new ApiException("Missing the required parameter 'pensionKey' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'messageFunctionCode' is set
        if (messageFunctionCode == null) {
            throw new ApiException("Missing the required parameter 'messageFunctionCode' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'intermediaryId' is set
        if (intermediaryId == null) {
            throw new ApiException("Missing the required parameter 'intermediaryId' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPassReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPassReportOuput(Async)");
        }

        return getPassReportOuputCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, paymentDate, _callback);

    }

    /**
     * Runs the PASS report
     * Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param intermediaryId Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer. (required)
     * @param documentId Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PASS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getPassReportOuput(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String intermediaryId, String documentId, String authorization, String apiVersion, LocalDate paymentDate) throws ApiException {
        ApiResponse<File> localVarResp = getPassReportOuputWithHttpInfo(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, paymentDate);
        return localVarResp.getData();
    }

    /**
     * Runs the PASS report
     * Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param intermediaryId Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer. (required)
     * @param documentId Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PASS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPassReportOuputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String intermediaryId, String documentId, String authorization, String apiVersion, LocalDate paymentDate) throws ApiException {
        okhttp3.Call localVarCall = getPassReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, paymentDate, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the PASS report (asynchronously)
     * Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param messageFunctionCode Specific to PAPDIS report, specifies the business function that the sender is requesting. If left BLANK it will be assumed to be 0 (Enrol / Receive Contributions). (required)
     * @param intermediaryId Specific to PensionSync PASS report, a unique identifier for the Intermediary who is acting on behalf of the employer. (required)
     * @param documentId Specific to PensionSync PASS report, a document identifier unique for this document within the Intermediary. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the PASS report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPassReportOuputAsync(String employerKey, String payScheduleKey, Integer taxYear, String pensionKey, String messageFunctionCode, String intermediaryId, String documentId, String authorization, String apiVersion, LocalDate paymentDate, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPassReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, paymentDate, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayDashboardPayslipReportOuput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param publicationDate Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the Pay Dashboard payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayDashboardPayslipReportOuputCall(String employerKey, String payScheduleKey, Integer taxYear, LocalDate publicationDate, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/PAYDASHBOARD/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (employeeCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeCodes", employeeCodes));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaymentDate", paymentDate));
        }

        if (publicationDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PublicationDate", publicationDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayDashboardPayslipReportOuputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, LocalDate publicationDate, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        // verify the required parameter 'publicationDate' is set
        if (publicationDate == null) {
            throw new ApiException("Missing the required parameter 'publicationDate' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayDashboardPayslipReportOuput(Async)");
        }

        return getPayDashboardPayslipReportOuputCall(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, _callback);

    }

    /**
     * Runs the Pay Dashboard payslips report
     * Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey&#x3D;Json-Clean.
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param publicationDate Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the Pay Dashboard payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getPayDashboardPayslipReportOuput(String employerKey, String payScheduleKey, Integer taxYear, LocalDate publicationDate, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate) throws ApiException {
        ApiResponse<File> localVarResp = getPayDashboardPayslipReportOuputWithHttpInfo(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate);
        return localVarResp.getData();
    }

    /**
     * Runs the Pay Dashboard payslips report
     * Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey&#x3D;Json-Clean.
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param publicationDate Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the Pay Dashboard payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPayDashboardPayslipReportOuputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, LocalDate publicationDate, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate) throws ApiException {
        okhttp3.Call localVarCall = getPayDashboardPayslipReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the Pay Dashboard payslips report (asynchronously)
     * Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey&#x3D;Json-Clean.
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param publicationDate Specific to the Pay Dashboard report, allows the specification of a future payslip publication date. E.g. 2018-12-31 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the Pay Dashboard payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayDashboardPayslipReportOuputAsync(String employerKey, String payScheduleKey, Integer taxYear, LocalDate publicationDate, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayDashboardPayslipReportOuputValidateBeforeCall(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPayslip3ReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the verbose payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayslip3ReportOutputCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/PAYSLIP3/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (payScheduleKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PayScheduleKey", payScheduleKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (employeeCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployeeCodes", employeeCodes));
        }

        if (transformDefinitionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TransformDefinitionKey", transformDefinitionKey));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartIndex", startIndex));
        }

        if (maxIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxIndex", maxIndex));
        }

        if (paymentDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PaymentDate", paymentDate));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPayslip3ReportOutputValidateBeforeCall(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getPayslip3ReportOutput(Async)");
        }

        // verify the required parameter 'payScheduleKey' is set
        if (payScheduleKey == null) {
            throw new ApiException("Missing the required parameter 'payScheduleKey' when calling getPayslip3ReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getPayslip3ReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPayslip3ReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPayslip3ReportOutput(Async)");
        }

        return getPayslip3ReportOutputCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, _callback);

    }

    /**
     * Runs the verbose payslip report
     * Returns the result of the executed verbose payslip report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the verbose payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getPayslip3ReportOutput(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate) throws ApiException {
        ApiResponse<File> localVarResp = getPayslip3ReportOutputWithHttpInfo(employerKey, payScheduleKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate);
        return localVarResp.getData();
    }

    /**
     * Runs the verbose payslip report
     * Returns the result of the executed verbose payslip report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the verbose payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPayslip3ReportOutputWithHttpInfo(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate) throws ApiException {
        okhttp3.Call localVarCall = getPayslip3ReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the verbose payslip report (asynchronously)
     * Returns the result of the executed verbose payslip report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param payScheduleKey The pay schedule unique key. E.g. SCH001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param employeeCodes A comma separated list of the employee codes. E.g. EMP001,EMP002 (optional)
     * @param transformDefinitionKey The transform definition unique key. E.g. P45-Pdf (optional)
     * @param startIndex The element index to begin the report. Used to control paging within large data sets. E.g. 1 (optional)
     * @param maxIndex The highest element index to return from the report. Used to control paging within large data sets. E.g. 100 (optional)
     * @param paymentDate The payment date context for the report. E.g. 2018-04-30 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the verbose payslip report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPayslip3ReportOutputAsync(String employerKey, String payScheduleKey, Integer taxYear, String authorization, String apiVersion, String employeeCodes, String transformDefinitionKey, String startIndex, String maxIndex, LocalDate paymentDate, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPayslip3ReportOutputValidateBeforeCall(employerKey, payScheduleKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPensionLiabilityReportOutput
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the pension liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPensionLiabilityReportOutputCall(String employerKey, Integer taxYear, String pensionKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/PENLIABILITY/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employerKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EmployerKey", employerKey));
        }

        if (taxYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("TaxYear", taxYear));
        }

        if (pensionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PensionKey", pensionKey));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPensionLiabilityReportOutputValidateBeforeCall(String employerKey, Integer taxYear, String pensionKey, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employerKey' is set
        if (employerKey == null) {
            throw new ApiException("Missing the required parameter 'employerKey' when calling getPensionLiabilityReportOutput(Async)");
        }

        // verify the required parameter 'taxYear' is set
        if (taxYear == null) {
            throw new ApiException("Missing the required parameter 'taxYear' when calling getPensionLiabilityReportOutput(Async)");
        }

        // verify the required parameter 'pensionKey' is set
        if (pensionKey == null) {
            throw new ApiException("Missing the required parameter 'pensionKey' when calling getPensionLiabilityReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getPensionLiabilityReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getPensionLiabilityReportOutput(Async)");
        }

        return getPensionLiabilityReportOutputCall(employerKey, taxYear, pensionKey, authorization, apiVersion, _callback);

    }

    /**
     * Runs the pension liability report
     * Returns the result of the executed pension liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the pension liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getPensionLiabilityReportOutput(String employerKey, Integer taxYear, String pensionKey, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getPensionLiabilityReportOutputWithHttpInfo(employerKey, taxYear, pensionKey, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the pension liability report
     * Returns the result of the executed pension liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the pension liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getPensionLiabilityReportOutputWithHttpInfo(String employerKey, Integer taxYear, String pensionKey, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getPensionLiabilityReportOutputValidateBeforeCall(employerKey, taxYear, pensionKey, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the pension liability report (asynchronously)
     * Returns the result of the executed pension liability report for the given query parameters
     * @param employerKey The employer unique key. E.g. ER001 (required)
     * @param taxYear The tax year. E.g. 2017 &#x3D; 2017/18 year. (required)
     * @param pensionKey The pension scheme unique key. E.g. PENSCH001 (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the pension liability report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPensionLiabilityReportOutputAsync(String employerKey, Integer taxYear, String pensionKey, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPensionLiabilityReportOutputValidateBeforeCall(employerKey, taxYear, pensionKey, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportDefinitionFromApplication
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDefinitionFromApplicationCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/{ReportDefinitionId}"
            .replace("{" + "ReportDefinitionId" + "}", localVarApiClient.escapeString(reportDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDefinitionFromApplicationValidateBeforeCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportDefinitionId' is set
        if (reportDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'reportDefinitionId' when calling getReportDefinitionFromApplication(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportDefinitionFromApplication(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReportDefinitionFromApplication(Async)");
        }

        return getReportDefinitionFromApplicationCall(reportDefinitionId, authorization, apiVersion, _callback);

    }

    /**
     * Get the report definition
     * Returns the specified report definition from the authroised application
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ReportDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportDefinition getReportDefinitionFromApplication(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<ReportDefinition> localVarResp = getReportDefinitionFromApplicationWithHttpInfo(reportDefinitionId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the report definition
     * Returns the specified report definition from the authroised application
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;ReportDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportDefinition> getReportDefinitionFromApplicationWithHttpInfo(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getReportDefinitionFromApplicationValidateBeforeCall(reportDefinitionId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<ReportDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the report definition (asynchronously)
     * Returns the specified report definition from the authroised application
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDefinitionFromApplicationAsync(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback<ReportDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDefinitionFromApplicationValidateBeforeCall(reportDefinitionId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ReportDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportDefinitionsFromApplication
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDefinitionsFromApplicationCall(String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportDefinitionsFromApplicationValidateBeforeCall(String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportDefinitionsFromApplication(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReportDefinitionsFromApplication(Async)");
        }

        return getReportDefinitionsFromApplicationCall(authorization, apiVersion, _callback);

    }

    /**
     * Gets all reports
     * Get links to all saved report definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getReportDefinitionsFromApplication(String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getReportDefinitionsFromApplicationWithHttpInfo(authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all reports
     * Get links to all saved report definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getReportDefinitionsFromApplicationWithHttpInfo(String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getReportDefinitionsFromApplicationValidateBeforeCall(authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all reports (asynchronously)
     * Get links to all saved report definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportDefinitionsFromApplicationAsync(String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportDefinitionsFromApplicationValidateBeforeCall(authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getReportOutput
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportOutputCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Report/{ReportDefinitionId}/run"
            .replace("{" + "ReportDefinitionId" + "}", localVarApiClient.escapeString(reportDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReportOutputValidateBeforeCall(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportDefinitionId' is set
        if (reportDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'reportDefinitionId' when calling getReportOutput(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getReportOutput(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getReportOutput(Async)");
        }

        return getReportOutputCall(reportDefinitionId, authorization, apiVersion, _callback);

    }

    /**
     * Runs the specified report definition
     * Returns the result of the executed report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public File getReportOutput(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<File> localVarResp = getReportOutputWithHttpInfo(reportDefinitionId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Runs the specified report definition
     * Returns the result of the executed report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getReportOutputWithHttpInfo(String reportDefinitionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getReportOutputValidateBeforeCall(reportDefinitionId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Runs the specified report definition (asynchronously)
     * Returns the result of the executed report definition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The result of the report execution </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getReportOutputAsync(String reportDefinitionId, String authorization, String apiVersion, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReportOutputValidateBeforeCall(reportDefinitionId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransformDefinitionFromApplication
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformDefinitionFromApplicationCall(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Transform/{TransformDefinitionId}"
            .replace("{" + "TransformDefinitionId" + "}", localVarApiClient.escapeString(transformDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformDefinitionFromApplicationValidateBeforeCall(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformDefinitionId' is set
        if (transformDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'transformDefinitionId' when calling getTransformDefinitionFromApplication(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTransformDefinitionFromApplication(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getTransformDefinitionFromApplication(Async)");
        }

        return getTransformDefinitionFromApplicationCall(transformDefinitionId, authorization, apiVersion, _callback);

    }

    /**
     * Get the transform definition
     * Returns the specified transform definition from the authroised application
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return TransformDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TransformDefinition getTransformDefinitionFromApplication(String transformDefinitionId, String authorization, String apiVersion) throws ApiException {
        ApiResponse<TransformDefinition> localVarResp = getTransformDefinitionFromApplicationWithHttpInfo(transformDefinitionId, authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get the transform definition
     * Returns the specified transform definition from the authroised application
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;TransformDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransformDefinition> getTransformDefinitionFromApplicationWithHttpInfo(String transformDefinitionId, String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getTransformDefinitionFromApplicationValidateBeforeCall(transformDefinitionId, authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<TransformDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the transform definition (asynchronously)
     * Returns the specified transform definition from the authroised application
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformDefinitionFromApplicationAsync(String transformDefinitionId, String authorization, String apiVersion, final ApiCallback<TransformDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformDefinitionFromApplicationValidateBeforeCall(transformDefinitionId, authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TransformDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransformDefinitionsFromApplication
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformDefinitionsFromApplicationCall(String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Transforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformDefinitionsFromApplicationValidateBeforeCall(String authorization, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getTransformDefinitionsFromApplication(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling getTransformDefinitionsFromApplication(Async)");
        }

        return getTransformDefinitionsFromApplicationCall(authorization, apiVersion, _callback);

    }

    /**
     * Gets all transform definitions
     * Get links to all saved transform definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return LinkCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public LinkCollection getTransformDefinitionsFromApplication(String authorization, String apiVersion) throws ApiException {
        ApiResponse<LinkCollection> localVarResp = getTransformDefinitionsFromApplicationWithHttpInfo(authorization, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Gets all transform definitions
     * Get links to all saved transform definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @return ApiResponse&lt;LinkCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LinkCollection> getTransformDefinitionsFromApplicationWithHttpInfo(String authorization, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = getTransformDefinitionsFromApplicationValidateBeforeCall(authorization, apiVersion, null);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets all transform definitions (asynchronously)
     * Get links to all saved transform definitions under authorised application
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The link collection object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransformDefinitionsFromApplicationAsync(String authorization, String apiVersion, final ApiCallback<LinkCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformDefinitionsFromApplicationValidateBeforeCall(authorization, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LinkCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postReportDefinition
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postReportDefinitionCall(String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportDefinition;

        // create path and map variables
        String localVarPath = "/Reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postReportDefinitionValidateBeforeCall(String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postReportDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postReportDefinition(Async)");
        }

        // verify the required parameter 'reportDefinition' is set
        if (reportDefinition == null) {
            throw new ApiException("Missing the required parameter 'reportDefinition' when calling postReportDefinition(Async)");
        }

        return postReportDefinitionCall(authorization, apiVersion, reportDefinition, _callback);

    }

    /**
     * Create a new report definition
     * Creates a new report defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Link postReportDefinition(String authorization, String apiVersion, ReportDefinition reportDefinition) throws ApiException {
        ApiResponse<Link> localVarResp = postReportDefinitionWithHttpInfo(authorization, apiVersion, reportDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a new report definition
     * Creates a new report defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Link> postReportDefinitionWithHttpInfo(String authorization, String apiVersion, ReportDefinition reportDefinition) throws ApiException {
        okhttp3.Call localVarCall = postReportDefinitionValidateBeforeCall(authorization, apiVersion, reportDefinition, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new report definition (asynchronously)
     * Creates a new report defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postReportDefinitionAsync(String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback<Link> _callback) throws ApiException {

        okhttp3.Call localVarCall = postReportDefinitionValidateBeforeCall(authorization, apiVersion, reportDefinition, _callback);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTransformDefinition
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTransformDefinitionCall(String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformDefinition;

        // create path and map variables
        String localVarPath = "/Transforms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTransformDefinitionValidateBeforeCall(String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling postTransformDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling postTransformDefinition(Async)");
        }

        // verify the required parameter 'transformDefinition' is set
        if (transformDefinition == null) {
            throw new ApiException("Missing the required parameter 'transformDefinition' when calling postTransformDefinition(Async)");
        }

        return postTransformDefinitionCall(authorization, apiVersion, transformDefinition, _callback);

    }

    /**
     * Create a new transform definition
     * Creates a new transform defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @return Link
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Link postTransformDefinition(String authorization, String apiVersion, TransformDefinition transformDefinition) throws ApiException {
        ApiResponse<Link> localVarResp = postTransformDefinitionWithHttpInfo(authorization, apiVersion, transformDefinition);
        return localVarResp.getData();
    }

    /**
     * Create a new transform definition
     * Creates a new transform defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @return ApiResponse&lt;Link&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Link> postTransformDefinitionWithHttpInfo(String authorization, String apiVersion, TransformDefinition transformDefinition) throws ApiException {
        okhttp3.Call localVarCall = postTransformDefinitionValidateBeforeCall(authorization, apiVersion, transformDefinition, null);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new transform definition (asynchronously)
     * Creates a new transform defintion object
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The link object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTransformDefinitionAsync(String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback<Link> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTransformDefinitionValidateBeforeCall(authorization, apiVersion, transformDefinition, _callback);
        Type localVarReturnType = new TypeToken<Link>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putReportDefinition
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putReportDefinitionCall(String reportDefinitionId, String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportDefinition;

        // create path and map variables
        String localVarPath = "/Report/{ReportDefinitionId}"
            .replace("{" + "ReportDefinitionId" + "}", localVarApiClient.escapeString(reportDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putReportDefinitionValidateBeforeCall(String reportDefinitionId, String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportDefinitionId' is set
        if (reportDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'reportDefinitionId' when calling putReportDefinition(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putReportDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putReportDefinition(Async)");
        }

        // verify the required parameter 'reportDefinition' is set
        if (reportDefinition == null) {
            throw new ApiException("Missing the required parameter 'reportDefinition' when calling putReportDefinition(Async)");
        }

        return putReportDefinitionCall(reportDefinitionId, authorization, apiVersion, reportDefinition, _callback);

    }

    /**
     * Updates a report definition
     * Updates the existing specified report definition object
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @return ReportDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ReportDefinition putReportDefinition(String reportDefinitionId, String authorization, String apiVersion, ReportDefinition reportDefinition) throws ApiException {
        ApiResponse<ReportDefinition> localVarResp = putReportDefinitionWithHttpInfo(reportDefinitionId, authorization, apiVersion, reportDefinition);
        return localVarResp.getData();
    }

    /**
     * Updates a report definition
     * Updates the existing specified report definition object
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @return ApiResponse&lt;ReportDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportDefinition> putReportDefinitionWithHttpInfo(String reportDefinitionId, String authorization, String apiVersion, ReportDefinition reportDefinition) throws ApiException {
        okhttp3.Call localVarCall = putReportDefinitionValidateBeforeCall(reportDefinitionId, authorization, apiVersion, reportDefinition, null);
        Type localVarReturnType = new TypeToken<ReportDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a report definition (asynchronously)
     * Updates the existing specified report definition object
     * @param reportDefinitionId The report definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param reportDefinition The report definition object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The report definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putReportDefinitionAsync(String reportDefinitionId, String authorization, String apiVersion, ReportDefinition reportDefinition, final ApiCallback<ReportDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = putReportDefinitionValidateBeforeCall(reportDefinitionId, authorization, apiVersion, reportDefinition, _callback);
        Type localVarReturnType = new TypeToken<ReportDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putTransformDefinition
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTransformDefinitionCall(String transformDefinitionId, String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transformDefinition;

        // create path and map variables
        String localVarPath = "/Transform/{TransformDefinitionId}"
            .replace("{" + "TransformDefinitionId" + "}", localVarApiClient.escapeString(transformDefinitionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (apiVersion != null) {
            localVarHeaderParams.put("Api-Version", localVarApiClient.parameterToString(apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putTransformDefinitionValidateBeforeCall(String transformDefinitionId, String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformDefinitionId' is set
        if (transformDefinitionId == null) {
            throw new ApiException("Missing the required parameter 'transformDefinitionId' when calling putTransformDefinition(Async)");
        }

        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling putTransformDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling putTransformDefinition(Async)");
        }

        // verify the required parameter 'transformDefinition' is set
        if (transformDefinition == null) {
            throw new ApiException("Missing the required parameter 'transformDefinition' when calling putTransformDefinition(Async)");
        }

        return putTransformDefinitionCall(transformDefinitionId, authorization, apiVersion, transformDefinition, _callback);

    }

    /**
     * Updates a transform definition
     * Updates the existing specified transform definition object
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @return TransformDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TransformDefinition putTransformDefinition(String transformDefinitionId, String authorization, String apiVersion, TransformDefinition transformDefinition) throws ApiException {
        ApiResponse<TransformDefinition> localVarResp = putTransformDefinitionWithHttpInfo(transformDefinitionId, authorization, apiVersion, transformDefinition);
        return localVarResp.getData();
    }

    /**
     * Updates a transform definition
     * Updates the existing specified transform definition object
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @return ApiResponse&lt;TransformDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransformDefinition> putTransformDefinitionWithHttpInfo(String transformDefinitionId, String authorization, String apiVersion, TransformDefinition transformDefinition) throws ApiException {
        okhttp3.Call localVarCall = putTransformDefinitionValidateBeforeCall(transformDefinitionId, authorization, apiVersion, transformDefinition, null);
        Type localVarReturnType = new TypeToken<TransformDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a transform definition (asynchronously)
     * Updates the existing specified transform definition object
     * @param transformDefinitionId The transform definition unique identifier. (required)
     * @param authorization The OAuth 1 authorization header. &amp;apos;Auto&amp;apos; enables auto complete. (required)
     * @param apiVersion The version of the api to target. Omit or set as &amp;apos;default&amp;apos; to target the current api version. (required)
     * @param transformDefinition The transform definition object to be executed against the report data. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The transform definition object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putTransformDefinitionAsync(String transformDefinitionId, String authorization, String apiVersion, TransformDefinition transformDefinition, final ApiCallback<TransformDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = putTransformDefinitionValidateBeforeCall(transformDefinitionId, authorization, apiVersion, transformDefinition, _callback);
        Type localVarReturnType = new TypeToken<TransformDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
