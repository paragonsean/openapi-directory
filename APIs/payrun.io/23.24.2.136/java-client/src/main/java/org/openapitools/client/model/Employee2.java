/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.BankAccount;
import org.openapitools.client.model.EmployeePartner;
import org.openapitools.client.model.PaySchedule1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Employee2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Employee2 {
  /**
   * The employees&#39; a e assessment override
   */
  @JsonAdapter(AeAssessmentOverrideEnum.Adapter.class)
  public enum AeAssessmentOverrideEnum {
    NONE("None"),
    
    OPT_OUT("OptOut"),
    
    OPT_IN("OptIn"),
    
    VOLUNTARY_JOINER("VoluntaryJoiner"),
    
    CONTRACTUAL_PENSION("ContractualPension"),
    
    CEASED_MEMBERSHIP("CeasedMembership"),
    
    LEAVER("Leaver"),
    
    EXCLUDED("Excluded");

    private String value;

    AeAssessmentOverrideEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AeAssessmentOverrideEnum fromValue(String value) {
      for (AeAssessmentOverrideEnum b : AeAssessmentOverrideEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AeAssessmentOverrideEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AeAssessmentOverrideEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AeAssessmentOverrideEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AeAssessmentOverrideEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AeAssessmentOverrideEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AE_ASSESSMENT_OVERRIDE = "AEAssessmentOverride";
  @SerializedName(SERIALIZED_NAME_AE_ASSESSMENT_OVERRIDE)
  private AeAssessmentOverrideEnum aeAssessmentOverride;

  public static final String SERIALIZED_NAME_AE_ASSESSMENT_OVERRIDE_DATE = "AEAssessmentOverrideDate";
  @SerializedName(SERIALIZED_NAME_AE_ASSESSMENT_OVERRIDE_DATE)
  private LocalDate aeAssessmentOverrideDate;

  /**
   * The employees&#39; a e exclusion reason code
   */
  @JsonAdapter(AeExclusionReasonCodeEnum.Adapter.class)
  public enum AeExclusionReasonCodeEnum {
    OTHER_NOT_KNOWN("OtherNotKnown"),
    
    NOT_A_WORKER("NotAWorker"),
    
    NOT_UK_WORKER("NotUKWorker"),
    
    TEMPORARY_UK_WORKER("TemporaryUKWorker"),
    
    OUTSIDE_AGE_RANGE("OutsideAgeRange"),
    
    SINGLE_EMPLOYEE_DIRECTOR("SingleEmployeeDirector"),
    
    CEASED_MEMBERSHIP_WITHIN12_MONTHS("CeasedMembershipWithin12Months"),
    
    CEASED_MEMBERSHIP_BEYOND12_MONTHS("CeasedMembershipBeyond12Months"),
    
    WORKER_WULS_WITHIN12_MONTH("WorkerWULSWithin12Month"),
    
    WORKER_WULS_BEYOND12_MONTH("WorkerWULSBeyond12Month"),
    
    WORKER_IN_NOTICE_PERIOD("WorkerInNoticePeriod"),
    
    WORKER_TAX_PROTECTION("WorkerTaxProtection");

    private String value;

    AeExclusionReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AeExclusionReasonCodeEnum fromValue(String value) {
      for (AeExclusionReasonCodeEnum b : AeExclusionReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AeExclusionReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AeExclusionReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AeExclusionReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AeExclusionReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AeExclusionReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AE_EXCLUSION_REASON_CODE = "AEExclusionReasonCode";
  @SerializedName(SERIALIZED_NAME_AE_EXCLUSION_REASON_CODE)
  private AeExclusionReasonCodeEnum aeExclusionReasonCode;

  public static final String SERIALIZED_NAME_AE_POSTPONEMENT_DATE = "AEPostponementDate";
  @SerializedName(SERIALIZED_NAME_AE_POSTPONEMENT_DATE)
  private LocalDate aePostponementDate;

  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "BankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private BankAccount bankAccount;

  public static final String SERIALIZED_NAME_CODE = "Code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "DateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DEACTIVATED = "Deactivated";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED)
  private Boolean deactivated;

  public static final String SERIALIZED_NAME_DIRECTORSHIP_APPOINTMENT_DATE = "DirectorshipAppointmentDate";
  @SerializedName(SERIALIZED_NAME_DIRECTORSHIP_APPOINTMENT_DATE)
  private LocalDate directorshipAppointmentDate;

  public static final String SERIALIZED_NAME_EE_A_CITIZEN = "EEACitizen";
  @SerializedName(SERIALIZED_NAME_EE_A_CITIZEN)
  private Boolean eeACitizen;

  public static final String SERIALIZED_NAME_E_P_M6 = "EPM6";
  @SerializedName(SERIALIZED_NAME_E_P_M6)
  private Boolean EPM6;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "EffectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private LocalDate effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_PARTNER = "EmployeePartner";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_PARTNER)
  private EmployeePartner employeePartner;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  /**
   * The employees&#39; gender
   */
  @JsonAdapter(GenderEnum.Adapter.class)
  public enum GenderEnum {
    UNKNOWN("Unknown"),
    
    MALE("Male"),
    
    FEMALE("Female");

    private String value;

    GenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GenderEnum fromValue(String value) {
      for (GenderEnum b : GenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GENDER = "Gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private GenderEnum gender;

  public static final String SERIALIZED_NAME_HOURS_PER_WEEK = "HoursPerWeek";
  @SerializedName(SERIALIZED_NAME_HOURS_PER_WEEK)
  private Double hoursPerWeek;

  public static final String SERIALIZED_NAME_INITIALS = "Initials";
  @SerializedName(SERIALIZED_NAME_INITIALS)
  private String initials;

  public static final String SERIALIZED_NAME_IRREGULAR_EMPLOYMENT = "IrregularEmployment";
  @SerializedName(SERIALIZED_NAME_IRREGULAR_EMPLOYMENT)
  private Boolean irregularEmployment;

  public static final String SERIALIZED_NAME_IS_AGENCY_WORKER = "IsAgencyWorker";
  @SerializedName(SERIALIZED_NAME_IS_AGENCY_WORKER)
  private Boolean isAgencyWorker;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  /**
   * The employees&#39; leaver reason
   */
  @JsonAdapter(LeaverReasonEnum.Adapter.class)
  public enum LeaverReasonEnum {
    RESIGNED("Resigned"),
    
    DISMISSED("Dismissed"),
    
    REDUNDANT("Redundant"),
    
    RETIRED("Retired"),
    
    DECEASED("Deceased"),
    
    LEGAL_CUSTODY("LegalCustody"),
    
    OTHER("Other");

    private String value;

    LeaverReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LeaverReasonEnum fromValue(String value) {
      for (LeaverReasonEnum b : LeaverReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LeaverReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LeaverReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LeaverReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LeaverReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LeaverReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEAVER_REASON = "LeaverReason";
  @SerializedName(SERIALIZED_NAME_LEAVER_REASON)
  private LeaverReasonEnum leaverReason;

  public static final String SERIALIZED_NAME_LEAVING_DATE = "LeavingDate";
  @SerializedName(SERIALIZED_NAME_LEAVING_DATE)
  private LocalDate leavingDate;

  /**
   * The employees&#39; marital status
   */
  @JsonAdapter(MaritalStatusEnum.Adapter.class)
  public enum MaritalStatusEnum {
    NOT_SET("NotSet"),
    
    SINGLE("Single"),
    
    MARRIED("Married"),
    
    DIVORCED("Divorced"),
    
    WIDOWED("Widowed");

    private String value;

    MaritalStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaritalStatusEnum fromValue(String value) {
      for (MaritalStatusEnum b : MaritalStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaritalStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaritalStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaritalStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaritalStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaritalStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MARITAL_STATUS = "MaritalStatus";
  @SerializedName(SERIALIZED_NAME_MARITAL_STATUS)
  private MaritalStatusEnum maritalStatus;

  public static final String SERIALIZED_NAME_META_DATA = "MetaData";
  @SerializedName(SERIALIZED_NAME_META_DATA)
  private Object metaData;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "MiddleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NEXT_REVISION_DATE = "NextRevisionDate";
  @SerializedName(SERIALIZED_NAME_NEXT_REVISION_DATE)
  private LocalDate nextRevisionDate;

  public static final String SERIALIZED_NAME_NI_NUMBER = "NiNumber";
  @SerializedName(SERIALIZED_NAME_NI_NUMBER)
  private String niNumber;

  /**
   * The employees&#39; nic liability
   */
  @JsonAdapter(NicLiabilityEnum.Adapter.class)
  public enum NicLiabilityEnum {
    HAS_OTHER_JOB("HasOtherJob"),
    
    IS_FEMALE_ENTITLED_TO_REDUCED_RATE("IsFemaleEntitledToReducedRate"),
    
    IS_NOT_LIABLE("IsNotLiable"),
    
    IS_CONTRACTED_OUT("IsContractedOut"),
    
    IS_FULLY_LIABLE("IsFullyLiable"),
    
    IS_APPRENTICE("IsApprentice"),
    
    LEAVER_BEYOND6_WEEKS("LeaverBeyond6Weeks"),
    
    PAYMENT_AFTER_LEAVING_IRREGULAR("PaymentAfterLeavingIrregular"),
    
    IS_FREE_PORT_WORKER("IsFreePortWorker"),
    
    IS_NOT_LIABLE_FOR_EMPLOYER_NI("IsNotLiableForEmployerNi");

    private String value;

    NicLiabilityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NicLiabilityEnum fromValue(String value) {
      for (NicLiabilityEnum b : NicLiabilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NicLiabilityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NicLiabilityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NicLiabilityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NicLiabilityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NicLiabilityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NIC_LIABILITY = "NicLiability";
  @SerializedName(SERIALIZED_NAME_NIC_LIABILITY)
  private NicLiabilityEnum nicLiability;

  public static final String SERIALIZED_NAME_OFF_PAYROLL_WORKER = "OffPayrollWorker";
  @SerializedName(SERIALIZED_NAME_OFF_PAYROLL_WORKER)
  private Boolean offPayrollWorker;

  public static final String SERIALIZED_NAME_ON_STRIKE = "OnStrike";
  @SerializedName(SERIALIZED_NAME_ON_STRIKE)
  private Boolean onStrike;

  public static final String SERIALIZED_NAME_P45_ISSUED_DATE = "P45IssuedDate";
  @SerializedName(SERIALIZED_NAME_P45_ISSUED_DATE)
  private LocalDate p45IssuedDate;

  public static final String SERIALIZED_NAME_PASSPORT_NUMBER = "PassportNumber";
  @SerializedName(SERIALIZED_NAME_PASSPORT_NUMBER)
  private String passportNumber;

  public static final String SERIALIZED_NAME_PAY_SCHEDULE = "PaySchedule";
  @SerializedName(SERIALIZED_NAME_PAY_SCHEDULE)
  private PaySchedule1 paySchedule;

  /**
   * The employees&#39; payment method
   */
  @JsonAdapter(PaymentMethodEnum.Adapter.class)
  public enum PaymentMethodEnum {
    NOT_SET("NotSet"),
    
    CASH("Cash"),
    
    CHEQUE("Cheque"),
    
    BACS("BACS"),
    
    FASTER_PAYMENTS("FasterPayments"),
    
    OTHER("Other");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_METHOD = "PaymentMethod";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
  private PaymentMethodEnum paymentMethod;

  public static final String SERIALIZED_NAME_PAYMENT_TO_A_NON_INDIVIDUAL = "PaymentToANonIndividual";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TO_A_NON_INDIVIDUAL)
  private Boolean paymentToANonIndividual;

  /**
   * The employees&#39; region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    NOT_SET("NotSet"),
    
    ENGLAND("England"),
    
    SCOTLAND("Scotland"),
    
    WALES("Wales");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public static final String SERIALIZED_NAME_REVISION = "Revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private Integer revision;

  /**
   * The employees&#39; rule exclusions
   */
  @JsonAdapter(RuleExclusionsEnum.Adapter.class)
  public enum RuleExclusionsEnum {
    NONE("None"),
    
    NI_MISSING_PAY_INSTRUCTION_RULE("NiMissingPayInstructionRule"),
    
    TAX_MISSING_PAY_INSTRUCTION_RULE("TaxMissingPayInstructionRule"),
    
    TAX_CODE_UPLIFT_RULE("TaxCodeUpliftRule"),
    
    NI_SET_EXPECTED_LETTER_RULE("NiSetExpectedLetterRule"),
    
    NI_DATE_OF_BIRTH_CHANGE_RETROSPECTIVE_C_RULE("NiDateOfBirthChangeRetrospectiveCRule"),
    
    NI_DEFERMENT_STATUS_CHANGE_RULE("NiDefermentStatusChangeRule"),
    
    NI_END_CONTRACTED_OUT_TRANSFER_RULE("NiEndContractedOutTransferRule"),
    
    PAYMENT_AFTER_LEAVING_TAX_CODE_RULE("PaymentAfterLeavingTaxCodeRule"),
    
    LEAVER_END_INSTRUCTIONS_RULE("LeaverEndInstructionsRule"),
    
    P45_STUDENT_LOAN_INSTRUCTION_RULE("P45StudentLoanInstructionRule"),
    
    P45_TAX_INSTRUCTION_RULE("P45TaxInstructionRule"),
    
    P45_YTD_TAX_RULE("P45YtdTaxRule"),
    
    YTD_INSTRUCTION_RULE("YtdInstructionRule"),
    
    TAX_CODE_REGION_CHANGE_RULE("TaxCodeRegionChangeRule"),
    
    AUTO_ENROLMENT_STATUS_CHANGE_RULE("AutoEnrolmentStatusChangeRule"),
    
    EMPLOYEE_DECEASED_RULE("EmployeeDeceasedRule"),
    
    BENEFIT_INSTRUCTION_AUTO_END_RULE("BenefitInstructionAutoEndRule");

    private String value;

    RuleExclusionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RuleExclusionsEnum fromValue(String value) {
      for (RuleExclusionsEnum b : RuleExclusionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RuleExclusionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RuleExclusionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RuleExclusionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RuleExclusionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RuleExclusionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RULE_EXCLUSIONS = "RuleExclusions";
  @SerializedName(SERIALIZED_NAME_RULE_EXCLUSIONS)
  private RuleExclusionsEnum ruleExclusions;

  /**
   * The employees&#39; seconded
   */
  @JsonAdapter(SecondedEnum.Adapter.class)
  public enum SecondedEnum {
    NOT_SET("NotSet"),
    
    STAY183_DAYS_OR_MORE("Stay183DaysOrMore"),
    
    STAY_LESS_THAN183_DAYS("StayLessThan183Days"),
    
    IN_OUT_UK("InOutUk");

    private String value;

    SecondedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecondedEnum fromValue(String value) {
      for (SecondedEnum b : SecondedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecondedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecondedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecondedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecondedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SecondedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SECONDED = "Seconded";
  @SerializedName(SERIALIZED_NAME_SECONDED)
  private SecondedEnum seconded;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  /**
   * The employees&#39; starter declaration
   */
  @JsonAdapter(StarterDeclarationEnum.Adapter.class)
  public enum StarterDeclarationEnum {
    PREVIOUSLY_REPORTED("PreviouslyReported"),
    
    A("A"),
    
    B("B"),
    
    C("C");

    private String value;

    StarterDeclarationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StarterDeclarationEnum fromValue(String value) {
      for (StarterDeclarationEnum b : StarterDeclarationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StarterDeclarationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StarterDeclarationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StarterDeclarationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StarterDeclarationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StarterDeclarationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STARTER_DECLARATION = "StarterDeclaration";
  @SerializedName(SERIALIZED_NAME_STARTER_DECLARATION)
  private StarterDeclarationEnum starterDeclaration;

  /**
   * The employees&#39; territory
   */
  @JsonAdapter(TerritoryEnum.Adapter.class)
  public enum TerritoryEnum {
    UNITED_KINGDOM("UnitedKingdom");

    private String value;

    TerritoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TerritoryEnum fromValue(String value) {
      for (TerritoryEnum b : TerritoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TerritoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TerritoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TerritoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TerritoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TerritoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TERRITORY = "Territory";
  @SerializedName(SERIALIZED_NAME_TERRITORY)
  private TerritoryEnum territory;

  public static final String SERIALIZED_NAME_TITLE = "Title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VETERAN_PERIOD_START_DATE = "VeteranPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_VETERAN_PERIOD_START_DATE)
  private LocalDate veteranPeriodStartDate;

  /**
   * The employees&#39; working week
   */
  @JsonAdapter(WorkingWeekEnum.Adapter.class)
  public enum WorkingWeekEnum {
    NONE("None"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    ALL_WEEK_DAYS("AllWeekDays"),
    
    SATURDAY("Saturday"),
    
    SUNDAY("Sunday"),
    
    ALL_DAYS("AllDays");

    private String value;

    WorkingWeekEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkingWeekEnum fromValue(String value) {
      for (WorkingWeekEnum b : WorkingWeekEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkingWeekEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkingWeekEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkingWeekEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkingWeekEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkingWeekEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKING_WEEK = "WorkingWeek";
  @SerializedName(SERIALIZED_NAME_WORKING_WEEK)
  private WorkingWeekEnum workingWeek;

  public Employee2() {
  }

  public Employee2 aeAssessmentOverride(AeAssessmentOverrideEnum aeAssessmentOverride) {
    this.aeAssessmentOverride = aeAssessmentOverride;
    return this;
  }

  /**
   * The employees&#39; a e assessment override
   * @return aeAssessmentOverride
   */
  @javax.annotation.Nullable
  public AeAssessmentOverrideEnum getAeAssessmentOverride() {
    return aeAssessmentOverride;
  }

  public void setAeAssessmentOverride(AeAssessmentOverrideEnum aeAssessmentOverride) {
    this.aeAssessmentOverride = aeAssessmentOverride;
  }


  public Employee2 aeAssessmentOverrideDate(LocalDate aeAssessmentOverrideDate) {
    this.aeAssessmentOverrideDate = aeAssessmentOverrideDate;
    return this;
  }

  /**
   * The employees&#39; a e assessment override date
   * @return aeAssessmentOverrideDate
   */
  @javax.annotation.Nullable
  public LocalDate getAeAssessmentOverrideDate() {
    return aeAssessmentOverrideDate;
  }

  public void setAeAssessmentOverrideDate(LocalDate aeAssessmentOverrideDate) {
    this.aeAssessmentOverrideDate = aeAssessmentOverrideDate;
  }


  public Employee2 aeExclusionReasonCode(AeExclusionReasonCodeEnum aeExclusionReasonCode) {
    this.aeExclusionReasonCode = aeExclusionReasonCode;
    return this;
  }

  /**
   * The employees&#39; a e exclusion reason code
   * @return aeExclusionReasonCode
   */
  @javax.annotation.Nullable
  public AeExclusionReasonCodeEnum getAeExclusionReasonCode() {
    return aeExclusionReasonCode;
  }

  public void setAeExclusionReasonCode(AeExclusionReasonCodeEnum aeExclusionReasonCode) {
    this.aeExclusionReasonCode = aeExclusionReasonCode;
  }


  public Employee2 aePostponementDate(LocalDate aePostponementDate) {
    this.aePostponementDate = aePostponementDate;
    return this;
  }

  /**
   * The employees&#39; a e postponement date
   * @return aePostponementDate
   */
  @javax.annotation.Nullable
  public LocalDate getAePostponementDate() {
    return aePostponementDate;
  }

  public void setAePostponementDate(LocalDate aePostponementDate) {
    this.aePostponementDate = aePostponementDate;
  }


  public Employee2 address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Employee2 bankAccount(BankAccount bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

  /**
   * Get bankAccount
   * @return bankAccount
   */
  @javax.annotation.Nullable
  public BankAccount getBankAccount() {
    return bankAccount;
  }

  public void setBankAccount(BankAccount bankAccount) {
    this.bankAccount = bankAccount;
  }


  public Employee2 code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The employees&#39; code
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public Employee2 dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The employees&#39; date of birth
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public Employee2 deactivated(Boolean deactivated) {
    this.deactivated = deactivated;
    return this;
  }

  /**
   * The employees&#39; deactivated
   * @return deactivated
   */
  @javax.annotation.Nullable
  public Boolean getDeactivated() {
    return deactivated;
  }

  public void setDeactivated(Boolean deactivated) {
    this.deactivated = deactivated;
  }


  public Employee2 directorshipAppointmentDate(LocalDate directorshipAppointmentDate) {
    this.directorshipAppointmentDate = directorshipAppointmentDate;
    return this;
  }

  /**
   * The employees&#39; directorship appointment date
   * @return directorshipAppointmentDate
   */
  @javax.annotation.Nullable
  public LocalDate getDirectorshipAppointmentDate() {
    return directorshipAppointmentDate;
  }

  public void setDirectorshipAppointmentDate(LocalDate directorshipAppointmentDate) {
    this.directorshipAppointmentDate = directorshipAppointmentDate;
  }


  public Employee2 eeACitizen(Boolean eeACitizen) {
    this.eeACitizen = eeACitizen;
    return this;
  }

  /**
   * The employees&#39; e e a citizen
   * @return eeACitizen
   */
  @javax.annotation.Nullable
  public Boolean getEeACitizen() {
    return eeACitizen;
  }

  public void setEeACitizen(Boolean eeACitizen) {
    this.eeACitizen = eeACitizen;
  }


  public Employee2 EPM6(Boolean EPM6) {
    this.EPM6 = EPM6;
    return this;
  }

  /**
   * The employees&#39; e p m6
   * @return EPM6
   */
  @javax.annotation.Nullable
  public Boolean getEPM6() {
    return EPM6;
  }

  public void setEPM6(Boolean EPM6) {
    this.EPM6 = EPM6;
  }


  public Employee2 effectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
    return this;
  }

  /**
   * The employees&#39; effective date
   * @return effectiveDate
   */
  @javax.annotation.Nullable
  public LocalDate getEffectiveDate() {
    return effectiveDate;
  }

  public void setEffectiveDate(LocalDate effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public Employee2 employeePartner(EmployeePartner employeePartner) {
    this.employeePartner = employeePartner;
    return this;
  }

  /**
   * Get employeePartner
   * @return employeePartner
   */
  @javax.annotation.Nullable
  public EmployeePartner getEmployeePartner() {
    return employeePartner;
  }

  public void setEmployeePartner(EmployeePartner employeePartner) {
    this.employeePartner = employeePartner;
  }


  public Employee2 firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The employees&#39; the first name
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Employee2 gender(GenderEnum gender) {
    this.gender = gender;
    return this;
  }

  /**
   * The employees&#39; gender
   * @return gender
   */
  @javax.annotation.Nullable
  public GenderEnum getGender() {
    return gender;
  }

  public void setGender(GenderEnum gender) {
    this.gender = gender;
  }


  public Employee2 hoursPerWeek(Double hoursPerWeek) {
    this.hoursPerWeek = hoursPerWeek;
    return this;
  }

  /**
   * The employees&#39; hours per week
   * @return hoursPerWeek
   */
  @javax.annotation.Nullable
  public Double getHoursPerWeek() {
    return hoursPerWeek;
  }

  public void setHoursPerWeek(Double hoursPerWeek) {
    this.hoursPerWeek = hoursPerWeek;
  }


  public Employee2 initials(String initials) {
    this.initials = initials;
    return this;
  }

  /**
   * The employees&#39; initials
   * @return initials
   */
  @javax.annotation.Nullable
  public String getInitials() {
    return initials;
  }

  public void setInitials(String initials) {
    this.initials = initials;
  }


  public Employee2 irregularEmployment(Boolean irregularEmployment) {
    this.irregularEmployment = irregularEmployment;
    return this;
  }

  /**
   * The employees&#39; irregular employment
   * @return irregularEmployment
   */
  @javax.annotation.Nullable
  public Boolean getIrregularEmployment() {
    return irregularEmployment;
  }

  public void setIrregularEmployment(Boolean irregularEmployment) {
    this.irregularEmployment = irregularEmployment;
  }


  public Employee2 isAgencyWorker(Boolean isAgencyWorker) {
    this.isAgencyWorker = isAgencyWorker;
    return this;
  }

  /**
   * The employees&#39; is agency worker
   * @return isAgencyWorker
   */
  @javax.annotation.Nullable
  public Boolean getIsAgencyWorker() {
    return isAgencyWorker;
  }

  public void setIsAgencyWorker(Boolean isAgencyWorker) {
    this.isAgencyWorker = isAgencyWorker;
  }


  public Employee2 lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The employees&#39; last name
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Employee2 leaverReason(LeaverReasonEnum leaverReason) {
    this.leaverReason = leaverReason;
    return this;
  }

  /**
   * The employees&#39; leaver reason
   * @return leaverReason
   */
  @javax.annotation.Nullable
  public LeaverReasonEnum getLeaverReason() {
    return leaverReason;
  }

  public void setLeaverReason(LeaverReasonEnum leaverReason) {
    this.leaverReason = leaverReason;
  }


  public Employee2 leavingDate(LocalDate leavingDate) {
    this.leavingDate = leavingDate;
    return this;
  }

  /**
   * The employees&#39; leaving date
   * @return leavingDate
   */
  @javax.annotation.Nullable
  public LocalDate getLeavingDate() {
    return leavingDate;
  }

  public void setLeavingDate(LocalDate leavingDate) {
    this.leavingDate = leavingDate;
  }


  public Employee2 maritalStatus(MaritalStatusEnum maritalStatus) {
    this.maritalStatus = maritalStatus;
    return this;
  }

  /**
   * The employees&#39; marital status
   * @return maritalStatus
   */
  @javax.annotation.Nullable
  public MaritalStatusEnum getMaritalStatus() {
    return maritalStatus;
  }

  public void setMaritalStatus(MaritalStatusEnum maritalStatus) {
    this.maritalStatus = maritalStatus;
  }


  public Employee2 metaData(Object metaData) {
    this.metaData = metaData;
    return this;
  }

  /**
   * The employees&#39; meta data
   * @return metaData
   */
  @javax.annotation.Nullable
  public Object getMetaData() {
    return metaData;
  }

  public void setMetaData(Object metaData) {
    this.metaData = metaData;
  }


  public Employee2 middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

  /**
   * The employees&#39; middle name
   * @return middleName
   */
  @javax.annotation.Nullable
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }


  public Employee2 nextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
    return this;
  }

  /**
   * The employees&#39; next revision date
   * @return nextRevisionDate
   */
  @javax.annotation.Nullable
  public LocalDate getNextRevisionDate() {
    return nextRevisionDate;
  }

  public void setNextRevisionDate(LocalDate nextRevisionDate) {
    this.nextRevisionDate = nextRevisionDate;
  }


  public Employee2 niNumber(String niNumber) {
    this.niNumber = niNumber;
    return this;
  }

  /**
   * The employees&#39; ni number
   * @return niNumber
   */
  @javax.annotation.Nullable
  public String getNiNumber() {
    return niNumber;
  }

  public void setNiNumber(String niNumber) {
    this.niNumber = niNumber;
  }


  public Employee2 nicLiability(NicLiabilityEnum nicLiability) {
    this.nicLiability = nicLiability;
    return this;
  }

  /**
   * The employees&#39; nic liability
   * @return nicLiability
   */
  @javax.annotation.Nullable
  public NicLiabilityEnum getNicLiability() {
    return nicLiability;
  }

  public void setNicLiability(NicLiabilityEnum nicLiability) {
    this.nicLiability = nicLiability;
  }


  public Employee2 offPayrollWorker(Boolean offPayrollWorker) {
    this.offPayrollWorker = offPayrollWorker;
    return this;
  }

  /**
   * The employees&#39; off payroll worker
   * @return offPayrollWorker
   */
  @javax.annotation.Nullable
  public Boolean getOffPayrollWorker() {
    return offPayrollWorker;
  }

  public void setOffPayrollWorker(Boolean offPayrollWorker) {
    this.offPayrollWorker = offPayrollWorker;
  }


  public Employee2 onStrike(Boolean onStrike) {
    this.onStrike = onStrike;
    return this;
  }

  /**
   * The employees&#39; on strike
   * @return onStrike
   */
  @javax.annotation.Nullable
  public Boolean getOnStrike() {
    return onStrike;
  }

  public void setOnStrike(Boolean onStrike) {
    this.onStrike = onStrike;
  }


  public Employee2 p45IssuedDate(LocalDate p45IssuedDate) {
    this.p45IssuedDate = p45IssuedDate;
    return this;
  }

  /**
   * The employees&#39; p45 issued date
   * @return p45IssuedDate
   */
  @javax.annotation.Nullable
  public LocalDate getP45IssuedDate() {
    return p45IssuedDate;
  }

  public void setP45IssuedDate(LocalDate p45IssuedDate) {
    this.p45IssuedDate = p45IssuedDate;
  }


  public Employee2 passportNumber(String passportNumber) {
    this.passportNumber = passportNumber;
    return this;
  }

  /**
   * The employees&#39; passport number
   * @return passportNumber
   */
  @javax.annotation.Nullable
  public String getPassportNumber() {
    return passportNumber;
  }

  public void setPassportNumber(String passportNumber) {
    this.passportNumber = passportNumber;
  }


  public Employee2 paySchedule(PaySchedule1 paySchedule) {
    this.paySchedule = paySchedule;
    return this;
  }

  /**
   * Get paySchedule
   * @return paySchedule
   */
  @javax.annotation.Nullable
  public PaySchedule1 getPaySchedule() {
    return paySchedule;
  }

  public void setPaySchedule(PaySchedule1 paySchedule) {
    this.paySchedule = paySchedule;
  }


  public Employee2 paymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
    return this;
  }

  /**
   * The employees&#39; payment method
   * @return paymentMethod
   */
  @javax.annotation.Nullable
  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }

  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Employee2 paymentToANonIndividual(Boolean paymentToANonIndividual) {
    this.paymentToANonIndividual = paymentToANonIndividual;
    return this;
  }

  /**
   * The employees&#39; payment to a non individual
   * @return paymentToANonIndividual
   */
  @javax.annotation.Nullable
  public Boolean getPaymentToANonIndividual() {
    return paymentToANonIndividual;
  }

  public void setPaymentToANonIndividual(Boolean paymentToANonIndividual) {
    this.paymentToANonIndividual = paymentToANonIndividual;
  }


  public Employee2 region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The employees&#39; region
   * @return region
   */
  @javax.annotation.Nullable
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }


  public Employee2 revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The employees&#39; revision
   * @return revision
   */
  @javax.annotation.Nullable
  public Integer getRevision() {
    return revision;
  }

  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  public Employee2 ruleExclusions(RuleExclusionsEnum ruleExclusions) {
    this.ruleExclusions = ruleExclusions;
    return this;
  }

  /**
   * The employees&#39; rule exclusions
   * @return ruleExclusions
   */
  @javax.annotation.Nullable
  public RuleExclusionsEnum getRuleExclusions() {
    return ruleExclusions;
  }

  public void setRuleExclusions(RuleExclusionsEnum ruleExclusions) {
    this.ruleExclusions = ruleExclusions;
  }


  public Employee2 seconded(SecondedEnum seconded) {
    this.seconded = seconded;
    return this;
  }

  /**
   * The employees&#39; seconded
   * @return seconded
   */
  @javax.annotation.Nullable
  public SecondedEnum getSeconded() {
    return seconded;
  }

  public void setSeconded(SecondedEnum seconded) {
    this.seconded = seconded;
  }


  public Employee2 startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * The employees&#39; start date
   * @return startDate
   */
  @javax.annotation.Nullable
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public Employee2 starterDeclaration(StarterDeclarationEnum starterDeclaration) {
    this.starterDeclaration = starterDeclaration;
    return this;
  }

  /**
   * The employees&#39; starter declaration
   * @return starterDeclaration
   */
  @javax.annotation.Nullable
  public StarterDeclarationEnum getStarterDeclaration() {
    return starterDeclaration;
  }

  public void setStarterDeclaration(StarterDeclarationEnum starterDeclaration) {
    this.starterDeclaration = starterDeclaration;
  }


  public Employee2 territory(TerritoryEnum territory) {
    this.territory = territory;
    return this;
  }

  /**
   * The employees&#39; territory
   * @return territory
   */
  @javax.annotation.Nullable
  public TerritoryEnum getTerritory() {
    return territory;
  }

  public void setTerritory(TerritoryEnum territory) {
    this.territory = territory;
  }


  public Employee2 title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The employees&#39; title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Employee2 veteranPeriodStartDate(LocalDate veteranPeriodStartDate) {
    this.veteranPeriodStartDate = veteranPeriodStartDate;
    return this;
  }

  /**
   * The employees&#39; veteran period start date
   * @return veteranPeriodStartDate
   */
  @javax.annotation.Nullable
  public LocalDate getVeteranPeriodStartDate() {
    return veteranPeriodStartDate;
  }

  public void setVeteranPeriodStartDate(LocalDate veteranPeriodStartDate) {
    this.veteranPeriodStartDate = veteranPeriodStartDate;
  }


  public Employee2 workingWeek(WorkingWeekEnum workingWeek) {
    this.workingWeek = workingWeek;
    return this;
  }

  /**
   * The employees&#39; working week
   * @return workingWeek
   */
  @javax.annotation.Nullable
  public WorkingWeekEnum getWorkingWeek() {
    return workingWeek;
  }

  public void setWorkingWeek(WorkingWeekEnum workingWeek) {
    this.workingWeek = workingWeek;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Employee2 employee2 = (Employee2) o;
    return Objects.equals(this.aeAssessmentOverride, employee2.aeAssessmentOverride) &&
        Objects.equals(this.aeAssessmentOverrideDate, employee2.aeAssessmentOverrideDate) &&
        Objects.equals(this.aeExclusionReasonCode, employee2.aeExclusionReasonCode) &&
        Objects.equals(this.aePostponementDate, employee2.aePostponementDate) &&
        Objects.equals(this.address, employee2.address) &&
        Objects.equals(this.bankAccount, employee2.bankAccount) &&
        Objects.equals(this.code, employee2.code) &&
        Objects.equals(this.dateOfBirth, employee2.dateOfBirth) &&
        Objects.equals(this.deactivated, employee2.deactivated) &&
        Objects.equals(this.directorshipAppointmentDate, employee2.directorshipAppointmentDate) &&
        Objects.equals(this.eeACitizen, employee2.eeACitizen) &&
        Objects.equals(this.EPM6, employee2.EPM6) &&
        Objects.equals(this.effectiveDate, employee2.effectiveDate) &&
        Objects.equals(this.employeePartner, employee2.employeePartner) &&
        Objects.equals(this.firstName, employee2.firstName) &&
        Objects.equals(this.gender, employee2.gender) &&
        Objects.equals(this.hoursPerWeek, employee2.hoursPerWeek) &&
        Objects.equals(this.initials, employee2.initials) &&
        Objects.equals(this.irregularEmployment, employee2.irregularEmployment) &&
        Objects.equals(this.isAgencyWorker, employee2.isAgencyWorker) &&
        Objects.equals(this.lastName, employee2.lastName) &&
        Objects.equals(this.leaverReason, employee2.leaverReason) &&
        Objects.equals(this.leavingDate, employee2.leavingDate) &&
        Objects.equals(this.maritalStatus, employee2.maritalStatus) &&
        Objects.equals(this.metaData, employee2.metaData) &&
        Objects.equals(this.middleName, employee2.middleName) &&
        Objects.equals(this.nextRevisionDate, employee2.nextRevisionDate) &&
        Objects.equals(this.niNumber, employee2.niNumber) &&
        Objects.equals(this.nicLiability, employee2.nicLiability) &&
        Objects.equals(this.offPayrollWorker, employee2.offPayrollWorker) &&
        Objects.equals(this.onStrike, employee2.onStrike) &&
        Objects.equals(this.p45IssuedDate, employee2.p45IssuedDate) &&
        Objects.equals(this.passportNumber, employee2.passportNumber) &&
        Objects.equals(this.paySchedule, employee2.paySchedule) &&
        Objects.equals(this.paymentMethod, employee2.paymentMethod) &&
        Objects.equals(this.paymentToANonIndividual, employee2.paymentToANonIndividual) &&
        Objects.equals(this.region, employee2.region) &&
        Objects.equals(this.revision, employee2.revision) &&
        Objects.equals(this.ruleExclusions, employee2.ruleExclusions) &&
        Objects.equals(this.seconded, employee2.seconded) &&
        Objects.equals(this.startDate, employee2.startDate) &&
        Objects.equals(this.starterDeclaration, employee2.starterDeclaration) &&
        Objects.equals(this.territory, employee2.territory) &&
        Objects.equals(this.title, employee2.title) &&
        Objects.equals(this.veteranPeriodStartDate, employee2.veteranPeriodStartDate) &&
        Objects.equals(this.workingWeek, employee2.workingWeek);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aeAssessmentOverride, aeAssessmentOverrideDate, aeExclusionReasonCode, aePostponementDate, address, bankAccount, code, dateOfBirth, deactivated, directorshipAppointmentDate, eeACitizen, EPM6, effectiveDate, employeePartner, firstName, gender, hoursPerWeek, initials, irregularEmployment, isAgencyWorker, lastName, leaverReason, leavingDate, maritalStatus, metaData, middleName, nextRevisionDate, niNumber, nicLiability, offPayrollWorker, onStrike, p45IssuedDate, passportNumber, paySchedule, paymentMethod, paymentToANonIndividual, region, revision, ruleExclusions, seconded, startDate, starterDeclaration, territory, title, veteranPeriodStartDate, workingWeek);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Employee2 {\n");
    sb.append("    aeAssessmentOverride: ").append(toIndentedString(aeAssessmentOverride)).append("\n");
    sb.append("    aeAssessmentOverrideDate: ").append(toIndentedString(aeAssessmentOverrideDate)).append("\n");
    sb.append("    aeExclusionReasonCode: ").append(toIndentedString(aeExclusionReasonCode)).append("\n");
    sb.append("    aePostponementDate: ").append(toIndentedString(aePostponementDate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    deactivated: ").append(toIndentedString(deactivated)).append("\n");
    sb.append("    directorshipAppointmentDate: ").append(toIndentedString(directorshipAppointmentDate)).append("\n");
    sb.append("    eeACitizen: ").append(toIndentedString(eeACitizen)).append("\n");
    sb.append("    EPM6: ").append(toIndentedString(EPM6)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employeePartner: ").append(toIndentedString(employeePartner)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hoursPerWeek: ").append(toIndentedString(hoursPerWeek)).append("\n");
    sb.append("    initials: ").append(toIndentedString(initials)).append("\n");
    sb.append("    irregularEmployment: ").append(toIndentedString(irregularEmployment)).append("\n");
    sb.append("    isAgencyWorker: ").append(toIndentedString(isAgencyWorker)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    leaverReason: ").append(toIndentedString(leaverReason)).append("\n");
    sb.append("    leavingDate: ").append(toIndentedString(leavingDate)).append("\n");
    sb.append("    maritalStatus: ").append(toIndentedString(maritalStatus)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    nextRevisionDate: ").append(toIndentedString(nextRevisionDate)).append("\n");
    sb.append("    niNumber: ").append(toIndentedString(niNumber)).append("\n");
    sb.append("    nicLiability: ").append(toIndentedString(nicLiability)).append("\n");
    sb.append("    offPayrollWorker: ").append(toIndentedString(offPayrollWorker)).append("\n");
    sb.append("    onStrike: ").append(toIndentedString(onStrike)).append("\n");
    sb.append("    p45IssuedDate: ").append(toIndentedString(p45IssuedDate)).append("\n");
    sb.append("    passportNumber: ").append(toIndentedString(passportNumber)).append("\n");
    sb.append("    paySchedule: ").append(toIndentedString(paySchedule)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    paymentToANonIndividual: ").append(toIndentedString(paymentToANonIndividual)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    ruleExclusions: ").append(toIndentedString(ruleExclusions)).append("\n");
    sb.append("    seconded: ").append(toIndentedString(seconded)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    starterDeclaration: ").append(toIndentedString(starterDeclaration)).append("\n");
    sb.append("    territory: ").append(toIndentedString(territory)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    veteranPeriodStartDate: ").append(toIndentedString(veteranPeriodStartDate)).append("\n");
    sb.append("    workingWeek: ").append(toIndentedString(workingWeek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AEAssessmentOverride");
    openapiFields.add("AEAssessmentOverrideDate");
    openapiFields.add("AEExclusionReasonCode");
    openapiFields.add("AEPostponementDate");
    openapiFields.add("Address");
    openapiFields.add("BankAccount");
    openapiFields.add("Code");
    openapiFields.add("DateOfBirth");
    openapiFields.add("Deactivated");
    openapiFields.add("DirectorshipAppointmentDate");
    openapiFields.add("EEACitizen");
    openapiFields.add("EPM6");
    openapiFields.add("EffectiveDate");
    openapiFields.add("EmployeePartner");
    openapiFields.add("FirstName");
    openapiFields.add("Gender");
    openapiFields.add("HoursPerWeek");
    openapiFields.add("Initials");
    openapiFields.add("IrregularEmployment");
    openapiFields.add("IsAgencyWorker");
    openapiFields.add("LastName");
    openapiFields.add("LeaverReason");
    openapiFields.add("LeavingDate");
    openapiFields.add("MaritalStatus");
    openapiFields.add("MetaData");
    openapiFields.add("MiddleName");
    openapiFields.add("NextRevisionDate");
    openapiFields.add("NiNumber");
    openapiFields.add("NicLiability");
    openapiFields.add("OffPayrollWorker");
    openapiFields.add("OnStrike");
    openapiFields.add("P45IssuedDate");
    openapiFields.add("PassportNumber");
    openapiFields.add("PaySchedule");
    openapiFields.add("PaymentMethod");
    openapiFields.add("PaymentToANonIndividual");
    openapiFields.add("Region");
    openapiFields.add("Revision");
    openapiFields.add("RuleExclusions");
    openapiFields.add("Seconded");
    openapiFields.add("StartDate");
    openapiFields.add("StarterDeclaration");
    openapiFields.add("Territory");
    openapiFields.add("Title");
    openapiFields.add("VeteranPeriodStartDate");
    openapiFields.add("WorkingWeek");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Employee2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Employee2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Employee2 is not found in the empty JSON string", Employee2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Employee2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Employee2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AEAssessmentOverride") != null && !jsonObj.get("AEAssessmentOverride").isJsonNull()) && !jsonObj.get("AEAssessmentOverride").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AEAssessmentOverride` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AEAssessmentOverride").toString()));
      }
      // validate the optional field `AEAssessmentOverride`
      if (jsonObj.get("AEAssessmentOverride") != null && !jsonObj.get("AEAssessmentOverride").isJsonNull()) {
        AeAssessmentOverrideEnum.validateJsonElement(jsonObj.get("AEAssessmentOverride"));
      }
      if ((jsonObj.get("AEExclusionReasonCode") != null && !jsonObj.get("AEExclusionReasonCode").isJsonNull()) && !jsonObj.get("AEExclusionReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AEExclusionReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AEExclusionReasonCode").toString()));
      }
      // validate the optional field `AEExclusionReasonCode`
      if (jsonObj.get("AEExclusionReasonCode") != null && !jsonObj.get("AEExclusionReasonCode").isJsonNull()) {
        AeExclusionReasonCodeEnum.validateJsonElement(jsonObj.get("AEExclusionReasonCode"));
      }
      // validate the optional field `Address`
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("Address"));
      }
      // validate the optional field `BankAccount`
      if (jsonObj.get("BankAccount") != null && !jsonObj.get("BankAccount").isJsonNull()) {
        BankAccount.validateJsonElement(jsonObj.get("BankAccount"));
      }
      if ((jsonObj.get("Code") != null && !jsonObj.get("Code").isJsonNull()) && !jsonObj.get("Code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Code").toString()));
      }
      // validate the optional field `EmployeePartner`
      if (jsonObj.get("EmployeePartner") != null && !jsonObj.get("EmployeePartner").isJsonNull()) {
        EmployeePartner.validateJsonElement(jsonObj.get("EmployeePartner"));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) && !jsonObj.get("Gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Gender").toString()));
      }
      // validate the optional field `Gender`
      if (jsonObj.get("Gender") != null && !jsonObj.get("Gender").isJsonNull()) {
        GenderEnum.validateJsonElement(jsonObj.get("Gender"));
      }
      if ((jsonObj.get("Initials") != null && !jsonObj.get("Initials").isJsonNull()) && !jsonObj.get("Initials").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Initials` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Initials").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("LeaverReason") != null && !jsonObj.get("LeaverReason").isJsonNull()) && !jsonObj.get("LeaverReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LeaverReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LeaverReason").toString()));
      }
      // validate the optional field `LeaverReason`
      if (jsonObj.get("LeaverReason") != null && !jsonObj.get("LeaverReason").isJsonNull()) {
        LeaverReasonEnum.validateJsonElement(jsonObj.get("LeaverReason"));
      }
      if ((jsonObj.get("MaritalStatus") != null && !jsonObj.get("MaritalStatus").isJsonNull()) && !jsonObj.get("MaritalStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaritalStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaritalStatus").toString()));
      }
      // validate the optional field `MaritalStatus`
      if (jsonObj.get("MaritalStatus") != null && !jsonObj.get("MaritalStatus").isJsonNull()) {
        MaritalStatusEnum.validateJsonElement(jsonObj.get("MaritalStatus"));
      }
      if ((jsonObj.get("MiddleName") != null && !jsonObj.get("MiddleName").isJsonNull()) && !jsonObj.get("MiddleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MiddleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MiddleName").toString()));
      }
      if ((jsonObj.get("NiNumber") != null && !jsonObj.get("NiNumber").isJsonNull()) && !jsonObj.get("NiNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NiNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NiNumber").toString()));
      }
      if ((jsonObj.get("NicLiability") != null && !jsonObj.get("NicLiability").isJsonNull()) && !jsonObj.get("NicLiability").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NicLiability` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NicLiability").toString()));
      }
      // validate the optional field `NicLiability`
      if (jsonObj.get("NicLiability") != null && !jsonObj.get("NicLiability").isJsonNull()) {
        NicLiabilityEnum.validateJsonElement(jsonObj.get("NicLiability"));
      }
      if ((jsonObj.get("PassportNumber") != null && !jsonObj.get("PassportNumber").isJsonNull()) && !jsonObj.get("PassportNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PassportNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PassportNumber").toString()));
      }
      // validate the optional field `PaySchedule`
      if (jsonObj.get("PaySchedule") != null && !jsonObj.get("PaySchedule").isJsonNull()) {
        PaySchedule1.validateJsonElement(jsonObj.get("PaySchedule"));
      }
      if ((jsonObj.get("PaymentMethod") != null && !jsonObj.get("PaymentMethod").isJsonNull()) && !jsonObj.get("PaymentMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentMethod").toString()));
      }
      // validate the optional field `PaymentMethod`
      if (jsonObj.get("PaymentMethod") != null && !jsonObj.get("PaymentMethod").isJsonNull()) {
        PaymentMethodEnum.validateJsonElement(jsonObj.get("PaymentMethod"));
      }
      if ((jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) && !jsonObj.get("Region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Region").toString()));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        RegionEnum.validateJsonElement(jsonObj.get("Region"));
      }
      if ((jsonObj.get("RuleExclusions") != null && !jsonObj.get("RuleExclusions").isJsonNull()) && !jsonObj.get("RuleExclusions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RuleExclusions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RuleExclusions").toString()));
      }
      // validate the optional field `RuleExclusions`
      if (jsonObj.get("RuleExclusions") != null && !jsonObj.get("RuleExclusions").isJsonNull()) {
        RuleExclusionsEnum.validateJsonElement(jsonObj.get("RuleExclusions"));
      }
      if ((jsonObj.get("Seconded") != null && !jsonObj.get("Seconded").isJsonNull()) && !jsonObj.get("Seconded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Seconded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Seconded").toString()));
      }
      // validate the optional field `Seconded`
      if (jsonObj.get("Seconded") != null && !jsonObj.get("Seconded").isJsonNull()) {
        SecondedEnum.validateJsonElement(jsonObj.get("Seconded"));
      }
      if ((jsonObj.get("StarterDeclaration") != null && !jsonObj.get("StarterDeclaration").isJsonNull()) && !jsonObj.get("StarterDeclaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StarterDeclaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StarterDeclaration").toString()));
      }
      // validate the optional field `StarterDeclaration`
      if (jsonObj.get("StarterDeclaration") != null && !jsonObj.get("StarterDeclaration").isJsonNull()) {
        StarterDeclarationEnum.validateJsonElement(jsonObj.get("StarterDeclaration"));
      }
      if ((jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) && !jsonObj.get("Territory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Territory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Territory").toString()));
      }
      // validate the optional field `Territory`
      if (jsonObj.get("Territory") != null && !jsonObj.get("Territory").isJsonNull()) {
        TerritoryEnum.validateJsonElement(jsonObj.get("Territory"));
      }
      if ((jsonObj.get("Title") != null && !jsonObj.get("Title").isJsonNull()) && !jsonObj.get("Title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Title").toString()));
      }
      if ((jsonObj.get("WorkingWeek") != null && !jsonObj.get("WorkingWeek").isJsonNull()) && !jsonObj.get("WorkingWeek").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkingWeek` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkingWeek").toString()));
      }
      // validate the optional field `WorkingWeek`
      if (jsonObj.get("WorkingWeek") != null && !jsonObj.get("WorkingWeek").isJsonNull()) {
        WorkingWeekEnum.validateJsonElement(jsonObj.get("WorkingWeek"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Employee2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Employee2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Employee2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Employee2.class));

       return (TypeAdapter<T>) new TypeAdapter<Employee2>() {
           @Override
           public void write(JsonWriter out, Employee2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Employee2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Employee2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Employee2
   * @throws IOException if the JSON string is invalid with respect to Employee2
   */
  public static Employee2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Employee2.class);
  }

  /**
   * Convert an instance of Employee2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

