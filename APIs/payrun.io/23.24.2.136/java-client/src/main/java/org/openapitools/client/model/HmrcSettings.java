/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The employers&#39; hmrc settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HmrcSettings {
  public static final String SERIALIZED_NAME_ACCOUNTING_OFFICE_REF = "AccountingOfficeRef";
  @SerializedName(SERIALIZED_NAME_ACCOUNTING_OFFICE_REF)
  private String accountingOfficeRef;

  public static final String SERIALIZED_NAME_CO_T_A_X_REF = "COTAXRef";
  @SerializedName(SERIALIZED_NAME_CO_T_A_X_REF)
  private String coTAXRef;

  public static final String SERIALIZED_NAME_CONTACT_EMAIL = "ContactEmail";
  @SerializedName(SERIALIZED_NAME_CONTACT_EMAIL)
  private String contactEmail;

  public static final String SERIALIZED_NAME_CONTACT_FAX = "ContactFax";
  @SerializedName(SERIALIZED_NAME_CONTACT_FAX)
  private String contactFax;

  public static final String SERIALIZED_NAME_CONTACT_FIRST_NAME = "ContactFirstName";
  @SerializedName(SERIALIZED_NAME_CONTACT_FIRST_NAME)
  private String contactFirstName;

  public static final String SERIALIZED_NAME_CONTACT_LAST_NAME = "ContactLastName";
  @SerializedName(SERIALIZED_NAME_CONTACT_LAST_NAME)
  private String contactLastName;

  public static final String SERIALIZED_NAME_CONTACT_TELEPHONE = "ContactTelephone";
  @SerializedName(SERIALIZED_NAME_CONTACT_TELEPHONE)
  private String contactTelephone;

  public static final String SERIALIZED_NAME_EMPLOYMENT_ALLOWANCE_OVERRIDE = "EmploymentAllowanceOverride";
  @SerializedName(SERIALIZED_NAME_EMPLOYMENT_ALLOWANCE_OVERRIDE)
  private Double employmentAllowanceOverride;

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_S_A_U_T_R = "SAUTR";
  @SerializedName(SERIALIZED_NAME_S_A_U_T_R)
  private String SAUTR;

  /**
   * The hmrc settingss&#39; sender
   */
  @JsonAdapter(SenderEnum.Adapter.class)
  public enum SenderEnum {
    EMPLOYER("Employer"),
    
    INDIVIDUAL("Individual"),
    
    COMPANY("Company"),
    
    AGENT("Agent"),
    
    BUREAU("Bureau"),
    
    PARTNERSHIP("Partnership"),
    
    TRUST("Trust"),
    
    GOVERNMENT("Government"),
    
    ACTING_IN_CAPACITY("ActingInCapacity"),
    
    OTHER("Other");

    private String value;

    SenderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SenderEnum fromValue(String value) {
      for (SenderEnum b : SenderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SenderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SenderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SenderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SenderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SenderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SENDER = "Sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  private SenderEnum sender;

  public static final String SERIALIZED_NAME_SENDER_ID = "SenderId";
  @SerializedName(SERIALIZED_NAME_SENDER_ID)
  private String senderId;

  /**
   * The hmrc settingss&#39; state aid sector
   */
  @JsonAdapter(StateAidSectorEnum.Adapter.class)
  public enum StateAidSectorEnum {
    AGRICULTURE("Agriculture"),
    
    FISHERIES_AQUACULTURE("FisheriesAquaculture"),
    
    ROAD_TRANSPORT("RoadTransport"),
    
    INDUSTRIAL("Industrial"),
    
    NOT_APPLICABLE("NotApplicable");

    private String value;

    StateAidSectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateAidSectorEnum fromValue(String value) {
      for (StateAidSectorEnum b : StateAidSectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateAidSectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateAidSectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateAidSectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateAidSectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateAidSectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_AID_SECTOR = "StateAidSector";
  @SerializedName(SERIALIZED_NAME_STATE_AID_SECTOR)
  private StateAidSectorEnum stateAidSector;

  public static final String SERIALIZED_NAME_TAX_OFFICE_NUMBER = "TaxOfficeNumber";
  @SerializedName(SERIALIZED_NAME_TAX_OFFICE_NUMBER)
  private String taxOfficeNumber;

  public static final String SERIALIZED_NAME_TAX_OFFICE_REFERENCE = "TaxOfficeReference";
  @SerializedName(SERIALIZED_NAME_TAX_OFFICE_REFERENCE)
  private String taxOfficeReference;

  public HmrcSettings() {
  }

  public HmrcSettings accountingOfficeRef(String accountingOfficeRef) {
    this.accountingOfficeRef = accountingOfficeRef;
    return this;
  }

  /**
   * The hmrc settingss&#39; accounting office ref
   * @return accountingOfficeRef
   */
  @javax.annotation.Nullable
  public String getAccountingOfficeRef() {
    return accountingOfficeRef;
  }

  public void setAccountingOfficeRef(String accountingOfficeRef) {
    this.accountingOfficeRef = accountingOfficeRef;
  }


  public HmrcSettings coTAXRef(String coTAXRef) {
    this.coTAXRef = coTAXRef;
    return this;
  }

  /**
   * The hmrc settingss&#39; c o t a x ref
   * @return coTAXRef
   */
  @javax.annotation.Nullable
  public String getCoTAXRef() {
    return coTAXRef;
  }

  public void setCoTAXRef(String coTAXRef) {
    this.coTAXRef = coTAXRef;
  }


  public HmrcSettings contactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
    return this;
  }

  /**
   * The hmrc settingss&#39; contact email
   * @return contactEmail
   */
  @javax.annotation.Nullable
  public String getContactEmail() {
    return contactEmail;
  }

  public void setContactEmail(String contactEmail) {
    this.contactEmail = contactEmail;
  }


  public HmrcSettings contactFax(String contactFax) {
    this.contactFax = contactFax;
    return this;
  }

  /**
   * The hmrc settingss&#39; contact fax
   * @return contactFax
   */
  @javax.annotation.Nullable
  public String getContactFax() {
    return contactFax;
  }

  public void setContactFax(String contactFax) {
    this.contactFax = contactFax;
  }


  public HmrcSettings contactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
    return this;
  }

  /**
   * The hmrc settingss&#39; contact first name
   * @return contactFirstName
   */
  @javax.annotation.Nullable
  public String getContactFirstName() {
    return contactFirstName;
  }

  public void setContactFirstName(String contactFirstName) {
    this.contactFirstName = contactFirstName;
  }


  public HmrcSettings contactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
    return this;
  }

  /**
   * The hmrc settingss&#39; contact last name
   * @return contactLastName
   */
  @javax.annotation.Nullable
  public String getContactLastName() {
    return contactLastName;
  }

  public void setContactLastName(String contactLastName) {
    this.contactLastName = contactLastName;
  }


  public HmrcSettings contactTelephone(String contactTelephone) {
    this.contactTelephone = contactTelephone;
    return this;
  }

  /**
   * The hmrc settingss&#39; contact telephone
   * @return contactTelephone
   */
  @javax.annotation.Nullable
  public String getContactTelephone() {
    return contactTelephone;
  }

  public void setContactTelephone(String contactTelephone) {
    this.contactTelephone = contactTelephone;
  }


  public HmrcSettings employmentAllowanceOverride(Double employmentAllowanceOverride) {
    this.employmentAllowanceOverride = employmentAllowanceOverride;
    return this;
  }

  /**
   * The hmrc settingss&#39; employment allowance override
   * @return employmentAllowanceOverride
   */
  @javax.annotation.Nullable
  public Double getEmploymentAllowanceOverride() {
    return employmentAllowanceOverride;
  }

  public void setEmploymentAllowanceOverride(Double employmentAllowanceOverride) {
    this.employmentAllowanceOverride = employmentAllowanceOverride;
  }


  public HmrcSettings password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The hmrc settingss&#39; password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public HmrcSettings SAUTR(String SAUTR) {
    this.SAUTR = SAUTR;
    return this;
  }

  /**
   * The hmrc settingss&#39; s a u t r
   * @return SAUTR
   */
  @javax.annotation.Nullable
  public String getSAUTR() {
    return SAUTR;
  }

  public void setSAUTR(String SAUTR) {
    this.SAUTR = SAUTR;
  }


  public HmrcSettings sender(SenderEnum sender) {
    this.sender = sender;
    return this;
  }

  /**
   * The hmrc settingss&#39; sender
   * @return sender
   */
  @javax.annotation.Nullable
  public SenderEnum getSender() {
    return sender;
  }

  public void setSender(SenderEnum sender) {
    this.sender = sender;
  }


  public HmrcSettings senderId(String senderId) {
    this.senderId = senderId;
    return this;
  }

  /**
   * The hmrc settingss&#39; sender id
   * @return senderId
   */
  @javax.annotation.Nullable
  public String getSenderId() {
    return senderId;
  }

  public void setSenderId(String senderId) {
    this.senderId = senderId;
  }


  public HmrcSettings stateAidSector(StateAidSectorEnum stateAidSector) {
    this.stateAidSector = stateAidSector;
    return this;
  }

  /**
   * The hmrc settingss&#39; state aid sector
   * @return stateAidSector
   */
  @javax.annotation.Nullable
  public StateAidSectorEnum getStateAidSector() {
    return stateAidSector;
  }

  public void setStateAidSector(StateAidSectorEnum stateAidSector) {
    this.stateAidSector = stateAidSector;
  }


  public HmrcSettings taxOfficeNumber(String taxOfficeNumber) {
    this.taxOfficeNumber = taxOfficeNumber;
    return this;
  }

  /**
   * The hmrc settingss&#39; tax office number
   * @return taxOfficeNumber
   */
  @javax.annotation.Nullable
  public String getTaxOfficeNumber() {
    return taxOfficeNumber;
  }

  public void setTaxOfficeNumber(String taxOfficeNumber) {
    this.taxOfficeNumber = taxOfficeNumber;
  }


  public HmrcSettings taxOfficeReference(String taxOfficeReference) {
    this.taxOfficeReference = taxOfficeReference;
    return this;
  }

  /**
   * The hmrc settingss&#39; tax office reference
   * @return taxOfficeReference
   */
  @javax.annotation.Nullable
  public String getTaxOfficeReference() {
    return taxOfficeReference;
  }

  public void setTaxOfficeReference(String taxOfficeReference) {
    this.taxOfficeReference = taxOfficeReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HmrcSettings hmrcSettings = (HmrcSettings) o;
    return Objects.equals(this.accountingOfficeRef, hmrcSettings.accountingOfficeRef) &&
        Objects.equals(this.coTAXRef, hmrcSettings.coTAXRef) &&
        Objects.equals(this.contactEmail, hmrcSettings.contactEmail) &&
        Objects.equals(this.contactFax, hmrcSettings.contactFax) &&
        Objects.equals(this.contactFirstName, hmrcSettings.contactFirstName) &&
        Objects.equals(this.contactLastName, hmrcSettings.contactLastName) &&
        Objects.equals(this.contactTelephone, hmrcSettings.contactTelephone) &&
        Objects.equals(this.employmentAllowanceOverride, hmrcSettings.employmentAllowanceOverride) &&
        Objects.equals(this.password, hmrcSettings.password) &&
        Objects.equals(this.SAUTR, hmrcSettings.SAUTR) &&
        Objects.equals(this.sender, hmrcSettings.sender) &&
        Objects.equals(this.senderId, hmrcSettings.senderId) &&
        Objects.equals(this.stateAidSector, hmrcSettings.stateAidSector) &&
        Objects.equals(this.taxOfficeNumber, hmrcSettings.taxOfficeNumber) &&
        Objects.equals(this.taxOfficeReference, hmrcSettings.taxOfficeReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountingOfficeRef, coTAXRef, contactEmail, contactFax, contactFirstName, contactLastName, contactTelephone, employmentAllowanceOverride, password, SAUTR, sender, senderId, stateAidSector, taxOfficeNumber, taxOfficeReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HmrcSettings {\n");
    sb.append("    accountingOfficeRef: ").append(toIndentedString(accountingOfficeRef)).append("\n");
    sb.append("    coTAXRef: ").append(toIndentedString(coTAXRef)).append("\n");
    sb.append("    contactEmail: ").append(toIndentedString(contactEmail)).append("\n");
    sb.append("    contactFax: ").append(toIndentedString(contactFax)).append("\n");
    sb.append("    contactFirstName: ").append(toIndentedString(contactFirstName)).append("\n");
    sb.append("    contactLastName: ").append(toIndentedString(contactLastName)).append("\n");
    sb.append("    contactTelephone: ").append(toIndentedString(contactTelephone)).append("\n");
    sb.append("    employmentAllowanceOverride: ").append(toIndentedString(employmentAllowanceOverride)).append("\n");
    sb.append("    password: ").append("*").append("\n");
    sb.append("    SAUTR: ").append(toIndentedString(SAUTR)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    stateAidSector: ").append(toIndentedString(stateAidSector)).append("\n");
    sb.append("    taxOfficeNumber: ").append(toIndentedString(taxOfficeNumber)).append("\n");
    sb.append("    taxOfficeReference: ").append(toIndentedString(taxOfficeReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountingOfficeRef");
    openapiFields.add("COTAXRef");
    openapiFields.add("ContactEmail");
    openapiFields.add("ContactFax");
    openapiFields.add("ContactFirstName");
    openapiFields.add("ContactLastName");
    openapiFields.add("ContactTelephone");
    openapiFields.add("EmploymentAllowanceOverride");
    openapiFields.add("Password");
    openapiFields.add("SAUTR");
    openapiFields.add("Sender");
    openapiFields.add("SenderId");
    openapiFields.add("StateAidSector");
    openapiFields.add("TaxOfficeNumber");
    openapiFields.add("TaxOfficeReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HmrcSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HmrcSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HmrcSettings is not found in the empty JSON string", HmrcSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HmrcSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HmrcSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountingOfficeRef") != null && !jsonObj.get("AccountingOfficeRef").isJsonNull()) && !jsonObj.get("AccountingOfficeRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountingOfficeRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountingOfficeRef").toString()));
      }
      if ((jsonObj.get("COTAXRef") != null && !jsonObj.get("COTAXRef").isJsonNull()) && !jsonObj.get("COTAXRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `COTAXRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("COTAXRef").toString()));
      }
      if ((jsonObj.get("ContactEmail") != null && !jsonObj.get("ContactEmail").isJsonNull()) && !jsonObj.get("ContactEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactEmail").toString()));
      }
      if ((jsonObj.get("ContactFax") != null && !jsonObj.get("ContactFax").isJsonNull()) && !jsonObj.get("ContactFax").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFax` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFax").toString()));
      }
      if ((jsonObj.get("ContactFirstName") != null && !jsonObj.get("ContactFirstName").isJsonNull()) && !jsonObj.get("ContactFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactFirstName").toString()));
      }
      if ((jsonObj.get("ContactLastName") != null && !jsonObj.get("ContactLastName").isJsonNull()) && !jsonObj.get("ContactLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactLastName").toString()));
      }
      if ((jsonObj.get("ContactTelephone") != null && !jsonObj.get("ContactTelephone").isJsonNull()) && !jsonObj.get("ContactTelephone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContactTelephone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContactTelephone").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      if ((jsonObj.get("SAUTR") != null && !jsonObj.get("SAUTR").isJsonNull()) && !jsonObj.get("SAUTR").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SAUTR` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SAUTR").toString()));
      }
      if ((jsonObj.get("Sender") != null && !jsonObj.get("Sender").isJsonNull()) && !jsonObj.get("Sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Sender").toString()));
      }
      // validate the optional field `Sender`
      if (jsonObj.get("Sender") != null && !jsonObj.get("Sender").isJsonNull()) {
        SenderEnum.validateJsonElement(jsonObj.get("Sender"));
      }
      if ((jsonObj.get("SenderId") != null && !jsonObj.get("SenderId").isJsonNull()) && !jsonObj.get("SenderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SenderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SenderId").toString()));
      }
      if ((jsonObj.get("StateAidSector") != null && !jsonObj.get("StateAidSector").isJsonNull()) && !jsonObj.get("StateAidSector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StateAidSector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StateAidSector").toString()));
      }
      // validate the optional field `StateAidSector`
      if (jsonObj.get("StateAidSector") != null && !jsonObj.get("StateAidSector").isJsonNull()) {
        StateAidSectorEnum.validateJsonElement(jsonObj.get("StateAidSector"));
      }
      if ((jsonObj.get("TaxOfficeNumber") != null && !jsonObj.get("TaxOfficeNumber").isJsonNull()) && !jsonObj.get("TaxOfficeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxOfficeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxOfficeNumber").toString()));
      }
      if ((jsonObj.get("TaxOfficeReference") != null && !jsonObj.get("TaxOfficeReference").isJsonNull()) && !jsonObj.get("TaxOfficeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TaxOfficeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TaxOfficeReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HmrcSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HmrcSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HmrcSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HmrcSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<HmrcSettings>() {
           @Override
           public void write(JsonWriter out, HmrcSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HmrcSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HmrcSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HmrcSettings
   * @throws IOException if the JSON string is invalid with respect to HmrcSettings
   */
  public static HmrcSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HmrcSettings.class);
  }

  /**
   * Convert an instance of HmrcSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

