/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Errors1;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobInfo1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:57:05.604795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobInfo1 {
  public static final String SERIALIZED_NAME_CREATED = "Created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_EMPLOYER_KEY = "EmployerKey";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_KEY)
  private String employerKey;

  public static final String SERIALIZED_NAME_ERRORS = "Errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Errors1 errors;

  public static final String SERIALIZED_NAME_HOLDING_DATE = "HoldingDate";
  @SerializedName(SERIALIZED_NAME_HOLDING_DATE)
  private OffsetDateTime holdingDate;

  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  /**
   * The job infos&#39; job status
   */
  @JsonAdapter(JobStatusEnum.Adapter.class)
  public enum JobStatusEnum {
    NEW("New"),
    
    PENDING("Pending"),
    
    IN_PROGRESS("InProgress"),
    
    SUCCESS("Success"),
    
    FAILED("Failed"),
    
    ON_HOLD("OnHold");

    private String value;

    JobStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JobStatusEnum fromValue(String value) {
      for (JobStatusEnum b : JobStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JobStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JobStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JobStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JobStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JobStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOB_STATUS = "JobStatus";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private JobStatusEnum jobStatus;

  public static final String SERIALIZED_NAME_JOB_TYPE = "JobType";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private String jobType;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "LastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_PROGRESS = "Progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Double progress;

  public JobInfo1() {
  }

  public JobInfo1 created(OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * The job infos&#39; created
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(OffsetDateTime created) {
    this.created = created;
  }


  public JobInfo1 employerKey(String employerKey) {
    this.employerKey = employerKey;
    return this;
  }

  /**
   * The job infos&#39; employer key
   * @return employerKey
   */
  @javax.annotation.Nullable
  public String getEmployerKey() {
    return employerKey;
  }

  public void setEmployerKey(String employerKey) {
    this.employerKey = employerKey;
  }


  public JobInfo1 errors(Errors1 errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public Errors1 getErrors() {
    return errors;
  }

  public void setErrors(Errors1 errors) {
    this.errors = errors;
  }


  public JobInfo1 holdingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
    return this;
  }

  /**
   * The job infos&#39; holding date
   * @return holdingDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHoldingDate() {
    return holdingDate;
  }

  public void setHoldingDate(OffsetDateTime holdingDate) {
    this.holdingDate = holdingDate;
  }


  public JobInfo1 jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * The job infos&#39; job id
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public JobInfo1 jobStatus(JobStatusEnum jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

  /**
   * The job infos&#39; job status
   * @return jobStatus
   */
  @javax.annotation.Nullable
  public JobStatusEnum getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(JobStatusEnum jobStatus) {
    this.jobStatus = jobStatus;
  }


  public JobInfo1 jobType(String jobType) {
    this.jobType = jobType;
    return this;
  }

  /**
   * The job infos&#39; job type
   * @return jobType
   */
  @javax.annotation.Nullable
  public String getJobType() {
    return jobType;
  }

  public void setJobType(String jobType) {
    this.jobType = jobType;
  }


  public JobInfo1 lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The job infos&#39; last updated
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public JobInfo1 progress(Double progress) {
    this.progress = progress;
    return this;
  }

  /**
   * The job infos&#39; progress
   * @return progress
   */
  @javax.annotation.Nullable
  public Double getProgress() {
    return progress;
  }

  public void setProgress(Double progress) {
    this.progress = progress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobInfo1 jobInfo1 = (JobInfo1) o;
    return Objects.equals(this.created, jobInfo1.created) &&
        Objects.equals(this.employerKey, jobInfo1.employerKey) &&
        Objects.equals(this.errors, jobInfo1.errors) &&
        Objects.equals(this.holdingDate, jobInfo1.holdingDate) &&
        Objects.equals(this.jobId, jobInfo1.jobId) &&
        Objects.equals(this.jobStatus, jobInfo1.jobStatus) &&
        Objects.equals(this.jobType, jobInfo1.jobType) &&
        Objects.equals(this.lastUpdated, jobInfo1.lastUpdated) &&
        Objects.equals(this.progress, jobInfo1.progress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, employerKey, errors, holdingDate, jobId, jobStatus, jobType, lastUpdated, progress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobInfo1 {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    employerKey: ").append(toIndentedString(employerKey)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    holdingDate: ").append(toIndentedString(holdingDate)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Created");
    openapiFields.add("EmployerKey");
    openapiFields.add("Errors");
    openapiFields.add("HoldingDate");
    openapiFields.add("JobId");
    openapiFields.add("JobStatus");
    openapiFields.add("JobType");
    openapiFields.add("LastUpdated");
    openapiFields.add("Progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobInfo1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobInfo1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobInfo1 is not found in the empty JSON string", JobInfo1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobInfo1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobInfo1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("EmployerKey") != null && !jsonObj.get("EmployerKey").isJsonNull()) && !jsonObj.get("EmployerKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EmployerKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EmployerKey").toString()));
      }
      // validate the optional field `Errors`
      if (jsonObj.get("Errors") != null && !jsonObj.get("Errors").isJsonNull()) {
        Errors1.validateJsonElement(jsonObj.get("Errors"));
      }
      if ((jsonObj.get("JobId") != null && !jsonObj.get("JobId").isJsonNull()) && !jsonObj.get("JobId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobId").toString()));
      }
      if ((jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) && !jsonObj.get("JobStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobStatus").toString()));
      }
      // validate the optional field `JobStatus`
      if (jsonObj.get("JobStatus") != null && !jsonObj.get("JobStatus").isJsonNull()) {
        JobStatusEnum.validateJsonElement(jsonObj.get("JobStatus"));
      }
      if ((jsonObj.get("JobType") != null && !jsonObj.get("JobType").isJsonNull()) && !jsonObj.get("JobType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `JobType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("JobType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobInfo1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobInfo1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobInfo1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobInfo1.class));

       return (TypeAdapter<T>) new TypeAdapter<JobInfo1>() {
           @Override
           public void write(JsonWriter out, JobInfo1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobInfo1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobInfo1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobInfo1
   * @throws IOException if the JSON string is invalid with respect to JobInfo1
   */
  public static JobInfo1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobInfo1.class);
  }

  /**
   * Convert an instance of JobInfo1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

