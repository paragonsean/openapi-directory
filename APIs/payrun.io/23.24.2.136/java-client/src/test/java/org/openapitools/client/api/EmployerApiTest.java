/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Employer;
import org.openapitools.client.model.EmployerSecret;
import org.openapitools.client.model.EmployerSummary;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployerApi
 */
@Disabled
public class EmployerApiTest {

    private final EmployerApi api = new EmployerApi();

    /**
     * Delete an Employer
     *
     * Delete the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Employer revision matching the specified revision date.
     *
     * Deletes the specified employer revision for the matching revision date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployerRevisionTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployerRevision(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Employer revision matching the specified revision number.
     *
     * Deletes the specified employer revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployerRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployerRevisionByNumber(employerId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes employer secret
     *
     * Deletes an employer secret from the given resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployerSecretTest() throws ApiException {
        String employerId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployerSecret(employerId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer tags
     *
     * Gets all the employer tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEmployerTags_0Test() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllEmployerTags_0(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employer
     *
     * Get the specified employer object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Employer response = api.getEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employer at the specified effective
     *
     * Returns the employer&#39;s state at the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Employer response = api.getEmployerByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employer by revision number
     *
     * Get the employer revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        Employer response = api.getEmployerRevisionByNumber(employerId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer revision summaries
     *
     * Gets links to all employer revision summaries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerRevisionSummariesTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployerRevisionSummaries(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employer summary by revision number
     *
     * Get the employer revision summary matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerRevisionSummaryByNumberTest() throws ApiException {
        String employerId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        EmployerSummary response = api.getEmployerRevisionSummaryByNumber(employerId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employer revisions
     *
     * Gets links to all the employer revisions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerRevisionsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployerRevisions(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer secret
     *
     * Get the public visible employer secret object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSecretTest() throws ApiException {
        String employerId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        EmployerSecret response = api.getEmployerSecret(employerId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer secret links
     *
     * Get all the employer secret links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSecretsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployerSecrets(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer summaries.
     *
     * Get links to all employer summaries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSummariesTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployerSummaries(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer summaries at a given effective date.
     *
     * Get links to all employer summaries on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSummariesByEffectiveDateTest() throws ApiException {
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployerSummariesByEffectiveDate(effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer summary
     *
     * Gets the specified employer summary data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSummaryTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        EmployerSummary response = api.getEmployerSummary(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer summary by effective date.
     *
     * Gets the employer summary for the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSummaryByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        EmployerSummary response = api.getEmployerSummaryByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all employers
     *
     * Gets links to all employers contained under the authorised application scope
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployersTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployers(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all employers at the specified effective date
     *
     * Gets links to all employers contained under the authorised application scope for the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployersByEffectiveDateTest() throws ApiException {
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployersByEffectiveDate(effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employers with tag
     *
     * Gets the employers with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployersWithTag_0Test() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployersWithTag_0(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the employer
     *
     * Patches the specified employer with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Employer employer = null;
        Employer response = api.patchEmployer(employerId, authorization, apiVersion, employer);
        // TODO: test validations
    }

    /**
     * Create a new Employer
     *
     * Create a new employer object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEmployerTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        Employer employer = null;
        Link response = api.postEmployer(authorization, apiVersion, employer);
        // TODO: test validations
    }

    /**
     * Create a new employer secret
     *
     * Create new employer secret using auto generated resource location key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEmployerSecretTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Link response = api.postEmployerSecret(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates the Employer
     *
     * Updates the existing specified employer object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Employer employer = null;
        Employer response = api.putEmployer(employerId, authorization, apiVersion, employer);
        // TODO: test validations
    }

    /**
     * Create a new employer secret
     *
     * Create / update an employer secret at the given resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployerSecretTest() throws ApiException {
        String employerId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        EmployerSecret response = api.putEmployerSecret(employerId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

}
