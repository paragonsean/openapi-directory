/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchJobInstruction;
import org.openapitools.client.model.CisJobInstructionBase;
import org.openapitools.client.model.DpsJobInstruction;
import org.openapitools.client.model.ErrorModel;
import java.io.File;
import org.openapitools.client.model.JobInfo;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.PayRunJobInstruction;
import org.openapitools.client.model.RtiJobInstruction;
import org.openapitools.client.model.ThirdPartyJobInstruction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JobsApi
 */
@Disabled
public class JobsApiTest {

    private final JobsApi api = new JobsApi();

    /**
     * Delete the Batch job
     *
     * Deletes the the Batch job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBatchJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteBatchJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the CIS job
     *
     * Deletes the the CIS job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the DPS job
     *
     * Deletes the the DPS job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDpsJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteDpsJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the pay run job
     *
     * Deletes the the payrun job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayRunJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayRunJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the RTI job
     *
     * Deletes the the RTI job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRtiJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteRtiJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the Third Party job
     *
     * Deletes the the Third Party job
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThirdPartyJobTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteThirdPartyJob(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Batch job information
     *
     * Return the the Batch job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getBatchJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Batch job progress
     *
     * Return the the Batch job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getBatchJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Batch job status
     *
     * Return the the Batch job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getBatchJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all Batch jobs
     *
     * Gets all the Batch jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBatchJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getBatchJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the CIS job information
     *
     * Return the the CIS job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getCisJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the CIS job progress
     *
     * Return the the CIS job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getCisJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the CIS job status
     *
     * Return the the CIS job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getCisJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS jobs
     *
     * Gets all the CIS jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the DPS job information
     *
     * Return the the DPS job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getDpsJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the DPS job progress
     *
     * Return the the DPS job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getDpsJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the DPS job status
     *
     * Return the the DPS job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getDpsJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all DPS jobs
     *
     * Gets all the DPS jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getDpsJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all jobs relating to the employer.
     *
     * Returns all job information objects for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerJobsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getEmployerJobs(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the pay run job information
     *
     * Return the the payrun job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getPayRunJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the pay run job progress
     *
     * Return the the payrun job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getPayRunJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the pay run job status
     *
     * Return the the payrun job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getPayRunJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all PayRun jobs
     *
     * Gets all the pay run jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the RTI job information
     *
     * Return the the RTI job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRtiJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getRtiJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the RTI job progress
     *
     * Return the the RTI job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRtiJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getRtiJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the RTI job status
     *
     * Return the the RTI job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRtiJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getRtiJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all RTI jobs
     *
     * Gets all the RTI jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRtiJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getRtiJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Third Party job information
     *
     * Return the the Third Party job information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyJobInfoTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        JobInfo response = api.getThirdPartyJobInfo(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Third Party job progress
     *
     * Return the the Third Party job progress
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyJobProgressTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getThirdPartyJobProgress(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the Third Party job status
     *
     * Return the the Third Party job status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyJobStatusTest() throws ApiException {
        String jobId = null;
        String authorization = null;
        String apiVersion = null;
        api.getThirdPartyJobStatus(jobId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all Third Party jobs
     *
     * Gets all the Third Party jobs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThirdPartyJobsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getThirdPartyJobs(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Create new Batch job
     *
     * Adds a new Batch job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewBatchJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        BatchJobInstruction batchJobInstruction = null;
        Link response = api.postNewBatchJob(authorization, apiVersion, batchJobInstruction);
        // TODO: test validations
    }

    /**
     * Create new CIS job
     *
     * Adds a new CIS job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewCisJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        CisJobInstructionBase cisJobInstructionBase = null;
        Link response = api.postNewCisJob(authorization, apiVersion, cisJobInstructionBase);
        // TODO: test validations
    }

    /**
     * Create new DPS job
     *
     * Creates the new DPS job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewDpsJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        DpsJobInstruction dpsJobInstruction = null;
        Link response = api.postNewDpsJob(authorization, apiVersion, dpsJobInstruction);
        // TODO: test validations
    }

    /**
     * Create new PayRun job
     *
     * Creates the new pay run job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewPayRunJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        PayRunJobInstruction payRunJobInstruction = null;
        Link response = api.postNewPayRunJob(authorization, apiVersion, payRunJobInstruction);
        // TODO: test validations
    }

    /**
     * Create new RTI job
     *
     * Creates the new RTI job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewRtiJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        RtiJobInstruction rtiJobInstruction = null;
        Link response = api.postNewRtiJob(authorization, apiVersion, rtiJobInstruction);
        // TODO: test validations
    }

    /**
     * Create new Third Party job
     *
     * Adds a new Third Party job to the queue and returns the job info
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewThirdPartyJobTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        ThirdPartyJobInstruction thirdPartyJobInstruction = null;
        Link response = api.postNewThirdPartyJob(authorization, apiVersion, thirdPartyJobInstruction);
        // TODO: test validations
    }

}
