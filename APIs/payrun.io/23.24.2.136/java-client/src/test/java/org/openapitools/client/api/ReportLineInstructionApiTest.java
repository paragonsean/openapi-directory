/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.ReportingInstruction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportLineInstructionApi
 */
@Disabled
public class ReportLineInstructionApiTest {

    private final ReportLineInstructionApi api = new ReportLineInstructionApi();

    /**
     * Deletes a reporting instruction
     *
     * Delete the specified reporting instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportingInstructionTest() throws ApiException {
        String employerId = null;
        String reportingInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteReportingInstruction(employerId, reportingInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified reporting instruction from the employer
     *
     * Returns the specified pay instruction from employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportingInstructionFromEmployerTest() throws ApiException {
        String employerId = null;
        String reportingInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        ReportingInstruction response = api.getReportingInstructionFromEmployer(employerId, reportingInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the reporting instructions from the specified employer
     *
     * Get links to all pay instructions for the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportingInstructionsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getReportingInstructionsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new Reporting Instruction
     *
     * Creates a new reporting instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postReportingInstructionTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        ReportingInstruction reportingInstruction = null;
        Link response = api.postReportingInstruction(employerId, authorization, apiVersion, reportingInstruction);
        // TODO: test validations
    }

    /**
     * Update a reporting Instruction
     *
     * Updates the existing specified reporting instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putReportingInstructionTest() throws ApiException {
        String employerId = null;
        String reportingInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        ReportingInstruction reportingInstruction = null;
        ReportingInstruction response = api.putReportingInstruction(employerId, reportingInstructionId, authorization, apiVersion, reportingInstruction);
        // TODO: test validations
    }

}
