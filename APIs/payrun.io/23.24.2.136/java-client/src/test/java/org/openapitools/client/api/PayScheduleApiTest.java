/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.PayRun;
import org.openapitools.client.model.PaySchedule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayScheduleApi
 */
@Disabled
public class PayScheduleApiTest {

    private final PayScheduleApi api = new PayScheduleApi();

    /**
     * Deletes a pay schedule
     *
     * Delete the specified pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePaySchedule(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay schedule tags
     *
     * Gets all the pay schedule tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayScheduleTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayScheduleTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from a pay schedule on effective date.
     *
     * Gets links to all employee revisions in the specified pay schedule for the given effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPayScheduleOnEffectiveDate_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPayScheduleOnEffectiveDate_0(employerId, payScheduleId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employees revisions from a pay schedule.
     *
     * Gets links to all employee revisions that have ever existed in the specified pay schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPaySchedule_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPaySchedule_0(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay run from the pay schedule
     *
     * Returns the pay run from the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunFromPaySchedule_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        PayRun response = api.getPayRunFromPaySchedule_0(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay runs from the pay schedule
     *
     * Get links to all pay runs for the specified pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsFromPaySchedule_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsFromPaySchedule_0(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified pay schedule from the employer
     *
     * Returns the specified pay schedule object from employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayScheduleFromEmployerTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        PaySchedule response = api.getPayScheduleFromEmployer(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay schedule from the specified employer
     *
     * Get links to all pay schedules for the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaySchedulesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPaySchedulesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay schedule with tag
     *
     * Gets the pay schedules with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaySchedulesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPaySchedulesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Create a new pay schedule
     *
     * Create a new pay schedule object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPayScheduleTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        PaySchedule paySchedule = null;
        Link response = api.postPaySchedule(employerId, authorization, apiVersion, paySchedule);
        // TODO: test validations
    }

    /**
     * Updates a pay schedule
     *
     * Updates the existing specified pay schedule object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        PaySchedule paySchedule = null;
        PaySchedule response = api.putPaySchedule(employerId, payScheduleId, authorization, apiVersion, paySchedule);
        // TODO: test validations
    }

}
