/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JournalLineApi
 */
@Disabled
public class JournalLineApiTest {

    private final JournalLineApi api = new JournalLineApi();

    /**
     * Delete journal line tag
     *
     * Deletes a tag from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJournalLineTag_0Test() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteJournalLineTag_0(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all journal line tags
     *
     * Gets all the journal line tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJournalLineTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllJournalLineTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged journal lines
     *
     * Gets the journal lines with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJournalLinesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllJournalLinesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get journal line tag
     *
     * Gets a tag from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromJournalLine_0Test() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromJournalLine_0(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from journal line
     *
     * Gets all tags from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromJournalLine_0Test() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromJournalLine_0(employerId, journalLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert journal line tag
     *
     * Inserts a tag on the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putJournalLineTag_0Test() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putJournalLineTag_0(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
