/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.SubContractor;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SubContractorApi
 */
@Disabled
public class SubContractorApiTest {

    private final SubContractorApi api = new SubContractorApi();

    /**
     * Delete an sub contractor
     *
     * Delete the specified sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteSubContractor(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an sub contractor revision matching the specified revision date.
     *
     * Deletes the specified sub contractor revision for the matching revision date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubContractorRevisionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteSubContractorRevision(employerId, subContractorId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an SubContractor revision matching the specified revision number.
     *
     * Deletes the specified sub contractor revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubContractorRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteSubContractorRevisionByNumber(employerId, subContractorId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor by effective date.
     *
     * Returns the sub contractor&#39;s state at the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor response = api.getSubContractorByEffectiveDate(employerId, subContractorId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor from employer
     *
     * Gets the specified sub contractor from employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorFromEmployerTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor response = api.getSubContractorFromEmployer(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the sub contractor by revision number
     *
     * Get the sub contractor revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor response = api.getSubContractorRevisionByNumber(employerId, subContractorId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sub contractor revisions
     *
     * Gets links to all the sub contractor revisions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorRevisionsTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getSubContractorRevisions(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractors from employer at a given effective date.
     *
     * Get links to all sub contractors for the employer on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorsByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getSubContractorsByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractors from employer.
     *
     * Get links to all sub contractors for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getSubContractorsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the sub contractor
     *
     * Patches the specified sub contractor with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor subContractor = null;
        SubContractor response = api.patchSubContractor(employerId, subContractorId, authorization, apiVersion, subContractor);
        // TODO: test validations
    }

    /**
     * Create a new sub contractor
     *
     * Create a new sub contractor object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSubContractorIntoEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor subContractor = null;
        Link response = api.postSubContractorIntoEmployer(employerId, authorization, apiVersion, subContractor);
        // TODO: test validations
    }

    /**
     * Updates the sub contractor
     *
     * Updates the existing specified sub contractor object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSubContractorIntoEmployerTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        SubContractor subContractor = null;
        SubContractor response = api.putSubContractorIntoEmployer(employerId, subContractorId, authorization, apiVersion, subContractor);
        // TODO: test validations
    }

}
