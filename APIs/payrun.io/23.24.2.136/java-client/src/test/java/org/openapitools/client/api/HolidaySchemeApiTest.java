/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.HolidayScheme;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HolidaySchemeApi
 */
@Disabled
public class HolidaySchemeApiTest {

    private final HolidaySchemeApi api = new HolidaySchemeApi();

    /**
     * Delete an holiday scheme
     *
     * Delete the specified holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHolidaySchemeTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteHolidayScheme(employerId, holidaySchemeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an holiday scheme revision matching the specified revision date.
     *
     * Deletes the specified holiday scheme revision for the matching revision date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHolidaySchemeRevisionTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteHolidaySchemeRevision(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an HolidayScheme revision matching the specified revision number.
     *
     * Deletes the specified holiday scheme revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHolidaySchemeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteHolidaySchemeRevisionByNumber(employerId, holidaySchemeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete holiday scheme tag
     *
     * Deletes a tag from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHolidaySchemeTag_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteHolidaySchemeTag_0(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all holiday scheme tags
     *
     * Gets all the holiday scheme tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllHolidaySchemeTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllHolidaySchemeTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme by effective date.
     *
     * Returns the holiday scheme&#39;s state at the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemeByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme response = api.getHolidaySchemeByEffectiveDate(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme from employer
     *
     * Gets the specified holiday scheme from employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemeFromEmployerTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme response = api.getHolidaySchemeFromEmployer(employerId, holidaySchemeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the holiday scheme revision by revision number
     *
     * Get the holiday scheme revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme response = api.getHolidaySchemeRevisionByNumber(employerId, holidaySchemeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all holiday scheme revisions
     *
     * Gets links to all the holiday scheme revisions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemeRevisionsTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getHolidaySchemeRevisions(employerId, holidaySchemeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday schemes from employer at a given effective date.
     *
     * Get links to all holiday schemes for the employer on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemesByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getHolidaySchemesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday schemes from employer.
     *
     * Get links to all holiday schemes for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getHolidaySchemesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday schemes with tag
     *
     * Gets the holiday scheme with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getHolidaySchemesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme revision tag
     *
     * Gets the tag from the holiday scheme revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromHolidaySchemeRevision_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromHolidaySchemeRevision_0(employerId, holidaySchemeId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme tag
     *
     * Gets the tag from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromHolidayScheme_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromHolidayScheme_0(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all holiday scheme revision tags
     *
     * Gets all the tags from the holiday scheme revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromHolidaySchemeRevision_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromHolidaySchemeRevision_0(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the holiday scheme
     *
     * Gets all the tags from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromHolidayScheme_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromHolidayScheme_0(employerId, holidaySchemeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the holiday scheme
     *
     * Patches the specified holiday scheme with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchHolidaySchemeTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme holidayScheme = null;
        HolidayScheme response = api.patchHolidayScheme(employerId, holidaySchemeId, authorization, apiVersion, holidayScheme);
        // TODO: test validations
    }

    /**
     * Create a new holiday scheme
     *
     * Create a new holiday scheme object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postHolidaySchemeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme holidayScheme = null;
        Link response = api.postHolidaySchemeIntoEmployer(employerId, authorization, apiVersion, holidayScheme);
        // TODO: test validations
    }

    /**
     * Updates the holiday scheme
     *
     * Updates the existing specified holiday scheme object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putHolidaySchemeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        HolidayScheme holidayScheme = null;
        HolidayScheme response = api.putHolidaySchemeIntoEmployer(employerId, holidaySchemeId, authorization, apiVersion, holidayScheme);
        // TODO: test validations
    }

    /**
     * Insert holiday scheme tag
     *
     * Inserts a new tag on the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putHolidaySchemeTag_0Test() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putHolidaySchemeTag_0(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
