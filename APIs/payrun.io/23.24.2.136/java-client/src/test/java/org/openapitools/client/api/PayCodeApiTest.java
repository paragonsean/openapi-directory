/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.PayCode;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayCodeApi
 */
@Disabled
public class PayCodeApiTest {

    private final PayCodeApi api = new PayCodeApi();

    /**
     * Deletes a pay code
     *
     * Delete the specified pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayCodeTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayCode(employerId, payCodeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a pay code revision
     *
     * Delete the pay code revision for the specified date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayCodeRevisionTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayCodeRevision(employerId, payCodeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an PayCode revision matching the specified revision number.
     *
     * Deletes the specified pay code revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayCodeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayCodeRevisionByNumber(employerId, payCodeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay code tags
     *
     * Gets all the pay code tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayCodeTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayCodeTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets pay code for specified date
     *
     * Gets the pay code revision for the specified effective date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodeByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        PayCode response = api.getPayCodeByEffectiveDate(employerId, payCodeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified pay code from the employer
     *
     * Returns the specified pay code from the employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodeFromEmployerTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        PayCode response = api.getPayCodeFromEmployer(employerId, payCodeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay code by revision number
     *
     * Get the pay code revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        PayCode response = api.getPayCodeRevisionByNumber(employerId, payCodeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all revisions of the Pay Code
     *
     * Returns links to all revisions of the pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodeRevisionsTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodeRevisions(employerId, payCodeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all pay codes for specified date
     *
     * Gets the effective pay code revision for the specified date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodesByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay codes from the employer
     *
     * Get links to all the pay codes for the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay codes by nominal code
     *
     * Get the pay codes that share the specified nominal code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodesFromNominalCodeTest() throws ApiException {
        String employerId = null;
        String nominalCodeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodesFromNominalCode(employerId, nominalCodeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay codes with tag
     *
     * Gets the pay codes with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the pay code
     *
     * Patches the specified pay code object with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPayCodeTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        PayCode payCode = null;
        PayCode response = api.patchPayCode(employerId, payCodeId, authorization, apiVersion, payCode);
        // TODO: test validations
    }

    /**
     * Create a new pay code
     *
     * Create a new pay code object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPayCodeTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        PayCode payCode = null;
        Link response = api.postPayCode(employerId, authorization, apiVersion, payCode);
        // TODO: test validations
    }

    /**
     * Updates a pay code
     *
     * Updates the existing specified pay code object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayCodeTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        PayCode payCode = null;
        PayCode response = api.putPayCode(employerId, payCodeId, authorization, apiVersion, payCode);
        // TODO: test validations
    }

}
