/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.PayInstruction;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayInstructionApi
 */
@Disabled
public class PayInstructionApiTest {

    private final PayInstructionApi api = new PayInstructionApi();

    /**
     * Deletes a pay instruction
     *
     * Delete the specified pay instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay instruction tags
     *
     * Gets all the pay instruction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayInstructionTags_0Test() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayInstructionTags_0(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified pay instruction from the employee
     *
     * Returns the specified pay instruction from employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayInstructionFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        PayInstruction response = api.getPayInstructionFromEmployee(employerId, employeeId, payInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay instructions from the specified employee
     *
     * Get links to all pay instructions for the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayInstructionsFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayInstructionsFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay instructions with tag
     *
     * Gets the pay instructions with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayInstructionsWithTag_0Test() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayInstructionsWithTag_0(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Sparse Update of a Pay Instruction
     *
     * Patches the specified pay instruction with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        PayInstruction payInstruction = null;
        PayInstruction response = api.patchPayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion, payInstruction);
        // TODO: test validations
    }

    /**
     * Creates a new Pay Instruction
     *
     * Creates a new pay instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        PayInstruction payInstruction = null;
        Link response = api.postPayInstruction(employerId, employeeId, authorization, apiVersion, payInstruction);
        // TODO: test validations
    }

    /**
     * Update a Pay Instruction
     *
     * Updates the existing specified pay instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        PayInstruction payInstruction = null;
        PayInstruction response = api.putPayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion, payInstruction);
        // TODO: test validations
    }

}
