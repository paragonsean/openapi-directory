/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AEAssessment;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AeAssessmentApi
 */
@Disabled
public class AeAssessmentApiTest {

    private final AeAssessmentApi api = new AeAssessmentApi();

    /**
     * Delete auto enrolment assessment
     *
     * Deletes an existing auto enrolment assessment for the employee. Used to remove historical assessments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAEAssessmentTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String aeAssessmentId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteAEAssessment(employerId, employeeId, aeAssessmentId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessment
     *
     * Gets the auto enrolment assessment from the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String aeAssessmentId = null;
        String authorization = null;
        String apiVersion = null;
        AEAssessment response = api.getAEAssessmentFromEmployee(employerId, employeeId, aeAssessmentId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessments
     *
     * Gets all auto enrolment assessments from the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentsFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAEAssessmentsFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessments
     *
     * Gets all auto enrolment assessments from the specified pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentsFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAEAssessmentsFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert new auto enrolment assessment
     *
     * Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNewAEAssessmentTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        AEAssessment aeAssessment = null;
        Link response = api.postNewAEAssessment(employerId, employeeId, authorization, apiVersion, aeAssessment);
        // TODO: test validations
    }

    /**
     * Insert new auto enrolment assessment
     *
     * Creates a new auto enrolment assessment for the employee. Used to insert historical assessments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putNewAEAssessmentTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String aeAssessmentId = null;
        String authorization = null;
        String apiVersion = null;
        AEAssessment aeAssessment = null;
        AEAssessment response = api.putNewAEAssessment(employerId, employeeId, aeAssessmentId, authorization, apiVersion, aeAssessment);
        // TODO: test validations
    }

}
