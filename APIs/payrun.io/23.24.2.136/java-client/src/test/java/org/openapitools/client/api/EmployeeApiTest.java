/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AEAssessment;
import org.openapitools.client.model.Commentary;
import org.openapitools.client.model.Employee;
import org.openapitools.client.model.EmployeeSecret;
import org.openapitools.client.model.EmployeeSummary;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeeApi
 */
@Disabled
public class EmployeeApiTest {

    private final EmployeeApi api = new EmployeeApi();

    /**
     * Delete an Employee
     *
     * Delete the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Employee revision matching the specified revision date.
     *
     * Deletes the specified employee revision for the matching revision date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeRevisionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployeeRevision(employerId, employeeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Employee revision matching the specified revision number.
     *
     * Deletes the specified employee revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployeeRevisionByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes employee secret
     *
     * Deletes an employee secret from the given resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeSecretTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessment
     *
     * Gets the auto enrolment assessment from the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentFromEmployee_0Test() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String aeAssessmentId = null;
        String authorization = null;
        String apiVersion = null;
        AEAssessment response = api.getAEAssessmentFromEmployee_0(employerId, employeeId, aeAssessmentId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessments
     *
     * Gets all auto enrolment assessments from the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentsFromEmployee_0Test() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAEAssessmentsFromEmployee_0(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee tags
     *
     * Gets all the employee tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEmployeeTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllEmployeeTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to all commentaries for the specified employee
     *
     * Get links to all commentaries for the specified employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentariesFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCommentariesFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get commentary from employee
     *
     * Gets the specified commentary report from the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentaryFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String commentaryId = null;
        String authorization = null;
        String apiVersion = null;
        Commentary response = api.getCommentaryFromEmployee(employerId, employeeId, commentaryId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get commentary from payrun by specified employee.
     *
     * Get commentary from payrun by specified employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentaryFromPayRunByEmployeeTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Commentary response = api.getCommentaryFromPayRunByEmployee(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee by effective date.
     *
     * Returns the employee&#39;s state at the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Employee response = api.getEmployeeByEffectiveDate(employerId, employeeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee from employer
     *
     * Gets the specified employee from employer by employee code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeFromEmployerTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Employee response = api.getEmployeeFromEmployer(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employee by revision number
     *
     * Get the employee revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        Employee response = api.getEmployeeRevisionByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee revision summaries
     *
     * Gets links to all employee revision summaries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeRevisionSummariesTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeeRevisionSummaries(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the employee summary by revision number
     *
     * Get the employee revision summary matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeRevisionSummaryByNumberTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        EmployeeSummary response = api.getEmployeeRevisionSummaryByNumber(employerId, employeeId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee revisions
     *
     * Gets links to all employee revisions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeRevisionsTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeeRevisions(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee secret
     *
     * Get the public visible employee secret object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSecretTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        EmployeeSecret response = api.getEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee secret links
     *
     * Get all the employee secret links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSecretsTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeeSecrets(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee summaries from employer at a given effective date.
     *
     * Get links to all employee summaries for the employer on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSummariesByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeeSummariesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee summaries from employer.
     *
     * Get links to all employee summaries for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSummariesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeeSummariesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee summary by effective date.
     *
     * Gets the employee summary for the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSummaryByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        EmployeeSummary response = api.getEmployeeSummaryByEffectiveDate(employerId, employeeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee summary from employer
     *
     * Gets the specified employee summary data from employer by employee code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeeSummaryFromEmployerTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        EmployeeSummary response = api.getEmployeeSummaryFromEmployer(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from employer at a given effective date.
     *
     * Get links to all employees for the employer on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from employer.
     *
     * Get links to all employees for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from the pay run
     *
     * Gets links to all employees included in the specified pay run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employees revisions from a pay schedule.
     *
     * Gets links to all employee revisions that have ever existed in the specified pay schedule.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPaySchedule(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from a pay schedule on effective date.
     *
     * Gets links to all employee revisions in the specified pay schedule for the given effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPayScheduleOnEffectiveDateTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPayScheduleOnEffectiveDate(employerId, payScheduleId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees with tag
     *
     * Gets the employees with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay runs from the employee
     *
     * Get links to all pay runs for the specified employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsFromEmployee_0Test() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsFromEmployee_0(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the employee
     *
     * Patches the specified employee with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Employee employee = null;
        Employee response = api.patchEmployee(employerId, employeeId, authorization, apiVersion, employee);
        // TODO: test validations
    }

    /**
     * Create a new Employee
     *
     * Create a new employee object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEmployeeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Employee employee = null;
        Link response = api.postEmployeeIntoEmployer(employerId, authorization, apiVersion, employee);
        // TODO: test validations
    }

    /**
     * Create a new employee secret
     *
     * Create new employee secret using auto generated resource location key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postEmployeeSecretTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Link response = api.postEmployeeSecret(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates the Employee
     *
     * Updates the existing specified employee object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployeeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Employee employee = null;
        Employee response = api.putEmployeeIntoEmployer(employerId, employeeId, authorization, apiVersion, employee);
        // TODO: test validations
    }

    /**
     * Create a new employee secret
     *
     * Create / update an employee secret at the given resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployeeSecretTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String secretId = null;
        String authorization = null;
        String apiVersion = null;
        EmployeeSecret response = api.putEmployeeSecret(employerId, employeeId, secretId, authorization, apiVersion);
        // TODO: test validations
    }

}
