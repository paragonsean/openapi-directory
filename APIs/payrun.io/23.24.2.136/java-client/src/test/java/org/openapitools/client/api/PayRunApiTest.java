/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Commentary;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.PayRun;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PayRunApi
 */
@Disabled
public class PayRunApiTest {

    private final PayRunApi api = new PayRunApi();

    /**
     * Deletes a pay run
     *
     * Delete the specified pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a pay run employee
     *
     * Delete pay run results for a single employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayRunEmployeeTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayRunEmployee(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the auto enrolment assessments
     *
     * Gets all auto enrolment assessments from the specified pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAEAssessmentsFromPayRun_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAEAssessmentsFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay run tags
     *
     * Gets all the pay run tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayRunTags_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayRunTags_0(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to all commentaries for the specified pay run
     *
     * Get links to all commentaries for the specified pay run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentariesFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCommentariesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get commentary from payrun by specified employee.
     *
     * Get commentary from payrun by specified employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentaryFromPayRunByEmployee_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        Commentary response = api.getCommentaryFromPayRunByEmployee_0(employerId, payScheduleId, payRunId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees from the pay run
     *
     * Gets links to all employees included in the specified pay run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesFromPayRun_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay run from the pay schedule
     *
     * Returns the pay run from the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunFromPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        PayRun response = api.getPayRunFromPaySchedule(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay runs from the employee
     *
     * Get links to all pay runs for the specified employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pay runs from the pay schedule
     *
     * Get links to all pay runs for the specified pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsFromPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsFromPaySchedule(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay runs with tag
     *
     * Gets the pay runs with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsWithTag_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsWithTag_0(employerId, payScheduleId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the report lines from the specified pay run
     *
     * Returns all report lines associated with the specified pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportLinesFromPayRun_0Test() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getReportLinesFromPayRun_0(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

}
