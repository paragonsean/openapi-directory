/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DpsMessage;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DpsMessageApi
 */
@Disabled
public class DpsMessageApiTest {

    private final DpsMessageApi api = new DpsMessageApi();

    /**
     * Deletes the DPS message
     *
     * Deletes the DPS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDpsMessageTest() throws ApiException {
        String employerId = null;
        String dpsMessageId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteDpsMessage(employerId, dpsMessageId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the DPS message
     *
     * Gets the DPS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsMessageFromEmployerTest() throws ApiException {
        String employerId = null;
        String dpsMessageId = null;
        String authorization = null;
        String apiVersion = null;
        DpsMessage response = api.getDpsMessageFromEmployer(employerId, dpsMessageId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the DPS messages
     *
     * Gets the DPS message links
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsMessagesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getDpsMessagesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the DPS message
     *
     * Patches the specified DPS message with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchDpsMessageTest() throws ApiException {
        String employerId = null;
        String dpsMessageId = null;
        String authorization = null;
        String apiVersion = null;
        DpsMessage response = api.patchDpsMessage(employerId, dpsMessageId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Posta the DPS message
     *
     * Insert new DPS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDpsMessageTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Link response = api.postDpsMessage(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Puts the DPS message
     *
     * Puts the DPS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDpsMessageTest() throws ApiException {
        String employerId = null;
        String dpsMessageId = null;
        String authorization = null;
        String apiVersion = null;
        DpsMessage response = api.putDpsMessage(employerId, dpsMessageId, authorization, apiVersion);
        // TODO: test validations
    }

}
