/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaggingApi
 */
@Disabled
public class TaggingApiTest {

    private final TaggingApi api = new TaggingApi();

    /**
     * Delete CIS instruction tag
     *
     * Deletes a tag from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisInstructionTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisInstructionTag(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete CIS line tag
     *
     * Deletes a tag from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLineTag(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete CIS line type tag
     *
     * Deletes a tag from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTypeTagTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLineTypeTag(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete employee tag
     *
     * Deletes a tag from the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployeeTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployeeTag(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete employer tag
     *
     * Deletes a tag from the employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmployerTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteEmployerTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete holiday scheme tag
     *
     * Deletes a tag from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHolidaySchemeTagTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteHolidaySchemeTag(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete journal line tag
     *
     * Deletes a tag from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJournalLineTagTest() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteJournalLineTag(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete pay code tag
     *
     * Deletes a tag from the pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayCodeTagTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayCodeTag(employerId, payCodeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete pay instruction tag
     *
     * Deletes a tag from the pay instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayInstructionTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayInstructionTag(employerId, employeeId, payInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete pay line tag
     *
     * Deletes a tag from the pay line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayLineTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayLineTag(employerId, employeeId, payLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete pay run tag
     *
     * Deletes a tag from the pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayRunTagTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayRunTag(employerId, payScheduleId, payRunId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete pay schedule tag
     *
     * Deletes a tag from the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePayScheduleTagTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePayScheduleTag(employerId, payScheduleId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Permission tag
     *
     * Deletes a tag from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionTagTest() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePermissionTag(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete RTI transaction tag
     *
     * Deletes a tag from the RTI transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRtiTransactionTagTest() throws ApiException {
        String employerId = null;
        String rtiTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteRtiTransactionTag(employerId, rtiTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete sub contractor tag
     *
     * Deletes a tag from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubContractorTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteSubContractorTag(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete third party transaction tag
     *
     * Deletes a tag from the third party transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThirdPartyTransactionTagTest() throws ApiException {
        String employerId = null;
        String thirdPartyTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteThirdPartyTransactionTag(employerId, thirdPartyTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete user tag
     *
     * Deletes a tag from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTagTest() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteUserTag(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS instruction tags
     *
     * Gets all the CIS instruction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisInstructionTagsTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisInstructionTags(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS line tags
     *
     * Gets all the CIS line tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisLineTagsTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisLineTags(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS line type tags
     *
     * Gets all the CIS line type tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisLineTypeTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisLineTypeTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee tags
     *
     * Gets all the employee tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEmployeeTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllEmployeeTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer tags
     *
     * Gets all the employer tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllEmployerTagsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllEmployerTags(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all holiday scheme tags
     *
     * Gets all the holiday scheme tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllHolidaySchemeTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllHolidaySchemeTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all journal line tags
     *
     * Gets all the journal line tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJournalLineTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllJournalLineTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged journal lines
     *
     * Gets the journal lines with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllJournalLinesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllJournalLinesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay code tags
     *
     * Gets all the pay code tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayCodeTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayCodeTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay instruction tags
     *
     * Gets all the pay instruction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayInstructionTagsTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayInstructionTags(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay line tags
     *
     * Gets all the pay line tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayLineTagsTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayLineTags(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay run tags
     *
     * Gets all the pay run tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayRunTagsTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayRunTags(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay schedule tags
     *
     * Gets all the pay schedule tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPayScheduleTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPayScheduleTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all Permission tags
     *
     * Get all tags from all Permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionTagsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPermissionTags(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged Permissions
     *
     * Gets the Permissions with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionsWithTagTest() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPermissionsWithTag(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all RTI transaction tags
     *
     * Gets all the RTI transaction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllRtiTransactionTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllRtiTransactionTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sub contractor tags
     *
     * Gets all the sub contractor tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSubContractorTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllSubContractorTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all third party transaction tags
     *
     * Gets all the third party transaction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllThirdPartyTransactionTagsTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllThirdPartyTransactionTags(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged third party transactions
     *
     * Gets the third party transactions with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllThirdPartyTransactionsWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllThirdPartyTransactionsWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all user tags
     *
     * Get all tags from all users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserTagsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllUserTags(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged users
     *
     * Gets the users with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersWithTagTest() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllUsersWithTag(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instructions with tag
     *
     * Gets the CIS instruction with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisInstructionsWithTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisInstructionsWithTag(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line types with tag
     *
     * Gets the CIS line type with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLineTypesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLineTypesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS lines with tag
     *
     * Gets the CIS line with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLinesWithTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLinesWithTag(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employees with tag
     *
     * Gets the employees with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployeesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployeesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employers with tag
     *
     * Gets the employers with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployersWithTagTest() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getEmployersWithTag(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday schemes with tag
     *
     * Gets the holiday scheme with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidaySchemesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getHolidaySchemesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay codes with tag
     *
     * Gets the pay codes with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayCodesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayCodesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay instructions with tag
     *
     * Gets the pay instructions with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayInstructionsWithTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayInstructionsWithTag(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay lines with tag
     *
     * Gets the pay line with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayLinesWithTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayLinesWithTag(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay runs with tag
     *
     * Gets the pay runs with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayRunsWithTagTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPayRunsWithTag(employerId, payScheduleId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay schedule with tag
     *
     * Gets the pay schedules with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaySchedulesWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPaySchedulesWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get RTI transactions with tag
     *
     * Gets the RTI transactions with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRtiTransactionsWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getRtiTransactionsWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractors with tag
     *
     * Gets the sub contractor with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorsWithTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getSubContractorsWithTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instruction tag
     *
     * Gets the tag from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisInstructionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisInstruction(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line tag
     *
     * Gets the tag from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisLineTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisLine(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line type tag
     *
     * Gets the tag from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisLineTypeTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisLineType(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee tag
     *
     * Gets the tag from the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromEmployee(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employee revision tag
     *
     * Gets the tag from the employee revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromEmployeeRevisionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromEmployeeRevision(employerId, employeeId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer tag
     *
     * Gets the tag from the employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromEmployerTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromEmployer(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get employer revision tag
     *
     * Gets the tag from the employer revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromEmployerRevisionTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromEmployerRevision(employerId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme tag
     *
     * Gets the tag from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromHolidaySchemeTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromHolidayScheme(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get holiday scheme revision tag
     *
     * Gets the tag from the holiday scheme revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromHolidaySchemeRevisionTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromHolidaySchemeRevision(employerId, holidaySchemeId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get journal line tag
     *
     * Gets a tag from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromJournalLineTest() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromJournalLine(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay code tag
     *
     * Gets the tag from the pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPayCodeTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPayCode(employerId, payCodeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay instruction tag
     *
     * Gets the tag from the pay instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPayInstruction(employerId, employeeId, payInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay line tag
     *
     * Gets the tag from the pay line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPayLineTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPayLine(employerId, employeeId, payLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay run tag
     *
     * Gets the tag from the pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPayRun(employerId, payScheduleId, payRunId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pay schedule tag
     *
     * Gets the tag from the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPaySchedule(employerId, payScheduleId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Permission tag
     *
     * Gets a tag from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPermissionTest() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPermission(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get RTI transaction tag
     *
     * Gets the tag from the RTI transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromRtiTransactionTest() throws ApiException {
        String employerId = null;
        String rtiTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromRtiTransaction(employerId, rtiTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor tag
     *
     * Gets the tag from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromSubContractor(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor revision tag
     *
     * Gets the tag from the sub contractor revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromSubContractorRevisionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromSubContractorRevision(employerId, subContractorId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get third party transaction tag
     *
     * Gets a tag from the third party transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromThirdPartyTransactionTest() throws ApiException {
        String employerId = null;
        String thirdPartyTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromThirdPartyTransaction(employerId, thirdPartyTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get user tag
     *
     * Gets a tag from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromUserTest() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromUser(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS instruction
     *
     * Gets all the tags from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisInstructionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisInstruction(employerId, subContractorId, cisInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS line
     *
     * Gets all the tags from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisLineTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisLine(employerId, subContractorId, cisLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS line type
     *
     * Gets all the tags from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisLineTypeTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisLineType(employerId, cisLineTypeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee tags
     *
     * Gets all the tags from the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employee revision tags
     *
     * Gets all the tags from the employee revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromEmployeeRevisionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromEmployeeRevision(employerId, employeeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer tags
     *
     * Gets all the tags from the employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all employer revision tags
     *
     * Gets all the tags from the employer revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromEmployerRevisionTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromEmployerRevision(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the holiday scheme
     *
     * Gets all the tags from the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromHolidaySchemeTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromHolidayScheme(employerId, holidaySchemeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all holiday scheme revision tags
     *
     * Gets all the tags from the holiday scheme revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromHolidaySchemeRevisionTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromHolidaySchemeRevision(employerId, holidaySchemeId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from journal line
     *
     * Gets all tags from the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromJournalLineTest() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromJournalLine(employerId, journalLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay code tags
     *
     * Gets all the tags from the pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPayCodeTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPayCode(employerId, payCodeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the pay instruction
     *
     * Gets all the tags from the pay instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPayInstructionTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPayInstruction(employerId, employeeId, payInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the pay line
     *
     * Gets all the tags from the pay line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPayLineTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payLineId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPayLine(employerId, employeeId, payLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay run tags
     *
     * Gets all the tags from the pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pay schedule tags
     *
     * Gets all the tags from the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPayScheduleTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPaySchedule(employerId, payScheduleId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from Permission
     *
     * Gets all tags from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from RTI transaction
     *
     * Gets all the tags from the RTI transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromRtiTransactionTest() throws ApiException {
        String employerId = null;
        String rtiTransactionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromRtiTransaction(employerId, rtiTransactionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the sub contractor
     *
     * Gets all the tags from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromSubContractor(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sub contractor revision tags
     *
     * Gets all the tags from the sub contractor revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromSubContractorRevisionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromSubContractorRevision(employerId, subContractorId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from third party transaction
     *
     * Gets all tags from the third party transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromThirdPartyTransactionTest() throws ApiException {
        String employerId = null;
        String thirdPartyTransactionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromThirdPartyTransaction(employerId, thirdPartyTransactionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from user
     *
     * Gets all tags from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromUserTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromUser(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert CIS instruction tag
     *
     * Inserts a new tag on the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisInstructionTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisInstructionTag(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert CIS line tag
     *
     * Inserts a new tag on the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisLineTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisLineTag(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert CIS line type tag
     *
     * Inserts a new tag on the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisLineTypeTagTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisLineTypeTag(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert employee tag
     *
     * Inserts a new tag on the employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployeeTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putEmployeeTag(employerId, employeeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert employer tag
     *
     * Inserts a new tag on the employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putEmployerTagTest() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putEmployerTag(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert holiday scheme tag
     *
     * Inserts a new tag on the holiday scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putHolidaySchemeTagTest() throws ApiException {
        String employerId = null;
        String holidaySchemeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putHolidaySchemeTag(employerId, holidaySchemeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert journal line tag
     *
     * Inserts a tag on the journal line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putJournalLineTagTest() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putJournalLineTag(employerId, journalLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert pay code tag
     *
     * Inserts a new tag on the pay code
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayCodeTagTest() throws ApiException {
        String employerId = null;
        String payCodeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPayCodeTag(employerId, payCodeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert pay instruction tag
     *
     * Inserts a new tag on the pay instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayInstructionTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPayInstructionTag(employerId, employeeId, payInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert pay line tag
     *
     * Inserts a new tag on the pay line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayLineTagTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String payLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPayLineTag(employerId, employeeId, payLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert pay run tag
     *
     * Inserts a new tag on the pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayRunTagTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPayRunTag(employerId, payScheduleId, payRunId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert pay schedule tag
     *
     * Inserts a new tag on the pay schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPayScheduleTagTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPayScheduleTag(employerId, payScheduleId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert Permission tag
     *
     * Inserts a tag on the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPermissionTagTest() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPermissionTag(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert RTI transaction tag
     *
     * Inserts a new tag on the RTI transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putRtiTransactionTagTest() throws ApiException {
        String employerId = null;
        String rtiTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putRtiTransactionTag(employerId, rtiTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert sub contractor tag
     *
     * Inserts a new tag on the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSubContractorTagTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putSubContractorTag(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * insert third party transaction tag
     *
     * Inserts a tag on the third party transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putThirdPartyTransactionTagTest() throws ApiException {
        String employerId = null;
        String thirdPartyTransactionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putThirdPartyTransactionTag(employerId, thirdPartyTransactionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert user tag
     *
     * Inserts a tag on the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUserTagTest() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putUserTag(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
