/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.Permission;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PermissionApi
 */
@Disabled
public class PermissionApiTest {

    private final PermissionApi api = new PermissionApi();

    /**
     * Deletes the permission object
     *
     * Deletes the permission object from the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete Permission tag
     *
     * Deletes a tag from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionTag_0Test() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePermissionTag_0(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all Permission tags
     *
     * Get all tags from all Permissions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionTags_0Test() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPermissionTags_0(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged Permissions
     *
     * Gets the Permissions with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionsWithTag_0Test() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllPermissionsWithTag_0(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the permission object
     *
     * Gets the permission object for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        Permission response = api.getPermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all permission objects
     *
     * Gets all permission objects for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionsTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPermissions(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get Permission tag
     *
     * Gets a tag from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromPermission_0Test() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromPermission_0(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from Permission
     *
     * Gets all tags from the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromPermission_0Test() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromPermission_0(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the user permissions
     *
     * Gets the user permission instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPermissionsTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getUserPermissions(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the users with the specified permission
     *
     * Gets the users with the specified permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersFromPermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getUsersFromPermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patch permission object
     *
     * Patch the permission object at the specified resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        Permission response = api.patchPermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Post permisson object
     *
     * Post the new permission object into the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPermissionTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        Link response = api.postPermission(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Puts permisson object
     *
     * Puts the permission object into the specified resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPermissionTest() throws ApiException {
        String permissionId = null;
        String authorization = null;
        String apiVersion = null;
        Permission response = api.putPermission(permissionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert Permission tag
     *
     * Inserts a tag on the Permission
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPermissionTag_0Test() throws ApiException {
        String permissionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putPermissionTag_0(permissionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
