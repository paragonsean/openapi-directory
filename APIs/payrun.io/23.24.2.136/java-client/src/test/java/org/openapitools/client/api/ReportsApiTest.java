/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import java.io.File;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.ReportDefinition;
import org.openapitools.client.model.TransformDefinition;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private final ReportsApi api = new ReportsApi();

    /**
     * Deletes a report definition
     *
     * Delete the specified report definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReportDefinitionTest() throws ApiException {
        String reportDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteReportDefinition(reportDefinitionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a transform definition
     *
     * Delete the specified transform definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransformDefinitionTest() throws ApiException {
        String transformDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteTransformDefinition(transformDefinitionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the active pay instructions report
     *
     * Returns the result of the executed active pay instructions report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActivePayInstructionsReportOutputTest() throws ApiException {
        String employerKey = null;
        String employeeKey = null;
        LocalDate fromDate = null;
        String authorization = null;
        String apiVersion = null;
        LocalDate activeOn = null;
        LocalDate toDate = null;
        String type = null;
        File response = api.getActivePayInstructionsReportOutput(employerKey, employeeKey, fromDate, authorization, apiVersion, activeOn, toDate, type);
        // TODO: test validations
    }

    /**
     * Runs the AOE liability report
     *
     * Returns the result of the executed AOE liability report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAoeLiabilityReportOuputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        Integer taxPeriod = null;
        String transformDefinitionKey = null;
        File response = api.getAoeLiabilityReportOuput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, transformDefinitionKey);
        // TODO: test validations
    }

    /**
     * Runs the DPS message report
     *
     * Returns the result of the executed DPS message report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDpsMessageReportOutputTest() throws ApiException {
        String employerKey = null;
        LocalDate fromDate = null;
        String authorization = null;
        String apiVersion = null;
        LocalDate toDate = null;
        String messageTypes = null;
        String messageStatuses = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getDpsMessageReportOutput(employerKey, fromDate, authorization, apiVersion, toDate, messageTypes, messageStatuses, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the employer summary report
     *
     * Returns the result of the employer summary report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmployerSummaryReportOuputTest() throws ApiException {
        String employerKey = null;
        LocalDate contextDate = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getEmployerSummaryReportOuput(employerKey, contextDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the gross to net report
     *
     * Returns the result of the executed gross to net report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGrossToNetReportOutputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        Integer taxPeriod = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getGrossToNetReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the holiday balance report
     *
     * Returns the result of the executed holiday balance report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHolidayBalanceReportOutputTest() throws ApiException {
        String employerKey = null;
        LocalDate holidayYearEnd = null;
        String authorization = null;
        String apiVersion = null;
        String employeeCodes = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getHolidayBalanceReportOutput(employerKey, holidayYearEnd, authorization, apiVersion, employeeCodes, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the journal report
     *
     * Returns the result of the journal report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalReportOuputTest() throws ApiException {
        String employerKey = null;
        String payFrequency = null;
        Integer taxYear = null;
        String ledgerTarget = null;
        String authorization = null;
        String apiVersion = null;
        Integer taxPeriod = null;
        File response = api.getJournalReportOuput(employerKey, payFrequency, taxYear, ledgerTarget, authorization, apiVersion, taxPeriod);
        // TODO: test validations
    }

    /**
     * Runs the last pay date report
     *
     * Returns the result of the executed last pay date report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastPayDateReportOuputTest() throws ApiException {
        String employerKey = null;
        String employeeKey = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getLastPayDateReportOuput(employerKey, employeeKey, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the net pay report
     *
     * Returns the result of the executed net pay report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNetPayReportOutputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        Integer taxPeriod = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getNetPayReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, taxPeriod, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the next pay period report
     *
     * Returns the result of the executed next pay period report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNextPayPeriodDatesReportOutputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getNextPayPeriodDatesReportOutput(employerKey, payScheduleKey, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the P11 summary report
     *
     * Returns the result of the executed P11 summary report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getP11SummaryReportOutputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getP11SummaryReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the P32 report
     *
     * Returns the result of the executed P32 report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getP32NetReportOutputTest() throws ApiException {
        String employerKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getP32NetReportOutput(employerKey, taxYear, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the P32 summary report
     *
     * Returns the result of the executed P32 summary report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getP32SummaryNetReportOutputTest() throws ApiException {
        String employerKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getP32SummaryNetReportOutput(employerKey, taxYear, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the P45 report
     *
     * Returns the result of the executed P45 report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getP45ReportOutputTest() throws ApiException {
        String employerKey = null;
        String employeeKey = null;
        String authorization = null;
        String apiVersion = null;
        String transformDefinitionKey = null;
        File response = api.getP45ReportOutput(employerKey, employeeKey, authorization, apiVersion, transformDefinitionKey);
        // TODO: test validations
    }

    /**
     * Runs the P60 report
     *
     * Returns the result of the executed P60 report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getP60ReportOutputTest() throws ApiException {
        String employerKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        String employeeCodes = null;
        String transformDefinitionKey = null;
        String startIndex = null;
        String maxIndex = null;
        File response = api.getP60ReportOutput(employerKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex);
        // TODO: test validations
    }

    /**
     * Runs the PAPDIS report
     *
     * Returns the result of the executed PAPDIS report. PAPDIS is a free and open data interface standard designed to allow payroll and middleware software developers to create a file that can be used by pension providers to exchange data. http://www.papdis.org/
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPapdisReportOuputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String pensionKey = null;
        String messageFunctionCode = null;
        String authorization = null;
        String apiVersion = null;
        LocalDate paymentDate = null;
        String transformDefinitionKey = null;
        File response = api.getPapdisReportOuput(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, authorization, apiVersion, paymentDate, transformDefinitionKey);
        // TODO: test validations
    }

    /**
     * Runs the PASS report
     *
     * Returns the result of the executed PASS report. PASS stands for Payroll and Systemsync. PASS 1.1 is an extension of the PAPDIS V1.1 schema. https://pensionsynckb.systemsyncsolutions.com/display/PKB/PASS+1.1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPassReportOuputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String pensionKey = null;
        String messageFunctionCode = null;
        String intermediaryId = null;
        String documentId = null;
        String authorization = null;
        String apiVersion = null;
        LocalDate paymentDate = null;
        File response = api.getPassReportOuput(employerKey, payScheduleKey, taxYear, pensionKey, messageFunctionCode, intermediaryId, documentId, authorization, apiVersion, paymentDate);
        // TODO: test validations
    }

    /**
     * Runs the Pay Dashboard payslips report
     *
     * Returns the result of the executed Pay Dashboard payslip report for the given query parameters. See https://api.paydashboard.com for details. For compatability should be returned as JSON with TransformDefinitionKey&#x3D;Json-Clean.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayDashboardPayslipReportOuputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        LocalDate publicationDate = null;
        String authorization = null;
        String apiVersion = null;
        String employeeCodes = null;
        String transformDefinitionKey = null;
        String startIndex = null;
        String maxIndex = null;
        LocalDate paymentDate = null;
        File response = api.getPayDashboardPayslipReportOuput(employerKey, payScheduleKey, taxYear, publicationDate, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate);
        // TODO: test validations
    }

    /**
     * Runs the verbose payslip report
     *
     * Returns the result of the executed verbose payslip report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayslip3ReportOutputTest() throws ApiException {
        String employerKey = null;
        String payScheduleKey = null;
        Integer taxYear = null;
        String authorization = null;
        String apiVersion = null;
        String employeeCodes = null;
        String transformDefinitionKey = null;
        String startIndex = null;
        String maxIndex = null;
        LocalDate paymentDate = null;
        File response = api.getPayslip3ReportOutput(employerKey, payScheduleKey, taxYear, authorization, apiVersion, employeeCodes, transformDefinitionKey, startIndex, maxIndex, paymentDate);
        // TODO: test validations
    }

    /**
     * Runs the pension liability report
     *
     * Returns the result of the executed pension liability report for the given query parameters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionLiabilityReportOutputTest() throws ApiException {
        String employerKey = null;
        Integer taxYear = null;
        String pensionKey = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getPensionLiabilityReportOutput(employerKey, taxYear, pensionKey, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the report definition
     *
     * Returns the specified report definition from the authroised application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportDefinitionFromApplicationTest() throws ApiException {
        String reportDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        ReportDefinition response = api.getReportDefinitionFromApplication(reportDefinitionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all reports
     *
     * Get links to all saved report definitions under authorised application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportDefinitionsFromApplicationTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getReportDefinitionsFromApplication(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Runs the specified report definition
     *
     * Returns the result of the executed report definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReportOutputTest() throws ApiException {
        String reportDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        File response = api.getReportOutput(reportDefinitionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the transform definition
     *
     * Returns the specified transform definition from the authroised application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformDefinitionFromApplicationTest() throws ApiException {
        String transformDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        TransformDefinition response = api.getTransformDefinitionFromApplication(transformDefinitionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all transform definitions
     *
     * Get links to all saved transform definitions under authorised application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformDefinitionsFromApplicationTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTransformDefinitionsFromApplication(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Create a new report definition
     *
     * Creates a new report defintion object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postReportDefinitionTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        ReportDefinition reportDefinition = null;
        Link response = api.postReportDefinition(authorization, apiVersion, reportDefinition);
        // TODO: test validations
    }

    /**
     * Create a new transform definition
     *
     * Creates a new transform defintion object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postTransformDefinitionTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        TransformDefinition transformDefinition = null;
        Link response = api.postTransformDefinition(authorization, apiVersion, transformDefinition);
        // TODO: test validations
    }

    /**
     * Updates a report definition
     *
     * Updates the existing specified report definition object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putReportDefinitionTest() throws ApiException {
        String reportDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        ReportDefinition reportDefinition = null;
        ReportDefinition response = api.putReportDefinition(reportDefinitionId, authorization, apiVersion, reportDefinition);
        // TODO: test validations
    }

    /**
     * Updates a transform definition
     *
     * Updates the existing specified transform definition object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTransformDefinitionTest() throws ApiException {
        String transformDefinitionId = null;
        String authorization = null;
        String apiVersion = null;
        TransformDefinition transformDefinition = null;
        TransformDefinition response = api.putTransformDefinition(transformDefinitionId, authorization, apiVersion, transformDefinition);
        // TODO: test validations
    }

}
