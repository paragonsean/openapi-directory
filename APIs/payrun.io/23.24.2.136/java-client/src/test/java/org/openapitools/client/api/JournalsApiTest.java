/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.JournalInstruction;
import org.openapitools.client.model.JournalLine;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JournalsApi
 */
@Disabled
public class JournalsApiTest {

    private final JournalsApi api = new JournalsApi();

    /**
     * Deletes a Journal instruction
     *
     * Delete the specified Journal instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJournalInstructionTest() throws ApiException {
        String employerId = null;
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteJournalInstruction(employerId, journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Deletes a Journal instruction template
     *
     * Delete the specified Journal instruction template object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJournalInstructionTemplateTest() throws ApiException {
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteJournalInstructionTemplate(journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified journal instruction from the employer
     *
     * Returns the specified journal instruction from employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalInstructionFromEmployerTest() throws ApiException {
        String employerId = null;
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        JournalInstruction response = api.getJournalInstructionFromEmployer(employerId, journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Journal instructions template for the application
     *
     * Retrurns the specified journal instruction from the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalInstructionTemplateTest() throws ApiException {
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        JournalInstruction response = api.getJournalInstructionTemplate(journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Journal instructions templates for the application
     *
     * Get links to all journal instruction templates for the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalInstructionTemplatesTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalInstructionTemplates(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Journal instructions from the specified employer
     *
     * Get links to all journal instructions for the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalInstructionsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalInstructionsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the specified journal Line from the employer
     *
     * Returns the specified journal Line from employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalLineFromEmployerTest() throws ApiException {
        String employerId = null;
        String journalLineId = null;
        String authorization = null;
        String apiVersion = null;
        JournalLine response = api.getJournalLineFromEmployer(employerId, journalLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the journal Lines from the specified employee
     *
     * Get links to all journal lines for the specified employee
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalLinesFromEmployeeTest() throws ApiException {
        String employerId = null;
        String employeeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalLinesFromEmployee(employerId, employeeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Journal Lines from the specified employer
     *
     * Get links to all journal Lines for the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalLinesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalLinesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the journal Lines from the specified pay run
     *
     * Get links to all journal lines for the specified pay run
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalLinesFromPayRunTest() throws ApiException {
        String employerId = null;
        String payScheduleId = null;
        String payRunId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalLinesFromPayRun(employerId, payScheduleId, payRunId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the journal Lines from the specified sub contractor
     *
     * Get links to all journal lines for the specified sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJournalLinesFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getJournalLinesFromSubContractor(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new Journal Instruction
     *
     * Creates a new Journal instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postJournalInstructionTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Link response = api.postJournalInstruction(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a new Journal Instruction template
     *
     * Creates a new Journal instruction teamplte object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postJournalInstructionTemplateTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        Link response = api.postJournalInstructionTemplate(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Update a Journal Instruction
     *
     * Updates the existing specified Journal instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putJournalInstructionTest() throws ApiException {
        String employerId = null;
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        JournalInstruction response = api.putJournalInstruction(employerId, journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Update a Journal Instruction template
     *
     * Updates the existing specified Journal instruction template object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putJournalInstructionTemplateTest() throws ApiException {
        String journalInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        JournalInstruction response = api.putJournalInstructionTemplate(journalInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

}
