/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Deletes the user object
     *
     * Deletes the user object from the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteUser(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete user tag
     *
     * Deletes a tag from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTag_0Test() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteUserTag_0(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all user tags
     *
     * Get all tags from all users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserTags_0Test() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllUserTags_0(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get links to tagged users
     *
     * Gets the users with the specified tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersWithTag_0Test() throws ApiException {
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllUsersWithTag_0(tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get user tag
     *
     * Gets a tag from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromUser_0Test() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromUser_0(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get tags from user
     *
     * Gets all tags from the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromUser_0Test() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromUser_0(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the user object
     *
     * Gets the user object for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        User response = api.getUser(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the user permissions
     *
     * Gets the user permission instances
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPermissions_0Test() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getUserPermissions_0(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets all user objects
     *
     * Gets all user objects for application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getUsers(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patch user object
     *
     * Patch the user object at the specified resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        User response = api.patchUser(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Post user object
     *
     * Post the new user object into the application
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUserTest() throws ApiException {
        String authorization = null;
        String apiVersion = null;
        Link response = api.postUser(authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Puts user object
     *
     * Puts the user object into the specified resource location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUserTest() throws ApiException {
        String userId = null;
        String authorization = null;
        String apiVersion = null;
        User response = api.putUser(userId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert user tag
     *
     * Inserts a tag on the user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putUserTag_0Test() throws ApiException {
        String userId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putUserTag_0(userId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
