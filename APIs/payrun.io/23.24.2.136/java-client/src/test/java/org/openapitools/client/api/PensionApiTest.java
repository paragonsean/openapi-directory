/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.Pension;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PensionApi
 */
@Disabled
public class PensionApiTest {

    private final PensionApi api = new PensionApi();

    /**
     * Delete a Pension
     *
     * Delete the specified ppension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePensionTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePension(employerId, pensionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Pension revision matching the specified revision date.
     *
     * Deletes the specified pension revision for the matching revision date
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePensionRevisionTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePensionRevision(employerId, pensionId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an Pension revision matching the specified revision number.
     *
     * Deletes the specified pension revision for the matching revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePensionRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        api.deletePensionRevisionByNumber(employerId, pensionId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pension by effective date.
     *
     * Returns the penion&#39;s state at the specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionByEffectiveDateTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Pension response = api.getPensionByEffectiveDate(employerId, pensionId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pension from employer
     *
     * Gets the specified pension from employer by pension code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionFromEmployerTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String authorization = null;
        String apiVersion = null;
        Pension response = api.getPensionFromEmployer(employerId, pensionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the pension by revision number
     *
     * Get the pension revision matching the specified revision number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionRevisionByNumberTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String revisionNumber = null;
        String authorization = null;
        String apiVersion = null;
        Pension response = api.getPensionRevisionByNumber(employerId, pensionId, revisionNumber, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all pension revisions
     *
     * Returns links to all revisions of the pension
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionRevisionsTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPensionRevisions(employerId, pensionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pensions from employer at a given effective date.
     *
     * Get links to all pensions for the employer on specified effective date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionsByEffectiveDateTest() throws ApiException {
        String employerId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPensionsByEffectiveDate(employerId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get pensions from employer.
     *
     * Get links to all pensions for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPensionsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getPensionsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the pension
     *
     * Patches the specified pension with the supplied values
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchPensionTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String authorization = null;
        String apiVersion = null;
        Pension pension = null;
        Pension response = api.patchPension(employerId, pensionId, authorization, apiVersion, pension);
        // TODO: test validations
    }

    /**
     * Create a new Pension
     *
     * Create a new pension object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postPensionIntoEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        Pension pension = null;
        Link response = api.postPensionIntoEmployer(employerId, authorization, apiVersion, pension);
        // TODO: test validations
    }

    /**
     * Updates the Pension
     *
     * Updates existing or inserts the specified pension object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putPensionIntoEmployerTest() throws ApiException {
        String employerId = null;
        String pensionId = null;
        String authorization = null;
        String apiVersion = null;
        Pension pension = null;
        Pension response = api.putPensionIntoEmployer(employerId, pensionId, authorization, apiVersion, pension);
        // TODO: test validations
    }

}
