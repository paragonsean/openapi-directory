/*
 * PayRun.IO
 * Open, scableable, transparent payroll API.
 *
 * The version of the OpenAPI document: 23.24.2.136
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CisInstruction;
import org.openapitools.client.model.CisLine;
import org.openapitools.client.model.CisLineType;
import org.openapitools.client.model.CisTransaction;
import org.openapitools.client.model.ErrorModel;
import org.openapitools.client.model.Link;
import org.openapitools.client.model.LinkCollection;
import java.time.LocalDate;
import org.openapitools.client.model.Tag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CisApi
 */
@Disabled
public class CisApiTest {

    private final CisApi api = new CisApi();

    /**
     * Delete a CIS instruction
     *
     * Delete the specified CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisInstructionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisInstruction(employerId, subContractorId, cisInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete CIS instruction tag
     *
     * Deletes a tag from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisInstructionTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisInstructionTag_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete a CIS line
     *
     * Delete the specified CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLine(employerId, subContractorId, cisLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete CIS line tag
     *
     * Deletes a tag from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLineTag_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete an CIS line type
     *
     * Delete the specified CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTypeTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLineType(employerId, cisLineTypeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete CIS line type tag
     *
     * Deletes a tag from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisLineTypeTag_0Test() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisLineTypeTag_0(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete the CIS transaction
     *
     * Deletes the specified CIS transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCisTransactionTest() throws ApiException {
        String employerId = null;
        String cisTransactionId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteCisTransaction(employerId, cisTransactionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Delete sub contractor tag
     *
     * Deletes a tag from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSubContractorTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        api.deleteSubContractorTag_0(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS instruction tags
     *
     * Gets all the CIS instruction tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisInstructionTags_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisInstructionTags_0(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS line tags
     *
     * Gets all the CIS line tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisLineTags_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisLineTags_0(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS line type tags
     *
     * Gets all the CIS line type tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCisLineTypeTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllCisLineTypeTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sub contractor tags
     *
     * Gets all the sub contractor tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSubContractorTags_0Test() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getAllSubContractorTags_0(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instruction from sub contractor
     *
     * Gets the specified CIS instruction from sub contractor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisInstructionFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        CisInstruction response = api.getCisInstructionFromSubContractor(employerId, subContractorId, cisInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instructions from sub contractor.
     *
     * Get links to all CIS instructions for the specified sub contractor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisInstructionsFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisInstructionsFromSubContractor(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instructions with tag
     *
     * Gets the CIS instruction with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisInstructionsWithTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisInstructionsWithTag_0(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line from sub contractor
     *
     * Gets the specified CIS line from sub contractor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLineFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String authorization = null;
        String apiVersion = null;
        CisLine response = api.getCisLineFromSubContractor(employerId, subContractorId, cisLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line type from employer
     *
     * Gets the specified CIS line type from employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLineTypeFromEmployerTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String authorization = null;
        String apiVersion = null;
        CisLineType response = api.getCisLineTypeFromEmployer(employerId, cisLineTypeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line types from employer.
     *
     * Get links to all CIS line types for the specified employer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLineTypesFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLineTypesFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line types with tag
     *
     * Gets the CIS line type with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLineTypesWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLineTypesWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS lines from sub contractor.
     *
     * Get links to all CIS lines for the specified sub contractor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLinesFromSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLinesFromSubContractor(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS lines with tag
     *
     * Gets the CIS line with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisLinesWithTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisLinesWithTag_0(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the CIS transaction
     *
     * Returns the specified CIS transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisTransactionFromEmployerTest() throws ApiException {
        String employerId = null;
        String cisTransactionId = null;
        String authorization = null;
        String apiVersion = null;
        CisTransaction response = api.getCisTransactionFromEmployer(employerId, cisTransactionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all CIS transactions for the employer
     *
     * Get links for all CIS transactions for the specified employer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCisTransactionsFromEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getCisTransactionsFromEmployer(employerId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractors with tag
     *
     * Gets the sub contractor with the tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSubContractorsWithTag_0Test() throws ApiException {
        String employerId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getSubContractorsWithTag_0(employerId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS instruction tag
     *
     * Gets the tag from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisInstruction_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisInstruction_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line type tag
     *
     * Gets the tag from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisLineType_0Test() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisLineType_0(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get CIS line tag
     *
     * Gets the tag from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromCisLine_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromCisLine_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor revision tag
     *
     * Gets the tag from the sub contractor revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromSubContractorRevision_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromSubContractorRevision_0(employerId, subContractorId, tagId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get sub contractor tag
     *
     * Gets the tag from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagFromSubContractor_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.getTagFromSubContractor_0(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS instruction
     *
     * Gets all the tags from the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisInstruction_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisInstruction_0(employerId, subContractorId, cisInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS line type
     *
     * Gets all the tags from the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisLineType_0Test() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisLineType_0(employerId, cisLineTypeId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the CIS line
     *
     * Gets all the tags from the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromCisLine_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromCisLine_0(employerId, subContractorId, cisLineId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all sub contractor revision tags
     *
     * Gets all the tags from the sub contractor revision
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromSubContractorRevision_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        LocalDate effectiveDate = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromSubContractorRevision_0(employerId, subContractorId, effectiveDate, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Get all tags from the sub contractor
     *
     * Gets all the tags from the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsFromSubContractor_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        LinkCollection response = api.getTagsFromSubContractor_0(employerId, subContractorId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Patches the CIS instruction
     *
     * Update an existing CIS instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchCisInstructionTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        CisInstruction response = api.patchCisInstruction(employerId, subContractorId, cisInstructionId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Create a new CIS instruction
     *
     * Create a new CIS instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCisInstructionIntoSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String authorization = null;
        String apiVersion = null;
        CisInstruction cisInstruction = null;
        Link response = api.postCisInstructionIntoSubContractor(employerId, subContractorId, authorization, apiVersion, cisInstruction);
        // TODO: test validations
    }

    /**
     * Create a new CIS line type
     *
     * Create a new CIS line type object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCisLineTypeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String authorization = null;
        String apiVersion = null;
        CisLineType cisLineType = null;
        Link response = api.postCisLineTypeIntoEmployer(employerId, authorization, apiVersion, cisLineType);
        // TODO: test validations
    }

    /**
     * Updates the CIS instruction
     *
     * Insert or update existing CIS instruction object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisInstructionIntoSubContractorTest() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String authorization = null;
        String apiVersion = null;
        CisInstruction cisInstruction = null;
        CisInstruction response = api.putCisInstructionIntoSubContractor(employerId, subContractorId, cisInstructionId, authorization, apiVersion, cisInstruction);
        // TODO: test validations
    }

    /**
     * Insert CIS instruction tag
     *
     * Inserts a new tag on the CIS instruction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisInstructionTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisInstructionId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisInstructionTag_0(employerId, subContractorId, cisInstructionId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert CIS line tag
     *
     * Inserts a new tag on the CIS line
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisLineTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String cisLineId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisLineTag_0(employerId, subContractorId, cisLineId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Updates the CIS line type
     *
     * Updates the existing specified CIS line type object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisLineTypeIntoEmployerTest() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String authorization = null;
        String apiVersion = null;
        CisLineType cisLineType = null;
        CisLineType response = api.putCisLineTypeIntoEmployer(employerId, cisLineTypeId, authorization, apiVersion, cisLineType);
        // TODO: test validations
    }

    /**
     * Insert CIS line type tag
     *
     * Inserts a new tag on the CIS line type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCisLineTypeTag_0Test() throws ApiException {
        String employerId = null;
        String cisLineTypeId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putCisLineTypeTag_0(employerId, cisLineTypeId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

    /**
     * Insert sub contractor tag
     *
     * Inserts a new tag on the sub contractor
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSubContractorTag_0Test() throws ApiException {
        String employerId = null;
        String subContractorId = null;
        String tagId = null;
        String authorization = null;
        String apiVersion = null;
        Tag response = api.putSubContractorTag_0(employerId, subContractorId, tagId, authorization, apiVersion);
        // TODO: test validations
    }

}
