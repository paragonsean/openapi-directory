# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.texture_info import TextureInfo
from openapi_server import util


class SkinData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, texture: TextureInfo=None, uuid: str=None):
        """SkinData - a model defined in OpenAPI

        :param texture: The texture of this SkinData.
        :param uuid: The uuid of this SkinData.
        """
        self.openapi_types = {
            'texture': TextureInfo,
            'uuid': str
        }

        self.attribute_map = {
            'texture': 'texture',
            'uuid': 'uuid'
        }

        self._texture = texture
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkinData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkinData of this SkinData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def texture(self):
        """Gets the texture of this SkinData.


        :return: The texture of this SkinData.
        :rtype: TextureInfo
        """
        return self._texture

    @texture.setter
    def texture(self, texture):
        """Sets the texture of this SkinData.


        :param texture: The texture of this SkinData.
        :type texture: TextureInfo
        """

        self._texture = texture

    @property
    def uuid(self):
        """Gets the uuid of this SkinData.


        :return: The uuid of this SkinData.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SkinData.


        :param uuid: The uuid of this SkinData.
        :type uuid: str
        """

        self._uuid = uuid
