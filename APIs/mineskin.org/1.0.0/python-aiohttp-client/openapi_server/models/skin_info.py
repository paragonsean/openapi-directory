# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.skin_data import SkinData
from openapi_server import util


class SkinInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: int=None, account_id: int=None, data: SkinData=None, duration: float=None, id: int=None, id_str: str=None, model: str=None, name: str=None, private: bool=None, server: str=None, timestamp: float=None, uuid: str=None, variant: str=None, views: float=None):
        """SkinInfo - a model defined in OpenAPI

        :param account: The account of this SkinInfo.
        :param account_id: The account_id of this SkinInfo.
        :param data: The data of this SkinInfo.
        :param duration: The duration of this SkinInfo.
        :param id: The id of this SkinInfo.
        :param id_str: The id_str of this SkinInfo.
        :param model: The model of this SkinInfo.
        :param name: The name of this SkinInfo.
        :param private: The private of this SkinInfo.
        :param server: The server of this SkinInfo.
        :param timestamp: The timestamp of this SkinInfo.
        :param uuid: The uuid of this SkinInfo.
        :param variant: The variant of this SkinInfo.
        :param views: The views of this SkinInfo.
        """
        self.openapi_types = {
            'account': int,
            'account_id': int,
            'data': SkinData,
            'duration': float,
            'id': int,
            'id_str': str,
            'model': str,
            'name': str,
            'private': bool,
            'server': str,
            'timestamp': float,
            'uuid': str,
            'variant': str,
            'views': float
        }

        self.attribute_map = {
            'account': 'account',
            'account_id': 'accountId',
            'data': 'data',
            'duration': 'duration',
            'id': 'id',
            'id_str': 'idStr',
            'model': 'model',
            'name': 'name',
            'private': 'private',
            'server': 'server',
            'timestamp': 'timestamp',
            'uuid': 'uuid',
            'variant': 'variant',
            'views': 'views'
        }

        self._account = account
        self._account_id = account_id
        self._data = data
        self._duration = duration
        self._id = id
        self._id_str = id_str
        self._model = model
        self._name = name
        self._private = private
        self._server = server
        self._timestamp = timestamp
        self._uuid = uuid
        self._variant = variant
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkinInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SkinInfo of this SkinInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this SkinInfo.


        :return: The account of this SkinInfo.
        :rtype: int
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SkinInfo.


        :param account: The account of this SkinInfo.
        :type account: int
        """

        self._account = account

    @property
    def account_id(self):
        """Gets the account_id of this SkinInfo.


        :return: The account_id of this SkinInfo.
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SkinInfo.


        :param account_id: The account_id of this SkinInfo.
        :type account_id: int
        """

        self._account_id = account_id

    @property
    def data(self):
        """Gets the data of this SkinInfo.


        :return: The data of this SkinInfo.
        :rtype: SkinData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SkinInfo.


        :param data: The data of this SkinInfo.
        :type data: SkinData
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def duration(self):
        """Gets the duration of this SkinInfo.


        :return: The duration of this SkinInfo.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SkinInfo.


        :param duration: The duration of this SkinInfo.
        :type duration: float
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this SkinInfo.


        :return: The id of this SkinInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SkinInfo.


        :param id: The id of this SkinInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def id_str(self):
        """Gets the id_str of this SkinInfo.


        :return: The id_str of this SkinInfo.
        :rtype: str
        """
        return self._id_str

    @id_str.setter
    def id_str(self, id_str):
        """Sets the id_str of this SkinInfo.


        :param id_str: The id_str of this SkinInfo.
        :type id_str: str
        """

        self._id_str = id_str

    @property
    def model(self):
        """Gets the model of this SkinInfo.


        :return: The model of this SkinInfo.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SkinInfo.


        :param model: The model of this SkinInfo.
        :type model: str
        """
        allowed_values = ["slim", "steve", "unknown"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def name(self):
        """Gets the name of this SkinInfo.


        :return: The name of this SkinInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SkinInfo.


        :param name: The name of this SkinInfo.
        :type name: str
        """

        self._name = name

    @property
    def private(self):
        """Gets the private of this SkinInfo.


        :return: The private of this SkinInfo.
        :rtype: bool
        """
        return self._private

    @private.setter
    def private(self, private):
        """Sets the private of this SkinInfo.


        :param private: The private of this SkinInfo.
        :type private: bool
        """

        self._private = private

    @property
    def server(self):
        """Gets the server of this SkinInfo.


        :return: The server of this SkinInfo.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this SkinInfo.


        :param server: The server of this SkinInfo.
        :type server: str
        """

        self._server = server

    @property
    def timestamp(self):
        """Gets the timestamp of this SkinInfo.


        :return: The timestamp of this SkinInfo.
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SkinInfo.


        :param timestamp: The timestamp of this SkinInfo.
        :type timestamp: float
        """

        self._timestamp = timestamp

    @property
    def uuid(self):
        """Gets the uuid of this SkinInfo.


        :return: The uuid of this SkinInfo.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SkinInfo.


        :param uuid: The uuid of this SkinInfo.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def variant(self):
        """Gets the variant of this SkinInfo.


        :return: The variant of this SkinInfo.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this SkinInfo.


        :param variant: The variant of this SkinInfo.
        :type variant: str
        """
        allowed_values = ["classic", "slim"]  # noqa: E501
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"
                .format(variant, allowed_values)
            )

        self._variant = variant

    @property
    def views(self):
        """Gets the views of this SkinInfo.


        :return: The views of this SkinInfo.
        :rtype: float
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this SkinInfo.


        :param views: The views of this SkinInfo.
        :type views: float
        """

        self._views = views
