# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model: str='steve', name: str=None, variant: str=None, visibility: int=0):
        """GenerateOptions - a model defined in OpenAPI

        :param model: The model of this GenerateOptions.
        :param name: The name of this GenerateOptions.
        :param variant: The variant of this GenerateOptions.
        :param visibility: The visibility of this GenerateOptions.
        """
        self.openapi_types = {
            'model': str,
            'name': str,
            'variant': str,
            'visibility': int
        }

        self.attribute_map = {
            'model': 'model',
            'name': 'name',
            'variant': 'variant',
            'visibility': 'visibility'
        }

        self._model = model
        self._name = name
        self._variant = variant
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateOptions of this GenerateOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model(self):
        """Gets the model of this GenerateOptions.


        :return: The model of this GenerateOptions.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GenerateOptions.


        :param model: The model of this GenerateOptions.
        :type model: str
        """
        allowed_values = ["steve", "slim"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def name(self):
        """Gets the name of this GenerateOptions.


        :return: The name of this GenerateOptions.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GenerateOptions.


        :param name: The name of this GenerateOptions.
        :type name: str
        """
        if name is not None and len(name) > 20:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `20`")

        self._name = name

    @property
    def variant(self):
        """Gets the variant of this GenerateOptions.

        Skin variant - automatically determined based on the image if not specified

        :return: The variant of this GenerateOptions.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this GenerateOptions.

        Skin variant - automatically determined based on the image if not specified

        :param variant: The variant of this GenerateOptions.
        :type variant: str
        """
        allowed_values = ["classic", "slim"]  # noqa: E501
        if variant not in allowed_values:
            raise ValueError(
                "Invalid value for `variant` ({0}), must be one of {1}"
                .format(variant, allowed_values)
            )

        self._variant = variant

    @property
    def visibility(self):
        """Gets the visibility of this GenerateOptions.

        Visibility of the generated skin. 0 for public, 1 for private

        :return: The visibility of this GenerateOptions.
        :rtype: int
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this GenerateOptions.

        Visibility of the generated skin. 0 for public, 1 for private

        :param visibility: The visibility of this GenerateOptions.
        :type visibility: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
