# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_list_page_get200_response_page import GetListPageGet200ResponsePage
from openapi_server.models.partial_skin_info import PartialSkinInfo
from openapi_server import util


class GetListPageGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, page: GetListPageGet200ResponsePage=None, skins: List[PartialSkinInfo]=None):
        """GetListPageGet200Response - a model defined in OpenAPI

        :param filter: The filter of this GetListPageGet200Response.
        :param page: The page of this GetListPageGet200Response.
        :param skins: The skins of this GetListPageGet200Response.
        """
        self.openapi_types = {
            'filter': str,
            'page': GetListPageGet200ResponsePage,
            'skins': List[PartialSkinInfo]
        }

        self.attribute_map = {
            'filter': 'filter',
            'page': 'page',
            'skins': 'skins'
        }

        self._filter = filter
        self._page = page
        self._skins = skins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetListPageGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _get_list__page__get_200_response of this GetListPageGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this GetListPageGet200Response.


        :return: The filter of this GetListPageGet200Response.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this GetListPageGet200Response.


        :param filter: The filter of this GetListPageGet200Response.
        :type filter: str
        """

        self._filter = filter

    @property
    def page(self):
        """Gets the page of this GetListPageGet200Response.


        :return: The page of this GetListPageGet200Response.
        :rtype: GetListPageGet200ResponsePage
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetListPageGet200Response.


        :param page: The page of this GetListPageGet200Response.
        :type page: GetListPageGet200ResponsePage
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def skins(self):
        """Gets the skins of this GetListPageGet200Response.


        :return: The skins of this GetListPageGet200Response.
        :rtype: List[PartialSkinInfo]
        """
        return self._skins

    @skins.setter
    def skins(self, skins):
        """Sets the skins of this GetListPageGet200Response.


        :param skins: The skins of this GetListPageGet200Response.
        :type skins: List[PartialSkinInfo]
        """
        if skins is None:
            raise ValueError("Invalid value for `skins`, must not be `None`")

        self._skins = skins
