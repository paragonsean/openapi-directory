/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserValidation from '../model/UserValidation';

/**
* Util service.
* @module api/UtilApi
* @version 1.0.0
*/
export default class UtilApi {

    /**
    * Constructs a new UtilApi. 
    * @alias module:api/UtilApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the validateNameNameGet operation.
     * @callback module:api/UtilApi~validateNameNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserValidation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} name 
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/UtilApi~validateNameNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserValidation}
     */
    validateNameNameGet(name, userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling validateNameNameGet");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling validateNameNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserValidation;
      return this.apiClient.callApi(
        '/validate/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateUuidUuidGet operation.
     * @callback module:api/UtilApi~validateUuidUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserValidation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/UtilApi~validateUuidUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserValidation}
     */
    validateUuidUuidGet(uuid, userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling validateUuidUuidGet");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling validateUuidUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserValidation;
      return this.apiClient.callApi(
        '/validate/uuid/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
