/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDelayGet200Response from '../model/GetDelayGet200Response';
import GetListPageGet200Response from '../model/GetListPageGet200Response';
import SkinInfo from '../model/SkinInfo';

/**
* Get service.
* @module api/GetApi
* @version 1.0.0
*/
export default class GetApi {

    /**
    * Constructs a new GetApi. 
    * @alias module:api/GetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDelayGet operation.
     * @callback module:api/GetApi~getDelayGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDelayGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/GetApi~getDelayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDelayGet200Response}
     */
    getDelayGet(userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling getDelayGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDelayGet200Response;
      return this.apiClient.callApi(
        '/get/delay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdIdGet operation.
     * @callback module:api/GetApi~getIdIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkinInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated. Use /get/uuid instead.
     * @param {Number} id 
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/GetApi~getIdIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkinInfo}
     */
    getIdIdGet(id, userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getIdIdGet");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling getIdIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkinInfo;
      return this.apiClient.callApi(
        '/get/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListPageGet operation.
     * @callback module:api/GetApi~getListPageGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetListPageGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} page For reference pagination, the uuid of the last skin in the previous page. For numeric pagination (deprecated), the page number or 'start'.
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/GetApi~getListPageGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetListPageGet200Response}
     */
    getListPageGet(page, userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling getListPageGet");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling getListPageGet");
      }

      let pathParams = {
        'page': page
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetListPageGet200Response;
      return this.apiClient.callApi(
        '/get/list/{page}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUuidUuidGet operation.
     * @callback module:api/GetApi~getUuidUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SkinInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} uuid 
     * @param {String} userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples
     * @param {module:api/GetApi~getUuidUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SkinInfo}
     */
    getUuidUuidGet(uuid, userAgent, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getUuidUuidGet");
      }
      // verify the required parameter 'userAgent' is set
      if (userAgent === undefined || userAgent === null) {
        throw new Error("Missing the required parameter 'userAgent' when calling getUuidUuidGet");
      }

      let pathParams = {
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': userAgent
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SkinInfo;
      return this.apiClient.callApi(
        '/get/uuid/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
