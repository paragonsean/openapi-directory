/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GenerateOptions from './GenerateOptions';

/**
 * The GenerateUserPostRequest model module.
 * @module model/GenerateUserPostRequest
 * @version 1.0.0
 */
class GenerateUserPostRequest {
    /**
     * Constructs a new <code>GenerateUserPostRequest</code>.
     * @alias module:model/GenerateUserPostRequest
     * @implements module:model/GenerateOptions
     */
    constructor() { 
        GenerateOptions.initialize(this);
        GenerateUserPostRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['model'] = 'steve';
        obj['visibility'] = VisibilityEnum.0;
    }

    /**
     * Constructs a <code>GenerateUserPostRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateUserPostRequest} obj Optional instance to populate.
     * @return {module:model/GenerateUserPostRequest} The populated <code>GenerateUserPostRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateUserPostRequest();
            GenerateOptions.constructFromObject(data, obj);

            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'Number');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenerateUserPostRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenerateUserPostRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/GenerateUserPostRequest.ModelEnum} model
 * @default 'steve'
 */
GenerateUserPostRequest.prototype['model'] = 'steve';

/**
 * @member {String} name
 */
GenerateUserPostRequest.prototype['name'] = undefined;

/**
 * Skin variant - automatically determined based on the image if not specified
 * @member {module:model/GenerateUserPostRequest.VariantEnum} variant
 */
GenerateUserPostRequest.prototype['variant'] = undefined;

/**
 * Visibility of the generated skin. 0 for public, 1 for private
 * @member {module:model/GenerateUserPostRequest.VisibilityEnum} visibility
 * @default VisibilityEnum.0
 */
GenerateUserPostRequest.prototype['visibility'] = VisibilityEnum.0;

/**
 * @member {String} uuid
 */
GenerateUserPostRequest.prototype['uuid'] = undefined;


// Implement GenerateOptions interface:
/**
 * @member {module:model/GenerateOptions.ModelEnum} model
 * @default 'steve'
 */
GenerateOptions.prototype['model'] = 'steve';
/**
 * @member {String} name
 */
GenerateOptions.prototype['name'] = undefined;
/**
 * Skin variant - automatically determined based on the image if not specified
 * @member {module:model/GenerateOptions.VariantEnum} variant
 */
GenerateOptions.prototype['variant'] = undefined;
/**
 * Visibility of the generated skin. 0 for public, 1 for private
 * @member {module:model/GenerateOptions.VisibilityEnum} visibility
 * @default VisibilityEnum.0
 */
GenerateOptions.prototype['visibility'] = VisibilityEnum.0;



/**
 * Allowed values for the <code>model</code> property.
 * @enum {String}
 * @readonly
 */
GenerateUserPostRequest['ModelEnum'] = {

    /**
     * value: "steve"
     * @const
     */
    "steve": "steve",

    /**
     * value: "slim"
     * @const
     */
    "slim": "slim"
};


/**
 * Allowed values for the <code>variant</code> property.
 * @enum {String}
 * @readonly
 */
GenerateUserPostRequest['VariantEnum'] = {

    /**
     * value: "classic"
     * @const
     */
    "classic": "classic",

    /**
     * value: "slim"
     * @const
     */
    "slim": "slim"
};


/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {Number}
 * @readonly
 */
GenerateUserPostRequest['VisibilityEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 1
     * @const
     */
    "1": 1
};



export default GenerateUserPostRequest;

