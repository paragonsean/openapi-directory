/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkinData from './SkinData';

/**
 * The SkinInfo model module.
 * @module model/SkinInfo
 * @version 1.0.0
 */
class SkinInfo {
    /**
     * Constructs a new <code>SkinInfo</code>.
     * @alias module:model/SkinInfo
     * @param data {module:model/SkinData} 
     * @param id {Number} 
     * @param model {module:model/SkinInfo.ModelEnum} 
     */
    constructor(data, id, model) { 
        
        SkinInfo.initialize(this, data, id, model);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, id, model) { 
        obj['data'] = data;
        obj['id'] = id;
        obj['model'] = model;
    }

    /**
     * Constructs a <code>SkinInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SkinInfo} obj Optional instance to populate.
     * @return {module:model/SkinInfo} The populated <code>SkinInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SkinInfo();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'Number');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = SkinData.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('idStr')) {
                obj['idStr'] = ApiClient.convertToType(data['idStr'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('private')) {
                obj['private'] = ApiClient.convertToType(data['private'], 'Boolean');
            }
            if (data.hasOwnProperty('server')) {
                obj['server'] = ApiClient.convertToType(data['server'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
            if (data.hasOwnProperty('views')) {
                obj['views'] = ApiClient.convertToType(data['views'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SkinInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SkinInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SkinInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          SkinData.validateJSON(data['data']);
        }
        // ensure the json data is a string
        if (data['idStr'] && !(typeof data['idStr'] === 'string' || data['idStr'] instanceof String)) {
            throw new Error("Expected the field `idStr` to be a primitive type in the JSON string but got " + data['idStr']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['server'] && !(typeof data['server'] === 'string' || data['server'] instanceof String)) {
            throw new Error("Expected the field `server` to be a primitive type in the JSON string but got " + data['server']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }

        return true;
    }


}

SkinInfo.RequiredProperties = ["data", "id", "model"];

/**
 * @member {Number} account
 */
SkinInfo.prototype['account'] = undefined;

/**
 * @member {Number} accountId
 */
SkinInfo.prototype['accountId'] = undefined;

/**
 * @member {module:model/SkinData} data
 */
SkinInfo.prototype['data'] = undefined;

/**
 * @member {Number} duration
 */
SkinInfo.prototype['duration'] = undefined;

/**
 * @member {Number} id
 */
SkinInfo.prototype['id'] = undefined;

/**
 * @member {String} idStr
 */
SkinInfo.prototype['idStr'] = undefined;

/**
 * @member {module:model/SkinInfo.ModelEnum} model
 */
SkinInfo.prototype['model'] = undefined;

/**
 * @member {String} name
 */
SkinInfo.prototype['name'] = undefined;

/**
 * @member {Boolean} private
 */
SkinInfo.prototype['private'] = undefined;

/**
 * @member {String} server
 */
SkinInfo.prototype['server'] = undefined;

/**
 * @member {Number} timestamp
 */
SkinInfo.prototype['timestamp'] = undefined;

/**
 * @member {String} uuid
 */
SkinInfo.prototype['uuid'] = undefined;

/**
 * @member {module:model/SkinInfo.VariantEnum} variant
 */
SkinInfo.prototype['variant'] = undefined;

/**
 * @member {Number} views
 */
SkinInfo.prototype['views'] = undefined;





/**
 * Allowed values for the <code>model</code> property.
 * @enum {String}
 * @readonly
 */
SkinInfo['ModelEnum'] = {

    /**
     * value: "slim"
     * @const
     */
    "slim": "slim",

    /**
     * value: "steve"
     * @const
     */
    "steve": "steve",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>variant</code> property.
 * @enum {String}
 * @readonly
 */
SkinInfo['VariantEnum'] = {

    /**
     * value: "classic"
     * @const
     */
    "classic": "classic",

    /**
     * value: "slim"
     * @const
     */
    "slim": "slim"
};



export default SkinInfo;

