/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateOptions::OAIGenerateOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateOptions::OAIGenerateOptions() {
    this->initializeModel();
}

OAIGenerateOptions::~OAIGenerateOptions() {}

void OAIGenerateOptions::initializeModel() {

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIGenerateOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateOptions::fromJsonObject(QJsonObject json) {

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIGenerateOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIGenerateOptions::getModel() const {
    return m_model;
}
void OAIGenerateOptions::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGenerateOptions::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGenerateOptions::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGenerateOptions::getName() const {
    return m_name;
}
void OAIGenerateOptions::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGenerateOptions::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGenerateOptions::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGenerateOptions::getVariant() const {
    return m_variant;
}
void OAIGenerateOptions::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIGenerateOptions::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIGenerateOptions::is_variant_Valid() const{
    return m_variant_isValid;
}

qint32 OAIGenerateOptions::getVisibility() const {
    return m_visibility;
}
void OAIGenerateOptions::setVisibility(const qint32 &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIGenerateOptions::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIGenerateOptions::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIGenerateOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
