/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_generate_upload_post_429_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_generate_upload_post_429_response::OAI_generate_upload_post_429_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_generate_upload_post_429_response::OAI_generate_upload_post_429_response() {
    this->initializeModel();
}

OAI_generate_upload_post_429_response::~OAI_generate_upload_post_429_response() {}

void OAI_generate_upload_post_429_response::initializeModel() {

    m_delay_isSet = false;
    m_delay_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_next_request_isSet = false;
    m_next_request_isValid = false;
}

void OAI_generate_upload_post_429_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_generate_upload_post_429_response::fromJsonObject(QJsonObject json) {

    m_delay_isValid = ::OpenAPI::fromJsonValue(m_delay, json[QString("delay")]);
    m_delay_isSet = !json[QString("delay")].isNull() && m_delay_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_next_request_isValid = ::OpenAPI::fromJsonValue(m_next_request, json[QString("nextRequest")]);
    m_next_request_isSet = !json[QString("nextRequest")].isNull() && m_next_request_isValid;
}

QString OAI_generate_upload_post_429_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_generate_upload_post_429_response::asJsonObject() const {
    QJsonObject obj;
    if (m_delay_isSet) {
        obj.insert(QString("delay"), ::OpenAPI::toJsonValue(m_delay));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_next_request_isSet) {
        obj.insert(QString("nextRequest"), ::OpenAPI::toJsonValue(m_next_request));
    }
    return obj;
}

qint32 OAI_generate_upload_post_429_response::getDelay() const {
    return m_delay;
}
void OAI_generate_upload_post_429_response::setDelay(const qint32 &delay) {
    m_delay = delay;
    m_delay_isSet = true;
}

bool OAI_generate_upload_post_429_response::is_delay_Set() const{
    return m_delay_isSet;
}

bool OAI_generate_upload_post_429_response::is_delay_Valid() const{
    return m_delay_isValid;
}

QString OAI_generate_upload_post_429_response::getError() const {
    return m_error;
}
void OAI_generate_upload_post_429_response::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAI_generate_upload_post_429_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAI_generate_upload_post_429_response::is_error_Valid() const{
    return m_error_isValid;
}

qint32 OAI_generate_upload_post_429_response::getNextRequest() const {
    return m_next_request;
}
void OAI_generate_upload_post_429_response::setNextRequest(const qint32 &next_request) {
    m_next_request = next_request;
    m_next_request_isSet = true;
}

bool OAI_generate_upload_post_429_response::is_next_request_Set() const{
    return m_next_request_isSet;
}

bool OAI_generate_upload_post_429_response::is_next_request_Valid() const{
    return m_next_request_isValid;
}

bool OAI_generate_upload_post_429_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_generate_upload_post_429_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_isValid && true;
}

} // namespace OpenAPI
