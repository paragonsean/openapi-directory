/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_generate_upload_post_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_generate_upload_post_200_response::OAI_generate_upload_post_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_generate_upload_post_200_response::OAI_generate_upload_post_200_response() {
    this->initializeModel();
}

OAI_generate_upload_post_200_response::~OAI_generate_upload_post_200_response() {}

void OAI_generate_upload_post_200_response::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_str_isSet = false;
    m_id_str_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_private_isSet = false;
    m_r_private_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;

    m_duplicate_isSet = false;
    m_duplicate_isValid = false;

    m_next_request_isSet = false;
    m_next_request_isValid = false;
}

void OAI_generate_upload_post_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_generate_upload_post_200_response::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_str_isValid = ::OpenAPI::fromJsonValue(m_id_str, json[QString("idStr")]);
    m_id_str_isSet = !json[QString("idStr")].isNull() && m_id_str_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_private_isValid = ::OpenAPI::fromJsonValue(m_r_private, json[QString("private")]);
    m_r_private_isSet = !json[QString("private")].isNull() && m_r_private_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;

    m_duplicate_isValid = ::OpenAPI::fromJsonValue(m_duplicate, json[QString("duplicate")]);
    m_duplicate_isSet = !json[QString("duplicate")].isNull() && m_duplicate_isValid;

    m_next_request_isValid = ::OpenAPI::fromJsonValue(m_next_request, json[QString("nextRequest")]);
    m_next_request_isSet = !json[QString("nextRequest")].isNull() && m_next_request_isValid;
}

QString OAI_generate_upload_post_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_generate_upload_post_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_str_isSet) {
        obj.insert(QString("idStr"), ::OpenAPI::toJsonValue(m_id_str));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_private_isSet) {
        obj.insert(QString("private"), ::OpenAPI::toJsonValue(m_r_private));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    if (m_duplicate_isSet) {
        obj.insert(QString("duplicate"), ::OpenAPI::toJsonValue(m_duplicate));
    }
    if (m_next_request_isSet) {
        obj.insert(QString("nextRequest"), ::OpenAPI::toJsonValue(m_next_request));
    }
    return obj;
}

qint32 OAI_generate_upload_post_200_response::getAccount() const {
    return m_account;
}
void OAI_generate_upload_post_200_response::setAccount(const qint32 &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_account_Set() const{
    return m_account_isSet;
}

bool OAI_generate_upload_post_200_response::is_account_Valid() const{
    return m_account_isValid;
}

qint32 OAI_generate_upload_post_200_response::getAccountId() const {
    return m_account_id;
}
void OAI_generate_upload_post_200_response::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAI_generate_upload_post_200_response::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAISkinData OAI_generate_upload_post_200_response::getData() const {
    return m_data;
}
void OAI_generate_upload_post_200_response::setData(const OAISkinData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_data_Set() const{
    return m_data_isSet;
}

bool OAI_generate_upload_post_200_response::is_data_Valid() const{
    return m_data_isValid;
}

double OAI_generate_upload_post_200_response::getDuration() const {
    return m_duration;
}
void OAI_generate_upload_post_200_response::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAI_generate_upload_post_200_response::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAI_generate_upload_post_200_response::getId() const {
    return m_id;
}
void OAI_generate_upload_post_200_response::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAI_generate_upload_post_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAI_generate_upload_post_200_response::getIdStr() const {
    return m_id_str;
}
void OAI_generate_upload_post_200_response::setIdStr(const QString &id_str) {
    m_id_str = id_str;
    m_id_str_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_id_str_Set() const{
    return m_id_str_isSet;
}

bool OAI_generate_upload_post_200_response::is_id_str_Valid() const{
    return m_id_str_isValid;
}

QString OAI_generate_upload_post_200_response::getModel() const {
    return m_model;
}
void OAI_generate_upload_post_200_response::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_model_Set() const{
    return m_model_isSet;
}

bool OAI_generate_upload_post_200_response::is_model_Valid() const{
    return m_model_isValid;
}

QString OAI_generate_upload_post_200_response::getName() const {
    return m_name;
}
void OAI_generate_upload_post_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAI_generate_upload_post_200_response::is_name_Valid() const{
    return m_name_isValid;
}

bool OAI_generate_upload_post_200_response::isRPrivate() const {
    return m_r_private;
}
void OAI_generate_upload_post_200_response::setRPrivate(const bool &r_private) {
    m_r_private = r_private;
    m_r_private_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_r_private_Set() const{
    return m_r_private_isSet;
}

bool OAI_generate_upload_post_200_response::is_r_private_Valid() const{
    return m_r_private_isValid;
}

QString OAI_generate_upload_post_200_response::getServer() const {
    return m_server;
}
void OAI_generate_upload_post_200_response::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_server_Set() const{
    return m_server_isSet;
}

bool OAI_generate_upload_post_200_response::is_server_Valid() const{
    return m_server_isValid;
}

double OAI_generate_upload_post_200_response::getTimestamp() const {
    return m_timestamp;
}
void OAI_generate_upload_post_200_response::setTimestamp(const double &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAI_generate_upload_post_200_response::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAI_generate_upload_post_200_response::getUuid() const {
    return m_uuid;
}
void OAI_generate_upload_post_200_response::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAI_generate_upload_post_200_response::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAI_generate_upload_post_200_response::getVariant() const {
    return m_variant;
}
void OAI_generate_upload_post_200_response::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAI_generate_upload_post_200_response::is_variant_Valid() const{
    return m_variant_isValid;
}

double OAI_generate_upload_post_200_response::getViews() const {
    return m_views;
}
void OAI_generate_upload_post_200_response::setViews(const double &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_views_Set() const{
    return m_views_isSet;
}

bool OAI_generate_upload_post_200_response::is_views_Valid() const{
    return m_views_isValid;
}

bool OAI_generate_upload_post_200_response::isDuplicate() const {
    return m_duplicate;
}
void OAI_generate_upload_post_200_response::setDuplicate(const bool &duplicate) {
    m_duplicate = duplicate;
    m_duplicate_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_duplicate_Set() const{
    return m_duplicate_isSet;
}

bool OAI_generate_upload_post_200_response::is_duplicate_Valid() const{
    return m_duplicate_isValid;
}

qint32 OAI_generate_upload_post_200_response::getNextRequest() const {
    return m_next_request;
}
void OAI_generate_upload_post_200_response::setNextRequest(const qint32 &next_request) {
    m_next_request = next_request;
    m_next_request_isSet = true;
}

bool OAI_generate_upload_post_200_response::is_next_request_Set() const{
    return m_next_request_isSet;
}

bool OAI_generate_upload_post_200_response::is_next_request_Valid() const{
    return m_next_request_isValid;
}

bool OAI_generate_upload_post_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_str_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_private_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duplicate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_request_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_generate_upload_post_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_id_isValid && m_model_isValid && true;
}

} // namespace OpenAPI
