/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_get_list__page__get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_get_list__page__get_200_response::OAI_get_list__page__get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_get_list__page__get_200_response::OAI_get_list__page__get_200_response() {
    this->initializeModel();
}

OAI_get_list__page__get_200_response::~OAI_get_list__page__get_200_response() {}

void OAI_get_list__page__get_200_response::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_skins_isSet = false;
    m_skins_isValid = false;
}

void OAI_get_list__page__get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_get_list__page__get_200_response::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_skins_isValid = ::OpenAPI::fromJsonValue(m_skins, json[QString("skins")]);
    m_skins_isSet = !json[QString("skins")].isNull() && m_skins_isValid;
}

QString OAI_get_list__page__get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_get_list__page__get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_page.isSet()) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_skins.size() > 0) {
        obj.insert(QString("skins"), ::OpenAPI::toJsonValue(m_skins));
    }
    return obj;
}

QString OAI_get_list__page__get_200_response::getFilter() const {
    return m_filter;
}
void OAI_get_list__page__get_200_response::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAI_get_list__page__get_200_response::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAI_get_list__page__get_200_response::is_filter_Valid() const{
    return m_filter_isValid;
}

OAI_get_list__page__get_200_response_page OAI_get_list__page__get_200_response::getPage() const {
    return m_page;
}
void OAI_get_list__page__get_200_response::setPage(const OAI_get_list__page__get_200_response_page &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAI_get_list__page__get_200_response::is_page_Set() const{
    return m_page_isSet;
}

bool OAI_get_list__page__get_200_response::is_page_Valid() const{
    return m_page_isValid;
}

QList<OAIPartialSkinInfo> OAI_get_list__page__get_200_response::getSkins() const {
    return m_skins;
}
void OAI_get_list__page__get_200_response::setSkins(const QList<OAIPartialSkinInfo> &skins) {
    m_skins = skins;
    m_skins_isSet = true;
}

bool OAI_get_list__page__get_200_response::is_skins_Set() const{
    return m_skins_isSet;
}

bool OAI_get_list__page__get_200_response::is_skins_Valid() const{
    return m_skins_isValid;
}

bool OAI_get_list__page__get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_get_list__page__get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_page_isValid && m_skins_isValid && true;
}

} // namespace OpenAPI
