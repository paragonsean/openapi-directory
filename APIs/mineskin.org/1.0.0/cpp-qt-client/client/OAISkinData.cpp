/**
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkinData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkinData::OAISkinData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkinData::OAISkinData() {
    this->initializeModel();
}

OAISkinData::~OAISkinData() {}

void OAISkinData::initializeModel() {

    m_texture_isSet = false;
    m_texture_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAISkinData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkinData::fromJsonObject(QJsonObject json) {

    m_texture_isValid = ::OpenAPI::fromJsonValue(m_texture, json[QString("texture")]);
    m_texture_isSet = !json[QString("texture")].isNull() && m_texture_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAISkinData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkinData::asJsonObject() const {
    QJsonObject obj;
    if (m_texture.isSet()) {
        obj.insert(QString("texture"), ::OpenAPI::toJsonValue(m_texture));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAITextureInfo OAISkinData::getTexture() const {
    return m_texture;
}
void OAISkinData::setTexture(const OAITextureInfo &texture) {
    m_texture = texture;
    m_texture_isSet = true;
}

bool OAISkinData::is_texture_Set() const{
    return m_texture_isSet;
}

bool OAISkinData::is_texture_Valid() const{
    return m_texture_isValid;
}

QString OAISkinData::getUuid() const {
    return m_uuid;
}
void OAISkinData::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISkinData::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISkinData::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAISkinData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_texture.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkinData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
