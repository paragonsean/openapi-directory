/*
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateUploadPost429Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:15.351689-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenerateUploadPost429Response {
  public static final String SERIALIZED_NAME_DELAY = "delay";
  @SerializedName(SERIALIZED_NAME_DELAY)
  private Integer delay;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_NEXT_REQUEST = "nextRequest";
  @SerializedName(SERIALIZED_NAME_NEXT_REQUEST)
  private Integer nextRequest;

  public GenerateUploadPost429Response() {
  }

  public GenerateUploadPost429Response delay(Integer delay) {
    this.delay = delay;
    return this;
  }

  /**
   * The API&#39;s current delay in seconds
   * @return delay
   */
  @javax.annotation.Nullable
  public Integer getDelay() {
    return delay;
  }

  public void setDelay(Integer delay) {
    this.delay = delay;
  }


  public GenerateUploadPost429Response error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Error message
   * @return error
   */
  @javax.annotation.Nonnull
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public GenerateUploadPost429Response nextRequest(Integer nextRequest) {
    this.nextRequest = nextRequest;
    return this;
  }

  /**
   * Unix timestamp when the next request is allowed
   * @return nextRequest
   */
  @javax.annotation.Nullable
  public Integer getNextRequest() {
    return nextRequest;
  }

  public void setNextRequest(Integer nextRequest) {
    this.nextRequest = nextRequest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateUploadPost429Response generateUploadPost429Response = (GenerateUploadPost429Response) o;
    return Objects.equals(this.delay, generateUploadPost429Response.delay) &&
        Objects.equals(this.error, generateUploadPost429Response.error) &&
        Objects.equals(this.nextRequest, generateUploadPost429Response.nextRequest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(delay, error, nextRequest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateUploadPost429Response {\n");
    sb.append("    delay: ").append(toIndentedString(delay)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    nextRequest: ").append(toIndentedString(nextRequest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("delay");
    openapiFields.add("error");
    openapiFields.add("nextRequest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("error");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateUploadPost429Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateUploadPost429Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateUploadPost429Response is not found in the empty JSON string", GenerateUploadPost429Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateUploadPost429Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateUploadPost429Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateUploadPost429Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateUploadPost429Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateUploadPost429Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateUploadPost429Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateUploadPost429Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateUploadPost429Response>() {
           @Override
           public void write(JsonWriter out, GenerateUploadPost429Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateUploadPost429Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateUploadPost429Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateUploadPost429Response
   * @throws IOException if the JSON string is invalid with respect to GenerateUploadPost429Response
   */
  public static GenerateUploadPost429Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateUploadPost429Response.class);
  }

  /**
   * Convert an instance of GenerateUploadPost429Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

