/*
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.GenerateUploadPost200Response;
import org.openapitools.client.model.GenerateUploadPost400Response;
import org.openapitools.client.model.GenerateUploadPost429Response;
import org.openapitools.client.model.GenerateUrlPostRequest;
import org.openapitools.client.model.GenerateUserPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GenerateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GenerateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GenerateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateUploadPost
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param model  (optional, default to steve)
     * @param name  (optional)
     * @param variant Skin variant - automatically determined based on the image if not specified (optional)
     * @param visibility Visibility of the generated skin. 0 for public, 1 for private (optional, default to 0)
     * @param _file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUploadPostCall(String userAgent, String model, String name, String variant, Integer visibility, File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/generate/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (model != null) {
            localVarFormParams.put("model", model);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (variant != null) {
            localVarFormParams.put("variant", variant);
        }

        if (visibility != null) {
            localVarFormParams.put("visibility", visibility);
        }

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateUploadPostValidateBeforeCall(String userAgent, String model, String name, String variant, Integer visibility, File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling generateUploadPost(Async)");
        }

        return generateUploadPostCall(userAgent, model, name, variant, visibility, _file, _callback);

    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param model  (optional, default to steve)
     * @param name  (optional)
     * @param variant Skin variant - automatically determined based on the image if not specified (optional)
     * @param visibility Visibility of the generated skin. 0 for public, 1 for private (optional, default to 0)
     * @param _file  (optional)
     * @return GenerateUploadPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public GenerateUploadPost200Response generateUploadPost(String userAgent, String model, String name, String variant, Integer visibility, File _file) throws ApiException {
        ApiResponse<GenerateUploadPost200Response> localVarResp = generateUploadPostWithHttpInfo(userAgent, model, name, variant, visibility, _file);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param model  (optional, default to steve)
     * @param name  (optional)
     * @param variant Skin variant - automatically determined based on the image if not specified (optional)
     * @param visibility Visibility of the generated skin. 0 for public, 1 for private (optional, default to 0)
     * @param _file  (optional)
     * @return ApiResponse&lt;GenerateUploadPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateUploadPost200Response> generateUploadPostWithHttpInfo(String userAgent, String model, String name, String variant, Integer visibility, File _file) throws ApiException {
        okhttp3.Call localVarCall = generateUploadPostValidateBeforeCall(userAgent, model, name, variant, visibility, _file, null);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param model  (optional, default to steve)
     * @param name  (optional)
     * @param variant Skin variant - automatically determined based on the image if not specified (optional)
     * @param visibility Visibility of the generated skin. 0 for public, 1 for private (optional, default to 0)
     * @param _file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUploadPostAsync(String userAgent, String model, String name, String variant, Integer visibility, File _file, final ApiCallback<GenerateUploadPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateUploadPostValidateBeforeCall(userAgent, model, name, variant, visibility, _file, _callback);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateUrlPost
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUrlPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUrlPostCall(String userAgent, GenerateUrlPostRequest generateUrlPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateUrlPostRequest;

        // create path and map variables
        String localVarPath = "/generate/url";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateUrlPostValidateBeforeCall(String userAgent, GenerateUrlPostRequest generateUrlPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling generateUrlPost(Async)");
        }

        // verify the required parameter 'generateUrlPostRequest' is set
        if (generateUrlPostRequest == null) {
            throw new ApiException("Missing the required parameter 'generateUrlPostRequest' when calling generateUrlPost(Async)");
        }

        return generateUrlPostCall(userAgent, generateUrlPostRequest, _callback);

    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUrlPostRequest  (required)
     * @return GenerateUploadPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public GenerateUploadPost200Response generateUrlPost(String userAgent, GenerateUrlPostRequest generateUrlPostRequest) throws ApiException {
        ApiResponse<GenerateUploadPost200Response> localVarResp = generateUrlPostWithHttpInfo(userAgent, generateUrlPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUrlPostRequest  (required)
     * @return ApiResponse&lt;GenerateUploadPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateUploadPost200Response> generateUrlPostWithHttpInfo(String userAgent, GenerateUrlPostRequest generateUrlPostRequest) throws ApiException {
        okhttp3.Call localVarCall = generateUrlPostValidateBeforeCall(userAgent, generateUrlPostRequest, null);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUrlPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUrlPostAsync(String userAgent, GenerateUrlPostRequest generateUrlPostRequest, final ApiCallback<GenerateUploadPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateUrlPostValidateBeforeCall(userAgent, generateUrlPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateUserPost
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUserPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUserPostCall(String userAgent, GenerateUserPostRequest generateUserPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateUserPostRequest;

        // create path and map variables
        String localVarPath = "/generate/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateUserPostValidateBeforeCall(String userAgent, GenerateUserPostRequest generateUserPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling generateUserPost(Async)");
        }

        // verify the required parameter 'generateUserPostRequest' is set
        if (generateUserPostRequest == null) {
            throw new ApiException("Missing the required parameter 'generateUserPostRequest' when calling generateUserPost(Async)");
        }

        return generateUserPostCall(userAgent, generateUserPostRequest, _callback);

    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUserPostRequest  (required)
     * @return GenerateUploadPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public GenerateUploadPost200Response generateUserPost(String userAgent, GenerateUserPostRequest generateUserPostRequest) throws ApiException {
        ApiResponse<GenerateUploadPost200Response> localVarResp = generateUserPostWithHttpInfo(userAgent, generateUserPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUserPostRequest  (required)
     * @return ApiResponse&lt;GenerateUploadPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateUploadPost200Response> generateUserPostWithHttpInfo(String userAgent, GenerateUserPostRequest generateUserPostRequest) throws ApiException {
        okhttp3.Call localVarCall = generateUserPostValidateBeforeCall(userAgent, generateUserPostRequest, null);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param generateUserPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully generated skin info </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Response if an error occured </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Response if the client sent a request too soon </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Response if an error occured </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateUserPostAsync(String userAgent, GenerateUserPostRequest generateUserPostRequest, final ApiCallback<GenerateUploadPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateUserPostValidateBeforeCall(userAgent, generateUserPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateUploadPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
