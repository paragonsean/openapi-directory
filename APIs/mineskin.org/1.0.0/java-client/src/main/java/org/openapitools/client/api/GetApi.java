/*
 * MineSkin API
 * Client implementations:  Java: https://github.com/InventivetalentDev/MineskinClient NodeJS: https://github.com/InventivetalentDev/mineskin-client  Examples: https://github.com/MineSkin/examples 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@mineskin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetDelayGet200Response;
import org.openapitools.client.model.GetListPageGet200Response;
import org.openapitools.client.model.SkinInfo;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDelayGet
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delay info for the requesting client </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDelayGetCall(String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/delay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDelayGetValidateBeforeCall(String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling getDelayGet(Async)");
        }

        return getDelayGetCall(userAgent, _callback);

    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return GetDelayGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delay info for the requesting client </td><td>  -  </td></tr>
     </table>
     */
    public GetDelayGet200Response getDelayGet(String userAgent) throws ApiException {
        ApiResponse<GetDelayGet200Response> localVarResp = getDelayGetWithHttpInfo(userAgent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return ApiResponse&lt;GetDelayGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delay info for the requesting client </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDelayGet200Response> getDelayGetWithHttpInfo(String userAgent) throws ApiException {
        okhttp3.Call localVarCall = getDelayGetValidateBeforeCall(userAgent, null);
        Type localVarReturnType = new TypeToken<GetDelayGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delay info for the requesting client </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDelayGetAsync(String userAgent, final ApiCallback<GetDelayGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDelayGetValidateBeforeCall(userAgent, _callback);
        Type localVarReturnType = new TypeToken<GetDelayGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIdIdGet
     * @param id  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdIdGetCall(BigDecimal id, String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/id/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIdIdGetValidateBeforeCall(BigDecimal id, String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getIdIdGet(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling getIdIdGet(Async)");
        }

        return getIdIdGetCall(id, userAgent, _callback);

    }

    /**
     * 
     * Deprecated. Use /get/uuid instead.
     * @param id  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return SkinInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public SkinInfo getIdIdGet(BigDecimal id, String userAgent) throws ApiException {
        ApiResponse<SkinInfo> localVarResp = getIdIdGetWithHttpInfo(id, userAgent);
        return localVarResp.getData();
    }

    /**
     * 
     * Deprecated. Use /get/uuid instead.
     * @param id  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return ApiResponse&lt;SkinInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkinInfo> getIdIdGetWithHttpInfo(BigDecimal id, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = getIdIdGetValidateBeforeCall(id, userAgent, null);
        Type localVarReturnType = new TypeToken<SkinInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Deprecated. Use /get/uuid instead.
     * @param id  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIdIdGetAsync(BigDecimal id, String userAgent, final ApiCallback<SkinInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIdIdGetValidateBeforeCall(id, userAgent, _callback);
        Type localVarReturnType = new TypeToken<SkinInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListPageGet
     * @param page For reference pagination, the uuid of the last skin in the previous page. For numeric pagination (deprecated), the page number or &#39;start&#39;. (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListPageGetCall(BigDecimal page, String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/list/{page}"
            .replace("{" + "page" + "}", localVarApiClient.escapeString(page.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListPageGetValidateBeforeCall(BigDecimal page, String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling getListPageGet(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling getListPageGet(Async)");
        }

        return getListPageGetCall(page, userAgent, _callback);

    }

    /**
     * 
     * 
     * @param page For reference pagination, the uuid of the last skin in the previous page. For numeric pagination (deprecated), the page number or &#39;start&#39;. (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return GetListPageGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info List </td><td>  -  </td></tr>
     </table>
     */
    public GetListPageGet200Response getListPageGet(BigDecimal page, String userAgent) throws ApiException {
        ApiResponse<GetListPageGet200Response> localVarResp = getListPageGetWithHttpInfo(page, userAgent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param page For reference pagination, the uuid of the last skin in the previous page. For numeric pagination (deprecated), the page number or &#39;start&#39;. (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return ApiResponse&lt;GetListPageGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetListPageGet200Response> getListPageGetWithHttpInfo(BigDecimal page, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = getListPageGetValidateBeforeCall(page, userAgent, null);
        Type localVarReturnType = new TypeToken<GetListPageGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param page For reference pagination, the uuid of the last skin in the previous page. For numeric pagination (deprecated), the page number or &#39;start&#39;. (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListPageGetAsync(BigDecimal page, String userAgent, final ApiCallback<GetListPageGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListPageGetValidateBeforeCall(page, userAgent, _callback);
        Type localVarReturnType = new TypeToken<GetListPageGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUuidUuidGet
     * @param uuid  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUuidUuidGetCall(UUID uuid, String userAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get/uuid/{uuid}"
            .replace("{" + "uuid" + "}", localVarApiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAgent != null) {
            localVarHeaderParams.put("User-Agent", localVarApiClient.parameterToString(userAgent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUuidUuidGetValidateBeforeCall(UUID uuid, String userAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling getUuidUuidGet(Async)");
        }

        // verify the required parameter 'userAgent' is set
        if (userAgent == null) {
            throw new ApiException("Missing the required parameter 'userAgent' when calling getUuidUuidGet(Async)");
        }

        return getUuidUuidGetCall(uuid, userAgent, _callback);

    }

    /**
     * 
     * 
     * @param uuid  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return SkinInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public SkinInfo getUuidUuidGet(UUID uuid, String userAgent) throws ApiException {
        ApiResponse<SkinInfo> localVarResp = getUuidUuidGetWithHttpInfo(uuid, userAgent);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param uuid  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @return ApiResponse&lt;SkinInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SkinInfo> getUuidUuidGetWithHttpInfo(UUID uuid, String userAgent) throws ApiException {
        okhttp3.Call localVarCall = getUuidUuidGetValidateBeforeCall(uuid, userAgent, null);
        Type localVarReturnType = new TypeToken<SkinInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param uuid  (required)
     * @param userAgent Custom User-Agent for your application, see [user-agent.dev](https://user-agent.dev/) for implementation examples (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Skin Info </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUuidUuidGetAsync(UUID uuid, String userAgent, final ApiCallback<SkinInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUuidUuidGetValidateBeforeCall(uuid, userAgent, _callback);
        Type localVarReturnType = new TypeToken<SkinInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
