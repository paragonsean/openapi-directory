/*
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChartData200Response;
import org.openapitools.client.model.CreateDataRequest;
import org.openapitools.client.model.CreateGroupDataRequest;
import org.openapitools.client.model.CreateWebhookFeedDataRequest;
import org.openapitools.client.model.Data;
import org.openapitools.client.model.DataResponse;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataApi
 */
@Disabled
public class DataApiTest {

    private final DataApi api = new DataApi();

    /**
     * Get all data for the given feed
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer limit = null;
        String include = null;
        List<DataResponse> response = api.allData(username, feedKey, startTime, endTime, limit, include);
        // TODO: test validations
    }

    /**
     * All data for current feed in a specific group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allGroupFeedDataTest() throws ApiException {
        String username = null;
        String groupKey = null;
        String feedKey = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer limit = null;
        List<DataResponse> response = api.allGroupFeedData(username, groupKey, feedKey, startTime, endTime, limit);
        // TODO: test validations
    }

    /**
     * Create multiple new Data records
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        List<CreateDataRequest> data = null;
        List<DataResponse> response = api.batchCreateData(username, feedKey, data);
        // TODO: test validations
    }

    /**
     * Create multiple new Data records in a feed belonging to a particular group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchCreateGroupFeedDataTest() throws ApiException {
        String username = null;
        String groupKey = null;
        String feedKey = null;
        List<CreateDataRequest> data = null;
        List<DataResponse> response = api.batchCreateGroupFeedData(username, groupKey, feedKey, data);
        // TODO: test validations
    }

    /**
     * Chart data for current feed
     *
     * The Chart API is what we use on io.adafruit.com to populate charts over varying timespans with a consistent number of data points. The maximum number of points returned is 480. This API works by aggregating slices of time into a single value by averaging.  All time-based parameters are optional, if none are given it will default to 1 hour at the finest-grained resolution possible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void chartDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Integer resolution = null;
        Integer hours = null;
        ChartData200Response response = api.chartData(username, feedKey, startTime, endTime, resolution, hours);
        // TODO: test validations
    }

    /**
     * Create new Data
     *
     * Create new data records on the given feed.  **NOTE:** when feed history is on, data &#x60;value&#x60; size is limited to 1KB, when feed history is turned off data value size is limited to 100KB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        CreateDataRequest datum = null;
        Data response = api.createData(username, feedKey, datum);
        // TODO: test validations
    }

    /**
     * Create new data for multiple feeds in a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupDataTest() throws ApiException {
        String username = null;
        String groupKey = null;
        CreateGroupDataRequest groupFeedData = null;
        List<DataResponse> response = api.createGroupData(username, groupKey, groupFeedData);
        // TODO: test validations
    }

    /**
     * Create new Data in a feed belonging to a particular group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupFeedDataTest() throws ApiException {
        String username = null;
        String groupKey = null;
        String feedKey = null;
        CreateDataRequest datum = null;
        DataResponse response = api.createGroupFeedData(username, groupKey, feedKey, datum);
        // TODO: test validations
    }

    /**
     * Send arbitrary data to a feed via webhook URL.
     *
     * The raw data webhook receiver accepts POST requests and stores the raw request body on your feed. This is useful when you don&#39;t have control of the webhook sender. If feed history is turned on, payloads will be truncated at 1024 bytes. If feed history is turned off, payloads will be truncated at 100KB.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRawWebhookFeedData_0Test() throws ApiException {
        Data response = api.createRawWebhookFeedData_0();
        // TODO: test validations
    }

    /**
     * Send data to a feed via webhook URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookFeedData_0Test() throws ApiException {
        CreateWebhookFeedDataRequest payload = null;
        Data response = api.createWebhookFeedData_0(payload);
        // TODO: test validations
    }

    /**
     * Delete existing Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void destroyDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String id = null;
        String response = api.destroyData(username, feedKey, id);
        // TODO: test validations
    }

    /**
     * First Data in Queue
     *
     * Get the oldest data point in the feed. This request sets the queue pointer to the beginning of the feed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void firstDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String include = null;
        DataResponse response = api.firstData(username, feedKey, include);
        // TODO: test validations
    }

    /**
     * Returns data based on feed key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String id = null;
        String include = null;
        DataResponse response = api.getData(username, feedKey, id, include);
        // TODO: test validations
    }

    /**
     * Last Data in Queue
     *
     * Get the most recent data point in the feed. This request sets the queue pointer to the end of the feed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lastDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String include = null;
        DataResponse response = api.lastData(username, feedKey, include);
        // TODO: test validations
    }

    /**
     * Next Data in Queue
     *
     * Get the next newest data point in the feed. If queue processing hasn&#39;t been started, the first data point in the feed will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void nextDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String include = null;
        DataResponse response = api.nextData(username, feedKey, include);
        // TODO: test validations
    }

    /**
     * Previous Data in Queue
     *
     * Get the previously processed data point in the feed. NOTE: this method doesn&#39;t move the processing queue pointer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void previousDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String include = null;
        DataResponse response = api.previousData(username, feedKey, include);
        // TODO: test validations
    }

    /**
     * Replace existing Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replaceDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String id = null;
        CreateDataRequest datum = null;
        DataResponse response = api.replaceData(username, feedKey, id, datum);
        // TODO: test validations
    }

    /**
     * Last Data in MQTT CSV format
     *
     * Get the most recent data point in the feed in an MQTT compatible CSV format: &#x60;value,lat,lon,ele&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retainDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String response = api.retainData(username, feedKey);
        // TODO: test validations
    }

    /**
     * Update properties of existing Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataTest() throws ApiException {
        String username = null;
        String feedKey = null;
        String id = null;
        CreateDataRequest datum = null;
        DataResponse response = api.updateData(username, feedKey, id, datum);
        // TODO: test validations
    }

}
