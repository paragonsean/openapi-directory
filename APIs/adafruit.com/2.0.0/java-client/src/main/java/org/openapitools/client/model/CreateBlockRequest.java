/*
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateBlockRequestBlockFeedsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateBlockRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:46.088024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateBlockRequest {
  public static final String SERIALIZED_NAME_BLOCK_FEEDS = "block_feeds";
  @SerializedName(SERIALIZED_NAME_BLOCK_FEEDS)
  private List<CreateBlockRequestBlockFeedsInner> blockFeeds = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLUMN = "column";
  @SerializedName(SERIALIZED_NAME_COLUMN)
  private BigDecimal column;

  public static final String SERIALIZED_NAME_DASHBOARD_ID = "dashboard_id";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_ID)
  private BigDecimal dashboardId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Object properties;

  public static final String SERIALIZED_NAME_ROW = "row";
  @SerializedName(SERIALIZED_NAME_ROW)
  private BigDecimal row;

  public static final String SERIALIZED_NAME_SIZE_X = "size_x";
  @SerializedName(SERIALIZED_NAME_SIZE_X)
  private BigDecimal sizeX;

  public static final String SERIALIZED_NAME_SIZE_Y = "size_y";
  @SerializedName(SERIALIZED_NAME_SIZE_Y)
  private BigDecimal sizeY;

  public static final String SERIALIZED_NAME_VISUAL_TYPE = "visual_type";
  @SerializedName(SERIALIZED_NAME_VISUAL_TYPE)
  private String visualType;

  public CreateBlockRequest() {
  }

  public CreateBlockRequest blockFeeds(List<CreateBlockRequestBlockFeedsInner> blockFeeds) {
    this.blockFeeds = blockFeeds;
    return this;
  }

  public CreateBlockRequest addBlockFeedsItem(CreateBlockRequestBlockFeedsInner blockFeedsItem) {
    if (this.blockFeeds == null) {
      this.blockFeeds = new ArrayList<>();
    }
    this.blockFeeds.add(blockFeedsItem);
    return this;
  }

  /**
   * Get blockFeeds
   * @return blockFeeds
   */
  @javax.annotation.Nullable
  public List<CreateBlockRequestBlockFeedsInner> getBlockFeeds() {
    return blockFeeds;
  }

  public void setBlockFeeds(List<CreateBlockRequestBlockFeedsInner> blockFeeds) {
    this.blockFeeds = blockFeeds;
  }


  public CreateBlockRequest column(BigDecimal column) {
    this.column = column;
    return this;
  }

  /**
   * Get column
   * @return column
   */
  @javax.annotation.Nullable
  public BigDecimal getColumn() {
    return column;
  }

  public void setColumn(BigDecimal column) {
    this.column = column;
  }


  public CreateBlockRequest dashboardId(BigDecimal dashboardId) {
    this.dashboardId = dashboardId;
    return this;
  }

  /**
   * Get dashboardId
   * @return dashboardId
   */
  @javax.annotation.Nullable
  public BigDecimal getDashboardId() {
    return dashboardId;
  }

  public void setDashboardId(BigDecimal dashboardId) {
    this.dashboardId = dashboardId;
  }


  public CreateBlockRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateBlockRequest key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public CreateBlockRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateBlockRequest properties(Object properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Object getProperties() {
    return properties;
  }

  public void setProperties(Object properties) {
    this.properties = properties;
  }


  public CreateBlockRequest row(BigDecimal row) {
    this.row = row;
    return this;
  }

  /**
   * Get row
   * @return row
   */
  @javax.annotation.Nullable
  public BigDecimal getRow() {
    return row;
  }

  public void setRow(BigDecimal row) {
    this.row = row;
  }


  public CreateBlockRequest sizeX(BigDecimal sizeX) {
    this.sizeX = sizeX;
    return this;
  }

  /**
   * Get sizeX
   * @return sizeX
   */
  @javax.annotation.Nullable
  public BigDecimal getSizeX() {
    return sizeX;
  }

  public void setSizeX(BigDecimal sizeX) {
    this.sizeX = sizeX;
  }


  public CreateBlockRequest sizeY(BigDecimal sizeY) {
    this.sizeY = sizeY;
    return this;
  }

  /**
   * Get sizeY
   * @return sizeY
   */
  @javax.annotation.Nullable
  public BigDecimal getSizeY() {
    return sizeY;
  }

  public void setSizeY(BigDecimal sizeY) {
    this.sizeY = sizeY;
  }


  public CreateBlockRequest visualType(String visualType) {
    this.visualType = visualType;
    return this;
  }

  /**
   * Get visualType
   * @return visualType
   */
  @javax.annotation.Nullable
  public String getVisualType() {
    return visualType;
  }

  public void setVisualType(String visualType) {
    this.visualType = visualType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateBlockRequest createBlockRequest = (CreateBlockRequest) o;
    return Objects.equals(this.blockFeeds, createBlockRequest.blockFeeds) &&
        Objects.equals(this.column, createBlockRequest.column) &&
        Objects.equals(this.dashboardId, createBlockRequest.dashboardId) &&
        Objects.equals(this.description, createBlockRequest.description) &&
        Objects.equals(this.key, createBlockRequest.key) &&
        Objects.equals(this.name, createBlockRequest.name) &&
        Objects.equals(this.properties, createBlockRequest.properties) &&
        Objects.equals(this.row, createBlockRequest.row) &&
        Objects.equals(this.sizeX, createBlockRequest.sizeX) &&
        Objects.equals(this.sizeY, createBlockRequest.sizeY) &&
        Objects.equals(this.visualType, createBlockRequest.visualType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockFeeds, column, dashboardId, description, key, name, properties, row, sizeX, sizeY, visualType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateBlockRequest {\n");
    sb.append("    blockFeeds: ").append(toIndentedString(blockFeeds)).append("\n");
    sb.append("    column: ").append(toIndentedString(column)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("    sizeX: ").append(toIndentedString(sizeX)).append("\n");
    sb.append("    sizeY: ").append(toIndentedString(sizeY)).append("\n");
    sb.append("    visualType: ").append(toIndentedString(visualType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("block_feeds");
    openapiFields.add("column");
    openapiFields.add("dashboard_id");
    openapiFields.add("description");
    openapiFields.add("key");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("row");
    openapiFields.add("size_x");
    openapiFields.add("size_y");
    openapiFields.add("visual_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateBlockRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateBlockRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateBlockRequest is not found in the empty JSON string", CreateBlockRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateBlockRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateBlockRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("block_feeds") != null && !jsonObj.get("block_feeds").isJsonNull()) {
        JsonArray jsonArrayblockFeeds = jsonObj.getAsJsonArray("block_feeds");
        if (jsonArrayblockFeeds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("block_feeds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `block_feeds` to be an array in the JSON string but got `%s`", jsonObj.get("block_feeds").toString()));
          }

          // validate the optional field `block_feeds` (array)
          for (int i = 0; i < jsonArrayblockFeeds.size(); i++) {
            CreateBlockRequestBlockFeedsInner.validateJsonElement(jsonArrayblockFeeds.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("visual_type") != null && !jsonObj.get("visual_type").isJsonNull()) && !jsonObj.get("visual_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visual_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visual_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateBlockRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateBlockRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateBlockRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateBlockRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateBlockRequest>() {
           @Override
           public void write(JsonWriter out, CreateBlockRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateBlockRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateBlockRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateBlockRequest
   * @throws IOException if the JSON string is invalid with respect to CreateBlockRequest
   */
  public static CreateBlockRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateBlockRequest.class);
  }

  /**
   * Convert an instance of CreateBlockRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

