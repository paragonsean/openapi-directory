# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_block_request_block_feeds_inner import CreateBlockRequestBlockFeedsInner
from openapi_server import util


class CreateBlockRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_feeds: List[CreateBlockRequestBlockFeedsInner]=None, column: float=None, dashboard_id: float=None, description: str=None, key: str=None, name: str=None, properties: object=None, row: float=None, size_x: float=None, size_y: float=None, visual_type: str=None):
        """CreateBlockRequest - a model defined in OpenAPI

        :param block_feeds: The block_feeds of this CreateBlockRequest.
        :param column: The column of this CreateBlockRequest.
        :param dashboard_id: The dashboard_id of this CreateBlockRequest.
        :param description: The description of this CreateBlockRequest.
        :param key: The key of this CreateBlockRequest.
        :param name: The name of this CreateBlockRequest.
        :param properties: The properties of this CreateBlockRequest.
        :param row: The row of this CreateBlockRequest.
        :param size_x: The size_x of this CreateBlockRequest.
        :param size_y: The size_y of this CreateBlockRequest.
        :param visual_type: The visual_type of this CreateBlockRequest.
        """
        self.openapi_types = {
            'block_feeds': List[CreateBlockRequestBlockFeedsInner],
            'column': float,
            'dashboard_id': float,
            'description': str,
            'key': str,
            'name': str,
            'properties': object,
            'row': float,
            'size_x': float,
            'size_y': float,
            'visual_type': str
        }

        self.attribute_map = {
            'block_feeds': 'block_feeds',
            'column': 'column',
            'dashboard_id': 'dashboard_id',
            'description': 'description',
            'key': 'key',
            'name': 'name',
            'properties': 'properties',
            'row': 'row',
            'size_x': 'size_x',
            'size_y': 'size_y',
            'visual_type': 'visual_type'
        }

        self._block_feeds = block_feeds
        self._column = column
        self._dashboard_id = dashboard_id
        self._description = description
        self._key = key
        self._name = name
        self._properties = properties
        self._row = row
        self._size_x = size_x
        self._size_y = size_y
        self._visual_type = visual_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBlockRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createBlock_request of this CreateBlockRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_feeds(self):
        """Gets the block_feeds of this CreateBlockRequest.


        :return: The block_feeds of this CreateBlockRequest.
        :rtype: List[CreateBlockRequestBlockFeedsInner]
        """
        return self._block_feeds

    @block_feeds.setter
    def block_feeds(self, block_feeds):
        """Sets the block_feeds of this CreateBlockRequest.


        :param block_feeds: The block_feeds of this CreateBlockRequest.
        :type block_feeds: List[CreateBlockRequestBlockFeedsInner]
        """

        self._block_feeds = block_feeds

    @property
    def column(self):
        """Gets the column of this CreateBlockRequest.


        :return: The column of this CreateBlockRequest.
        :rtype: float
        """
        return self._column

    @column.setter
    def column(self, column):
        """Sets the column of this CreateBlockRequest.


        :param column: The column of this CreateBlockRequest.
        :type column: float
        """

        self._column = column

    @property
    def dashboard_id(self):
        """Gets the dashboard_id of this CreateBlockRequest.


        :return: The dashboard_id of this CreateBlockRequest.
        :rtype: float
        """
        return self._dashboard_id

    @dashboard_id.setter
    def dashboard_id(self, dashboard_id):
        """Sets the dashboard_id of this CreateBlockRequest.


        :param dashboard_id: The dashboard_id of this CreateBlockRequest.
        :type dashboard_id: float
        """

        self._dashboard_id = dashboard_id

    @property
    def description(self):
        """Gets the description of this CreateBlockRequest.


        :return: The description of this CreateBlockRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateBlockRequest.


        :param description: The description of this CreateBlockRequest.
        :type description: str
        """

        self._description = description

    @property
    def key(self):
        """Gets the key of this CreateBlockRequest.


        :return: The key of this CreateBlockRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this CreateBlockRequest.


        :param key: The key of this CreateBlockRequest.
        :type key: str
        """

        self._key = key

    @property
    def name(self):
        """Gets the name of this CreateBlockRequest.


        :return: The name of this CreateBlockRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBlockRequest.


        :param name: The name of this CreateBlockRequest.
        :type name: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this CreateBlockRequest.


        :return: The properties of this CreateBlockRequest.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this CreateBlockRequest.


        :param properties: The properties of this CreateBlockRequest.
        :type properties: object
        """

        self._properties = properties

    @property
    def row(self):
        """Gets the row of this CreateBlockRequest.


        :return: The row of this CreateBlockRequest.
        :rtype: float
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this CreateBlockRequest.


        :param row: The row of this CreateBlockRequest.
        :type row: float
        """

        self._row = row

    @property
    def size_x(self):
        """Gets the size_x of this CreateBlockRequest.


        :return: The size_x of this CreateBlockRequest.
        :rtype: float
        """
        return self._size_x

    @size_x.setter
    def size_x(self, size_x):
        """Sets the size_x of this CreateBlockRequest.


        :param size_x: The size_x of this CreateBlockRequest.
        :type size_x: float
        """

        self._size_x = size_x

    @property
    def size_y(self):
        """Gets the size_y of this CreateBlockRequest.


        :return: The size_y of this CreateBlockRequest.
        :rtype: float
        """
        return self._size_y

    @size_y.setter
    def size_y(self, size_y):
        """Sets the size_y of this CreateBlockRequest.


        :param size_y: The size_y of this CreateBlockRequest.
        :type size_y: float
        """

        self._size_y = size_y

    @property
    def visual_type(self):
        """Gets the visual_type of this CreateBlockRequest.


        :return: The visual_type of this CreateBlockRequest.
        :rtype: str
        """
        return self._visual_type

    @visual_type.setter
    def visual_type(self, visual_type):
        """Sets the visual_type of this CreateBlockRequest.


        :param visual_type: The visual_type of this CreateBlockRequest.
        :type visual_type: str
        """

        self._visual_type = visual_type
