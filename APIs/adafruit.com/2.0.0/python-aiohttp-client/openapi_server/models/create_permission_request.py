# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePermissionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str='r', scope: str='public', scope_value: str=None):
        """CreatePermissionRequest - a model defined in OpenAPI

        :param mode: The mode of this CreatePermissionRequest.
        :param scope: The scope of this CreatePermissionRequest.
        :param scope_value: The scope_value of this CreatePermissionRequest.
        """
        self.openapi_types = {
            'mode': str,
            'scope': str,
            'scope_value': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'scope': 'scope',
            'scope_value': 'scope_value'
        }

        self._mode = mode
        self._scope = scope
        self._scope_value = scope_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePermissionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createPermission_request of this CreatePermissionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this CreatePermissionRequest.


        :return: The mode of this CreatePermissionRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this CreatePermissionRequest.


        :param mode: The mode of this CreatePermissionRequest.
        :type mode: str
        """
        allowed_values = ["r", "w", "rw"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def scope(self):
        """Gets the scope of this CreatePermissionRequest.


        :return: The scope of this CreatePermissionRequest.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this CreatePermissionRequest.


        :param scope: The scope of this CreatePermissionRequest.
        :type scope: str
        """
        allowed_values = ["secret", "public", "user", "organization"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def scope_value(self):
        """Gets the scope_value of this CreatePermissionRequest.


        :return: The scope_value of this CreatePermissionRequest.
        :rtype: str
        """
        return self._scope_value

    @scope_value.setter
    def scope_value(self, scope_value):
        """Sets the scope_value of this CreatePermissionRequest.


        :param scope_value: The scope_value of this CreatePermissionRequest.
        :type scope_value: str
        """

        self._scope_value = scope_value
