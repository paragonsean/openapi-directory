# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data import Data
from openapi_server import util


class FeedDetailsData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, first: Dict[str, Data]=None, last: Dict[str, Data]=None):
        """FeedDetailsData - a model defined in OpenAPI

        :param count: The count of this FeedDetailsData.
        :param first: The first of this FeedDetailsData.
        :param last: The last of this FeedDetailsData.
        """
        self.openapi_types = {
            'count': int,
            'first': Dict[str, Data],
            'last': Dict[str, Data]
        }

        self.attribute_map = {
            'count': 'count',
            'first': 'first',
            'last': 'last'
        }

        self._count = count
        self._first = first
        self._last = last

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedDetailsData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feed_details_data of this FeedDetailsData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this FeedDetailsData.

        Number of data points stored by this feed.

        :return: The count of this FeedDetailsData.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FeedDetailsData.

        Number of data points stored by this feed.

        :param count: The count of this FeedDetailsData.
        :type count: int
        """

        self._count = count

    @property
    def first(self):
        """Gets the first of this FeedDetailsData.


        :return: The first of this FeedDetailsData.
        :rtype: Dict[str, Data]
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this FeedDetailsData.


        :param first: The first of this FeedDetailsData.
        :type first: Dict[str, Data]
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this FeedDetailsData.


        :return: The last of this FeedDetailsData.
        :rtype: Dict[str, Data]
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this FeedDetailsData.


        :param last: The last of this FeedDetailsData.
        :type last: Dict[str, Data]
        """

        self._last = last
