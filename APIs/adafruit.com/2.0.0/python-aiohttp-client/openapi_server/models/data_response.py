# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at: str=None, created_at: str=None, created_epoch: float=None, ele: float=None, expiration: str=None, feed_id: float=None, group_id: float=None, id: str=None, lat: float=None, lon: float=None, updated_at: str=None, value: str=None):
        """DataResponse - a model defined in OpenAPI

        :param completed_at: The completed_at of this DataResponse.
        :param created_at: The created_at of this DataResponse.
        :param created_epoch: The created_epoch of this DataResponse.
        :param ele: The ele of this DataResponse.
        :param expiration: The expiration of this DataResponse.
        :param feed_id: The feed_id of this DataResponse.
        :param group_id: The group_id of this DataResponse.
        :param id: The id of this DataResponse.
        :param lat: The lat of this DataResponse.
        :param lon: The lon of this DataResponse.
        :param updated_at: The updated_at of this DataResponse.
        :param value: The value of this DataResponse.
        """
        self.openapi_types = {
            'completed_at': str,
            'created_at': str,
            'created_epoch': float,
            'ele': float,
            'expiration': str,
            'feed_id': float,
            'group_id': float,
            'id': str,
            'lat': float,
            'lon': float,
            'updated_at': str,
            'value': str
        }

        self.attribute_map = {
            'completed_at': 'completed_at',
            'created_at': 'created_at',
            'created_epoch': 'created_epoch',
            'ele': 'ele',
            'expiration': 'expiration',
            'feed_id': 'feed_id',
            'group_id': 'group_id',
            'id': 'id',
            'lat': 'lat',
            'lon': 'lon',
            'updated_at': 'updated_at',
            'value': 'value'
        }

        self._completed_at = completed_at
        self._created_at = created_at
        self._created_epoch = created_epoch
        self._ele = ele
        self._expiration = expiration
        self._feed_id = feed_id
        self._group_id = group_id
        self._id = id
        self._lat = lat
        self._lon = lon
        self._updated_at = updated_at
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataResponse of this DataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self):
        """Gets the completed_at of this DataResponse.


        :return: The completed_at of this DataResponse.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this DataResponse.


        :param completed_at: The completed_at of this DataResponse.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this DataResponse.


        :return: The created_at of this DataResponse.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataResponse.


        :param created_at: The created_at of this DataResponse.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def created_epoch(self):
        """Gets the created_epoch of this DataResponse.


        :return: The created_epoch of this DataResponse.
        :rtype: float
        """
        return self._created_epoch

    @created_epoch.setter
    def created_epoch(self, created_epoch):
        """Sets the created_epoch of this DataResponse.


        :param created_epoch: The created_epoch of this DataResponse.
        :type created_epoch: float
        """

        self._created_epoch = created_epoch

    @property
    def ele(self):
        """Gets the ele of this DataResponse.


        :return: The ele of this DataResponse.
        :rtype: float
        """
        return self._ele

    @ele.setter
    def ele(self, ele):
        """Sets the ele of this DataResponse.


        :param ele: The ele of this DataResponse.
        :type ele: float
        """

        self._ele = ele

    @property
    def expiration(self):
        """Gets the expiration of this DataResponse.


        :return: The expiration of this DataResponse.
        :rtype: str
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this DataResponse.


        :param expiration: The expiration of this DataResponse.
        :type expiration: str
        """

        self._expiration = expiration

    @property
    def feed_id(self):
        """Gets the feed_id of this DataResponse.


        :return: The feed_id of this DataResponse.
        :rtype: float
        """
        return self._feed_id

    @feed_id.setter
    def feed_id(self, feed_id):
        """Sets the feed_id of this DataResponse.


        :param feed_id: The feed_id of this DataResponse.
        :type feed_id: float
        """

        self._feed_id = feed_id

    @property
    def group_id(self):
        """Gets the group_id of this DataResponse.


        :return: The group_id of this DataResponse.
        :rtype: float
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this DataResponse.


        :param group_id: The group_id of this DataResponse.
        :type group_id: float
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this DataResponse.


        :return: The id of this DataResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataResponse.


        :param id: The id of this DataResponse.
        :type id: str
        """

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this DataResponse.


        :return: The lat of this DataResponse.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this DataResponse.


        :param lat: The lat of this DataResponse.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this DataResponse.


        :return: The lon of this DataResponse.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this DataResponse.


        :param lon: The lon of this DataResponse.
        :type lon: float
        """

        self._lon = lon

    @property
    def updated_at(self):
        """Gets the updated_at of this DataResponse.


        :return: The updated_at of this DataResponse.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataResponse.


        :param updated_at: The updated_at of this DataResponse.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def value(self):
        """Gets the value of this DataResponse.


        :return: The value of this DataResponse.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DataResponse.


        :param value: The value of this DataResponse.
        :type value: str
        """

        self._value = value
