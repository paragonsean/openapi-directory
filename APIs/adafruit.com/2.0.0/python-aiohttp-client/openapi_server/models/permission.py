# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: float=None, model: str='feed', object_id: float=None, scope: str='public', scope_value: str=None, updated_at: str=None, user_id: float=None):
        """Permission - a model defined in OpenAPI

        :param created_at: The created_at of this Permission.
        :param id: The id of this Permission.
        :param model: The model of this Permission.
        :param object_id: The object_id of this Permission.
        :param scope: The scope of this Permission.
        :param scope_value: The scope_value of this Permission.
        :param updated_at: The updated_at of this Permission.
        :param user_id: The user_id of this Permission.
        """
        self.openapi_types = {
            'created_at': str,
            'id': float,
            'model': str,
            'object_id': float,
            'scope': str,
            'scope_value': str,
            'updated_at': str,
            'user_id': float
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'model': 'model',
            'object_id': 'object_id',
            'scope': 'scope',
            'scope_value': 'scope_value',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._created_at = created_at
        self._id = id
        self._model = model
        self._object_id = object_id
        self._scope = scope
        self._scope_value = scope_value
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Permission.


        :return: The created_at of this Permission.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Permission.


        :param created_at: The created_at of this Permission.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Permission.


        :return: The id of this Permission.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permission.


        :param id: The id of this Permission.
        :type id: float
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this Permission.


        :return: The model of this Permission.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this Permission.


        :param model: The model of this Permission.
        :type model: str
        """
        allowed_values = ["feed", "group", "dashboard"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def object_id(self):
        """Gets the object_id of this Permission.


        :return: The object_id of this Permission.
        :rtype: float
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Permission.


        :param object_id: The object_id of this Permission.
        :type object_id: float
        """

        self._object_id = object_id

    @property
    def scope(self):
        """Gets the scope of this Permission.


        :return: The scope of this Permission.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Permission.


        :param scope: The scope of this Permission.
        :type scope: str
        """
        allowed_values = ["secret", "public", "user", "organization"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def scope_value(self):
        """Gets the scope_value of this Permission.


        :return: The scope_value of this Permission.
        :rtype: str
        """
        return self._scope_value

    @scope_value.setter
    def scope_value(self, scope_value):
        """Sets the scope_value of this Permission.


        :param scope_value: The scope_value of this Permission.
        :type scope_value: str
        """

        self._scope_value = scope_value

    @property
    def updated_at(self):
        """Gets the updated_at of this Permission.


        :return: The updated_at of this Permission.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Permission.


        :param updated_at: The updated_at of this Permission.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this Permission.


        :return: The user_id of this Permission.
        :rtype: float
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Permission.


        :param user_id: The user_id of this Permission.
        :type user_id: float
        """

        self._user_id = user_id
