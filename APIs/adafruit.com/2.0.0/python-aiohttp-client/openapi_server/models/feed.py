# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed_details import FeedDetails
from openapi_server.models.shallow_group import ShallowGroup
from openapi_server import util


class Feed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, description: str=None, details: FeedDetails=None, enabled: bool=None, group: Dict[str, ShallowGroup]=None, groups: List[ShallowGroup]=None, history: bool=None, id: float=None, key: str=None, last_value: str=None, license: str=None, name: str=None, status: str=None, status_notify: bool=None, status_timeout: int=None, unit_symbol: str=None, unit_type: str=None, updated_at: str=None, visibility: str='private'):
        """Feed - a model defined in OpenAPI

        :param created_at: The created_at of this Feed.
        :param description: The description of this Feed.
        :param details: The details of this Feed.
        :param enabled: The enabled of this Feed.
        :param group: The group of this Feed.
        :param groups: The groups of this Feed.
        :param history: The history of this Feed.
        :param id: The id of this Feed.
        :param key: The key of this Feed.
        :param last_value: The last_value of this Feed.
        :param license: The license of this Feed.
        :param name: The name of this Feed.
        :param status: The status of this Feed.
        :param status_notify: The status_notify of this Feed.
        :param status_timeout: The status_timeout of this Feed.
        :param unit_symbol: The unit_symbol of this Feed.
        :param unit_type: The unit_type of this Feed.
        :param updated_at: The updated_at of this Feed.
        :param visibility: The visibility of this Feed.
        """
        self.openapi_types = {
            'created_at': str,
            'description': str,
            'details': FeedDetails,
            'enabled': bool,
            'group': Dict[str, ShallowGroup],
            'groups': List[ShallowGroup],
            'history': bool,
            'id': float,
            'key': str,
            'last_value': str,
            'license': str,
            'name': str,
            'status': str,
            'status_notify': bool,
            'status_timeout': int,
            'unit_symbol': str,
            'unit_type': str,
            'updated_at': str,
            'visibility': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'details': 'details',
            'enabled': 'enabled',
            'group': 'group',
            'groups': 'groups',
            'history': 'history',
            'id': 'id',
            'key': 'key',
            'last_value': 'last_value',
            'license': 'license',
            'name': 'name',
            'status': 'status',
            'status_notify': 'status_notify',
            'status_timeout': 'status_timeout',
            'unit_symbol': 'unit_symbol',
            'unit_type': 'unit_type',
            'updated_at': 'updated_at',
            'visibility': 'visibility'
        }

        self._created_at = created_at
        self._description = description
        self._details = details
        self._enabled = enabled
        self._group = group
        self._groups = groups
        self._history = history
        self._id = id
        self._key = key
        self._last_value = last_value
        self._license = license
        self._name = name
        self._status = status
        self._status_notify = status_notify
        self._status_timeout = status_timeout
        self._unit_symbol = unit_symbol
        self._unit_type = unit_type
        self._updated_at = updated_at
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feed of this Feed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Feed.


        :return: The created_at of this Feed.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Feed.


        :param created_at: The created_at of this Feed.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Feed.


        :return: The description of this Feed.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Feed.


        :param description: The description of this Feed.
        :type description: str
        """

        self._description = description

    @property
    def details(self):
        """Gets the details of this Feed.


        :return: The details of this Feed.
        :rtype: FeedDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Feed.


        :param details: The details of this Feed.
        :type details: FeedDetails
        """

        self._details = details

    @property
    def enabled(self):
        """Gets the enabled of this Feed.


        :return: The enabled of this Feed.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Feed.


        :param enabled: The enabled of this Feed.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def group(self):
        """Gets the group of this Feed.


        :return: The group of this Feed.
        :rtype: Dict[str, ShallowGroup]
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Feed.


        :param group: The group of this Feed.
        :type group: Dict[str, ShallowGroup]
        """

        self._group = group

    @property
    def groups(self):
        """Gets the groups of this Feed.


        :return: The groups of this Feed.
        :rtype: List[ShallowGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this Feed.


        :param groups: The groups of this Feed.
        :type groups: List[ShallowGroup]
        """

        self._groups = groups

    @property
    def history(self):
        """Gets the history of this Feed.


        :return: The history of this Feed.
        :rtype: bool
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this Feed.


        :param history: The history of this Feed.
        :type history: bool
        """

        self._history = history

    @property
    def id(self):
        """Gets the id of this Feed.


        :return: The id of this Feed.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feed.


        :param id: The id of this Feed.
        :type id: float
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this Feed.


        :return: The key of this Feed.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Feed.


        :param key: The key of this Feed.
        :type key: str
        """

        self._key = key

    @property
    def last_value(self):
        """Gets the last_value of this Feed.


        :return: The last_value of this Feed.
        :rtype: str
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this Feed.


        :param last_value: The last_value of this Feed.
        :type last_value: str
        """

        self._last_value = last_value

    @property
    def license(self):
        """Gets the license of this Feed.


        :return: The license of this Feed.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Feed.


        :param license: The license of this Feed.
        :type license: str
        """

        self._license = license

    @property
    def name(self):
        """Gets the name of this Feed.


        :return: The name of this Feed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Feed.


        :param name: The name of this Feed.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Feed.


        :return: The status of this Feed.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Feed.


        :param status: The status of this Feed.
        :type status: str
        """

        self._status = status

    @property
    def status_notify(self):
        """Gets the status_notify of this Feed.

        Is status notification active?

        :return: The status_notify of this Feed.
        :rtype: bool
        """
        return self._status_notify

    @status_notify.setter
    def status_notify(self, status_notify):
        """Sets the status_notify of this Feed.

        Is status notification active?

        :param status_notify: The status_notify of this Feed.
        :type status_notify: bool
        """

        self._status_notify = status_notify

    @property
    def status_timeout(self):
        """Gets the status_timeout of this Feed.

        Status notification timeout in minutes.

        :return: The status_timeout of this Feed.
        :rtype: int
        """
        return self._status_timeout

    @status_timeout.setter
    def status_timeout(self, status_timeout):
        """Sets the status_timeout of this Feed.

        Status notification timeout in minutes.

        :param status_timeout: The status_timeout of this Feed.
        :type status_timeout: int
        """

        self._status_timeout = status_timeout

    @property
    def unit_symbol(self):
        """Gets the unit_symbol of this Feed.


        :return: The unit_symbol of this Feed.
        :rtype: str
        """
        return self._unit_symbol

    @unit_symbol.setter
    def unit_symbol(self, unit_symbol):
        """Sets the unit_symbol of this Feed.


        :param unit_symbol: The unit_symbol of this Feed.
        :type unit_symbol: str
        """

        self._unit_symbol = unit_symbol

    @property
    def unit_type(self):
        """Gets the unit_type of this Feed.


        :return: The unit_type of this Feed.
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this Feed.


        :param unit_type: The unit_type of this Feed.
        :type unit_type: str
        """

        self._unit_type = unit_type

    @property
    def updated_at(self):
        """Gets the updated_at of this Feed.


        :return: The updated_at of this Feed.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Feed.


        :param updated_at: The updated_at of this Feed.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def visibility(self):
        """Gets the visibility of this Feed.


        :return: The visibility of this Feed.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Feed.


        :param visibility: The visibility of this Feed.
        :type visibility: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
