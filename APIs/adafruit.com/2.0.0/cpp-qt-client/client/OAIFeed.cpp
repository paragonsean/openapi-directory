/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed::OAIFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed::OAIFeed() {
    this->initializeModel();
}

OAIFeed::~OAIFeed() {}

void OAIFeed::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_groups_isSet = false;
    m_groups_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_last_value_isSet = false;
    m_last_value_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_notify_isSet = false;
    m_status_notify_isValid = false;

    m_status_timeout_isSet = false;
    m_status_timeout_isValid = false;

    m_unit_symbol_isSet = false;
    m_unit_symbol_isValid = false;

    m_unit_type_isSet = false;
    m_unit_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_groups_isValid = ::OpenAPI::fromJsonValue(m_groups, json[QString("groups")]);
    m_groups_isSet = !json[QString("groups")].isNull() && m_groups_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_last_value_isValid = ::OpenAPI::fromJsonValue(m_last_value, json[QString("last_value")]);
    m_last_value_isSet = !json[QString("last_value")].isNull() && m_last_value_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_notify_isValid = ::OpenAPI::fromJsonValue(m_status_notify, json[QString("status_notify")]);
    m_status_notify_isSet = !json[QString("status_notify")].isNull() && m_status_notify_isValid;

    m_status_timeout_isValid = ::OpenAPI::fromJsonValue(m_status_timeout, json[QString("status_timeout")]);
    m_status_timeout_isSet = !json[QString("status_timeout")].isNull() && m_status_timeout_isValid;

    m_unit_symbol_isValid = ::OpenAPI::fromJsonValue(m_unit_symbol, json[QString("unit_symbol")]);
    m_unit_symbol_isSet = !json[QString("unit_symbol")].isNull() && m_unit_symbol_isValid;

    m_unit_type_isValid = ::OpenAPI::fromJsonValue(m_unit_type, json[QString("unit_type")]);
    m_unit_type_isSet = !json[QString("unit_type")].isNull() && m_unit_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_group.size() > 0) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_groups.size() > 0) {
        obj.insert(QString("groups"), ::OpenAPI::toJsonValue(m_groups));
    }
    if (m_history_isSet) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_last_value_isSet) {
        obj.insert(QString("last_value"), ::OpenAPI::toJsonValue(m_last_value));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_notify_isSet) {
        obj.insert(QString("status_notify"), ::OpenAPI::toJsonValue(m_status_notify));
    }
    if (m_status_timeout_isSet) {
        obj.insert(QString("status_timeout"), ::OpenAPI::toJsonValue(m_status_timeout));
    }
    if (m_unit_symbol_isSet) {
        obj.insert(QString("unit_symbol"), ::OpenAPI::toJsonValue(m_unit_symbol));
    }
    if (m_unit_type_isSet) {
        obj.insert(QString("unit_type"), ::OpenAPI::toJsonValue(m_unit_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIFeed::getCreatedAt() const {
    return m_created_at;
}
void OAIFeed::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFeed::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFeed::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIFeed::getDescription() const {
    return m_description;
}
void OAIFeed::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFeed::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFeed::is_description_Valid() const{
    return m_description_isValid;
}

OAIFeed_details OAIFeed::getDetails() const {
    return m_details;
}
void OAIFeed::setDetails(const OAIFeed_details &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIFeed::is_details_Set() const{
    return m_details_isSet;
}

bool OAIFeed::is_details_Valid() const{
    return m_details_isValid;
}

bool OAIFeed::isEnabled() const {
    return m_enabled;
}
void OAIFeed::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIFeed::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIFeed::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QMap<QString, OAIShallowGroup> OAIFeed::getGroup() const {
    return m_group;
}
void OAIFeed::setGroup(const QMap<QString, OAIShallowGroup> &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIFeed::is_group_Set() const{
    return m_group_isSet;
}

bool OAIFeed::is_group_Valid() const{
    return m_group_isValid;
}

QList<OAIShallowGroup> OAIFeed::getGroups() const {
    return m_groups;
}
void OAIFeed::setGroups(const QList<OAIShallowGroup> &groups) {
    m_groups = groups;
    m_groups_isSet = true;
}

bool OAIFeed::is_groups_Set() const{
    return m_groups_isSet;
}

bool OAIFeed::is_groups_Valid() const{
    return m_groups_isValid;
}

bool OAIFeed::isHistory() const {
    return m_history;
}
void OAIFeed::setHistory(const bool &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIFeed::is_history_Set() const{
    return m_history_isSet;
}

bool OAIFeed::is_history_Valid() const{
    return m_history_isValid;
}

double OAIFeed::getId() const {
    return m_id;
}
void OAIFeed::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeed::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIFeed::getKey() const {
    return m_key;
}
void OAIFeed::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFeed::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFeed::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFeed::getLastValue() const {
    return m_last_value;
}
void OAIFeed::setLastValue(const QString &last_value) {
    m_last_value = last_value;
    m_last_value_isSet = true;
}

bool OAIFeed::is_last_value_Set() const{
    return m_last_value_isSet;
}

bool OAIFeed::is_last_value_Valid() const{
    return m_last_value_isValid;
}

QString OAIFeed::getLicense() const {
    return m_license;
}
void OAIFeed::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIFeed::is_license_Set() const{
    return m_license_isSet;
}

bool OAIFeed::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIFeed::getName() const {
    return m_name;
}
void OAIFeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeed::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFeed::getStatus() const {
    return m_status;
}
void OAIFeed::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFeed::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFeed::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIFeed::isStatusNotify() const {
    return m_status_notify;
}
void OAIFeed::setStatusNotify(const bool &status_notify) {
    m_status_notify = status_notify;
    m_status_notify_isSet = true;
}

bool OAIFeed::is_status_notify_Set() const{
    return m_status_notify_isSet;
}

bool OAIFeed::is_status_notify_Valid() const{
    return m_status_notify_isValid;
}

qint32 OAIFeed::getStatusTimeout() const {
    return m_status_timeout;
}
void OAIFeed::setStatusTimeout(const qint32 &status_timeout) {
    m_status_timeout = status_timeout;
    m_status_timeout_isSet = true;
}

bool OAIFeed::is_status_timeout_Set() const{
    return m_status_timeout_isSet;
}

bool OAIFeed::is_status_timeout_Valid() const{
    return m_status_timeout_isValid;
}

QString OAIFeed::getUnitSymbol() const {
    return m_unit_symbol;
}
void OAIFeed::setUnitSymbol(const QString &unit_symbol) {
    m_unit_symbol = unit_symbol;
    m_unit_symbol_isSet = true;
}

bool OAIFeed::is_unit_symbol_Set() const{
    return m_unit_symbol_isSet;
}

bool OAIFeed::is_unit_symbol_Valid() const{
    return m_unit_symbol_isValid;
}

QString OAIFeed::getUnitType() const {
    return m_unit_type;
}
void OAIFeed::setUnitType(const QString &unit_type) {
    m_unit_type = unit_type;
    m_unit_type_isSet = true;
}

bool OAIFeed::is_unit_type_Set() const{
    return m_unit_type_isSet;
}

bool OAIFeed::is_unit_type_Valid() const{
    return m_unit_type_isValid;
}

QString OAIFeed::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFeed::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFeed::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFeed::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIFeed::getVisibility() const {
    return m_visibility;
}
void OAIFeed::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIFeed::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIFeed::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_notify_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_symbol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
