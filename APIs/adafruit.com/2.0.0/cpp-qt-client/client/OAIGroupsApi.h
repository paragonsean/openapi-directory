/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateDashboard_request.h"
#include "OAIFeed.h"
#include "OAIGroup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [optional]
    */
    virtual void addFeedToGroup(const QString &group_key, const QString &username, const ::OpenAPI::OptionalParam<QString> &feed_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    */
    virtual void allGroupFeeds(const QString &group_key, const QString &username);

    /**
    * @param[in]  username QString [required]
    */
    virtual void allGroups(const QString &username);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group OAICreateDashboard_request [required]
    */
    virtual void createGroup(const QString &username, const OAICreateDashboard_request &group);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    */
    virtual void destroyGroup(const QString &username, const QString &group_key);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    */
    virtual void getGroup(const QString &username, const QString &group_key);

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [optional]
    */
    virtual void removeFeedFromGroup(const QString &group_key, const QString &username, const ::OpenAPI::OptionalParam<QString> &feed_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  group OAICreateDashboard_request [required]
    */
    virtual void replaceGroup(const QString &username, const QString &group_key, const OAICreateDashboard_request &group);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  group OAICreateDashboard_request [required]
    */
    virtual void updateGroup(const QString &username, const QString &group_key, const OAICreateDashboard_request &group);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFeedToGroupCallback(OAIHttpRequestWorker *worker);
    void allGroupFeedsCallback(OAIHttpRequestWorker *worker);
    void allGroupsCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void destroyGroupCallback(OAIHttpRequestWorker *worker);
    void getGroupCallback(OAIHttpRequestWorker *worker);
    void removeFeedFromGroupCallback(OAIHttpRequestWorker *worker);
    void replaceGroupCallback(OAIHttpRequestWorker *worker);
    void updateGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFeedToGroupSignal(OAIGroup summary);
    void allGroupFeedsSignal(QList<OAIFeed> summary);
    void allGroupsSignal(QList<OAIGroup> summary);
    void createGroupSignal(OAIGroup summary);
    void destroyGroupSignal(QString summary);
    void getGroupSignal(OAIGroup summary);
    void removeFeedFromGroupSignal(OAIGroup summary);
    void replaceGroupSignal(OAIGroup summary);
    void updateGroupSignal(OAIGroup summary);


    void addFeedToGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void allGroupFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeed> summary);
    void allGroupsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGroup> summary);
    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void destroyGroupSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void removeFeedFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void replaceGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void updateGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);

    Q_DECL_DEPRECATED_X("Use addFeedToGroupSignalError() instead")
    void addFeedToGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFeedToGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedsSignalError() instead")
    void allGroupFeedsSignalE(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedsSignalError(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupsSignalError() instead")
    void allGroupsSignalE(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupsSignalError(QList<OAIGroup> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyGroupSignalError() instead")
    void destroyGroupSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyGroupSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalError() instead")
    void getGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFeedFromGroupSignalError() instead")
    void removeFeedFromGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFeedFromGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceGroupSignalError() instead")
    void replaceGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalError() instead")
    void updateGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFeedToGroupSignalErrorFull() instead")
    void addFeedToGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFeedToGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedsSignalErrorFull() instead")
    void allGroupFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupsSignalErrorFull() instead")
    void allGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyGroupSignalErrorFull() instead")
    void destroyGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGroupSignalErrorFull() instead")
    void getGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFeedFromGroupSignalErrorFull() instead")
    void removeFeedFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFeedFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceGroupSignalErrorFull() instead")
    void replaceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalErrorFull() instead")
    void updateGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
