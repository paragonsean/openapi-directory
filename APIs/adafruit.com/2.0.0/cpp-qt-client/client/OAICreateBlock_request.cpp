/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBlock_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBlock_request::OAICreateBlock_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBlock_request::OAICreateBlock_request() {
    this->initializeModel();
}

OAICreateBlock_request::~OAICreateBlock_request() {}

void OAICreateBlock_request::initializeModel() {

    m_block_feeds_isSet = false;
    m_block_feeds_isValid = false;

    m_column_isSet = false;
    m_column_isValid = false;

    m_dashboard_id_isSet = false;
    m_dashboard_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_row_isSet = false;
    m_row_isValid = false;

    m_size_x_isSet = false;
    m_size_x_isValid = false;

    m_size_y_isSet = false;
    m_size_y_isValid = false;

    m_visual_type_isSet = false;
    m_visual_type_isValid = false;
}

void OAICreateBlock_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBlock_request::fromJsonObject(QJsonObject json) {

    m_block_feeds_isValid = ::OpenAPI::fromJsonValue(m_block_feeds, json[QString("block_feeds")]);
    m_block_feeds_isSet = !json[QString("block_feeds")].isNull() && m_block_feeds_isValid;

    m_column_isValid = ::OpenAPI::fromJsonValue(m_column, json[QString("column")]);
    m_column_isSet = !json[QString("column")].isNull() && m_column_isValid;

    m_dashboard_id_isValid = ::OpenAPI::fromJsonValue(m_dashboard_id, json[QString("dashboard_id")]);
    m_dashboard_id_isSet = !json[QString("dashboard_id")].isNull() && m_dashboard_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_row_isValid = ::OpenAPI::fromJsonValue(m_row, json[QString("row")]);
    m_row_isSet = !json[QString("row")].isNull() && m_row_isValid;

    m_size_x_isValid = ::OpenAPI::fromJsonValue(m_size_x, json[QString("size_x")]);
    m_size_x_isSet = !json[QString("size_x")].isNull() && m_size_x_isValid;

    m_size_y_isValid = ::OpenAPI::fromJsonValue(m_size_y, json[QString("size_y")]);
    m_size_y_isSet = !json[QString("size_y")].isNull() && m_size_y_isValid;

    m_visual_type_isValid = ::OpenAPI::fromJsonValue(m_visual_type, json[QString("visual_type")]);
    m_visual_type_isSet = !json[QString("visual_type")].isNull() && m_visual_type_isValid;
}

QString OAICreateBlock_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBlock_request::asJsonObject() const {
    QJsonObject obj;
    if (m_block_feeds.size() > 0) {
        obj.insert(QString("block_feeds"), ::OpenAPI::toJsonValue(m_block_feeds));
    }
    if (m_column_isSet) {
        obj.insert(QString("column"), ::OpenAPI::toJsonValue(m_column));
    }
    if (m_dashboard_id_isSet) {
        obj.insert(QString("dashboard_id"), ::OpenAPI::toJsonValue(m_dashboard_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_properties_isSet) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_row_isSet) {
        obj.insert(QString("row"), ::OpenAPI::toJsonValue(m_row));
    }
    if (m_size_x_isSet) {
        obj.insert(QString("size_x"), ::OpenAPI::toJsonValue(m_size_x));
    }
    if (m_size_y_isSet) {
        obj.insert(QString("size_y"), ::OpenAPI::toJsonValue(m_size_y));
    }
    if (m_visual_type_isSet) {
        obj.insert(QString("visual_type"), ::OpenAPI::toJsonValue(m_visual_type));
    }
    return obj;
}

QList<OAICreateBlock_request_block_feeds_inner> OAICreateBlock_request::getBlockFeeds() const {
    return m_block_feeds;
}
void OAICreateBlock_request::setBlockFeeds(const QList<OAICreateBlock_request_block_feeds_inner> &block_feeds) {
    m_block_feeds = block_feeds;
    m_block_feeds_isSet = true;
}

bool OAICreateBlock_request::is_block_feeds_Set() const{
    return m_block_feeds_isSet;
}

bool OAICreateBlock_request::is_block_feeds_Valid() const{
    return m_block_feeds_isValid;
}

double OAICreateBlock_request::getColumn() const {
    return m_column;
}
void OAICreateBlock_request::setColumn(const double &column) {
    m_column = column;
    m_column_isSet = true;
}

bool OAICreateBlock_request::is_column_Set() const{
    return m_column_isSet;
}

bool OAICreateBlock_request::is_column_Valid() const{
    return m_column_isValid;
}

double OAICreateBlock_request::getDashboardId() const {
    return m_dashboard_id;
}
void OAICreateBlock_request::setDashboardId(const double &dashboard_id) {
    m_dashboard_id = dashboard_id;
    m_dashboard_id_isSet = true;
}

bool OAICreateBlock_request::is_dashboard_id_Set() const{
    return m_dashboard_id_isSet;
}

bool OAICreateBlock_request::is_dashboard_id_Valid() const{
    return m_dashboard_id_isValid;
}

QString OAICreateBlock_request::getDescription() const {
    return m_description;
}
void OAICreateBlock_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateBlock_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateBlock_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateBlock_request::getKey() const {
    return m_key;
}
void OAICreateBlock_request::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICreateBlock_request::is_key_Set() const{
    return m_key_isSet;
}

bool OAICreateBlock_request::is_key_Valid() const{
    return m_key_isValid;
}

QString OAICreateBlock_request::getName() const {
    return m_name;
}
void OAICreateBlock_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateBlock_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateBlock_request::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAICreateBlock_request::getProperties() const {
    return m_properties;
}
void OAICreateBlock_request::setProperties(const OAIObject &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAICreateBlock_request::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAICreateBlock_request::is_properties_Valid() const{
    return m_properties_isValid;
}

double OAICreateBlock_request::getRow() const {
    return m_row;
}
void OAICreateBlock_request::setRow(const double &row) {
    m_row = row;
    m_row_isSet = true;
}

bool OAICreateBlock_request::is_row_Set() const{
    return m_row_isSet;
}

bool OAICreateBlock_request::is_row_Valid() const{
    return m_row_isValid;
}

double OAICreateBlock_request::getSizeX() const {
    return m_size_x;
}
void OAICreateBlock_request::setSizeX(const double &size_x) {
    m_size_x = size_x;
    m_size_x_isSet = true;
}

bool OAICreateBlock_request::is_size_x_Set() const{
    return m_size_x_isSet;
}

bool OAICreateBlock_request::is_size_x_Valid() const{
    return m_size_x_isValid;
}

double OAICreateBlock_request::getSizeY() const {
    return m_size_y;
}
void OAICreateBlock_request::setSizeY(const double &size_y) {
    m_size_y = size_y;
    m_size_y_isSet = true;
}

bool OAICreateBlock_request::is_size_y_Set() const{
    return m_size_y_isSet;
}

bool OAICreateBlock_request::is_size_y_Valid() const{
    return m_size_y_isValid;
}

QString OAICreateBlock_request::getVisualType() const {
    return m_visual_type;
}
void OAICreateBlock_request::setVisualType(const QString &visual_type) {
    m_visual_type = visual_type;
    m_visual_type_isSet = true;
}

bool OAICreateBlock_request::is_visual_type_Set() const{
    return m_visual_type_isSet;
}

bool OAICreateBlock_request::is_visual_type_Valid() const{
    return m_visual_type_isValid;
}

bool OAICreateBlock_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_feeds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_x_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_y_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visual_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBlock_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
