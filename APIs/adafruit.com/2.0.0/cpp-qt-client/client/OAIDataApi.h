/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataApi_H
#define OAI_OAIDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChartData_200_response.h"
#include "OAICreateData_request.h"
#include "OAICreateGroupData_request.h"
#include "OAICreateWebhookFeedData_request.h"
#include "OAIData.h"
#include "OAIDataResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataApi : public QObject {
    Q_OBJECT

public:
    OAIDataApi(const int timeOut = 0);
    ~OAIDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  include QString [optional]
    */
    virtual void allData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void allGroupFeedData(const QString &username, const QString &group_key, const QString &feed_key, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  data QList<OAICreateData_request> [required]
    */
    virtual void batchCreateData(const QString &username, const QString &feed_key, const QList<OAICreateData_request> &data);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  data QList<OAICreateData_request> [required]
    */
    virtual void batchCreateGroupFeedData(const QString &username, const QString &group_key, const QString &feed_key, const QList<OAICreateData_request> &data);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  resolution qint32 [optional]
    * @param[in]  hours qint32 [optional]
    */
    virtual void chartData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &resolution = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &hours = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  datum OAICreateData_request [required]
    */
    virtual void createData(const QString &username, const QString &feed_key, const OAICreateData_request &datum);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  group_feed_data OAICreateGroupData_request [required]
    */
    virtual void createGroupData(const QString &username, const QString &group_key, const OAICreateGroupData_request &group_feed_data);

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  datum OAICreateData_request [required]
    */
    virtual void createGroupFeedData(const QString &username, const QString &group_key, const QString &feed_key, const OAICreateData_request &datum);


    virtual void createRawWebhookFeedData();

    /**
    * @param[in]  payload OAICreateWebhookFeedData_request [required]
    */
    virtual void createWebhookFeedData(const OAICreateWebhookFeedData_request &payload);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  id QString [required]
    */
    virtual void destroyData(const QString &username, const QString &feed_key, const QString &id);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void firstData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void getData(const QString &username, const QString &feed_key, const QString &id, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void lastData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void nextData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  include QString [optional]
    */
    virtual void previousData(const QString &username, const QString &feed_key, const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  datum OAICreateData_request [required]
    */
    virtual void replaceData(const QString &username, const QString &feed_key, const QString &id, const OAICreateData_request &datum);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    */
    virtual void retainData(const QString &username, const QString &feed_key);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  id QString [required]
    * @param[in]  datum OAICreateData_request [required]
    */
    virtual void updateData(const QString &username, const QString &feed_key, const QString &id, const OAICreateData_request &datum);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allDataCallback(OAIHttpRequestWorker *worker);
    void allGroupFeedDataCallback(OAIHttpRequestWorker *worker);
    void batchCreateDataCallback(OAIHttpRequestWorker *worker);
    void batchCreateGroupFeedDataCallback(OAIHttpRequestWorker *worker);
    void chartDataCallback(OAIHttpRequestWorker *worker);
    void createDataCallback(OAIHttpRequestWorker *worker);
    void createGroupDataCallback(OAIHttpRequestWorker *worker);
    void createGroupFeedDataCallback(OAIHttpRequestWorker *worker);
    void createRawWebhookFeedDataCallback(OAIHttpRequestWorker *worker);
    void createWebhookFeedDataCallback(OAIHttpRequestWorker *worker);
    void destroyDataCallback(OAIHttpRequestWorker *worker);
    void firstDataCallback(OAIHttpRequestWorker *worker);
    void getDataCallback(OAIHttpRequestWorker *worker);
    void lastDataCallback(OAIHttpRequestWorker *worker);
    void nextDataCallback(OAIHttpRequestWorker *worker);
    void previousDataCallback(OAIHttpRequestWorker *worker);
    void replaceDataCallback(OAIHttpRequestWorker *worker);
    void retainDataCallback(OAIHttpRequestWorker *worker);
    void updateDataCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allDataSignal(QList<OAIDataResponse> summary);
    void allGroupFeedDataSignal(QList<OAIDataResponse> summary);
    void batchCreateDataSignal(QList<OAIDataResponse> summary);
    void batchCreateGroupFeedDataSignal(QList<OAIDataResponse> summary);
    void chartDataSignal(OAIChartData_200_response summary);
    void createDataSignal(OAIData summary);
    void createGroupDataSignal(QList<OAIDataResponse> summary);
    void createGroupFeedDataSignal(OAIDataResponse summary);
    void createRawWebhookFeedDataSignal(OAIData summary);
    void createWebhookFeedDataSignal(OAIData summary);
    void destroyDataSignal(QString summary);
    void firstDataSignal(OAIDataResponse summary);
    void getDataSignal(OAIDataResponse summary);
    void lastDataSignal(OAIDataResponse summary);
    void nextDataSignal(OAIDataResponse summary);
    void previousDataSignal(OAIDataResponse summary);
    void replaceDataSignal(OAIDataResponse summary);
    void retainDataSignal(QString summary);
    void updateDataSignal(OAIDataResponse summary);


    void allDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataResponse> summary);
    void allGroupFeedDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataResponse> summary);
    void batchCreateDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataResponse> summary);
    void batchCreateGroupFeedDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataResponse> summary);
    void chartDataSignalFull(OAIHttpRequestWorker *worker, OAIChartData_200_response summary);
    void createDataSignalFull(OAIHttpRequestWorker *worker, OAIData summary);
    void createGroupDataSignalFull(OAIHttpRequestWorker *worker, QList<OAIDataResponse> summary);
    void createGroupFeedDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void createRawWebhookFeedDataSignalFull(OAIHttpRequestWorker *worker, OAIData summary);
    void createWebhookFeedDataSignalFull(OAIHttpRequestWorker *worker, OAIData summary);
    void destroyDataSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void firstDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void getDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void lastDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void nextDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void previousDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void replaceDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);
    void retainDataSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void updateDataSignalFull(OAIHttpRequestWorker *worker, OAIDataResponse summary);

    Q_DECL_DEPRECATED_X("Use allDataSignalError() instead")
    void allDataSignalE(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allDataSignalError(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedDataSignalError() instead")
    void allGroupFeedDataSignalE(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedDataSignalError(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateDataSignalError() instead")
    void batchCreateDataSignalE(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateDataSignalError(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateGroupFeedDataSignalError() instead")
    void batchCreateGroupFeedDataSignalE(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateGroupFeedDataSignalError(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDataSignalError() instead")
    void chartDataSignalE(OAIChartData_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataSignalError(OAIChartData_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSignalError() instead")
    void createDataSignalE(OAIData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSignalError(OAIData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupDataSignalError() instead")
    void createGroupDataSignalE(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupDataSignalError(QList<OAIDataResponse> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupFeedDataSignalError() instead")
    void createGroupFeedDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupFeedDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRawWebhookFeedDataSignalError() instead")
    void createRawWebhookFeedDataSignalE(OAIData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRawWebhookFeedDataSignalError(OAIData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebhookFeedDataSignalError() instead")
    void createWebhookFeedDataSignalE(OAIData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookFeedDataSignalError(OAIData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyDataSignalError() instead")
    void destroyDataSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyDataSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firstDataSignalError() instead")
    void firstDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void firstDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataSignalError() instead")
    void getDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lastDataSignalError() instead")
    void lastDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lastDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nextDataSignalError() instead")
    void nextDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nextDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previousDataSignalError() instead")
    void previousDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void previousDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceDataSignalError() instead")
    void replaceDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retainDataSignalError() instead")
    void retainDataSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retainDataSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSignalError() instead")
    void updateDataSignalE(OAIDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSignalError(OAIDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allDataSignalErrorFull() instead")
    void allDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedDataSignalErrorFull() instead")
    void allGroupFeedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateDataSignalErrorFull() instead")
    void batchCreateDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateGroupFeedDataSignalErrorFull() instead")
    void batchCreateGroupFeedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateGroupFeedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use chartDataSignalErrorFull() instead")
    void chartDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void chartDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDataSignalErrorFull() instead")
    void createDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupDataSignalErrorFull() instead")
    void createGroupDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupFeedDataSignalErrorFull() instead")
    void createGroupFeedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupFeedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRawWebhookFeedDataSignalErrorFull() instead")
    void createRawWebhookFeedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRawWebhookFeedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebhookFeedDataSignalErrorFull() instead")
    void createWebhookFeedDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookFeedDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyDataSignalErrorFull() instead")
    void destroyDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use firstDataSignalErrorFull() instead")
    void firstDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void firstDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDataSignalErrorFull() instead")
    void getDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lastDataSignalErrorFull() instead")
    void lastDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lastDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nextDataSignalErrorFull() instead")
    void nextDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nextDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use previousDataSignalErrorFull() instead")
    void previousDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void previousDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceDataSignalErrorFull() instead")
    void replaceDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retainDataSignalErrorFull() instead")
    void retainDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retainDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDataSignalErrorFull() instead")
    void updateDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
