/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFeedsApi_H
#define OAI_OAIFeedsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateFeed_request.h"
#include "OAIFeed.h"
#include "OAIGroup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFeedsApi : public QObject {
    Q_OBJECT

public:
    OAIFeedsApi(const int timeOut = 0);
    ~OAIFeedsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [optional]
    */
    virtual void addFeedToGroup(const QString &group_key, const QString &username, const ::OpenAPI::OptionalParam<QString> &feed_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    */
    virtual void allFeeds(const QString &username);

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    */
    virtual void allGroupFeeds(const QString &group_key, const QString &username);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed OAICreateFeed_request [required]
    * @param[in]  group_key QString [optional]
    */
    virtual void createFeed(const QString &username, const OAICreateFeed_request &feed, const ::OpenAPI::OptionalParam<QString> &group_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  group_key QString [required]
    * @param[in]  feed OAICreateFeed_request [required]
    */
    virtual void createGroupFeed(const QString &username, const QString &group_key, const OAICreateFeed_request &feed);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    */
    virtual void destroyFeed(const QString &username, const QString &feed_key);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    */
    virtual void getFeed(const QString &username, const QString &feed_key);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    */
    virtual void getFeedDetails(const QString &username, const QString &feed_key);

    /**
    * @param[in]  group_key QString [required]
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [optional]
    */
    virtual void removeFeedFromGroup(const QString &group_key, const QString &username, const ::OpenAPI::OptionalParam<QString> &feed_key = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  feed OAICreateFeed_request [required]
    */
    virtual void replaceFeed(const QString &username, const QString &feed_key, const OAICreateFeed_request &feed);

    /**
    * @param[in]  username QString [required]
    * @param[in]  feed_key QString [required]
    * @param[in]  feed OAICreateFeed_request [required]
    */
    virtual void updateFeed(const QString &username, const QString &feed_key, const OAICreateFeed_request &feed);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFeedToGroupCallback(OAIHttpRequestWorker *worker);
    void allFeedsCallback(OAIHttpRequestWorker *worker);
    void allGroupFeedsCallback(OAIHttpRequestWorker *worker);
    void createFeedCallback(OAIHttpRequestWorker *worker);
    void createGroupFeedCallback(OAIHttpRequestWorker *worker);
    void destroyFeedCallback(OAIHttpRequestWorker *worker);
    void getFeedCallback(OAIHttpRequestWorker *worker);
    void getFeedDetailsCallback(OAIHttpRequestWorker *worker);
    void removeFeedFromGroupCallback(OAIHttpRequestWorker *worker);
    void replaceFeedCallback(OAIHttpRequestWorker *worker);
    void updateFeedCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFeedToGroupSignal(OAIGroup summary);
    void allFeedsSignal(QList<OAIFeed> summary);
    void allGroupFeedsSignal(QList<OAIFeed> summary);
    void createFeedSignal(OAIFeed summary);
    void createGroupFeedSignal(OAIFeed summary);
    void destroyFeedSignal();
    void getFeedSignal(OAIFeed summary);
    void getFeedDetailsSignal(OAIFeed summary);
    void removeFeedFromGroupSignal(OAIGroup summary);
    void replaceFeedSignal(OAIFeed summary);
    void updateFeedSignal(OAIFeed summary);


    void addFeedToGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void allFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeed> summary);
    void allGroupFeedsSignalFull(OAIHttpRequestWorker *worker, QList<OAIFeed> summary);
    void createFeedSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void createGroupFeedSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void destroyFeedSignalFull(OAIHttpRequestWorker *worker);
    void getFeedSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void getFeedDetailsSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void removeFeedFromGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void replaceFeedSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);
    void updateFeedSignalFull(OAIHttpRequestWorker *worker, OAIFeed summary);

    Q_DECL_DEPRECATED_X("Use addFeedToGroupSignalError() instead")
    void addFeedToGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFeedToGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allFeedsSignalError() instead")
    void allFeedsSignalE(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allFeedsSignalError(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedsSignalError() instead")
    void allGroupFeedsSignalE(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedsSignalError(QList<OAIFeed> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFeedSignalError() instead")
    void createFeedSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFeedSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupFeedSignalError() instead")
    void createGroupFeedSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupFeedSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyFeedSignalError() instead")
    void destroyFeedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void destroyFeedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedSignalError() instead")
    void getFeedSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedDetailsSignalError() instead")
    void getFeedDetailsSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedDetailsSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFeedFromGroupSignalError() instead")
    void removeFeedFromGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFeedFromGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceFeedSignalError() instead")
    void replaceFeedSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceFeedSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFeedSignalError() instead")
    void updateFeedSignalE(OAIFeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFeedSignalError(OAIFeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFeedToGroupSignalErrorFull() instead")
    void addFeedToGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFeedToGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allFeedsSignalErrorFull() instead")
    void allFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allGroupFeedsSignalErrorFull() instead")
    void allGroupFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allGroupFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFeedSignalErrorFull() instead")
    void createFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupFeedSignalErrorFull() instead")
    void createGroupFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use destroyFeedSignalErrorFull() instead")
    void destroyFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destroyFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedSignalErrorFull() instead")
    void getFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedDetailsSignalErrorFull() instead")
    void getFeedDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFeedFromGroupSignalErrorFull() instead")
    void removeFeedFromGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFeedFromGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use replaceFeedSignalErrorFull() instead")
    void replaceFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void replaceFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFeedSignalErrorFull() instead")
    void updateFeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
