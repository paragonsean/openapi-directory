/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Activity from './model/Activity';
import Block from './model/Block';
import BlockFeed from './model/BlockFeed';
import ChartData200Response from './model/ChartData200Response';
import ChartData200ResponseFeed from './model/ChartData200ResponseFeed';
import CreateBlockRequest from './model/CreateBlockRequest';
import CreateBlockRequestBlockFeedsInner from './model/CreateBlockRequestBlockFeedsInner';
import CreateDashboardRequest from './model/CreateDashboardRequest';
import CreateDataRequest from './model/CreateDataRequest';
import CreateFeedRequest from './model/CreateFeedRequest';
import CreateGroupDataRequest from './model/CreateGroupDataRequest';
import CreateGroupDataRequestFeedsInner from './model/CreateGroupDataRequestFeedsInner';
import CreateGroupDataRequestLocation from './model/CreateGroupDataRequestLocation';
import CreatePermissionRequest from './model/CreatePermissionRequest';
import CreateTokenRequest from './model/CreateTokenRequest';
import CreateTriggerRequest from './model/CreateTriggerRequest';
import CreateWebhookFeedDataRequest from './model/CreateWebhookFeedDataRequest';
import Dashboard from './model/Dashboard';
import Data from './model/Data';
import DataResponse from './model/DataResponse';
import Error from './model/Error';
import Feed from './model/Feed';
import FeedDetails from './model/FeedDetails';
import FeedDetailsData from './model/FeedDetailsData';
import GetCurrentUserThrottle200Response from './model/GetCurrentUserThrottle200Response';
import Group from './model/Group';
import Permission from './model/Permission';
import ShallowGroup from './model/ShallowGroup';
import Token from './model/Token';
import Trigger from './model/Trigger';
import User from './model/User';
import ActivitiesApi from './api/ActivitiesApi';
import BlocksApi from './api/BlocksApi';
import DashboardsApi from './api/DashboardsApi';
import DataApi from './api/DataApi';
import FeedsApi from './api/FeedsApi';
import GroupsApi from './api/GroupsApi';
import PermissionsApi from './api/PermissionsApi';
import TokensApi from './api/TokensApi';
import TriggersApi from './api/TriggersApi';
import UsersApi from './api/UsersApi';
import WebhooksApi from './api/WebhooksApi';


/**
* ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f&#x3D;56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the &#x60;X-AIO-Key&#x60; header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \&quot;io_username\&quot; and the key \&quot;io_key_12345\&quot; could look like this:      $ curl -H \&quot;X-AIO-Key: io_key_12345\&quot; https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \&quot;https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key&#x3D;io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  &#x60;&#x60;&#x60;js var request &#x3D; require(&#39;request&#39;);  var options &#x3D; {   url: &#39;https://io.adafruit.com/api/v2/io_username/feeds&#39;,   headers: {     &#39;X-AIO-Key&#39;: &#39;io_key_12345&#39;,     &#39;Content-Type&#39;: &#39;application/json&#39;   } };  function callback(error, response, body) {   if (!error &amp;&amp; response.statusCode &#x3D;&#x3D; 200) {     var feeds &#x3D; JSON.parse(body);     console.log(feeds.length + \&quot; FEEDS AVAILABLE\&quot;);      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); &#x60;&#x60;&#x60;  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing &#x60;---&#x60; with your own values in the appropriate locations):  &#x60;&#x60;&#x60;arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include &lt;Arduino.h&gt; #include &lt;ESP8266WiFi.h&gt; #include &lt;ESP8266WiFiMulti.h&gt; #include &lt;ESP8266HTTPClient.h&gt;  ESP8266WiFiMulti WiFiMulti;  const char* ssid &#x3D; \&quot;---\&quot;; const char* password &#x3D; \&quot;---\&quot;;  const char* host &#x3D; \&quot;io.adafruit.com\&quot;;  const char* io_key &#x3D; \&quot;---\&quot;; const char* path_with_username &#x3D; \&quot;/api/v2/---/dashboards\&quot;;  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint &#x3D; \&quot;77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\&quot;;  void setup() {   Serial.begin(115200);    for(uint8_t t &#x3D; 4; t &gt; 0; t--) {     Serial.printf(\&quot;[SETUP] WAIT %d...\\n\&quot;, t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() !&#x3D; WL_CONNECTED) {     Serial.print(&#39;.&#39;);     delay(1000);   }    Serial.println(\&quot;[WIFI] connected!\&quot;);    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\&quot;https://\&quot; + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\&quot;X-AIO-Key\&quot;, io_key);    // start connection and send HTTP header   int httpCode &#x3D; http.GET();    // httpCode will be negative on error   if(httpCode &gt; 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\&quot;[HTTP] GET response: %d\\n\&quot;, httpCode);      // HTTP 200 OK     if(httpCode &#x3D;&#x3D; HTTP_CODE_OK) {       String payload &#x3D; http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} &#x60;&#x60;&#x60;  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They&#39;re all open source, so if they don&#39;t already do what you want, you can fork and add any feature you&#39;d like.  .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AdafruitIoRestApi = require('index'); // See note below*.
* var xxxSvc = new AdafruitIoRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AdafruitIoRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AdafruitIoRestApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AdafruitIoRestApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Activity model constructor.
     * @property {module:model/Activity}
     */
    Activity,

    /**
     * The Block model constructor.
     * @property {module:model/Block}
     */
    Block,

    /**
     * The BlockFeed model constructor.
     * @property {module:model/BlockFeed}
     */
    BlockFeed,

    /**
     * The ChartData200Response model constructor.
     * @property {module:model/ChartData200Response}
     */
    ChartData200Response,

    /**
     * The ChartData200ResponseFeed model constructor.
     * @property {module:model/ChartData200ResponseFeed}
     */
    ChartData200ResponseFeed,

    /**
     * The CreateBlockRequest model constructor.
     * @property {module:model/CreateBlockRequest}
     */
    CreateBlockRequest,

    /**
     * The CreateBlockRequestBlockFeedsInner model constructor.
     * @property {module:model/CreateBlockRequestBlockFeedsInner}
     */
    CreateBlockRequestBlockFeedsInner,

    /**
     * The CreateDashboardRequest model constructor.
     * @property {module:model/CreateDashboardRequest}
     */
    CreateDashboardRequest,

    /**
     * The CreateDataRequest model constructor.
     * @property {module:model/CreateDataRequest}
     */
    CreateDataRequest,

    /**
     * The CreateFeedRequest model constructor.
     * @property {module:model/CreateFeedRequest}
     */
    CreateFeedRequest,

    /**
     * The CreateGroupDataRequest model constructor.
     * @property {module:model/CreateGroupDataRequest}
     */
    CreateGroupDataRequest,

    /**
     * The CreateGroupDataRequestFeedsInner model constructor.
     * @property {module:model/CreateGroupDataRequestFeedsInner}
     */
    CreateGroupDataRequestFeedsInner,

    /**
     * The CreateGroupDataRequestLocation model constructor.
     * @property {module:model/CreateGroupDataRequestLocation}
     */
    CreateGroupDataRequestLocation,

    /**
     * The CreatePermissionRequest model constructor.
     * @property {module:model/CreatePermissionRequest}
     */
    CreatePermissionRequest,

    /**
     * The CreateTokenRequest model constructor.
     * @property {module:model/CreateTokenRequest}
     */
    CreateTokenRequest,

    /**
     * The CreateTriggerRequest model constructor.
     * @property {module:model/CreateTriggerRequest}
     */
    CreateTriggerRequest,

    /**
     * The CreateWebhookFeedDataRequest model constructor.
     * @property {module:model/CreateWebhookFeedDataRequest}
     */
    CreateWebhookFeedDataRequest,

    /**
     * The Dashboard model constructor.
     * @property {module:model/Dashboard}
     */
    Dashboard,

    /**
     * The Data model constructor.
     * @property {module:model/Data}
     */
    Data,

    /**
     * The DataResponse model constructor.
     * @property {module:model/DataResponse}
     */
    DataResponse,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Feed model constructor.
     * @property {module:model/Feed}
     */
    Feed,

    /**
     * The FeedDetails model constructor.
     * @property {module:model/FeedDetails}
     */
    FeedDetails,

    /**
     * The FeedDetailsData model constructor.
     * @property {module:model/FeedDetailsData}
     */
    FeedDetailsData,

    /**
     * The GetCurrentUserThrottle200Response model constructor.
     * @property {module:model/GetCurrentUserThrottle200Response}
     */
    GetCurrentUserThrottle200Response,

    /**
     * The Group model constructor.
     * @property {module:model/Group}
     */
    Group,

    /**
     * The Permission model constructor.
     * @property {module:model/Permission}
     */
    Permission,

    /**
     * The ShallowGroup model constructor.
     * @property {module:model/ShallowGroup}
     */
    ShallowGroup,

    /**
     * The Token model constructor.
     * @property {module:model/Token}
     */
    Token,

    /**
     * The Trigger model constructor.
     * @property {module:model/Trigger}
     */
    Trigger,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
    * The ActivitiesApi service constructor.
    * @property {module:api/ActivitiesApi}
    */
    ActivitiesApi,

    /**
    * The BlocksApi service constructor.
    * @property {module:api/BlocksApi}
    */
    BlocksApi,

    /**
    * The DashboardsApi service constructor.
    * @property {module:api/DashboardsApi}
    */
    DashboardsApi,

    /**
    * The DataApi service constructor.
    * @property {module:api/DataApi}
    */
    DataApi,

    /**
    * The FeedsApi service constructor.
    * @property {module:api/FeedsApi}
    */
    FeedsApi,

    /**
    * The GroupsApi service constructor.
    * @property {module:api/GroupsApi}
    */
    GroupsApi,

    /**
    * The PermissionsApi service constructor.
    * @property {module:api/PermissionsApi}
    */
    PermissionsApi,

    /**
    * The TokensApi service constructor.
    * @property {module:api/TokensApi}
    */
    TokensApi,

    /**
    * The TriggersApi service constructor.
    * @property {module:api/TriggersApi}
    */
    TriggersApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi,

    /**
    * The WebhooksApi service constructor.
    * @property {module:api/WebhooksApi}
    */
    WebhooksApi
};
