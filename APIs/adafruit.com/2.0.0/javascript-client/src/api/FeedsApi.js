/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateFeedRequest from '../model/CreateFeedRequest';
import Feed from '../model/Feed';
import Group from '../model/Group';

/**
* Feeds service.
* @module api/FeedsApi
* @version 2.0.0
*/
export default class FeedsApi {

    /**
    * Constructs a new FeedsApi. 
    * @alias module:api/FeedsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFeedToGroup_0 operation.
     * @callback module:api/FeedsApi~addFeedToGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an existing Feed to a Group
     * @param {String} groupKey 
     * @param {String} username a valid username string
     * @param {Object} opts Optional parameters
     * @param {String} [feedKey] 
     * @param {module:api/FeedsApi~addFeedToGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    addFeedToGroup_0(groupKey, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling addFeedToGroup_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling addFeedToGroup_0");
      }

      let pathParams = {
        'group_key': groupKey,
        'username': username
      };
      let queryParams = {
        'feed_key': opts['feedKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allFeeds operation.
     * @callback module:api/FeedsApi~allFeedsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All feeds for current user
     * The Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed.
     * @param {String} username a valid username string
     * @param {module:api/FeedsApi~allFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    allFeeds(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling allFeeds");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [Feed];
      return this.apiClient.callApi(
        '/{username}/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allGroupFeeds_0 operation.
     * @callback module:api/FeedsApi~allGroupFeeds_0Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Feed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All feeds for current user in a given group
     * The Group Feeds endpoint returns information about the user's feeds. The response includes the latest value of each feed, and other metadata about each feed, but only for feeds within the given group.
     * @param {String} groupKey 
     * @param {String} username a valid username string
     * @param {module:api/FeedsApi~allGroupFeeds_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Feed>}
     */
    allGroupFeeds_0(groupKey, username, callback) {
      let postBody = null;
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling allGroupFeeds_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling allGroupFeeds_0");
      }

      let pathParams = {
        'group_key': groupKey,
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [Feed];
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/feeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFeed operation.
     * @callback module:api/FeedsApi~createFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Feed
     * @param {String} username a valid username string
     * @param {module:model/CreateFeedRequest} feed 
     * @param {Object} opts Optional parameters
     * @param {String} [groupKey] 
     * @param {module:api/FeedsApi~createFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    createFeed(username, feed, opts, callback) {
      opts = opts || {};
      let postBody = feed;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createFeed");
      }
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling createFeed");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'group_key': opts['groupKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupFeed operation.
     * @callback module:api/FeedsApi~createGroupFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Feed in a Group
     * @param {String} username a valid username string
     * @param {String} groupKey 
     * @param {module:model/CreateFeedRequest} feed 
     * @param {module:api/FeedsApi~createGroupFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    createGroupFeed(username, groupKey, feed, callback) {
      let postBody = feed;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createGroupFeed");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling createGroupFeed");
      }
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling createGroupFeed");
      }

      let pathParams = {
        'username': username,
        'group_key': groupKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/feeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyFeed operation.
     * @callback module:api/FeedsApi~destroyFeedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing Feed
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:api/FeedsApi~destroyFeedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    destroyFeed(username, feedKey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling destroyFeed");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling destroyFeed");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeed operation.
     * @callback module:api/FeedsApi~getFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feed by feed key
     * Returns feed based on the feed key
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:api/FeedsApi~getFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    getFeed(username, feedKey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getFeed");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling getFeed");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeedDetails operation.
     * @callback module:api/FeedsApi~getFeedDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get detailed feed by feed key
     * Returns more detailed feed record based on the feed key
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:api/FeedsApi~getFeedDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    getFeedDetails(username, feedKey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getFeedDetails");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling getFeedDetails");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/details', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFeedFromGroup_0 operation.
     * @callback module:api/FeedsApi~removeFeedFromGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Feed from a Group
     * @param {String} groupKey 
     * @param {String} username a valid username string
     * @param {Object} opts Optional parameters
     * @param {String} [feedKey] 
     * @param {module:api/FeedsApi~removeFeedFromGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    removeFeedFromGroup_0(groupKey, username, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling removeFeedFromGroup_0");
      }
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling removeFeedFromGroup_0");
      }

      let pathParams = {
        'group_key': groupKey,
        'username': username
      };
      let queryParams = {
        'feed_key': opts['feedKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceFeed operation.
     * @callback module:api/FeedsApi~replaceFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing Feed
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:model/CreateFeedRequest} feed 
     * @param {module:api/FeedsApi~replaceFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    replaceFeed(username, feedKey, feed, callback) {
      let postBody = feed;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling replaceFeed");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling replaceFeed");
      }
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling replaceFeed");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFeed operation.
     * @callback module:api/FeedsApi~updateFeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Feed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update properties of an existing Feed
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:model/CreateFeedRequest} feed 
     * @param {module:api/FeedsApi~updateFeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Feed}
     */
    updateFeed(username, feedKey, feed, callback) {
      let postBody = feed;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateFeed");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling updateFeed");
      }
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling updateFeed");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Feed;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
