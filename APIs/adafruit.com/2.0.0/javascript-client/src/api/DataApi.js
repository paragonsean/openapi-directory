/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChartData200Response from '../model/ChartData200Response';
import CreateDataRequest from '../model/CreateDataRequest';
import CreateGroupDataRequest from '../model/CreateGroupDataRequest';
import CreateWebhookFeedDataRequest from '../model/CreateWebhookFeedDataRequest';
import Data from '../model/Data';
import DataResponse from '../model/DataResponse';

/**
* Data service.
* @module api/DataApi
* @version 2.0.0
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allData operation.
     * @callback module:api/DataApi~allDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all data for the given feed
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start time for filtering, returns records created after given time.
     * @param {Date} [endTime] End time for filtering, returns records created before give time.
     * @param {Number} [limit] Limit the number of records returned.
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~allDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataResponse>}
     */
    allData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling allData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling allData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit'],
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [DataResponse];
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allGroupFeedData operation.
     * @callback module:api/DataApi~allGroupFeedDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All data for current feed in a specific group
     * @param {String} username a valid username string
     * @param {String} groupKey 
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start time for filtering data. Returns data created after given time.
     * @param {Date} [endTime] End time for filtering data. Returns data created before give time.
     * @param {Number} [limit] Limit the number of records returned.
     * @param {module:api/DataApi~allGroupFeedDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataResponse>}
     */
    allGroupFeedData(username, groupKey, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling allGroupFeedData");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling allGroupFeedData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling allGroupFeedData");
      }

      let pathParams = {
        'username': username,
        'group_key': groupKey,
        'feed_key': feedKey
      };
      let queryParams = {
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [DataResponse];
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/feeds/{feed_key}/data', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreateData operation.
     * @callback module:api/DataApi~batchCreateDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple new Data records
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Array.<module:model/CreateDataRequest>} data A collection of data records including `value` (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~batchCreateDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataResponse>}
     */
    batchCreateData(username, feedKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling batchCreateData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling batchCreateData");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling batchCreateData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [DataResponse];
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchCreateGroupFeedData operation.
     * @callback module:api/DataApi~batchCreateGroupFeedDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create multiple new Data records in a feed belonging to a particular group
     * @param {String} username a valid username string
     * @param {String} groupKey 
     * @param {String} feedKey a valid feed key
     * @param {Array.<module:model/CreateDataRequest>} data A collection of data records including `value` (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~batchCreateGroupFeedDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataResponse>}
     */
    batchCreateGroupFeedData(username, groupKey, feedKey, data, callback) {
      let postBody = data;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling batchCreateGroupFeedData");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling batchCreateGroupFeedData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling batchCreateGroupFeedData");
      }
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling batchCreateGroupFeedData");
      }

      let pathParams = {
        'username': username,
        'group_key': groupKey,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [DataResponse];
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/feeds/{feed_key}/data/batch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the chartData operation.
     * @callback module:api/DataApi~chartDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChartData200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Chart data for current feed
     * The Chart API is what we use on io.adafruit.com to populate charts over varying timespans with a consistent number of data points. The maximum number of points returned is 480. This API works by aggregating slices of time into a single value by averaging.  All time-based parameters are optional, if none are given it will default to 1 hour at the finest-grained resolution possible.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] Start time for filtering, returns records created after given time.
     * @param {Date} [endTime] End time for filtering, returns records created before give time.
     * @param {Number} [resolution] A resolution size in minutes. By giving a resolution value you will get back grouped data points aggregated over resolution-sized intervals. NOTE: time span is preferred over resolution, so if you request a span of time that includes more than max limit points you may get a larger resolution than you requested. Valid resolutions are 1, 5, 10, 30, 60, and 120.
     * @param {Number} [hours] The number of hours the chart should cover.
     * @param {module:api/DataApi~chartDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChartData200Response}
     */
    chartData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling chartData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling chartData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'start_time': opts['startTime'],
        'end_time': opts['endTime'],
        'resolution': opts['resolution'],
        'hours': opts['hours']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = ChartData200Response;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createData operation.
     * @callback module:api/DataApi~createDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Data} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Data
     * Create new data records on the given feed.  **NOTE:** when feed history is on, data `value` size is limited to 1KB, when feed history is turned off data value size is limited to 100KB.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:model/CreateDataRequest} datum Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~createDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Data}
     */
    createData(username, feedKey, datum, callback) {
      let postBody = datum;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling createData");
      }
      // verify the required parameter 'datum' is set
      if (datum === undefined || datum === null) {
        throw new Error("Missing the required parameter 'datum' when calling createData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Data;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupData operation.
     * @callback module:api/DataApi~createGroupDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new data for multiple feeds in a group
     * @param {String} username a valid username string
     * @param {String} groupKey 
     * @param {module:model/CreateGroupDataRequest} groupFeedData 
     * @param {module:api/DataApi~createGroupDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataResponse>}
     */
    createGroupData(username, groupKey, groupFeedData, callback) {
      let postBody = groupFeedData;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createGroupData");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling createGroupData");
      }
      // verify the required parameter 'groupFeedData' is set
      if (groupFeedData === undefined || groupFeedData === null) {
        throw new Error("Missing the required parameter 'groupFeedData' when calling createGroupData");
      }

      let pathParams = {
        'username': username,
        'group_key': groupKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [DataResponse];
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupFeedData operation.
     * @callback module:api/DataApi~createGroupFeedDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Data in a feed belonging to a particular group
     * @param {String} username a valid username string
     * @param {String} groupKey 
     * @param {String} feedKey a valid feed key
     * @param {module:model/CreateDataRequest} datum Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~createGroupFeedDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    createGroupFeedData(username, groupKey, feedKey, datum, callback) {
      let postBody = datum;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createGroupFeedData");
      }
      // verify the required parameter 'groupKey' is set
      if (groupKey === undefined || groupKey === null) {
        throw new Error("Missing the required parameter 'groupKey' when calling createGroupFeedData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling createGroupFeedData");
      }
      // verify the required parameter 'datum' is set
      if (datum === undefined || datum === null) {
        throw new Error("Missing the required parameter 'datum' when calling createGroupFeedData");
      }

      let pathParams = {
        'username': username,
        'group_key': groupKey,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/groups/{group_key}/feeds/{feed_key}/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRawWebhookFeedData_0 operation.
     * @callback module:api/DataApi~createRawWebhookFeedData_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Data} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send arbitrary data to a feed via webhook URL.
     * The raw data webhook receiver accepts POST requests and stores the raw request body on your feed. This is useful when you don't have control of the webhook sender. If feed history is turned on, payloads will be truncated at 1024 bytes. If feed history is turned off, payloads will be truncated at 100KB.
     * @param {module:api/DataApi~createRawWebhookFeedData_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Data}
     */
    createRawWebhookFeedData_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Data;
      return this.apiClient.callApi(
        '/webhooks/feed/:token/raw', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebhookFeedData_0 operation.
     * @callback module:api/DataApi~createWebhookFeedData_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Data} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send data to a feed via webhook URL.
     * @param {module:model/CreateWebhookFeedDataRequest} payload Webhook payload containing data `value` parameter.
     * @param {module:api/DataApi~createWebhookFeedData_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Data}
     */
    createWebhookFeedData_0(payload, callback) {
      let postBody = payload;
      // verify the required parameter 'payload' is set
      if (payload === undefined || payload === null) {
        throw new Error("Missing the required parameter 'payload' when calling createWebhookFeedData_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Data;
      return this.apiClient.callApi(
        '/webhooks/feed/:token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyData operation.
     * @callback module:api/DataApi~destroyDataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete existing Data
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {String} id 
     * @param {module:api/DataApi~destroyDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    destroyData(username, feedKey, id, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling destroyData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling destroyData");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the firstData operation.
     * @callback module:api/DataApi~firstDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * First Data in Queue
     * Get the oldest data point in the feed. This request sets the queue pointer to the beginning of the feed.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~firstDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    firstData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling firstData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling firstData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/first', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getData operation.
     * @callback module:api/DataApi~getDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns data based on feed key
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~getDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    getData(username, feedKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling getData");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey,
        'id': id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lastData operation.
     * @callback module:api/DataApi~lastDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Data in Queue
     * Get the most recent data point in the feed. This request sets the queue pointer to the end of the feed.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~lastDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    lastData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling lastData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling lastData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/last', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the nextData operation.
     * @callback module:api/DataApi~nextDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Next Data in Queue
     * Get the next newest data point in the feed. If queue processing hasn't been started, the first data point in the feed will be returned.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~nextDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    nextData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling nextData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling nextData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/next', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the previousData operation.
     * @callback module:api/DataApi~previousDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Previous Data in Queue
     * Get the previously processed data point in the feed. NOTE: this method doesn't move the processing queue pointer.
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {Object} opts Optional parameters
     * @param {String} [include] List of Data record fields to include in response as comma separated list. Acceptable values are: `value`, `lat`, `lon`, `ele`, `id`, and `created_at`. 
     * @param {module:api/DataApi~previousDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    previousData(username, feedKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling previousData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling previousData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/previous', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceData operation.
     * @callback module:api/DataApi~replaceDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace existing Data
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {String} id 
     * @param {module:model/CreateDataRequest} datum Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~replaceDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    replaceData(username, feedKey, id, datum, callback) {
      let postBody = datum;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling replaceData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling replaceData");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replaceData");
      }
      // verify the required parameter 'datum' is set
      if (datum === undefined || datum === null) {
        throw new Error("Missing the required parameter 'datum' when calling replaceData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retainData operation.
     * @callback module:api/DataApi~retainDataCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Last Data in MQTT CSV format
     * Get the most recent data point in the feed in an MQTT compatible CSV format: `value,lat,lon,ele`
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {module:api/DataApi~retainDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    retainData(username, feedKey, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling retainData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling retainData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/retain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateData operation.
     * @callback module:api/DataApi~updateDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update properties of existing Data
     * @param {String} username a valid username string
     * @param {String} feedKey a valid feed key
     * @param {String} id 
     * @param {module:model/CreateDataRequest} datum Data record including a `value` field (required) and optionally including: `lat`, `lon`, `ele` (latitude, longitude, and elevation values), and `created_at` (a date/time string).
     * @param {module:api/DataApi~updateDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponse}
     */
    updateData(username, feedKey, id, datum, callback) {
      let postBody = datum;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateData");
      }
      // verify the required parameter 'feedKey' is set
      if (feedKey === undefined || feedKey === null) {
        throw new Error("Missing the required parameter 'feedKey' when calling updateData");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateData");
      }
      // verify the required parameter 'datum' is set
      if (datum === undefined || datum === null) {
        throw new Error("Missing the required parameter 'datum' when calling updateData");
      }

      let pathParams = {
        'username': username,
        'feed_key': feedKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = DataResponse;
      return this.apiClient.callApi(
        '/{username}/feeds/{feed_key}/data/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
