/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePermissionRequest from '../model/CreatePermissionRequest';
import Permission from '../model/Permission';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 2.0.0
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allPermissions operation.
     * @callback module:api/PermissionsApi~allPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Permission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * All permissions for current user and type
     * The Permissions endpoint returns information about the user's permissions. 
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {module:api/PermissionsApi~allPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Permission>}
     */
    allPermissions(username, type, typeId, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling allPermissions");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling allPermissions");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling allPermissions");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = [Permission];
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPermission operation.
     * @callback module:api/PermissionsApi~createPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new Permission
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {module:model/CreatePermissionRequest} permission 
     * @param {module:api/PermissionsApi~createPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    createPermission(username, type, typeId, permission, callback) {
      let postBody = permission;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createPermission");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createPermission");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling createPermission");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling createPermission");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the destroyPermission operation.
     * @callback module:api/PermissionsApi~destroyPermissionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing Permission
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {String} id 
     * @param {module:api/PermissionsApi~destroyPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    destroyPermission(username, type, typeId, id, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling destroyPermission");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling destroyPermission");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling destroyPermission");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling destroyPermission");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermission operation.
     * @callback module:api/PermissionsApi~getPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns Permission based on ID
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {String} id 
     * @param {module:api/PermissionsApi~getPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    getPermission(username, type, typeId, id, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPermission");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getPermission");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling getPermission");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermission");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replacePermission operation.
     * @callback module:api/PermissionsApi~replacePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace an existing Permission
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {String} id 
     * @param {module:model/CreatePermissionRequest} permission 
     * @param {module:api/PermissionsApi~replacePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    replacePermission(username, type, typeId, id, permission, callback) {
      let postBody = permission;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling replacePermission");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling replacePermission");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling replacePermission");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling replacePermission");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling replacePermission");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermission operation.
     * @callback module:api/PermissionsApi~updatePermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update properties of an existing Permission
     * @param {String} username a valid username string
     * @param {String} type 
     * @param {String} typeId 
     * @param {String} id 
     * @param {module:model/CreatePermissionRequest} permission 
     * @param {module:api/PermissionsApi~updatePermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permission}
     */
    updatePermission(username, type, typeId, id, permission, callback) {
      let postBody = permission;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updatePermission");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updatePermission");
      }
      // verify the required parameter 'typeId' is set
      if (typeId === undefined || typeId === null) {
        throw new Error("Missing the required parameter 'typeId' when calling updatePermission");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePermission");
      }
      // verify the required parameter 'permission' is set
      if (permission === undefined || permission === null) {
        throw new Error("Missing the required parameter 'permission' when calling updatePermission");
      }

      let pathParams = {
        'username': username,
        'type': type,
        'type_id': typeId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['HeaderSignature', 'QueryKey', 'HeaderKey'];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'text/csv'];
      let returnType = Permission;
      return this.apiClient.callApi(
        '/{username}/{type}/{type_id}/acl/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
