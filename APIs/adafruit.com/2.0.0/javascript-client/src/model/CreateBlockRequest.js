/**
 * Adafruit IO REST API
 * ### The Internet of Things for Everyone  The Adafruit IO HTTP API provides access to your Adafruit IO data from any programming language or hardware environment that can speak HTTP. The easiest way to get started is with [an Adafruit IO learn guide](https://learn.adafruit.com/series/adafruit-io-basics) and [a simple Internet of Things capable device like the Feather Huzzah](https://www.adafruit.com/product/2821).  This API documentation is hosted on GitHub Pages and is available at [https://github.com/adafruit/io-api](https://github.com/adafruit/io-api). For questions or comments visit the [Adafruit IO Forums](https://forums.adafruit.com/viewforum.php?f=56) or the [adafruit-io channel on the Adafruit Discord server](https://discord.gg/adafruit).  #### Authentication  Authentication for every API request happens through the `X-AIO-Key` header or query parameter and your IO API key. A simple cURL request to get all available feeds for a user with the username \"io_username\" and the key \"io_key_12345\" could look like this:      $ curl -H \"X-AIO-Key: io_key_12345\" https://io.adafruit.com/api/v2/io_username/feeds  Or like this:      $ curl \"https://io.adafruit.com/api/v2/io_username/feeds?X-AIO-Key=io_key_12345  Using the node.js [request](https://github.com/request/request) library, IO HTTP requests are as easy as:  ```js var request = require('request');  var options = {   url: 'https://io.adafruit.com/api/v2/io_username/feeds',   headers: {     'X-AIO-Key': 'io_key_12345',     'Content-Type': 'application/json'   } };  function callback(error, response, body) {   if (!error && response.statusCode == 200) {     var feeds = JSON.parse(body);     console.log(feeds.length + \" FEEDS AVAILABLE\");      feeds.forEach(function (feed) {       console.log(feed.name, feed.key);     })   } }  request(options, callback); ```  Using the ESP8266 Arduino HTTPClient library, an HTTPS GET request would look like this (replacing `---` with your own values in the appropriate locations):  ```arduino /// based on /// https://github.com/esp8266/Arduino/blob/master/libraries/ESP8266HTTPClient/examples/Authorization/Authorization.ino  #include <Arduino.h> #include <ESP8266WiFi.h> #include <ESP8266WiFiMulti.h> #include <ESP8266HTTPClient.h>  ESP8266WiFiMulti WiFiMulti;  const char* ssid = \"---\"; const char* password = \"---\";  const char* host = \"io.adafruit.com\";  const char* io_key = \"---\"; const char* path_with_username = \"/api/v2/---/dashboards\";  // Use web browser to view and copy // SHA1 fingerprint of the certificate const char* fingerprint = \"77 00 54 2D DA E7 D8 03 27 31 23 99 EB 27 DB CB A5 4C 57 18\";  void setup() {   Serial.begin(115200);    for(uint8_t t = 4; t > 0; t--) {     Serial.printf(\"[SETUP] WAIT %d...\\n\", t);     Serial.flush();     delay(1000);   }    WiFi.mode(WIFI_STA);   WiFiMulti.addAP(ssid, password);    // wait for WiFi connection   while(WiFiMulti.run() != WL_CONNECTED) {     Serial.print('.');     delay(1000);   }    Serial.println(\"[WIFI] connected!\");    HTTPClient http;    // start request with URL and TLS cert fingerprint for verification   http.begin(\"https://\" + String(host) + String(path_with_username), fingerprint);    // IO API authentication   http.addHeader(\"X-AIO-Key\", io_key);    // start connection and send HTTP header   int httpCode = http.GET();    // httpCode will be negative on error   if(httpCode > 0) {     // HTTP header has been send and Server response header has been handled     Serial.printf(\"[HTTP] GET response: %d\\n\", httpCode);      // HTTP 200 OK     if(httpCode == HTTP_CODE_OK) {       String payload = http.getString();       Serial.println(payload);     }      http.end();   } }  void loop() {} ```  #### Client Libraries  We have client libraries to help you get started with your project: [Python](https://github.com/adafruit/io-client-python), [Ruby](https://github.com/adafruit/io-client-ruby), [Arduino C++](https://github.com/adafruit/Adafruit_IO_Arduino), [Javascript](https://github.com/adafruit/adafruit-io-node), and [Go](https://github.com/adafruit/io-client-go) are available. They're all open source, so if they don't already do what you want, you can fork and add any feature you'd like.  
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateBlockRequestBlockFeedsInner from './CreateBlockRequestBlockFeedsInner';

/**
 * The CreateBlockRequest model module.
 * @module model/CreateBlockRequest
 * @version 2.0.0
 */
class CreateBlockRequest {
    /**
     * Constructs a new <code>CreateBlockRequest</code>.
     * @alias module:model/CreateBlockRequest
     */
    constructor() { 
        
        CreateBlockRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateBlockRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateBlockRequest} obj Optional instance to populate.
     * @return {module:model/CreateBlockRequest} The populated <code>CreateBlockRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateBlockRequest();

            if (data.hasOwnProperty('block_feeds')) {
                obj['block_feeds'] = ApiClient.convertToType(data['block_feeds'], [CreateBlockRequestBlockFeedsInner]);
            }
            if (data.hasOwnProperty('column')) {
                obj['column'] = ApiClient.convertToType(data['column'], 'Number');
            }
            if (data.hasOwnProperty('dashboard_id')) {
                obj['dashboard_id'] = ApiClient.convertToType(data['dashboard_id'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], Object);
            }
            if (data.hasOwnProperty('row')) {
                obj['row'] = ApiClient.convertToType(data['row'], 'Number');
            }
            if (data.hasOwnProperty('size_x')) {
                obj['size_x'] = ApiClient.convertToType(data['size_x'], 'Number');
            }
            if (data.hasOwnProperty('size_y')) {
                obj['size_y'] = ApiClient.convertToType(data['size_y'], 'Number');
            }
            if (data.hasOwnProperty('visual_type')) {
                obj['visual_type'] = ApiClient.convertToType(data['visual_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateBlockRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateBlockRequest</code>.
     */
    static validateJSON(data) {
        if (data['block_feeds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['block_feeds'])) {
                throw new Error("Expected the field `block_feeds` to be an array in the JSON data but got " + data['block_feeds']);
            }
            // validate the optional field `block_feeds` (array)
            for (const item of data['block_feeds']) {
                CreateBlockRequestBlockFeedsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['visual_type'] && !(typeof data['visual_type'] === 'string' || data['visual_type'] instanceof String)) {
            throw new Error("Expected the field `visual_type` to be a primitive type in the JSON string but got " + data['visual_type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/CreateBlockRequestBlockFeedsInner>} block_feeds
 */
CreateBlockRequest.prototype['block_feeds'] = undefined;

/**
 * @member {Number} column
 */
CreateBlockRequest.prototype['column'] = undefined;

/**
 * @member {Number} dashboard_id
 */
CreateBlockRequest.prototype['dashboard_id'] = undefined;

/**
 * @member {String} description
 */
CreateBlockRequest.prototype['description'] = undefined;

/**
 * @member {String} key
 */
CreateBlockRequest.prototype['key'] = undefined;

/**
 * @member {String} name
 */
CreateBlockRequest.prototype['name'] = undefined;

/**
 * @member {Object} properties
 */
CreateBlockRequest.prototype['properties'] = undefined;

/**
 * @member {Number} row
 */
CreateBlockRequest.prototype['row'] = undefined;

/**
 * @member {Number} size_x
 */
CreateBlockRequest.prototype['size_x'] = undefined;

/**
 * @member {Number} size_y
 */
CreateBlockRequest.prototype['size_y'] = undefined;

/**
 * @member {String} visual_type
 */
CreateBlockRequest.prototype['visual_type'] = undefined;






export default CreateBlockRequest;

