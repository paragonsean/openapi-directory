/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminMappingsFindByMetadataPostRequest from '../model/AdminMappingsFindByMetadataPostRequest';
import AdminMappingsGet200Response from '../model/AdminMappingsGet200Response';
import AdminMappingsGet200ResponseMappingsInner from '../model/AdminMappingsGet200ResponseMappingsInner';

/**
* StubMappings service.
* @module api/StubMappingsApi
* @version 2.35.0
*/
export default class StubMappingsApi {

    /**
    * Constructs a new StubMappingsApi. 
    * @alias module:api/StubMappingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminMappingsDelete operation.
     * @callback module:api/StubMappingsApi~adminMappingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all stub mappings
     * @param {module:api/StubMappingsApi~adminMappingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsFindByMetadataPost operation.
     * @callback module:api/StubMappingsApi~adminMappingsFindByMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find stubs by matching on their metadata
     * @param {module:model/AdminMappingsFindByMetadataPostRequest} adminMappingsFindByMetadataPostRequest 
     * @param {module:api/StubMappingsApi~adminMappingsFindByMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200Response}
     */
    adminMappingsFindByMetadataPost(adminMappingsFindByMetadataPostRequest, callback) {
      let postBody = adminMappingsFindByMetadataPostRequest;
      // verify the required parameter 'adminMappingsFindByMetadataPostRequest' is set
      if (adminMappingsFindByMetadataPostRequest === undefined || adminMappingsFindByMetadataPostRequest === null) {
        throw new Error("Missing the required parameter 'adminMappingsFindByMetadataPostRequest' when calling adminMappingsFindByMetadataPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200Response;
      return this.apiClient.callApi(
        '/__admin/mappings/find-by-metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsGet operation.
     * @callback module:api/StubMappingsApi~adminMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all stub mappings
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] The maximum number of results to return
     * @param {Number} [offset] The start index of the results to return
     * @param {module:api/StubMappingsApi~adminMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200Response}
     */
    adminMappingsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200Response;
      return this.apiClient.callApi(
        '/__admin/mappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsImportPost operation.
     * @callback module:api/StubMappingsApi~adminMappingsImportPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import stub mappings
     * Import given stub mappings to the backing store
     * @param {module:api/StubMappingsApi~adminMappingsImportPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsImportPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings/import', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsPost operation.
     * @callback module:api/StubMappingsApi~adminMappingsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200ResponseMappingsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new stub mapping
     * @param {Object} opts Optional parameters
     * @param {module:model/AdminMappingsGet200ResponseMappingsInner} [adminMappingsGet200ResponseMappingsInner] 
     * @param {module:api/StubMappingsApi~adminMappingsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200ResponseMappingsInner}
     */
    adminMappingsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['adminMappingsGet200ResponseMappingsInner'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200ResponseMappingsInner;
      return this.apiClient.callApi(
        '/__admin/mappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsRemoveByMetadataPost operation.
     * @callback module:api/StubMappingsApi~adminMappingsRemoveByMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete stub mappings matching metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/AdminMappingsFindByMetadataPostRequest} [adminMappingsFindByMetadataPostRequest] 
     * @param {module:api/StubMappingsApi~adminMappingsRemoveByMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsRemoveByMetadataPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['adminMappingsFindByMetadataPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings/remove-by-metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsResetPost operation.
     * @callback module:api/StubMappingsApi~adminMappingsResetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset stub mappings
     * Restores stub mappings to the defaults defined back in the backing store
     * @param {module:api/StubMappingsApi~adminMappingsResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsResetPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsSavePost operation.
     * @callback module:api/StubMappingsApi~adminMappingsSavePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Persist stub mappings
     * Save all persistent stub mappings to the backing store
     * @param {module:api/StubMappingsApi~adminMappingsSavePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsSavePost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings/save', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsStubMappingIdDelete operation.
     * @callback module:api/StubMappingsApi~adminMappingsStubMappingIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a stub mapping
     * @param {String} stubMappingId The UUID of stub mapping
     * @param {module:api/StubMappingsApi~adminMappingsStubMappingIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminMappingsStubMappingIdDelete(stubMappingId, callback) {
      let postBody = null;
      // verify the required parameter 'stubMappingId' is set
      if (stubMappingId === undefined || stubMappingId === null) {
        throw new Error("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdDelete");
      }

      let pathParams = {
        'stubMappingId': stubMappingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/mappings/{stubMappingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsStubMappingIdGet operation.
     * @callback module:api/StubMappingsApi~adminMappingsStubMappingIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200ResponseMappingsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stub mapping by ID
     * @param {String} stubMappingId The UUID of stub mapping
     * @param {module:api/StubMappingsApi~adminMappingsStubMappingIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200ResponseMappingsInner}
     */
    adminMappingsStubMappingIdGet(stubMappingId, callback) {
      let postBody = null;
      // verify the required parameter 'stubMappingId' is set
      if (stubMappingId === undefined || stubMappingId === null) {
        throw new Error("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdGet");
      }

      let pathParams = {
        'stubMappingId': stubMappingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200ResponseMappingsInner;
      return this.apiClient.callApi(
        '/__admin/mappings/{stubMappingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminMappingsStubMappingIdPut operation.
     * @callback module:api/StubMappingsApi~adminMappingsStubMappingIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200ResponseMappingsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a stub mapping
     * @param {String} stubMappingId The UUID of stub mapping
     * @param {Object} opts Optional parameters
     * @param {module:model/AdminMappingsGet200ResponseMappingsInner} [adminMappingsGet200ResponseMappingsInner] 
     * @param {module:api/StubMappingsApi~adminMappingsStubMappingIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200ResponseMappingsInner}
     */
    adminMappingsStubMappingIdPut(stubMappingId, opts, callback) {
      opts = opts || {};
      let postBody = opts['adminMappingsGet200ResponseMappingsInner'];
      // verify the required parameter 'stubMappingId' is set
      if (stubMappingId === undefined || stubMappingId === null) {
        throw new Error("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdPut");
      }

      let pathParams = {
        'stubMappingId': stubMappingId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200ResponseMappingsInner;
      return this.apiClient.callApi(
        '/__admin/mappings/{stubMappingId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
