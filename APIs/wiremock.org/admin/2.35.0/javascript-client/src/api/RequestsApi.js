/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminMappingsFindByMetadataPostRequest from '../model/AdminMappingsFindByMetadataPostRequest';
import AdminMappingsGet200ResponseMappingsInnerRequest from '../model/AdminMappingsGet200ResponseMappingsInnerRequest';
import AdminRequestsCountPost200Response from '../model/AdminRequestsCountPost200Response';

/**
* Requests service.
* @module api/RequestsApi
* @version 2.35.0
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminRequestsCountPost operation.
     * @callback module:api/RequestsApi~adminRequestsCountPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminRequestsCountPost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Count requests by criteria
     * Count requests logged in the journal matching the specified criteria
     * @param {module:model/AdminMappingsGet200ResponseMappingsInnerRequest} adminMappingsGet200ResponseMappingsInnerRequest 
     * @param {module:api/RequestsApi~adminRequestsCountPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminRequestsCountPost200Response}
     */
    adminRequestsCountPost(adminMappingsGet200ResponseMappingsInnerRequest, callback) {
      let postBody = adminMappingsGet200ResponseMappingsInnerRequest;
      // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
      if (adminMappingsGet200ResponseMappingsInnerRequest === undefined || adminMappingsGet200ResponseMappingsInnerRequest === null) {
        throw new Error("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsCountPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminRequestsCountPost200Response;
      return this.apiClient.callApi(
        '/__admin/requests/count', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsDelete operation.
     * @callback module:api/RequestsApi~adminRequestsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all requests in journal
     * @param {module:api/RequestsApi~adminRequestsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsFindPost operation.
     * @callback module:api/RequestsApi~adminRequestsFindPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find requests by criteria
     * Retrieve details of requests logged in the journal matching the specified criteria
     * @param {module:model/AdminMappingsGet200ResponseMappingsInnerRequest} adminMappingsGet200ResponseMappingsInnerRequest 
     * @param {module:api/RequestsApi~adminRequestsFindPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsFindPost(adminMappingsGet200ResponseMappingsInnerRequest, callback) {
      let postBody = adminMappingsGet200ResponseMappingsInnerRequest;
      // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
      if (adminMappingsGet200ResponseMappingsInnerRequest === undefined || adminMappingsGet200ResponseMappingsInnerRequest === null) {
        throw new Error("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsFindPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/find', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsGet operation.
     * @callback module:api/RequestsApi~adminRequestsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all requests in journal
     * @param {Object} opts Optional parameters
     * @param {String} [limit] The maximum number of results to return
     * @param {String} [since] Only return logged requests after this date
     * @param {module:api/RequestsApi~adminRequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsRemoveByMetadataPost operation.
     * @callback module:api/RequestsApi~adminRequestsRemoveByMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete requests mappings matching metadata
     * @param {Object} opts Optional parameters
     * @param {module:model/AdminMappingsFindByMetadataPostRequest} [adminMappingsFindByMetadataPostRequest] 
     * @param {module:api/RequestsApi~adminRequestsRemoveByMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsRemoveByMetadataPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['adminMappingsFindByMetadataPostRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/remove-by-metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsRemovePost operation.
     * @callback module:api/RequestsApi~adminRequestsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove requests by criteria
     * Removed requests logged in the journal matching the specified criteria
     * @param {module:model/AdminMappingsGet200ResponseMappingsInnerRequest} adminMappingsGet200ResponseMappingsInnerRequest 
     * @param {module:api/RequestsApi~adminRequestsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsRemovePost(adminMappingsGet200ResponseMappingsInnerRequest, callback) {
      let postBody = adminMappingsGet200ResponseMappingsInnerRequest;
      // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
      if (adminMappingsGet200ResponseMappingsInnerRequest === undefined || adminMappingsGet200ResponseMappingsInnerRequest === null) {
        throw new Error("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsRequestIdDelete operation.
     * @callback module:api/RequestsApi~adminRequestsRequestIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete request by ID
     * @param {String} requestId The UUID of the logged request
     * @param {module:api/RequestsApi~adminRequestsRequestIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsRequestIdDelete(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling adminRequestsRequestIdDelete");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/{requestId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsRequestIdGet operation.
     * @callback module:api/RequestsApi~adminRequestsRequestIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get request by ID
     * @param {String} requestId The UUID of the logged request
     * @param {module:api/RequestsApi~adminRequestsRequestIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsRequestIdGet(requestId, callback) {
      let postBody = null;
      // verify the required parameter 'requestId' is set
      if (requestId === undefined || requestId === null) {
        throw new Error("Missing the required parameter 'requestId' when calling adminRequestsRequestIdGet");
      }

      let pathParams = {
        'requestId': requestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/{requestId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsResetPost operation.
     * @callback module:api/RequestsApi~adminRequestsResetPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty the request journal
     * @param {module:api/RequestsApi~adminRequestsResetPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsResetPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRequestsUnmatchedGet operation.
     * @callback module:api/RequestsApi~adminRequestsUnmatchedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find unmatched requests
     * Get details of logged requests that weren't matched by any stub mapping
     * @param {module:api/RequestsApi~adminRequestsUnmatchedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRequestsUnmatchedGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/requests/unmatched', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
