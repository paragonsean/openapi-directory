/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminMappingsGet200Response from '../model/AdminMappingsGet200Response';
import AdminRecordingsSnapshotPostRequest from '../model/AdminRecordingsSnapshotPostRequest';
import AdminRecordingsStartPostRequest from '../model/AdminRecordingsStartPostRequest';
import AdminRecordingsStatusGet200Response from '../model/AdminRecordingsStatusGet200Response';

/**
* Recordings service.
* @module api/RecordingsApi
* @version 2.35.0
*/
export default class RecordingsApi {

    /**
    * Constructs a new RecordingsApi. 
    * @alias module:api/RecordingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminRecordingsSnapshotPost operation.
     * @callback module:api/RecordingsApi~adminRecordingsSnapshotPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Take a snapshot recording
     * @param {module:model/AdminRecordingsSnapshotPostRequest} adminRecordingsSnapshotPostRequest 
     * @param {module:api/RecordingsApi~adminRecordingsSnapshotPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200Response}
     */
    adminRecordingsSnapshotPost(adminRecordingsSnapshotPostRequest, callback) {
      let postBody = adminRecordingsSnapshotPostRequest;
      // verify the required parameter 'adminRecordingsSnapshotPostRequest' is set
      if (adminRecordingsSnapshotPostRequest === undefined || adminRecordingsSnapshotPostRequest === null) {
        throw new Error("Missing the required parameter 'adminRecordingsSnapshotPostRequest' when calling adminRecordingsSnapshotPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200Response;
      return this.apiClient.callApi(
        '/__admin/recordings/snapshot', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRecordingsStartPost operation.
     * @callback module:api/RecordingsApi~adminRecordingsStartPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start recording
     * Begin recording stub mappings
     * @param {module:model/AdminRecordingsStartPostRequest} adminRecordingsStartPostRequest 
     * @param {module:api/RecordingsApi~adminRecordingsStartPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    adminRecordingsStartPost(adminRecordingsStartPostRequest, callback) {
      let postBody = adminRecordingsStartPostRequest;
      // verify the required parameter 'adminRecordingsStartPostRequest' is set
      if (adminRecordingsStartPostRequest === undefined || adminRecordingsStartPostRequest === null) {
        throw new Error("Missing the required parameter 'adminRecordingsStartPostRequest' when calling adminRecordingsStartPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/__admin/recordings/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRecordingsStatusGet operation.
     * @callback module:api/RecordingsApi~adminRecordingsStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminRecordingsStatusGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get recording status
     * @param {module:api/RecordingsApi~adminRecordingsStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminRecordingsStatusGet200Response}
     */
    adminRecordingsStatusGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminRecordingsStatusGet200Response;
      return this.apiClient.callApi(
        '/__admin/recordings/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the adminRecordingsStopPost operation.
     * @callback module:api/RecordingsApi~adminRecordingsStopPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminMappingsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop recording
     * End recording of stub mappings
     * @param {module:api/RecordingsApi~adminRecordingsStopPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminMappingsGet200Response}
     */
    adminRecordingsStopPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AdminMappingsGet200Response;
      return this.apiClient.callApi(
        '/__admin/recordings/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
