# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class XPathMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matches_xpath: str=None, namespaces: object=None, value_pattern: object=None):
        """XPathMatch - a model defined in OpenAPI

        :param matches_xpath: The matches_xpath of this XPathMatch.
        :param namespaces: The namespaces of this XPathMatch.
        :param value_pattern: The value_pattern of this XPathMatch.
        """
        self.openapi_types = {
            'matches_xpath': str,
            'namespaces': object,
            'value_pattern': object
        }

        self.attribute_map = {
            'matches_xpath': 'matchesXpath',
            'namespaces': 'namespaces',
            'value_pattern': 'valuePattern'
        }

        self._matches_xpath = matches_xpath
        self._namespaces = namespaces
        self._value_pattern = value_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XPathMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XPath_match of this XPathMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matches_xpath(self):
        """Gets the matches_xpath of this XPathMatch.


        :return: The matches_xpath of this XPathMatch.
        :rtype: str
        """
        return self._matches_xpath

    @matches_xpath.setter
    def matches_xpath(self, matches_xpath):
        """Sets the matches_xpath of this XPathMatch.


        :param matches_xpath: The matches_xpath of this XPathMatch.
        :type matches_xpath: str
        """
        if matches_xpath is None:
            raise ValueError("Invalid value for `matches_xpath`, must not be `None`")

        self._matches_xpath = matches_xpath

    @property
    def namespaces(self):
        """Gets the namespaces of this XPathMatch.


        :return: The namespaces of this XPathMatch.
        :rtype: object
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this XPathMatch.


        :param namespaces: The namespaces of this XPathMatch.
        :type namespaces: object
        """

        self._namespaces = namespaces

    @property
    def value_pattern(self):
        """Gets the value_pattern of this XPathMatch.


        :return: The value_pattern of this XPathMatch.
        :rtype: object
        """
        return self._value_pattern

    @value_pattern.setter
    def value_pattern(self, value_pattern):
        """Sets the value_pattern of this XPathMatch.


        :param value_pattern: The value_pattern of this XPathMatch.
        :type value_pattern: object
        """

        self._value_pattern = value_pattern
