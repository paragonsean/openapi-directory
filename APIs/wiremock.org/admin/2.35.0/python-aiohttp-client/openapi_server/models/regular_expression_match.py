# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegularExpressionMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, matches: str=None):
        """RegularExpressionMatch - a model defined in OpenAPI

        :param matches: The matches of this RegularExpressionMatch.
        """
        self.openapi_types = {
            'matches': str
        }

        self.attribute_map = {
            'matches': 'matches'
        }

        self._matches = matches

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegularExpressionMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Regular_expression_match of this RegularExpressionMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def matches(self):
        """Gets the matches of this RegularExpressionMatch.


        :return: The matches of this RegularExpressionMatch.
        :rtype: str
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this RegularExpressionMatch.


        :param matches: The matches of this RegularExpressionMatch.
        :type matches: str
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")

        self._matches = matches
