# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StringContains(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contains: str=None):
        """StringContains - a model defined in OpenAPI

        :param contains: The contains of this StringContains.
        """
        self.openapi_types = {
            'contains': str
        }

        self.attribute_map = {
            'contains': 'contains'
        }

        self._contains = contains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StringContains':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The String_contains of this StringContains.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contains(self):
        """Gets the contains of this StringContains.


        :return: The contains of this StringContains.
        :rtype: str
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this StringContains.


        :param contains: The contains of this StringContains.
        :type contains: str
        """
        if contains is None:
            raise ValueError("Invalid value for `contains`, must not be `None`")

        self._contains = contains
