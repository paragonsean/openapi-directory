# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_mappings_get200_response_mappings_inner_request_basic_auth_credentials import AdminMappingsGet200ResponseMappingsInnerRequestBasicAuthCredentials
from openapi_server import util


class AdminRecordingsSnapshotPostRequestAllOfFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids: List[str]=None, basic_auth_credentials: AdminMappingsGet200ResponseMappingsInnerRequestBasicAuthCredentials=None, body_patterns: List[object]=None, cookies: object=None, headers: object=None, method: str=None, query_parameters: object=None, url: str=None, url_path: str=None, url_path_pattern: str=None, url_pattern: str=None):
        """AdminRecordingsSnapshotPostRequestAllOfFilters - a model defined in OpenAPI

        :param ids: The ids of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param basic_auth_credentials: The basic_auth_credentials of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param body_patterns: The body_patterns of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param cookies: The cookies of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param headers: The headers of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param method: The method of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param query_parameters: The query_parameters of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param url: The url of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param url_path: The url_path of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param url_path_pattern: The url_path_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :param url_pattern: The url_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        """
        self.openapi_types = {
            'ids': List[str],
            'basic_auth_credentials': AdminMappingsGet200ResponseMappingsInnerRequestBasicAuthCredentials,
            'body_patterns': List[object],
            'cookies': object,
            'headers': object,
            'method': str,
            'query_parameters': object,
            'url': str,
            'url_path': str,
            'url_path_pattern': str,
            'url_pattern': str
        }

        self.attribute_map = {
            'ids': 'ids',
            'basic_auth_credentials': 'basicAuthCredentials',
            'body_patterns': 'bodyPatterns',
            'cookies': 'cookies',
            'headers': 'headers',
            'method': 'method',
            'query_parameters': 'queryParameters',
            'url': 'url',
            'url_path': 'urlPath',
            'url_path_pattern': 'urlPathPattern',
            'url_pattern': 'urlPattern'
        }

        self._ids = ids
        self._basic_auth_credentials = basic_auth_credentials
        self._body_patterns = body_patterns
        self._cookies = cookies
        self._headers = headers
        self._method = method
        self._query_parameters = query_parameters
        self._url = url
        self._url_path = url_path
        self._url_path_pattern = url_path_pattern
        self._url_pattern = url_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRecordingsSnapshotPostRequestAllOfFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ___admin_recordings_snapshot_post_request_allOf_filters of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this AdminRecordingsSnapshotPostRequestAllOfFilters.


        :return: The ids of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this AdminRecordingsSnapshotPostRequestAllOfFilters.


        :param ids: The ids of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type ids: List[str]
        """

        self._ids = ids

    @property
    def basic_auth_credentials(self):
        """Gets the basic_auth_credentials of this AdminRecordingsSnapshotPostRequestAllOfFilters.


        :return: The basic_auth_credentials of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: AdminMappingsGet200ResponseMappingsInnerRequestBasicAuthCredentials
        """
        return self._basic_auth_credentials

    @basic_auth_credentials.setter
    def basic_auth_credentials(self, basic_auth_credentials):
        """Sets the basic_auth_credentials of this AdminRecordingsSnapshotPostRequestAllOfFilters.


        :param basic_auth_credentials: The basic_auth_credentials of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type basic_auth_credentials: AdminMappingsGet200ResponseMappingsInnerRequestBasicAuthCredentials
        """

        self._basic_auth_credentials = basic_auth_credentials

    @property
    def body_patterns(self):
        """Gets the body_patterns of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :return: The body_patterns of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: List[object]
        """
        return self._body_patterns

    @body_patterns.setter
    def body_patterns(self, body_patterns):
        """Sets the body_patterns of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Request body patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :param body_patterns: The body_patterns of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type body_patterns: List[object]
        """

        self._body_patterns = body_patterns

    @property
    def cookies(self):
        """Gets the cookies of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :return: The cookies of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: object
        """
        return self._cookies

    @cookies.setter
    def cookies(self, cookies):
        """Sets the cookies of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Cookie patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :param cookies: The cookies of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type cookies: object
        """

        self._cookies = cookies

    @property
    def headers(self):
        """Gets the headers of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :return: The headers of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: object
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Header patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :param headers: The headers of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type headers: object
        """

        self._headers = headers

    @property
    def method(self):
        """Gets the method of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The HTTP request method e.g. GET

        :return: The method of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The HTTP request method e.g. GET

        :param method: The method of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type method: str
        """

        self._method = method

    @property
    def query_parameters(self):
        """Gets the query_parameters of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :return: The query_parameters of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: object
        """
        return self._query_parameters

    @query_parameters.setter
    def query_parameters(self, query_parameters):
        """Sets the query_parameters of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        Query parameter patterns to match against in the <key>: { \"<predicate>\": \"<value>\" } form

        :param query_parameters: The query_parameters of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type query_parameters: object
        """

        self._query_parameters = query_parameters

    @property
    def url(self):
        """Gets the url of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :return: The url of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path and query to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :param url: The url of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type url: str
        """

        self._url = url

    @property
    def url_path(self):
        """Gets the url_path of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :return: The url_path of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: str
        """
        return self._url_path

    @url_path.setter
    def url_path(self, url_path):
        """Sets the url_path of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path to match exactly against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :param url_path: The url_path of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type url_path: str
        """

        self._url_path = url_path

    @property
    def url_path_pattern(self):
        """Gets the url_path_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :return: The url_path_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: str
        """
        return self._url_path_pattern

    @url_path_pattern.setter
    def url_path_pattern(self, url_path_pattern):
        """Sets the url_path_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :param url_path_pattern: The url_path_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type url_path_pattern: str
        """

        self._url_path_pattern = url_path_pattern

    @property
    def url_pattern(self):
        """Gets the url_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :return: The url_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :rtype: str
        """
        return self._url_pattern

    @url_pattern.setter
    def url_pattern(self, url_pattern):
        """Sets the url_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.

        The path and query regex to match against. Only one of url, urlPattern, urlPath or urlPathPattern may be specified.

        :param url_pattern: The url_pattern of this AdminRecordingsSnapshotPostRequestAllOfFilters.
        :type url_pattern: str
        """

        self._url_pattern = url_pattern
