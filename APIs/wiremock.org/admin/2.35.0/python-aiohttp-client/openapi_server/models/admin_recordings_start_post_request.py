# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.admin_recordings_snapshot_post_request_all_of_capture_headers_value import AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue
from openapi_server.models.admin_recordings_snapshot_post_request_all_of_extract_body_criteria import AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
from openapi_server.models.admin_recordings_snapshot_post_request_all_of_request_body_pattern import AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
from openapi_server.models.admin_recordings_start_post_request_all_of_filters import AdminRecordingsStartPostRequestAllOfFilters
from openapi_server import util


class AdminRecordingsStartPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capture_headers: Dict[str, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue]=None, extract_body_criteria: AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria=None, persist: bool=True, repeats_as_scenarios: bool=True, request_body_pattern: AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern=None, transformer_parameters: object=None, transformers: List[str]=None, filters: AdminRecordingsStartPostRequestAllOfFilters=None, target_base_url: str=None):
        """AdminRecordingsStartPostRequest - a model defined in OpenAPI

        :param capture_headers: The capture_headers of this AdminRecordingsStartPostRequest.
        :param extract_body_criteria: The extract_body_criteria of this AdminRecordingsStartPostRequest.
        :param persist: The persist of this AdminRecordingsStartPostRequest.
        :param repeats_as_scenarios: The repeats_as_scenarios of this AdminRecordingsStartPostRequest.
        :param request_body_pattern: The request_body_pattern of this AdminRecordingsStartPostRequest.
        :param transformer_parameters: The transformer_parameters of this AdminRecordingsStartPostRequest.
        :param transformers: The transformers of this AdminRecordingsStartPostRequest.
        :param filters: The filters of this AdminRecordingsStartPostRequest.
        :param target_base_url: The target_base_url of this AdminRecordingsStartPostRequest.
        """
        self.openapi_types = {
            'capture_headers': Dict[str, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue],
            'extract_body_criteria': AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria,
            'persist': bool,
            'repeats_as_scenarios': bool,
            'request_body_pattern': AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern,
            'transformer_parameters': object,
            'transformers': List[str],
            'filters': AdminRecordingsStartPostRequestAllOfFilters,
            'target_base_url': str
        }

        self.attribute_map = {
            'capture_headers': 'captureHeaders',
            'extract_body_criteria': 'extractBodyCriteria',
            'persist': 'persist',
            'repeats_as_scenarios': 'repeatsAsScenarios',
            'request_body_pattern': 'requestBodyPattern',
            'transformer_parameters': 'transformerParameters',
            'transformers': 'transformers',
            'filters': 'filters',
            'target_base_url': 'targetBaseUrl'
        }

        self._capture_headers = capture_headers
        self._extract_body_criteria = extract_body_criteria
        self._persist = persist
        self._repeats_as_scenarios = repeats_as_scenarios
        self._request_body_pattern = request_body_pattern
        self._transformer_parameters = transformer_parameters
        self._transformers = transformers
        self._filters = filters
        self._target_base_url = target_base_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRecordingsStartPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ___admin_recordings_start_post_request of this AdminRecordingsStartPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capture_headers(self):
        """Gets the capture_headers of this AdminRecordingsStartPostRequest.

        Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false

        :return: The capture_headers of this AdminRecordingsStartPostRequest.
        :rtype: Dict[str, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue]
        """
        return self._capture_headers

    @capture_headers.setter
    def capture_headers(self, capture_headers):
        """Sets the capture_headers of this AdminRecordingsStartPostRequest.

        Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \"caseInsensitive\", which defaults to false

        :param capture_headers: The capture_headers of this AdminRecordingsStartPostRequest.
        :type capture_headers: Dict[str, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue]
        """

        self._capture_headers = capture_headers

    @property
    def extract_body_criteria(self):
        """Gets the extract_body_criteria of this AdminRecordingsStartPostRequest.


        :return: The extract_body_criteria of this AdminRecordingsStartPostRequest.
        :rtype: AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
        """
        return self._extract_body_criteria

    @extract_body_criteria.setter
    def extract_body_criteria(self, extract_body_criteria):
        """Sets the extract_body_criteria of this AdminRecordingsStartPostRequest.


        :param extract_body_criteria: The extract_body_criteria of this AdminRecordingsStartPostRequest.
        :type extract_body_criteria: AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
        """

        self._extract_body_criteria = extract_body_criteria

    @property
    def persist(self):
        """Gets the persist of this AdminRecordingsStartPostRequest.

        Whether to save stub mappings to the file system or just return them

        :return: The persist of this AdminRecordingsStartPostRequest.
        :rtype: bool
        """
        return self._persist

    @persist.setter
    def persist(self, persist):
        """Sets the persist of this AdminRecordingsStartPostRequest.

        Whether to save stub mappings to the file system or just return them

        :param persist: The persist of this AdminRecordingsStartPostRequest.
        :type persist: bool
        """

        self._persist = persist

    @property
    def repeats_as_scenarios(self):
        """Gets the repeats_as_scenarios of this AdminRecordingsStartPostRequest.

        When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded

        :return: The repeats_as_scenarios of this AdminRecordingsStartPostRequest.
        :rtype: bool
        """
        return self._repeats_as_scenarios

    @repeats_as_scenarios.setter
    def repeats_as_scenarios(self, repeats_as_scenarios):
        """Sets the repeats_as_scenarios of this AdminRecordingsStartPostRequest.

        When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded

        :param repeats_as_scenarios: The repeats_as_scenarios of this AdminRecordingsStartPostRequest.
        :type repeats_as_scenarios: bool
        """

        self._repeats_as_scenarios = repeats_as_scenarios

    @property
    def request_body_pattern(self):
        """Gets the request_body_pattern of this AdminRecordingsStartPostRequest.


        :return: The request_body_pattern of this AdminRecordingsStartPostRequest.
        :rtype: AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
        """
        return self._request_body_pattern

    @request_body_pattern.setter
    def request_body_pattern(self, request_body_pattern):
        """Sets the request_body_pattern of this AdminRecordingsStartPostRequest.


        :param request_body_pattern: The request_body_pattern of this AdminRecordingsStartPostRequest.
        :type request_body_pattern: AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
        """

        self._request_body_pattern = request_body_pattern

    @property
    def transformer_parameters(self):
        """Gets the transformer_parameters of this AdminRecordingsStartPostRequest.

        List of names of stub mappings transformers to apply to generated stubs

        :return: The transformer_parameters of this AdminRecordingsStartPostRequest.
        :rtype: object
        """
        return self._transformer_parameters

    @transformer_parameters.setter
    def transformer_parameters(self, transformer_parameters):
        """Sets the transformer_parameters of this AdminRecordingsStartPostRequest.

        List of names of stub mappings transformers to apply to generated stubs

        :param transformer_parameters: The transformer_parameters of this AdminRecordingsStartPostRequest.
        :type transformer_parameters: object
        """

        self._transformer_parameters = transformer_parameters

    @property
    def transformers(self):
        """Gets the transformers of this AdminRecordingsStartPostRequest.

        Parameters to pass to stub mapping transformers

        :return: The transformers of this AdminRecordingsStartPostRequest.
        :rtype: List[str]
        """
        return self._transformers

    @transformers.setter
    def transformers(self, transformers):
        """Sets the transformers of this AdminRecordingsStartPostRequest.

        Parameters to pass to stub mapping transformers

        :param transformers: The transformers of this AdminRecordingsStartPostRequest.
        :type transformers: List[str]
        """

        self._transformers = transformers

    @property
    def filters(self):
        """Gets the filters of this AdminRecordingsStartPostRequest.


        :return: The filters of this AdminRecordingsStartPostRequest.
        :rtype: AdminRecordingsStartPostRequestAllOfFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this AdminRecordingsStartPostRequest.


        :param filters: The filters of this AdminRecordingsStartPostRequest.
        :type filters: AdminRecordingsStartPostRequestAllOfFilters
        """

        self._filters = filters

    @property
    def target_base_url(self):
        """Gets the target_base_url of this AdminRecordingsStartPostRequest.

        Target URL when using the record and playback API

        :return: The target_base_url of this AdminRecordingsStartPostRequest.
        :rtype: str
        """
        return self._target_base_url

    @target_base_url.setter
    def target_base_url(self, target_base_url):
        """Sets the target_base_url of this AdminRecordingsStartPostRequest.

        Target URL when using the record and playback API

        :param target_base_url: The target_base_url of this AdminRecordingsStartPostRequest.
        :type target_base_url: str
        """

        self._target_base_url = target_base_url
