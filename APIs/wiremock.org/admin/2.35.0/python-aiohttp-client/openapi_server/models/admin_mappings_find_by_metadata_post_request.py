# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.json_equals import JSONEquals
from openapi_server.models.json_path_match import JSONPathMatch
from openapi_server.models.negative_regular_expression_match import NegativeRegularExpressionMatch
from openapi_server.models.regular_expression_match import RegularExpressionMatch
from openapi_server.models.string_contains import StringContains
from openapi_server.models.string_equals import StringEquals
from openapi_server.models.xml_equality import XMLEquality
from openapi_server.models.x_path_match import XPathMatch
from openapi_server import util


class AdminMappingsFindByMetadataPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_insensitive: bool=None, equal_to: bool=None, contains: str=None, matches: str=None, does_not_match: str=None, equal_to_json: str=None, ignore_array_order: bool=None, ignore_extra_elements: bool=None, matches_json_path: str=None, equal_to_xml: str=None, matches_xpath: str=None, namespaces: object=None, value_pattern: object=None):
        """AdminMappingsFindByMetadataPostRequest - a model defined in OpenAPI

        :param case_insensitive: The case_insensitive of this AdminMappingsFindByMetadataPostRequest.
        :param equal_to: The equal_to of this AdminMappingsFindByMetadataPostRequest.
        :param contains: The contains of this AdminMappingsFindByMetadataPostRequest.
        :param matches: The matches of this AdminMappingsFindByMetadataPostRequest.
        :param does_not_match: The does_not_match of this AdminMappingsFindByMetadataPostRequest.
        :param equal_to_json: The equal_to_json of this AdminMappingsFindByMetadataPostRequest.
        :param ignore_array_order: The ignore_array_order of this AdminMappingsFindByMetadataPostRequest.
        :param ignore_extra_elements: The ignore_extra_elements of this AdminMappingsFindByMetadataPostRequest.
        :param matches_json_path: The matches_json_path of this AdminMappingsFindByMetadataPostRequest.
        :param equal_to_xml: The equal_to_xml of this AdminMappingsFindByMetadataPostRequest.
        :param matches_xpath: The matches_xpath of this AdminMappingsFindByMetadataPostRequest.
        :param namespaces: The namespaces of this AdminMappingsFindByMetadataPostRequest.
        :param value_pattern: The value_pattern of this AdminMappingsFindByMetadataPostRequest.
        """
        self.openapi_types = {
            'case_insensitive': bool,
            'equal_to': bool,
            'contains': str,
            'matches': str,
            'does_not_match': str,
            'equal_to_json': str,
            'ignore_array_order': bool,
            'ignore_extra_elements': bool,
            'matches_json_path': str,
            'equal_to_xml': str,
            'matches_xpath': str,
            'namespaces': object,
            'value_pattern': object
        }

        self.attribute_map = {
            'case_insensitive': 'caseInsensitive',
            'equal_to': 'equalTo',
            'contains': 'contains',
            'matches': 'matches',
            'does_not_match': 'doesNotMatch',
            'equal_to_json': 'equalToJson',
            'ignore_array_order': 'ignoreArrayOrder',
            'ignore_extra_elements': 'ignoreExtraElements',
            'matches_json_path': 'matchesJsonPath',
            'equal_to_xml': 'equalToXml',
            'matches_xpath': 'matchesXpath',
            'namespaces': 'namespaces',
            'value_pattern': 'valuePattern'
        }

        self._case_insensitive = case_insensitive
        self._equal_to = equal_to
        self._contains = contains
        self._matches = matches
        self._does_not_match = does_not_match
        self._equal_to_json = equal_to_json
        self._ignore_array_order = ignore_array_order
        self._ignore_extra_elements = ignore_extra_elements
        self._matches_json_path = matches_json_path
        self._equal_to_xml = equal_to_xml
        self._matches_xpath = matches_xpath
        self._namespaces = namespaces
        self._value_pattern = value_pattern

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminMappingsFindByMetadataPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ___admin_mappings_find_by_metadata_post_request of this AdminMappingsFindByMetadataPostRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_insensitive(self):
        """Gets the case_insensitive of this AdminMappingsFindByMetadataPostRequest.


        :return: The case_insensitive of this AdminMappingsFindByMetadataPostRequest.
        :rtype: bool
        """
        return self._case_insensitive

    @case_insensitive.setter
    def case_insensitive(self, case_insensitive):
        """Sets the case_insensitive of this AdminMappingsFindByMetadataPostRequest.


        :param case_insensitive: The case_insensitive of this AdminMappingsFindByMetadataPostRequest.
        :type case_insensitive: bool
        """

        self._case_insensitive = case_insensitive

    @property
    def equal_to(self):
        """Gets the equal_to of this AdminMappingsFindByMetadataPostRequest.


        :return: The equal_to of this AdminMappingsFindByMetadataPostRequest.
        :rtype: bool
        """
        return self._equal_to

    @equal_to.setter
    def equal_to(self, equal_to):
        """Sets the equal_to of this AdminMappingsFindByMetadataPostRequest.


        :param equal_to: The equal_to of this AdminMappingsFindByMetadataPostRequest.
        :type equal_to: bool
        """
        if equal_to is None:
            raise ValueError("Invalid value for `equal_to`, must not be `None`")

        self._equal_to = equal_to

    @property
    def contains(self):
        """Gets the contains of this AdminMappingsFindByMetadataPostRequest.


        :return: The contains of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._contains

    @contains.setter
    def contains(self, contains):
        """Sets the contains of this AdminMappingsFindByMetadataPostRequest.


        :param contains: The contains of this AdminMappingsFindByMetadataPostRequest.
        :type contains: str
        """
        if contains is None:
            raise ValueError("Invalid value for `contains`, must not be `None`")

        self._contains = contains

    @property
    def matches(self):
        """Gets the matches of this AdminMappingsFindByMetadataPostRequest.


        :return: The matches of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this AdminMappingsFindByMetadataPostRequest.


        :param matches: The matches of this AdminMappingsFindByMetadataPostRequest.
        :type matches: str
        """
        if matches is None:
            raise ValueError("Invalid value for `matches`, must not be `None`")

        self._matches = matches

    @property
    def does_not_match(self):
        """Gets the does_not_match of this AdminMappingsFindByMetadataPostRequest.


        :return: The does_not_match of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._does_not_match

    @does_not_match.setter
    def does_not_match(self, does_not_match):
        """Sets the does_not_match of this AdminMappingsFindByMetadataPostRequest.


        :param does_not_match: The does_not_match of this AdminMappingsFindByMetadataPostRequest.
        :type does_not_match: str
        """
        if does_not_match is None:
            raise ValueError("Invalid value for `does_not_match`, must not be `None`")

        self._does_not_match = does_not_match

    @property
    def equal_to_json(self):
        """Gets the equal_to_json of this AdminMappingsFindByMetadataPostRequest.


        :return: The equal_to_json of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._equal_to_json

    @equal_to_json.setter
    def equal_to_json(self, equal_to_json):
        """Sets the equal_to_json of this AdminMappingsFindByMetadataPostRequest.


        :param equal_to_json: The equal_to_json of this AdminMappingsFindByMetadataPostRequest.
        :type equal_to_json: str
        """
        if equal_to_json is None:
            raise ValueError("Invalid value for `equal_to_json`, must not be `None`")

        self._equal_to_json = equal_to_json

    @property
    def ignore_array_order(self):
        """Gets the ignore_array_order of this AdminMappingsFindByMetadataPostRequest.


        :return: The ignore_array_order of this AdminMappingsFindByMetadataPostRequest.
        :rtype: bool
        """
        return self._ignore_array_order

    @ignore_array_order.setter
    def ignore_array_order(self, ignore_array_order):
        """Sets the ignore_array_order of this AdminMappingsFindByMetadataPostRequest.


        :param ignore_array_order: The ignore_array_order of this AdminMappingsFindByMetadataPostRequest.
        :type ignore_array_order: bool
        """

        self._ignore_array_order = ignore_array_order

    @property
    def ignore_extra_elements(self):
        """Gets the ignore_extra_elements of this AdminMappingsFindByMetadataPostRequest.


        :return: The ignore_extra_elements of this AdminMappingsFindByMetadataPostRequest.
        :rtype: bool
        """
        return self._ignore_extra_elements

    @ignore_extra_elements.setter
    def ignore_extra_elements(self, ignore_extra_elements):
        """Sets the ignore_extra_elements of this AdminMappingsFindByMetadataPostRequest.


        :param ignore_extra_elements: The ignore_extra_elements of this AdminMappingsFindByMetadataPostRequest.
        :type ignore_extra_elements: bool
        """

        self._ignore_extra_elements = ignore_extra_elements

    @property
    def matches_json_path(self):
        """Gets the matches_json_path of this AdminMappingsFindByMetadataPostRequest.


        :return: The matches_json_path of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._matches_json_path

    @matches_json_path.setter
    def matches_json_path(self, matches_json_path):
        """Sets the matches_json_path of this AdminMappingsFindByMetadataPostRequest.


        :param matches_json_path: The matches_json_path of this AdminMappingsFindByMetadataPostRequest.
        :type matches_json_path: str
        """
        if matches_json_path is None:
            raise ValueError("Invalid value for `matches_json_path`, must not be `None`")

        self._matches_json_path = matches_json_path

    @property
    def equal_to_xml(self):
        """Gets the equal_to_xml of this AdminMappingsFindByMetadataPostRequest.


        :return: The equal_to_xml of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._equal_to_xml

    @equal_to_xml.setter
    def equal_to_xml(self, equal_to_xml):
        """Sets the equal_to_xml of this AdminMappingsFindByMetadataPostRequest.


        :param equal_to_xml: The equal_to_xml of this AdminMappingsFindByMetadataPostRequest.
        :type equal_to_xml: str
        """
        if equal_to_xml is None:
            raise ValueError("Invalid value for `equal_to_xml`, must not be `None`")

        self._equal_to_xml = equal_to_xml

    @property
    def matches_xpath(self):
        """Gets the matches_xpath of this AdminMappingsFindByMetadataPostRequest.


        :return: The matches_xpath of this AdminMappingsFindByMetadataPostRequest.
        :rtype: str
        """
        return self._matches_xpath

    @matches_xpath.setter
    def matches_xpath(self, matches_xpath):
        """Sets the matches_xpath of this AdminMappingsFindByMetadataPostRequest.


        :param matches_xpath: The matches_xpath of this AdminMappingsFindByMetadataPostRequest.
        :type matches_xpath: str
        """
        if matches_xpath is None:
            raise ValueError("Invalid value for `matches_xpath`, must not be `None`")

        self._matches_xpath = matches_xpath

    @property
    def namespaces(self):
        """Gets the namespaces of this AdminMappingsFindByMetadataPostRequest.


        :return: The namespaces of this AdminMappingsFindByMetadataPostRequest.
        :rtype: object
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this AdminMappingsFindByMetadataPostRequest.


        :param namespaces: The namespaces of this AdminMappingsFindByMetadataPostRequest.
        :type namespaces: object
        """

        self._namespaces = namespaces

    @property
    def value_pattern(self):
        """Gets the value_pattern of this AdminMappingsFindByMetadataPostRequest.


        :return: The value_pattern of this AdminMappingsFindByMetadataPostRequest.
        :rtype: object
        """
        return self._value_pattern

    @value_pattern.setter
    def value_pattern(self, value_pattern):
        """Sets the value_pattern of this AdminMappingsFindByMetadataPostRequest.


        :param value_pattern: The value_pattern of this AdminMappingsFindByMetadataPostRequest.
        :type value_pattern: object
        """

        self._value_pattern = value_pattern
