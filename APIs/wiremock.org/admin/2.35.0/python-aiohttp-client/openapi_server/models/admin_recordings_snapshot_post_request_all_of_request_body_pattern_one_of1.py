# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, case_insensitive: bool=False, matcher: str=None):
        """AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1 - a model defined in OpenAPI

        :param case_insensitive: The case_insensitive of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        :param matcher: The matcher of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        """
        self.openapi_types = {
            'case_insensitive': bool,
            'matcher': str
        }

        self.attribute_map = {
            'case_insensitive': 'caseInsensitive',
            'matcher': 'matcher'
        }

        self._case_insensitive = case_insensitive
        self._matcher = matcher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ___admin_recordings_snapshot_post_request_allOf_requestBodyPattern_oneOf_1 of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def case_insensitive(self):
        """Gets the case_insensitive of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.

        Match body using case-insensitive string comparison

        :return: The case_insensitive of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        :rtype: bool
        """
        return self._case_insensitive

    @case_insensitive.setter
    def case_insensitive(self, case_insensitive):
        """Sets the case_insensitive of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.

        Match body using case-insensitive string comparison

        :param case_insensitive: The case_insensitive of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        :type case_insensitive: bool
        """

        self._case_insensitive = case_insensitive

    @property
    def matcher(self):
        """Gets the matcher of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.


        :return: The matcher of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        :rtype: str
        """
        return self._matcher

    @matcher.setter
    def matcher(self, matcher):
        """Sets the matcher of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.


        :param matcher: The matcher of this AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.
        :type matcher: str
        """
        allowed_values = ["equalTo"]  # noqa: E501
        if matcher not in allowed_values:
            raise ValueError(
                "Invalid value for `matcher` ({0}), must be one of {1}"
                .format(matcher, allowed_values)
            )

        self._matcher = matcher
