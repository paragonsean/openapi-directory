# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NegativeRegularExpressionMatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, does_not_match: str=None):
        """NegativeRegularExpressionMatch - a model defined in OpenAPI

        :param does_not_match: The does_not_match of this NegativeRegularExpressionMatch.
        """
        self.openapi_types = {
            'does_not_match': str
        }

        self.attribute_map = {
            'does_not_match': 'doesNotMatch'
        }

        self._does_not_match = does_not_match

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NegativeRegularExpressionMatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Negative_regular_expression_match of this NegativeRegularExpressionMatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def does_not_match(self):
        """Gets the does_not_match of this NegativeRegularExpressionMatch.


        :return: The does_not_match of this NegativeRegularExpressionMatch.
        :rtype: str
        """
        return self._does_not_match

    @does_not_match.setter
    def does_not_match(self, does_not_match):
        """Sets the does_not_match of this NegativeRegularExpressionMatch.


        :param does_not_match: The does_not_match of this NegativeRegularExpressionMatch.
        :type does_not_match: str
        """
        if does_not_match is None:
            raise ValueError("Invalid value for `does_not_match`, must not be `None`")

        self._does_not_match = does_not_match
