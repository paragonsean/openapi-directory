# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JSONEquals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, equal_to_json: str=None):
        """JSONEquals - a model defined in OpenAPI

        :param equal_to_json: The equal_to_json of this JSONEquals.
        """
        self.openapi_types = {
            'equal_to_json': str
        }

        self.attribute_map = {
            'equal_to_json': 'equalToJson'
        }

        self._equal_to_json = equal_to_json

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JSONEquals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JSON_equals of this JSONEquals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def equal_to_json(self):
        """Gets the equal_to_json of this JSONEquals.


        :return: The equal_to_json of this JSONEquals.
        :rtype: str
        """
        return self._equal_to_json

    @equal_to_json.setter
    def equal_to_json(self, equal_to_json):
        """Sets the equal_to_json of this JSONEquals.


        :param equal_to_json: The equal_to_json of this JSONEquals.
        :type equal_to_json: str
        """
        if equal_to_json is None:
            raise ValueError("Invalid value for `equal_to_json`, must not be `None`")

        self._equal_to_json = equal_to_json
