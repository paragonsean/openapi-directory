# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Uniform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lower: int=None, type: str=None, upper: int=None):
        """Uniform - a model defined in OpenAPI

        :param lower: The lower of this Uniform.
        :param type: The type of this Uniform.
        :param upper: The upper of this Uniform.
        """
        self.openapi_types = {
            'lower': int,
            'type': str,
            'upper': int
        }

        self.attribute_map = {
            'lower': 'lower',
            'type': 'type',
            'upper': 'upper'
        }

        self._lower = lower
        self._type = type
        self._upper = upper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Uniform':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Uniform of this Uniform.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lower(self):
        """Gets the lower of this Uniform.


        :return: The lower of this Uniform.
        :rtype: int
        """
        return self._lower

    @lower.setter
    def lower(self, lower):
        """Sets the lower of this Uniform.


        :param lower: The lower of this Uniform.
        :type lower: int
        """

        self._lower = lower

    @property
    def type(self):
        """Gets the type of this Uniform.


        :return: The type of this Uniform.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Uniform.


        :param type: The type of this Uniform.
        :type type: str
        """
        allowed_values = ["uniform"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def upper(self):
        """Gets the upper of this Uniform.


        :return: The upper of this Uniform.
        :rtype: int
        """
        return self._upper

    @upper.setter
    def upper(self, upper):
        """Sets the upper of this Uniform.


        :param upper: The upper of this Uniform.
        :type upper: int
        """

        self._upper = upper
