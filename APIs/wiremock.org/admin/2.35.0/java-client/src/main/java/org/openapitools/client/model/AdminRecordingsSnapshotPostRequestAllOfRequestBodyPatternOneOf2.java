/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Always match request bodies using equalToJson
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 {
  public static final String SERIALIZED_NAME_IGNORE_ARRAY_ORDER = "ignoreArrayOrder";
  @SerializedName(SERIALIZED_NAME_IGNORE_ARRAY_ORDER)
  private Boolean ignoreArrayOrder = true;

  public static final String SERIALIZED_NAME_IGNORE_EXTRA_ELEMENTS = "ignoreExtraElements";
  @SerializedName(SERIALIZED_NAME_IGNORE_EXTRA_ELEMENTS)
  private Boolean ignoreExtraElements = true;

  /**
   * Gets or Sets matcher
   */
  @JsonAdapter(MatcherEnum.Adapter.class)
  public enum MatcherEnum {
    EQUAL_TO_JSON("equalToJson");

    private String value;

    MatcherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MatcherEnum fromValue(String value) {
      for (MatcherEnum b : MatcherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MatcherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MatcherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MatcherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MatcherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MatcherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MATCHER = "matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private MatcherEnum matcher;

  public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2() {
  }

  public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 ignoreArrayOrder(Boolean ignoreArrayOrder) {
    this.ignoreArrayOrder = ignoreArrayOrder;
    return this;
  }

  /**
   * Ignore order of array elements
   * @return ignoreArrayOrder
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreArrayOrder() {
    return ignoreArrayOrder;
  }

  public void setIgnoreArrayOrder(Boolean ignoreArrayOrder) {
    this.ignoreArrayOrder = ignoreArrayOrder;
  }


  public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 ignoreExtraElements(Boolean ignoreExtraElements) {
    this.ignoreExtraElements = ignoreExtraElements;
    return this;
  }

  /**
   * Ignore extra elements in objects
   * @return ignoreExtraElements
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreExtraElements() {
    return ignoreExtraElements;
  }

  public void setIgnoreExtraElements(Boolean ignoreExtraElements) {
    this.ignoreExtraElements = ignoreExtraElements;
  }


  public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 matcher(MatcherEnum matcher) {
    this.matcher = matcher;
    return this;
  }

  /**
   * Get matcher
   * @return matcher
   */
  @javax.annotation.Nullable
  public MatcherEnum getMatcher() {
    return matcher;
  }

  public void setMatcher(MatcherEnum matcher) {
    this.matcher = matcher;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 adminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 = (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2) o;
    return Objects.equals(this.ignoreArrayOrder, adminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.ignoreArrayOrder) &&
        Objects.equals(this.ignoreExtraElements, adminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.ignoreExtraElements) &&
        Objects.equals(this.matcher, adminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.matcher);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreArrayOrder, ignoreExtraElements, matcher);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 {\n");
    sb.append("    ignoreArrayOrder: ").append(toIndentedString(ignoreArrayOrder)).append("\n");
    sb.append("    ignoreExtraElements: ").append(toIndentedString(ignoreExtraElements)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreArrayOrder");
    openapiFields.add("ignoreExtraElements");
    openapiFields.add("matcher");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 is not found in the empty JSON string", AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) && !jsonObj.get("matcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matcher").toString()));
      }
      // validate the optional field `matcher`
      if (jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) {
        MatcherEnum.validateJsonElement(jsonObj.get("matcher"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2>() {
           @Override
           public void write(JsonWriter out, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2
   * @throws IOException if the JSON string is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2
   */
  public static AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.class);
  }

  /**
   * Convert an instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

