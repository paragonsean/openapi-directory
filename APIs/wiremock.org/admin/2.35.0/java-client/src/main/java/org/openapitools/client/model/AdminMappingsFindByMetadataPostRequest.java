/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JSONEquals;
import org.openapitools.client.model.JSONPathMatch;
import org.openapitools.client.model.NegativeRegularExpressionMatch;
import org.openapitools.client.model.RegularExpressionMatch;
import org.openapitools.client.model.StringContains;
import org.openapitools.client.model.StringEquals;
import org.openapitools.client.model.XMLEquality;
import org.openapitools.client.model.XPathMatch;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminMappingsFindByMetadataPostRequest extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AdminMappingsFindByMetadataPostRequest.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AdminMappingsFindByMetadataPostRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AdminMappingsFindByMetadataPostRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StringEquals> adapterStringEquals = gson.getDelegateAdapter(this, TypeToken.get(StringEquals.class));
            final TypeAdapter<StringContains> adapterStringContains = gson.getDelegateAdapter(this, TypeToken.get(StringContains.class));
            final TypeAdapter<RegularExpressionMatch> adapterRegularExpressionMatch = gson.getDelegateAdapter(this, TypeToken.get(RegularExpressionMatch.class));
            final TypeAdapter<NegativeRegularExpressionMatch> adapterNegativeRegularExpressionMatch = gson.getDelegateAdapter(this, TypeToken.get(NegativeRegularExpressionMatch.class));
            final TypeAdapter<JSONEquals> adapterJSONEquals = gson.getDelegateAdapter(this, TypeToken.get(JSONEquals.class));
            final TypeAdapter<JSONPathMatch> adapterJSONPathMatch = gson.getDelegateAdapter(this, TypeToken.get(JSONPathMatch.class));
            final TypeAdapter<XMLEquality> adapterXMLEquality = gson.getDelegateAdapter(this, TypeToken.get(XMLEquality.class));
            final TypeAdapter<XPathMatch> adapterXPathMatch = gson.getDelegateAdapter(this, TypeToken.get(XPathMatch.class));

            return (TypeAdapter<T>) new TypeAdapter<AdminMappingsFindByMetadataPostRequest>() {
                @Override
                public void write(JsonWriter out, AdminMappingsFindByMetadataPostRequest value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `StringEquals`
                    if (value.getActualInstance() instanceof StringEquals) {
                        JsonElement element = adapterStringEquals.toJsonTree((StringEquals)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `StringContains`
                    if (value.getActualInstance() instanceof StringContains) {
                        JsonElement element = adapterStringContains.toJsonTree((StringContains)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RegularExpressionMatch`
                    if (value.getActualInstance() instanceof RegularExpressionMatch) {
                        JsonElement element = adapterRegularExpressionMatch.toJsonTree((RegularExpressionMatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NegativeRegularExpressionMatch`
                    if (value.getActualInstance() instanceof NegativeRegularExpressionMatch) {
                        JsonElement element = adapterNegativeRegularExpressionMatch.toJsonTree((NegativeRegularExpressionMatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `JSONEquals`
                    if (value.getActualInstance() instanceof JSONEquals) {
                        JsonElement element = adapterJSONEquals.toJsonTree((JSONEquals)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `JSONPathMatch`
                    if (value.getActualInstance() instanceof JSONPathMatch) {
                        JsonElement element = adapterJSONPathMatch.toJsonTree((JSONPathMatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `XMLEquality`
                    if (value.getActualInstance() instanceof XMLEquality) {
                        JsonElement element = adapterXMLEquality.toJsonTree((XMLEquality)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `XPathMatch`
                    if (value.getActualInstance() instanceof XPathMatch) {
                        JsonElement element = adapterXPathMatch.toJsonTree((XPathMatch)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch");
                }

                @Override
                public AdminMappingsFindByMetadataPostRequest read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize StringEquals
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StringEquals.validateJsonElement(jsonElement);
                        actualAdapter = adapterStringEquals;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'StringEquals'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StringEquals failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StringEquals'", e);
                    }
                    // deserialize StringContains
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StringContains.validateJsonElement(jsonElement);
                        actualAdapter = adapterStringContains;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'StringContains'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for StringContains failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'StringContains'", e);
                    }
                    // deserialize RegularExpressionMatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RegularExpressionMatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterRegularExpressionMatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RegularExpressionMatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RegularExpressionMatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RegularExpressionMatch'", e);
                    }
                    // deserialize NegativeRegularExpressionMatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NegativeRegularExpressionMatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterNegativeRegularExpressionMatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NegativeRegularExpressionMatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NegativeRegularExpressionMatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NegativeRegularExpressionMatch'", e);
                    }
                    // deserialize JSONEquals
                    try {
                        // validate the JSON object to see if any exception is thrown
                        JSONEquals.validateJsonElement(jsonElement);
                        actualAdapter = adapterJSONEquals;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'JSONEquals'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for JSONEquals failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'JSONEquals'", e);
                    }
                    // deserialize JSONPathMatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        JSONPathMatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterJSONPathMatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'JSONPathMatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for JSONPathMatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'JSONPathMatch'", e);
                    }
                    // deserialize XMLEquality
                    try {
                        // validate the JSON object to see if any exception is thrown
                        XMLEquality.validateJsonElement(jsonElement);
                        actualAdapter = adapterXMLEquality;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'XMLEquality'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for XMLEquality failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'XMLEquality'", e);
                    }
                    // deserialize XPathMatch
                    try {
                        // validate the JSON object to see if any exception is thrown
                        XPathMatch.validateJsonElement(jsonElement);
                        actualAdapter = adapterXPathMatch;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'XPathMatch'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for XPathMatch failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'XPathMatch'", e);
                    }

                    if (match == 1) {
                        AdminMappingsFindByMetadataPostRequest ret = new AdminMappingsFindByMetadataPostRequest();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AdminMappingsFindByMetadataPostRequest: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AdminMappingsFindByMetadataPostRequest() {
        super("oneOf", Boolean.FALSE);
    }

    public AdminMappingsFindByMetadataPostRequest(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("StringEquals", StringEquals.class);
        schemas.put("StringContains", StringContains.class);
        schemas.put("RegularExpressionMatch", RegularExpressionMatch.class);
        schemas.put("NegativeRegularExpressionMatch", NegativeRegularExpressionMatch.class);
        schemas.put("JSONEquals", JSONEquals.class);
        schemas.put("JSONPathMatch", JSONPathMatch.class);
        schemas.put("XMLEquality", XMLEquality.class);
        schemas.put("XPathMatch", XPathMatch.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AdminMappingsFindByMetadataPostRequest.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof StringEquals) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StringContains) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RegularExpressionMatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NegativeRegularExpressionMatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof JSONEquals) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof JSONPathMatch) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof XMLEquality) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof XPathMatch) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch");
    }

    /**
     * Get the actual instance, which can be the following:
     * JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch
     *
     * @return The actual instance (JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `StringEquals`. If the actual instance is not `StringEquals`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StringEquals`
     * @throws ClassCastException if the instance is not `StringEquals`
     */
    public StringEquals getStringEquals() throws ClassCastException {
        return (StringEquals)super.getActualInstance();
    }
    /**
     * Get the actual instance of `StringContains`. If the actual instance is not `StringContains`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StringContains`
     * @throws ClassCastException if the instance is not `StringContains`
     */
    public StringContains getStringContains() throws ClassCastException {
        return (StringContains)super.getActualInstance();
    }
    /**
     * Get the actual instance of `RegularExpressionMatch`. If the actual instance is not `RegularExpressionMatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RegularExpressionMatch`
     * @throws ClassCastException if the instance is not `RegularExpressionMatch`
     */
    public RegularExpressionMatch getRegularExpressionMatch() throws ClassCastException {
        return (RegularExpressionMatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NegativeRegularExpressionMatch`. If the actual instance is not `NegativeRegularExpressionMatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NegativeRegularExpressionMatch`
     * @throws ClassCastException if the instance is not `NegativeRegularExpressionMatch`
     */
    public NegativeRegularExpressionMatch getNegativeRegularExpressionMatch() throws ClassCastException {
        return (NegativeRegularExpressionMatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `JSONEquals`. If the actual instance is not `JSONEquals`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `JSONEquals`
     * @throws ClassCastException if the instance is not `JSONEquals`
     */
    public JSONEquals getJSONEquals() throws ClassCastException {
        return (JSONEquals)super.getActualInstance();
    }
    /**
     * Get the actual instance of `JSONPathMatch`. If the actual instance is not `JSONPathMatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `JSONPathMatch`
     * @throws ClassCastException if the instance is not `JSONPathMatch`
     */
    public JSONPathMatch getJSONPathMatch() throws ClassCastException {
        return (JSONPathMatch)super.getActualInstance();
    }
    /**
     * Get the actual instance of `XMLEquality`. If the actual instance is not `XMLEquality`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `XMLEquality`
     * @throws ClassCastException if the instance is not `XMLEquality`
     */
    public XMLEquality getXMLEquality() throws ClassCastException {
        return (XMLEquality)super.getActualInstance();
    }
    /**
     * Get the actual instance of `XPathMatch`. If the actual instance is not `XPathMatch`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `XPathMatch`
     * @throws ClassCastException if the instance is not `XPathMatch`
     */
    public XPathMatch getXPathMatch() throws ClassCastException {
        return (XPathMatch)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AdminMappingsFindByMetadataPostRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with StringEquals
        try {
            StringEquals.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for StringEquals failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with StringContains
        try {
            StringContains.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for StringContains failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RegularExpressionMatch
        try {
            RegularExpressionMatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RegularExpressionMatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NegativeRegularExpressionMatch
        try {
            NegativeRegularExpressionMatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NegativeRegularExpressionMatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with JSONEquals
        try {
            JSONEquals.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for JSONEquals failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with JSONPathMatch
        try {
            JSONPathMatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for JSONPathMatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with XMLEquality
        try {
            XMLEquality.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for XMLEquality failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with XPathMatch
        try {
            XPathMatch.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for XPathMatch failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for AdminMappingsFindByMetadataPostRequest with oneOf schemas: JSONEquals, JSONPathMatch, NegativeRegularExpressionMatch, RegularExpressionMatch, StringContains, StringEquals, XMLEquality, XPathMatch. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of AdminMappingsFindByMetadataPostRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AdminMappingsFindByMetadataPostRequest
     * @throws IOException if the JSON string is invalid with respect to AdminMappingsFindByMetadataPostRequest
     */
    public static AdminMappingsFindByMetadataPostRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AdminMappingsFindByMetadataPostRequest.class);
    }

    /**
     * Convert an instance of AdminMappingsFindByMetadataPostRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

