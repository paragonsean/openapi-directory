/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminMappingsGet200Response;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequest;
import org.openapitools.client.model.AdminRecordingsStartPostRequest;
import org.openapitools.client.model.AdminRecordingsStatusGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecordingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecordingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecordingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRecordingsSnapshotPost
     * @param adminRecordingsSnapshotPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully took a snapshot recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsSnapshotPostCall(AdminRecordingsSnapshotPostRequest adminRecordingsSnapshotPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminRecordingsSnapshotPostRequest;

        // create path and map variables
        String localVarPath = "/__admin/recordings/snapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRecordingsSnapshotPostValidateBeforeCall(AdminRecordingsSnapshotPostRequest adminRecordingsSnapshotPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminRecordingsSnapshotPostRequest' is set
        if (adminRecordingsSnapshotPostRequest == null) {
            throw new ApiException("Missing the required parameter 'adminRecordingsSnapshotPostRequest' when calling adminRecordingsSnapshotPost(Async)");
        }

        return adminRecordingsSnapshotPostCall(adminRecordingsSnapshotPostRequest, _callback);

    }

    /**
     * Take a snapshot recording
     * 
     * @param adminRecordingsSnapshotPostRequest  (required)
     * @return AdminMappingsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully took a snapshot recording </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200Response adminRecordingsSnapshotPost(AdminRecordingsSnapshotPostRequest adminRecordingsSnapshotPostRequest) throws ApiException {
        ApiResponse<AdminMappingsGet200Response> localVarResp = adminRecordingsSnapshotPostWithHttpInfo(adminRecordingsSnapshotPostRequest);
        return localVarResp.getData();
    }

    /**
     * Take a snapshot recording
     * 
     * @param adminRecordingsSnapshotPostRequest  (required)
     * @return ApiResponse&lt;AdminMappingsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully took a snapshot recording </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200Response> adminRecordingsSnapshotPostWithHttpInfo(AdminRecordingsSnapshotPostRequest adminRecordingsSnapshotPostRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRecordingsSnapshotPostValidateBeforeCall(adminRecordingsSnapshotPostRequest, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Take a snapshot recording (asynchronously)
     * 
     * @param adminRecordingsSnapshotPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully took a snapshot recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsSnapshotPostAsync(AdminRecordingsSnapshotPostRequest adminRecordingsSnapshotPostRequest, final ApiCallback<AdminMappingsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRecordingsSnapshotPostValidateBeforeCall(adminRecordingsSnapshotPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRecordingsStartPost
     * @param adminRecordingsStartPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStartPostCall(AdminRecordingsStartPostRequest adminRecordingsStartPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminRecordingsStartPostRequest;

        // create path and map variables
        String localVarPath = "/__admin/recordings/start";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRecordingsStartPostValidateBeforeCall(AdminRecordingsStartPostRequest adminRecordingsStartPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminRecordingsStartPostRequest' is set
        if (adminRecordingsStartPostRequest == null) {
            throw new ApiException("Missing the required parameter 'adminRecordingsStartPostRequest' when calling adminRecordingsStartPost(Async)");
        }

        return adminRecordingsStartPostCall(adminRecordingsStartPostRequest, _callback);

    }

    /**
     * Start recording
     * Begin recording stub mappings
     * @param adminRecordingsStartPostRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started recording </td><td>  -  </td></tr>
     </table>
     */
    public void adminRecordingsStartPost(AdminRecordingsStartPostRequest adminRecordingsStartPostRequest) throws ApiException {
        adminRecordingsStartPostWithHttpInfo(adminRecordingsStartPostRequest);
    }

    /**
     * Start recording
     * Begin recording stub mappings
     * @param adminRecordingsStartPostRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started recording </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRecordingsStartPostWithHttpInfo(AdminRecordingsStartPostRequest adminRecordingsStartPostRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRecordingsStartPostValidateBeforeCall(adminRecordingsStartPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start recording (asynchronously)
     * Begin recording stub mappings
     * @param adminRecordingsStartPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStartPostAsync(AdminRecordingsStartPostRequest adminRecordingsStartPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRecordingsStartPostValidateBeforeCall(adminRecordingsStartPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRecordingsStatusGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the record status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStatusGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/recordings/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRecordingsStatusGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminRecordingsStatusGetCall(_callback);

    }

    /**
     * Get recording status
     * 
     * @return AdminRecordingsStatusGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the record status </td><td>  -  </td></tr>
     </table>
     */
    public AdminRecordingsStatusGet200Response adminRecordingsStatusGet() throws ApiException {
        ApiResponse<AdminRecordingsStatusGet200Response> localVarResp = adminRecordingsStatusGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get recording status
     * 
     * @return ApiResponse&lt;AdminRecordingsStatusGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the record status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminRecordingsStatusGet200Response> adminRecordingsStatusGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminRecordingsStatusGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AdminRecordingsStatusGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get recording status (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully got the record status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStatusGetAsync(final ApiCallback<AdminRecordingsStatusGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRecordingsStatusGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AdminRecordingsStatusGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRecordingsStopPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStopPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/recordings/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRecordingsStopPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminRecordingsStopPostCall(_callback);

    }

    /**
     * Stop recording
     * End recording of stub mappings
     * @return AdminMappingsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped recording </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200Response adminRecordingsStopPost() throws ApiException {
        ApiResponse<AdminMappingsGet200Response> localVarResp = adminRecordingsStopPostWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Stop recording
     * End recording of stub mappings
     * @return ApiResponse&lt;AdminMappingsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped recording </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200Response> adminRecordingsStopPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminRecordingsStopPostValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stop recording (asynchronously)
     * End recording of stub mappings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped recording </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRecordingsStopPostAsync(final ApiCallback<AdminMappingsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRecordingsStopPostValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
