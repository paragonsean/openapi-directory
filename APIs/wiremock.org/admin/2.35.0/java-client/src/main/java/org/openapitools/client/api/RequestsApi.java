/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminMappingsFindByMetadataPostRequest;
import org.openapitools.client.model.AdminMappingsGet200ResponseMappingsInnerRequest;
import org.openapitools.client.model.AdminRequestsCountPost200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminRequestsCountPost
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of matching requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsCountPostCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsGet200ResponseMappingsInnerRequest;

        // create path and map variables
        String localVarPath = "/__admin/requests/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsCountPostValidateBeforeCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
        if (adminMappingsGet200ResponseMappingsInnerRequest == null) {
            throw new ApiException("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsCountPost(Async)");
        }

        return adminRequestsCountPostCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);

    }

    /**
     * Count requests by criteria
     * Count requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @return AdminRequestsCountPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of matching requests </td><td>  -  </td></tr>
     </table>
     */
    public AdminRequestsCountPost200Response adminRequestsCountPost(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        ApiResponse<AdminRequestsCountPost200Response> localVarResp = adminRequestsCountPostWithHttpInfo(adminMappingsGet200ResponseMappingsInnerRequest);
        return localVarResp.getData();
    }

    /**
     * Count requests by criteria
     * Count requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @return ApiResponse&lt;AdminRequestsCountPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of matching requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminRequestsCountPost200Response> adminRequestsCountPostWithHttpInfo(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsCountPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, null);
        Type localVarReturnType = new TypeToken<AdminRequestsCountPost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Count requests by criteria (asynchronously)
     * Count requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Number of matching requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsCountPostAsync(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback<AdminRequestsCountPost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsCountPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminRequestsCountPost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminRequestsDeleteCall(_callback);

    }

    /**
     * Delete all requests in journal
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsDelete() throws ApiException {
        adminRequestsDeleteWithHttpInfo();
    }

    /**
     * Delete all requests in journal
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminRequestsDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all requests in journal (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsFindPost
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsFindPostCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsGet200ResponseMappingsInnerRequest;

        // create path and map variables
        String localVarPath = "/__admin/requests/find";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsFindPostValidateBeforeCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
        if (adminMappingsGet200ResponseMappingsInnerRequest == null) {
            throw new ApiException("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsFindPost(Async)");
        }

        return adminRequestsFindPostCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);

    }

    /**
     * Find requests by criteria
     * Retrieve details of requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching request details </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsFindPost(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        adminRequestsFindPostWithHttpInfo(adminMappingsGet200ResponseMappingsInnerRequest);
    }

    /**
     * Find requests by criteria
     * Retrieve details of requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching request details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsFindPostWithHttpInfo(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsFindPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find requests by criteria (asynchronously)
     * Retrieve details of requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matching request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsFindPostAsync(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsFindPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsGet
     * @param limit The maximum number of results to return (optional)
     * @param since Only return logged requests after this date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of received requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsGetCall(String limit, String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsGetValidateBeforeCall(String limit, String since, final ApiCallback _callback) throws ApiException {
        return adminRequestsGetCall(limit, since, _callback);

    }

    /**
     * Get all requests in journal
     * 
     * @param limit The maximum number of results to return (optional)
     * @param since Only return logged requests after this date (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of received requests </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsGet(String limit, String since) throws ApiException {
        adminRequestsGetWithHttpInfo(limit, since);
    }

    /**
     * Get all requests in journal
     * 
     * @param limit The maximum number of results to return (optional)
     * @param since Only return logged requests after this date (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of received requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsGetWithHttpInfo(String limit, String since) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsGetValidateBeforeCall(limit, since, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get all requests in journal (asynchronously)
     * 
     * @param limit The maximum number of results to return (optional)
     * @param since Only return logged requests after this date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of received requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsGetAsync(String limit, String since, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsGetValidateBeforeCall(limit, since, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsRemoveByMetadataPost
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRemoveByMetadataPostCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsFindByMetadataPostRequest;

        // create path and map variables
        String localVarPath = "/__admin/requests/remove-by-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsRemoveByMetadataPostValidateBeforeCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        return adminRequestsRemoveByMetadataPostCall(adminMappingsFindByMetadataPostRequest, _callback);

    }

    /**
     * Delete requests mappings matching metadata
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsRemoveByMetadataPost(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        adminRequestsRemoveByMetadataPostWithHttpInfo(adminMappingsFindByMetadataPostRequest);
    }

    /**
     * Delete requests mappings matching metadata
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsRemoveByMetadataPostWithHttpInfo(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsRemoveByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete requests mappings matching metadata (asynchronously)
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRemoveByMetadataPostAsync(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsRemoveByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsRemovePost
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRemovePostCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsGet200ResponseMappingsInnerRequest;

        // create path and map variables
        String localVarPath = "/__admin/requests/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsRemovePostValidateBeforeCall(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' is set
        if (adminMappingsGet200ResponseMappingsInnerRequest == null) {
            throw new ApiException("Missing the required parameter 'adminMappingsGet200ResponseMappingsInnerRequest' when calling adminRequestsRemovePost(Async)");
        }

        return adminRequestsRemovePostCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);

    }

    /**
     * Remove requests by criteria
     * Removed requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsRemovePost(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        adminRequestsRemovePostWithHttpInfo(adminMappingsGet200ResponseMappingsInnerRequest);
    }

    /**
     * Remove requests by criteria
     * Removed requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsRemovePostWithHttpInfo(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsRemovePostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove requests by criteria (asynchronously)
     * Removed requests logged in the journal matching the specified criteria
     * @param adminMappingsGet200ResponseMappingsInnerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Removed request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRemovePostAsync(AdminMappingsGet200ResponseMappingsInnerRequest adminMappingsGet200ResponseMappingsInnerRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsRemovePostValidateBeforeCall(adminMappingsGet200ResponseMappingsInnerRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsRequestIdDelete
     * @param requestId The UUID of the logged request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRequestIdDeleteCall(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsRequestIdDeleteValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling adminRequestsRequestIdDelete(Async)");
        }

        return adminRequestsRequestIdDeleteCall(requestId, _callback);

    }

    /**
     * Delete request by ID
     * 
     * @param requestId The UUID of the logged request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsRequestIdDelete(String requestId) throws ApiException {
        adminRequestsRequestIdDeleteWithHttpInfo(requestId);
    }

    /**
     * Delete request by ID
     * 
     * @param requestId The UUID of the logged request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsRequestIdDeleteWithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsRequestIdDeleteValidateBeforeCall(requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete request by ID (asynchronously)
     * 
     * @param requestId The UUID of the logged request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRequestIdDeleteAsync(String requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsRequestIdDeleteValidateBeforeCall(requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsRequestIdGet
     * @param requestId The UUID of the logged request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRequestIdGetCall(String requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests/{requestId}"
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsRequestIdGetValidateBeforeCall(String requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling adminRequestsRequestIdGet(Async)");
        }

        return adminRequestsRequestIdGetCall(requestId, _callback);

    }

    /**
     * Get request by ID
     * 
     * @param requestId The UUID of the logged request (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsRequestIdGet(String requestId) throws ApiException {
        adminRequestsRequestIdGetWithHttpInfo(requestId);
    }

    /**
     * Get request by ID
     * 
     * @param requestId The UUID of the logged request (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsRequestIdGetWithHttpInfo(String requestId) throws ApiException {
        okhttp3.Call localVarCall = adminRequestsRequestIdGetValidateBeforeCall(requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get request by ID (asynchronously)
     * 
     * @param requestId The UUID of the logged request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Request not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsRequestIdGetAsync(String requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsRequestIdGetValidateBeforeCall(requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsResetPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRequestsResetPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsResetPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminRequestsResetPostCall(_callback);

    }

    /**
     * Empty the request journal
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void adminRequestsResetPost() throws ApiException {
        adminRequestsResetPostWithHttpInfo();
    }

    /**
     * Empty the request journal
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> adminRequestsResetPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminRequestsResetPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Empty the request journal (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call adminRequestsResetPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsResetPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminRequestsUnmatchedGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unmatched request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsUnmatchedGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/requests/unmatched";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminRequestsUnmatchedGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminRequestsUnmatchedGetCall(_callback);

    }

    /**
     * Find unmatched requests
     * Get details of logged requests that weren&#39;t matched by any stub mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unmatched request details </td><td>  -  </td></tr>
     </table>
     */
    public void adminRequestsUnmatchedGet() throws ApiException {
        adminRequestsUnmatchedGetWithHttpInfo();
    }

    /**
     * Find unmatched requests
     * Get details of logged requests that weren&#39;t matched by any stub mapping
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unmatched request details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminRequestsUnmatchedGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminRequestsUnmatchedGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Find unmatched requests (asynchronously)
     * Get details of logged requests that weren&#39;t matched by any stub mapping
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unmatched request details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminRequestsUnmatchedGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminRequestsUnmatchedGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
