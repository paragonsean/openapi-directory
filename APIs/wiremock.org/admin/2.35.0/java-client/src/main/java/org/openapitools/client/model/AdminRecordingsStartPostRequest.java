/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern;
import org.openapitools.client.model.AdminRecordingsStartPostRequestAllOfFilters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminRecordingsStartPostRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminRecordingsStartPostRequest {
  public static final String SERIALIZED_NAME_CAPTURE_HEADERS = "captureHeaders";
  @SerializedName(SERIALIZED_NAME_CAPTURE_HEADERS)
  private Map<String, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue> captureHeaders = new HashMap<>();

  public static final String SERIALIZED_NAME_EXTRACT_BODY_CRITERIA = "extractBodyCriteria";
  @SerializedName(SERIALIZED_NAME_EXTRACT_BODY_CRITERIA)
  private AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria extractBodyCriteria;

  public static final String SERIALIZED_NAME_PERSIST = "persist";
  @SerializedName(SERIALIZED_NAME_PERSIST)
  private Boolean persist = true;

  public static final String SERIALIZED_NAME_REPEATS_AS_SCENARIOS = "repeatsAsScenarios";
  @SerializedName(SERIALIZED_NAME_REPEATS_AS_SCENARIOS)
  private Boolean repeatsAsScenarios = true;

  public static final String SERIALIZED_NAME_REQUEST_BODY_PATTERN = "requestBodyPattern";
  @SerializedName(SERIALIZED_NAME_REQUEST_BODY_PATTERN)
  private AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern requestBodyPattern;

  public static final String SERIALIZED_NAME_TRANSFORMER_PARAMETERS = "transformerParameters";
  @SerializedName(SERIALIZED_NAME_TRANSFORMER_PARAMETERS)
  private Object transformerParameters;

  public static final String SERIALIZED_NAME_TRANSFORMERS = "transformers";
  @SerializedName(SERIALIZED_NAME_TRANSFORMERS)
  private List<String> transformers = new ArrayList<>();

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private AdminRecordingsStartPostRequestAllOfFilters filters;

  public static final String SERIALIZED_NAME_TARGET_BASE_URL = "targetBaseUrl";
  @SerializedName(SERIALIZED_NAME_TARGET_BASE_URL)
  private String targetBaseUrl;

  public AdminRecordingsStartPostRequest() {
  }

  public AdminRecordingsStartPostRequest captureHeaders(Map<String, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue> captureHeaders) {
    this.captureHeaders = captureHeaders;
    return this;
  }

  public AdminRecordingsStartPostRequest putCaptureHeadersItem(String key, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue captureHeadersItem) {
    if (this.captureHeaders == null) {
      this.captureHeaders = new HashMap<>();
    }
    this.captureHeaders.put(key, captureHeadersItem);
    return this;
  }

  /**
   * Headers from the request to include in the generated stub mappings, mapped to parameter objects. The only parameter available is \&quot;caseInsensitive\&quot;, which defaults to false
   * @return captureHeaders
   */
  @javax.annotation.Nullable
  public Map<String, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue> getCaptureHeaders() {
    return captureHeaders;
  }

  public void setCaptureHeaders(Map<String, AdminRecordingsSnapshotPostRequestAllOfCaptureHeadersValue> captureHeaders) {
    this.captureHeaders = captureHeaders;
  }


  public AdminRecordingsStartPostRequest extractBodyCriteria(AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria extractBodyCriteria) {
    this.extractBodyCriteria = extractBodyCriteria;
    return this;
  }

  /**
   * Get extractBodyCriteria
   * @return extractBodyCriteria
   */
  @javax.annotation.Nullable
  public AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria getExtractBodyCriteria() {
    return extractBodyCriteria;
  }

  public void setExtractBodyCriteria(AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria extractBodyCriteria) {
    this.extractBodyCriteria = extractBodyCriteria;
  }


  public AdminRecordingsStartPostRequest persist(Boolean persist) {
    this.persist = persist;
    return this;
  }

  /**
   * Whether to save stub mappings to the file system or just return them
   * @return persist
   */
  @javax.annotation.Nullable
  public Boolean getPersist() {
    return persist;
  }

  public void setPersist(Boolean persist) {
    this.persist = persist;
  }


  public AdminRecordingsStartPostRequest repeatsAsScenarios(Boolean repeatsAsScenarios) {
    this.repeatsAsScenarios = repeatsAsScenarios;
    return this;
  }

  /**
   * When true, duplicate requests will be added to a Scenario. When false, duplicates are discarded
   * @return repeatsAsScenarios
   */
  @javax.annotation.Nullable
  public Boolean getRepeatsAsScenarios() {
    return repeatsAsScenarios;
  }

  public void setRepeatsAsScenarios(Boolean repeatsAsScenarios) {
    this.repeatsAsScenarios = repeatsAsScenarios;
  }


  public AdminRecordingsStartPostRequest requestBodyPattern(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern requestBodyPattern) {
    this.requestBodyPattern = requestBodyPattern;
    return this;
  }

  /**
   * Get requestBodyPattern
   * @return requestBodyPattern
   */
  @javax.annotation.Nullable
  public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern getRequestBodyPattern() {
    return requestBodyPattern;
  }

  public void setRequestBodyPattern(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern requestBodyPattern) {
    this.requestBodyPattern = requestBodyPattern;
  }


  public AdminRecordingsStartPostRequest transformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
    return this;
  }

  /**
   * List of names of stub mappings transformers to apply to generated stubs
   * @return transformerParameters
   */
  @javax.annotation.Nullable
  public Object getTransformerParameters() {
    return transformerParameters;
  }

  public void setTransformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
  }


  public AdminRecordingsStartPostRequest transformers(List<String> transformers) {
    this.transformers = transformers;
    return this;
  }

  public AdminRecordingsStartPostRequest addTransformersItem(String transformersItem) {
    if (this.transformers == null) {
      this.transformers = new ArrayList<>();
    }
    this.transformers.add(transformersItem);
    return this;
  }

  /**
   * Parameters to pass to stub mapping transformers
   * @return transformers
   */
  @javax.annotation.Nullable
  public List<String> getTransformers() {
    return transformers;
  }

  public void setTransformers(List<String> transformers) {
    this.transformers = transformers;
  }


  public AdminRecordingsStartPostRequest filters(AdminRecordingsStartPostRequestAllOfFilters filters) {
    this.filters = filters;
    return this;
  }

  /**
   * Get filters
   * @return filters
   */
  @javax.annotation.Nullable
  public AdminRecordingsStartPostRequestAllOfFilters getFilters() {
    return filters;
  }

  public void setFilters(AdminRecordingsStartPostRequestAllOfFilters filters) {
    this.filters = filters;
  }


  public AdminRecordingsStartPostRequest targetBaseUrl(String targetBaseUrl) {
    this.targetBaseUrl = targetBaseUrl;
    return this;
  }

  /**
   * Target URL when using the record and playback API
   * @return targetBaseUrl
   */
  @javax.annotation.Nullable
  public String getTargetBaseUrl() {
    return targetBaseUrl;
  }

  public void setTargetBaseUrl(String targetBaseUrl) {
    this.targetBaseUrl = targetBaseUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminRecordingsStartPostRequest adminRecordingsStartPostRequest = (AdminRecordingsStartPostRequest) o;
    return Objects.equals(this.captureHeaders, adminRecordingsStartPostRequest.captureHeaders) &&
        Objects.equals(this.extractBodyCriteria, adminRecordingsStartPostRequest.extractBodyCriteria) &&
        Objects.equals(this.persist, adminRecordingsStartPostRequest.persist) &&
        Objects.equals(this.repeatsAsScenarios, adminRecordingsStartPostRequest.repeatsAsScenarios) &&
        Objects.equals(this.requestBodyPattern, adminRecordingsStartPostRequest.requestBodyPattern) &&
        Objects.equals(this.transformerParameters, adminRecordingsStartPostRequest.transformerParameters) &&
        Objects.equals(this.transformers, adminRecordingsStartPostRequest.transformers) &&
        Objects.equals(this.filters, adminRecordingsStartPostRequest.filters) &&
        Objects.equals(this.targetBaseUrl, adminRecordingsStartPostRequest.targetBaseUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(captureHeaders, extractBodyCriteria, persist, repeatsAsScenarios, requestBodyPattern, transformerParameters, transformers, filters, targetBaseUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminRecordingsStartPostRequest {\n");
    sb.append("    captureHeaders: ").append(toIndentedString(captureHeaders)).append("\n");
    sb.append("    extractBodyCriteria: ").append(toIndentedString(extractBodyCriteria)).append("\n");
    sb.append("    persist: ").append(toIndentedString(persist)).append("\n");
    sb.append("    repeatsAsScenarios: ").append(toIndentedString(repeatsAsScenarios)).append("\n");
    sb.append("    requestBodyPattern: ").append(toIndentedString(requestBodyPattern)).append("\n");
    sb.append("    transformerParameters: ").append(toIndentedString(transformerParameters)).append("\n");
    sb.append("    transformers: ").append(toIndentedString(transformers)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    targetBaseUrl: ").append(toIndentedString(targetBaseUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("captureHeaders");
    openapiFields.add("extractBodyCriteria");
    openapiFields.add("persist");
    openapiFields.add("repeatsAsScenarios");
    openapiFields.add("requestBodyPattern");
    openapiFields.add("transformerParameters");
    openapiFields.add("transformers");
    openapiFields.add("filters");
    openapiFields.add("targetBaseUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminRecordingsStartPostRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminRecordingsStartPostRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminRecordingsStartPostRequest is not found in the empty JSON string", AdminRecordingsStartPostRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminRecordingsStartPostRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminRecordingsStartPostRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `extractBodyCriteria`
      if (jsonObj.get("extractBodyCriteria") != null && !jsonObj.get("extractBodyCriteria").isJsonNull()) {
        AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.validateJsonElement(jsonObj.get("extractBodyCriteria"));
      }
      // validate the optional field `requestBodyPattern`
      if (jsonObj.get("requestBodyPattern") != null && !jsonObj.get("requestBodyPattern").isJsonNull()) {
        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.validateJsonElement(jsonObj.get("requestBodyPattern"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transformers") != null && !jsonObj.get("transformers").isJsonNull() && !jsonObj.get("transformers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformers` to be an array in the JSON string but got `%s`", jsonObj.get("transformers").toString()));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        AdminRecordingsStartPostRequestAllOfFilters.validateJsonElement(jsonObj.get("filters"));
      }
      if ((jsonObj.get("targetBaseUrl") != null && !jsonObj.get("targetBaseUrl").isJsonNull()) && !jsonObj.get("targetBaseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetBaseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetBaseUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminRecordingsStartPostRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminRecordingsStartPostRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminRecordingsStartPostRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsStartPostRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminRecordingsStartPostRequest>() {
           @Override
           public void write(JsonWriter out, AdminRecordingsStartPostRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminRecordingsStartPostRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminRecordingsStartPostRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminRecordingsStartPostRequest
   * @throws IOException if the JSON string is invalid with respect to AdminRecordingsStartPostRequest
   */
  public static AdminRecordingsStartPostRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminRecordingsStartPostRequest.class);
  }

  /**
   * Convert an instance of AdminRecordingsStartPostRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

