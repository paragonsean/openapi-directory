/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2;
import org.openapitools.client.model.AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf> adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf.class));
            final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1> adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1 = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.class));
            final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2> adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.class));
            final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3> adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3 = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3.class));

            return (TypeAdapter<T>) new TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern>() {
                @Override
                public void write(JsonWriter out, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf`
                    if (value.getActualInstance() instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf) {
                        JsonElement element = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf.toJsonTree((AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1`
                    if (value.getActualInstance() instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1) {
                        JsonElement element = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.toJsonTree((AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2`
                    if (value.getActualInstance() instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2) {
                        JsonElement element = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.toJsonTree((AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3`
                    if (value.getActualInstance() instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3) {
                        JsonElement element = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3.toJsonTree((AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3");
                }

                @Override
                public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf'", e);
                    }
                    // deserialize AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1'", e);
                    }
                    // deserialize AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2'", e);
                    }
                    // deserialize AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3'", e);
                    }

                    if (match == 1) {
                        AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern ret = new AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern() {
        super("oneOf", Boolean.FALSE);
    }

    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf", AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf.class);
        schemas.put("AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1", AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.class);
        schemas.put("AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2", AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.class);
        schemas.put("AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3", AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3");
    }

    /**
     * Get the actual instance, which can be the following:
     * AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3
     *
     * @return The actual instance (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf`. If the actual instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf`
     * @throws ClassCastException if the instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf`
     */
    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf getAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf() throws ClassCastException {
        return (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1`. If the actual instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1`
     * @throws ClassCastException if the instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1`
     */
    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1 getAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1() throws ClassCastException {
        return (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2`. If the actual instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2`
     * @throws ClassCastException if the instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2`
     */
    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 getAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2() throws ClassCastException {
        return (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3`. If the actual instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3`
     * @throws ClassCastException if the instance is not `AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3`
     */
    public AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3 getAdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3() throws ClassCastException {
        return (AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf
        try {
            AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1
        try {
            AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2
        try {
            AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3
        try {
            AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern with oneOf schemas: AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf1, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf2, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPatternOneOf3. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
     * @throws IOException if the JSON string is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern
     */
    public static AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern.class);
    }

    /**
     * Convert an instance of AdminRecordingsSnapshotPostRequestAllOfRequestBodyPattern to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

