/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdminMappingsGet200ResponseMappingsInnerRequest;
import org.openapitools.client.model.AdminMappingsGet200ResponseMappingsInnerResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminMappingsGet200ResponseMappingsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminMappingsGet200ResponseMappingsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_SCENARIO_STATE = "newScenarioState";
  @SerializedName(SERIALIZED_NAME_NEW_SCENARIO_STATE)
  private String newScenarioState;

  public static final String SERIALIZED_NAME_PERSISTENT = "persistent";
  @SerializedName(SERIALIZED_NAME_PERSISTENT)
  private Boolean persistent;

  public static final String SERIALIZED_NAME_POST_SERVE_ACTIONS = "postServeActions";
  @SerializedName(SERIALIZED_NAME_POST_SERVE_ACTIONS)
  private Object postServeActions;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private AdminMappingsGet200ResponseMappingsInnerRequest request;

  public static final String SERIALIZED_NAME_REQUIRED_SCENARIO_STATE = "requiredScenarioState";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SCENARIO_STATE)
  private String requiredScenarioState;

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private AdminMappingsGet200ResponseMappingsInnerResponse response;

  public static final String SERIALIZED_NAME_SCENARIO_NAME = "scenarioName";
  @SerializedName(SERIALIZED_NAME_SCENARIO_NAME)
  private String scenarioName;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public AdminMappingsGet200ResponseMappingsInner() {
  }

  public AdminMappingsGet200ResponseMappingsInner id(String id) {
    this.id = id;
    return this;
  }

  /**
   * This stub mapping&#39;s unique identifier
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AdminMappingsGet200ResponseMappingsInner metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Arbitrary metadata to be used for e.g. tagging, documentation. Can also be used to find and remove stubs.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public AdminMappingsGet200ResponseMappingsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The stub mapping&#39;s name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AdminMappingsGet200ResponseMappingsInner newScenarioState(String newScenarioState) {
    this.newScenarioState = newScenarioState;
    return this;
  }

  /**
   * The new state for the scenario to be updated to after this stub is served.
   * @return newScenarioState
   */
  @javax.annotation.Nullable
  public String getNewScenarioState() {
    return newScenarioState;
  }

  public void setNewScenarioState(String newScenarioState) {
    this.newScenarioState = newScenarioState;
  }


  public AdminMappingsGet200ResponseMappingsInner persistent(Boolean persistent) {
    this.persistent = persistent;
    return this;
  }

  /**
   * Indicates that the stub mapping should be persisted immediately on create/update/delete and survive resets to default.
   * @return persistent
   */
  @javax.annotation.Nullable
  public Boolean getPersistent() {
    return persistent;
  }

  public void setPersistent(Boolean persistent) {
    this.persistent = persistent;
  }


  public AdminMappingsGet200ResponseMappingsInner postServeActions(Object postServeActions) {
    this.postServeActions = postServeActions;
    return this;
  }

  /**
   * A map of the names of post serve action extensions to trigger and their parameters.
   * @return postServeActions
   */
  @javax.annotation.Nullable
  public Object getPostServeActions() {
    return postServeActions;
  }

  public void setPostServeActions(Object postServeActions) {
    this.postServeActions = postServeActions;
  }


  public AdminMappingsGet200ResponseMappingsInner priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * This stub mapping&#39;s priority relative to others. 1 is highest.
   * minimum: 1
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  public AdminMappingsGet200ResponseMappingsInner request(AdminMappingsGet200ResponseMappingsInnerRequest request) {
    this.request = request;
    return this;
  }

  /**
   * Get request
   * @return request
   */
  @javax.annotation.Nullable
  public AdminMappingsGet200ResponseMappingsInnerRequest getRequest() {
    return request;
  }

  public void setRequest(AdminMappingsGet200ResponseMappingsInnerRequest request) {
    this.request = request;
  }


  public AdminMappingsGet200ResponseMappingsInner requiredScenarioState(String requiredScenarioState) {
    this.requiredScenarioState = requiredScenarioState;
    return this;
  }

  /**
   * The required state of the scenario in order for this stub to be matched.
   * @return requiredScenarioState
   */
  @javax.annotation.Nullable
  public String getRequiredScenarioState() {
    return requiredScenarioState;
  }

  public void setRequiredScenarioState(String requiredScenarioState) {
    this.requiredScenarioState = requiredScenarioState;
  }


  public AdminMappingsGet200ResponseMappingsInner response(AdminMappingsGet200ResponseMappingsInnerResponse response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nullable
  public AdminMappingsGet200ResponseMappingsInnerResponse getResponse() {
    return response;
  }

  public void setResponse(AdminMappingsGet200ResponseMappingsInnerResponse response) {
    this.response = response;
  }


  public AdminMappingsGet200ResponseMappingsInner scenarioName(String scenarioName) {
    this.scenarioName = scenarioName;
    return this;
  }

  /**
   * The name of the scenario that this stub mapping is part of
   * @return scenarioName
   */
  @javax.annotation.Nullable
  public String getScenarioName() {
    return scenarioName;
  }

  public void setScenarioName(String scenarioName) {
    this.scenarioName = scenarioName;
  }


  public AdminMappingsGet200ResponseMappingsInner uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Alias for the id
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner = (AdminMappingsGet200ResponseMappingsInner) o;
    return Objects.equals(this.id, adminMappingsGet200ResponseMappingsInner.id) &&
        Objects.equals(this.metadata, adminMappingsGet200ResponseMappingsInner.metadata) &&
        Objects.equals(this.name, adminMappingsGet200ResponseMappingsInner.name) &&
        Objects.equals(this.newScenarioState, adminMappingsGet200ResponseMappingsInner.newScenarioState) &&
        Objects.equals(this.persistent, adminMappingsGet200ResponseMappingsInner.persistent) &&
        Objects.equals(this.postServeActions, adminMappingsGet200ResponseMappingsInner.postServeActions) &&
        Objects.equals(this.priority, adminMappingsGet200ResponseMappingsInner.priority) &&
        Objects.equals(this.request, adminMappingsGet200ResponseMappingsInner.request) &&
        Objects.equals(this.requiredScenarioState, adminMappingsGet200ResponseMappingsInner.requiredScenarioState) &&
        Objects.equals(this.response, adminMappingsGet200ResponseMappingsInner.response) &&
        Objects.equals(this.scenarioName, adminMappingsGet200ResponseMappingsInner.scenarioName) &&
        Objects.equals(this.uuid, adminMappingsGet200ResponseMappingsInner.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, metadata, name, newScenarioState, persistent, postServeActions, priority, request, requiredScenarioState, response, scenarioName, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminMappingsGet200ResponseMappingsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newScenarioState: ").append(toIndentedString(newScenarioState)).append("\n");
    sb.append("    persistent: ").append(toIndentedString(persistent)).append("\n");
    sb.append("    postServeActions: ").append(toIndentedString(postServeActions)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    requiredScenarioState: ").append(toIndentedString(requiredScenarioState)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    scenarioName: ").append(toIndentedString(scenarioName)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("newScenarioState");
    openapiFields.add("persistent");
    openapiFields.add("postServeActions");
    openapiFields.add("priority");
    openapiFields.add("request");
    openapiFields.add("requiredScenarioState");
    openapiFields.add("response");
    openapiFields.add("scenarioName");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminMappingsGet200ResponseMappingsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminMappingsGet200ResponseMappingsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminMappingsGet200ResponseMappingsInner is not found in the empty JSON string", AdminMappingsGet200ResponseMappingsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminMappingsGet200ResponseMappingsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminMappingsGet200ResponseMappingsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("newScenarioState") != null && !jsonObj.get("newScenarioState").isJsonNull()) && !jsonObj.get("newScenarioState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newScenarioState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newScenarioState").toString()));
      }
      // validate the optional field `request`
      if (jsonObj.get("request") != null && !jsonObj.get("request").isJsonNull()) {
        AdminMappingsGet200ResponseMappingsInnerRequest.validateJsonElement(jsonObj.get("request"));
      }
      if ((jsonObj.get("requiredScenarioState") != null && !jsonObj.get("requiredScenarioState").isJsonNull()) && !jsonObj.get("requiredScenarioState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requiredScenarioState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requiredScenarioState").toString()));
      }
      // validate the optional field `response`
      if (jsonObj.get("response") != null && !jsonObj.get("response").isJsonNull()) {
        AdminMappingsGet200ResponseMappingsInnerResponse.validateJsonElement(jsonObj.get("response"));
      }
      if ((jsonObj.get("scenarioName") != null && !jsonObj.get("scenarioName").isJsonNull()) && !jsonObj.get("scenarioName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenarioName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenarioName").toString()));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminMappingsGet200ResponseMappingsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminMappingsGet200ResponseMappingsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminMappingsGet200ResponseMappingsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminMappingsGet200ResponseMappingsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminMappingsGet200ResponseMappingsInner>() {
           @Override
           public void write(JsonWriter out, AdminMappingsGet200ResponseMappingsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminMappingsGet200ResponseMappingsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminMappingsGet200ResponseMappingsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminMappingsGet200ResponseMappingsInner
   * @throws IOException if the JSON string is invalid with respect to AdminMappingsGet200ResponseMappingsInner
   */
  public static AdminMappingsGet200ResponseMappingsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminMappingsGet200ResponseMappingsInner.class);
  }

  /**
   * Convert an instance of AdminMappingsGet200ResponseMappingsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

