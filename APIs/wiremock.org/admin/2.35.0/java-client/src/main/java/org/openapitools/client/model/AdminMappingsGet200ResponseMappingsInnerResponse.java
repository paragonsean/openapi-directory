/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdminMappingsGet200ResponseMappingsInnerResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminMappingsGet200ResponseMappingsInnerResponse {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROXY_REQUEST_HEADERS = "additionalProxyRequestHeaders";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROXY_REQUEST_HEADERS)
  private Object additionalProxyRequestHeaders;

  public static final String SERIALIZED_NAME_BASE64_BODY = "base64Body";
  @SerializedName(SERIALIZED_NAME_BASE64_BODY)
  private String base64Body;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_FILE_NAME = "bodyFileName";
  @SerializedName(SERIALIZED_NAME_BODY_FILE_NAME)
  private String bodyFileName;

  public static final String SERIALIZED_NAME_DELAY_DISTRIBUTION = "delayDistribution";
  @SerializedName(SERIALIZED_NAME_DELAY_DISTRIBUTION)
  private AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution delayDistribution;

  /**
   * The fault to apply (instead of a full, valid response).
   */
  @JsonAdapter(FaultEnum.Adapter.class)
  public enum FaultEnum {
    CONNECTION_RESET_BY_PEER("CONNECTION_RESET_BY_PEER"),
    
    EMPTY_RESPONSE("EMPTY_RESPONSE"),
    
    MALFORMED_RESPONSE_CHUNK("MALFORMED_RESPONSE_CHUNK"),
    
    RANDOM_DATA_THEN_CLOSE("RANDOM_DATA_THEN_CLOSE");

    private String value;

    FaultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FaultEnum fromValue(String value) {
      for (FaultEnum b : FaultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FaultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FaultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FaultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FaultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FaultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAULT = "fault";
  @SerializedName(SERIALIZED_NAME_FAULT)
  private FaultEnum fault;

  public static final String SERIALIZED_NAME_FIXED_DELAY_MILLISECONDS = "fixedDelayMilliseconds";
  @SerializedName(SERIALIZED_NAME_FIXED_DELAY_MILLISECONDS)
  private Integer fixedDelayMilliseconds;

  public static final String SERIALIZED_NAME_FROM_CONFIGURED_STUB = "fromConfiguredStub";
  @SerializedName(SERIALIZED_NAME_FROM_CONFIGURED_STUB)
  private Boolean fromConfiguredStub;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Object headers;

  public static final String SERIALIZED_NAME_JSON_BODY = "jsonBody";
  @SerializedName(SERIALIZED_NAME_JSON_BODY)
  private Object jsonBody;

  public static final String SERIALIZED_NAME_PROXY_BASE_URL = "proxyBaseUrl";
  @SerializedName(SERIALIZED_NAME_PROXY_BASE_URL)
  private String proxyBaseUrl;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TRANSFORMER_PARAMETERS = "transformerParameters";
  @SerializedName(SERIALIZED_NAME_TRANSFORMER_PARAMETERS)
  private Object transformerParameters;

  public static final String SERIALIZED_NAME_TRANSFORMERS = "transformers";
  @SerializedName(SERIALIZED_NAME_TRANSFORMERS)
  private List<String> transformers = new ArrayList<>();

  public AdminMappingsGet200ResponseMappingsInnerResponse() {
  }

  public AdminMappingsGet200ResponseMappingsInnerResponse additionalProxyRequestHeaders(Object additionalProxyRequestHeaders) {
    this.additionalProxyRequestHeaders = additionalProxyRequestHeaders;
    return this;
  }

  /**
   * Extra request headers to send when proxying to another host.
   * @return additionalProxyRequestHeaders
   */
  @javax.annotation.Nullable
  public Object getAdditionalProxyRequestHeaders() {
    return additionalProxyRequestHeaders;
  }

  public void setAdditionalProxyRequestHeaders(Object additionalProxyRequestHeaders) {
    this.additionalProxyRequestHeaders = additionalProxyRequestHeaders;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse base64Body(String base64Body) {
    this.base64Body = base64Body;
    return this;
  }

  /**
   * The response body as a base64 encoded string (useful for binary content). Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return base64Body
   */
  @javax.annotation.Nullable
  public String getBase64Body() {
    return base64Body;
  }

  public void setBase64Body(String base64Body) {
    this.base64Body = base64Body;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse body(String body) {
    this.body = body;
    return this;
  }

  /**
   * The response body as a string. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse bodyFileName(String bodyFileName) {
    this.bodyFileName = bodyFileName;
    return this;
  }

  /**
   * The path to the file containing the response body, relative to the configured file root. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return bodyFileName
   */
  @javax.annotation.Nullable
  public String getBodyFileName() {
    return bodyFileName;
  }

  public void setBodyFileName(String bodyFileName) {
    this.bodyFileName = bodyFileName;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse delayDistribution(AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution delayDistribution) {
    this.delayDistribution = delayDistribution;
    return this;
  }

  /**
   * Get delayDistribution
   * @return delayDistribution
   */
  @javax.annotation.Nullable
  public AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution getDelayDistribution() {
    return delayDistribution;
  }

  public void setDelayDistribution(AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution delayDistribution) {
    this.delayDistribution = delayDistribution;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse fault(FaultEnum fault) {
    this.fault = fault;
    return this;
  }

  /**
   * The fault to apply (instead of a full, valid response).
   * @return fault
   */
  @javax.annotation.Nullable
  public FaultEnum getFault() {
    return fault;
  }

  public void setFault(FaultEnum fault) {
    this.fault = fault;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse fixedDelayMilliseconds(Integer fixedDelayMilliseconds) {
    this.fixedDelayMilliseconds = fixedDelayMilliseconds;
    return this;
  }

  /**
   * Number of milliseconds to delay be before sending the response.
   * @return fixedDelayMilliseconds
   */
  @javax.annotation.Nullable
  public Integer getFixedDelayMilliseconds() {
    return fixedDelayMilliseconds;
  }

  public void setFixedDelayMilliseconds(Integer fixedDelayMilliseconds) {
    this.fixedDelayMilliseconds = fixedDelayMilliseconds;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse fromConfiguredStub(Boolean fromConfiguredStub) {
    this.fromConfiguredStub = fromConfiguredStub;
    return this;
  }

  /**
   * Read-only flag indicating false if this was the default, unmatched response. Not present otherwise.
   * @return fromConfiguredStub
   */
  @javax.annotation.Nullable
  public Boolean getFromConfiguredStub() {
    return fromConfiguredStub;
  }

  public void setFromConfiguredStub(Boolean fromConfiguredStub) {
    this.fromConfiguredStub = fromConfiguredStub;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse headers(Object headers) {
    this.headers = headers;
    return this;
  }

  /**
   * Map of response headers to send
   * @return headers
   */
  @javax.annotation.Nullable
  public Object getHeaders() {
    return headers;
  }

  public void setHeaders(Object headers) {
    this.headers = headers;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse jsonBody(Object jsonBody) {
    this.jsonBody = jsonBody;
    return this;
  }

  /**
   * The response body as a JSON object. Only one of body, base64Body, jsonBody or bodyFileName may be specified.
   * @return jsonBody
   */
  @javax.annotation.Nullable
  public Object getJsonBody() {
    return jsonBody;
  }

  public void setJsonBody(Object jsonBody) {
    this.jsonBody = jsonBody;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse proxyBaseUrl(String proxyBaseUrl) {
    this.proxyBaseUrl = proxyBaseUrl;
    return this;
  }

  /**
   * The base URL of the target to proxy matching requests to.
   * @return proxyBaseUrl
   */
  @javax.annotation.Nullable
  public String getProxyBaseUrl() {
    return proxyBaseUrl;
  }

  public void setProxyBaseUrl(String proxyBaseUrl) {
    this.proxyBaseUrl = proxyBaseUrl;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * The HTTP status code to be returned
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * The HTTP status message to be returned
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse transformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
    return this;
  }

  /**
   * Parameters to apply to response transformers.
   * @return transformerParameters
   */
  @javax.annotation.Nullable
  public Object getTransformerParameters() {
    return transformerParameters;
  }

  public void setTransformerParameters(Object transformerParameters) {
    this.transformerParameters = transformerParameters;
  }


  public AdminMappingsGet200ResponseMappingsInnerResponse transformers(List<String> transformers) {
    this.transformers = transformers;
    return this;
  }

  public AdminMappingsGet200ResponseMappingsInnerResponse addTransformersItem(String transformersItem) {
    if (this.transformers == null) {
      this.transformers = new ArrayList<>();
    }
    this.transformers.add(transformersItem);
    return this;
  }

  /**
   * List of names of transformers to apply to this response.
   * @return transformers
   */
  @javax.annotation.Nullable
  public List<String> getTransformers() {
    return transformers;
  }

  public void setTransformers(List<String> transformers) {
    this.transformers = transformers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminMappingsGet200ResponseMappingsInnerResponse adminMappingsGet200ResponseMappingsInnerResponse = (AdminMappingsGet200ResponseMappingsInnerResponse) o;
    return Objects.equals(this.additionalProxyRequestHeaders, adminMappingsGet200ResponseMappingsInnerResponse.additionalProxyRequestHeaders) &&
        Objects.equals(this.base64Body, adminMappingsGet200ResponseMappingsInnerResponse.base64Body) &&
        Objects.equals(this.body, adminMappingsGet200ResponseMappingsInnerResponse.body) &&
        Objects.equals(this.bodyFileName, adminMappingsGet200ResponseMappingsInnerResponse.bodyFileName) &&
        Objects.equals(this.delayDistribution, adminMappingsGet200ResponseMappingsInnerResponse.delayDistribution) &&
        Objects.equals(this.fault, adminMappingsGet200ResponseMappingsInnerResponse.fault) &&
        Objects.equals(this.fixedDelayMilliseconds, adminMappingsGet200ResponseMappingsInnerResponse.fixedDelayMilliseconds) &&
        Objects.equals(this.fromConfiguredStub, adminMappingsGet200ResponseMappingsInnerResponse.fromConfiguredStub) &&
        Objects.equals(this.headers, adminMappingsGet200ResponseMappingsInnerResponse.headers) &&
        Objects.equals(this.jsonBody, adminMappingsGet200ResponseMappingsInnerResponse.jsonBody) &&
        Objects.equals(this.proxyBaseUrl, adminMappingsGet200ResponseMappingsInnerResponse.proxyBaseUrl) &&
        Objects.equals(this.status, adminMappingsGet200ResponseMappingsInnerResponse.status) &&
        Objects.equals(this.statusMessage, adminMappingsGet200ResponseMappingsInnerResponse.statusMessage) &&
        Objects.equals(this.transformerParameters, adminMappingsGet200ResponseMappingsInnerResponse.transformerParameters) &&
        Objects.equals(this.transformers, adminMappingsGet200ResponseMappingsInnerResponse.transformers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProxyRequestHeaders, base64Body, body, bodyFileName, delayDistribution, fault, fixedDelayMilliseconds, fromConfiguredStub, headers, jsonBody, proxyBaseUrl, status, statusMessage, transformerParameters, transformers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminMappingsGet200ResponseMappingsInnerResponse {\n");
    sb.append("    additionalProxyRequestHeaders: ").append(toIndentedString(additionalProxyRequestHeaders)).append("\n");
    sb.append("    base64Body: ").append(toIndentedString(base64Body)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyFileName: ").append(toIndentedString(bodyFileName)).append("\n");
    sb.append("    delayDistribution: ").append(toIndentedString(delayDistribution)).append("\n");
    sb.append("    fault: ").append(toIndentedString(fault)).append("\n");
    sb.append("    fixedDelayMilliseconds: ").append(toIndentedString(fixedDelayMilliseconds)).append("\n");
    sb.append("    fromConfiguredStub: ").append(toIndentedString(fromConfiguredStub)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    jsonBody: ").append(toIndentedString(jsonBody)).append("\n");
    sb.append("    proxyBaseUrl: ").append(toIndentedString(proxyBaseUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    transformerParameters: ").append(toIndentedString(transformerParameters)).append("\n");
    sb.append("    transformers: ").append(toIndentedString(transformers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProxyRequestHeaders");
    openapiFields.add("base64Body");
    openapiFields.add("body");
    openapiFields.add("bodyFileName");
    openapiFields.add("delayDistribution");
    openapiFields.add("fault");
    openapiFields.add("fixedDelayMilliseconds");
    openapiFields.add("fromConfiguredStub");
    openapiFields.add("headers");
    openapiFields.add("jsonBody");
    openapiFields.add("proxyBaseUrl");
    openapiFields.add("status");
    openapiFields.add("statusMessage");
    openapiFields.add("transformerParameters");
    openapiFields.add("transformers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminMappingsGet200ResponseMappingsInnerResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminMappingsGet200ResponseMappingsInnerResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminMappingsGet200ResponseMappingsInnerResponse is not found in the empty JSON string", AdminMappingsGet200ResponseMappingsInnerResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminMappingsGet200ResponseMappingsInnerResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminMappingsGet200ResponseMappingsInnerResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base64Body") != null && !jsonObj.get("base64Body").isJsonNull()) && !jsonObj.get("base64Body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64Body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base64Body").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("bodyFileName") != null && !jsonObj.get("bodyFileName").isJsonNull()) && !jsonObj.get("bodyFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyFileName").toString()));
      }
      // validate the optional field `delayDistribution`
      if (jsonObj.get("delayDistribution") != null && !jsonObj.get("delayDistribution").isJsonNull()) {
        AdminMappingsGet200ResponseMappingsInnerResponseAllOfDelayDistribution.validateJsonElement(jsonObj.get("delayDistribution"));
      }
      if ((jsonObj.get("fault") != null && !jsonObj.get("fault").isJsonNull()) && !jsonObj.get("fault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fault").toString()));
      }
      // validate the optional field `fault`
      if (jsonObj.get("fault") != null && !jsonObj.get("fault").isJsonNull()) {
        FaultEnum.validateJsonElement(jsonObj.get("fault"));
      }
      if ((jsonObj.get("proxyBaseUrl") != null && !jsonObj.get("proxyBaseUrl").isJsonNull()) && !jsonObj.get("proxyBaseUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyBaseUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyBaseUrl").toString()));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("transformers") != null && !jsonObj.get("transformers").isJsonNull() && !jsonObj.get("transformers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformers` to be an array in the JSON string but got `%s`", jsonObj.get("transformers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminMappingsGet200ResponseMappingsInnerResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminMappingsGet200ResponseMappingsInnerResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminMappingsGet200ResponseMappingsInnerResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminMappingsGet200ResponseMappingsInnerResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminMappingsGet200ResponseMappingsInnerResponse>() {
           @Override
           public void write(JsonWriter out, AdminMappingsGet200ResponseMappingsInnerResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminMappingsGet200ResponseMappingsInnerResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminMappingsGet200ResponseMappingsInnerResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminMappingsGet200ResponseMappingsInnerResponse
   * @throws IOException if the JSON string is invalid with respect to AdminMappingsGet200ResponseMappingsInnerResponse
   */
  public static AdminMappingsGet200ResponseMappingsInnerResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminMappingsGet200ResponseMappingsInnerResponse.class);
  }

  /**
   * Convert an instance of AdminMappingsGet200ResponseMappingsInnerResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

