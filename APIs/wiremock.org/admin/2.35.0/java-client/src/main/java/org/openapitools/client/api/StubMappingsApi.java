/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminMappingsFindByMetadataPostRequest;
import org.openapitools.client.model.AdminMappingsGet200Response;
import org.openapitools.client.model.AdminMappingsGet200ResponseMappingsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StubMappingsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StubMappingsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StubMappingsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminMappingsDelete
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsDeleteCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsDeleteValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminMappingsDeleteCall(_callback);

    }

    /**
     * Delete all stub mappings
     * 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsDelete() throws ApiException {
        adminMappingsDeleteWithHttpInfo();
    }

    /**
     * Delete all stub mappings
     * 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsDeleteWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminMappingsDeleteValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all stub mappings (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsDeleteAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsDeleteValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsFindByMetadataPost
     * @param adminMappingsFindByMetadataPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matched stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsFindByMetadataPostCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsFindByMetadataPostRequest;

        // create path and map variables
        String localVarPath = "/__admin/mappings/find-by-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsFindByMetadataPostValidateBeforeCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'adminMappingsFindByMetadataPostRequest' is set
        if (adminMappingsFindByMetadataPostRequest == null) {
            throw new ApiException("Missing the required parameter 'adminMappingsFindByMetadataPostRequest' when calling adminMappingsFindByMetadataPost(Async)");
        }

        return adminMappingsFindByMetadataPostCall(adminMappingsFindByMetadataPostRequest, _callback);

    }

    /**
     * 
     * Find stubs by matching on their metadata
     * @param adminMappingsFindByMetadataPostRequest  (required)
     * @return AdminMappingsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matched stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200Response adminMappingsFindByMetadataPost(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        ApiResponse<AdminMappingsGet200Response> localVarResp = adminMappingsFindByMetadataPostWithHttpInfo(adminMappingsFindByMetadataPostRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Find stubs by matching on their metadata
     * @param adminMappingsFindByMetadataPostRequest  (required)
     * @return ApiResponse&lt;AdminMappingsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matched stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200Response> adminMappingsFindByMetadataPostWithHttpInfo(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsFindByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Find stubs by matching on their metadata
     * @param adminMappingsFindByMetadataPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Matched stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsFindByMetadataPostAsync(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback<AdminMappingsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsFindByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsGet
     * @param limit The maximum number of results to return (optional)
     * @param offset The start index of the results to return (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsGetCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return adminMappingsGetCall(limit, offset, _callback);

    }

    /**
     * Get all stub mappings
     * 
     * @param limit The maximum number of results to return (optional)
     * @param offset The start index of the results to return (optional)
     * @return AdminMappingsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200Response adminMappingsGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<AdminMappingsGet200Response> localVarResp = adminMappingsGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Get all stub mappings
     * 
     * @param limit The maximum number of results to return (optional)
     * @param offset The start index of the results to return (optional)
     * @return ApiResponse&lt;AdminMappingsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200Response> adminMappingsGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all stub mappings (asynchronously)
     * 
     * @param limit The maximum number of results to return (optional)
     * @param offset The start index of the results to return (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All stub mappings </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsGetAsync(Integer limit, Integer offset, final ApiCallback<AdminMappingsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsImportPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully imported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsImportPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsImportPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminMappingsImportPostCall(_callback);

    }

    /**
     * Import stub mappings
     * Import given stub mappings to the backing store
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully imported </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsImportPost() throws ApiException {
        adminMappingsImportPostWithHttpInfo();
    }

    /**
     * Import stub mappings
     * Import given stub mappings to the backing store
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully imported </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsImportPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminMappingsImportPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Import stub mappings (asynchronously)
     * Import given stub mappings to the backing store
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully imported </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsImportPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsImportPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsPost
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The stub mapping </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsPostCall(AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsGet200ResponseMappingsInner;

        // create path and map variables
        String localVarPath = "/__admin/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsPostValidateBeforeCall(AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback _callback) throws ApiException {
        return adminMappingsPostCall(adminMappingsGet200ResponseMappingsInner, _callback);

    }

    /**
     * Create a new stub mapping
     * 
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @return AdminMappingsGet200ResponseMappingsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The stub mapping </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200ResponseMappingsInner adminMappingsPost(AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner) throws ApiException {
        ApiResponse<AdminMappingsGet200ResponseMappingsInner> localVarResp = adminMappingsPostWithHttpInfo(adminMappingsGet200ResponseMappingsInner);
        return localVarResp.getData();
    }

    /**
     * Create a new stub mapping
     * 
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @return ApiResponse&lt;AdminMappingsGet200ResponseMappingsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The stub mapping </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200ResponseMappingsInner> adminMappingsPostWithHttpInfo(AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInner, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new stub mapping (asynchronously)
     * 
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The stub mapping </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsPostAsync(AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback<AdminMappingsGet200ResponseMappingsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsPostValidateBeforeCall(adminMappingsGet200ResponseMappingsInner, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsRemoveByMetadataPost
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mappings were successfully removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsRemoveByMetadataPostCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsFindByMetadataPostRequest;

        // create path and map variables
        String localVarPath = "/__admin/mappings/remove-by-metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsRemoveByMetadataPostValidateBeforeCall(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback _callback) throws ApiException {
        return adminMappingsRemoveByMetadataPostCall(adminMappingsFindByMetadataPostRequest, _callback);

    }

    /**
     * Delete stub mappings matching metadata
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mappings were successfully removed </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsRemoveByMetadataPost(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        adminMappingsRemoveByMetadataPostWithHttpInfo(adminMappingsFindByMetadataPostRequest);
    }

    /**
     * Delete stub mappings matching metadata
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mappings were successfully removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsRemoveByMetadataPostWithHttpInfo(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsRemoveByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete stub mappings matching metadata (asynchronously)
     * 
     * @param adminMappingsFindByMetadataPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mappings were successfully removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsRemoveByMetadataPostAsync(AdminMappingsFindByMetadataPostRequest adminMappingsFindByMetadataPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsRemoveByMetadataPostValidateBeforeCall(adminMappingsFindByMetadataPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsResetPost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsResetPostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsResetPostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminMappingsResetPostCall(_callback);

    }

    /**
     * Reset stub mappings
     * Restores stub mappings to the defaults defined back in the backing store
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsResetPost() throws ApiException {
        adminMappingsResetPostWithHttpInfo();
    }

    /**
     * Reset stub mappings
     * Restores stub mappings to the defaults defined back in the backing store
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsResetPostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminMappingsResetPostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reset stub mappings (asynchronously)
     * Restores stub mappings to the defaults defined back in the backing store
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully reset </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsResetPostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsResetPostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsSavePost
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsSavePostCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings/save";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsSavePostValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return adminMappingsSavePostCall(_callback);

    }

    /**
     * Persist stub mappings
     * Save all persistent stub mappings to the backing store
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully saved </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsSavePost() throws ApiException {
        adminMappingsSavePostWithHttpInfo();
    }

    /**
     * Persist stub mappings
     * Save all persistent stub mappings to the backing store
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully saved </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsSavePostWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = adminMappingsSavePostValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Persist stub mappings (asynchronously)
     * Save all persistent stub mappings to the backing store
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully saved </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsSavePostAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsSavePostValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsStubMappingIdDelete
     * @param stubMappingId The UUID of stub mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdDeleteCall(String stubMappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings/{stubMappingId}"
            .replace("{" + "stubMappingId" + "}", localVarApiClient.escapeString(stubMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsStubMappingIdDeleteValidateBeforeCall(String stubMappingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stubMappingId' is set
        if (stubMappingId == null) {
            throw new ApiException("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdDelete(Async)");
        }

        return adminMappingsStubMappingIdDeleteCall(stubMappingId, _callback);

    }

    /**
     * Delete a stub mapping
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public void adminMappingsStubMappingIdDelete(String stubMappingId) throws ApiException {
        adminMappingsStubMappingIdDeleteWithHttpInfo(stubMappingId);
    }

    /**
     * Delete a stub mapping
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> adminMappingsStubMappingIdDeleteWithHttpInfo(String stubMappingId) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsStubMappingIdDeleteValidateBeforeCall(stubMappingId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a stub mapping (asynchronously)
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdDeleteAsync(String stubMappingId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsStubMappingIdDeleteValidateBeforeCall(stubMappingId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsStubMappingIdGet
     * @param stubMappingId The UUID of stub mapping (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdGetCall(String stubMappingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/__admin/mappings/{stubMappingId}"
            .replace("{" + "stubMappingId" + "}", localVarApiClient.escapeString(stubMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsStubMappingIdGetValidateBeforeCall(String stubMappingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stubMappingId' is set
        if (stubMappingId == null) {
            throw new ApiException("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdGet(Async)");
        }

        return adminMappingsStubMappingIdGetCall(stubMappingId, _callback);

    }

    /**
     * Get stub mapping by ID
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @return AdminMappingsGet200ResponseMappingsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200ResponseMappingsInner adminMappingsStubMappingIdGet(String stubMappingId) throws ApiException {
        ApiResponse<AdminMappingsGet200ResponseMappingsInner> localVarResp = adminMappingsStubMappingIdGetWithHttpInfo(stubMappingId);
        return localVarResp.getData();
    }

    /**
     * Get stub mapping by ID
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @return ApiResponse&lt;AdminMappingsGet200ResponseMappingsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200ResponseMappingsInner> adminMappingsStubMappingIdGetWithHttpInfo(String stubMappingId) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsStubMappingIdGetValidateBeforeCall(stubMappingId, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get stub mapping by ID (asynchronously)
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdGetAsync(String stubMappingId, final ApiCallback<AdminMappingsGet200ResponseMappingsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsStubMappingIdGetValidateBeforeCall(stubMappingId, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for adminMappingsStubMappingIdPut
     * @param stubMappingId The UUID of stub mapping (required)
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdPutCall(String stubMappingId, AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminMappingsGet200ResponseMappingsInner;

        // create path and map variables
        String localVarPath = "/__admin/mappings/{stubMappingId}"
            .replace("{" + "stubMappingId" + "}", localVarApiClient.escapeString(stubMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminMappingsStubMappingIdPutValidateBeforeCall(String stubMappingId, AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stubMappingId' is set
        if (stubMappingId == null) {
            throw new ApiException("Missing the required parameter 'stubMappingId' when calling adminMappingsStubMappingIdPut(Async)");
        }

        return adminMappingsStubMappingIdPutCall(stubMappingId, adminMappingsGet200ResponseMappingsInner, _callback);

    }

    /**
     * Update a stub mapping
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @return AdminMappingsGet200ResponseMappingsInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public AdminMappingsGet200ResponseMappingsInner adminMappingsStubMappingIdPut(String stubMappingId, AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner) throws ApiException {
        ApiResponse<AdminMappingsGet200ResponseMappingsInner> localVarResp = adminMappingsStubMappingIdPutWithHttpInfo(stubMappingId, adminMappingsGet200ResponseMappingsInner);
        return localVarResp.getData();
    }

    /**
     * Update a stub mapping
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @return ApiResponse&lt;AdminMappingsGet200ResponseMappingsInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminMappingsGet200ResponseMappingsInner> adminMappingsStubMappingIdPutWithHttpInfo(String stubMappingId, AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner) throws ApiException {
        okhttp3.Call localVarCall = adminMappingsStubMappingIdPutValidateBeforeCall(stubMappingId, adminMappingsGet200ResponseMappingsInner, null);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a stub mapping (asynchronously)
     * 
     * @param stubMappingId The UUID of stub mapping (required)
     * @param adminMappingsGet200ResponseMappingsInner  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The stub mapping </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Stub mapping not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminMappingsStubMappingIdPutAsync(String stubMappingId, AdminMappingsGet200ResponseMappingsInner adminMappingsGet200ResponseMappingsInner, final ApiCallback<AdminMappingsGet200ResponseMappingsInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminMappingsStubMappingIdPutValidateBeforeCall(stubMappingId, adminMappingsGet200ResponseMappingsInner, _callback);
        Type localVarReturnType = new TypeToken<AdminMappingsGet200ResponseMappingsInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
