/*
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Criteria for extracting response bodies to a separate file instead of including it in the stub mapping
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:40:37.160900-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria {
  public static final String SERIALIZED_NAME_BINARY_SIZE_THRESHOLD = "binarySizeThreshold";
  @SerializedName(SERIALIZED_NAME_BINARY_SIZE_THRESHOLD)
  private String binarySizeThreshold = "0";

  public static final String SERIALIZED_NAME_TEXT_SIZE_THRESHOLD = "textSizeThreshold";
  @SerializedName(SERIALIZED_NAME_TEXT_SIZE_THRESHOLD)
  private String textSizeThreshold = "0";

  public AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria() {
  }

  public AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria binarySizeThreshold(String binarySizeThreshold) {
    this.binarySizeThreshold = binarySizeThreshold;
    return this;
  }

  /**
   * Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \&quot;56 Mb\&quot;. Default unit is bytes.
   * @return binarySizeThreshold
   */
  @javax.annotation.Nullable
  public String getBinarySizeThreshold() {
    return binarySizeThreshold;
  }

  public void setBinarySizeThreshold(String binarySizeThreshold) {
    this.binarySizeThreshold = binarySizeThreshold;
  }


  public AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria textSizeThreshold(String textSizeThreshold) {
    this.textSizeThreshold = textSizeThreshold;
    return this;
  }

  /**
   * Size threshold for extracting binary response bodies. Supports humanized size strings, e.g. \&quot;56 Mb\&quot;. Default unit is bytes.
   * @return textSizeThreshold
   */
  @javax.annotation.Nullable
  public String getTextSizeThreshold() {
    return textSizeThreshold;
  }

  public void setTextSizeThreshold(String textSizeThreshold) {
    this.textSizeThreshold = textSizeThreshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria adminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria = (AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria) o;
    return Objects.equals(this.binarySizeThreshold, adminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.binarySizeThreshold) &&
        Objects.equals(this.textSizeThreshold, adminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.textSizeThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binarySizeThreshold, textSizeThreshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria {\n");
    sb.append("    binarySizeThreshold: ").append(toIndentedString(binarySizeThreshold)).append("\n");
    sb.append("    textSizeThreshold: ").append(toIndentedString(textSizeThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("binarySizeThreshold");
    openapiFields.add("textSizeThreshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria is not found in the empty JSON string", AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("binarySizeThreshold") != null && !jsonObj.get("binarySizeThreshold").isJsonNull()) && !jsonObj.get("binarySizeThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `binarySizeThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("binarySizeThreshold").toString()));
      }
      if ((jsonObj.get("textSizeThreshold") != null && !jsonObj.get("textSizeThreshold").isJsonNull()) && !jsonObj.get("textSizeThreshold").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textSizeThreshold` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textSizeThreshold").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.class));

       return (TypeAdapter<T>) new TypeAdapter<AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria>() {
           @Override
           public void write(JsonWriter out, AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
   * @throws IOException if the JSON string is invalid with respect to AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria
   */
  public static AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria.class);
  }

  /**
   * Convert an instance of AdminRecordingsSnapshotPostRequestAllOfExtractBodyCriteria to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

