/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_near_misses_request_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_near_misses_request_post_request::OAI___admin_near_misses_request_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_near_misses_request_post_request::OAI___admin_near_misses_request_post_request() {
    this->initializeModel();
}

OAI___admin_near_misses_request_post_request::~OAI___admin_near_misses_request_post_request() {}

void OAI___admin_near_misses_request_post_request::initializeModel() {

    m_absolute_url_isSet = false;
    m_absolute_url_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAI___admin_near_misses_request_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_near_misses_request_post_request::fromJsonObject(QJsonObject json) {

    m_absolute_url_isValid = ::OpenAPI::fromJsonValue(m_absolute_url, json[QString("absoluteUrl")]);
    m_absolute_url_isSet = !json[QString("absoluteUrl")].isNull() && m_absolute_url_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAI___admin_near_misses_request_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_near_misses_request_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_absolute_url_isSet) {
        obj.insert(QString("absoluteUrl"), ::OpenAPI::toJsonValue(m_absolute_url));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_cookies_isSet) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAI___admin_near_misses_request_post_request::getAbsoluteUrl() const {
    return m_absolute_url;
}
void OAI___admin_near_misses_request_post_request::setAbsoluteUrl(const QString &absolute_url) {
    m_absolute_url = absolute_url;
    m_absolute_url_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_absolute_url_Set() const{
    return m_absolute_url_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_absolute_url_Valid() const{
    return m_absolute_url_isValid;
}

QString OAI___admin_near_misses_request_post_request::getBody() const {
    return m_body;
}
void OAI___admin_near_misses_request_post_request::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_body_Set() const{
    return m_body_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_body_Valid() const{
    return m_body_isValid;
}

OAIObject OAI___admin_near_misses_request_post_request::getCookies() const {
    return m_cookies;
}
void OAI___admin_near_misses_request_post_request::setCookies(const OAIObject &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_cookies_Valid() const{
    return m_cookies_isValid;
}

OAIObject OAI___admin_near_misses_request_post_request::getHeaders() const {
    return m_headers;
}
void OAI___admin_near_misses_request_post_request::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAI___admin_near_misses_request_post_request::getMethod() const {
    return m_method;
}
void OAI___admin_near_misses_request_post_request::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_method_Set() const{
    return m_method_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_method_Valid() const{
    return m_method_isValid;
}

QString OAI___admin_near_misses_request_post_request::getUrl() const {
    return m_url;
}
void OAI___admin_near_misses_request_post_request::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI___admin_near_misses_request_post_request::is_url_Set() const{
    return m_url_isSet;
}

bool OAI___admin_near_misses_request_post_request::is_url_Valid() const{
    return m_url_isValid;
}

bool OAI___admin_near_misses_request_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_absolute_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_near_misses_request_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
