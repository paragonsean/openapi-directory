/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_mappings_find_by_metadata_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_mappings_find_by_metadata_post_request::OAI___admin_mappings_find_by_metadata_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_mappings_find_by_metadata_post_request::OAI___admin_mappings_find_by_metadata_post_request() {
    this->initializeModel();
}

OAI___admin_mappings_find_by_metadata_post_request::~OAI___admin_mappings_find_by_metadata_post_request() {}

void OAI___admin_mappings_find_by_metadata_post_request::initializeModel() {

    m_case_insensitive_isSet = false;
    m_case_insensitive_isValid = false;

    m_equal_to_isSet = false;
    m_equal_to_isValid = false;

    m_contains_isSet = false;
    m_contains_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_does_not_match_isSet = false;
    m_does_not_match_isValid = false;

    m_equal_to_json_isSet = false;
    m_equal_to_json_isValid = false;

    m_ignore_array_order_isSet = false;
    m_ignore_array_order_isValid = false;

    m_ignore_extra_elements_isSet = false;
    m_ignore_extra_elements_isValid = false;

    m_matches_json_path_isSet = false;
    m_matches_json_path_isValid = false;

    m_equal_to_xml_isSet = false;
    m_equal_to_xml_isValid = false;

    m_matches_xpath_isSet = false;
    m_matches_xpath_isValid = false;

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;

    m_value_pattern_isSet = false;
    m_value_pattern_isValid = false;
}

void OAI___admin_mappings_find_by_metadata_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_mappings_find_by_metadata_post_request::fromJsonObject(QJsonObject json) {

    m_case_insensitive_isValid = ::OpenAPI::fromJsonValue(m_case_insensitive, json[QString("caseInsensitive")]);
    m_case_insensitive_isSet = !json[QString("caseInsensitive")].isNull() && m_case_insensitive_isValid;

    m_equal_to_isValid = ::OpenAPI::fromJsonValue(m_equal_to, json[QString("equalTo")]);
    m_equal_to_isSet = !json[QString("equalTo")].isNull() && m_equal_to_isValid;

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("matches")]);
    m_matches_isSet = !json[QString("matches")].isNull() && m_matches_isValid;

    m_does_not_match_isValid = ::OpenAPI::fromJsonValue(m_does_not_match, json[QString("doesNotMatch")]);
    m_does_not_match_isSet = !json[QString("doesNotMatch")].isNull() && m_does_not_match_isValid;

    m_equal_to_json_isValid = ::OpenAPI::fromJsonValue(m_equal_to_json, json[QString("equalToJson")]);
    m_equal_to_json_isSet = !json[QString("equalToJson")].isNull() && m_equal_to_json_isValid;

    m_ignore_array_order_isValid = ::OpenAPI::fromJsonValue(m_ignore_array_order, json[QString("ignoreArrayOrder")]);
    m_ignore_array_order_isSet = !json[QString("ignoreArrayOrder")].isNull() && m_ignore_array_order_isValid;

    m_ignore_extra_elements_isValid = ::OpenAPI::fromJsonValue(m_ignore_extra_elements, json[QString("ignoreExtraElements")]);
    m_ignore_extra_elements_isSet = !json[QString("ignoreExtraElements")].isNull() && m_ignore_extra_elements_isValid;

    m_matches_json_path_isValid = ::OpenAPI::fromJsonValue(m_matches_json_path, json[QString("matchesJsonPath")]);
    m_matches_json_path_isSet = !json[QString("matchesJsonPath")].isNull() && m_matches_json_path_isValid;

    m_equal_to_xml_isValid = ::OpenAPI::fromJsonValue(m_equal_to_xml, json[QString("equalToXml")]);
    m_equal_to_xml_isSet = !json[QString("equalToXml")].isNull() && m_equal_to_xml_isValid;

    m_matches_xpath_isValid = ::OpenAPI::fromJsonValue(m_matches_xpath, json[QString("matchesXpath")]);
    m_matches_xpath_isSet = !json[QString("matchesXpath")].isNull() && m_matches_xpath_isValid;

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("namespaces")]);
    m_namespaces_isSet = !json[QString("namespaces")].isNull() && m_namespaces_isValid;

    m_value_pattern_isValid = ::OpenAPI::fromJsonValue(m_value_pattern, json[QString("valuePattern")]);
    m_value_pattern_isSet = !json[QString("valuePattern")].isNull() && m_value_pattern_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_mappings_find_by_metadata_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_case_insensitive_isSet) {
        obj.insert(QString("caseInsensitive"), ::OpenAPI::toJsonValue(m_case_insensitive));
    }
    if (m_equal_to_isSet) {
        obj.insert(QString("equalTo"), ::OpenAPI::toJsonValue(m_equal_to));
    }
    if (m_contains_isSet) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    if (m_matches_isSet) {
        obj.insert(QString("matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_does_not_match_isSet) {
        obj.insert(QString("doesNotMatch"), ::OpenAPI::toJsonValue(m_does_not_match));
    }
    if (m_equal_to_json_isSet) {
        obj.insert(QString("equalToJson"), ::OpenAPI::toJsonValue(m_equal_to_json));
    }
    if (m_ignore_array_order_isSet) {
        obj.insert(QString("ignoreArrayOrder"), ::OpenAPI::toJsonValue(m_ignore_array_order));
    }
    if (m_ignore_extra_elements_isSet) {
        obj.insert(QString("ignoreExtraElements"), ::OpenAPI::toJsonValue(m_ignore_extra_elements));
    }
    if (m_matches_json_path_isSet) {
        obj.insert(QString("matchesJsonPath"), ::OpenAPI::toJsonValue(m_matches_json_path));
    }
    if (m_equal_to_xml_isSet) {
        obj.insert(QString("equalToXml"), ::OpenAPI::toJsonValue(m_equal_to_xml));
    }
    if (m_matches_xpath_isSet) {
        obj.insert(QString("matchesXpath"), ::OpenAPI::toJsonValue(m_matches_xpath));
    }
    if (m_namespaces_isSet) {
        obj.insert(QString("namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    if (m_value_pattern_isSet) {
        obj.insert(QString("valuePattern"), ::OpenAPI::toJsonValue(m_value_pattern));
    }
    return obj;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isCaseInsensitive() const {
    return m_case_insensitive;
}
void OAI___admin_mappings_find_by_metadata_post_request::setCaseInsensitive(const bool &case_insensitive) {
    m_case_insensitive = case_insensitive;
    m_case_insensitive_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_case_insensitive_Set() const{
    return m_case_insensitive_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_case_insensitive_Valid() const{
    return m_case_insensitive_isValid;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isEqualTo() const {
    return m_equal_to;
}
void OAI___admin_mappings_find_by_metadata_post_request::setEqualTo(const bool &equal_to) {
    m_equal_to = equal_to;
    m_equal_to_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_Set() const{
    return m_equal_to_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_Valid() const{
    return m_equal_to_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getContains() const {
    return m_contains;
}
void OAI___admin_mappings_find_by_metadata_post_request::setContains(const QString &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_contains_Valid() const{
    return m_contains_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getMatches() const {
    return m_matches;
}
void OAI___admin_mappings_find_by_metadata_post_request::setMatches(const QString &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_Valid() const{
    return m_matches_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getDoesNotMatch() const {
    return m_does_not_match;
}
void OAI___admin_mappings_find_by_metadata_post_request::setDoesNotMatch(const QString &does_not_match) {
    m_does_not_match = does_not_match;
    m_does_not_match_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_does_not_match_Set() const{
    return m_does_not_match_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_does_not_match_Valid() const{
    return m_does_not_match_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getEqualToJson() const {
    return m_equal_to_json;
}
void OAI___admin_mappings_find_by_metadata_post_request::setEqualToJson(const QString &equal_to_json) {
    m_equal_to_json = equal_to_json;
    m_equal_to_json_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_json_Set() const{
    return m_equal_to_json_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_json_Valid() const{
    return m_equal_to_json_isValid;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isIgnoreArrayOrder() const {
    return m_ignore_array_order;
}
void OAI___admin_mappings_find_by_metadata_post_request::setIgnoreArrayOrder(const bool &ignore_array_order) {
    m_ignore_array_order = ignore_array_order;
    m_ignore_array_order_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_ignore_array_order_Set() const{
    return m_ignore_array_order_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_ignore_array_order_Valid() const{
    return m_ignore_array_order_isValid;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isIgnoreExtraElements() const {
    return m_ignore_extra_elements;
}
void OAI___admin_mappings_find_by_metadata_post_request::setIgnoreExtraElements(const bool &ignore_extra_elements) {
    m_ignore_extra_elements = ignore_extra_elements;
    m_ignore_extra_elements_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_ignore_extra_elements_Set() const{
    return m_ignore_extra_elements_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_ignore_extra_elements_Valid() const{
    return m_ignore_extra_elements_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getMatchesJsonPath() const {
    return m_matches_json_path;
}
void OAI___admin_mappings_find_by_metadata_post_request::setMatchesJsonPath(const QString &matches_json_path) {
    m_matches_json_path = matches_json_path;
    m_matches_json_path_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_json_path_Set() const{
    return m_matches_json_path_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_json_path_Valid() const{
    return m_matches_json_path_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getEqualToXml() const {
    return m_equal_to_xml;
}
void OAI___admin_mappings_find_by_metadata_post_request::setEqualToXml(const QString &equal_to_xml) {
    m_equal_to_xml = equal_to_xml;
    m_equal_to_xml_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_xml_Set() const{
    return m_equal_to_xml_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_equal_to_xml_Valid() const{
    return m_equal_to_xml_isValid;
}

QString OAI___admin_mappings_find_by_metadata_post_request::getMatchesXpath() const {
    return m_matches_xpath;
}
void OAI___admin_mappings_find_by_metadata_post_request::setMatchesXpath(const QString &matches_xpath) {
    m_matches_xpath = matches_xpath;
    m_matches_xpath_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_xpath_Set() const{
    return m_matches_xpath_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_matches_xpath_Valid() const{
    return m_matches_xpath_isValid;
}

OAIObject OAI___admin_mappings_find_by_metadata_post_request::getNamespaces() const {
    return m_namespaces;
}
void OAI___admin_mappings_find_by_metadata_post_request::setNamespaces(const OAIObject &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

OAIObject OAI___admin_mappings_find_by_metadata_post_request::getValuePattern() const {
    return m_value_pattern;
}
void OAI___admin_mappings_find_by_metadata_post_request::setValuePattern(const OAIObject &value_pattern) {
    m_value_pattern = value_pattern;
    m_value_pattern_isSet = true;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_value_pattern_Set() const{
    return m_value_pattern_isSet;
}

bool OAI___admin_mappings_find_by_metadata_post_request::is_value_pattern_Valid() const{
    return m_value_pattern_isValid;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_insensitive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equal_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_does_not_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equal_to_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_array_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_extra_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_json_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equal_to_xml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches_xpath_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_mappings_find_by_metadata_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_equal_to_isValid && m_contains_isValid && m_matches_isValid && m_does_not_match_isValid && m_equal_to_json_isValid && m_matches_json_path_isValid && m_equal_to_xml_isValid && m_matches_xpath_isValid && true;
}

} // namespace OpenAPI
