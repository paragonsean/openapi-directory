/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_settings_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_settings_post_request::OAI___admin_settings_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_settings_post_request::OAI___admin_settings_post_request() {
    this->initializeModel();
}

OAI___admin_settings_post_request::~OAI___admin_settings_post_request() {}

void OAI___admin_settings_post_request::initializeModel() {

    m_median_isSet = false;
    m_median_isValid = false;

    m_sigma_isSet = false;
    m_sigma_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_lower_isSet = false;
    m_lower_isValid = false;

    m_upper_isSet = false;
    m_upper_isValid = false;

    m_fixed_delay_isSet = false;
    m_fixed_delay_isValid = false;
}

void OAI___admin_settings_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_settings_post_request::fromJsonObject(QJsonObject json) {

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_sigma_isValid = ::OpenAPI::fromJsonValue(m_sigma, json[QString("sigma")]);
    m_sigma_isSet = !json[QString("sigma")].isNull() && m_sigma_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_lower_isValid = ::OpenAPI::fromJsonValue(m_lower, json[QString("lower")]);
    m_lower_isSet = !json[QString("lower")].isNull() && m_lower_isValid;

    m_upper_isValid = ::OpenAPI::fromJsonValue(m_upper, json[QString("upper")]);
    m_upper_isSet = !json[QString("upper")].isNull() && m_upper_isValid;

    m_fixed_delay_isValid = ::OpenAPI::fromJsonValue(m_fixed_delay, json[QString("fixedDelay")]);
    m_fixed_delay_isSet = !json[QString("fixedDelay")].isNull() && m_fixed_delay_isValid;
}

QString OAI___admin_settings_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_settings_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_sigma_isSet) {
        obj.insert(QString("sigma"), ::OpenAPI::toJsonValue(m_sigma));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_lower_isSet) {
        obj.insert(QString("lower"), ::OpenAPI::toJsonValue(m_lower));
    }
    if (m_upper_isSet) {
        obj.insert(QString("upper"), ::OpenAPI::toJsonValue(m_upper));
    }
    if (m_fixed_delay_isSet) {
        obj.insert(QString("fixedDelay"), ::OpenAPI::toJsonValue(m_fixed_delay));
    }
    return obj;
}

qint32 OAI___admin_settings_post_request::getMedian() const {
    return m_median;
}
void OAI___admin_settings_post_request::setMedian(const qint32 &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAI___admin_settings_post_request::is_median_Set() const{
    return m_median_isSet;
}

bool OAI___admin_settings_post_request::is_median_Valid() const{
    return m_median_isValid;
}

double OAI___admin_settings_post_request::getSigma() const {
    return m_sigma;
}
void OAI___admin_settings_post_request::setSigma(const double &sigma) {
    m_sigma = sigma;
    m_sigma_isSet = true;
}

bool OAI___admin_settings_post_request::is_sigma_Set() const{
    return m_sigma_isSet;
}

bool OAI___admin_settings_post_request::is_sigma_Valid() const{
    return m_sigma_isValid;
}

QString OAI___admin_settings_post_request::getType() const {
    return m_type;
}
void OAI___admin_settings_post_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI___admin_settings_post_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAI___admin_settings_post_request::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAI___admin_settings_post_request::getLower() const {
    return m_lower;
}
void OAI___admin_settings_post_request::setLower(const qint32 &lower) {
    m_lower = lower;
    m_lower_isSet = true;
}

bool OAI___admin_settings_post_request::is_lower_Set() const{
    return m_lower_isSet;
}

bool OAI___admin_settings_post_request::is_lower_Valid() const{
    return m_lower_isValid;
}

qint32 OAI___admin_settings_post_request::getUpper() const {
    return m_upper;
}
void OAI___admin_settings_post_request::setUpper(const qint32 &upper) {
    m_upper = upper;
    m_upper_isSet = true;
}

bool OAI___admin_settings_post_request::is_upper_Set() const{
    return m_upper_isSet;
}

bool OAI___admin_settings_post_request::is_upper_Valid() const{
    return m_upper_isValid;
}

double OAI___admin_settings_post_request::getFixedDelay() const {
    return m_fixed_delay;
}
void OAI___admin_settings_post_request::setFixedDelay(const double &fixed_delay) {
    m_fixed_delay = fixed_delay;
    m_fixed_delay_isSet = true;
}

bool OAI___admin_settings_post_request::is_fixed_delay_Set() const{
    return m_fixed_delay_isSet;
}

bool OAI___admin_settings_post_request::is_fixed_delay_Valid() const{
    return m_fixed_delay_isValid;
}

bool OAI___admin_settings_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sigma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_delay_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_settings_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
