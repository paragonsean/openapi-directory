/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIString_contains.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIString_contains::OAIString_contains(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIString_contains::OAIString_contains() {
    this->initializeModel();
}

OAIString_contains::~OAIString_contains() {}

void OAIString_contains::initializeModel() {

    m_contains_isSet = false;
    m_contains_isValid = false;
}

void OAIString_contains::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIString_contains::fromJsonObject(QJsonObject json) {

    m_contains_isValid = ::OpenAPI::fromJsonValue(m_contains, json[QString("contains")]);
    m_contains_isSet = !json[QString("contains")].isNull() && m_contains_isValid;
}

QString OAIString_contains::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIString_contains::asJsonObject() const {
    QJsonObject obj;
    if (m_contains_isSet) {
        obj.insert(QString("contains"), ::OpenAPI::toJsonValue(m_contains));
    }
    return obj;
}

QString OAIString_contains::getContains() const {
    return m_contains;
}
void OAIString_contains::setContains(const QString &contains) {
    m_contains = contains;
    m_contains_isSet = true;
}

bool OAIString_contains::is_contains_Set() const{
    return m_contains_isSet;
}

bool OAIString_contains::is_contains_Valid() const{
    return m_contains_isValid;
}

bool OAIString_contains::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contains_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIString_contains::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contains_isValid && true;
}

} // namespace OpenAPI
