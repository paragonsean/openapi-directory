/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_recordings_start_post_request_allOf_filters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_recordings_start_post_request_allOf_filters::OAI___admin_recordings_start_post_request_allOf_filters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_recordings_start_post_request_allOf_filters::OAI___admin_recordings_start_post_request_allOf_filters() {
    this->initializeModel();
}

OAI___admin_recordings_start_post_request_allOf_filters::~OAI___admin_recordings_start_post_request_allOf_filters() {}

void OAI___admin_recordings_start_post_request_allOf_filters::initializeModel() {

    m_basic_auth_credentials_isSet = false;
    m_basic_auth_credentials_isValid = false;

    m_body_patterns_isSet = false;
    m_body_patterns_isValid = false;

    m_cookies_isSet = false;
    m_cookies_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_query_parameters_isSet = false;
    m_query_parameters_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_url_path_isSet = false;
    m_url_path_isValid = false;

    m_url_path_pattern_isSet = false;
    m_url_path_pattern_isValid = false;

    m_url_pattern_isSet = false;
    m_url_pattern_isValid = false;
}

void OAI___admin_recordings_start_post_request_allOf_filters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_recordings_start_post_request_allOf_filters::fromJsonObject(QJsonObject json) {

    m_basic_auth_credentials_isValid = ::OpenAPI::fromJsonValue(m_basic_auth_credentials, json[QString("basicAuthCredentials")]);
    m_basic_auth_credentials_isSet = !json[QString("basicAuthCredentials")].isNull() && m_basic_auth_credentials_isValid;

    m_body_patterns_isValid = ::OpenAPI::fromJsonValue(m_body_patterns, json[QString("bodyPatterns")]);
    m_body_patterns_isSet = !json[QString("bodyPatterns")].isNull() && m_body_patterns_isValid;

    m_cookies_isValid = ::OpenAPI::fromJsonValue(m_cookies, json[QString("cookies")]);
    m_cookies_isSet = !json[QString("cookies")].isNull() && m_cookies_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_query_parameters_isValid = ::OpenAPI::fromJsonValue(m_query_parameters, json[QString("queryParameters")]);
    m_query_parameters_isSet = !json[QString("queryParameters")].isNull() && m_query_parameters_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_url_path_isValid = ::OpenAPI::fromJsonValue(m_url_path, json[QString("urlPath")]);
    m_url_path_isSet = !json[QString("urlPath")].isNull() && m_url_path_isValid;

    m_url_path_pattern_isValid = ::OpenAPI::fromJsonValue(m_url_path_pattern, json[QString("urlPathPattern")]);
    m_url_path_pattern_isSet = !json[QString("urlPathPattern")].isNull() && m_url_path_pattern_isValid;

    m_url_pattern_isValid = ::OpenAPI::fromJsonValue(m_url_pattern, json[QString("urlPattern")]);
    m_url_pattern_isSet = !json[QString("urlPattern")].isNull() && m_url_pattern_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_recordings_start_post_request_allOf_filters::asJsonObject() const {
    QJsonObject obj;
    if (m_basic_auth_credentials.isSet()) {
        obj.insert(QString("basicAuthCredentials"), ::OpenAPI::toJsonValue(m_basic_auth_credentials));
    }
    if (m_body_patterns.size() > 0) {
        obj.insert(QString("bodyPatterns"), ::OpenAPI::toJsonValue(m_body_patterns));
    }
    if (m_cookies_isSet) {
        obj.insert(QString("cookies"), ::OpenAPI::toJsonValue(m_cookies));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_query_parameters_isSet) {
        obj.insert(QString("queryParameters"), ::OpenAPI::toJsonValue(m_query_parameters));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_url_path_isSet) {
        obj.insert(QString("urlPath"), ::OpenAPI::toJsonValue(m_url_path));
    }
    if (m_url_path_pattern_isSet) {
        obj.insert(QString("urlPathPattern"), ::OpenAPI::toJsonValue(m_url_path_pattern));
    }
    if (m_url_pattern_isSet) {
        obj.insert(QString("urlPattern"), ::OpenAPI::toJsonValue(m_url_pattern));
    }
    return obj;
}

OAI___admin_mappings_get_200_response_mappings_inner_request_basicAuthCredentials OAI___admin_recordings_start_post_request_allOf_filters::getBasicAuthCredentials() const {
    return m_basic_auth_credentials;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setBasicAuthCredentials(const OAI___admin_mappings_get_200_response_mappings_inner_request_basicAuthCredentials &basic_auth_credentials) {
    m_basic_auth_credentials = basic_auth_credentials;
    m_basic_auth_credentials_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_basic_auth_credentials_Set() const{
    return m_basic_auth_credentials_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_basic_auth_credentials_Valid() const{
    return m_basic_auth_credentials_isValid;
}

QList<OAIObject> OAI___admin_recordings_start_post_request_allOf_filters::getBodyPatterns() const {
    return m_body_patterns;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setBodyPatterns(const QList<OAIObject> &body_patterns) {
    m_body_patterns = body_patterns;
    m_body_patterns_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_body_patterns_Set() const{
    return m_body_patterns_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_body_patterns_Valid() const{
    return m_body_patterns_isValid;
}

OAIObject OAI___admin_recordings_start_post_request_allOf_filters::getCookies() const {
    return m_cookies;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setCookies(const OAIObject &cookies) {
    m_cookies = cookies;
    m_cookies_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_cookies_Set() const{
    return m_cookies_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_cookies_Valid() const{
    return m_cookies_isValid;
}

OAIObject OAI___admin_recordings_start_post_request_allOf_filters::getHeaders() const {
    return m_headers;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::getMethod() const {
    return m_method;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_method_Set() const{
    return m_method_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_method_Valid() const{
    return m_method_isValid;
}

OAIObject OAI___admin_recordings_start_post_request_allOf_filters::getQueryParameters() const {
    return m_query_parameters;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setQueryParameters(const OAIObject &query_parameters) {
    m_query_parameters = query_parameters;
    m_query_parameters_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_query_parameters_Set() const{
    return m_query_parameters_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_query_parameters_Valid() const{
    return m_query_parameters_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::getUrl() const {
    return m_url;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_Set() const{
    return m_url_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_Valid() const{
    return m_url_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::getUrlPath() const {
    return m_url_path;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setUrlPath(const QString &url_path) {
    m_url_path = url_path;
    m_url_path_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_path_Set() const{
    return m_url_path_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_path_Valid() const{
    return m_url_path_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::getUrlPathPattern() const {
    return m_url_path_pattern;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setUrlPathPattern(const QString &url_path_pattern) {
    m_url_path_pattern = url_path_pattern;
    m_url_path_pattern_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_path_pattern_Set() const{
    return m_url_path_pattern_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_path_pattern_Valid() const{
    return m_url_path_pattern_isValid;
}

QString OAI___admin_recordings_start_post_request_allOf_filters::getUrlPattern() const {
    return m_url_pattern;
}
void OAI___admin_recordings_start_post_request_allOf_filters::setUrlPattern(const QString &url_pattern) {
    m_url_pattern = url_pattern;
    m_url_pattern_isSet = true;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_pattern_Set() const{
    return m_url_pattern_isSet;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::is_url_pattern_Valid() const{
    return m_url_pattern_isValid;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basic_auth_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_patterns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_path_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_recordings_start_post_request_allOf_filters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
