/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_mappings_get_200_response_mappings_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_mappings_get_200_response_mappings_inner::OAI___admin_mappings_get_200_response_mappings_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_mappings_get_200_response_mappings_inner::OAI___admin_mappings_get_200_response_mappings_inner() {
    this->initializeModel();
}

OAI___admin_mappings_get_200_response_mappings_inner::~OAI___admin_mappings_get_200_response_mappings_inner() {}

void OAI___admin_mappings_get_200_response_mappings_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_scenario_state_isSet = false;
    m_new_scenario_state_isValid = false;

    m_persistent_isSet = false;
    m_persistent_isValid = false;

    m_post_serve_actions_isSet = false;
    m_post_serve_actions_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_required_scenario_state_isSet = false;
    m_required_scenario_state_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_scenario_name_isSet = false;
    m_scenario_name_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAI___admin_mappings_get_200_response_mappings_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_mappings_get_200_response_mappings_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_scenario_state_isValid = ::OpenAPI::fromJsonValue(m_new_scenario_state, json[QString("newScenarioState")]);
    m_new_scenario_state_isSet = !json[QString("newScenarioState")].isNull() && m_new_scenario_state_isValid;

    m_persistent_isValid = ::OpenAPI::fromJsonValue(m_persistent, json[QString("persistent")]);
    m_persistent_isSet = !json[QString("persistent")].isNull() && m_persistent_isValid;

    m_post_serve_actions_isValid = ::OpenAPI::fromJsonValue(m_post_serve_actions, json[QString("postServeActions")]);
    m_post_serve_actions_isSet = !json[QString("postServeActions")].isNull() && m_post_serve_actions_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_required_scenario_state_isValid = ::OpenAPI::fromJsonValue(m_required_scenario_state, json[QString("requiredScenarioState")]);
    m_required_scenario_state_isSet = !json[QString("requiredScenarioState")].isNull() && m_required_scenario_state_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_scenario_name_isValid = ::OpenAPI::fromJsonValue(m_scenario_name, json[QString("scenarioName")]);
    m_scenario_name_isSet = !json[QString("scenarioName")].isNull() && m_scenario_name_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_mappings_get_200_response_mappings_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_scenario_state_isSet) {
        obj.insert(QString("newScenarioState"), ::OpenAPI::toJsonValue(m_new_scenario_state));
    }
    if (m_persistent_isSet) {
        obj.insert(QString("persistent"), ::OpenAPI::toJsonValue(m_persistent));
    }
    if (m_post_serve_actions_isSet) {
        obj.insert(QString("postServeActions"), ::OpenAPI::toJsonValue(m_post_serve_actions));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_required_scenario_state_isSet) {
        obj.insert(QString("requiredScenarioState"), ::OpenAPI::toJsonValue(m_required_scenario_state));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_scenario_name_isSet) {
        obj.insert(QString("scenarioName"), ::OpenAPI::toJsonValue(m_scenario_name));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getId() const {
    return m_id;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner::getMetadata() const {
    return m_metadata;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getName() const {
    return m_name;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getNewScenarioState() const {
    return m_new_scenario_state;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setNewScenarioState(const QString &new_scenario_state) {
    m_new_scenario_state = new_scenario_state;
    m_new_scenario_state_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_new_scenario_state_Set() const{
    return m_new_scenario_state_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_new_scenario_state_Valid() const{
    return m_new_scenario_state_isValid;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::isPersistent() const {
    return m_persistent;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setPersistent(const bool &persistent) {
    m_persistent = persistent;
    m_persistent_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_persistent_Set() const{
    return m_persistent_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_persistent_Valid() const{
    return m_persistent_isValid;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner::getPostServeActions() const {
    return m_post_serve_actions;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setPostServeActions(const OAIObject &post_serve_actions) {
    m_post_serve_actions = post_serve_actions;
    m_post_serve_actions_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_post_serve_actions_Set() const{
    return m_post_serve_actions_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_post_serve_actions_Valid() const{
    return m_post_serve_actions_isValid;
}

qint32 OAI___admin_mappings_get_200_response_mappings_inner::getPriority() const {
    return m_priority;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_priority_Valid() const{
    return m_priority_isValid;
}

OAI___admin_mappings_get_200_response_mappings_inner_request OAI___admin_mappings_get_200_response_mappings_inner::getRequest() const {
    return m_request;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setRequest(const OAI___admin_mappings_get_200_response_mappings_inner_request &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_request_Set() const{
    return m_request_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_request_Valid() const{
    return m_request_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getRequiredScenarioState() const {
    return m_required_scenario_state;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setRequiredScenarioState(const QString &required_scenario_state) {
    m_required_scenario_state = required_scenario_state;
    m_required_scenario_state_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_required_scenario_state_Set() const{
    return m_required_scenario_state_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_required_scenario_state_Valid() const{
    return m_required_scenario_state_isValid;
}

OAI___admin_mappings_get_200_response_mappings_inner_response OAI___admin_mappings_get_200_response_mappings_inner::getResponse() const {
    return m_response;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setResponse(const OAI___admin_mappings_get_200_response_mappings_inner_response &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_response_Set() const{
    return m_response_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_response_Valid() const{
    return m_response_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getScenarioName() const {
    return m_scenario_name;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setScenarioName(const QString &scenario_name) {
    m_scenario_name = scenario_name;
    m_scenario_name_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_scenario_name_Set() const{
    return m_scenario_name_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_scenario_name_Valid() const{
    return m_scenario_name_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner::getUuid() const {
    return m_uuid;
}
void OAI___admin_mappings_get_200_response_mappings_inner::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_scenario_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_serve_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_scenario_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scenario_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_mappings_get_200_response_mappings_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
