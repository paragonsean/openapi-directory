/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_recordings_start_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_recordings_start_post_request::OAI___admin_recordings_start_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_recordings_start_post_request::OAI___admin_recordings_start_post_request() {
    this->initializeModel();
}

OAI___admin_recordings_start_post_request::~OAI___admin_recordings_start_post_request() {}

void OAI___admin_recordings_start_post_request::initializeModel() {

    m_capture_headers_isSet = false;
    m_capture_headers_isValid = false;

    m_extract_body_criteria_isSet = false;
    m_extract_body_criteria_isValid = false;

    m_persist_isSet = false;
    m_persist_isValid = false;

    m_repeats_as_scenarios_isSet = false;
    m_repeats_as_scenarios_isValid = false;

    m_request_body_pattern_isSet = false;
    m_request_body_pattern_isValid = false;

    m_transformer_parameters_isSet = false;
    m_transformer_parameters_isValid = false;

    m_transformers_isSet = false;
    m_transformers_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_target_base_url_isSet = false;
    m_target_base_url_isValid = false;
}

void OAI___admin_recordings_start_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_recordings_start_post_request::fromJsonObject(QJsonObject json) {

    m_capture_headers_isValid = ::OpenAPI::fromJsonValue(m_capture_headers, json[QString("captureHeaders")]);
    m_capture_headers_isSet = !json[QString("captureHeaders")].isNull() && m_capture_headers_isValid;

    m_extract_body_criteria_isValid = ::OpenAPI::fromJsonValue(m_extract_body_criteria, json[QString("extractBodyCriteria")]);
    m_extract_body_criteria_isSet = !json[QString("extractBodyCriteria")].isNull() && m_extract_body_criteria_isValid;

    m_persist_isValid = ::OpenAPI::fromJsonValue(m_persist, json[QString("persist")]);
    m_persist_isSet = !json[QString("persist")].isNull() && m_persist_isValid;

    m_repeats_as_scenarios_isValid = ::OpenAPI::fromJsonValue(m_repeats_as_scenarios, json[QString("repeatsAsScenarios")]);
    m_repeats_as_scenarios_isSet = !json[QString("repeatsAsScenarios")].isNull() && m_repeats_as_scenarios_isValid;

    m_request_body_pattern_isValid = ::OpenAPI::fromJsonValue(m_request_body_pattern, json[QString("requestBodyPattern")]);
    m_request_body_pattern_isSet = !json[QString("requestBodyPattern")].isNull() && m_request_body_pattern_isValid;

    m_transformer_parameters_isValid = ::OpenAPI::fromJsonValue(m_transformer_parameters, json[QString("transformerParameters")]);
    m_transformer_parameters_isSet = !json[QString("transformerParameters")].isNull() && m_transformer_parameters_isValid;

    m_transformers_isValid = ::OpenAPI::fromJsonValue(m_transformers, json[QString("transformers")]);
    m_transformers_isSet = !json[QString("transformers")].isNull() && m_transformers_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_target_base_url_isValid = ::OpenAPI::fromJsonValue(m_target_base_url, json[QString("targetBaseUrl")]);
    m_target_base_url_isSet = !json[QString("targetBaseUrl")].isNull() && m_target_base_url_isValid;
}

QString OAI___admin_recordings_start_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_recordings_start_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_capture_headers.size() > 0) {
        obj.insert(QString("captureHeaders"), ::OpenAPI::toJsonValue(m_capture_headers));
    }
    if (m_extract_body_criteria.isSet()) {
        obj.insert(QString("extractBodyCriteria"), ::OpenAPI::toJsonValue(m_extract_body_criteria));
    }
    if (m_persist_isSet) {
        obj.insert(QString("persist"), ::OpenAPI::toJsonValue(m_persist));
    }
    if (m_repeats_as_scenarios_isSet) {
        obj.insert(QString("repeatsAsScenarios"), ::OpenAPI::toJsonValue(m_repeats_as_scenarios));
    }
    if (m_request_body_pattern.isSet()) {
        obj.insert(QString("requestBodyPattern"), ::OpenAPI::toJsonValue(m_request_body_pattern));
    }
    if (m_transformer_parameters_isSet) {
        obj.insert(QString("transformerParameters"), ::OpenAPI::toJsonValue(m_transformer_parameters));
    }
    if (m_transformers.size() > 0) {
        obj.insert(QString("transformers"), ::OpenAPI::toJsonValue(m_transformers));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_target_base_url_isSet) {
        obj.insert(QString("targetBaseUrl"), ::OpenAPI::toJsonValue(m_target_base_url));
    }
    return obj;
}

QMap<QString, OAI___admin_recordings_snapshot_post_request_allOf_captureHeaders_value> OAI___admin_recordings_start_post_request::getCaptureHeaders() const {
    return m_capture_headers;
}
void OAI___admin_recordings_start_post_request::setCaptureHeaders(const QMap<QString, OAI___admin_recordings_snapshot_post_request_allOf_captureHeaders_value> &capture_headers) {
    m_capture_headers = capture_headers;
    m_capture_headers_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_capture_headers_Set() const{
    return m_capture_headers_isSet;
}

bool OAI___admin_recordings_start_post_request::is_capture_headers_Valid() const{
    return m_capture_headers_isValid;
}

OAI___admin_recordings_snapshot_post_request_allOf_extractBodyCriteria OAI___admin_recordings_start_post_request::getExtractBodyCriteria() const {
    return m_extract_body_criteria;
}
void OAI___admin_recordings_start_post_request::setExtractBodyCriteria(const OAI___admin_recordings_snapshot_post_request_allOf_extractBodyCriteria &extract_body_criteria) {
    m_extract_body_criteria = extract_body_criteria;
    m_extract_body_criteria_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_extract_body_criteria_Set() const{
    return m_extract_body_criteria_isSet;
}

bool OAI___admin_recordings_start_post_request::is_extract_body_criteria_Valid() const{
    return m_extract_body_criteria_isValid;
}

bool OAI___admin_recordings_start_post_request::isPersist() const {
    return m_persist;
}
void OAI___admin_recordings_start_post_request::setPersist(const bool &persist) {
    m_persist = persist;
    m_persist_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_persist_Set() const{
    return m_persist_isSet;
}

bool OAI___admin_recordings_start_post_request::is_persist_Valid() const{
    return m_persist_isValid;
}

bool OAI___admin_recordings_start_post_request::isRepeatsAsScenarios() const {
    return m_repeats_as_scenarios;
}
void OAI___admin_recordings_start_post_request::setRepeatsAsScenarios(const bool &repeats_as_scenarios) {
    m_repeats_as_scenarios = repeats_as_scenarios;
    m_repeats_as_scenarios_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_repeats_as_scenarios_Set() const{
    return m_repeats_as_scenarios_isSet;
}

bool OAI___admin_recordings_start_post_request::is_repeats_as_scenarios_Valid() const{
    return m_repeats_as_scenarios_isValid;
}

OAI___admin_recordings_snapshot_post_request_allOf_requestBodyPattern OAI___admin_recordings_start_post_request::getRequestBodyPattern() const {
    return m_request_body_pattern;
}
void OAI___admin_recordings_start_post_request::setRequestBodyPattern(const OAI___admin_recordings_snapshot_post_request_allOf_requestBodyPattern &request_body_pattern) {
    m_request_body_pattern = request_body_pattern;
    m_request_body_pattern_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_request_body_pattern_Set() const{
    return m_request_body_pattern_isSet;
}

bool OAI___admin_recordings_start_post_request::is_request_body_pattern_Valid() const{
    return m_request_body_pattern_isValid;
}

OAIObject OAI___admin_recordings_start_post_request::getTransformerParameters() const {
    return m_transformer_parameters;
}
void OAI___admin_recordings_start_post_request::setTransformerParameters(const OAIObject &transformer_parameters) {
    m_transformer_parameters = transformer_parameters;
    m_transformer_parameters_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_transformer_parameters_Set() const{
    return m_transformer_parameters_isSet;
}

bool OAI___admin_recordings_start_post_request::is_transformer_parameters_Valid() const{
    return m_transformer_parameters_isValid;
}

QList<QString> OAI___admin_recordings_start_post_request::getTransformers() const {
    return m_transformers;
}
void OAI___admin_recordings_start_post_request::setTransformers(const QList<QString> &transformers) {
    m_transformers = transformers;
    m_transformers_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_transformers_Set() const{
    return m_transformers_isSet;
}

bool OAI___admin_recordings_start_post_request::is_transformers_Valid() const{
    return m_transformers_isValid;
}

OAI___admin_recordings_start_post_request_allOf_filters OAI___admin_recordings_start_post_request::getFilters() const {
    return m_filters;
}
void OAI___admin_recordings_start_post_request::setFilters(const OAI___admin_recordings_start_post_request_allOf_filters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAI___admin_recordings_start_post_request::is_filters_Valid() const{
    return m_filters_isValid;
}

QString OAI___admin_recordings_start_post_request::getTargetBaseUrl() const {
    return m_target_base_url;
}
void OAI___admin_recordings_start_post_request::setTargetBaseUrl(const QString &target_base_url) {
    m_target_base_url = target_base_url;
    m_target_base_url_isSet = true;
}

bool OAI___admin_recordings_start_post_request::is_target_base_url_Set() const{
    return m_target_base_url_isSet;
}

bool OAI___admin_recordings_start_post_request::is_target_base_url_Valid() const{
    return m_target_base_url_isValid;
}

bool OAI___admin_recordings_start_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capture_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_extract_body_criteria.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_persist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeats_as_scenarios_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_body_pattern.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformer_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_recordings_start_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
