/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRequestsApi_H
#define OAI_OAIRequestsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI___admin_mappings_find_by_metadata_post_request.h"
#include "OAI___admin_mappings_get_200_response_mappings_inner_request.h"
#include "OAI___admin_requests_count_post_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRequestsApi : public QObject {
    Q_OBJECT

public:
    OAIRequestsApi(const int timeOut = 0);
    ~OAIRequestsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai___admin_mappings_get_200_response_mappings_inner_request OAI___admin_mappings_get_200_response_mappings_inner_request [required]
    */
    virtual void adminRequestsCountPost(const OAI___admin_mappings_get_200_response_mappings_inner_request &oai___admin_mappings_get_200_response_mappings_inner_request);


    virtual void adminRequestsDelete();

    /**
    * @param[in]  oai___admin_mappings_get_200_response_mappings_inner_request OAI___admin_mappings_get_200_response_mappings_inner_request [required]
    */
    virtual void adminRequestsFindPost(const OAI___admin_mappings_get_200_response_mappings_inner_request &oai___admin_mappings_get_200_response_mappings_inner_request);

    /**
    * @param[in]  limit QString [optional]
    * @param[in]  since QString [optional]
    */
    virtual void adminRequestsGet(const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &since = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai___admin_mappings_find_by_metadata_post_request OAI___admin_mappings_find_by_metadata_post_request [optional]
    */
    virtual void adminRequestsRemoveByMetadataPost(const ::OpenAPI::OptionalParam<OAI___admin_mappings_find_by_metadata_post_request> &oai___admin_mappings_find_by_metadata_post_request = ::OpenAPI::OptionalParam<OAI___admin_mappings_find_by_metadata_post_request>());

    /**
    * @param[in]  oai___admin_mappings_get_200_response_mappings_inner_request OAI___admin_mappings_get_200_response_mappings_inner_request [required]
    */
    virtual void adminRequestsRemovePost(const OAI___admin_mappings_get_200_response_mappings_inner_request &oai___admin_mappings_get_200_response_mappings_inner_request);

    /**
    * @param[in]  request_id QString [required]
    */
    virtual void adminRequestsRequestIdDelete(const QString &request_id);

    /**
    * @param[in]  request_id QString [required]
    */
    virtual void adminRequestsRequestIdGet(const QString &request_id);


    Q_DECL_DEPRECATED virtual void adminRequestsResetPost();


    virtual void adminRequestsUnmatchedGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminRequestsCountPostCallback(OAIHttpRequestWorker *worker);
    void adminRequestsDeleteCallback(OAIHttpRequestWorker *worker);
    void adminRequestsFindPostCallback(OAIHttpRequestWorker *worker);
    void adminRequestsGetCallback(OAIHttpRequestWorker *worker);
    void adminRequestsRemoveByMetadataPostCallback(OAIHttpRequestWorker *worker);
    void adminRequestsRemovePostCallback(OAIHttpRequestWorker *worker);
    void adminRequestsRequestIdDeleteCallback(OAIHttpRequestWorker *worker);
    void adminRequestsRequestIdGetCallback(OAIHttpRequestWorker *worker);
    void adminRequestsResetPostCallback(OAIHttpRequestWorker *worker);
    void adminRequestsUnmatchedGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminRequestsCountPostSignal(OAI___admin_requests_count_post_200_response summary);
    void adminRequestsDeleteSignal();
    void adminRequestsFindPostSignal();
    void adminRequestsGetSignal();
    void adminRequestsRemoveByMetadataPostSignal();
    void adminRequestsRemovePostSignal();
    void adminRequestsRequestIdDeleteSignal();
    void adminRequestsRequestIdGetSignal();
    void adminRequestsResetPostSignal();
    void adminRequestsUnmatchedGetSignal();


    void adminRequestsCountPostSignalFull(OAIHttpRequestWorker *worker, OAI___admin_requests_count_post_200_response summary);
    void adminRequestsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsFindPostSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsGetSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsRemoveByMetadataPostSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsRemovePostSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsRequestIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsRequestIdGetSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsResetPostSignalFull(OAIHttpRequestWorker *worker);
    void adminRequestsUnmatchedGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use adminRequestsCountPostSignalError() instead")
    void adminRequestsCountPostSignalE(OAI___admin_requests_count_post_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsCountPostSignalError(OAI___admin_requests_count_post_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsDeleteSignalError() instead")
    void adminRequestsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsFindPostSignalError() instead")
    void adminRequestsFindPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsFindPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsGetSignalError() instead")
    void adminRequestsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRemoveByMetadataPostSignalError() instead")
    void adminRequestsRemoveByMetadataPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRemoveByMetadataPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRemovePostSignalError() instead")
    void adminRequestsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRequestIdDeleteSignalError() instead")
    void adminRequestsRequestIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRequestIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRequestIdGetSignalError() instead")
    void adminRequestsRequestIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRequestIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsResetPostSignalError() instead")
    void adminRequestsResetPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsResetPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsUnmatchedGetSignalError() instead")
    void adminRequestsUnmatchedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsUnmatchedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminRequestsCountPostSignalErrorFull() instead")
    void adminRequestsCountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsCountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsDeleteSignalErrorFull() instead")
    void adminRequestsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsFindPostSignalErrorFull() instead")
    void adminRequestsFindPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsFindPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsGetSignalErrorFull() instead")
    void adminRequestsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRemoveByMetadataPostSignalErrorFull() instead")
    void adminRequestsRemoveByMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRemoveByMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRemovePostSignalErrorFull() instead")
    void adminRequestsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRequestIdDeleteSignalErrorFull() instead")
    void adminRequestsRequestIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRequestIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsRequestIdGetSignalErrorFull() instead")
    void adminRequestsRequestIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsRequestIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsResetPostSignalErrorFull() instead")
    void adminRequestsResetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsResetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRequestsUnmatchedGetSignalErrorFull() instead")
    void adminRequestsUnmatchedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRequestsUnmatchedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
