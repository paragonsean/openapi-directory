/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIXPath_match.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIXPath_match::OAIXPath_match(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIXPath_match::OAIXPath_match() {
    this->initializeModel();
}

OAIXPath_match::~OAIXPath_match() {}

void OAIXPath_match::initializeModel() {

    m_matches_xpath_isSet = false;
    m_matches_xpath_isValid = false;

    m_namespaces_isSet = false;
    m_namespaces_isValid = false;

    m_value_pattern_isSet = false;
    m_value_pattern_isValid = false;
}

void OAIXPath_match::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIXPath_match::fromJsonObject(QJsonObject json) {

    m_matches_xpath_isValid = ::OpenAPI::fromJsonValue(m_matches_xpath, json[QString("matchesXpath")]);
    m_matches_xpath_isSet = !json[QString("matchesXpath")].isNull() && m_matches_xpath_isValid;

    m_namespaces_isValid = ::OpenAPI::fromJsonValue(m_namespaces, json[QString("namespaces")]);
    m_namespaces_isSet = !json[QString("namespaces")].isNull() && m_namespaces_isValid;

    m_value_pattern_isValid = ::OpenAPI::fromJsonValue(m_value_pattern, json[QString("valuePattern")]);
    m_value_pattern_isSet = !json[QString("valuePattern")].isNull() && m_value_pattern_isValid;
}

QString OAIXPath_match::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIXPath_match::asJsonObject() const {
    QJsonObject obj;
    if (m_matches_xpath_isSet) {
        obj.insert(QString("matchesXpath"), ::OpenAPI::toJsonValue(m_matches_xpath));
    }
    if (m_namespaces_isSet) {
        obj.insert(QString("namespaces"), ::OpenAPI::toJsonValue(m_namespaces));
    }
    if (m_value_pattern_isSet) {
        obj.insert(QString("valuePattern"), ::OpenAPI::toJsonValue(m_value_pattern));
    }
    return obj;
}

QString OAIXPath_match::getMatchesXpath() const {
    return m_matches_xpath;
}
void OAIXPath_match::setMatchesXpath(const QString &matches_xpath) {
    m_matches_xpath = matches_xpath;
    m_matches_xpath_isSet = true;
}

bool OAIXPath_match::is_matches_xpath_Set() const{
    return m_matches_xpath_isSet;
}

bool OAIXPath_match::is_matches_xpath_Valid() const{
    return m_matches_xpath_isValid;
}

OAIObject OAIXPath_match::getNamespaces() const {
    return m_namespaces;
}
void OAIXPath_match::setNamespaces(const OAIObject &namespaces) {
    m_namespaces = namespaces;
    m_namespaces_isSet = true;
}

bool OAIXPath_match::is_namespaces_Set() const{
    return m_namespaces_isSet;
}

bool OAIXPath_match::is_namespaces_Valid() const{
    return m_namespaces_isValid;
}

OAIObject OAIXPath_match::getValuePattern() const {
    return m_value_pattern;
}
void OAIXPath_match::setValuePattern(const OAIObject &value_pattern) {
    m_value_pattern = value_pattern;
    m_value_pattern_isSet = true;
}

bool OAIXPath_match::is_value_pattern_Set() const{
    return m_value_pattern_isSet;
}

bool OAIXPath_match::is_value_pattern_Valid() const{
    return m_value_pattern_isValid;
}

bool OAIXPath_match::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_matches_xpath_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_pattern_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIXPath_match::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_matches_xpath_isValid && true;
}

} // namespace OpenAPI
