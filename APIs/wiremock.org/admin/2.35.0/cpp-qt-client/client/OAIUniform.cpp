/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUniform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUniform::OAIUniform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUniform::OAIUniform() {
    this->initializeModel();
}

OAIUniform::~OAIUniform() {}

void OAIUniform::initializeModel() {

    m_lower_isSet = false;
    m_lower_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_upper_isSet = false;
    m_upper_isValid = false;
}

void OAIUniform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUniform::fromJsonObject(QJsonObject json) {

    m_lower_isValid = ::OpenAPI::fromJsonValue(m_lower, json[QString("lower")]);
    m_lower_isSet = !json[QString("lower")].isNull() && m_lower_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_upper_isValid = ::OpenAPI::fromJsonValue(m_upper, json[QString("upper")]);
    m_upper_isSet = !json[QString("upper")].isNull() && m_upper_isValid;
}

QString OAIUniform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUniform::asJsonObject() const {
    QJsonObject obj;
    if (m_lower_isSet) {
        obj.insert(QString("lower"), ::OpenAPI::toJsonValue(m_lower));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_upper_isSet) {
        obj.insert(QString("upper"), ::OpenAPI::toJsonValue(m_upper));
    }
    return obj;
}

qint32 OAIUniform::getLower() const {
    return m_lower;
}
void OAIUniform::setLower(const qint32 &lower) {
    m_lower = lower;
    m_lower_isSet = true;
}

bool OAIUniform::is_lower_Set() const{
    return m_lower_isSet;
}

bool OAIUniform::is_lower_Valid() const{
    return m_lower_isValid;
}

QString OAIUniform::getType() const {
    return m_type;
}
void OAIUniform::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUniform::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUniform::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIUniform::getUpper() const {
    return m_upper;
}
void OAIUniform::setUpper(const qint32 &upper) {
    m_upper = upper;
    m_upper_isSet = true;
}

bool OAIUniform::is_upper_Set() const{
    return m_upper_isSet;
}

bool OAIUniform::is_upper_Valid() const{
    return m_upper_isValid;
}

bool OAIUniform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lower_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upper_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUniform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
