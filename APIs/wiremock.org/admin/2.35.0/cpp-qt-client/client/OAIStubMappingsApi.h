/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStubMappingsApi_H
#define OAI_OAIStubMappingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI___admin_mappings_find_by_metadata_post_request.h"
#include "OAI___admin_mappings_get_200_response.h"
#include "OAI___admin_mappings_get_200_response_mappings_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStubMappingsApi : public QObject {
    Q_OBJECT

public:
    OAIStubMappingsApi(const int timeOut = 0);
    ~OAIStubMappingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void adminMappingsDelete();

    /**
    * @param[in]  oai___admin_mappings_find_by_metadata_post_request OAI___admin_mappings_find_by_metadata_post_request [required]
    */
    virtual void adminMappingsFindByMetadataPost(const OAI___admin_mappings_find_by_metadata_post_request &oai___admin_mappings_find_by_metadata_post_request);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void adminMappingsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


    virtual void adminMappingsImportPost();

    /**
    * @param[in]  oai___admin_mappings_get_200_response_mappings_inner OAI___admin_mappings_get_200_response_mappings_inner [optional]
    */
    virtual void adminMappingsPost(const ::OpenAPI::OptionalParam<OAI___admin_mappings_get_200_response_mappings_inner> &oai___admin_mappings_get_200_response_mappings_inner = ::OpenAPI::OptionalParam<OAI___admin_mappings_get_200_response_mappings_inner>());

    /**
    * @param[in]  oai___admin_mappings_find_by_metadata_post_request OAI___admin_mappings_find_by_metadata_post_request [optional]
    */
    virtual void adminMappingsRemoveByMetadataPost(const ::OpenAPI::OptionalParam<OAI___admin_mappings_find_by_metadata_post_request> &oai___admin_mappings_find_by_metadata_post_request = ::OpenAPI::OptionalParam<OAI___admin_mappings_find_by_metadata_post_request>());


    virtual void adminMappingsResetPost();


    virtual void adminMappingsSavePost();

    /**
    * @param[in]  stub_mapping_id QString [required]
    */
    virtual void adminMappingsStubMappingIdDelete(const QString &stub_mapping_id);

    /**
    * @param[in]  stub_mapping_id QString [required]
    */
    virtual void adminMappingsStubMappingIdGet(const QString &stub_mapping_id);

    /**
    * @param[in]  stub_mapping_id QString [required]
    * @param[in]  oai___admin_mappings_get_200_response_mappings_inner OAI___admin_mappings_get_200_response_mappings_inner [optional]
    */
    virtual void adminMappingsStubMappingIdPut(const QString &stub_mapping_id, const ::OpenAPI::OptionalParam<OAI___admin_mappings_get_200_response_mappings_inner> &oai___admin_mappings_get_200_response_mappings_inner = ::OpenAPI::OptionalParam<OAI___admin_mappings_get_200_response_mappings_inner>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminMappingsDeleteCallback(OAIHttpRequestWorker *worker);
    void adminMappingsFindByMetadataPostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsGetCallback(OAIHttpRequestWorker *worker);
    void adminMappingsImportPostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsPostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsRemoveByMetadataPostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsResetPostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsSavePostCallback(OAIHttpRequestWorker *worker);
    void adminMappingsStubMappingIdDeleteCallback(OAIHttpRequestWorker *worker);
    void adminMappingsStubMappingIdGetCallback(OAIHttpRequestWorker *worker);
    void adminMappingsStubMappingIdPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminMappingsDeleteSignal();
    void adminMappingsFindByMetadataPostSignal(OAI___admin_mappings_get_200_response summary);
    void adminMappingsGetSignal(OAI___admin_mappings_get_200_response summary);
    void adminMappingsImportPostSignal();
    void adminMappingsPostSignal(OAI___admin_mappings_get_200_response_mappings_inner summary);
    void adminMappingsRemoveByMetadataPostSignal();
    void adminMappingsResetPostSignal();
    void adminMappingsSavePostSignal();
    void adminMappingsStubMappingIdDeleteSignal();
    void adminMappingsStubMappingIdGetSignal(OAI___admin_mappings_get_200_response_mappings_inner summary);
    void adminMappingsStubMappingIdPutSignal(OAI___admin_mappings_get_200_response_mappings_inner summary);


    void adminMappingsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsFindByMetadataPostSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response summary);
    void adminMappingsGetSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response summary);
    void adminMappingsImportPostSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsPostSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response_mappings_inner summary);
    void adminMappingsRemoveByMetadataPostSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsResetPostSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsSavePostSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsStubMappingIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void adminMappingsStubMappingIdGetSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response_mappings_inner summary);
    void adminMappingsStubMappingIdPutSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response_mappings_inner summary);

    Q_DECL_DEPRECATED_X("Use adminMappingsDeleteSignalError() instead")
    void adminMappingsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsFindByMetadataPostSignalError() instead")
    void adminMappingsFindByMetadataPostSignalE(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsFindByMetadataPostSignalError(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsGetSignalError() instead")
    void adminMappingsGetSignalE(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsGetSignalError(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsImportPostSignalError() instead")
    void adminMappingsImportPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsImportPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsPostSignalError() instead")
    void adminMappingsPostSignalE(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsPostSignalError(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsRemoveByMetadataPostSignalError() instead")
    void adminMappingsRemoveByMetadataPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsRemoveByMetadataPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsResetPostSignalError() instead")
    void adminMappingsResetPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsResetPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsSavePostSignalError() instead")
    void adminMappingsSavePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsSavePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdDeleteSignalError() instead")
    void adminMappingsStubMappingIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdGetSignalError() instead")
    void adminMappingsStubMappingIdGetSignalE(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdGetSignalError(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdPutSignalError() instead")
    void adminMappingsStubMappingIdPutSignalE(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdPutSignalError(OAI___admin_mappings_get_200_response_mappings_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminMappingsDeleteSignalErrorFull() instead")
    void adminMappingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsFindByMetadataPostSignalErrorFull() instead")
    void adminMappingsFindByMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsFindByMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsGetSignalErrorFull() instead")
    void adminMappingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsImportPostSignalErrorFull() instead")
    void adminMappingsImportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsImportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsPostSignalErrorFull() instead")
    void adminMappingsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsRemoveByMetadataPostSignalErrorFull() instead")
    void adminMappingsRemoveByMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsRemoveByMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsResetPostSignalErrorFull() instead")
    void adminMappingsResetPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsResetPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsSavePostSignalErrorFull() instead")
    void adminMappingsSavePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsSavePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdDeleteSignalErrorFull() instead")
    void adminMappingsStubMappingIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdGetSignalErrorFull() instead")
    void adminMappingsStubMappingIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminMappingsStubMappingIdPutSignalErrorFull() instead")
    void adminMappingsStubMappingIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminMappingsStubMappingIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
