/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI___admin_mappings_get_200_response_mappings_inner_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI___admin_mappings_get_200_response_mappings_inner_response::OAI___admin_mappings_get_200_response_mappings_inner_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI___admin_mappings_get_200_response_mappings_inner_response::OAI___admin_mappings_get_200_response_mappings_inner_response() {
    this->initializeModel();
}

OAI___admin_mappings_get_200_response_mappings_inner_response::~OAI___admin_mappings_get_200_response_mappings_inner_response() {}

void OAI___admin_mappings_get_200_response_mappings_inner_response::initializeModel() {

    m_additional_proxy_request_headers_isSet = false;
    m_additional_proxy_request_headers_isValid = false;

    m_base64_body_isSet = false;
    m_base64_body_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_file_name_isSet = false;
    m_body_file_name_isValid = false;

    m_delay_distribution_isSet = false;
    m_delay_distribution_isValid = false;

    m_fault_isSet = false;
    m_fault_isValid = false;

    m_fixed_delay_milliseconds_isSet = false;
    m_fixed_delay_milliseconds_isValid = false;

    m_from_configured_stub_isSet = false;
    m_from_configured_stub_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_json_body_isSet = false;
    m_json_body_isValid = false;

    m_proxy_base_url_isSet = false;
    m_proxy_base_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_transformer_parameters_isSet = false;
    m_transformer_parameters_isValid = false;

    m_transformers_isSet = false;
    m_transformers_isValid = false;
}

void OAI___admin_mappings_get_200_response_mappings_inner_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI___admin_mappings_get_200_response_mappings_inner_response::fromJsonObject(QJsonObject json) {

    m_additional_proxy_request_headers_isValid = ::OpenAPI::fromJsonValue(m_additional_proxy_request_headers, json[QString("additionalProxyRequestHeaders")]);
    m_additional_proxy_request_headers_isSet = !json[QString("additionalProxyRequestHeaders")].isNull() && m_additional_proxy_request_headers_isValid;

    m_base64_body_isValid = ::OpenAPI::fromJsonValue(m_base64_body, json[QString("base64Body")]);
    m_base64_body_isSet = !json[QString("base64Body")].isNull() && m_base64_body_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_file_name_isValid = ::OpenAPI::fromJsonValue(m_body_file_name, json[QString("bodyFileName")]);
    m_body_file_name_isSet = !json[QString("bodyFileName")].isNull() && m_body_file_name_isValid;

    m_delay_distribution_isValid = ::OpenAPI::fromJsonValue(m_delay_distribution, json[QString("delayDistribution")]);
    m_delay_distribution_isSet = !json[QString("delayDistribution")].isNull() && m_delay_distribution_isValid;

    m_fault_isValid = ::OpenAPI::fromJsonValue(m_fault, json[QString("fault")]);
    m_fault_isSet = !json[QString("fault")].isNull() && m_fault_isValid;

    m_fixed_delay_milliseconds_isValid = ::OpenAPI::fromJsonValue(m_fixed_delay_milliseconds, json[QString("fixedDelayMilliseconds")]);
    m_fixed_delay_milliseconds_isSet = !json[QString("fixedDelayMilliseconds")].isNull() && m_fixed_delay_milliseconds_isValid;

    m_from_configured_stub_isValid = ::OpenAPI::fromJsonValue(m_from_configured_stub, json[QString("fromConfiguredStub")]);
    m_from_configured_stub_isSet = !json[QString("fromConfiguredStub")].isNull() && m_from_configured_stub_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_json_body_isValid = ::OpenAPI::fromJsonValue(m_json_body, json[QString("jsonBody")]);
    m_json_body_isSet = !json[QString("jsonBody")].isNull() && m_json_body_isValid;

    m_proxy_base_url_isValid = ::OpenAPI::fromJsonValue(m_proxy_base_url, json[QString("proxyBaseUrl")]);
    m_proxy_base_url_isSet = !json[QString("proxyBaseUrl")].isNull() && m_proxy_base_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_transformer_parameters_isValid = ::OpenAPI::fromJsonValue(m_transformer_parameters, json[QString("transformerParameters")]);
    m_transformer_parameters_isSet = !json[QString("transformerParameters")].isNull() && m_transformer_parameters_isValid;

    m_transformers_isValid = ::OpenAPI::fromJsonValue(m_transformers, json[QString("transformers")]);
    m_transformers_isSet = !json[QString("transformers")].isNull() && m_transformers_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI___admin_mappings_get_200_response_mappings_inner_response::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_proxy_request_headers_isSet) {
        obj.insert(QString("additionalProxyRequestHeaders"), ::OpenAPI::toJsonValue(m_additional_proxy_request_headers));
    }
    if (m_base64_body_isSet) {
        obj.insert(QString("base64Body"), ::OpenAPI::toJsonValue(m_base64_body));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_file_name_isSet) {
        obj.insert(QString("bodyFileName"), ::OpenAPI::toJsonValue(m_body_file_name));
    }
    if (m_delay_distribution.isSet()) {
        obj.insert(QString("delayDistribution"), ::OpenAPI::toJsonValue(m_delay_distribution));
    }
    if (m_fault_isSet) {
        obj.insert(QString("fault"), ::OpenAPI::toJsonValue(m_fault));
    }
    if (m_fixed_delay_milliseconds_isSet) {
        obj.insert(QString("fixedDelayMilliseconds"), ::OpenAPI::toJsonValue(m_fixed_delay_milliseconds));
    }
    if (m_from_configured_stub_isSet) {
        obj.insert(QString("fromConfiguredStub"), ::OpenAPI::toJsonValue(m_from_configured_stub));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_json_body_isSet) {
        obj.insert(QString("jsonBody"), ::OpenAPI::toJsonValue(m_json_body));
    }
    if (m_proxy_base_url_isSet) {
        obj.insert(QString("proxyBaseUrl"), ::OpenAPI::toJsonValue(m_proxy_base_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_transformer_parameters_isSet) {
        obj.insert(QString("transformerParameters"), ::OpenAPI::toJsonValue(m_transformer_parameters));
    }
    if (m_transformers.size() > 0) {
        obj.insert(QString("transformers"), ::OpenAPI::toJsonValue(m_transformers));
    }
    return obj;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner_response::getAdditionalProxyRequestHeaders() const {
    return m_additional_proxy_request_headers;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setAdditionalProxyRequestHeaders(const OAIObject &additional_proxy_request_headers) {
    m_additional_proxy_request_headers = additional_proxy_request_headers;
    m_additional_proxy_request_headers_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_additional_proxy_request_headers_Set() const{
    return m_additional_proxy_request_headers_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_additional_proxy_request_headers_Valid() const{
    return m_additional_proxy_request_headers_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getBase64Body() const {
    return m_base64_body;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setBase64Body(const QString &base64_body) {
    m_base64_body = base64_body;
    m_base64_body_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_base64_body_Set() const{
    return m_base64_body_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_base64_body_Valid() const{
    return m_base64_body_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getBody() const {
    return m_body;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_body_Set() const{
    return m_body_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_body_Valid() const{
    return m_body_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getBodyFileName() const {
    return m_body_file_name;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setBodyFileName(const QString &body_file_name) {
    m_body_file_name = body_file_name;
    m_body_file_name_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_body_file_name_Set() const{
    return m_body_file_name_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_body_file_name_Valid() const{
    return m_body_file_name_isValid;
}

OAI___admin_mappings_get_200_response_mappings_inner_response_allOf_delayDistribution OAI___admin_mappings_get_200_response_mappings_inner_response::getDelayDistribution() const {
    return m_delay_distribution;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setDelayDistribution(const OAI___admin_mappings_get_200_response_mappings_inner_response_allOf_delayDistribution &delay_distribution) {
    m_delay_distribution = delay_distribution;
    m_delay_distribution_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_delay_distribution_Set() const{
    return m_delay_distribution_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_delay_distribution_Valid() const{
    return m_delay_distribution_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getFault() const {
    return m_fault;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setFault(const QString &fault) {
    m_fault = fault;
    m_fault_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_fault_Set() const{
    return m_fault_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_fault_Valid() const{
    return m_fault_isValid;
}

qint32 OAI___admin_mappings_get_200_response_mappings_inner_response::getFixedDelayMilliseconds() const {
    return m_fixed_delay_milliseconds;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setFixedDelayMilliseconds(const qint32 &fixed_delay_milliseconds) {
    m_fixed_delay_milliseconds = fixed_delay_milliseconds;
    m_fixed_delay_milliseconds_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_fixed_delay_milliseconds_Set() const{
    return m_fixed_delay_milliseconds_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_fixed_delay_milliseconds_Valid() const{
    return m_fixed_delay_milliseconds_isValid;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::isFromConfiguredStub() const {
    return m_from_configured_stub;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setFromConfiguredStub(const bool &from_configured_stub) {
    m_from_configured_stub = from_configured_stub;
    m_from_configured_stub_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_from_configured_stub_Set() const{
    return m_from_configured_stub_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_from_configured_stub_Valid() const{
    return m_from_configured_stub_isValid;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner_response::getHeaders() const {
    return m_headers;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner_response::getJsonBody() const {
    return m_json_body;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setJsonBody(const OAIObject &json_body) {
    m_json_body = json_body;
    m_json_body_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_json_body_Set() const{
    return m_json_body_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_json_body_Valid() const{
    return m_json_body_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getProxyBaseUrl() const {
    return m_proxy_base_url;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setProxyBaseUrl(const QString &proxy_base_url) {
    m_proxy_base_url = proxy_base_url;
    m_proxy_base_url_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_proxy_base_url_Set() const{
    return m_proxy_base_url_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_proxy_base_url_Valid() const{
    return m_proxy_base_url_isValid;
}

qint32 OAI___admin_mappings_get_200_response_mappings_inner_response::getStatus() const {
    return m_status;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAI___admin_mappings_get_200_response_mappings_inner_response::getStatusMessage() const {
    return m_status_message;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_status_message_Valid() const{
    return m_status_message_isValid;
}

OAIObject OAI___admin_mappings_get_200_response_mappings_inner_response::getTransformerParameters() const {
    return m_transformer_parameters;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setTransformerParameters(const OAIObject &transformer_parameters) {
    m_transformer_parameters = transformer_parameters;
    m_transformer_parameters_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_transformer_parameters_Set() const{
    return m_transformer_parameters_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_transformer_parameters_Valid() const{
    return m_transformer_parameters_isValid;
}

QList<QString> OAI___admin_mappings_get_200_response_mappings_inner_response::getTransformers() const {
    return m_transformers;
}
void OAI___admin_mappings_get_200_response_mappings_inner_response::setTransformers(const QList<QString> &transformers) {
    m_transformers = transformers;
    m_transformers_isSet = true;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_transformers_Set() const{
    return m_transformers_isSet;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::is_transformers_Valid() const{
    return m_transformers_isValid;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_proxy_request_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base64_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delay_distribution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_delay_milliseconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_configured_stub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_json_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_base_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformer_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI___admin_mappings_get_200_response_mappings_inner_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
