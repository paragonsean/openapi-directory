/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRecordingsApi_H
#define OAI_OAIRecordingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI___admin_mappings_get_200_response.h"
#include "OAI___admin_recordings_snapshot_post_request.h"
#include "OAI___admin_recordings_start_post_request.h"
#include "OAI___admin_recordings_status_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRecordingsApi : public QObject {
    Q_OBJECT

public:
    OAIRecordingsApi(const int timeOut = 0);
    ~OAIRecordingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai___admin_recordings_snapshot_post_request OAI___admin_recordings_snapshot_post_request [required]
    */
    virtual void adminRecordingsSnapshotPost(const OAI___admin_recordings_snapshot_post_request &oai___admin_recordings_snapshot_post_request);

    /**
    * @param[in]  oai___admin_recordings_start_post_request OAI___admin_recordings_start_post_request [required]
    */
    virtual void adminRecordingsStartPost(const OAI___admin_recordings_start_post_request &oai___admin_recordings_start_post_request);


    virtual void adminRecordingsStatusGet();


    virtual void adminRecordingsStopPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminRecordingsSnapshotPostCallback(OAIHttpRequestWorker *worker);
    void adminRecordingsStartPostCallback(OAIHttpRequestWorker *worker);
    void adminRecordingsStatusGetCallback(OAIHttpRequestWorker *worker);
    void adminRecordingsStopPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminRecordingsSnapshotPostSignal(OAI___admin_mappings_get_200_response summary);
    void adminRecordingsStartPostSignal();
    void adminRecordingsStatusGetSignal(OAI___admin_recordings_status_get_200_response summary);
    void adminRecordingsStopPostSignal(OAI___admin_mappings_get_200_response summary);


    void adminRecordingsSnapshotPostSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response summary);
    void adminRecordingsStartPostSignalFull(OAIHttpRequestWorker *worker);
    void adminRecordingsStatusGetSignalFull(OAIHttpRequestWorker *worker, OAI___admin_recordings_status_get_200_response summary);
    void adminRecordingsStopPostSignalFull(OAIHttpRequestWorker *worker, OAI___admin_mappings_get_200_response summary);

    Q_DECL_DEPRECATED_X("Use adminRecordingsSnapshotPostSignalError() instead")
    void adminRecordingsSnapshotPostSignalE(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsSnapshotPostSignalError(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStartPostSignalError() instead")
    void adminRecordingsStartPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStartPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStatusGetSignalError() instead")
    void adminRecordingsStatusGetSignalE(OAI___admin_recordings_status_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStatusGetSignalError(OAI___admin_recordings_status_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStopPostSignalError() instead")
    void adminRecordingsStopPostSignalE(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStopPostSignalError(OAI___admin_mappings_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminRecordingsSnapshotPostSignalErrorFull() instead")
    void adminRecordingsSnapshotPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsSnapshotPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStartPostSignalErrorFull() instead")
    void adminRecordingsStartPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStartPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStatusGetSignalErrorFull() instead")
    void adminRecordingsStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use adminRecordingsStopPostSignalErrorFull() instead")
    void adminRecordingsStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminRecordingsStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
