/**
 * WireMock
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.35.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog_normal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog_normal::OAILog_normal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog_normal::OAILog_normal() {
    this->initializeModel();
}

OAILog_normal::~OAILog_normal() {}

void OAILog_normal::initializeModel() {

    m_median_isSet = false;
    m_median_isValid = false;

    m_sigma_isSet = false;
    m_sigma_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILog_normal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog_normal::fromJsonObject(QJsonObject json) {

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_sigma_isValid = ::OpenAPI::fromJsonValue(m_sigma, json[QString("sigma")]);
    m_sigma_isSet = !json[QString("sigma")].isNull() && m_sigma_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILog_normal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog_normal::asJsonObject() const {
    QJsonObject obj;
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_sigma_isSet) {
        obj.insert(QString("sigma"), ::OpenAPI::toJsonValue(m_sigma));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAILog_normal::getMedian() const {
    return m_median;
}
void OAILog_normal::setMedian(const qint32 &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAILog_normal::is_median_Set() const{
    return m_median_isSet;
}

bool OAILog_normal::is_median_Valid() const{
    return m_median_isValid;
}

double OAILog_normal::getSigma() const {
    return m_sigma;
}
void OAILog_normal::setSigma(const double &sigma) {
    m_sigma = sigma;
    m_sigma_isSet = true;
}

bool OAILog_normal::is_sigma_Set() const{
    return m_sigma_isSet;
}

bool OAILog_normal::is_sigma_Valid() const{
    return m_sigma_isValid;
}

QString OAILog_normal::getType() const {
    return m_type;
}
void OAILog_normal::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILog_normal::is_type_Set() const{
    return m_type_isSet;
}

bool OAILog_normal::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILog_normal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sigma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog_normal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
