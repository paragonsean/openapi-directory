/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DnsRecord;
import org.openapitools.client.model.DnsRecordCreate;
import org.openapitools.client.model.DnsZone;
import org.openapitools.client.model.DnsZoneSetup;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DnsZoneApi
 */
@Disabled
public class DnsZoneApiTest {

    private final DnsZoneApi api = new DnsZoneApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void configureDNSForSiteTest() throws ApiException {
        String siteId = null;
        List<DnsZone> response = api.configureDNSForSite(siteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDnsRecordTest() throws ApiException {
        String zoneId = null;
        DnsRecordCreate dnsRecord = null;
        DnsRecord response = api.createDnsRecord(zoneId, dnsRecord);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDnsZoneTest() throws ApiException {
        DnsZoneSetup dnsZoneParams = null;
        DnsZone response = api.createDnsZone(dnsZoneParams);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDnsRecordTest() throws ApiException {
        String zoneId = null;
        String dnsRecordId = null;
        api.deleteDnsRecord(zoneId, dnsRecordId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDnsZoneTest() throws ApiException {
        String zoneId = null;
        api.deleteDnsZone(zoneId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDNSForSiteTest() throws ApiException {
        String siteId = null;
        List<DnsZone> response = api.getDNSForSite(siteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDnsRecordsTest() throws ApiException {
        String zoneId = null;
        List<DnsRecord> response = api.getDnsRecords(zoneId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDnsZoneTest() throws ApiException {
        String zoneId = null;
        DnsZone response = api.getDnsZone(zoneId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDnsZonesTest() throws ApiException {
        String accountSlug = null;
        List<DnsZone> response = api.getDnsZones(accountSlug);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIndividualDnsRecordTest() throws ApiException {
        String zoneId = null;
        String dnsRecordId = null;
        DnsRecord response = api.getIndividualDnsRecord(zoneId, dnsRecordId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transferDnsZoneTest() throws ApiException {
        String zoneId = null;
        String accountId = null;
        String transferAccountId = null;
        String transferUserId = null;
        DnsZone response = api.transferDnsZone(zoneId, accountId, transferAccountId, transferUserId);
        // TODO: test validations
    }

}
