/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploySiteCapabilities;
import org.openapitools.client.model.FunctionSchedule;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Deploy
 */
public class DeployTest {
    private final Deploy model = new Deploy();

    /**
     * Model tests for Deploy
     */
    @Test
    public void testDeploy() {
        // TODO: test Deploy
    }

    /**
     * Test the property 'adminUrl'
     */
    @Test
    public void adminUrlTest() {
        // TODO: test adminUrl
    }

    /**
     * Test the property 'branch'
     */
    @Test
    public void branchTest() {
        // TODO: test branch
    }

    /**
     * Test the property 'buildId'
     */
    @Test
    public void buildIdTest() {
        // TODO: test buildId
    }

    /**
     * Test the property 'commitRef'
     */
    @Test
    public void commitRefTest() {
        // TODO: test commitRef
    }

    /**
     * Test the property 'commitUrl'
     */
    @Test
    public void commitUrlTest() {
        // TODO: test commitUrl
    }

    /**
     * Test the property 'context'
     */
    @Test
    public void contextTest() {
        // TODO: test context
    }

    /**
     * Test the property 'createdAt'
     */
    @Test
    public void createdAtTest() {
        // TODO: test createdAt
    }

    /**
     * Test the property 'deploySslUrl'
     */
    @Test
    public void deploySslUrlTest() {
        // TODO: test deploySslUrl
    }

    /**
     * Test the property 'deployUrl'
     */
    @Test
    public void deployUrlTest() {
        // TODO: test deployUrl
    }

    /**
     * Test the property 'draft'
     */
    @Test
    public void draftTest() {
        // TODO: test draft
    }

    /**
     * Test the property 'errorMessage'
     */
    @Test
    public void errorMessageTest() {
        // TODO: test errorMessage
    }

    /**
     * Test the property 'framework'
     */
    @Test
    public void frameworkTest() {
        // TODO: test framework
    }

    /**
     * Test the property 'functionSchedules'
     */
    @Test
    public void functionSchedulesTest() {
        // TODO: test functionSchedules
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'locked'
     */
    @Test
    public void lockedTest() {
        // TODO: test locked
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'publishedAt'
     */
    @Test
    public void publishedAtTest() {
        // TODO: test publishedAt
    }

    /**
     * Test the property 'required'
     */
    @Test
    public void requiredTest() {
        // TODO: test required
    }

    /**
     * Test the property 'requiredFunctions'
     */
    @Test
    public void requiredFunctionsTest() {
        // TODO: test requiredFunctions
    }

    /**
     * Test the property 'reviewId'
     */
    @Test
    public void reviewIdTest() {
        // TODO: test reviewId
    }

    /**
     * Test the property 'reviewUrl'
     */
    @Test
    public void reviewUrlTest() {
        // TODO: test reviewUrl
    }

    /**
     * Test the property 'screenshotUrl'
     */
    @Test
    public void screenshotUrlTest() {
        // TODO: test screenshotUrl
    }

    /**
     * Test the property 'siteCapabilities'
     */
    @Test
    public void siteCapabilitiesTest() {
        // TODO: test siteCapabilities
    }

    /**
     * Test the property 'siteId'
     */
    @Test
    public void siteIdTest() {
        // TODO: test siteId
    }

    /**
     * Test the property 'skipped'
     */
    @Test
    public void skippedTest() {
        // TODO: test skipped
    }

    /**
     * Test the property 'sslUrl'
     */
    @Test
    public void sslUrlTest() {
        // TODO: test sslUrl
    }

    /**
     * Test the property 'state'
     */
    @Test
    public void stateTest() {
        // TODO: test state
    }

    /**
     * Test the property 'title'
     */
    @Test
    public void titleTest() {
        // TODO: test title
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'userId'
     */
    @Test
    public void userIdTest() {
        // TODO: test userId
    }

}
