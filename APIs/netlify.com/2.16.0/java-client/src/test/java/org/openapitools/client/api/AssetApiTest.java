/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.AssetSignature;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetApi
 */
@Disabled
public class AssetApiTest {

    private final AssetApi api = new AssetApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSiteAssetTest() throws ApiException {
        String siteId = null;
        String name = null;
        Long size = null;
        String contentType = null;
        String visibility = null;
        AssetSignature response = api.createSiteAsset(siteId, name, size, contentType, visibility);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSiteAssetTest() throws ApiException {
        String siteId = null;
        String assetId = null;
        api.deleteSiteAsset(siteId, assetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteAssetInfoTest() throws ApiException {
        String siteId = null;
        String assetId = null;
        Asset response = api.getSiteAssetInfo(siteId, assetId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSiteAssetsTest() throws ApiException {
        String siteId = null;
        List<Asset> response = api.listSiteAssets(siteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSiteAssetTest() throws ApiException {
        String siteId = null;
        String assetId = null;
        String state = null;
        Asset response = api.updateSiteAsset(siteId, assetId, state);
        // TODO: test validations
    }

}
