/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Deploy;
import org.openapitools.client.model.DeployFiles;
import org.openapitools.client.model.Error;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DeployApi
 */
@Disabled
public class DeployApiTest {

    private final DeployApi api = new DeployApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSiteDeployTest() throws ApiException {
        String deployId = null;
        Deploy response = api.cancelSiteDeploy(deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSiteDeployTest() throws ApiException {
        String siteId = null;
        DeployFiles deploy = null;
        Boolean deployPreviews = null;
        Boolean production = null;
        String state = null;
        String branch = null;
        Boolean latestPublished = null;
        String title = null;
        Deploy response = api.createSiteDeploy(siteId, deploy, deployPreviews, production, state, branch, latestPublished, title);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeployTest() throws ApiException {
        String deployId = null;
        api.deleteDeploy(deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSiteDeployTest() throws ApiException {
        String deployId = null;
        String siteId = null;
        api.deleteSiteDeploy(deployId, siteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeployTest() throws ApiException {
        String deployId = null;
        Deploy response = api.getDeploy(deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSiteDeployTest() throws ApiException {
        String siteId = null;
        String deployId = null;
        Deploy response = api.getSiteDeploy(siteId, deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSiteDeploysTest() throws ApiException {
        String siteId = null;
        Boolean deployPreviews = null;
        Boolean production = null;
        String state = null;
        String branch = null;
        Boolean latestPublished = null;
        Integer page = null;
        Integer perPage = null;
        List<Deploy> response = api.listSiteDeploys(siteId, deployPreviews, production, state, branch, latestPublished, page, perPage);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lockDeployTest() throws ApiException {
        String deployId = null;
        Deploy response = api.lockDeploy(deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreSiteDeployTest() throws ApiException {
        String siteId = null;
        String deployId = null;
        Deploy response = api.restoreSiteDeploy(siteId, deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rollbackSiteDeployTest() throws ApiException {
        String siteId = null;
        api.rollbackSiteDeploy(siteId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlockDeployTest() throws ApiException {
        String deployId = null;
        Deploy response = api.unlockDeploy(deployId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSiteDeployTest() throws ApiException {
        String siteId = null;
        String deployId = null;
        DeployFiles deploy = null;
        Deploy response = api.updateSiteDeploy(siteId, deployId, deploy);
        // TODO: test validations
    }

}
