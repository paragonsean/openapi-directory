/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildStatusMinutes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildStatusMinutes {
  public static final String SERIALIZED_NAME_CURRENT = "current";
  @SerializedName(SERIALIZED_NAME_CURRENT)
  private Integer current;

  public static final String SERIALIZED_NAME_CURRENT_AVERAGE_SEC = "current_average_sec";
  @SerializedName(SERIALIZED_NAME_CURRENT_AVERAGE_SEC)
  private Integer currentAverageSec;

  public static final String SERIALIZED_NAME_INCLUDED_MINUTES = "included_minutes";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MINUTES)
  private String includedMinutes;

  public static final String SERIALIZED_NAME_INCLUDED_MINUTES_WITH_PACKS = "included_minutes_with_packs";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MINUTES_WITH_PACKS)
  private String includedMinutesWithPacks;

  public static final String SERIALIZED_NAME_LAST_UPDATED_AT = "last_updated_at";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_AT)
  private String lastUpdatedAt;

  public static final String SERIALIZED_NAME_PERIOD_END_DATE = "period_end_date";
  @SerializedName(SERIALIZED_NAME_PERIOD_END_DATE)
  private String periodEndDate;

  public static final String SERIALIZED_NAME_PERIOD_START_DATE = "period_start_date";
  @SerializedName(SERIALIZED_NAME_PERIOD_START_DATE)
  private String periodStartDate;

  public static final String SERIALIZED_NAME_PREVIOUS = "previous";
  @SerializedName(SERIALIZED_NAME_PREVIOUS)
  private Integer previous;

  public BuildStatusMinutes() {
  }

  public BuildStatusMinutes current(Integer current) {
    this.current = current;
    return this;
  }

  /**
   * Get current
   * @return current
   */
  @javax.annotation.Nullable
  public Integer getCurrent() {
    return current;
  }

  public void setCurrent(Integer current) {
    this.current = current;
  }


  public BuildStatusMinutes currentAverageSec(Integer currentAverageSec) {
    this.currentAverageSec = currentAverageSec;
    return this;
  }

  /**
   * Get currentAverageSec
   * @return currentAverageSec
   */
  @javax.annotation.Nullable
  public Integer getCurrentAverageSec() {
    return currentAverageSec;
  }

  public void setCurrentAverageSec(Integer currentAverageSec) {
    this.currentAverageSec = currentAverageSec;
  }


  public BuildStatusMinutes includedMinutes(String includedMinutes) {
    this.includedMinutes = includedMinutes;
    return this;
  }

  /**
   * Get includedMinutes
   * @return includedMinutes
   */
  @javax.annotation.Nullable
  public String getIncludedMinutes() {
    return includedMinutes;
  }

  public void setIncludedMinutes(String includedMinutes) {
    this.includedMinutes = includedMinutes;
  }


  public BuildStatusMinutes includedMinutesWithPacks(String includedMinutesWithPacks) {
    this.includedMinutesWithPacks = includedMinutesWithPacks;
    return this;
  }

  /**
   * Get includedMinutesWithPacks
   * @return includedMinutesWithPacks
   */
  @javax.annotation.Nullable
  public String getIncludedMinutesWithPacks() {
    return includedMinutesWithPacks;
  }

  public void setIncludedMinutesWithPacks(String includedMinutesWithPacks) {
    this.includedMinutesWithPacks = includedMinutesWithPacks;
  }


  public BuildStatusMinutes lastUpdatedAt(String lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
    return this;
  }

  /**
   * Get lastUpdatedAt
   * @return lastUpdatedAt
   */
  @javax.annotation.Nullable
  public String getLastUpdatedAt() {
    return lastUpdatedAt;
  }

  public void setLastUpdatedAt(String lastUpdatedAt) {
    this.lastUpdatedAt = lastUpdatedAt;
  }


  public BuildStatusMinutes periodEndDate(String periodEndDate) {
    this.periodEndDate = periodEndDate;
    return this;
  }

  /**
   * Get periodEndDate
   * @return periodEndDate
   */
  @javax.annotation.Nullable
  public String getPeriodEndDate() {
    return periodEndDate;
  }

  public void setPeriodEndDate(String periodEndDate) {
    this.periodEndDate = periodEndDate;
  }


  public BuildStatusMinutes periodStartDate(String periodStartDate) {
    this.periodStartDate = periodStartDate;
    return this;
  }

  /**
   * Get periodStartDate
   * @return periodStartDate
   */
  @javax.annotation.Nullable
  public String getPeriodStartDate() {
    return periodStartDate;
  }

  public void setPeriodStartDate(String periodStartDate) {
    this.periodStartDate = periodStartDate;
  }


  public BuildStatusMinutes previous(Integer previous) {
    this.previous = previous;
    return this;
  }

  /**
   * Get previous
   * @return previous
   */
  @javax.annotation.Nullable
  public Integer getPrevious() {
    return previous;
  }

  public void setPrevious(Integer previous) {
    this.previous = previous;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildStatusMinutes buildStatusMinutes = (BuildStatusMinutes) o;
    return Objects.equals(this.current, buildStatusMinutes.current) &&
        Objects.equals(this.currentAverageSec, buildStatusMinutes.currentAverageSec) &&
        Objects.equals(this.includedMinutes, buildStatusMinutes.includedMinutes) &&
        Objects.equals(this.includedMinutesWithPacks, buildStatusMinutes.includedMinutesWithPacks) &&
        Objects.equals(this.lastUpdatedAt, buildStatusMinutes.lastUpdatedAt) &&
        Objects.equals(this.periodEndDate, buildStatusMinutes.periodEndDate) &&
        Objects.equals(this.periodStartDate, buildStatusMinutes.periodStartDate) &&
        Objects.equals(this.previous, buildStatusMinutes.previous);
  }

  @Override
  public int hashCode() {
    return Objects.hash(current, currentAverageSec, includedMinutes, includedMinutesWithPacks, lastUpdatedAt, periodEndDate, periodStartDate, previous);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildStatusMinutes {\n");
    sb.append("    current: ").append(toIndentedString(current)).append("\n");
    sb.append("    currentAverageSec: ").append(toIndentedString(currentAverageSec)).append("\n");
    sb.append("    includedMinutes: ").append(toIndentedString(includedMinutes)).append("\n");
    sb.append("    includedMinutesWithPacks: ").append(toIndentedString(includedMinutesWithPacks)).append("\n");
    sb.append("    lastUpdatedAt: ").append(toIndentedString(lastUpdatedAt)).append("\n");
    sb.append("    periodEndDate: ").append(toIndentedString(periodEndDate)).append("\n");
    sb.append("    periodStartDate: ").append(toIndentedString(periodStartDate)).append("\n");
    sb.append("    previous: ").append(toIndentedString(previous)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("current");
    openapiFields.add("current_average_sec");
    openapiFields.add("included_minutes");
    openapiFields.add("included_minutes_with_packs");
    openapiFields.add("last_updated_at");
    openapiFields.add("period_end_date");
    openapiFields.add("period_start_date");
    openapiFields.add("previous");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildStatusMinutes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildStatusMinutes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildStatusMinutes is not found in the empty JSON string", BuildStatusMinutes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildStatusMinutes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildStatusMinutes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("included_minutes") != null && !jsonObj.get("included_minutes").isJsonNull()) && !jsonObj.get("included_minutes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `included_minutes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("included_minutes").toString()));
      }
      if ((jsonObj.get("included_minutes_with_packs") != null && !jsonObj.get("included_minutes_with_packs").isJsonNull()) && !jsonObj.get("included_minutes_with_packs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `included_minutes_with_packs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("included_minutes_with_packs").toString()));
      }
      if ((jsonObj.get("last_updated_at") != null && !jsonObj.get("last_updated_at").isJsonNull()) && !jsonObj.get("last_updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_at").toString()));
      }
      if ((jsonObj.get("period_end_date") != null && !jsonObj.get("period_end_date").isJsonNull()) && !jsonObj.get("period_end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_end_date").toString()));
      }
      if ((jsonObj.get("period_start_date") != null && !jsonObj.get("period_start_date").isJsonNull()) && !jsonObj.get("period_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `period_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("period_start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildStatusMinutes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildStatusMinutes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildStatusMinutes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildStatusMinutes.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildStatusMinutes>() {
           @Override
           public void write(JsonWriter out, BuildStatusMinutes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildStatusMinutes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildStatusMinutes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildStatusMinutes
   * @throws IOException if the JSON string is invalid with respect to BuildStatusMinutes
   */
  public static BuildStatusMinutes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildStatusMinutes.class);
  }

  /**
   * Convert an instance of BuildStatusMinutes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

