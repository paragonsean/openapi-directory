/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DeploySiteCapabilities;
import org.openapitools.client.model.FunctionSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deploy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Deploy {
  public static final String SERIALIZED_NAME_ADMIN_URL = "admin_url";
  @SerializedName(SERIALIZED_NAME_ADMIN_URL)
  private String adminUrl;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_BUILD_ID = "build_id";
  @SerializedName(SERIALIZED_NAME_BUILD_ID)
  private String buildId;

  public static final String SERIALIZED_NAME_COMMIT_REF = "commit_ref";
  @SerializedName(SERIALIZED_NAME_COMMIT_REF)
  private String commitRef;

  public static final String SERIALIZED_NAME_COMMIT_URL = "commit_url";
  @SerializedName(SERIALIZED_NAME_COMMIT_URL)
  private String commitUrl;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private String context;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DEPLOY_SSL_URL = "deploy_ssl_url";
  @SerializedName(SERIALIZED_NAME_DEPLOY_SSL_URL)
  private String deploySslUrl;

  public static final String SERIALIZED_NAME_DEPLOY_URL = "deploy_url";
  @SerializedName(SERIALIZED_NAME_DEPLOY_URL)
  private String deployUrl;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "error_message";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private String framework;

  public static final String SERIALIZED_NAME_FUNCTION_SCHEDULES = "function_schedules";
  @SerializedName(SERIALIZED_NAME_FUNCTION_SCHEDULES)
  private List<FunctionSchedule> functionSchedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHED_AT = "published_at";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_AT)
  private String publishedAt;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private List<String> required = new ArrayList<>();

  public static final String SERIALIZED_NAME_REQUIRED_FUNCTIONS = "required_functions";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FUNCTIONS)
  private List<String> requiredFunctions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_ID = "review_id";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private BigDecimal reviewId;

  public static final String SERIALIZED_NAME_REVIEW_URL = "review_url";
  @SerializedName(SERIALIZED_NAME_REVIEW_URL)
  private String reviewUrl;

  public static final String SERIALIZED_NAME_SCREENSHOT_URL = "screenshot_url";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_URL)
  private String screenshotUrl;

  public static final String SERIALIZED_NAME_SITE_CAPABILITIES = "site_capabilities";
  @SerializedName(SERIALIZED_NAME_SITE_CAPABILITIES)
  private DeploySiteCapabilities siteCapabilities;

  public static final String SERIALIZED_NAME_SITE_ID = "site_id";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_SKIPPED = "skipped";
  @SerializedName(SERIALIZED_NAME_SKIPPED)
  private Boolean skipped;

  public static final String SERIALIZED_NAME_SSL_URL = "ssl_url";
  @SerializedName(SERIALIZED_NAME_SSL_URL)
  private String sslUrl;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Deploy() {
  }

  public Deploy adminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
    return this;
  }

  /**
   * Get adminUrl
   * @return adminUrl
   */
  @javax.annotation.Nullable
  public String getAdminUrl() {
    return adminUrl;
  }

  public void setAdminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
  }


  public Deploy branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public Deploy buildId(String buildId) {
    this.buildId = buildId;
    return this;
  }

  /**
   * Get buildId
   * @return buildId
   */
  @javax.annotation.Nullable
  public String getBuildId() {
    return buildId;
  }

  public void setBuildId(String buildId) {
    this.buildId = buildId;
  }


  public Deploy commitRef(String commitRef) {
    this.commitRef = commitRef;
    return this;
  }

  /**
   * Get commitRef
   * @return commitRef
   */
  @javax.annotation.Nullable
  public String getCommitRef() {
    return commitRef;
  }

  public void setCommitRef(String commitRef) {
    this.commitRef = commitRef;
  }


  public Deploy commitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
    return this;
  }

  /**
   * Get commitUrl
   * @return commitUrl
   */
  @javax.annotation.Nullable
  public String getCommitUrl() {
    return commitUrl;
  }

  public void setCommitUrl(String commitUrl) {
    this.commitUrl = commitUrl;
  }


  public Deploy context(String context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public String getContext() {
    return context;
  }

  public void setContext(String context) {
    this.context = context;
  }


  public Deploy createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Deploy deploySslUrl(String deploySslUrl) {
    this.deploySslUrl = deploySslUrl;
    return this;
  }

  /**
   * Get deploySslUrl
   * @return deploySslUrl
   */
  @javax.annotation.Nullable
  public String getDeploySslUrl() {
    return deploySslUrl;
  }

  public void setDeploySslUrl(String deploySslUrl) {
    this.deploySslUrl = deploySslUrl;
  }


  public Deploy deployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
    return this;
  }

  /**
   * Get deployUrl
   * @return deployUrl
   */
  @javax.annotation.Nullable
  public String getDeployUrl() {
    return deployUrl;
  }

  public void setDeployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
  }


  public Deploy draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public Deploy errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

  /**
   * Get errorMessage
   * @return errorMessage
   */
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Deploy framework(String framework) {
    this.framework = framework;
    return this;
  }

  /**
   * Get framework
   * @return framework
   */
  @javax.annotation.Nullable
  public String getFramework() {
    return framework;
  }

  public void setFramework(String framework) {
    this.framework = framework;
  }


  public Deploy functionSchedules(List<FunctionSchedule> functionSchedules) {
    this.functionSchedules = functionSchedules;
    return this;
  }

  public Deploy addFunctionSchedulesItem(FunctionSchedule functionSchedulesItem) {
    if (this.functionSchedules == null) {
      this.functionSchedules = new ArrayList<>();
    }
    this.functionSchedules.add(functionSchedulesItem);
    return this;
  }

  /**
   * Get functionSchedules
   * @return functionSchedules
   */
  @javax.annotation.Nullable
  public List<FunctionSchedule> getFunctionSchedules() {
    return functionSchedules;
  }

  public void setFunctionSchedules(List<FunctionSchedule> functionSchedules) {
    this.functionSchedules = functionSchedules;
  }


  public Deploy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Deploy locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }


  public Deploy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Deploy publishedAt(String publishedAt) {
    this.publishedAt = publishedAt;
    return this;
  }

  /**
   * Get publishedAt
   * @return publishedAt
   */
  @javax.annotation.Nullable
  public String getPublishedAt() {
    return publishedAt;
  }

  public void setPublishedAt(String publishedAt) {
    this.publishedAt = publishedAt;
  }


  public Deploy required(List<String> required) {
    this.required = required;
    return this;
  }

  public Deploy addRequiredItem(String requiredItem) {
    if (this.required == null) {
      this.required = new ArrayList<>();
    }
    this.required.add(requiredItem);
    return this;
  }

  /**
   * Get required
   * @return required
   */
  @javax.annotation.Nullable
  public List<String> getRequired() {
    return required;
  }

  public void setRequired(List<String> required) {
    this.required = required;
  }


  public Deploy requiredFunctions(List<String> requiredFunctions) {
    this.requiredFunctions = requiredFunctions;
    return this;
  }

  public Deploy addRequiredFunctionsItem(String requiredFunctionsItem) {
    if (this.requiredFunctions == null) {
      this.requiredFunctions = new ArrayList<>();
    }
    this.requiredFunctions.add(requiredFunctionsItem);
    return this;
  }

  /**
   * Get requiredFunctions
   * @return requiredFunctions
   */
  @javax.annotation.Nullable
  public List<String> getRequiredFunctions() {
    return requiredFunctions;
  }

  public void setRequiredFunctions(List<String> requiredFunctions) {
    this.requiredFunctions = requiredFunctions;
  }


  public Deploy reviewId(BigDecimal reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * Get reviewId
   * @return reviewId
   */
  @javax.annotation.Nullable
  public BigDecimal getReviewId() {
    return reviewId;
  }

  public void setReviewId(BigDecimal reviewId) {
    this.reviewId = reviewId;
  }


  public Deploy reviewUrl(String reviewUrl) {
    this.reviewUrl = reviewUrl;
    return this;
  }

  /**
   * Get reviewUrl
   * @return reviewUrl
   */
  @javax.annotation.Nullable
  public String getReviewUrl() {
    return reviewUrl;
  }

  public void setReviewUrl(String reviewUrl) {
    this.reviewUrl = reviewUrl;
  }


  public Deploy screenshotUrl(String screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
    return this;
  }

  /**
   * Get screenshotUrl
   * @return screenshotUrl
   */
  @javax.annotation.Nullable
  public String getScreenshotUrl() {
    return screenshotUrl;
  }

  public void setScreenshotUrl(String screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
  }


  public Deploy siteCapabilities(DeploySiteCapabilities siteCapabilities) {
    this.siteCapabilities = siteCapabilities;
    return this;
  }

  /**
   * Get siteCapabilities
   * @return siteCapabilities
   */
  @javax.annotation.Nullable
  public DeploySiteCapabilities getSiteCapabilities() {
    return siteCapabilities;
  }

  public void setSiteCapabilities(DeploySiteCapabilities siteCapabilities) {
    this.siteCapabilities = siteCapabilities;
  }


  public Deploy siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Get siteId
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public Deploy skipped(Boolean skipped) {
    this.skipped = skipped;
    return this;
  }

  /**
   * Get skipped
   * @return skipped
   */
  @javax.annotation.Nullable
  public Boolean getSkipped() {
    return skipped;
  }

  public void setSkipped(Boolean skipped) {
    this.skipped = skipped;
  }


  public Deploy sslUrl(String sslUrl) {
    this.sslUrl = sslUrl;
    return this;
  }

  /**
   * Get sslUrl
   * @return sslUrl
   */
  @javax.annotation.Nullable
  public String getSslUrl() {
    return sslUrl;
  }

  public void setSslUrl(String sslUrl) {
    this.sslUrl = sslUrl;
  }


  public Deploy state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Deploy title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Deploy updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Deploy url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Deploy userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deploy deploy = (Deploy) o;
    return Objects.equals(this.adminUrl, deploy.adminUrl) &&
        Objects.equals(this.branch, deploy.branch) &&
        Objects.equals(this.buildId, deploy.buildId) &&
        Objects.equals(this.commitRef, deploy.commitRef) &&
        Objects.equals(this.commitUrl, deploy.commitUrl) &&
        Objects.equals(this.context, deploy.context) &&
        Objects.equals(this.createdAt, deploy.createdAt) &&
        Objects.equals(this.deploySslUrl, deploy.deploySslUrl) &&
        Objects.equals(this.deployUrl, deploy.deployUrl) &&
        Objects.equals(this.draft, deploy.draft) &&
        Objects.equals(this.errorMessage, deploy.errorMessage) &&
        Objects.equals(this.framework, deploy.framework) &&
        Objects.equals(this.functionSchedules, deploy.functionSchedules) &&
        Objects.equals(this.id, deploy.id) &&
        Objects.equals(this.locked, deploy.locked) &&
        Objects.equals(this.name, deploy.name) &&
        Objects.equals(this.publishedAt, deploy.publishedAt) &&
        Objects.equals(this.required, deploy.required) &&
        Objects.equals(this.requiredFunctions, deploy.requiredFunctions) &&
        Objects.equals(this.reviewId, deploy.reviewId) &&
        Objects.equals(this.reviewUrl, deploy.reviewUrl) &&
        Objects.equals(this.screenshotUrl, deploy.screenshotUrl) &&
        Objects.equals(this.siteCapabilities, deploy.siteCapabilities) &&
        Objects.equals(this.siteId, deploy.siteId) &&
        Objects.equals(this.skipped, deploy.skipped) &&
        Objects.equals(this.sslUrl, deploy.sslUrl) &&
        Objects.equals(this.state, deploy.state) &&
        Objects.equals(this.title, deploy.title) &&
        Objects.equals(this.updatedAt, deploy.updatedAt) &&
        Objects.equals(this.url, deploy.url) &&
        Objects.equals(this.userId, deploy.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminUrl, branch, buildId, commitRef, commitUrl, context, createdAt, deploySslUrl, deployUrl, draft, errorMessage, framework, functionSchedules, id, locked, name, publishedAt, required, requiredFunctions, reviewId, reviewUrl, screenshotUrl, siteCapabilities, siteId, skipped, sslUrl, state, title, updatedAt, url, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deploy {\n");
    sb.append("    adminUrl: ").append(toIndentedString(adminUrl)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    buildId: ").append(toIndentedString(buildId)).append("\n");
    sb.append("    commitRef: ").append(toIndentedString(commitRef)).append("\n");
    sb.append("    commitUrl: ").append(toIndentedString(commitUrl)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deploySslUrl: ").append(toIndentedString(deploySslUrl)).append("\n");
    sb.append("    deployUrl: ").append(toIndentedString(deployUrl)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    functionSchedules: ").append(toIndentedString(functionSchedules)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publishedAt: ").append(toIndentedString(publishedAt)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    requiredFunctions: ").append(toIndentedString(requiredFunctions)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    reviewUrl: ").append(toIndentedString(reviewUrl)).append("\n");
    sb.append("    screenshotUrl: ").append(toIndentedString(screenshotUrl)).append("\n");
    sb.append("    siteCapabilities: ").append(toIndentedString(siteCapabilities)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    skipped: ").append(toIndentedString(skipped)).append("\n");
    sb.append("    sslUrl: ").append(toIndentedString(sslUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admin_url");
    openapiFields.add("branch");
    openapiFields.add("build_id");
    openapiFields.add("commit_ref");
    openapiFields.add("commit_url");
    openapiFields.add("context");
    openapiFields.add("created_at");
    openapiFields.add("deploy_ssl_url");
    openapiFields.add("deploy_url");
    openapiFields.add("draft");
    openapiFields.add("error_message");
    openapiFields.add("framework");
    openapiFields.add("function_schedules");
    openapiFields.add("id");
    openapiFields.add("locked");
    openapiFields.add("name");
    openapiFields.add("published_at");
    openapiFields.add("required");
    openapiFields.add("required_functions");
    openapiFields.add("review_id");
    openapiFields.add("review_url");
    openapiFields.add("screenshot_url");
    openapiFields.add("site_capabilities");
    openapiFields.add("site_id");
    openapiFields.add("skipped");
    openapiFields.add("ssl_url");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Deploy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Deploy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Deploy is not found in the empty JSON string", Deploy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Deploy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Deploy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admin_url") != null && !jsonObj.get("admin_url").isJsonNull()) && !jsonObj.get("admin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_url").toString()));
      }
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("build_id") != null && !jsonObj.get("build_id").isJsonNull()) && !jsonObj.get("build_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_id").toString()));
      }
      if ((jsonObj.get("commit_ref") != null && !jsonObj.get("commit_ref").isJsonNull()) && !jsonObj.get("commit_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_ref").toString()));
      }
      if ((jsonObj.get("commit_url") != null && !jsonObj.get("commit_url").isJsonNull()) && !jsonObj.get("commit_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_url").toString()));
      }
      if ((jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) && !jsonObj.get("context").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `context` to be a primitive type in the JSON string but got `%s`", jsonObj.get("context").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("deploy_ssl_url") != null && !jsonObj.get("deploy_ssl_url").isJsonNull()) && !jsonObj.get("deploy_ssl_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_ssl_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_ssl_url").toString()));
      }
      if ((jsonObj.get("deploy_url") != null && !jsonObj.get("deploy_url").isJsonNull()) && !jsonObj.get("deploy_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_url").toString()));
      }
      if ((jsonObj.get("error_message") != null && !jsonObj.get("error_message").isJsonNull()) && !jsonObj.get("error_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_message").toString()));
      }
      if ((jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull()) && !jsonObj.get("framework").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framework` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framework").toString()));
      }
      if (jsonObj.get("function_schedules") != null && !jsonObj.get("function_schedules").isJsonNull()) {
        JsonArray jsonArrayfunctionSchedules = jsonObj.getAsJsonArray("function_schedules");
        if (jsonArrayfunctionSchedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("function_schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `function_schedules` to be an array in the JSON string but got `%s`", jsonObj.get("function_schedules").toString()));
          }

          // validate the optional field `function_schedules` (array)
          for (int i = 0; i < jsonArrayfunctionSchedules.size(); i++) {
            FunctionSchedule.validateJsonElement(jsonArrayfunctionSchedules.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("published_at") != null && !jsonObj.get("published_at").isJsonNull()) && !jsonObj.get("published_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published_at").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull() && !jsonObj.get("required").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required` to be an array in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("required_functions") != null && !jsonObj.get("required_functions").isJsonNull() && !jsonObj.get("required_functions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required_functions` to be an array in the JSON string but got `%s`", jsonObj.get("required_functions").toString()));
      }
      if ((jsonObj.get("review_url") != null && !jsonObj.get("review_url").isJsonNull()) && !jsonObj.get("review_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_url").toString()));
      }
      if ((jsonObj.get("screenshot_url") != null && !jsonObj.get("screenshot_url").isJsonNull()) && !jsonObj.get("screenshot_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshot_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenshot_url").toString()));
      }
      // validate the optional field `site_capabilities`
      if (jsonObj.get("site_capabilities") != null && !jsonObj.get("site_capabilities").isJsonNull()) {
        DeploySiteCapabilities.validateJsonElement(jsonObj.get("site_capabilities"));
      }
      if ((jsonObj.get("site_id") != null && !jsonObj.get("site_id").isJsonNull()) && !jsonObj.get("site_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_id").toString()));
      }
      if ((jsonObj.get("ssl_url") != null && !jsonObj.get("ssl_url").isJsonNull()) && !jsonObj.get("ssl_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl_url").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Deploy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Deploy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Deploy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Deploy.class));

       return (TypeAdapter<T>) new TypeAdapter<Deploy>() {
           @Override
           public void write(JsonWriter out, Deploy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Deploy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Deploy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Deploy
   * @throws IOException if the JSON string is invalid with respect to Deploy
   */
  public static Deploy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Deploy.class);
  }

  /**
   * Convert an instance of Deploy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

