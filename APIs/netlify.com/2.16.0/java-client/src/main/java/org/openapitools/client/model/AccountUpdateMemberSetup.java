/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUpdateMemberSetup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUpdateMemberSetup {
  /**
   * Gets or Sets role
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    OWNER("Owner"),
    
    COLLABORATOR("Collaborator"),
    
    CONTROLLER("Controller");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * Gets or Sets siteAccess
   */
  @JsonAdapter(SiteAccessEnum.Adapter.class)
  public enum SiteAccessEnum {
    ALL("all"),
    
    NONE("none"),
    
    SELECTED("selected");

    private String value;

    SiteAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SiteAccessEnum fromValue(String value) {
      for (SiteAccessEnum b : SiteAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SiteAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SiteAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SiteAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SiteAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SiteAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SITE_ACCESS = "site_access";
  @SerializedName(SERIALIZED_NAME_SITE_ACCESS)
  private SiteAccessEnum siteAccess;

  public static final String SERIALIZED_NAME_SITE_IDS = "site_ids";
  @SerializedName(SERIALIZED_NAME_SITE_IDS)
  private List<String> siteIds = new ArrayList<>();

  public AccountUpdateMemberSetup() {
  }

  public AccountUpdateMemberSetup role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public AccountUpdateMemberSetup siteAccess(SiteAccessEnum siteAccess) {
    this.siteAccess = siteAccess;
    return this;
  }

  /**
   * Get siteAccess
   * @return siteAccess
   */
  @javax.annotation.Nullable
  public SiteAccessEnum getSiteAccess() {
    return siteAccess;
  }

  public void setSiteAccess(SiteAccessEnum siteAccess) {
    this.siteAccess = siteAccess;
  }


  public AccountUpdateMemberSetup siteIds(List<String> siteIds) {
    this.siteIds = siteIds;
    return this;
  }

  public AccountUpdateMemberSetup addSiteIdsItem(String siteIdsItem) {
    if (this.siteIds == null) {
      this.siteIds = new ArrayList<>();
    }
    this.siteIds.add(siteIdsItem);
    return this;
  }

  /**
   * Get siteIds
   * @return siteIds
   */
  @javax.annotation.Nullable
  public List<String> getSiteIds() {
    return siteIds;
  }

  public void setSiteIds(List<String> siteIds) {
    this.siteIds = siteIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUpdateMemberSetup accountUpdateMemberSetup = (AccountUpdateMemberSetup) o;
    return Objects.equals(this.role, accountUpdateMemberSetup.role) &&
        Objects.equals(this.siteAccess, accountUpdateMemberSetup.siteAccess) &&
        Objects.equals(this.siteIds, accountUpdateMemberSetup.siteIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(role, siteAccess, siteIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUpdateMemberSetup {\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    siteAccess: ").append(toIndentedString(siteAccess)).append("\n");
    sb.append("    siteIds: ").append(toIndentedString(siteIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("role");
    openapiFields.add("site_access");
    openapiFields.add("site_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUpdateMemberSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUpdateMemberSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUpdateMemberSetup is not found in the empty JSON string", AccountUpdateMemberSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUpdateMemberSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUpdateMemberSetup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("site_access") != null && !jsonObj.get("site_access").isJsonNull()) && !jsonObj.get("site_access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_access").toString()));
      }
      // validate the optional field `site_access`
      if (jsonObj.get("site_access") != null && !jsonObj.get("site_access").isJsonNull()) {
        SiteAccessEnum.validateJsonElement(jsonObj.get("site_access"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("site_ids") != null && !jsonObj.get("site_ids").isJsonNull() && !jsonObj.get("site_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_ids` to be an array in the JSON string but got `%s`", jsonObj.get("site_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUpdateMemberSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUpdateMemberSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUpdateMemberSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateMemberSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUpdateMemberSetup>() {
           @Override
           public void write(JsonWriter out, AccountUpdateMemberSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUpdateMemberSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUpdateMemberSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUpdateMemberSetup
   * @throws IOException if the JSON string is invalid with respect to AccountUpdateMemberSetup
   */
  public static AccountUpdateMemberSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUpdateMemberSetup.class);
  }

  /**
   * Convert an instance of AccountUpdateMemberSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

