/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MinifyOptions;
import org.openapitools.client.model.SiteProcessingSettingsHtml;
import org.openapitools.client.model.SiteProcessingSettingsImages;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SiteProcessingSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SiteProcessingSettings {
  public static final String SERIALIZED_NAME_CSS = "css";
  @SerializedName(SERIALIZED_NAME_CSS)
  private MinifyOptions css;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private SiteProcessingSettingsHtml html;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private SiteProcessingSettingsImages images;

  public static final String SERIALIZED_NAME_JS = "js";
  @SerializedName(SERIALIZED_NAME_JS)
  private MinifyOptions js;

  public static final String SERIALIZED_NAME_SKIP = "skip";
  @SerializedName(SERIALIZED_NAME_SKIP)
  private Boolean skip;

  public SiteProcessingSettings() {
  }

  public SiteProcessingSettings css(MinifyOptions css) {
    this.css = css;
    return this;
  }

  /**
   * Get css
   * @return css
   */
  @javax.annotation.Nullable
  public MinifyOptions getCss() {
    return css;
  }

  public void setCss(MinifyOptions css) {
    this.css = css;
  }


  public SiteProcessingSettings html(SiteProcessingSettingsHtml html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public SiteProcessingSettingsHtml getHtml() {
    return html;
  }

  public void setHtml(SiteProcessingSettingsHtml html) {
    this.html = html;
  }


  public SiteProcessingSettings images(SiteProcessingSettingsImages images) {
    this.images = images;
    return this;
  }

  /**
   * Get images
   * @return images
   */
  @javax.annotation.Nullable
  public SiteProcessingSettingsImages getImages() {
    return images;
  }

  public void setImages(SiteProcessingSettingsImages images) {
    this.images = images;
  }


  public SiteProcessingSettings js(MinifyOptions js) {
    this.js = js;
    return this;
  }

  /**
   * Get js
   * @return js
   */
  @javax.annotation.Nullable
  public MinifyOptions getJs() {
    return js;
  }

  public void setJs(MinifyOptions js) {
    this.js = js;
  }


  public SiteProcessingSettings skip(Boolean skip) {
    this.skip = skip;
    return this;
  }

  /**
   * Get skip
   * @return skip
   */
  @javax.annotation.Nullable
  public Boolean getSkip() {
    return skip;
  }

  public void setSkip(Boolean skip) {
    this.skip = skip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SiteProcessingSettings siteProcessingSettings = (SiteProcessingSettings) o;
    return Objects.equals(this.css, siteProcessingSettings.css) &&
        Objects.equals(this.html, siteProcessingSettings.html) &&
        Objects.equals(this.images, siteProcessingSettings.images) &&
        Objects.equals(this.js, siteProcessingSettings.js) &&
        Objects.equals(this.skip, siteProcessingSettings.skip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(css, html, images, js, skip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SiteProcessingSettings {\n");
    sb.append("    css: ").append(toIndentedString(css)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    js: ").append(toIndentedString(js)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("css");
    openapiFields.add("html");
    openapiFields.add("images");
    openapiFields.add("js");
    openapiFields.add("skip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SiteProcessingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SiteProcessingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SiteProcessingSettings is not found in the empty JSON string", SiteProcessingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SiteProcessingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SiteProcessingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `css`
      if (jsonObj.get("css") != null && !jsonObj.get("css").isJsonNull()) {
        MinifyOptions.validateJsonElement(jsonObj.get("css"));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        SiteProcessingSettingsHtml.validateJsonElement(jsonObj.get("html"));
      }
      // validate the optional field `images`
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        SiteProcessingSettingsImages.validateJsonElement(jsonObj.get("images"));
      }
      // validate the optional field `js`
      if (jsonObj.get("js") != null && !jsonObj.get("js").isJsonNull()) {
        MinifyOptions.validateJsonElement(jsonObj.get("js"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SiteProcessingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SiteProcessingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SiteProcessingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SiteProcessingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<SiteProcessingSettings>() {
           @Override
           public void write(JsonWriter out, SiteProcessingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SiteProcessingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SiteProcessingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SiteProcessingSettings
   * @throws IOException if the JSON string is invalid with respect to SiteProcessingSettings
   */
  public static SiteProcessingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SiteProcessingSettings.class);
  }

  /**
   * Convert an instance of SiteProcessingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

