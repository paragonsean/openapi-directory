/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountType
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountType {
  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Object capabilities;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MONTHLY_DOLLAR_PRICE = "monthly_dollar_price";
  @SerializedName(SERIALIZED_NAME_MONTHLY_DOLLAR_PRICE)
  private Integer monthlyDollarPrice;

  public static final String SERIALIZED_NAME_MONTHLY_SEATS_ADDON_DOLLAR_PRICE = "monthly_seats_addon_dollar_price";
  @SerializedName(SERIALIZED_NAME_MONTHLY_SEATS_ADDON_DOLLAR_PRICE)
  private Integer monthlySeatsAddonDollarPrice;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_YEARLY_DOLLAR_PRICE = "yearly_dollar_price";
  @SerializedName(SERIALIZED_NAME_YEARLY_DOLLAR_PRICE)
  private Integer yearlyDollarPrice;

  public static final String SERIALIZED_NAME_YEARLY_SEATS_ADDON_DOLLAR_PRICE = "yearly_seats_addon_dollar_price";
  @SerializedName(SERIALIZED_NAME_YEARLY_SEATS_ADDON_DOLLAR_PRICE)
  private Integer yearlySeatsAddonDollarPrice;

  public AccountType() {
  }

  public AccountType capabilities(Object capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Object getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Object capabilities) {
    this.capabilities = capabilities;
  }


  public AccountType description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public AccountType id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountType monthlyDollarPrice(Integer monthlyDollarPrice) {
    this.monthlyDollarPrice = monthlyDollarPrice;
    return this;
  }

  /**
   * Get monthlyDollarPrice
   * @return monthlyDollarPrice
   */
  @javax.annotation.Nullable
  public Integer getMonthlyDollarPrice() {
    return monthlyDollarPrice;
  }

  public void setMonthlyDollarPrice(Integer monthlyDollarPrice) {
    this.monthlyDollarPrice = monthlyDollarPrice;
  }


  public AccountType monthlySeatsAddonDollarPrice(Integer monthlySeatsAddonDollarPrice) {
    this.monthlySeatsAddonDollarPrice = monthlySeatsAddonDollarPrice;
    return this;
  }

  /**
   * Get monthlySeatsAddonDollarPrice
   * @return monthlySeatsAddonDollarPrice
   */
  @javax.annotation.Nullable
  public Integer getMonthlySeatsAddonDollarPrice() {
    return monthlySeatsAddonDollarPrice;
  }

  public void setMonthlySeatsAddonDollarPrice(Integer monthlySeatsAddonDollarPrice) {
    this.monthlySeatsAddonDollarPrice = monthlySeatsAddonDollarPrice;
  }


  public AccountType name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountType yearlyDollarPrice(Integer yearlyDollarPrice) {
    this.yearlyDollarPrice = yearlyDollarPrice;
    return this;
  }

  /**
   * Get yearlyDollarPrice
   * @return yearlyDollarPrice
   */
  @javax.annotation.Nullable
  public Integer getYearlyDollarPrice() {
    return yearlyDollarPrice;
  }

  public void setYearlyDollarPrice(Integer yearlyDollarPrice) {
    this.yearlyDollarPrice = yearlyDollarPrice;
  }


  public AccountType yearlySeatsAddonDollarPrice(Integer yearlySeatsAddonDollarPrice) {
    this.yearlySeatsAddonDollarPrice = yearlySeatsAddonDollarPrice;
    return this;
  }

  /**
   * Get yearlySeatsAddonDollarPrice
   * @return yearlySeatsAddonDollarPrice
   */
  @javax.annotation.Nullable
  public Integer getYearlySeatsAddonDollarPrice() {
    return yearlySeatsAddonDollarPrice;
  }

  public void setYearlySeatsAddonDollarPrice(Integer yearlySeatsAddonDollarPrice) {
    this.yearlySeatsAddonDollarPrice = yearlySeatsAddonDollarPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountType accountType = (AccountType) o;
    return Objects.equals(this.capabilities, accountType.capabilities) &&
        Objects.equals(this.description, accountType.description) &&
        Objects.equals(this.id, accountType.id) &&
        Objects.equals(this.monthlyDollarPrice, accountType.monthlyDollarPrice) &&
        Objects.equals(this.monthlySeatsAddonDollarPrice, accountType.monthlySeatsAddonDollarPrice) &&
        Objects.equals(this.name, accountType.name) &&
        Objects.equals(this.yearlyDollarPrice, accountType.yearlyDollarPrice) &&
        Objects.equals(this.yearlySeatsAddonDollarPrice, accountType.yearlySeatsAddonDollarPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capabilities, description, id, monthlyDollarPrice, monthlySeatsAddonDollarPrice, name, yearlyDollarPrice, yearlySeatsAddonDollarPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountType {\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    monthlyDollarPrice: ").append(toIndentedString(monthlyDollarPrice)).append("\n");
    sb.append("    monthlySeatsAddonDollarPrice: ").append(toIndentedString(monthlySeatsAddonDollarPrice)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    yearlyDollarPrice: ").append(toIndentedString(yearlyDollarPrice)).append("\n");
    sb.append("    yearlySeatsAddonDollarPrice: ").append(toIndentedString(yearlySeatsAddonDollarPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capabilities");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("monthly_dollar_price");
    openapiFields.add("monthly_seats_addon_dollar_price");
    openapiFields.add("name");
    openapiFields.add("yearly_dollar_price");
    openapiFields.add("yearly_seats_addon_dollar_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountType is not found in the empty JSON string", AccountType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountType.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountType>() {
           @Override
           public void write(JsonWriter out, AccountType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountType
   * @throws IOException if the JSON string is invalid with respect to AccountType
   */
  public static AccountType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountType.class);
  }

  /**
   * Convert an instance of AccountType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

