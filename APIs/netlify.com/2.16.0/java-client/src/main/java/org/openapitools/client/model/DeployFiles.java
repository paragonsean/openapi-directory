/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.FunctionConfig;
import org.openapitools.client.model.FunctionSchedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeployFiles
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeployFiles {
  public static final String SERIALIZED_NAME_ASYNC = "async";
  @SerializedName(SERIALIZED_NAME_ASYNC)
  private Boolean async;

  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_DRAFT = "draft";
  @SerializedName(SERIALIZED_NAME_DRAFT)
  private Boolean draft;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private Object files;

  public static final String SERIALIZED_NAME_FRAMEWORK = "framework";
  @SerializedName(SERIALIZED_NAME_FRAMEWORK)
  private String framework;

  public static final String SERIALIZED_NAME_FUNCTION_SCHEDULES = "function_schedules";
  @SerializedName(SERIALIZED_NAME_FUNCTION_SCHEDULES)
  private List<FunctionSchedule> functionSchedules = new ArrayList<>();

  public static final String SERIALIZED_NAME_FUNCTIONS = "functions";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS)
  private Object functions;

  public static final String SERIALIZED_NAME_FUNCTIONS_CONFIG = "functions_config";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS_CONFIG)
  private Map<String, FunctionConfig> functionsConfig = new HashMap<>();

  public DeployFiles() {
  }

  public DeployFiles async(Boolean async) {
    this.async = async;
    return this;
  }

  /**
   * Get async
   * @return async
   */
  @javax.annotation.Nullable
  public Boolean getAsync() {
    return async;
  }

  public void setAsync(Boolean async) {
    this.async = async;
  }


  public DeployFiles branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * Get branch
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public DeployFiles draft(Boolean draft) {
    this.draft = draft;
    return this;
  }

  /**
   * Get draft
   * @return draft
   */
  @javax.annotation.Nullable
  public Boolean getDraft() {
    return draft;
  }

  public void setDraft(Boolean draft) {
    this.draft = draft;
  }


  public DeployFiles files(Object files) {
    this.files = files;
    return this;
  }

  /**
   * Get files
   * @return files
   */
  @javax.annotation.Nullable
  public Object getFiles() {
    return files;
  }

  public void setFiles(Object files) {
    this.files = files;
  }


  public DeployFiles framework(String framework) {
    this.framework = framework;
    return this;
  }

  /**
   * Get framework
   * @return framework
   */
  @javax.annotation.Nullable
  public String getFramework() {
    return framework;
  }

  public void setFramework(String framework) {
    this.framework = framework;
  }


  public DeployFiles functionSchedules(List<FunctionSchedule> functionSchedules) {
    this.functionSchedules = functionSchedules;
    return this;
  }

  public DeployFiles addFunctionSchedulesItem(FunctionSchedule functionSchedulesItem) {
    if (this.functionSchedules == null) {
      this.functionSchedules = new ArrayList<>();
    }
    this.functionSchedules.add(functionSchedulesItem);
    return this;
  }

  /**
   * Get functionSchedules
   * @return functionSchedules
   */
  @javax.annotation.Nullable
  public List<FunctionSchedule> getFunctionSchedules() {
    return functionSchedules;
  }

  public void setFunctionSchedules(List<FunctionSchedule> functionSchedules) {
    this.functionSchedules = functionSchedules;
  }


  public DeployFiles functions(Object functions) {
    this.functions = functions;
    return this;
  }

  /**
   * Get functions
   * @return functions
   */
  @javax.annotation.Nullable
  public Object getFunctions() {
    return functions;
  }

  public void setFunctions(Object functions) {
    this.functions = functions;
  }


  public DeployFiles functionsConfig(Map<String, FunctionConfig> functionsConfig) {
    this.functionsConfig = functionsConfig;
    return this;
  }

  public DeployFiles putFunctionsConfigItem(String key, FunctionConfig functionsConfigItem) {
    if (this.functionsConfig == null) {
      this.functionsConfig = new HashMap<>();
    }
    this.functionsConfig.put(key, functionsConfigItem);
    return this;
  }

  /**
   * Get functionsConfig
   * @return functionsConfig
   */
  @javax.annotation.Nullable
  public Map<String, FunctionConfig> getFunctionsConfig() {
    return functionsConfig;
  }

  public void setFunctionsConfig(Map<String, FunctionConfig> functionsConfig) {
    this.functionsConfig = functionsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeployFiles deployFiles = (DeployFiles) o;
    return Objects.equals(this.async, deployFiles.async) &&
        Objects.equals(this.branch, deployFiles.branch) &&
        Objects.equals(this.draft, deployFiles.draft) &&
        Objects.equals(this.files, deployFiles.files) &&
        Objects.equals(this.framework, deployFiles.framework) &&
        Objects.equals(this.functionSchedules, deployFiles.functionSchedules) &&
        Objects.equals(this.functions, deployFiles.functions) &&
        Objects.equals(this.functionsConfig, deployFiles.functionsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(async, branch, draft, files, framework, functionSchedules, functions, functionsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeployFiles {\n");
    sb.append("    async: ").append(toIndentedString(async)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    draft: ").append(toIndentedString(draft)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    framework: ").append(toIndentedString(framework)).append("\n");
    sb.append("    functionSchedules: ").append(toIndentedString(functionSchedules)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("    functionsConfig: ").append(toIndentedString(functionsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("async");
    openapiFields.add("branch");
    openapiFields.add("draft");
    openapiFields.add("files");
    openapiFields.add("framework");
    openapiFields.add("function_schedules");
    openapiFields.add("functions");
    openapiFields.add("functions_config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeployFiles
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeployFiles.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeployFiles is not found in the empty JSON string", DeployFiles.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeployFiles.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeployFiles` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("framework") != null && !jsonObj.get("framework").isJsonNull()) && !jsonObj.get("framework").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `framework` to be a primitive type in the JSON string but got `%s`", jsonObj.get("framework").toString()));
      }
      if (jsonObj.get("function_schedules") != null && !jsonObj.get("function_schedules").isJsonNull()) {
        JsonArray jsonArrayfunctionSchedules = jsonObj.getAsJsonArray("function_schedules");
        if (jsonArrayfunctionSchedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("function_schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `function_schedules` to be an array in the JSON string but got `%s`", jsonObj.get("function_schedules").toString()));
          }

          // validate the optional field `function_schedules` (array)
          for (int i = 0; i < jsonArrayfunctionSchedules.size(); i++) {
            FunctionSchedule.validateJsonElement(jsonArrayfunctionSchedules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeployFiles.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeployFiles' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeployFiles> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeployFiles.class));

       return (TypeAdapter<T>) new TypeAdapter<DeployFiles>() {
           @Override
           public void write(JsonWriter out, DeployFiles value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeployFiles read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeployFiles given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeployFiles
   * @throws IOException if the JSON string is invalid with respect to DeployFiles
   */
  public static DeployFiles fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeployFiles.class);
  }

  /**
   * Convert an instance of DeployFiles to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

