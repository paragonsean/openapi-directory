/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountUpdateSetup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountUpdateSetup {
  public static final String SERIALIZED_NAME_BILLING_DETAILS = "billing_details";
  @SerializedName(SERIALIZED_NAME_BILLING_DETAILS)
  private String billingDetails;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_BILLING_NAME = "billing_name";
  @SerializedName(SERIALIZED_NAME_BILLING_NAME)
  private String billingName;

  public static final String SERIALIZED_NAME_EXTRA_SEATS_BLOCK = "extra_seats_block";
  @SerializedName(SERIALIZED_NAME_EXTRA_SEATS_BLOCK)
  private Integer extraSeatsBlock;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public AccountUpdateSetup() {
  }

  public AccountUpdateSetup billingDetails(String billingDetails) {
    this.billingDetails = billingDetails;
    return this;
  }

  /**
   * Get billingDetails
   * @return billingDetails
   */
  @javax.annotation.Nullable
  public String getBillingDetails() {
    return billingDetails;
  }

  public void setBillingDetails(String billingDetails) {
    this.billingDetails = billingDetails;
  }


  public AccountUpdateSetup billingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
    return this;
  }

  /**
   * Get billingEmail
   * @return billingEmail
   */
  @javax.annotation.Nullable
  public String getBillingEmail() {
    return billingEmail;
  }

  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public AccountUpdateSetup billingName(String billingName) {
    this.billingName = billingName;
    return this;
  }

  /**
   * Get billingName
   * @return billingName
   */
  @javax.annotation.Nullable
  public String getBillingName() {
    return billingName;
  }

  public void setBillingName(String billingName) {
    this.billingName = billingName;
  }


  public AccountUpdateSetup extraSeatsBlock(Integer extraSeatsBlock) {
    this.extraSeatsBlock = extraSeatsBlock;
    return this;
  }

  /**
   * Get extraSeatsBlock
   * @return extraSeatsBlock
   */
  @javax.annotation.Nullable
  public Integer getExtraSeatsBlock() {
    return extraSeatsBlock;
  }

  public void setExtraSeatsBlock(Integer extraSeatsBlock) {
    this.extraSeatsBlock = extraSeatsBlock;
  }


  public AccountUpdateSetup name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountUpdateSetup slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public AccountUpdateSetup typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Get typeId
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountUpdateSetup accountUpdateSetup = (AccountUpdateSetup) o;
    return Objects.equals(this.billingDetails, accountUpdateSetup.billingDetails) &&
        Objects.equals(this.billingEmail, accountUpdateSetup.billingEmail) &&
        Objects.equals(this.billingName, accountUpdateSetup.billingName) &&
        Objects.equals(this.extraSeatsBlock, accountUpdateSetup.extraSeatsBlock) &&
        Objects.equals(this.name, accountUpdateSetup.name) &&
        Objects.equals(this.slug, accountUpdateSetup.slug) &&
        Objects.equals(this.typeId, accountUpdateSetup.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDetails, billingEmail, billingName, extraSeatsBlock, name, slug, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountUpdateSetup {\n");
    sb.append("    billingDetails: ").append(toIndentedString(billingDetails)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    billingName: ").append(toIndentedString(billingName)).append("\n");
    sb.append("    extraSeatsBlock: ").append(toIndentedString(extraSeatsBlock)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_details");
    openapiFields.add("billing_email");
    openapiFields.add("billing_name");
    openapiFields.add("extra_seats_block");
    openapiFields.add("name");
    openapiFields.add("slug");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountUpdateSetup
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountUpdateSetup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountUpdateSetup is not found in the empty JSON string", AccountUpdateSetup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountUpdateSetup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountUpdateSetup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_details") != null && !jsonObj.get("billing_details").isJsonNull()) && !jsonObj.get("billing_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_details").toString()));
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("billing_name") != null && !jsonObj.get("billing_name").isJsonNull()) && !jsonObj.get("billing_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountUpdateSetup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountUpdateSetup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountUpdateSetup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountUpdateSetup.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountUpdateSetup>() {
           @Override
           public void write(JsonWriter out, AccountUpdateSetup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountUpdateSetup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountUpdateSetup given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountUpdateSetup
   * @throws IOException if the JSON string is invalid with respect to AccountUpdateSetup
   */
  public static AccountUpdateSetup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountUpdateSetup.class);
  }

  /**
   * Convert an instance of AccountUpdateSetup to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

