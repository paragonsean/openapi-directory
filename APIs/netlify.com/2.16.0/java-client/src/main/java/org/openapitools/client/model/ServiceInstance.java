/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceInstance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceInstance {
  public static final String SERIALIZED_NAME_AUTH_URL = "auth_url";
  @SerializedName(SERIALIZED_NAME_AUTH_URL)
  private String authUrl;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Object config;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Object env;

  public static final String SERIALIZED_NAME_EXTERNAL_ATTRIBUTES = "external_attributes";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ATTRIBUTES)
  private Object externalAttributes;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "service_name";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_SERVICE_PATH = "service_path";
  @SerializedName(SERIALIZED_NAME_SERVICE_PATH)
  private String servicePath;

  public static final String SERIALIZED_NAME_SERVICE_SLUG = "service_slug";
  @SerializedName(SERIALIZED_NAME_SERVICE_SLUG)
  private String serviceSlug;

  public static final String SERIALIZED_NAME_SNIPPETS = "snippets";
  @SerializedName(SERIALIZED_NAME_SNIPPETS)
  private List<Object> snippets = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public ServiceInstance() {
  }

  public ServiceInstance authUrl(String authUrl) {
    this.authUrl = authUrl;
    return this;
  }

  /**
   * Get authUrl
   * @return authUrl
   */
  @javax.annotation.Nullable
  public String getAuthUrl() {
    return authUrl;
  }

  public void setAuthUrl(String authUrl) {
    this.authUrl = authUrl;
  }


  public ServiceInstance config(Object config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public Object getConfig() {
    return config;
  }

  public void setConfig(Object config) {
    this.config = config;
  }


  public ServiceInstance createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ServiceInstance env(Object env) {
    this.env = env;
    return this;
  }

  /**
   * Get env
   * @return env
   */
  @javax.annotation.Nullable
  public Object getEnv() {
    return env;
  }

  public void setEnv(Object env) {
    this.env = env;
  }


  public ServiceInstance externalAttributes(Object externalAttributes) {
    this.externalAttributes = externalAttributes;
    return this;
  }

  /**
   * Get externalAttributes
   * @return externalAttributes
   */
  @javax.annotation.Nullable
  public Object getExternalAttributes() {
    return externalAttributes;
  }

  public void setExternalAttributes(Object externalAttributes) {
    this.externalAttributes = externalAttributes;
  }


  public ServiceInstance id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ServiceInstance serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Get serviceName
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public ServiceInstance servicePath(String servicePath) {
    this.servicePath = servicePath;
    return this;
  }

  /**
   * Get servicePath
   * @return servicePath
   */
  @javax.annotation.Nullable
  public String getServicePath() {
    return servicePath;
  }

  public void setServicePath(String servicePath) {
    this.servicePath = servicePath;
  }


  public ServiceInstance serviceSlug(String serviceSlug) {
    this.serviceSlug = serviceSlug;
    return this;
  }

  /**
   * Get serviceSlug
   * @return serviceSlug
   */
  @javax.annotation.Nullable
  public String getServiceSlug() {
    return serviceSlug;
  }

  public void setServiceSlug(String serviceSlug) {
    this.serviceSlug = serviceSlug;
  }


  public ServiceInstance snippets(List<Object> snippets) {
    this.snippets = snippets;
    return this;
  }

  public ServiceInstance addSnippetsItem(Object snippetsItem) {
    if (this.snippets == null) {
      this.snippets = new ArrayList<>();
    }
    this.snippets.add(snippetsItem);
    return this;
  }

  /**
   * Get snippets
   * @return snippets
   */
  @javax.annotation.Nullable
  public List<Object> getSnippets() {
    return snippets;
  }

  public void setSnippets(List<Object> snippets) {
    this.snippets = snippets;
  }


  public ServiceInstance updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ServiceInstance url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceInstance serviceInstance = (ServiceInstance) o;
    return Objects.equals(this.authUrl, serviceInstance.authUrl) &&
        Objects.equals(this.config, serviceInstance.config) &&
        Objects.equals(this.createdAt, serviceInstance.createdAt) &&
        Objects.equals(this.env, serviceInstance.env) &&
        Objects.equals(this.externalAttributes, serviceInstance.externalAttributes) &&
        Objects.equals(this.id, serviceInstance.id) &&
        Objects.equals(this.serviceName, serviceInstance.serviceName) &&
        Objects.equals(this.servicePath, serviceInstance.servicePath) &&
        Objects.equals(this.serviceSlug, serviceInstance.serviceSlug) &&
        Objects.equals(this.snippets, serviceInstance.snippets) &&
        Objects.equals(this.updatedAt, serviceInstance.updatedAt) &&
        Objects.equals(this.url, serviceInstance.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authUrl, config, createdAt, env, externalAttributes, id, serviceName, servicePath, serviceSlug, snippets, updatedAt, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceInstance {\n");
    sb.append("    authUrl: ").append(toIndentedString(authUrl)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    externalAttributes: ").append(toIndentedString(externalAttributes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    servicePath: ").append(toIndentedString(servicePath)).append("\n");
    sb.append("    serviceSlug: ").append(toIndentedString(serviceSlug)).append("\n");
    sb.append("    snippets: ").append(toIndentedString(snippets)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_url");
    openapiFields.add("config");
    openapiFields.add("created_at");
    openapiFields.add("env");
    openapiFields.add("external_attributes");
    openapiFields.add("id");
    openapiFields.add("service_name");
    openapiFields.add("service_path");
    openapiFields.add("service_slug");
    openapiFields.add("snippets");
    openapiFields.add("updated_at");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceInstance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceInstance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceInstance is not found in the empty JSON string", ServiceInstance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceInstance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceInstance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_url") != null && !jsonObj.get("auth_url").isJsonNull()) && !jsonObj.get("auth_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_url").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("service_name") != null && !jsonObj.get("service_name").isJsonNull()) && !jsonObj.get("service_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_name").toString()));
      }
      if ((jsonObj.get("service_path") != null && !jsonObj.get("service_path").isJsonNull()) && !jsonObj.get("service_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_path").toString()));
      }
      if ((jsonObj.get("service_slug") != null && !jsonObj.get("service_slug").isJsonNull()) && !jsonObj.get("service_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service_slug").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("snippets") != null && !jsonObj.get("snippets").isJsonNull() && !jsonObj.get("snippets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippets` to be an array in the JSON string but got `%s`", jsonObj.get("snippets").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceInstance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceInstance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceInstance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceInstance.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceInstance>() {
           @Override
           public void write(JsonWriter out, ServiceInstance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceInstance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceInstance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceInstance
   * @throws IOException if the JSON string is invalid with respect to ServiceInstance
   */
  public static ServiceInstance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceInstance.class);
  }

  /**
   * Convert an instance of ServiceInstance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

