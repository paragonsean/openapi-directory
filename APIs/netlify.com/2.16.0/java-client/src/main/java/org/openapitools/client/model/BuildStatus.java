/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BuildStatusMinutes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BuildStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BuildStatus {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Integer active;

  public static final String SERIALIZED_NAME_BUILD_COUNT = "build_count";
  @SerializedName(SERIALIZED_NAME_BUILD_COUNT)
  private Integer buildCount;

  public static final String SERIALIZED_NAME_ENQUEUED = "enqueued";
  @SerializedName(SERIALIZED_NAME_ENQUEUED)
  private Integer enqueued;

  public static final String SERIALIZED_NAME_MINUTES = "minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private BuildStatusMinutes minutes;

  public static final String SERIALIZED_NAME_PENDING_CONCURRENCY = "pending_concurrency";
  @SerializedName(SERIALIZED_NAME_PENDING_CONCURRENCY)
  private Integer pendingConcurrency;

  public BuildStatus() {
  }

  public BuildStatus active(Integer active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public Integer getActive() {
    return active;
  }

  public void setActive(Integer active) {
    this.active = active;
  }


  public BuildStatus buildCount(Integer buildCount) {
    this.buildCount = buildCount;
    return this;
  }

  /**
   * Get buildCount
   * @return buildCount
   */
  @javax.annotation.Nullable
  public Integer getBuildCount() {
    return buildCount;
  }

  public void setBuildCount(Integer buildCount) {
    this.buildCount = buildCount;
  }


  public BuildStatus enqueued(Integer enqueued) {
    this.enqueued = enqueued;
    return this;
  }

  /**
   * Get enqueued
   * @return enqueued
   */
  @javax.annotation.Nullable
  public Integer getEnqueued() {
    return enqueued;
  }

  public void setEnqueued(Integer enqueued) {
    this.enqueued = enqueued;
  }


  public BuildStatus minutes(BuildStatusMinutes minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * Get minutes
   * @return minutes
   */
  @javax.annotation.Nullable
  public BuildStatusMinutes getMinutes() {
    return minutes;
  }

  public void setMinutes(BuildStatusMinutes minutes) {
    this.minutes = minutes;
  }


  public BuildStatus pendingConcurrency(Integer pendingConcurrency) {
    this.pendingConcurrency = pendingConcurrency;
    return this;
  }

  /**
   * Get pendingConcurrency
   * @return pendingConcurrency
   */
  @javax.annotation.Nullable
  public Integer getPendingConcurrency() {
    return pendingConcurrency;
  }

  public void setPendingConcurrency(Integer pendingConcurrency) {
    this.pendingConcurrency = pendingConcurrency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BuildStatus buildStatus = (BuildStatus) o;
    return Objects.equals(this.active, buildStatus.active) &&
        Objects.equals(this.buildCount, buildStatus.buildCount) &&
        Objects.equals(this.enqueued, buildStatus.enqueued) &&
        Objects.equals(this.minutes, buildStatus.minutes) &&
        Objects.equals(this.pendingConcurrency, buildStatus.pendingConcurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, buildCount, enqueued, minutes, pendingConcurrency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BuildStatus {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    buildCount: ").append(toIndentedString(buildCount)).append("\n");
    sb.append("    enqueued: ").append(toIndentedString(enqueued)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    pendingConcurrency: ").append(toIndentedString(pendingConcurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("build_count");
    openapiFields.add("enqueued");
    openapiFields.add("minutes");
    openapiFields.add("pending_concurrency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BuildStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BuildStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BuildStatus is not found in the empty JSON string", BuildStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BuildStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BuildStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `minutes`
      if (jsonObj.get("minutes") != null && !jsonObj.get("minutes").isJsonNull()) {
        BuildStatusMinutes.validateJsonElement(jsonObj.get("minutes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BuildStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BuildStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BuildStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BuildStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<BuildStatus>() {
           @Override
           public void write(JsonWriter out, BuildStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BuildStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BuildStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BuildStatus
   * @throws IOException if the JSON string is invalid with respect to BuildStatus
   */
  public static BuildStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BuildStatus.class);
  }

  /**
   * Convert an instance of BuildStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

