/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountMembershipCapabilities;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AccountMembership
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccountMembership {
  public static final String SERIALIZED_NAME_BILLING_DETAILS = "billing_details";
  @SerializedName(SERIALIZED_NAME_BILLING_DETAILS)
  private String billingDetails;

  public static final String SERIALIZED_NAME_BILLING_EMAIL = "billing_email";
  @SerializedName(SERIALIZED_NAME_BILLING_EMAIL)
  private String billingEmail;

  public static final String SERIALIZED_NAME_BILLING_NAME = "billing_name";
  @SerializedName(SERIALIZED_NAME_BILLING_NAME)
  private String billingName;

  public static final String SERIALIZED_NAME_BILLING_PERIOD = "billing_period";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD)
  private String billingPeriod;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private AccountMembershipCapabilities capabilities;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_IDS = "owner_ids";
  @SerializedName(SERIALIZED_NAME_OWNER_IDS)
  private List<String> ownerIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_ID = "payment_method_id";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_ID)
  private String paymentMethodId;

  public static final String SERIALIZED_NAME_ROLES_ALLOWED = "roles_allowed";
  @SerializedName(SERIALIZED_NAME_ROLES_ALLOWED)
  private List<String> rolesAllowed = new ArrayList<>();

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private String typeId;

  public static final String SERIALIZED_NAME_TYPE_NAME = "type_name";
  @SerializedName(SERIALIZED_NAME_TYPE_NAME)
  private String typeName;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public AccountMembership() {
  }

  public AccountMembership billingDetails(String billingDetails) {
    this.billingDetails = billingDetails;
    return this;
  }

  /**
   * Get billingDetails
   * @return billingDetails
   */
  @javax.annotation.Nullable
  public String getBillingDetails() {
    return billingDetails;
  }

  public void setBillingDetails(String billingDetails) {
    this.billingDetails = billingDetails;
  }


  public AccountMembership billingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
    return this;
  }

  /**
   * Get billingEmail
   * @return billingEmail
   */
  @javax.annotation.Nullable
  public String getBillingEmail() {
    return billingEmail;
  }

  public void setBillingEmail(String billingEmail) {
    this.billingEmail = billingEmail;
  }


  public AccountMembership billingName(String billingName) {
    this.billingName = billingName;
    return this;
  }

  /**
   * Get billingName
   * @return billingName
   */
  @javax.annotation.Nullable
  public String getBillingName() {
    return billingName;
  }

  public void setBillingName(String billingName) {
    this.billingName = billingName;
  }


  public AccountMembership billingPeriod(String billingPeriod) {
    this.billingPeriod = billingPeriod;
    return this;
  }

  /**
   * Get billingPeriod
   * @return billingPeriod
   */
  @javax.annotation.Nullable
  public String getBillingPeriod() {
    return billingPeriod;
  }

  public void setBillingPeriod(String billingPeriod) {
    this.billingPeriod = billingPeriod;
  }


  public AccountMembership capabilities(AccountMembershipCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public AccountMembershipCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(AccountMembershipCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public AccountMembership createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public AccountMembership id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccountMembership name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AccountMembership ownerIds(List<String> ownerIds) {
    this.ownerIds = ownerIds;
    return this;
  }

  public AccountMembership addOwnerIdsItem(String ownerIdsItem) {
    if (this.ownerIds == null) {
      this.ownerIds = new ArrayList<>();
    }
    this.ownerIds.add(ownerIdsItem);
    return this;
  }

  /**
   * Get ownerIds
   * @return ownerIds
   */
  @javax.annotation.Nullable
  public List<String> getOwnerIds() {
    return ownerIds;
  }

  public void setOwnerIds(List<String> ownerIds) {
    this.ownerIds = ownerIds;
  }


  public AccountMembership paymentMethodId(String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
    return this;
  }

  /**
   * Get paymentMethodId
   * @return paymentMethodId
   */
  @javax.annotation.Nullable
  public String getPaymentMethodId() {
    return paymentMethodId;
  }

  public void setPaymentMethodId(String paymentMethodId) {
    this.paymentMethodId = paymentMethodId;
  }


  public AccountMembership rolesAllowed(List<String> rolesAllowed) {
    this.rolesAllowed = rolesAllowed;
    return this;
  }

  public AccountMembership addRolesAllowedItem(String rolesAllowedItem) {
    if (this.rolesAllowed == null) {
      this.rolesAllowed = new ArrayList<>();
    }
    this.rolesAllowed.add(rolesAllowedItem);
    return this;
  }

  /**
   * Get rolesAllowed
   * @return rolesAllowed
   */
  @javax.annotation.Nullable
  public List<String> getRolesAllowed() {
    return rolesAllowed;
  }

  public void setRolesAllowed(List<String> rolesAllowed) {
    this.rolesAllowed = rolesAllowed;
  }


  public AccountMembership slug(String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(String slug) {
    this.slug = slug;
  }


  public AccountMembership type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AccountMembership typeId(String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Get typeId
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(String typeId) {
    this.typeId = typeId;
  }


  public AccountMembership typeName(String typeName) {
    this.typeName = typeName;
    return this;
  }

  /**
   * Get typeName
   * @return typeName
   */
  @javax.annotation.Nullable
  public String getTypeName() {
    return typeName;
  }

  public void setTypeName(String typeName) {
    this.typeName = typeName;
  }


  public AccountMembership updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountMembership accountMembership = (AccountMembership) o;
    return Objects.equals(this.billingDetails, accountMembership.billingDetails) &&
        Objects.equals(this.billingEmail, accountMembership.billingEmail) &&
        Objects.equals(this.billingName, accountMembership.billingName) &&
        Objects.equals(this.billingPeriod, accountMembership.billingPeriod) &&
        Objects.equals(this.capabilities, accountMembership.capabilities) &&
        Objects.equals(this.createdAt, accountMembership.createdAt) &&
        Objects.equals(this.id, accountMembership.id) &&
        Objects.equals(this.name, accountMembership.name) &&
        Objects.equals(this.ownerIds, accountMembership.ownerIds) &&
        Objects.equals(this.paymentMethodId, accountMembership.paymentMethodId) &&
        Objects.equals(this.rolesAllowed, accountMembership.rolesAllowed) &&
        Objects.equals(this.slug, accountMembership.slug) &&
        Objects.equals(this.type, accountMembership.type) &&
        Objects.equals(this.typeId, accountMembership.typeId) &&
        Objects.equals(this.typeName, accountMembership.typeName) &&
        Objects.equals(this.updatedAt, accountMembership.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingDetails, billingEmail, billingName, billingPeriod, capabilities, createdAt, id, name, ownerIds, paymentMethodId, rolesAllowed, slug, type, typeId, typeName, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountMembership {\n");
    sb.append("    billingDetails: ").append(toIndentedString(billingDetails)).append("\n");
    sb.append("    billingEmail: ").append(toIndentedString(billingEmail)).append("\n");
    sb.append("    billingName: ").append(toIndentedString(billingName)).append("\n");
    sb.append("    billingPeriod: ").append(toIndentedString(billingPeriod)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerIds: ").append(toIndentedString(ownerIds)).append("\n");
    sb.append("    paymentMethodId: ").append(toIndentedString(paymentMethodId)).append("\n");
    sb.append("    rolesAllowed: ").append(toIndentedString(rolesAllowed)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("    typeName: ").append(toIndentedString(typeName)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_details");
    openapiFields.add("billing_email");
    openapiFields.add("billing_name");
    openapiFields.add("billing_period");
    openapiFields.add("capabilities");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("owner_ids");
    openapiFields.add("payment_method_id");
    openapiFields.add("roles_allowed");
    openapiFields.add("slug");
    openapiFields.add("type");
    openapiFields.add("type_id");
    openapiFields.add("type_name");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountMembership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccountMembership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountMembership is not found in the empty JSON string", AccountMembership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountMembership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountMembership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_details") != null && !jsonObj.get("billing_details").isJsonNull()) && !jsonObj.get("billing_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_details").toString()));
      }
      if ((jsonObj.get("billing_email") != null && !jsonObj.get("billing_email").isJsonNull()) && !jsonObj.get("billing_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_email").toString()));
      }
      if ((jsonObj.get("billing_name") != null && !jsonObj.get("billing_name").isJsonNull()) && !jsonObj.get("billing_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_name").toString()));
      }
      if ((jsonObj.get("billing_period") != null && !jsonObj.get("billing_period").isJsonNull()) && !jsonObj.get("billing_period").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_period` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_period").toString()));
      }
      // validate the optional field `capabilities`
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull()) {
        AccountMembershipCapabilities.validateJsonElement(jsonObj.get("capabilities"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owner_ids") != null && !jsonObj.get("owner_ids").isJsonNull() && !jsonObj.get("owner_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_ids` to be an array in the JSON string but got `%s`", jsonObj.get("owner_ids").toString()));
      }
      if ((jsonObj.get("payment_method_id") != null && !jsonObj.get("payment_method_id").isJsonNull()) && !jsonObj.get("payment_method_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment_method_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment_method_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles_allowed") != null && !jsonObj.get("roles_allowed").isJsonNull() && !jsonObj.get("roles_allowed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles_allowed` to be an array in the JSON string but got `%s`", jsonObj.get("roles_allowed").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
      if ((jsonObj.get("type_name") != null && !jsonObj.get("type_name").isJsonNull()) && !jsonObj.get("type_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_name").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountMembership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountMembership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountMembership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountMembership.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountMembership>() {
           @Override
           public void write(JsonWriter out, AccountMembership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountMembership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountMembership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountMembership
   * @throws IOException if the JSON string is invalid with respect to AccountMembership
   */
  public static AccountMembership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountMembership.class);
  }

  /**
   * Convert an instance of AccountMembership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

