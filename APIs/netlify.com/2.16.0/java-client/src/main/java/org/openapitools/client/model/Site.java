/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Deploy;
import org.openapitools.client.model.RepoInfo;
import org.openapitools.client.model.SiteDefaultHooksData;
import org.openapitools.client.model.SiteProcessingSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Site
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Site {
  public static final String SERIALIZED_NAME_ACCOUNT_NAME = "account_name";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NAME)
  private String accountName;

  public static final String SERIALIZED_NAME_ACCOUNT_SLUG = "account_slug";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_SLUG)
  private String accountSlug;

  public static final String SERIALIZED_NAME_ADMIN_URL = "admin_url";
  @SerializedName(SERIALIZED_NAME_ADMIN_URL)
  private String adminUrl;

  public static final String SERIALIZED_NAME_BUILD_IMAGE = "build_image";
  @SerializedName(SERIALIZED_NAME_BUILD_IMAGE)
  private String buildImage;

  public static final String SERIALIZED_NAME_BUILD_SETTINGS = "build_settings";
  @SerializedName(SERIALIZED_NAME_BUILD_SETTINGS)
  private RepoInfo buildSettings;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private Map<String, Object> capabilities = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_DOMAIN = "custom_domain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DOMAIN)
  private String customDomain;

  public static final String SERIALIZED_NAME_DEFAULT_HOOKS_DATA = "default_hooks_data";
  @SerializedName(SERIALIZED_NAME_DEFAULT_HOOKS_DATA)
  private SiteDefaultHooksData defaultHooksData;

  public static final String SERIALIZED_NAME_DEPLOY_HOOK = "deploy_hook";
  @SerializedName(SERIALIZED_NAME_DEPLOY_HOOK)
  private String deployHook;

  public static final String SERIALIZED_NAME_DEPLOY_URL = "deploy_url";
  @SerializedName(SERIALIZED_NAME_DEPLOY_URL)
  private String deployUrl;

  public static final String SERIALIZED_NAME_DOMAIN_ALIASES = "domain_aliases";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ALIASES)
  private List<String> domainAliases = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORCE_SSL = "force_ssl";
  @SerializedName(SERIALIZED_NAME_FORCE_SSL)
  private Boolean forceSsl;

  public static final String SERIALIZED_NAME_GIT_PROVIDER = "git_provider";
  @SerializedName(SERIALIZED_NAME_GIT_PROVIDER)
  private String gitProvider;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ID_DOMAIN = "id_domain";
  @SerializedName(SERIALIZED_NAME_ID_DOMAIN)
  private String idDomain;

  public static final String SERIALIZED_NAME_MANAGED_DNS = "managed_dns";
  @SerializedName(SERIALIZED_NAME_MANAGED_DNS)
  private Boolean managedDns;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTIFICATION_EMAIL = "notification_email";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_EMAIL)
  private String notificationEmail;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_PRERENDER = "prerender";
  @SerializedName(SERIALIZED_NAME_PRERENDER)
  private String prerender;

  public static final String SERIALIZED_NAME_PROCESSING_SETTINGS = "processing_settings";
  @SerializedName(SERIALIZED_NAME_PROCESSING_SETTINGS)
  private SiteProcessingSettings processingSettings;

  public static final String SERIALIZED_NAME_PUBLISHED_DEPLOY = "published_deploy";
  @SerializedName(SERIALIZED_NAME_PUBLISHED_DEPLOY)
  private Deploy publishedDeploy;

  public static final String SERIALIZED_NAME_SCREENSHOT_URL = "screenshot_url";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT_URL)
  private String screenshotUrl;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_SSL = "ssl";
  @SerializedName(SERIALIZED_NAME_SSL)
  private Boolean ssl;

  public static final String SERIALIZED_NAME_SSL_URL = "ssl_url";
  @SerializedName(SERIALIZED_NAME_SSL_URL)
  private String sslUrl;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Site() {
  }

  public Site accountName(String accountName) {
    this.accountName = accountName;
    return this;
  }

  /**
   * Get accountName
   * @return accountName
   */
  @javax.annotation.Nullable
  public String getAccountName() {
    return accountName;
  }

  public void setAccountName(String accountName) {
    this.accountName = accountName;
  }


  public Site accountSlug(String accountSlug) {
    this.accountSlug = accountSlug;
    return this;
  }

  /**
   * Get accountSlug
   * @return accountSlug
   */
  @javax.annotation.Nullable
  public String getAccountSlug() {
    return accountSlug;
  }

  public void setAccountSlug(String accountSlug) {
    this.accountSlug = accountSlug;
  }


  public Site adminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
    return this;
  }

  /**
   * Get adminUrl
   * @return adminUrl
   */
  @javax.annotation.Nullable
  public String getAdminUrl() {
    return adminUrl;
  }

  public void setAdminUrl(String adminUrl) {
    this.adminUrl = adminUrl;
  }


  public Site buildImage(String buildImage) {
    this.buildImage = buildImage;
    return this;
  }

  /**
   * Get buildImage
   * @return buildImage
   */
  @javax.annotation.Nullable
  public String getBuildImage() {
    return buildImage;
  }

  public void setBuildImage(String buildImage) {
    this.buildImage = buildImage;
  }


  public Site buildSettings(RepoInfo buildSettings) {
    this.buildSettings = buildSettings;
    return this;
  }

  /**
   * Get buildSettings
   * @return buildSettings
   */
  @javax.annotation.Nullable
  public RepoInfo getBuildSettings() {
    return buildSettings;
  }

  public void setBuildSettings(RepoInfo buildSettings) {
    this.buildSettings = buildSettings;
  }


  public Site capabilities(Map<String, Object> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public Site putCapabilitiesItem(String key, Object capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new HashMap<>();
    }
    this.capabilities.put(key, capabilitiesItem);
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(Map<String, Object> capabilities) {
    this.capabilities = capabilities;
  }


  public Site createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Site customDomain(String customDomain) {
    this.customDomain = customDomain;
    return this;
  }

  /**
   * Get customDomain
   * @return customDomain
   */
  @javax.annotation.Nullable
  public String getCustomDomain() {
    return customDomain;
  }

  public void setCustomDomain(String customDomain) {
    this.customDomain = customDomain;
  }


  public Site defaultHooksData(SiteDefaultHooksData defaultHooksData) {
    this.defaultHooksData = defaultHooksData;
    return this;
  }

  /**
   * Get defaultHooksData
   * @return defaultHooksData
   */
  @javax.annotation.Nullable
  public SiteDefaultHooksData getDefaultHooksData() {
    return defaultHooksData;
  }

  public void setDefaultHooksData(SiteDefaultHooksData defaultHooksData) {
    this.defaultHooksData = defaultHooksData;
  }


  public Site deployHook(String deployHook) {
    this.deployHook = deployHook;
    return this;
  }

  /**
   * Get deployHook
   * @return deployHook
   */
  @javax.annotation.Nullable
  public String getDeployHook() {
    return deployHook;
  }

  public void setDeployHook(String deployHook) {
    this.deployHook = deployHook;
  }


  public Site deployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
    return this;
  }

  /**
   * Get deployUrl
   * @return deployUrl
   */
  @javax.annotation.Nullable
  public String getDeployUrl() {
    return deployUrl;
  }

  public void setDeployUrl(String deployUrl) {
    this.deployUrl = deployUrl;
  }


  public Site domainAliases(List<String> domainAliases) {
    this.domainAliases = domainAliases;
    return this;
  }

  public Site addDomainAliasesItem(String domainAliasesItem) {
    if (this.domainAliases == null) {
      this.domainAliases = new ArrayList<>();
    }
    this.domainAliases.add(domainAliasesItem);
    return this;
  }

  /**
   * Get domainAliases
   * @return domainAliases
   */
  @javax.annotation.Nullable
  public List<String> getDomainAliases() {
    return domainAliases;
  }

  public void setDomainAliases(List<String> domainAliases) {
    this.domainAliases = domainAliases;
  }


  public Site forceSsl(Boolean forceSsl) {
    this.forceSsl = forceSsl;
    return this;
  }

  /**
   * Get forceSsl
   * @return forceSsl
   */
  @javax.annotation.Nullable
  public Boolean getForceSsl() {
    return forceSsl;
  }

  public void setForceSsl(Boolean forceSsl) {
    this.forceSsl = forceSsl;
  }


  public Site gitProvider(String gitProvider) {
    this.gitProvider = gitProvider;
    return this;
  }

  /**
   * Get gitProvider
   * @return gitProvider
   */
  @javax.annotation.Nullable
  public String getGitProvider() {
    return gitProvider;
  }

  public void setGitProvider(String gitProvider) {
    this.gitProvider = gitProvider;
  }


  public Site id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Site idDomain(String idDomain) {
    this.idDomain = idDomain;
    return this;
  }

  /**
   * Get idDomain
   * @return idDomain
   */
  @javax.annotation.Nullable
  public String getIdDomain() {
    return idDomain;
  }

  public void setIdDomain(String idDomain) {
    this.idDomain = idDomain;
  }


  public Site managedDns(Boolean managedDns) {
    this.managedDns = managedDns;
    return this;
  }

  /**
   * Get managedDns
   * @return managedDns
   */
  @javax.annotation.Nullable
  public Boolean getManagedDns() {
    return managedDns;
  }

  public void setManagedDns(Boolean managedDns) {
    this.managedDns = managedDns;
  }


  public Site name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Site notificationEmail(String notificationEmail) {
    this.notificationEmail = notificationEmail;
    return this;
  }

  /**
   * Get notificationEmail
   * @return notificationEmail
   */
  @javax.annotation.Nullable
  public String getNotificationEmail() {
    return notificationEmail;
  }

  public void setNotificationEmail(String notificationEmail) {
    this.notificationEmail = notificationEmail;
  }


  public Site password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Site plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public Site prerender(String prerender) {
    this.prerender = prerender;
    return this;
  }

  /**
   * Get prerender
   * @return prerender
   */
  @javax.annotation.Nullable
  public String getPrerender() {
    return prerender;
  }

  public void setPrerender(String prerender) {
    this.prerender = prerender;
  }


  public Site processingSettings(SiteProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
    return this;
  }

  /**
   * Get processingSettings
   * @return processingSettings
   */
  @javax.annotation.Nullable
  public SiteProcessingSettings getProcessingSettings() {
    return processingSettings;
  }

  public void setProcessingSettings(SiteProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
  }


  public Site publishedDeploy(Deploy publishedDeploy) {
    this.publishedDeploy = publishedDeploy;
    return this;
  }

  /**
   * Get publishedDeploy
   * @return publishedDeploy
   */
  @javax.annotation.Nullable
  public Deploy getPublishedDeploy() {
    return publishedDeploy;
  }

  public void setPublishedDeploy(Deploy publishedDeploy) {
    this.publishedDeploy = publishedDeploy;
  }


  public Site screenshotUrl(String screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
    return this;
  }

  /**
   * Get screenshotUrl
   * @return screenshotUrl
   */
  @javax.annotation.Nullable
  public String getScreenshotUrl() {
    return screenshotUrl;
  }

  public void setScreenshotUrl(String screenshotUrl) {
    this.screenshotUrl = screenshotUrl;
  }


  public Site sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public Site ssl(Boolean ssl) {
    this.ssl = ssl;
    return this;
  }

  /**
   * Get ssl
   * @return ssl
   */
  @javax.annotation.Nullable
  public Boolean getSsl() {
    return ssl;
  }

  public void setSsl(Boolean ssl) {
    this.ssl = ssl;
  }


  public Site sslUrl(String sslUrl) {
    this.sslUrl = sslUrl;
    return this;
  }

  /**
   * Get sslUrl
   * @return sslUrl
   */
  @javax.annotation.Nullable
  public String getSslUrl() {
    return sslUrl;
  }

  public void setSslUrl(String sslUrl) {
    this.sslUrl = sslUrl;
  }


  public Site state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Site updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Site url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public Site userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Site site = (Site) o;
    return Objects.equals(this.accountName, site.accountName) &&
        Objects.equals(this.accountSlug, site.accountSlug) &&
        Objects.equals(this.adminUrl, site.adminUrl) &&
        Objects.equals(this.buildImage, site.buildImage) &&
        Objects.equals(this.buildSettings, site.buildSettings) &&
        Objects.equals(this.capabilities, site.capabilities) &&
        Objects.equals(this.createdAt, site.createdAt) &&
        Objects.equals(this.customDomain, site.customDomain) &&
        Objects.equals(this.defaultHooksData, site.defaultHooksData) &&
        Objects.equals(this.deployHook, site.deployHook) &&
        Objects.equals(this.deployUrl, site.deployUrl) &&
        Objects.equals(this.domainAliases, site.domainAliases) &&
        Objects.equals(this.forceSsl, site.forceSsl) &&
        Objects.equals(this.gitProvider, site.gitProvider) &&
        Objects.equals(this.id, site.id) &&
        Objects.equals(this.idDomain, site.idDomain) &&
        Objects.equals(this.managedDns, site.managedDns) &&
        Objects.equals(this.name, site.name) &&
        Objects.equals(this.notificationEmail, site.notificationEmail) &&
        Objects.equals(this.password, site.password) &&
        Objects.equals(this.plan, site.plan) &&
        Objects.equals(this.prerender, site.prerender) &&
        Objects.equals(this.processingSettings, site.processingSettings) &&
        Objects.equals(this.publishedDeploy, site.publishedDeploy) &&
        Objects.equals(this.screenshotUrl, site.screenshotUrl) &&
        Objects.equals(this.sessionId, site.sessionId) &&
        Objects.equals(this.ssl, site.ssl) &&
        Objects.equals(this.sslUrl, site.sslUrl) &&
        Objects.equals(this.state, site.state) &&
        Objects.equals(this.updatedAt, site.updatedAt) &&
        Objects.equals(this.url, site.url) &&
        Objects.equals(this.userId, site.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountName, accountSlug, adminUrl, buildImage, buildSettings, capabilities, createdAt, customDomain, defaultHooksData, deployHook, deployUrl, domainAliases, forceSsl, gitProvider, id, idDomain, managedDns, name, notificationEmail, password, plan, prerender, processingSettings, publishedDeploy, screenshotUrl, sessionId, ssl, sslUrl, state, updatedAt, url, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Site {\n");
    sb.append("    accountName: ").append(toIndentedString(accountName)).append("\n");
    sb.append("    accountSlug: ").append(toIndentedString(accountSlug)).append("\n");
    sb.append("    adminUrl: ").append(toIndentedString(adminUrl)).append("\n");
    sb.append("    buildImage: ").append(toIndentedString(buildImage)).append("\n");
    sb.append("    buildSettings: ").append(toIndentedString(buildSettings)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customDomain: ").append(toIndentedString(customDomain)).append("\n");
    sb.append("    defaultHooksData: ").append(toIndentedString(defaultHooksData)).append("\n");
    sb.append("    deployHook: ").append(toIndentedString(deployHook)).append("\n");
    sb.append("    deployUrl: ").append(toIndentedString(deployUrl)).append("\n");
    sb.append("    domainAliases: ").append(toIndentedString(domainAliases)).append("\n");
    sb.append("    forceSsl: ").append(toIndentedString(forceSsl)).append("\n");
    sb.append("    gitProvider: ").append(toIndentedString(gitProvider)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    idDomain: ").append(toIndentedString(idDomain)).append("\n");
    sb.append("    managedDns: ").append(toIndentedString(managedDns)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notificationEmail: ").append(toIndentedString(notificationEmail)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    prerender: ").append(toIndentedString(prerender)).append("\n");
    sb.append("    processingSettings: ").append(toIndentedString(processingSettings)).append("\n");
    sb.append("    publishedDeploy: ").append(toIndentedString(publishedDeploy)).append("\n");
    sb.append("    screenshotUrl: ").append(toIndentedString(screenshotUrl)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    ssl: ").append(toIndentedString(ssl)).append("\n");
    sb.append("    sslUrl: ").append(toIndentedString(sslUrl)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_name");
    openapiFields.add("account_slug");
    openapiFields.add("admin_url");
    openapiFields.add("build_image");
    openapiFields.add("build_settings");
    openapiFields.add("capabilities");
    openapiFields.add("created_at");
    openapiFields.add("custom_domain");
    openapiFields.add("default_hooks_data");
    openapiFields.add("deploy_hook");
    openapiFields.add("deploy_url");
    openapiFields.add("domain_aliases");
    openapiFields.add("force_ssl");
    openapiFields.add("git_provider");
    openapiFields.add("id");
    openapiFields.add("id_domain");
    openapiFields.add("managed_dns");
    openapiFields.add("name");
    openapiFields.add("notification_email");
    openapiFields.add("password");
    openapiFields.add("plan");
    openapiFields.add("prerender");
    openapiFields.add("processing_settings");
    openapiFields.add("published_deploy");
    openapiFields.add("screenshot_url");
    openapiFields.add("session_id");
    openapiFields.add("ssl");
    openapiFields.add("ssl_url");
    openapiFields.add("state");
    openapiFields.add("updated_at");
    openapiFields.add("url");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Site
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Site.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Site is not found in the empty JSON string", Site.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Site.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Site` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account_name") != null && !jsonObj.get("account_name").isJsonNull()) && !jsonObj.get("account_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_name").toString()));
      }
      if ((jsonObj.get("account_slug") != null && !jsonObj.get("account_slug").isJsonNull()) && !jsonObj.get("account_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_slug").toString()));
      }
      if ((jsonObj.get("admin_url") != null && !jsonObj.get("admin_url").isJsonNull()) && !jsonObj.get("admin_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admin_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admin_url").toString()));
      }
      if ((jsonObj.get("build_image") != null && !jsonObj.get("build_image").isJsonNull()) && !jsonObj.get("build_image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_image").toString()));
      }
      // validate the optional field `build_settings`
      if (jsonObj.get("build_settings") != null && !jsonObj.get("build_settings").isJsonNull()) {
        RepoInfo.validateJsonElement(jsonObj.get("build_settings"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("custom_domain") != null && !jsonObj.get("custom_domain").isJsonNull()) && !jsonObj.get("custom_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_domain").toString()));
      }
      // validate the optional field `default_hooks_data`
      if (jsonObj.get("default_hooks_data") != null && !jsonObj.get("default_hooks_data").isJsonNull()) {
        SiteDefaultHooksData.validateJsonElement(jsonObj.get("default_hooks_data"));
      }
      if ((jsonObj.get("deploy_hook") != null && !jsonObj.get("deploy_hook").isJsonNull()) && !jsonObj.get("deploy_hook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_hook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_hook").toString()));
      }
      if ((jsonObj.get("deploy_url") != null && !jsonObj.get("deploy_url").isJsonNull()) && !jsonObj.get("deploy_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domain_aliases") != null && !jsonObj.get("domain_aliases").isJsonNull() && !jsonObj.get("domain_aliases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_aliases` to be an array in the JSON string but got `%s`", jsonObj.get("domain_aliases").toString()));
      }
      if ((jsonObj.get("git_provider") != null && !jsonObj.get("git_provider").isJsonNull()) && !jsonObj.get("git_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `git_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("git_provider").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("id_domain") != null && !jsonObj.get("id_domain").isJsonNull()) && !jsonObj.get("id_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_domain").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notification_email") != null && !jsonObj.get("notification_email").isJsonNull()) && !jsonObj.get("notification_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_email").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("prerender") != null && !jsonObj.get("prerender").isJsonNull()) && !jsonObj.get("prerender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prerender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prerender").toString()));
      }
      // validate the optional field `processing_settings`
      if (jsonObj.get("processing_settings") != null && !jsonObj.get("processing_settings").isJsonNull()) {
        SiteProcessingSettings.validateJsonElement(jsonObj.get("processing_settings"));
      }
      // validate the optional field `published_deploy`
      if (jsonObj.get("published_deploy") != null && !jsonObj.get("published_deploy").isJsonNull()) {
        Deploy.validateJsonElement(jsonObj.get("published_deploy"));
      }
      if ((jsonObj.get("screenshot_url") != null && !jsonObj.get("screenshot_url").isJsonNull()) && !jsonObj.get("screenshot_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `screenshot_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("screenshot_url").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      if ((jsonObj.get("ssl_url") != null && !jsonObj.get("ssl_url").isJsonNull()) && !jsonObj.get("ssl_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssl_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssl_url").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Site.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Site' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Site> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Site.class));

       return (TypeAdapter<T>) new TypeAdapter<Site>() {
           @Override
           public void write(JsonWriter out, Site value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Site read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Site given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Site
   * @throws IOException if the JSON string is invalid with respect to Site
   */
  public static Site fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Site.class);
  }

  /**
   * Convert an instance of Site to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

