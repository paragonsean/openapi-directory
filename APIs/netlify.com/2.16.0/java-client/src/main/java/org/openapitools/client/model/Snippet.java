/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Snippet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Snippet {
  public static final String SERIALIZED_NAME_GENERAL = "general";
  @SerializedName(SERIALIZED_NAME_GENERAL)
  private String general;

  public static final String SERIALIZED_NAME_GENERAL_POSITION = "general_position";
  @SerializedName(SERIALIZED_NAME_GENERAL_POSITION)
  private String generalPosition;

  public static final String SERIALIZED_NAME_GOAL = "goal";
  @SerializedName(SERIALIZED_NAME_GOAL)
  private String goal;

  public static final String SERIALIZED_NAME_GOAL_POSITION = "goal_position";
  @SerializedName(SERIALIZED_NAME_GOAL_POSITION)
  private String goalPosition;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_SITE_ID = "site_id";
  @SerializedName(SERIALIZED_NAME_SITE_ID)
  private String siteId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public Snippet() {
  }

  public Snippet general(String general) {
    this.general = general;
    return this;
  }

  /**
   * Get general
   * @return general
   */
  @javax.annotation.Nullable
  public String getGeneral() {
    return general;
  }

  public void setGeneral(String general) {
    this.general = general;
  }


  public Snippet generalPosition(String generalPosition) {
    this.generalPosition = generalPosition;
    return this;
  }

  /**
   * Get generalPosition
   * @return generalPosition
   */
  @javax.annotation.Nullable
  public String getGeneralPosition() {
    return generalPosition;
  }

  public void setGeneralPosition(String generalPosition) {
    this.generalPosition = generalPosition;
  }


  public Snippet goal(String goal) {
    this.goal = goal;
    return this;
  }

  /**
   * Get goal
   * @return goal
   */
  @javax.annotation.Nullable
  public String getGoal() {
    return goal;
  }

  public void setGoal(String goal) {
    this.goal = goal;
  }


  public Snippet goalPosition(String goalPosition) {
    this.goalPosition = goalPosition;
    return this;
  }

  /**
   * Get goalPosition
   * @return goalPosition
   */
  @javax.annotation.Nullable
  public String getGoalPosition() {
    return goalPosition;
  }

  public void setGoalPosition(String goalPosition) {
    this.goalPosition = goalPosition;
  }


  public Snippet id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Snippet siteId(String siteId) {
    this.siteId = siteId;
    return this;
  }

  /**
   * Get siteId
   * @return siteId
   */
  @javax.annotation.Nullable
  public String getSiteId() {
    return siteId;
  }

  public void setSiteId(String siteId) {
    this.siteId = siteId;
  }


  public Snippet title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Snippet snippet = (Snippet) o;
    return Objects.equals(this.general, snippet.general) &&
        Objects.equals(this.generalPosition, snippet.generalPosition) &&
        Objects.equals(this.goal, snippet.goal) &&
        Objects.equals(this.goalPosition, snippet.goalPosition) &&
        Objects.equals(this.id, snippet.id) &&
        Objects.equals(this.siteId, snippet.siteId) &&
        Objects.equals(this.title, snippet.title);
  }

  @Override
  public int hashCode() {
    return Objects.hash(general, generalPosition, goal, goalPosition, id, siteId, title);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Snippet {\n");
    sb.append("    general: ").append(toIndentedString(general)).append("\n");
    sb.append("    generalPosition: ").append(toIndentedString(generalPosition)).append("\n");
    sb.append("    goal: ").append(toIndentedString(goal)).append("\n");
    sb.append("    goalPosition: ").append(toIndentedString(goalPosition)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("general");
    openapiFields.add("general_position");
    openapiFields.add("goal");
    openapiFields.add("goal_position");
    openapiFields.add("id");
    openapiFields.add("site_id");
    openapiFields.add("title");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Snippet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Snippet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Snippet is not found in the empty JSON string", Snippet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Snippet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Snippet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("general") != null && !jsonObj.get("general").isJsonNull()) && !jsonObj.get("general").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general").toString()));
      }
      if ((jsonObj.get("general_position") != null && !jsonObj.get("general_position").isJsonNull()) && !jsonObj.get("general_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general_position").toString()));
      }
      if ((jsonObj.get("goal") != null && !jsonObj.get("goal").isJsonNull()) && !jsonObj.get("goal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal").toString()));
      }
      if ((jsonObj.get("goal_position") != null && !jsonObj.get("goal_position").isJsonNull()) && !jsonObj.get("goal_position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goal_position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goal_position").toString()));
      }
      if ((jsonObj.get("site_id") != null && !jsonObj.get("site_id").isJsonNull()) && !jsonObj.get("site_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Snippet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Snippet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Snippet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Snippet.class));

       return (TypeAdapter<T>) new TypeAdapter<Snippet>() {
           @Override
           public void write(JsonWriter out, Snippet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Snippet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Snippet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Snippet
   * @throws IOException if the JSON string is invalid with respect to Snippet
   */
  public static Snippet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Snippet.class);
  }

  /**
   * Convert an instance of Snippet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

