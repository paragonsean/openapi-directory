/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Deploy;
import org.openapitools.client.model.DeployFiles;
import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeployApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeployApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeployApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelSiteDeploy
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancelled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSiteDeployCall(String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploys/{deploy_id}/cancel"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSiteDeployValidateBeforeCall(String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling cancelSiteDeploy(Async)");
        }

        return cancelSiteDeployCall(deployId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancelled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy cancelSiteDeploy(String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = cancelSiteDeployWithHttpInfo(deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancelled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> cancelSiteDeployWithHttpInfo(String deployId) throws ApiException {
        okhttp3.Call localVarCall = cancelSiteDeployValidateBeforeCall(deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Cancelled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSiteDeployAsync(String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSiteDeployValidateBeforeCall(deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSiteDeploy
     * @param siteId  (required)
     * @param deploy  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param title  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteDeployCall(String siteId, DeployFiles deploy, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, String title, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploy;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deployPreviews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploy-previews", deployPreviews));
        }

        if (production != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("production", production));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (latestPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest-published", latestPublished));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSiteDeployValidateBeforeCall(String siteId, DeployFiles deploy, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, String title, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling createSiteDeploy(Async)");
        }

        // verify the required parameter 'deploy' is set
        if (deploy == null) {
            throw new ApiException("Missing the required parameter 'deploy' when calling createSiteDeploy(Async)");
        }

        return createSiteDeployCall(siteId, deploy, deployPreviews, production, state, branch, latestPublished, title, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deploy  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param title  (optional)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy createSiteDeploy(String siteId, DeployFiles deploy, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, String title) throws ApiException {
        ApiResponse<Deploy> localVarResp = createSiteDeployWithHttpInfo(siteId, deploy, deployPreviews, production, state, branch, latestPublished, title);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deploy  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param title  (optional)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> createSiteDeployWithHttpInfo(String siteId, DeployFiles deploy, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, String title) throws ApiException {
        okhttp3.Call localVarCall = createSiteDeployValidateBeforeCall(siteId, deploy, deployPreviews, production, state, branch, latestPublished, title, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param deploy  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param title  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSiteDeployAsync(String siteId, DeployFiles deploy, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, String title, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSiteDeployValidateBeforeCall(siteId, deploy, deployPreviews, production, state, branch, latestPublished, title, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteDeploy
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeployCall(String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploys/{deploy_id}"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDeployValidateBeforeCall(String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling deleteDeploy(Async)");
        }

        return deleteDeployCall(deployId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteDeploy(String deployId) throws ApiException {
        deleteDeployWithHttpInfo(deployId);
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteDeployWithHttpInfo(String deployId) throws ApiException {
        okhttp3.Call localVarCall = deleteDeployValidateBeforeCall(deployId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteDeployAsync(String deployId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDeployValidateBeforeCall(deployId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSiteDeploy
     * @param deployId  (required)
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteDeployCall(String deployId, String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys/{deploy_id}"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()))
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSiteDeployValidateBeforeCall(String deployId, String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling deleteSiteDeploy(Async)");
        }

        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling deleteSiteDeploy(Async)");
        }

        return deleteSiteDeployCall(deployId, siteId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @param siteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSiteDeploy(String deployId, String siteId) throws ApiException {
        deleteSiteDeployWithHttpInfo(deployId, siteId);
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @param siteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSiteDeployWithHttpInfo(String deployId, String siteId) throws ApiException {
        okhttp3.Call localVarCall = deleteSiteDeployValidateBeforeCall(deployId, siteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSiteDeployAsync(String deployId, String siteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSiteDeployValidateBeforeCall(deployId, siteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDeploy
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeployCall(String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploys/{deploy_id}"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeployValidateBeforeCall(String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling getDeploy(Async)");
        }

        return getDeployCall(deployId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy getDeploy(String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = getDeployWithHttpInfo(deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> getDeployWithHttpInfo(String deployId) throws ApiException {
        okhttp3.Call localVarCall = getDeployValidateBeforeCall(deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDeployAsync(String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeployValidateBeforeCall(deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSiteDeploy
     * @param siteId  (required)
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteDeployCall(String siteId, String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys/{deploy_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSiteDeployValidateBeforeCall(String siteId, String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling getSiteDeploy(Async)");
        }

        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling getSiteDeploy(Async)");
        }

        return getSiteDeployCall(siteId, deployId, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy getSiteDeploy(String siteId, String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = getSiteDeployWithHttpInfo(siteId, deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> getSiteDeployWithHttpInfo(String siteId, String deployId) throws ApiException {
        okhttp3.Call localVarCall = getSiteDeployValidateBeforeCall(siteId, deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSiteDeployAsync(String siteId, String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSiteDeployValidateBeforeCall(siteId, deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSiteDeploys
     * @param siteId  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSiteDeploysCall(String siteId, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deployPreviews != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deploy-previews", deployPreviews));
        }

        if (production != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("production", production));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (branch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branch", branch));
        }

        if (latestPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest-published", latestPublished));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSiteDeploysValidateBeforeCall(String siteId, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling listSiteDeploys(Async)");
        }

        return listSiteDeploysCall(siteId, deployPreviews, production, state, branch, latestPublished, page, perPage, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return List&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public List<Deploy> listSiteDeploys(String siteId, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<Deploy>> localVarResp = listSiteDeploysWithHttpInfo(siteId, deployPreviews, production, state, branch, latestPublished, page, perPage);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @return ApiResponse&lt;List&lt;Deploy&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Deploy>> listSiteDeploysWithHttpInfo(String siteId, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listSiteDeploysValidateBeforeCall(siteId, deployPreviews, production, state, branch, latestPublished, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Deploy>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param deployPreviews  (optional)
     * @param production  (optional)
     * @param state  (optional)
     * @param branch  (optional)
     * @param latestPublished  (optional)
     * @param page  (optional)
     * @param perPage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSiteDeploysAsync(String siteId, Boolean deployPreviews, Boolean production, String state, String branch, Boolean latestPublished, Integer page, Integer perPage, final ApiCallback<List<Deploy>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSiteDeploysValidateBeforeCall(siteId, deployPreviews, production, state, branch, latestPublished, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Deploy>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lockDeploy
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockDeployCall(String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploys/{deploy_id}/lock"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lockDeployValidateBeforeCall(String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling lockDeploy(Async)");
        }

        return lockDeployCall(deployId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy lockDeploy(String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = lockDeployWithHttpInfo(deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> lockDeployWithHttpInfo(String deployId) throws ApiException {
        okhttp3.Call localVarCall = lockDeployValidateBeforeCall(deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lockDeployAsync(String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = lockDeployValidateBeforeCall(deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restoreSiteDeploy
     * @param siteId  (required)
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSiteDeployCall(String siteId, String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys/{deploy_id}/restore"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreSiteDeployValidateBeforeCall(String siteId, String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling restoreSiteDeploy(Async)");
        }

        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling restoreSiteDeploy(Async)");
        }

        return restoreSiteDeployCall(siteId, deployId, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy restoreSiteDeploy(String siteId, String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = restoreSiteDeployWithHttpInfo(siteId, deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> restoreSiteDeployWithHttpInfo(String siteId, String deployId) throws ApiException {
        okhttp3.Call localVarCall = restoreSiteDeployValidateBeforeCall(siteId, deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restoreSiteDeployAsync(String siteId, String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreSiteDeployValidateBeforeCall(siteId, deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackSiteDeploy
     * @param siteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSiteDeployCall(String siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/rollback"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackSiteDeployValidateBeforeCall(String siteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling rollbackSiteDeploy(Async)");
        }

        return rollbackSiteDeployCall(siteId, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public void rollbackSiteDeploy(String siteId) throws ApiException {
        rollbackSiteDeployWithHttpInfo(siteId);
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rollbackSiteDeployWithHttpInfo(String siteId) throws ApiException {
        okhttp3.Call localVarCall = rollbackSiteDeployValidateBeforeCall(siteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSiteDeployAsync(String siteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackSiteDeployValidateBeforeCall(siteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlockDeploy
     * @param deployId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockDeployCall(String deployId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deploys/{deploy_id}/unlock"
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlockDeployValidateBeforeCall(String deployId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling unlockDeploy(Async)");
        }

        return unlockDeployCall(deployId, _callback);

    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy unlockDeploy(String deployId) throws ApiException {
        ApiResponse<Deploy> localVarResp = unlockDeployWithHttpInfo(deployId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param deployId  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> unlockDeployWithHttpInfo(String deployId) throws ApiException {
        okhttp3.Call localVarCall = unlockDeployValidateBeforeCall(deployId, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param deployId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlockDeployAsync(String deployId, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlockDeployValidateBeforeCall(deployId, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSiteDeploy
     * @param siteId  (required)
     * @param deployId  (required)
     * @param deploy  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteDeployCall(String siteId, String deployId, DeployFiles deploy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deploy;

        // create path and map variables
        String localVarPath = "/sites/{site_id}/deploys/{deploy_id}"
            .replace("{" + "site_id" + "}", localVarApiClient.escapeString(siteId.toString()))
            .replace("{" + "deploy_id" + "}", localVarApiClient.escapeString(deployId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "netlifyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSiteDeployValidateBeforeCall(String siteId, String deployId, DeployFiles deploy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'siteId' is set
        if (siteId == null) {
            throw new ApiException("Missing the required parameter 'siteId' when calling updateSiteDeploy(Async)");
        }

        // verify the required parameter 'deployId' is set
        if (deployId == null) {
            throw new ApiException("Missing the required parameter 'deployId' when calling updateSiteDeploy(Async)");
        }

        // verify the required parameter 'deploy' is set
        if (deploy == null) {
            throw new ApiException("Missing the required parameter 'deploy' when calling updateSiteDeploy(Async)");
        }

        return updateSiteDeployCall(siteId, deployId, deploy, _callback);

    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @param deploy  (required)
     * @return Deploy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public Deploy updateSiteDeploy(String siteId, String deployId, DeployFiles deploy) throws ApiException {
        ApiResponse<Deploy> localVarResp = updateSiteDeployWithHttpInfo(siteId, deployId, deploy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @param deploy  (required)
     * @return ApiResponse&lt;Deploy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Deploy> updateSiteDeployWithHttpInfo(String siteId, String deployId, DeployFiles deploy) throws ApiException {
        okhttp3.Call localVarCall = updateSiteDeployValidateBeforeCall(siteId, deployId, deploy, null);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param siteId  (required)
     * @param deployId  (required)
     * @param deploy  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSiteDeployAsync(String siteId, String deployId, DeployFiles deploy, final ApiCallback<Deploy> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSiteDeployValidateBeforeCall(siteId, deployId, deploy, _callback);
        Type localVarReturnType = new TypeToken<Deploy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
