/*
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepoInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:28:35.539046-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepoInfo {
  public static final String SERIALIZED_NAME_ALLOWED_BRANCHES = "allowed_branches";
  @SerializedName(SERIALIZED_NAME_ALLOWED_BRANCHES)
  private List<String> allowedBranches = new ArrayList<>();

  public static final String SERIALIZED_NAME_CMD = "cmd";
  @SerializedName(SERIALIZED_NAME_CMD)
  private String cmd;

  public static final String SERIALIZED_NAME_DEPLOY_KEY_ID = "deploy_key_id";
  @SerializedName(SERIALIZED_NAME_DEPLOY_KEY_ID)
  private String deployKeyId;

  public static final String SERIALIZED_NAME_DIR = "dir";
  @SerializedName(SERIALIZED_NAME_DIR)
  private String dir;

  public static final String SERIALIZED_NAME_ENV = "env";
  @SerializedName(SERIALIZED_NAME_ENV)
  private Map<String, String> env = new HashMap<>();

  public static final String SERIALIZED_NAME_FUNCTIONS_DIR = "functions_dir";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS_DIR)
  private String functionsDir;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INSTALLATION_ID = "installation_id";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_ID)
  private Integer installationId;

  public static final String SERIALIZED_NAME_PRIVATE_LOGS = "private_logs";
  @SerializedName(SERIALIZED_NAME_PRIVATE_LOGS)
  private Boolean privateLogs;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_PUBLIC_REPO = "public_repo";
  @SerializedName(SERIALIZED_NAME_PUBLIC_REPO)
  private Boolean publicRepo;

  public static final String SERIALIZED_NAME_REPO_BRANCH = "repo_branch";
  @SerializedName(SERIALIZED_NAME_REPO_BRANCH)
  private String repoBranch;

  public static final String SERIALIZED_NAME_REPO_PATH = "repo_path";
  @SerializedName(SERIALIZED_NAME_REPO_PATH)
  private String repoPath;

  public static final String SERIALIZED_NAME_REPO_URL = "repo_url";
  @SerializedName(SERIALIZED_NAME_REPO_URL)
  private String repoUrl;

  public static final String SERIALIZED_NAME_STOP_BUILDS = "stop_builds";
  @SerializedName(SERIALIZED_NAME_STOP_BUILDS)
  private Boolean stopBuilds;

  public RepoInfo() {
  }

  public RepoInfo allowedBranches(List<String> allowedBranches) {
    this.allowedBranches = allowedBranches;
    return this;
  }

  public RepoInfo addAllowedBranchesItem(String allowedBranchesItem) {
    if (this.allowedBranches == null) {
      this.allowedBranches = new ArrayList<>();
    }
    this.allowedBranches.add(allowedBranchesItem);
    return this;
  }

  /**
   * Get allowedBranches
   * @return allowedBranches
   */
  @javax.annotation.Nullable
  public List<String> getAllowedBranches() {
    return allowedBranches;
  }

  public void setAllowedBranches(List<String> allowedBranches) {
    this.allowedBranches = allowedBranches;
  }


  public RepoInfo cmd(String cmd) {
    this.cmd = cmd;
    return this;
  }

  /**
   * Get cmd
   * @return cmd
   */
  @javax.annotation.Nullable
  public String getCmd() {
    return cmd;
  }

  public void setCmd(String cmd) {
    this.cmd = cmd;
  }


  public RepoInfo deployKeyId(String deployKeyId) {
    this.deployKeyId = deployKeyId;
    return this;
  }

  /**
   * Get deployKeyId
   * @return deployKeyId
   */
  @javax.annotation.Nullable
  public String getDeployKeyId() {
    return deployKeyId;
  }

  public void setDeployKeyId(String deployKeyId) {
    this.deployKeyId = deployKeyId;
  }


  public RepoInfo dir(String dir) {
    this.dir = dir;
    return this;
  }

  /**
   * Get dir
   * @return dir
   */
  @javax.annotation.Nullable
  public String getDir() {
    return dir;
  }

  public void setDir(String dir) {
    this.dir = dir;
  }


  public RepoInfo env(Map<String, String> env) {
    this.env = env;
    return this;
  }

  public RepoInfo putEnvItem(String key, String envItem) {
    if (this.env == null) {
      this.env = new HashMap<>();
    }
    this.env.put(key, envItem);
    return this;
  }

  /**
   * Get env
   * @return env
   */
  @javax.annotation.Nullable
  public Map<String, String> getEnv() {
    return env;
  }

  public void setEnv(Map<String, String> env) {
    this.env = env;
  }


  public RepoInfo functionsDir(String functionsDir) {
    this.functionsDir = functionsDir;
    return this;
  }

  /**
   * Get functionsDir
   * @return functionsDir
   */
  @javax.annotation.Nullable
  public String getFunctionsDir() {
    return functionsDir;
  }

  public void setFunctionsDir(String functionsDir) {
    this.functionsDir = functionsDir;
  }


  public RepoInfo id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RepoInfo installationId(Integer installationId) {
    this.installationId = installationId;
    return this;
  }

  /**
   * Get installationId
   * @return installationId
   */
  @javax.annotation.Nullable
  public Integer getInstallationId() {
    return installationId;
  }

  public void setInstallationId(Integer installationId) {
    this.installationId = installationId;
  }


  public RepoInfo privateLogs(Boolean privateLogs) {
    this.privateLogs = privateLogs;
    return this;
  }

  /**
   * Get privateLogs
   * @return privateLogs
   */
  @javax.annotation.Nullable
  public Boolean getPrivateLogs() {
    return privateLogs;
  }

  public void setPrivateLogs(Boolean privateLogs) {
    this.privateLogs = privateLogs;
  }


  public RepoInfo provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * Get provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public RepoInfo publicRepo(Boolean publicRepo) {
    this.publicRepo = publicRepo;
    return this;
  }

  /**
   * Get publicRepo
   * @return publicRepo
   */
  @javax.annotation.Nullable
  public Boolean getPublicRepo() {
    return publicRepo;
  }

  public void setPublicRepo(Boolean publicRepo) {
    this.publicRepo = publicRepo;
  }


  public RepoInfo repoBranch(String repoBranch) {
    this.repoBranch = repoBranch;
    return this;
  }

  /**
   * Get repoBranch
   * @return repoBranch
   */
  @javax.annotation.Nullable
  public String getRepoBranch() {
    return repoBranch;
  }

  public void setRepoBranch(String repoBranch) {
    this.repoBranch = repoBranch;
  }


  public RepoInfo repoPath(String repoPath) {
    this.repoPath = repoPath;
    return this;
  }

  /**
   * Get repoPath
   * @return repoPath
   */
  @javax.annotation.Nullable
  public String getRepoPath() {
    return repoPath;
  }

  public void setRepoPath(String repoPath) {
    this.repoPath = repoPath;
  }


  public RepoInfo repoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
    return this;
  }

  /**
   * Get repoUrl
   * @return repoUrl
   */
  @javax.annotation.Nullable
  public String getRepoUrl() {
    return repoUrl;
  }

  public void setRepoUrl(String repoUrl) {
    this.repoUrl = repoUrl;
  }


  public RepoInfo stopBuilds(Boolean stopBuilds) {
    this.stopBuilds = stopBuilds;
    return this;
  }

  /**
   * Get stopBuilds
   * @return stopBuilds
   */
  @javax.annotation.Nullable
  public Boolean getStopBuilds() {
    return stopBuilds;
  }

  public void setStopBuilds(Boolean stopBuilds) {
    this.stopBuilds = stopBuilds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepoInfo repoInfo = (RepoInfo) o;
    return Objects.equals(this.allowedBranches, repoInfo.allowedBranches) &&
        Objects.equals(this.cmd, repoInfo.cmd) &&
        Objects.equals(this.deployKeyId, repoInfo.deployKeyId) &&
        Objects.equals(this.dir, repoInfo.dir) &&
        Objects.equals(this.env, repoInfo.env) &&
        Objects.equals(this.functionsDir, repoInfo.functionsDir) &&
        Objects.equals(this.id, repoInfo.id) &&
        Objects.equals(this.installationId, repoInfo.installationId) &&
        Objects.equals(this.privateLogs, repoInfo.privateLogs) &&
        Objects.equals(this.provider, repoInfo.provider) &&
        Objects.equals(this.publicRepo, repoInfo.publicRepo) &&
        Objects.equals(this.repoBranch, repoInfo.repoBranch) &&
        Objects.equals(this.repoPath, repoInfo.repoPath) &&
        Objects.equals(this.repoUrl, repoInfo.repoUrl) &&
        Objects.equals(this.stopBuilds, repoInfo.stopBuilds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedBranches, cmd, deployKeyId, dir, env, functionsDir, id, installationId, privateLogs, provider, publicRepo, repoBranch, repoPath, repoUrl, stopBuilds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepoInfo {\n");
    sb.append("    allowedBranches: ").append(toIndentedString(allowedBranches)).append("\n");
    sb.append("    cmd: ").append(toIndentedString(cmd)).append("\n");
    sb.append("    deployKeyId: ").append(toIndentedString(deployKeyId)).append("\n");
    sb.append("    dir: ").append(toIndentedString(dir)).append("\n");
    sb.append("    env: ").append(toIndentedString(env)).append("\n");
    sb.append("    functionsDir: ").append(toIndentedString(functionsDir)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    installationId: ").append(toIndentedString(installationId)).append("\n");
    sb.append("    privateLogs: ").append(toIndentedString(privateLogs)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    publicRepo: ").append(toIndentedString(publicRepo)).append("\n");
    sb.append("    repoBranch: ").append(toIndentedString(repoBranch)).append("\n");
    sb.append("    repoPath: ").append(toIndentedString(repoPath)).append("\n");
    sb.append("    repoUrl: ").append(toIndentedString(repoUrl)).append("\n");
    sb.append("    stopBuilds: ").append(toIndentedString(stopBuilds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_branches");
    openapiFields.add("cmd");
    openapiFields.add("deploy_key_id");
    openapiFields.add("dir");
    openapiFields.add("env");
    openapiFields.add("functions_dir");
    openapiFields.add("id");
    openapiFields.add("installation_id");
    openapiFields.add("private_logs");
    openapiFields.add("provider");
    openapiFields.add("public_repo");
    openapiFields.add("repo_branch");
    openapiFields.add("repo_path");
    openapiFields.add("repo_url");
    openapiFields.add("stop_builds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepoInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepoInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepoInfo is not found in the empty JSON string", RepoInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepoInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepoInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_branches") != null && !jsonObj.get("allowed_branches").isJsonNull() && !jsonObj.get("allowed_branches").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_branches` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_branches").toString()));
      }
      if ((jsonObj.get("cmd") != null && !jsonObj.get("cmd").isJsonNull()) && !jsonObj.get("cmd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cmd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cmd").toString()));
      }
      if ((jsonObj.get("deploy_key_id") != null && !jsonObj.get("deploy_key_id").isJsonNull()) && !jsonObj.get("deploy_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploy_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploy_key_id").toString()));
      }
      if ((jsonObj.get("dir") != null && !jsonObj.get("dir").isJsonNull()) && !jsonObj.get("dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dir").toString()));
      }
      if ((jsonObj.get("functions_dir") != null && !jsonObj.get("functions_dir").isJsonNull()) && !jsonObj.get("functions_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functions_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functions_dir").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("repo_branch") != null && !jsonObj.get("repo_branch").isJsonNull()) && !jsonObj.get("repo_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_branch").toString()));
      }
      if ((jsonObj.get("repo_path") != null && !jsonObj.get("repo_path").isJsonNull()) && !jsonObj.get("repo_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_path").toString()));
      }
      if ((jsonObj.get("repo_url") != null && !jsonObj.get("repo_url").isJsonNull()) && !jsonObj.get("repo_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repo_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repo_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepoInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepoInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepoInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepoInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<RepoInfo>() {
           @Override
           public void write(JsonWriter out, RepoInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepoInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepoInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepoInfo
   * @throws IOException if the JSON string is invalid with respect to RepoInfo
   */
  public static RepoInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepoInfo.class);
  }

  /**
   * Convert an instance of RepoInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

