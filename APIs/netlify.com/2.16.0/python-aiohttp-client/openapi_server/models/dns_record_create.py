# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DnsRecordCreate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flag: int=None, hostname: str=None, port: int=None, priority: int=None, tag: str=None, ttl: int=None, type: str=None, value: str=None, weight: int=None):
        """DnsRecordCreate - a model defined in OpenAPI

        :param flag: The flag of this DnsRecordCreate.
        :param hostname: The hostname of this DnsRecordCreate.
        :param port: The port of this DnsRecordCreate.
        :param priority: The priority of this DnsRecordCreate.
        :param tag: The tag of this DnsRecordCreate.
        :param ttl: The ttl of this DnsRecordCreate.
        :param type: The type of this DnsRecordCreate.
        :param value: The value of this DnsRecordCreate.
        :param weight: The weight of this DnsRecordCreate.
        """
        self.openapi_types = {
            'flag': int,
            'hostname': str,
            'port': int,
            'priority': int,
            'tag': str,
            'ttl': int,
            'type': str,
            'value': str,
            'weight': int
        }

        self.attribute_map = {
            'flag': 'flag',
            'hostname': 'hostname',
            'port': 'port',
            'priority': 'priority',
            'tag': 'tag',
            'ttl': 'ttl',
            'type': 'type',
            'value': 'value',
            'weight': 'weight'
        }

        self._flag = flag
        self._hostname = hostname
        self._port = port
        self._priority = priority
        self._tag = tag
        self._ttl = ttl
        self._type = type
        self._value = value
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DnsRecordCreate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dnsRecordCreate of this DnsRecordCreate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flag(self):
        """Gets the flag of this DnsRecordCreate.


        :return: The flag of this DnsRecordCreate.
        :rtype: int
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this DnsRecordCreate.


        :param flag: The flag of this DnsRecordCreate.
        :type flag: int
        """

        self._flag = flag

    @property
    def hostname(self):
        """Gets the hostname of this DnsRecordCreate.


        :return: The hostname of this DnsRecordCreate.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DnsRecordCreate.


        :param hostname: The hostname of this DnsRecordCreate.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def port(self):
        """Gets the port of this DnsRecordCreate.


        :return: The port of this DnsRecordCreate.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DnsRecordCreate.


        :param port: The port of this DnsRecordCreate.
        :type port: int
        """

        self._port = port

    @property
    def priority(self):
        """Gets the priority of this DnsRecordCreate.


        :return: The priority of this DnsRecordCreate.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DnsRecordCreate.


        :param priority: The priority of this DnsRecordCreate.
        :type priority: int
        """

        self._priority = priority

    @property
    def tag(self):
        """Gets the tag of this DnsRecordCreate.


        :return: The tag of this DnsRecordCreate.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this DnsRecordCreate.


        :param tag: The tag of this DnsRecordCreate.
        :type tag: str
        """

        self._tag = tag

    @property
    def ttl(self):
        """Gets the ttl of this DnsRecordCreate.


        :return: The ttl of this DnsRecordCreate.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DnsRecordCreate.


        :param ttl: The ttl of this DnsRecordCreate.
        :type ttl: int
        """

        self._ttl = ttl

    @property
    def type(self):
        """Gets the type of this DnsRecordCreate.


        :return: The type of this DnsRecordCreate.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DnsRecordCreate.


        :param type: The type of this DnsRecordCreate.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this DnsRecordCreate.


        :return: The value of this DnsRecordCreate.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DnsRecordCreate.


        :param value: The value of this DnsRecordCreate.
        :type value: str
        """

        self._value = value

    @property
    def weight(self):
        """Gets the weight of this DnsRecordCreate.


        :return: The weight of this DnsRecordCreate.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this DnsRecordCreate.


        :param weight: The weight of this DnsRecordCreate.
        :type weight: int
        """

        self._weight = weight
