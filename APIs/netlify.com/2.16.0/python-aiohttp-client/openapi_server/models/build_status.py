# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.build_status_minutes import BuildStatusMinutes
from openapi_server import util


class BuildStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active: int=None, build_count: int=None, enqueued: int=None, minutes: BuildStatusMinutes=None, pending_concurrency: int=None):
        """BuildStatus - a model defined in OpenAPI

        :param active: The active of this BuildStatus.
        :param build_count: The build_count of this BuildStatus.
        :param enqueued: The enqueued of this BuildStatus.
        :param minutes: The minutes of this BuildStatus.
        :param pending_concurrency: The pending_concurrency of this BuildStatus.
        """
        self.openapi_types = {
            'active': int,
            'build_count': int,
            'enqueued': int,
            'minutes': BuildStatusMinutes,
            'pending_concurrency': int
        }

        self.attribute_map = {
            'active': 'active',
            'build_count': 'build_count',
            'enqueued': 'enqueued',
            'minutes': 'minutes',
            'pending_concurrency': 'pending_concurrency'
        }

        self._active = active
        self._build_count = build_count
        self._enqueued = enqueued
        self._minutes = minutes
        self._pending_concurrency = pending_concurrency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BuildStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The buildStatus of this BuildStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self):
        """Gets the active of this BuildStatus.


        :return: The active of this BuildStatus.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this BuildStatus.


        :param active: The active of this BuildStatus.
        :type active: int
        """

        self._active = active

    @property
    def build_count(self):
        """Gets the build_count of this BuildStatus.


        :return: The build_count of this BuildStatus.
        :rtype: int
        """
        return self._build_count

    @build_count.setter
    def build_count(self, build_count):
        """Sets the build_count of this BuildStatus.


        :param build_count: The build_count of this BuildStatus.
        :type build_count: int
        """

        self._build_count = build_count

    @property
    def enqueued(self):
        """Gets the enqueued of this BuildStatus.


        :return: The enqueued of this BuildStatus.
        :rtype: int
        """
        return self._enqueued

    @enqueued.setter
    def enqueued(self, enqueued):
        """Sets the enqueued of this BuildStatus.


        :param enqueued: The enqueued of this BuildStatus.
        :type enqueued: int
        """

        self._enqueued = enqueued

    @property
    def minutes(self):
        """Gets the minutes of this BuildStatus.


        :return: The minutes of this BuildStatus.
        :rtype: BuildStatusMinutes
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this BuildStatus.


        :param minutes: The minutes of this BuildStatus.
        :type minutes: BuildStatusMinutes
        """

        self._minutes = minutes

    @property
    def pending_concurrency(self):
        """Gets the pending_concurrency of this BuildStatus.


        :return: The pending_concurrency of this BuildStatus.
        :rtype: int
        """
        return self._pending_concurrency

    @pending_concurrency.setter
    def pending_concurrency(self, pending_concurrency):
        """Sets the pending_concurrency of this BuildStatus.


        :param pending_concurrency: The pending_concurrency of this BuildStatus.
        :type pending_concurrency: int
        """

        self._pending_concurrency = pending_concurrency
