# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HookType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, fields: List[object]=None, name: str=None):
        """HookType - a model defined in OpenAPI

        :param events: The events of this HookType.
        :param fields: The fields of this HookType.
        :param name: The name of this HookType.
        """
        self.openapi_types = {
            'events': List[str],
            'fields': List[object],
            'name': str
        }

        self.attribute_map = {
            'events': 'events',
            'fields': 'fields',
            'name': 'name'
        }

        self._events = events
        self._fields = fields
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HookType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The hookType of this HookType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this HookType.


        :return: The events of this HookType.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this HookType.


        :param events: The events of this HookType.
        :type events: List[str]
        """

        self._events = events

    @property
    def fields(self):
        """Gets the fields of this HookType.


        :return: The fields of this HookType.
        :rtype: List[object]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this HookType.


        :param fields: The fields of this HookType.
        :type fields: List[object]
        """

        self._fields = fields

    @property
    def name(self):
        """Gets the name of this HookType.


        :return: The name of this HookType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HookType.


        :param name: The name of this HookType.
        :type name: str
        """

        self._name = name
