# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepoInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_branches: List[str]=None, cmd: str=None, deploy_key_id: str=None, dir: str=None, env: Dict[str, str]=None, functions_dir: str=None, id: int=None, installation_id: int=None, private_logs: bool=None, provider: str=None, public_repo: bool=None, repo_branch: str=None, repo_path: str=None, repo_url: str=None, stop_builds: bool=None):
        """RepoInfo - a model defined in OpenAPI

        :param allowed_branches: The allowed_branches of this RepoInfo.
        :param cmd: The cmd of this RepoInfo.
        :param deploy_key_id: The deploy_key_id of this RepoInfo.
        :param dir: The dir of this RepoInfo.
        :param env: The env of this RepoInfo.
        :param functions_dir: The functions_dir of this RepoInfo.
        :param id: The id of this RepoInfo.
        :param installation_id: The installation_id of this RepoInfo.
        :param private_logs: The private_logs of this RepoInfo.
        :param provider: The provider of this RepoInfo.
        :param public_repo: The public_repo of this RepoInfo.
        :param repo_branch: The repo_branch of this RepoInfo.
        :param repo_path: The repo_path of this RepoInfo.
        :param repo_url: The repo_url of this RepoInfo.
        :param stop_builds: The stop_builds of this RepoInfo.
        """
        self.openapi_types = {
            'allowed_branches': List[str],
            'cmd': str,
            'deploy_key_id': str,
            'dir': str,
            'env': Dict[str, str],
            'functions_dir': str,
            'id': int,
            'installation_id': int,
            'private_logs': bool,
            'provider': str,
            'public_repo': bool,
            'repo_branch': str,
            'repo_path': str,
            'repo_url': str,
            'stop_builds': bool
        }

        self.attribute_map = {
            'allowed_branches': 'allowed_branches',
            'cmd': 'cmd',
            'deploy_key_id': 'deploy_key_id',
            'dir': 'dir',
            'env': 'env',
            'functions_dir': 'functions_dir',
            'id': 'id',
            'installation_id': 'installation_id',
            'private_logs': 'private_logs',
            'provider': 'provider',
            'public_repo': 'public_repo',
            'repo_branch': 'repo_branch',
            'repo_path': 'repo_path',
            'repo_url': 'repo_url',
            'stop_builds': 'stop_builds'
        }

        self._allowed_branches = allowed_branches
        self._cmd = cmd
        self._deploy_key_id = deploy_key_id
        self._dir = dir
        self._env = env
        self._functions_dir = functions_dir
        self._id = id
        self._installation_id = installation_id
        self._private_logs = private_logs
        self._provider = provider
        self._public_repo = public_repo
        self._repo_branch = repo_branch
        self._repo_path = repo_path
        self._repo_url = repo_url
        self._stop_builds = stop_builds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepoInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The repoInfo of this RepoInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_branches(self):
        """Gets the allowed_branches of this RepoInfo.


        :return: The allowed_branches of this RepoInfo.
        :rtype: List[str]
        """
        return self._allowed_branches

    @allowed_branches.setter
    def allowed_branches(self, allowed_branches):
        """Sets the allowed_branches of this RepoInfo.


        :param allowed_branches: The allowed_branches of this RepoInfo.
        :type allowed_branches: List[str]
        """

        self._allowed_branches = allowed_branches

    @property
    def cmd(self):
        """Gets the cmd of this RepoInfo.


        :return: The cmd of this RepoInfo.
        :rtype: str
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd):
        """Sets the cmd of this RepoInfo.


        :param cmd: The cmd of this RepoInfo.
        :type cmd: str
        """

        self._cmd = cmd

    @property
    def deploy_key_id(self):
        """Gets the deploy_key_id of this RepoInfo.


        :return: The deploy_key_id of this RepoInfo.
        :rtype: str
        """
        return self._deploy_key_id

    @deploy_key_id.setter
    def deploy_key_id(self, deploy_key_id):
        """Sets the deploy_key_id of this RepoInfo.


        :param deploy_key_id: The deploy_key_id of this RepoInfo.
        :type deploy_key_id: str
        """

        self._deploy_key_id = deploy_key_id

    @property
    def dir(self):
        """Gets the dir of this RepoInfo.


        :return: The dir of this RepoInfo.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this RepoInfo.


        :param dir: The dir of this RepoInfo.
        :type dir: str
        """

        self._dir = dir

    @property
    def env(self):
        """Gets the env of this RepoInfo.


        :return: The env of this RepoInfo.
        :rtype: Dict[str, str]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this RepoInfo.


        :param env: The env of this RepoInfo.
        :type env: Dict[str, str]
        """

        self._env = env

    @property
    def functions_dir(self):
        """Gets the functions_dir of this RepoInfo.


        :return: The functions_dir of this RepoInfo.
        :rtype: str
        """
        return self._functions_dir

    @functions_dir.setter
    def functions_dir(self, functions_dir):
        """Sets the functions_dir of this RepoInfo.


        :param functions_dir: The functions_dir of this RepoInfo.
        :type functions_dir: str
        """

        self._functions_dir = functions_dir

    @property
    def id(self):
        """Gets the id of this RepoInfo.


        :return: The id of this RepoInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepoInfo.


        :param id: The id of this RepoInfo.
        :type id: int
        """

        self._id = id

    @property
    def installation_id(self):
        """Gets the installation_id of this RepoInfo.


        :return: The installation_id of this RepoInfo.
        :rtype: int
        """
        return self._installation_id

    @installation_id.setter
    def installation_id(self, installation_id):
        """Sets the installation_id of this RepoInfo.


        :param installation_id: The installation_id of this RepoInfo.
        :type installation_id: int
        """

        self._installation_id = installation_id

    @property
    def private_logs(self):
        """Gets the private_logs of this RepoInfo.


        :return: The private_logs of this RepoInfo.
        :rtype: bool
        """
        return self._private_logs

    @private_logs.setter
    def private_logs(self, private_logs):
        """Sets the private_logs of this RepoInfo.


        :param private_logs: The private_logs of this RepoInfo.
        :type private_logs: bool
        """

        self._private_logs = private_logs

    @property
    def provider(self):
        """Gets the provider of this RepoInfo.


        :return: The provider of this RepoInfo.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RepoInfo.


        :param provider: The provider of this RepoInfo.
        :type provider: str
        """

        self._provider = provider

    @property
    def public_repo(self):
        """Gets the public_repo of this RepoInfo.


        :return: The public_repo of this RepoInfo.
        :rtype: bool
        """
        return self._public_repo

    @public_repo.setter
    def public_repo(self, public_repo):
        """Sets the public_repo of this RepoInfo.


        :param public_repo: The public_repo of this RepoInfo.
        :type public_repo: bool
        """

        self._public_repo = public_repo

    @property
    def repo_branch(self):
        """Gets the repo_branch of this RepoInfo.


        :return: The repo_branch of this RepoInfo.
        :rtype: str
        """
        return self._repo_branch

    @repo_branch.setter
    def repo_branch(self, repo_branch):
        """Sets the repo_branch of this RepoInfo.


        :param repo_branch: The repo_branch of this RepoInfo.
        :type repo_branch: str
        """

        self._repo_branch = repo_branch

    @property
    def repo_path(self):
        """Gets the repo_path of this RepoInfo.


        :return: The repo_path of this RepoInfo.
        :rtype: str
        """
        return self._repo_path

    @repo_path.setter
    def repo_path(self, repo_path):
        """Sets the repo_path of this RepoInfo.


        :param repo_path: The repo_path of this RepoInfo.
        :type repo_path: str
        """

        self._repo_path = repo_path

    @property
    def repo_url(self):
        """Gets the repo_url of this RepoInfo.


        :return: The repo_url of this RepoInfo.
        :rtype: str
        """
        return self._repo_url

    @repo_url.setter
    def repo_url(self, repo_url):
        """Sets the repo_url of this RepoInfo.


        :param repo_url: The repo_url of this RepoInfo.
        :type repo_url: str
        """

        self._repo_url = repo_url

    @property
    def stop_builds(self):
        """Gets the stop_builds of this RepoInfo.


        :return: The stop_builds of this RepoInfo.
        :rtype: bool
        """
        return self._stop_builds

    @stop_builds.setter
    def stop_builds(self, stop_builds):
        """Sets the stop_builds of this RepoInfo.


        :param stop_builds: The stop_builds of this RepoInfo.
        :type stop_builds: bool
        """

        self._stop_builds = stop_builds
