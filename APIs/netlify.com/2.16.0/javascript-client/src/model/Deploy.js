/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeploySiteCapabilities from './DeploySiteCapabilities';
import FunctionSchedule from './FunctionSchedule';

/**
 * The Deploy model module.
 * @module model/Deploy
 * @version 2.16.0
 */
class Deploy {
    /**
     * Constructs a new <code>Deploy</code>.
     * @alias module:model/Deploy
     */
    constructor() { 
        
        Deploy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Deploy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Deploy} obj Optional instance to populate.
     * @return {module:model/Deploy} The populated <code>Deploy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Deploy();

            if (data.hasOwnProperty('admin_url')) {
                obj['admin_url'] = ApiClient.convertToType(data['admin_url'], 'String');
            }
            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('build_id')) {
                obj['build_id'] = ApiClient.convertToType(data['build_id'], 'String');
            }
            if (data.hasOwnProperty('commit_ref')) {
                obj['commit_ref'] = ApiClient.convertToType(data['commit_ref'], 'String');
            }
            if (data.hasOwnProperty('commit_url')) {
                obj['commit_url'] = ApiClient.convertToType(data['commit_url'], 'String');
            }
            if (data.hasOwnProperty('context')) {
                obj['context'] = ApiClient.convertToType(data['context'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('deploy_ssl_url')) {
                obj['deploy_ssl_url'] = ApiClient.convertToType(data['deploy_ssl_url'], 'String');
            }
            if (data.hasOwnProperty('deploy_url')) {
                obj['deploy_url'] = ApiClient.convertToType(data['deploy_url'], 'String');
            }
            if (data.hasOwnProperty('draft')) {
                obj['draft'] = ApiClient.convertToType(data['draft'], 'Boolean');
            }
            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('framework')) {
                obj['framework'] = ApiClient.convertToType(data['framework'], 'String');
            }
            if (data.hasOwnProperty('function_schedules')) {
                obj['function_schedules'] = ApiClient.convertToType(data['function_schedules'], [FunctionSchedule]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('published_at')) {
                obj['published_at'] = ApiClient.convertToType(data['published_at'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], ['String']);
            }
            if (data.hasOwnProperty('required_functions')) {
                obj['required_functions'] = ApiClient.convertToType(data['required_functions'], ['String']);
            }
            if (data.hasOwnProperty('review_id')) {
                obj['review_id'] = ApiClient.convertToType(data['review_id'], 'Number');
            }
            if (data.hasOwnProperty('review_url')) {
                obj['review_url'] = ApiClient.convertToType(data['review_url'], 'String');
            }
            if (data.hasOwnProperty('screenshot_url')) {
                obj['screenshot_url'] = ApiClient.convertToType(data['screenshot_url'], 'String');
            }
            if (data.hasOwnProperty('site_capabilities')) {
                obj['site_capabilities'] = DeploySiteCapabilities.constructFromObject(data['site_capabilities']);
            }
            if (data.hasOwnProperty('site_id')) {
                obj['site_id'] = ApiClient.convertToType(data['site_id'], 'String');
            }
            if (data.hasOwnProperty('skipped')) {
                obj['skipped'] = ApiClient.convertToType(data['skipped'], 'Boolean');
            }
            if (data.hasOwnProperty('ssl_url')) {
                obj['ssl_url'] = ApiClient.convertToType(data['ssl_url'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Deploy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Deploy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['admin_url'] && !(typeof data['admin_url'] === 'string' || data['admin_url'] instanceof String)) {
            throw new Error("Expected the field `admin_url` to be a primitive type in the JSON string but got " + data['admin_url']);
        }
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['build_id'] && !(typeof data['build_id'] === 'string' || data['build_id'] instanceof String)) {
            throw new Error("Expected the field `build_id` to be a primitive type in the JSON string but got " + data['build_id']);
        }
        // ensure the json data is a string
        if (data['commit_ref'] && !(typeof data['commit_ref'] === 'string' || data['commit_ref'] instanceof String)) {
            throw new Error("Expected the field `commit_ref` to be a primitive type in the JSON string but got " + data['commit_ref']);
        }
        // ensure the json data is a string
        if (data['commit_url'] && !(typeof data['commit_url'] === 'string' || data['commit_url'] instanceof String)) {
            throw new Error("Expected the field `commit_url` to be a primitive type in the JSON string but got " + data['commit_url']);
        }
        // ensure the json data is a string
        if (data['context'] && !(typeof data['context'] === 'string' || data['context'] instanceof String)) {
            throw new Error("Expected the field `context` to be a primitive type in the JSON string but got " + data['context']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['deploy_ssl_url'] && !(typeof data['deploy_ssl_url'] === 'string' || data['deploy_ssl_url'] instanceof String)) {
            throw new Error("Expected the field `deploy_ssl_url` to be a primitive type in the JSON string but got " + data['deploy_ssl_url']);
        }
        // ensure the json data is a string
        if (data['deploy_url'] && !(typeof data['deploy_url'] === 'string' || data['deploy_url'] instanceof String)) {
            throw new Error("Expected the field `deploy_url` to be a primitive type in the JSON string but got " + data['deploy_url']);
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['framework'] && !(typeof data['framework'] === 'string' || data['framework'] instanceof String)) {
            throw new Error("Expected the field `framework` to be a primitive type in the JSON string but got " + data['framework']);
        }
        if (data['function_schedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['function_schedules'])) {
                throw new Error("Expected the field `function_schedules` to be an array in the JSON data but got " + data['function_schedules']);
            }
            // validate the optional field `function_schedules` (array)
            for (const item of data['function_schedules']) {
                FunctionSchedule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['published_at'] && !(typeof data['published_at'] === 'string' || data['published_at'] instanceof String)) {
            throw new Error("Expected the field `published_at` to be a primitive type in the JSON string but got " + data['published_at']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required'])) {
            throw new Error("Expected the field `required` to be an array in the JSON data but got " + data['required']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['required_functions'])) {
            throw new Error("Expected the field `required_functions` to be an array in the JSON data but got " + data['required_functions']);
        }
        // ensure the json data is a string
        if (data['review_url'] && !(typeof data['review_url'] === 'string' || data['review_url'] instanceof String)) {
            throw new Error("Expected the field `review_url` to be a primitive type in the JSON string but got " + data['review_url']);
        }
        // ensure the json data is a string
        if (data['screenshot_url'] && !(typeof data['screenshot_url'] === 'string' || data['screenshot_url'] instanceof String)) {
            throw new Error("Expected the field `screenshot_url` to be a primitive type in the JSON string but got " + data['screenshot_url']);
        }
        // validate the optional field `site_capabilities`
        if (data['site_capabilities']) { // data not null
          DeploySiteCapabilities.validateJSON(data['site_capabilities']);
        }
        // ensure the json data is a string
        if (data['site_id'] && !(typeof data['site_id'] === 'string' || data['site_id'] instanceof String)) {
            throw new Error("Expected the field `site_id` to be a primitive type in the JSON string but got " + data['site_id']);
        }
        // ensure the json data is a string
        if (data['ssl_url'] && !(typeof data['ssl_url'] === 'string' || data['ssl_url'] instanceof String)) {
            throw new Error("Expected the field `ssl_url` to be a primitive type in the JSON string but got " + data['ssl_url']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * @member {String} admin_url
 */
Deploy.prototype['admin_url'] = undefined;

/**
 * @member {String} branch
 */
Deploy.prototype['branch'] = undefined;

/**
 * @member {String} build_id
 */
Deploy.prototype['build_id'] = undefined;

/**
 * @member {String} commit_ref
 */
Deploy.prototype['commit_ref'] = undefined;

/**
 * @member {String} commit_url
 */
Deploy.prototype['commit_url'] = undefined;

/**
 * @member {String} context
 */
Deploy.prototype['context'] = undefined;

/**
 * @member {String} created_at
 */
Deploy.prototype['created_at'] = undefined;

/**
 * @member {String} deploy_ssl_url
 */
Deploy.prototype['deploy_ssl_url'] = undefined;

/**
 * @member {String} deploy_url
 */
Deploy.prototype['deploy_url'] = undefined;

/**
 * @member {Boolean} draft
 */
Deploy.prototype['draft'] = undefined;

/**
 * @member {String} error_message
 */
Deploy.prototype['error_message'] = undefined;

/**
 * @member {String} framework
 */
Deploy.prototype['framework'] = undefined;

/**
 * @member {Array.<module:model/FunctionSchedule>} function_schedules
 */
Deploy.prototype['function_schedules'] = undefined;

/**
 * @member {String} id
 */
Deploy.prototype['id'] = undefined;

/**
 * @member {Boolean} locked
 */
Deploy.prototype['locked'] = undefined;

/**
 * @member {String} name
 */
Deploy.prototype['name'] = undefined;

/**
 * @member {String} published_at
 */
Deploy.prototype['published_at'] = undefined;

/**
 * @member {Array.<String>} required
 */
Deploy.prototype['required'] = undefined;

/**
 * @member {Array.<String>} required_functions
 */
Deploy.prototype['required_functions'] = undefined;

/**
 * @member {Number} review_id
 */
Deploy.prototype['review_id'] = undefined;

/**
 * @member {String} review_url
 */
Deploy.prototype['review_url'] = undefined;

/**
 * @member {String} screenshot_url
 */
Deploy.prototype['screenshot_url'] = undefined;

/**
 * @member {module:model/DeploySiteCapabilities} site_capabilities
 */
Deploy.prototype['site_capabilities'] = undefined;

/**
 * @member {String} site_id
 */
Deploy.prototype['site_id'] = undefined;

/**
 * @member {Boolean} skipped
 */
Deploy.prototype['skipped'] = undefined;

/**
 * @member {String} ssl_url
 */
Deploy.prototype['ssl_url'] = undefined;

/**
 * @member {String} state
 */
Deploy.prototype['state'] = undefined;

/**
 * @member {String} title
 */
Deploy.prototype['title'] = undefined;

/**
 * @member {String} updated_at
 */
Deploy.prototype['updated_at'] = undefined;

/**
 * @member {String} url
 */
Deploy.prototype['url'] = undefined;

/**
 * @member {String} user_id
 */
Deploy.prototype['user_id'] = undefined;






export default Deploy;

