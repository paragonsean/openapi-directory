/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deploy from '../model/Deploy';
import DeployFiles from '../model/DeployFiles';
import Error from '../model/Error';

/**
* Deploy service.
* @module api/DeployApi
* @version 2.16.0
*/
export default class DeployApi {

    /**
    * Constructs a new DeployApi. 
    * @alias module:api/DeployApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelSiteDeploy operation.
     * @callback module:api/DeployApi~cancelSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DeployApi~cancelSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    cancelSiteDeploy(deployId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling cancelSiteDeploy");
      }

      let pathParams = {
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/deploys/{deploy_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteDeploy operation.
     * @callback module:api/DeployApi~createSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:model/DeployFiles} deploy 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deployPreviews] 
     * @param {Boolean} [production] 
     * @param {module:model/String} [state] 
     * @param {String} [branch] 
     * @param {Boolean} [latestPublished] 
     * @param {String} [title] 
     * @param {module:api/DeployApi~createSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    createSiteDeploy(siteId, deploy, opts, callback) {
      opts = opts || {};
      let postBody = deploy;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling createSiteDeploy");
      }
      // verify the required parameter 'deploy' is set
      if (deploy === undefined || deploy === null) {
        throw new Error("Missing the required parameter 'deploy' when calling createSiteDeploy");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'deploy-previews': opts['deployPreviews'],
        'production': opts['production'],
        'state': opts['state'],
        'branch': opts['branch'],
        'latest-published': opts['latestPublished'],
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeploy operation.
     * @callback module:api/DeployApi~deleteDeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DeployApi~deleteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeploy(deployId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling deleteDeploy");
      }

      let pathParams = {
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/deploys/{deploy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSiteDeploy operation.
     * @callback module:api/DeployApi~deleteSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {String} siteId 
     * @param {module:api/DeployApi~deleteSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSiteDeploy(deployId, siteId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling deleteSiteDeploy");
      }
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSiteDeploy");
      }

      let pathParams = {
        'deploy_id': deployId,
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploy operation.
     * @callback module:api/DeployApi~getDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DeployApi~getDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    getDeploy(deployId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling getDeploy");
      }

      let pathParams = {
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/deploys/{deploy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSiteDeploy operation.
     * @callback module:api/DeployApi~getSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:api/DeployApi~getSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    getSiteDeploy(siteId, deployId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSiteDeploy");
      }
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling getSiteDeploy");
      }

      let pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSiteDeploys operation.
     * @callback module:api/DeployApi~listSiteDeploysCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Deploy>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deployPreviews] 
     * @param {Boolean} [production] 
     * @param {module:model/String} [state] 
     * @param {String} [branch] 
     * @param {Boolean} [latestPublished] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/DeployApi~listSiteDeploysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Deploy>}
     */
    listSiteDeploys(siteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling listSiteDeploys");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
        'deploy-previews': opts['deployPreviews'],
        'production': opts['production'],
        'state': opts['state'],
        'branch': opts['branch'],
        'latest-published': opts['latestPublished'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Deploy];
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lockDeploy operation.
     * @callback module:api/DeployApi~lockDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DeployApi~lockDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    lockDeploy(deployId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling lockDeploy");
      }

      let pathParams = {
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/deploys/{deploy_id}/lock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreSiteDeploy operation.
     * @callback module:api/DeployApi~restoreSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:api/DeployApi~restoreSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    restoreSiteDeploy(siteId, deployId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling restoreSiteDeploy");
      }
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling restoreSiteDeploy");
      }

      let pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rollbackSiteDeploy operation.
     * @callback module:api/DeployApi~rollbackSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DeployApi~rollbackSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rollbackSiteDeploy(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling rollbackSiteDeploy");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}/rollback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlockDeploy operation.
     * @callback module:api/DeployApi~unlockDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} deployId 
     * @param {module:api/DeployApi~unlockDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    unlockDeploy(deployId, callback) {
      let postBody = null;
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling unlockDeploy");
      }

      let pathParams = {
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/deploys/{deploy_id}/unlock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSiteDeploy operation.
     * @callback module:api/DeployApi~updateSiteDeployCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deploy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {String} deployId 
     * @param {module:model/DeployFiles} deploy 
     * @param {module:api/DeployApi~updateSiteDeployCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deploy}
     */
    updateSiteDeploy(siteId, deployId, deploy, callback) {
      let postBody = deploy;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSiteDeploy");
      }
      // verify the required parameter 'deployId' is set
      if (deployId === undefined || deployId === null) {
        throw new Error("Missing the required parameter 'deployId' when calling updateSiteDeploy");
      }
      // verify the required parameter 'deploy' is set
      if (deploy === undefined || deploy === null) {
        throw new Error("Missing the required parameter 'deploy' when calling updateSiteDeploy");
      }

      let pathParams = {
        'site_id': siteId,
        'deploy_id': deployId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Deploy;
      return this.apiClient.callApi(
        '/sites/{site_id}/deploys/{deploy_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
