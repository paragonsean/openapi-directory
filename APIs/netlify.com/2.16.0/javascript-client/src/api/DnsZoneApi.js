/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DnsRecord from '../model/DnsRecord';
import DnsRecordCreate from '../model/DnsRecordCreate';
import DnsZone from '../model/DnsZone';
import DnsZoneSetup from '../model/DnsZoneSetup';
import Error from '../model/Error';

/**
* DnsZone service.
* @module api/DnsZoneApi
* @version 2.16.0
*/
export default class DnsZoneApi {

    /**
    * Constructs a new DnsZoneApi. 
    * @alias module:api/DnsZoneApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configureDNSForSite operation.
     * @callback module:api/DnsZoneApi~configureDNSForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DnsZoneApi~configureDNSForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsZone>}
     */
    configureDNSForSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling configureDNSForSite");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DnsZone];
      return this.apiClient.callApi(
        '/sites/{site_id}/dns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDnsRecord operation.
     * @callback module:api/DnsZoneApi~createDnsRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {module:model/DnsRecordCreate} dnsRecord 
     * @param {module:api/DnsZoneApi~createDnsRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsRecord}
     */
    createDnsRecord(zoneId, dnsRecord, callback) {
      let postBody = dnsRecord;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling createDnsRecord");
      }
      // verify the required parameter 'dnsRecord' is set
      if (dnsRecord === undefined || dnsRecord === null) {
        throw new Error("Missing the required parameter 'dnsRecord' when calling createDnsRecord");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DnsRecord;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}/dns_records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDnsZone operation.
     * @callback module:api/DnsZoneApi~createDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DnsZoneSetup} dnsZoneParams 
     * @param {module:api/DnsZoneApi~createDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsZone}
     */
    createDnsZone(dnsZoneParams, callback) {
      let postBody = dnsZoneParams;
      // verify the required parameter 'dnsZoneParams' is set
      if (dnsZoneParams === undefined || dnsZoneParams === null) {
        throw new Error("Missing the required parameter 'dnsZoneParams' when calling createDnsZone");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DnsZone;
      return this.apiClient.callApi(
        '/dns_zones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDnsRecord operation.
     * @callback module:api/DnsZoneApi~deleteDnsRecordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {String} dnsRecordId 
     * @param {module:api/DnsZoneApi~deleteDnsRecordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDnsRecord(zoneId, dnsRecordId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling deleteDnsRecord");
      }
      // verify the required parameter 'dnsRecordId' is set
      if (dnsRecordId === undefined || dnsRecordId === null) {
        throw new Error("Missing the required parameter 'dnsRecordId' when calling deleteDnsRecord");
      }

      let pathParams = {
        'zone_id': zoneId,
        'dns_record_id': dnsRecordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}/dns_records/{dns_record_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDnsZone operation.
     * @callback module:api/DnsZoneApi~deleteDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {module:api/DnsZoneApi~deleteDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDnsZone(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling deleteDnsZone");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDNSForSite operation.
     * @callback module:api/DnsZoneApi~getDNSForSiteCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/DnsZoneApi~getDNSForSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsZone>}
     */
    getDNSForSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getDNSForSite");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DnsZone];
      return this.apiClient.callApi(
        '/sites/{site_id}/dns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnsRecords operation.
     * @callback module:api/DnsZoneApi~getDnsRecordsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsRecord>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {module:api/DnsZoneApi~getDnsRecordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsRecord>}
     */
    getDnsRecords(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getDnsRecords");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DnsRecord];
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}/dns_records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnsZone operation.
     * @callback module:api/DnsZoneApi~getDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {module:api/DnsZoneApi~getDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsZone}
     */
    getDnsZone(zoneId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getDnsZone");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DnsZone;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDnsZones operation.
     * @callback module:api/DnsZoneApi~getDnsZonesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DnsZone>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [accountSlug] 
     * @param {module:api/DnsZoneApi~getDnsZonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DnsZone>}
     */
    getDnsZones(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'account_slug': opts['accountSlug']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DnsZone];
      return this.apiClient.callApi(
        '/dns_zones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIndividualDnsRecord operation.
     * @callback module:api/DnsZoneApi~getIndividualDnsRecordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsRecord} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {String} dnsRecordId 
     * @param {module:api/DnsZoneApi~getIndividualDnsRecordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsRecord}
     */
    getIndividualDnsRecord(zoneId, dnsRecordId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling getIndividualDnsRecord");
      }
      // verify the required parameter 'dnsRecordId' is set
      if (dnsRecordId === undefined || dnsRecordId === null) {
        throw new Error("Missing the required parameter 'dnsRecordId' when calling getIndividualDnsRecord");
      }

      let pathParams = {
        'zone_id': zoneId,
        'dns_record_id': dnsRecordId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DnsRecord;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}/dns_records/{dns_record_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transferDnsZone operation.
     * @callback module:api/DnsZoneApi~transferDnsZoneCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DnsZone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} zoneId 
     * @param {String} accountId the account of the dns zone
     * @param {String} transferAccountId the account you want to transfer the dns zone to
     * @param {String} transferUserId the user you want to transfer the dns zone to
     * @param {module:api/DnsZoneApi~transferDnsZoneCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DnsZone}
     */
    transferDnsZone(zoneId, accountId, transferAccountId, transferUserId, callback) {
      let postBody = null;
      // verify the required parameter 'zoneId' is set
      if (zoneId === undefined || zoneId === null) {
        throw new Error("Missing the required parameter 'zoneId' when calling transferDnsZone");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling transferDnsZone");
      }
      // verify the required parameter 'transferAccountId' is set
      if (transferAccountId === undefined || transferAccountId === null) {
        throw new Error("Missing the required parameter 'transferAccountId' when calling transferDnsZone");
      }
      // verify the required parameter 'transferUserId' is set
      if (transferUserId === undefined || transferUserId === null) {
        throw new Error("Missing the required parameter 'transferUserId' when calling transferDnsZone");
      }

      let pathParams = {
        'zone_id': zoneId
      };
      let queryParams = {
        'account_id': accountId,
        'transfer_account_id': transferAccountId,
        'transfer_user_id': transferUserId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DnsZone;
      return this.apiClient.callApi(
        '/dns_zones/{zone_id}/transfer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
