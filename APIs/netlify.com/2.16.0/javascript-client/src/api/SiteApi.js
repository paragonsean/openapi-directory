/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import Site from '../model/Site';
import SiteSetup from '../model/SiteSetup';

/**
* Site service.
* @module api/SiteApi
* @version 2.16.0
*/
export default class SiteApi {

    /**
    * Constructs a new SiteApi. 
    * @alias module:api/SiteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSite operation.
     * @callback module:api/SiteApi~createSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
     * @param {module:model/SiteSetup} site 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [configureDns] 
     * @param {module:api/SiteApi~createSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    createSite(site, opts, callback) {
      opts = opts || {};
      let postBody = site;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling createSite");
      }

      let pathParams = {
      };
      let queryParams = {
        'configure_dns': opts['configureDns']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSiteInTeam operation.
     * @callback module:api/SiteApi~createSiteInTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [createEnvVars](#tag/environmentVariables/operation/createEnvVars) to create environment variables for a site.
     * @param {String} accountSlug 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [configureDns] 
     * @param {module:model/SiteSetup} [site] 
     * @param {module:api/SiteApi~createSiteInTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    createSiteInTeam(accountSlug, opts, callback) {
      opts = opts || {};
      let postBody = opts['site'];
      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling createSiteInTeam");
      }

      let pathParams = {
        'account_slug': accountSlug
      };
      let queryParams = {
        'configure_dns': opts['configureDns']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/{account_slug}/sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSite operation.
     * @callback module:api/SiteApi~deleteSiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} siteId 
     * @param {module:api/SiteApi~deleteSiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling deleteSite");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/sites/{site_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSite operation.
     * @callback module:api/SiteApi~getSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     * @param {String} siteId 
     * @param {module:api/SiteApi~getSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    getSite(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling getSite");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{site_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSites operation.
     * @callback module:api/SiteApi~listSitesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Site>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {module:model/String} [filter] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/SiteApi~listSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Site>}
     */
    listSites(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'filter': opts['filter'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Site];
      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSitesForAccount operation.
     * @callback module:api/SiteApi~listSitesForAccountCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Site>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [getEnvVars](#tag/environmentVariables/operation/getEnvVars) to retrieve site environment variables.
     * @param {String} accountSlug 
     * @param {Object} opts Optional parameters
     * @param {String} [name] 
     * @param {Number} [page] 
     * @param {Number} [perPage] 
     * @param {module:api/SiteApi~listSitesForAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Site>}
     */
    listSitesForAccount(accountSlug, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accountSlug' is set
      if (accountSlug === undefined || accountSlug === null) {
        throw new Error("Missing the required parameter 'accountSlug' when calling listSitesForAccount");
      }

      let pathParams = {
        'account_slug': accountSlug
      };
      let queryParams = {
        'name': opts['name'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Site];
      return this.apiClient.callApi(
        '/{account_slug}/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlinkSiteRepo operation.
     * @callback module:api/SiteApi~unlinkSiteRepoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [Beta] Unlinks the repo from the site.  This action will also: - Delete associated deploy keys - Delete outgoing webhooks for the repo - Delete the site's build hooks
     * @param {String} siteId 
     * @param {module:api/SiteApi~unlinkSiteRepoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    unlinkSiteRepo(siteId, callback) {
      let postBody = null;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling unlinkSiteRepo");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{site_id}/unlink_repo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSite operation.
     * @callback module:api/SiteApi~updateSiteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Site} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Note:** Environment variable keys and values will soon be moved from `build_settings.env` and `repo.env` to a new endpoint. Please use [updateEnvVar](#tag/environmentVariables/operation/updateEnvVar) to update a site's environment variables.
     * @param {String} siteId 
     * @param {module:model/SiteSetup} site 
     * @param {module:api/SiteApi~updateSiteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Site}
     */
    updateSite(siteId, site, callback) {
      let postBody = site;
      // verify the required parameter 'siteId' is set
      if (siteId === undefined || siteId === null) {
        throw new Error("Missing the required parameter 'siteId' when calling updateSite");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling updateSite");
      }

      let pathParams = {
        'site_id': siteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['netlifyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Site;
      return this.apiClient.callApi(
        '/sites/{site_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
