/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDocumentation);
  }
}(this, function(expect, NetlifysApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDocumentation.DeployApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DeployApi', function() {
    describe('cancelSiteDeploy', function() {
      it('should call cancelSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test cancelSiteDeploy
        //instance.cancelSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSiteDeploy', function() {
      it('should call createSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test createSiteDeploy
        //instance.createSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeploy', function() {
      it('should call deleteDeploy successfully', function(done) {
        //uncomment below and update the code to test deleteDeploy
        //instance.deleteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSiteDeploy', function() {
      it('should call deleteSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test deleteSiteDeploy
        //instance.deleteSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeploy', function() {
      it('should call getDeploy successfully', function(done) {
        //uncomment below and update the code to test getDeploy
        //instance.getDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSiteDeploy', function() {
      it('should call getSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test getSiteDeploy
        //instance.getSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSiteDeploys', function() {
      it('should call listSiteDeploys successfully', function(done) {
        //uncomment below and update the code to test listSiteDeploys
        //instance.listSiteDeploys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('lockDeploy', function() {
      it('should call lockDeploy successfully', function(done) {
        //uncomment below and update the code to test lockDeploy
        //instance.lockDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreSiteDeploy', function() {
      it('should call restoreSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test restoreSiteDeploy
        //instance.restoreSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rollbackSiteDeploy', function() {
      it('should call rollbackSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test rollbackSiteDeploy
        //instance.rollbackSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unlockDeploy', function() {
      it('should call unlockDeploy successfully', function(done) {
        //uncomment below and update the code to test unlockDeploy
        //instance.unlockDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSiteDeploy', function() {
      it('should call updateSiteDeploy successfully', function(done) {
        //uncomment below and update the code to test updateSiteDeploy
        //instance.updateSiteDeploy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
