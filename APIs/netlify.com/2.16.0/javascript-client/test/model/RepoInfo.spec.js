/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDocumentation);
  }
}(this, function(expect, NetlifysApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDocumentation.RepoInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RepoInfo', function() {
    it('should create an instance of RepoInfo', function() {
      // uncomment below and update the code to test RepoInfo
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be.a(NetlifysApiDocumentation.RepoInfo);
    });

    it('should have the property allowedBranches (base name: "allowed_branches")', function() {
      // uncomment below and update the code to test the property allowedBranches
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property cmd (base name: "cmd")', function() {
      // uncomment below and update the code to test the property cmd
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property deployKeyId (base name: "deploy_key_id")', function() {
      // uncomment below and update the code to test the property deployKeyId
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property dir (base name: "dir")', function() {
      // uncomment below and update the code to test the property dir
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property env (base name: "env")', function() {
      // uncomment below and update the code to test the property env
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property functionsDir (base name: "functions_dir")', function() {
      // uncomment below and update the code to test the property functionsDir
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property installationId (base name: "installation_id")', function() {
      // uncomment below and update the code to test the property installationId
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property privateLogs (base name: "private_logs")', function() {
      // uncomment below and update the code to test the property privateLogs
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property publicRepo (base name: "public_repo")', function() {
      // uncomment below and update the code to test the property publicRepo
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property repoBranch (base name: "repo_branch")', function() {
      // uncomment below and update the code to test the property repoBranch
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property repoPath (base name: "repo_path")', function() {
      // uncomment below and update the code to test the property repoPath
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property repoUrl (base name: "repo_url")', function() {
      // uncomment below and update the code to test the property repoUrl
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

    it('should have the property stopBuilds (base name: "stop_builds")', function() {
      // uncomment below and update the code to test the property stopBuilds
      //var instance = new NetlifysApiDocumentation.RepoInfo();
      //expect(instance).to.be();
    });

  });

}));
