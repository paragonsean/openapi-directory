/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDocumentation);
  }
}(this, function(expect, NetlifysApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDocumentation.AccountMembership();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AccountMembership', function() {
    it('should create an instance of AccountMembership', function() {
      // uncomment below and update the code to test AccountMembership
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be.a(NetlifysApiDocumentation.AccountMembership);
    });

    it('should have the property billingDetails (base name: "billing_details")', function() {
      // uncomment below and update the code to test the property billingDetails
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property billingEmail (base name: "billing_email")', function() {
      // uncomment below and update the code to test the property billingEmail
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property billingName (base name: "billing_name")', function() {
      // uncomment below and update the code to test the property billingName
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property billingPeriod (base name: "billing_period")', function() {
      // uncomment below and update the code to test the property billingPeriod
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property ownerIds (base name: "owner_ids")', function() {
      // uncomment below and update the code to test the property ownerIds
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property paymentMethodId (base name: "payment_method_id")', function() {
      // uncomment below and update the code to test the property paymentMethodId
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property rolesAllowed (base name: "roles_allowed")', function() {
      // uncomment below and update the code to test the property rolesAllowed
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property typeId (base name: "type_id")', function() {
      // uncomment below and update the code to test the property typeId
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property typeName (base name: "type_name")', function() {
      // uncomment below and update the code to test the property typeName
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new NetlifysApiDocumentation.AccountMembership();
      //expect(instance).to.be();
    });

  });

}));
