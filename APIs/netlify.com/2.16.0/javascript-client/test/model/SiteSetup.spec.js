/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDocumentation);
  }
}(this, function(expect, NetlifysApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDocumentation.SiteSetup();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SiteSetup', function() {
    it('should create an instance of SiteSetup', function() {
      // uncomment below and update the code to test SiteSetup
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be.a(NetlifysApiDocumentation.SiteSetup);
    });

    it('should have the property accountName (base name: "account_name")', function() {
      // uncomment below and update the code to test the property accountName
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property accountSlug (base name: "account_slug")', function() {
      // uncomment below and update the code to test the property accountSlug
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property adminUrl (base name: "admin_url")', function() {
      // uncomment below and update the code to test the property adminUrl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property buildImage (base name: "build_image")', function() {
      // uncomment below and update the code to test the property buildImage
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property buildSettings (base name: "build_settings")', function() {
      // uncomment below and update the code to test the property buildSettings
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property capabilities (base name: "capabilities")', function() {
      // uncomment below and update the code to test the property capabilities
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property customDomain (base name: "custom_domain")', function() {
      // uncomment below and update the code to test the property customDomain
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property defaultHooksData (base name: "default_hooks_data")', function() {
      // uncomment below and update the code to test the property defaultHooksData
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property deployHook (base name: "deploy_hook")', function() {
      // uncomment below and update the code to test the property deployHook
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property deployUrl (base name: "deploy_url")', function() {
      // uncomment below and update the code to test the property deployUrl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property domainAliases (base name: "domain_aliases")', function() {
      // uncomment below and update the code to test the property domainAliases
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property forceSsl (base name: "force_ssl")', function() {
      // uncomment below and update the code to test the property forceSsl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property gitProvider (base name: "git_provider")', function() {
      // uncomment below and update the code to test the property gitProvider
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property idDomain (base name: "id_domain")', function() {
      // uncomment below and update the code to test the property idDomain
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property managedDns (base name: "managed_dns")', function() {
      // uncomment below and update the code to test the property managedDns
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property notificationEmail (base name: "notification_email")', function() {
      // uncomment below and update the code to test the property notificationEmail
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property prerender (base name: "prerender")', function() {
      // uncomment below and update the code to test the property prerender
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property processingSettings (base name: "processing_settings")', function() {
      // uncomment below and update the code to test the property processingSettings
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property publishedDeploy (base name: "published_deploy")', function() {
      // uncomment below and update the code to test the property publishedDeploy
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property screenshotUrl (base name: "screenshot_url")', function() {
      // uncomment below and update the code to test the property screenshotUrl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "session_id")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property ssl (base name: "ssl")', function() {
      // uncomment below and update the code to test the property ssl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property sslUrl (base name: "ssl_url")', function() {
      // uncomment below and update the code to test the property sslUrl
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

    it('should have the property repo (base name: "repo")', function() {
      // uncomment below and update the code to test the property repo
      //var instance = new NetlifysApiDocumentation.SiteSetup();
      //expect(instance).to.be();
    });

  });

}));
