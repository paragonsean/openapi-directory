/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetlifysApiDocumentation);
  }
}(this, function(expect, NetlifysApiDocumentation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetlifysApiDocumentation.Deploy();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Deploy', function() {
    it('should create an instance of Deploy', function() {
      // uncomment below and update the code to test Deploy
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be.a(NetlifysApiDocumentation.Deploy);
    });

    it('should have the property adminUrl (base name: "admin_url")', function() {
      // uncomment below and update the code to test the property adminUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property branch (base name: "branch")', function() {
      // uncomment below and update the code to test the property branch
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property buildId (base name: "build_id")', function() {
      // uncomment below and update the code to test the property buildId
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property commitRef (base name: "commit_ref")', function() {
      // uncomment below and update the code to test the property commitRef
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property commitUrl (base name: "commit_url")', function() {
      // uncomment below and update the code to test the property commitUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property context (base name: "context")', function() {
      // uncomment below and update the code to test the property context
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property deploySslUrl (base name: "deploy_ssl_url")', function() {
      // uncomment below and update the code to test the property deploySslUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property deployUrl (base name: "deploy_url")', function() {
      // uncomment below and update the code to test the property deployUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property draft (base name: "draft")', function() {
      // uncomment below and update the code to test the property draft
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property errorMessage (base name: "error_message")', function() {
      // uncomment below and update the code to test the property errorMessage
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property framework (base name: "framework")', function() {
      // uncomment below and update the code to test the property framework
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property functionSchedules (base name: "function_schedules")', function() {
      // uncomment below and update the code to test the property functionSchedules
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property locked (base name: "locked")', function() {
      // uncomment below and update the code to test the property locked
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property publishedAt (base name: "published_at")', function() {
      // uncomment below and update the code to test the property publishedAt
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property requiredFunctions (base name: "required_functions")', function() {
      // uncomment below and update the code to test the property requiredFunctions
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property reviewId (base name: "review_id")', function() {
      // uncomment below and update the code to test the property reviewId
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property reviewUrl (base name: "review_url")', function() {
      // uncomment below and update the code to test the property reviewUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property screenshotUrl (base name: "screenshot_url")', function() {
      // uncomment below and update the code to test the property screenshotUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property siteCapabilities (base name: "site_capabilities")', function() {
      // uncomment below and update the code to test the property siteCapabilities
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property siteId (base name: "site_id")', function() {
      // uncomment below and update the code to test the property siteId
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property skipped (base name: "skipped")', function() {
      // uncomment below and update the code to test the property skipped
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property sslUrl (base name: "ssl_url")', function() {
      // uncomment below and update the code to test the property sslUrl
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property url (base name: "url")', function() {
      // uncomment below and update the code to test the property url
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new NetlifysApiDocumentation.Deploy();
      //expect(instance).to.be();
    });

  });

}));
