/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountSetup::OAIAccountSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountSetup::OAIAccountSetup() {
    this->initializeModel();
}

OAIAccountSetup::~OAIAccountSetup() {}

void OAIAccountSetup::initializeModel() {

    m_extra_seats_block_isSet = false;
    m_extra_seats_block_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_type_id_isSet = false;
    m_type_id_isValid = false;
}

void OAIAccountSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountSetup::fromJsonObject(QJsonObject json) {

    m_extra_seats_block_isValid = ::OpenAPI::fromJsonValue(m_extra_seats_block, json[QString("extra_seats_block")]);
    m_extra_seats_block_isSet = !json[QString("extra_seats_block")].isNull() && m_extra_seats_block_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("payment_method_id")]);
    m_payment_method_id_isSet = !json[QString("payment_method_id")].isNull() && m_payment_method_id_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_type_id_isValid = ::OpenAPI::fromJsonValue(m_type_id, json[QString("type_id")]);
    m_type_id_isSet = !json[QString("type_id")].isNull() && m_type_id_isValid;
}

QString OAIAccountSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_extra_seats_block_isSet) {
        obj.insert(QString("extra_seats_block"), ::OpenAPI::toJsonValue(m_extra_seats_block));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("payment_method_id"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_type_id_isSet) {
        obj.insert(QString("type_id"), ::OpenAPI::toJsonValue(m_type_id));
    }
    return obj;
}

qint32 OAIAccountSetup::getExtraSeatsBlock() const {
    return m_extra_seats_block;
}
void OAIAccountSetup::setExtraSeatsBlock(const qint32 &extra_seats_block) {
    m_extra_seats_block = extra_seats_block;
    m_extra_seats_block_isSet = true;
}

bool OAIAccountSetup::is_extra_seats_block_Set() const{
    return m_extra_seats_block_isSet;
}

bool OAIAccountSetup::is_extra_seats_block_Valid() const{
    return m_extra_seats_block_isValid;
}

QString OAIAccountSetup::getName() const {
    return m_name;
}
void OAIAccountSetup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountSetup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountSetup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccountSetup::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAIAccountSetup::setPaymentMethodId(const QString &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAIAccountSetup::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAIAccountSetup::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

QString OAIAccountSetup::getPeriod() const {
    return m_period;
}
void OAIAccountSetup::setPeriod(const QString &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIAccountSetup::is_period_Set() const{
    return m_period_isSet;
}

bool OAIAccountSetup::is_period_Valid() const{
    return m_period_isValid;
}

QString OAIAccountSetup::getTypeId() const {
    return m_type_id;
}
void OAIAccountSetup::setTypeId(const QString &type_id) {
    m_type_id = type_id;
    m_type_id_isSet = true;
}

bool OAIAccountSetup::is_type_id_Set() const{
    return m_type_id_isSet;
}

bool OAIAccountSetup::is_type_id_Valid() const{
    return m_type_id_isValid;
}

bool OAIAccountSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extra_seats_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_id_isValid && true;
}

} // namespace OpenAPI
