/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetSignature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetSignature::OAIAssetSignature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetSignature::OAIAssetSignature() {
    this->initializeModel();
}

OAIAssetSignature::~OAIAssetSignature() {}

void OAIAssetSignature::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_form_isSet = false;
    m_form_isValid = false;
}

void OAIAssetSignature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetSignature::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_form_isValid = ::OpenAPI::fromJsonValue(m_form, json[QString("form")]);
    m_form_isSet = !json[QString("form")].isNull() && m_form_isValid;
}

QString OAIAssetSignature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetSignature::asJsonObject() const {
    QJsonObject obj;
    if (m_asset.isSet()) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_form.isSet()) {
        obj.insert(QString("form"), ::OpenAPI::toJsonValue(m_form));
    }
    return obj;
}

OAIAsset OAIAssetSignature::getAsset() const {
    return m_asset;
}
void OAIAssetSignature::setAsset(const OAIAsset &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIAssetSignature::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIAssetSignature::is_asset_Valid() const{
    return m_asset_isValid;
}

OAIAssetForm OAIAssetSignature::getForm() const {
    return m_form;
}
void OAIAssetSignature::setForm(const OAIAssetForm &form) {
    m_form = form;
    m_form_isSet = true;
}

bool OAIAssetSignature::is_form_Set() const{
    return m_form_isSet;
}

bool OAIAssetSignature::is_form_Valid() const{
    return m_form_isValid;
}

bool OAIAssetSignature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_form.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetSignature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
