/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIService::OAIService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIService::OAIService() {
    this->initializeModel();
}

OAIService::~OAIService() {}

void OAIService::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_environments_isSet = false;
    m_environments_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_icon_isSet = false;
    m_icon_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_long_description_isSet = false;
    m_long_description_isValid = false;

    m_manifest_url_isSet = false;
    m_manifest_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_path_isSet = false;
    m_service_path_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIService::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_environments_isValid = ::OpenAPI::fromJsonValue(m_environments, json[QString("environments")]);
    m_environments_isSet = !json[QString("environments")].isNull() && m_environments_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_icon_isValid = ::OpenAPI::fromJsonValue(m_icon, json[QString("icon")]);
    m_icon_isSet = !json[QString("icon")].isNull() && m_icon_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_long_description_isValid = ::OpenAPI::fromJsonValue(m_long_description, json[QString("long_description")]);
    m_long_description_isSet = !json[QString("long_description")].isNull() && m_long_description_isValid;

    m_manifest_url_isValid = ::OpenAPI::fromJsonValue(m_manifest_url, json[QString("manifest_url")]);
    m_manifest_url_isSet = !json[QString("manifest_url")].isNull() && m_manifest_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_path_isValid = ::OpenAPI::fromJsonValue(m_service_path, json[QString("service_path")]);
    m_service_path_isSet = !json[QString("service_path")].isNull() && m_service_path_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIService::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_environments.size() > 0) {
        obj.insert(QString("environments"), ::OpenAPI::toJsonValue(m_environments));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_icon_isSet) {
        obj.insert(QString("icon"), ::OpenAPI::toJsonValue(m_icon));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_long_description_isSet) {
        obj.insert(QString("long_description"), ::OpenAPI::toJsonValue(m_long_description));
    }
    if (m_manifest_url_isSet) {
        obj.insert(QString("manifest_url"), ::OpenAPI::toJsonValue(m_manifest_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_path_isSet) {
        obj.insert(QString("service_path"), ::OpenAPI::toJsonValue(m_service_path));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIService::getCreatedAt() const {
    return m_created_at;
}
void OAIService::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIService::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIService::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIService::getDescription() const {
    return m_description;
}
void OAIService::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIService::is_description_Set() const{
    return m_description_isSet;
}

bool OAIService::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIService::getEnvironments() const {
    return m_environments;
}
void OAIService::setEnvironments(const QList<QString> &environments) {
    m_environments = environments;
    m_environments_isSet = true;
}

bool OAIService::is_environments_Set() const{
    return m_environments_isSet;
}

bool OAIService::is_environments_Valid() const{
    return m_environments_isValid;
}

QList<OAIObject> OAIService::getEvents() const {
    return m_events;
}
void OAIService::setEvents(const QList<OAIObject> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIService::is_events_Set() const{
    return m_events_isSet;
}

bool OAIService::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIService::getIcon() const {
    return m_icon;
}
void OAIService::setIcon(const QString &icon) {
    m_icon = icon;
    m_icon_isSet = true;
}

bool OAIService::is_icon_Set() const{
    return m_icon_isSet;
}

bool OAIService::is_icon_Valid() const{
    return m_icon_isValid;
}

QString OAIService::getId() const {
    return m_id;
}
void OAIService::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIService::is_id_Set() const{
    return m_id_isSet;
}

bool OAIService::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIService::getLongDescription() const {
    return m_long_description;
}
void OAIService::setLongDescription(const QString &long_description) {
    m_long_description = long_description;
    m_long_description_isSet = true;
}

bool OAIService::is_long_description_Set() const{
    return m_long_description_isSet;
}

bool OAIService::is_long_description_Valid() const{
    return m_long_description_isValid;
}

QString OAIService::getManifestUrl() const {
    return m_manifest_url;
}
void OAIService::setManifestUrl(const QString &manifest_url) {
    m_manifest_url = manifest_url;
    m_manifest_url_isSet = true;
}

bool OAIService::is_manifest_url_Set() const{
    return m_manifest_url_isSet;
}

bool OAIService::is_manifest_url_Valid() const{
    return m_manifest_url_isValid;
}

QString OAIService::getName() const {
    return m_name;
}
void OAIService::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIService::is_name_Set() const{
    return m_name_isSet;
}

bool OAIService::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIService::getServicePath() const {
    return m_service_path;
}
void OAIService::setServicePath(const QString &service_path) {
    m_service_path = service_path;
    m_service_path_isSet = true;
}

bool OAIService::is_service_path_Set() const{
    return m_service_path_isSet;
}

bool OAIService::is_service_path_Valid() const{
    return m_service_path_isValid;
}

QString OAIService::getSlug() const {
    return m_slug;
}
void OAIService::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIService::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIService::is_slug_Valid() const{
    return m_slug_isValid;
}

QList<QString> OAIService::getTags() const {
    return m_tags;
}
void OAIService::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIService::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIService::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIService::getUpdatedAt() const {
    return m_updated_at;
}
void OAIService::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIService::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIService::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
