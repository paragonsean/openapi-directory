/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIXInternalApi_H
#define OAI_OAIXInternalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIPlugin.h"
#include "OAIPluginParams.h"
#include "OAIPluginRun.h"
#include "OAIPluginRunData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIXInternalApi : public QObject {
    Q_OBJECT

public:
    OAIXInternalApi(const int timeOut = 0);
    ~OAIXInternalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  deploy_id QString [required]
    * @param[in]  plugin_run OAIPluginRunData [optional]
    */
    virtual void createPluginRun(const QString &deploy_id, const ::OpenAPI::OptionalParam<OAIPluginRunData> &plugin_run = ::OpenAPI::OptionalParam<OAIPluginRunData>());

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  packages QList<QString> [required]
    * @param[in]  state QString [optional]
    */
    virtual void getLatestPluginRuns(const QString &site_id, const QList<QString> &packages, const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  package QString [required]
    * @param[in]  plugin_params OAIPluginParams [optional]
    */
    virtual void updatePlugin(const QString &site_id, const QString &package, const ::OpenAPI::OptionalParam<OAIPluginParams> &plugin_params = ::OpenAPI::OptionalParam<OAIPluginParams>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPluginRunCallback(OAIHttpRequestWorker *worker);
    void getLatestPluginRunsCallback(OAIHttpRequestWorker *worker);
    void updatePluginCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPluginRunSignal(OAIPluginRun summary);
    void getLatestPluginRunsSignal(QList<OAIPluginRun> summary);
    void updatePluginSignal(OAIPlugin summary);


    void createPluginRunSignalFull(OAIHttpRequestWorker *worker, OAIPluginRun summary);
    void getLatestPluginRunsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPluginRun> summary);
    void updatePluginSignalFull(OAIHttpRequestWorker *worker, OAIPlugin summary);

    Q_DECL_DEPRECATED_X("Use createPluginRunSignalError() instead")
    void createPluginRunSignalE(OAIPluginRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPluginRunSignalError(OAIPluginRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestPluginRunsSignalError() instead")
    void getLatestPluginRunsSignalE(QList<OAIPluginRun> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestPluginRunsSignalError(QList<OAIPluginRun> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginSignalError() instead")
    void updatePluginSignalE(OAIPlugin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginSignalError(OAIPlugin summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPluginRunSignalErrorFull() instead")
    void createPluginRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPluginRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestPluginRunsSignalErrorFull() instead")
    void getLatestPluginRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestPluginRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePluginSignalErrorFull() instead")
    void updatePluginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePluginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
