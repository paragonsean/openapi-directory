/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetApi_H
#define OAI_OAIAssetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAsset.h"
#include "OAIAssetSignature.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetApi : public QObject {
    Q_OBJECT

public:
    OAIAssetApi(const int timeOut = 0);
    ~OAIAssetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  name QString [required]
    * @param[in]  size qint64 [required]
    * @param[in]  content_type QString [required]
    * @param[in]  visibility QString [optional]
    */
    virtual void createSiteAsset(const QString &site_id, const QString &name, const qint64 &size, const QString &content_type, const ::OpenAPI::OptionalParam<QString> &visibility = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  asset_id QString [required]
    */
    virtual void deleteSiteAsset(const QString &site_id, const QString &asset_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  asset_id QString [required]
    */
    virtual void getSiteAssetInfo(const QString &site_id, const QString &asset_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void listSiteAssets(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  asset_id QString [required]
    * @param[in]  state QString [required]
    */
    virtual void updateSiteAsset(const QString &site_id, const QString &asset_id, const QString &state);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSiteAssetCallback(OAIHttpRequestWorker *worker);
    void deleteSiteAssetCallback(OAIHttpRequestWorker *worker);
    void getSiteAssetInfoCallback(OAIHttpRequestWorker *worker);
    void listSiteAssetsCallback(OAIHttpRequestWorker *worker);
    void updateSiteAssetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSiteAssetSignal(OAIAssetSignature summary);
    void deleteSiteAssetSignal();
    void getSiteAssetInfoSignal(OAIAsset summary);
    void listSiteAssetsSignal(QList<OAIAsset> summary);
    void updateSiteAssetSignal(OAIAsset summary);


    void createSiteAssetSignalFull(OAIHttpRequestWorker *worker, OAIAssetSignature summary);
    void deleteSiteAssetSignalFull(OAIHttpRequestWorker *worker);
    void getSiteAssetInfoSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);
    void listSiteAssetsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAsset> summary);
    void updateSiteAssetSignalFull(OAIHttpRequestWorker *worker, OAIAsset summary);

    Q_DECL_DEPRECATED_X("Use createSiteAssetSignalError() instead")
    void createSiteAssetSignalE(OAIAssetSignature summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteAssetSignalError(OAIAssetSignature summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteAssetSignalError() instead")
    void deleteSiteAssetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteAssetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteAssetInfoSignalError() instead")
    void getSiteAssetInfoSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteAssetInfoSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteAssetsSignalError() instead")
    void listSiteAssetsSignalE(QList<OAIAsset> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteAssetsSignalError(QList<OAIAsset> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteAssetSignalError() instead")
    void updateSiteAssetSignalE(OAIAsset summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteAssetSignalError(OAIAsset summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSiteAssetSignalErrorFull() instead")
    void createSiteAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteAssetSignalErrorFull() instead")
    void deleteSiteAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteAssetInfoSignalErrorFull() instead")
    void getSiteAssetInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteAssetInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteAssetsSignalErrorFull() instead")
    void listSiteAssetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteAssetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteAssetSignalErrorFull() instead")
    void updateSiteAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
