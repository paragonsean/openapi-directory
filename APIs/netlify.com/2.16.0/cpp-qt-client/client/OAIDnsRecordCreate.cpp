/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecordCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecordCreate::OAIDnsRecordCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecordCreate::OAIDnsRecordCreate() {
    this->initializeModel();
}

OAIDnsRecordCreate::~OAIDnsRecordCreate() {}

void OAIDnsRecordCreate::initializeModel() {

    m_flag_isSet = false;
    m_flag_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDnsRecordCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecordCreate::fromJsonObject(QJsonObject json) {

    m_flag_isValid = ::OpenAPI::fromJsonValue(m_flag, json[QString("flag")]);
    m_flag_isSet = !json[QString("flag")].isNull() && m_flag_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIDnsRecordCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecordCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_flag_isSet) {
        obj.insert(QString("flag"), ::OpenAPI::toJsonValue(m_flag));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

qint64 OAIDnsRecordCreate::getFlag() const {
    return m_flag;
}
void OAIDnsRecordCreate::setFlag(const qint64 &flag) {
    m_flag = flag;
    m_flag_isSet = true;
}

bool OAIDnsRecordCreate::is_flag_Set() const{
    return m_flag_isSet;
}

bool OAIDnsRecordCreate::is_flag_Valid() const{
    return m_flag_isValid;
}

QString OAIDnsRecordCreate::getHostname() const {
    return m_hostname;
}
void OAIDnsRecordCreate::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIDnsRecordCreate::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIDnsRecordCreate::is_hostname_Valid() const{
    return m_hostname_isValid;
}

qint64 OAIDnsRecordCreate::getPort() const {
    return m_port;
}
void OAIDnsRecordCreate::setPort(const qint64 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIDnsRecordCreate::is_port_Set() const{
    return m_port_isSet;
}

bool OAIDnsRecordCreate::is_port_Valid() const{
    return m_port_isValid;
}

qint64 OAIDnsRecordCreate::getPriority() const {
    return m_priority;
}
void OAIDnsRecordCreate::setPriority(const qint64 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDnsRecordCreate::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDnsRecordCreate::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIDnsRecordCreate::getTag() const {
    return m_tag;
}
void OAIDnsRecordCreate::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIDnsRecordCreate::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIDnsRecordCreate::is_tag_Valid() const{
    return m_tag_isValid;
}

qint64 OAIDnsRecordCreate::getTtl() const {
    return m_ttl;
}
void OAIDnsRecordCreate::setTtl(const qint64 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDnsRecordCreate::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDnsRecordCreate::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIDnsRecordCreate::getType() const {
    return m_type;
}
void OAIDnsRecordCreate::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsRecordCreate::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsRecordCreate::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDnsRecordCreate::getValue() const {
    return m_value;
}
void OAIDnsRecordCreate::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDnsRecordCreate::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDnsRecordCreate::is_value_Valid() const{
    return m_value_isValid;
}

qint64 OAIDnsRecordCreate::getWeight() const {
    return m_weight;
}
void OAIDnsRecordCreate::setWeight(const qint64 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDnsRecordCreate::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDnsRecordCreate::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDnsRecordCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecordCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
