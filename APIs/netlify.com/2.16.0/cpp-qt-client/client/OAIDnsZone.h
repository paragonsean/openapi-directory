/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDnsZone.h
 *
 * 
 */

#ifndef OAIDnsZone_H
#define OAIDnsZone_H

#include <QJsonObject>

#include "OAIDnsRecord.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDnsRecord;

class OAIDnsZone : public OAIObject {
public:
    OAIDnsZone();
    OAIDnsZone(QString json);
    ~OAIDnsZone() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getAccountSlug() const;
    void setAccountSlug(const QString &account_slug);
    bool is_account_slug_Set() const;
    bool is_account_slug_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    bool isDedicated() const;
    void setDedicated(const bool &dedicated);
    bool is_dedicated_Set() const;
    bool is_dedicated_Valid() const;

    QList<QString> getDnsServers() const;
    void setDnsServers(const QList<QString> &dns_servers);
    bool is_dns_servers_Set() const;
    bool is_dns_servers_Valid() const;

    QString getDomain() const;
    void setDomain(const QString &domain);
    bool is_domain_Set() const;
    bool is_domain_Valid() const;

    QList<QString> getErrors() const;
    void setErrors(const QList<QString> &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIpv6Enabled() const;
    void setIpv6Enabled(const bool &ipv6_enabled);
    bool is_ipv6_enabled_Set() const;
    bool is_ipv6_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIDnsRecord> getRecords() const;
    void setRecords(const QList<OAIDnsRecord> &records);
    bool is_records_Set() const;
    bool is_records_Valid() const;

    QString getSiteId() const;
    void setSiteId(const QString &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    QList<QString> getSupportedRecordTypes() const;
    void setSupportedRecordTypes(const QList<QString> &supported_record_types);
    bool is_supported_record_types_Set() const;
    bool is_supported_record_types_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_account_slug;
    bool m_account_slug_isSet;
    bool m_account_slug_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    bool m_dedicated;
    bool m_dedicated_isSet;
    bool m_dedicated_isValid;

    QList<QString> m_dns_servers;
    bool m_dns_servers_isSet;
    bool m_dns_servers_isValid;

    QString m_domain;
    bool m_domain_isSet;
    bool m_domain_isValid;

    QList<QString> m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_ipv6_enabled;
    bool m_ipv6_enabled_isSet;
    bool m_ipv6_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIDnsRecord> m_records;
    bool m_records_isSet;
    bool m_records_isValid;

    QString m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    QList<QString> m_supported_record_types;
    bool m_supported_record_types_isSet;
    bool m_supported_record_types_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDnsZone)

#endif // OAIDnsZone_H
