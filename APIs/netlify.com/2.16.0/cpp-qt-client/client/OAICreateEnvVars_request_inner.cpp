/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateEnvVars_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateEnvVars_request_inner::OAICreateEnvVars_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateEnvVars_request_inner::OAICreateEnvVars_request_inner() {
    this->initializeModel();
}

OAICreateEnvVars_request_inner::~OAICreateEnvVars_request_inner() {}

void OAICreateEnvVars_request_inner::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAICreateEnvVars_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateEnvVars_request_inner::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAICreateEnvVars_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateEnvVars_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAICreateEnvVars_request_inner::getKey() const {
    return m_key;
}
void OAICreateEnvVars_request_inner::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAICreateEnvVars_request_inner::is_key_Set() const{
    return m_key_isSet;
}

bool OAICreateEnvVars_request_inner::is_key_Valid() const{
    return m_key_isValid;
}

QList<QString> OAICreateEnvVars_request_inner::getScopes() const {
    return m_scopes;
}
void OAICreateEnvVars_request_inner::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAICreateEnvVars_request_inner::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAICreateEnvVars_request_inner::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QList<OAIEnvVarValue> OAICreateEnvVars_request_inner::getValues() const {
    return m_values;
}
void OAICreateEnvVars_request_inner::setValues(const QList<OAIEnvVarValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAICreateEnvVars_request_inner::is_values_Set() const{
    return m_values_isSet;
}

bool OAICreateEnvVars_request_inner::is_values_Valid() const{
    return m_values_isValid;
}

bool OAICreateEnvVars_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateEnvVars_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
