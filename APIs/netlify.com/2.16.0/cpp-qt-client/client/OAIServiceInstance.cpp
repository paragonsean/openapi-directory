/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceInstance::OAIServiceInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceInstance::OAIServiceInstance() {
    this->initializeModel();
}

OAIServiceInstance::~OAIServiceInstance() {}

void OAIServiceInstance::initializeModel() {

    m_auth_url_isSet = false;
    m_auth_url_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_external_attributes_isSet = false;
    m_external_attributes_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_path_isSet = false;
    m_service_path_isValid = false;

    m_service_slug_isSet = false;
    m_service_slug_isValid = false;

    m_snippets_isSet = false;
    m_snippets_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIServiceInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceInstance::fromJsonObject(QJsonObject json) {

    m_auth_url_isValid = ::OpenAPI::fromJsonValue(m_auth_url, json[QString("auth_url")]);
    m_auth_url_isSet = !json[QString("auth_url")].isNull() && m_auth_url_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_external_attributes_isValid = ::OpenAPI::fromJsonValue(m_external_attributes, json[QString("external_attributes")]);
    m_external_attributes_isSet = !json[QString("external_attributes")].isNull() && m_external_attributes_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("service_name")]);
    m_service_name_isSet = !json[QString("service_name")].isNull() && m_service_name_isValid;

    m_service_path_isValid = ::OpenAPI::fromJsonValue(m_service_path, json[QString("service_path")]);
    m_service_path_isSet = !json[QString("service_path")].isNull() && m_service_path_isValid;

    m_service_slug_isValid = ::OpenAPI::fromJsonValue(m_service_slug, json[QString("service_slug")]);
    m_service_slug_isSet = !json[QString("service_slug")].isNull() && m_service_slug_isValid;

    m_snippets_isValid = ::OpenAPI::fromJsonValue(m_snippets, json[QString("snippets")]);
    m_snippets_isSet = !json[QString("snippets")].isNull() && m_snippets_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIServiceInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_url_isSet) {
        obj.insert(QString("auth_url"), ::OpenAPI::toJsonValue(m_auth_url));
    }
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_env_isSet) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_external_attributes_isSet) {
        obj.insert(QString("external_attributes"), ::OpenAPI::toJsonValue(m_external_attributes));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("service_name"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_path_isSet) {
        obj.insert(QString("service_path"), ::OpenAPI::toJsonValue(m_service_path));
    }
    if (m_service_slug_isSet) {
        obj.insert(QString("service_slug"), ::OpenAPI::toJsonValue(m_service_slug));
    }
    if (m_snippets.size() > 0) {
        obj.insert(QString("snippets"), ::OpenAPI::toJsonValue(m_snippets));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIServiceInstance::getAuthUrl() const {
    return m_auth_url;
}
void OAIServiceInstance::setAuthUrl(const QString &auth_url) {
    m_auth_url = auth_url;
    m_auth_url_isSet = true;
}

bool OAIServiceInstance::is_auth_url_Set() const{
    return m_auth_url_isSet;
}

bool OAIServiceInstance::is_auth_url_Valid() const{
    return m_auth_url_isValid;
}

OAIObject OAIServiceInstance::getConfig() const {
    return m_config;
}
void OAIServiceInstance::setConfig(const OAIObject &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIServiceInstance::is_config_Set() const{
    return m_config_isSet;
}

bool OAIServiceInstance::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIServiceInstance::getCreatedAt() const {
    return m_created_at;
}
void OAIServiceInstance::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIServiceInstance::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIServiceInstance::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIServiceInstance::getEnv() const {
    return m_env;
}
void OAIServiceInstance::setEnv(const OAIObject &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIServiceInstance::is_env_Set() const{
    return m_env_isSet;
}

bool OAIServiceInstance::is_env_Valid() const{
    return m_env_isValid;
}

OAIObject OAIServiceInstance::getExternalAttributes() const {
    return m_external_attributes;
}
void OAIServiceInstance::setExternalAttributes(const OAIObject &external_attributes) {
    m_external_attributes = external_attributes;
    m_external_attributes_isSet = true;
}

bool OAIServiceInstance::is_external_attributes_Set() const{
    return m_external_attributes_isSet;
}

bool OAIServiceInstance::is_external_attributes_Valid() const{
    return m_external_attributes_isValid;
}

QString OAIServiceInstance::getId() const {
    return m_id;
}
void OAIServiceInstance::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIServiceInstance::is_id_Set() const{
    return m_id_isSet;
}

bool OAIServiceInstance::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIServiceInstance::getServiceName() const {
    return m_service_name;
}
void OAIServiceInstance::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIServiceInstance::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIServiceInstance::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIServiceInstance::getServicePath() const {
    return m_service_path;
}
void OAIServiceInstance::setServicePath(const QString &service_path) {
    m_service_path = service_path;
    m_service_path_isSet = true;
}

bool OAIServiceInstance::is_service_path_Set() const{
    return m_service_path_isSet;
}

bool OAIServiceInstance::is_service_path_Valid() const{
    return m_service_path_isValid;
}

QString OAIServiceInstance::getServiceSlug() const {
    return m_service_slug;
}
void OAIServiceInstance::setServiceSlug(const QString &service_slug) {
    m_service_slug = service_slug;
    m_service_slug_isSet = true;
}

bool OAIServiceInstance::is_service_slug_Set() const{
    return m_service_slug_isSet;
}

bool OAIServiceInstance::is_service_slug_Valid() const{
    return m_service_slug_isValid;
}

QList<OAIObject> OAIServiceInstance::getSnippets() const {
    return m_snippets;
}
void OAIServiceInstance::setSnippets(const QList<OAIObject> &snippets) {
    m_snippets = snippets;
    m_snippets_isSet = true;
}

bool OAIServiceInstance::is_snippets_Set() const{
    return m_snippets_isSet;
}

bool OAIServiceInstance::is_snippets_Valid() const{
    return m_snippets_isValid;
}

QString OAIServiceInstance::getUpdatedAt() const {
    return m_updated_at;
}
void OAIServiceInstance::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIServiceInstance::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIServiceInstance::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIServiceInstance::getUrl() const {
    return m_url;
}
void OAIServiceInstance::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIServiceInstance::is_url_Set() const{
    return m_url_isSet;
}

bool OAIServiceInstance::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIServiceInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_attributes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snippets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
