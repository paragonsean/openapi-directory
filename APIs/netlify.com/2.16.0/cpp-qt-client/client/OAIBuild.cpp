/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuild.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuild::OAIBuild(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuild::OAIBuild() {
    this->initializeModel();
}

OAIBuild::~OAIBuild() {}

void OAIBuild::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deploy_id_isSet = false;
    m_deploy_id_isValid = false;

    m_done_isSet = false;
    m_done_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;
}

void OAIBuild::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuild::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deploy_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_id, json[QString("deploy_id")]);
    m_deploy_id_isSet = !json[QString("deploy_id")].isNull() && m_deploy_id_isValid;

    m_done_isValid = ::OpenAPI::fromJsonValue(m_done, json[QString("done")]);
    m_done_isSet = !json[QString("done")].isNull() && m_done_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;
}

QString OAIBuild::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuild::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deploy_id_isSet) {
        obj.insert(QString("deploy_id"), ::OpenAPI::toJsonValue(m_deploy_id));
    }
    if (m_done_isSet) {
        obj.insert(QString("done"), ::OpenAPI::toJsonValue(m_done));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    return obj;
}

QString OAIBuild::getCreatedAt() const {
    return m_created_at;
}
void OAIBuild::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBuild::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBuild::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBuild::getDeployId() const {
    return m_deploy_id;
}
void OAIBuild::setDeployId(const QString &deploy_id) {
    m_deploy_id = deploy_id;
    m_deploy_id_isSet = true;
}

bool OAIBuild::is_deploy_id_Set() const{
    return m_deploy_id_isSet;
}

bool OAIBuild::is_deploy_id_Valid() const{
    return m_deploy_id_isValid;
}

bool OAIBuild::isDone() const {
    return m_done;
}
void OAIBuild::setDone(const bool &done) {
    m_done = done;
    m_done_isSet = true;
}

bool OAIBuild::is_done_Set() const{
    return m_done_isSet;
}

bool OAIBuild::is_done_Valid() const{
    return m_done_isValid;
}

QString OAIBuild::getError() const {
    return m_error;
}
void OAIBuild::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIBuild::is_error_Set() const{
    return m_error_isSet;
}

bool OAIBuild::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIBuild::getId() const {
    return m_id;
}
void OAIBuild::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuild::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuild::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBuild::getSha() const {
    return m_sha;
}
void OAIBuild::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIBuild::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIBuild::is_sha_Valid() const{
    return m_sha_isValid;
}

bool OAIBuild::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_done_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuild::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
