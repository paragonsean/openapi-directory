/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLog::OAIAuditLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLog::OAIAuditLog() {
    this->initializeModel();
}

OAIAuditLog::~OAIAuditLog() {}

void OAIAuditLog::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;
}

void OAIAuditLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLog::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;
}

QString OAIAuditLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLog::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    return obj;
}

QString OAIAuditLog::getAccountId() const {
    return m_account_id;
}
void OAIAuditLog::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAuditLog::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAuditLog::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIAuditLog::getId() const {
    return m_id;
}
void OAIAuditLog::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAuditLog::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAuditLog::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAIObject> OAIAuditLog::getPayload() const {
    return m_payload;
}
void OAIAuditLog::setPayload(const QMap<QString, OAIObject> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIAuditLog::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIAuditLog::is_payload_Valid() const{
    return m_payload_isValid;
}

bool OAIAuditLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
