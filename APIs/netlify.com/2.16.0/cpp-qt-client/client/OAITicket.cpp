/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITicket.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITicket::OAITicket(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITicket::OAITicket() {
    this->initializeModel();
}

OAITicket::~OAITicket() {}

void OAITicket::initializeModel() {

    m_authorized_isSet = false;
    m_authorized_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAITicket::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITicket::fromJsonObject(QJsonObject json) {

    m_authorized_isValid = ::OpenAPI::fromJsonValue(m_authorized, json[QString("authorized")]);
    m_authorized_isSet = !json[QString("authorized")].isNull() && m_authorized_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAITicket::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITicket::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_isSet) {
        obj.insert(QString("authorized"), ::OpenAPI::toJsonValue(m_authorized));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

bool OAITicket::isAuthorized() const {
    return m_authorized;
}
void OAITicket::setAuthorized(const bool &authorized) {
    m_authorized = authorized;
    m_authorized_isSet = true;
}

bool OAITicket::is_authorized_Set() const{
    return m_authorized_isSet;
}

bool OAITicket::is_authorized_Valid() const{
    return m_authorized_isValid;
}

QString OAITicket::getClientId() const {
    return m_client_id;
}
void OAITicket::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAITicket::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAITicket::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAITicket::getCreatedAt() const {
    return m_created_at;
}
void OAITicket::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITicket::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITicket::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAITicket::getId() const {
    return m_id;
}
void OAITicket::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITicket::is_id_Set() const{
    return m_id_isSet;
}

bool OAITicket::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITicket::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITicket::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
