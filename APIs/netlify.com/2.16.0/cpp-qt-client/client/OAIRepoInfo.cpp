/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepoInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepoInfo::OAIRepoInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepoInfo::OAIRepoInfo() {
    this->initializeModel();
}

OAIRepoInfo::~OAIRepoInfo() {}

void OAIRepoInfo::initializeModel() {

    m_allowed_branches_isSet = false;
    m_allowed_branches_isValid = false;

    m_cmd_isSet = false;
    m_cmd_isValid = false;

    m_deploy_key_id_isSet = false;
    m_deploy_key_id_isValid = false;

    m_dir_isSet = false;
    m_dir_isValid = false;

    m_env_isSet = false;
    m_env_isValid = false;

    m_functions_dir_isSet = false;
    m_functions_dir_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installation_id_isSet = false;
    m_installation_id_isValid = false;

    m_private_logs_isSet = false;
    m_private_logs_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_public_repo_isSet = false;
    m_public_repo_isValid = false;

    m_repo_branch_isSet = false;
    m_repo_branch_isValid = false;

    m_repo_path_isSet = false;
    m_repo_path_isValid = false;

    m_repo_url_isSet = false;
    m_repo_url_isValid = false;

    m_stop_builds_isSet = false;
    m_stop_builds_isValid = false;
}

void OAIRepoInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepoInfo::fromJsonObject(QJsonObject json) {

    m_allowed_branches_isValid = ::OpenAPI::fromJsonValue(m_allowed_branches, json[QString("allowed_branches")]);
    m_allowed_branches_isSet = !json[QString("allowed_branches")].isNull() && m_allowed_branches_isValid;

    m_cmd_isValid = ::OpenAPI::fromJsonValue(m_cmd, json[QString("cmd")]);
    m_cmd_isSet = !json[QString("cmd")].isNull() && m_cmd_isValid;

    m_deploy_key_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_key_id, json[QString("deploy_key_id")]);
    m_deploy_key_id_isSet = !json[QString("deploy_key_id")].isNull() && m_deploy_key_id_isValid;

    m_dir_isValid = ::OpenAPI::fromJsonValue(m_dir, json[QString("dir")]);
    m_dir_isSet = !json[QString("dir")].isNull() && m_dir_isValid;

    m_env_isValid = ::OpenAPI::fromJsonValue(m_env, json[QString("env")]);
    m_env_isSet = !json[QString("env")].isNull() && m_env_isValid;

    m_functions_dir_isValid = ::OpenAPI::fromJsonValue(m_functions_dir, json[QString("functions_dir")]);
    m_functions_dir_isSet = !json[QString("functions_dir")].isNull() && m_functions_dir_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installation_id_isValid = ::OpenAPI::fromJsonValue(m_installation_id, json[QString("installation_id")]);
    m_installation_id_isSet = !json[QString("installation_id")].isNull() && m_installation_id_isValid;

    m_private_logs_isValid = ::OpenAPI::fromJsonValue(m_private_logs, json[QString("private_logs")]);
    m_private_logs_isSet = !json[QString("private_logs")].isNull() && m_private_logs_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_public_repo_isValid = ::OpenAPI::fromJsonValue(m_public_repo, json[QString("public_repo")]);
    m_public_repo_isSet = !json[QString("public_repo")].isNull() && m_public_repo_isValid;

    m_repo_branch_isValid = ::OpenAPI::fromJsonValue(m_repo_branch, json[QString("repo_branch")]);
    m_repo_branch_isSet = !json[QString("repo_branch")].isNull() && m_repo_branch_isValid;

    m_repo_path_isValid = ::OpenAPI::fromJsonValue(m_repo_path, json[QString("repo_path")]);
    m_repo_path_isSet = !json[QString("repo_path")].isNull() && m_repo_path_isValid;

    m_repo_url_isValid = ::OpenAPI::fromJsonValue(m_repo_url, json[QString("repo_url")]);
    m_repo_url_isSet = !json[QString("repo_url")].isNull() && m_repo_url_isValid;

    m_stop_builds_isValid = ::OpenAPI::fromJsonValue(m_stop_builds, json[QString("stop_builds")]);
    m_stop_builds_isSet = !json[QString("stop_builds")].isNull() && m_stop_builds_isValid;
}

QString OAIRepoInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepoInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_branches.size() > 0) {
        obj.insert(QString("allowed_branches"), ::OpenAPI::toJsonValue(m_allowed_branches));
    }
    if (m_cmd_isSet) {
        obj.insert(QString("cmd"), ::OpenAPI::toJsonValue(m_cmd));
    }
    if (m_deploy_key_id_isSet) {
        obj.insert(QString("deploy_key_id"), ::OpenAPI::toJsonValue(m_deploy_key_id));
    }
    if (m_dir_isSet) {
        obj.insert(QString("dir"), ::OpenAPI::toJsonValue(m_dir));
    }
    if (m_env.size() > 0) {
        obj.insert(QString("env"), ::OpenAPI::toJsonValue(m_env));
    }
    if (m_functions_dir_isSet) {
        obj.insert(QString("functions_dir"), ::OpenAPI::toJsonValue(m_functions_dir));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installation_id_isSet) {
        obj.insert(QString("installation_id"), ::OpenAPI::toJsonValue(m_installation_id));
    }
    if (m_private_logs_isSet) {
        obj.insert(QString("private_logs"), ::OpenAPI::toJsonValue(m_private_logs));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_public_repo_isSet) {
        obj.insert(QString("public_repo"), ::OpenAPI::toJsonValue(m_public_repo));
    }
    if (m_repo_branch_isSet) {
        obj.insert(QString("repo_branch"), ::OpenAPI::toJsonValue(m_repo_branch));
    }
    if (m_repo_path_isSet) {
        obj.insert(QString("repo_path"), ::OpenAPI::toJsonValue(m_repo_path));
    }
    if (m_repo_url_isSet) {
        obj.insert(QString("repo_url"), ::OpenAPI::toJsonValue(m_repo_url));
    }
    if (m_stop_builds_isSet) {
        obj.insert(QString("stop_builds"), ::OpenAPI::toJsonValue(m_stop_builds));
    }
    return obj;
}

QList<QString> OAIRepoInfo::getAllowedBranches() const {
    return m_allowed_branches;
}
void OAIRepoInfo::setAllowedBranches(const QList<QString> &allowed_branches) {
    m_allowed_branches = allowed_branches;
    m_allowed_branches_isSet = true;
}

bool OAIRepoInfo::is_allowed_branches_Set() const{
    return m_allowed_branches_isSet;
}

bool OAIRepoInfo::is_allowed_branches_Valid() const{
    return m_allowed_branches_isValid;
}

QString OAIRepoInfo::getCmd() const {
    return m_cmd;
}
void OAIRepoInfo::setCmd(const QString &cmd) {
    m_cmd = cmd;
    m_cmd_isSet = true;
}

bool OAIRepoInfo::is_cmd_Set() const{
    return m_cmd_isSet;
}

bool OAIRepoInfo::is_cmd_Valid() const{
    return m_cmd_isValid;
}

QString OAIRepoInfo::getDeployKeyId() const {
    return m_deploy_key_id;
}
void OAIRepoInfo::setDeployKeyId(const QString &deploy_key_id) {
    m_deploy_key_id = deploy_key_id;
    m_deploy_key_id_isSet = true;
}

bool OAIRepoInfo::is_deploy_key_id_Set() const{
    return m_deploy_key_id_isSet;
}

bool OAIRepoInfo::is_deploy_key_id_Valid() const{
    return m_deploy_key_id_isValid;
}

QString OAIRepoInfo::getDir() const {
    return m_dir;
}
void OAIRepoInfo::setDir(const QString &dir) {
    m_dir = dir;
    m_dir_isSet = true;
}

bool OAIRepoInfo::is_dir_Set() const{
    return m_dir_isSet;
}

bool OAIRepoInfo::is_dir_Valid() const{
    return m_dir_isValid;
}

QMap<QString, QString> OAIRepoInfo::getEnv() const {
    return m_env;
}
void OAIRepoInfo::setEnv(const QMap<QString, QString> &env) {
    m_env = env;
    m_env_isSet = true;
}

bool OAIRepoInfo::is_env_Set() const{
    return m_env_isSet;
}

bool OAIRepoInfo::is_env_Valid() const{
    return m_env_isValid;
}

QString OAIRepoInfo::getFunctionsDir() const {
    return m_functions_dir;
}
void OAIRepoInfo::setFunctionsDir(const QString &functions_dir) {
    m_functions_dir = functions_dir;
    m_functions_dir_isSet = true;
}

bool OAIRepoInfo::is_functions_dir_Set() const{
    return m_functions_dir_isSet;
}

bool OAIRepoInfo::is_functions_dir_Valid() const{
    return m_functions_dir_isValid;
}

qint32 OAIRepoInfo::getId() const {
    return m_id;
}
void OAIRepoInfo::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRepoInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRepoInfo::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRepoInfo::getInstallationId() const {
    return m_installation_id;
}
void OAIRepoInfo::setInstallationId(const qint32 &installation_id) {
    m_installation_id = installation_id;
    m_installation_id_isSet = true;
}

bool OAIRepoInfo::is_installation_id_Set() const{
    return m_installation_id_isSet;
}

bool OAIRepoInfo::is_installation_id_Valid() const{
    return m_installation_id_isValid;
}

bool OAIRepoInfo::isPrivateLogs() const {
    return m_private_logs;
}
void OAIRepoInfo::setPrivateLogs(const bool &private_logs) {
    m_private_logs = private_logs;
    m_private_logs_isSet = true;
}

bool OAIRepoInfo::is_private_logs_Set() const{
    return m_private_logs_isSet;
}

bool OAIRepoInfo::is_private_logs_Valid() const{
    return m_private_logs_isValid;
}

QString OAIRepoInfo::getProvider() const {
    return m_provider;
}
void OAIRepoInfo::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIRepoInfo::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIRepoInfo::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIRepoInfo::isPublicRepo() const {
    return m_public_repo;
}
void OAIRepoInfo::setPublicRepo(const bool &public_repo) {
    m_public_repo = public_repo;
    m_public_repo_isSet = true;
}

bool OAIRepoInfo::is_public_repo_Set() const{
    return m_public_repo_isSet;
}

bool OAIRepoInfo::is_public_repo_Valid() const{
    return m_public_repo_isValid;
}

QString OAIRepoInfo::getRepoBranch() const {
    return m_repo_branch;
}
void OAIRepoInfo::setRepoBranch(const QString &repo_branch) {
    m_repo_branch = repo_branch;
    m_repo_branch_isSet = true;
}

bool OAIRepoInfo::is_repo_branch_Set() const{
    return m_repo_branch_isSet;
}

bool OAIRepoInfo::is_repo_branch_Valid() const{
    return m_repo_branch_isValid;
}

QString OAIRepoInfo::getRepoPath() const {
    return m_repo_path;
}
void OAIRepoInfo::setRepoPath(const QString &repo_path) {
    m_repo_path = repo_path;
    m_repo_path_isSet = true;
}

bool OAIRepoInfo::is_repo_path_Set() const{
    return m_repo_path_isSet;
}

bool OAIRepoInfo::is_repo_path_Valid() const{
    return m_repo_path_isValid;
}

QString OAIRepoInfo::getRepoUrl() const {
    return m_repo_url;
}
void OAIRepoInfo::setRepoUrl(const QString &repo_url) {
    m_repo_url = repo_url;
    m_repo_url_isSet = true;
}

bool OAIRepoInfo::is_repo_url_Set() const{
    return m_repo_url_isSet;
}

bool OAIRepoInfo::is_repo_url_Valid() const{
    return m_repo_url_isValid;
}

bool OAIRepoInfo::isStopBuilds() const {
    return m_stop_builds;
}
void OAIRepoInfo::setStopBuilds(const bool &stop_builds) {
    m_stop_builds = stop_builds;
    m_stop_builds_isSet = true;
}

bool OAIRepoInfo::is_stop_builds_Set() const{
    return m_stop_builds_isSet;
}

bool OAIRepoInfo::is_stop_builds_Valid() const{
    return m_stop_builds_isValid;
}

bool OAIRepoInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cmd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_env.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_logs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_builds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepoInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
