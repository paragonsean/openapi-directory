/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildStatus_minutes.h
 *
 * 
 */

#ifndef OAIBuildStatus_minutes_H
#define OAIBuildStatus_minutes_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBuildStatus_minutes : public OAIObject {
public:
    OAIBuildStatus_minutes();
    OAIBuildStatus_minutes(QString json);
    ~OAIBuildStatus_minutes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCurrent() const;
    void setCurrent(const qint32 &current);
    bool is_current_Set() const;
    bool is_current_Valid() const;

    qint32 getCurrentAverageSec() const;
    void setCurrentAverageSec(const qint32 &current_average_sec);
    bool is_current_average_sec_Set() const;
    bool is_current_average_sec_Valid() const;

    QString getIncludedMinutes() const;
    void setIncludedMinutes(const QString &included_minutes);
    bool is_included_minutes_Set() const;
    bool is_included_minutes_Valid() const;

    QString getIncludedMinutesWithPacks() const;
    void setIncludedMinutesWithPacks(const QString &included_minutes_with_packs);
    bool is_included_minutes_with_packs_Set() const;
    bool is_included_minutes_with_packs_Valid() const;

    QString getLastUpdatedAt() const;
    void setLastUpdatedAt(const QString &last_updated_at);
    bool is_last_updated_at_Set() const;
    bool is_last_updated_at_Valid() const;

    QString getPeriodEndDate() const;
    void setPeriodEndDate(const QString &period_end_date);
    bool is_period_end_date_Set() const;
    bool is_period_end_date_Valid() const;

    QString getPeriodStartDate() const;
    void setPeriodStartDate(const QString &period_start_date);
    bool is_period_start_date_Set() const;
    bool is_period_start_date_Valid() const;

    qint32 getPrevious() const;
    void setPrevious(const qint32 &previous);
    bool is_previous_Set() const;
    bool is_previous_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_current;
    bool m_current_isSet;
    bool m_current_isValid;

    qint32 m_current_average_sec;
    bool m_current_average_sec_isSet;
    bool m_current_average_sec_isValid;

    QString m_included_minutes;
    bool m_included_minutes_isSet;
    bool m_included_minutes_isValid;

    QString m_included_minutes_with_packs;
    bool m_included_minutes_with_packs_isSet;
    bool m_included_minutes_with_packs_isValid;

    QString m_last_updated_at;
    bool m_last_updated_at_isSet;
    bool m_last_updated_at_isValid;

    QString m_period_end_date;
    bool m_period_end_date_isSet;
    bool m_period_end_date_isValid;

    QString m_period_start_date;
    bool m_period_start_date_isSet;
    bool m_period_start_date_isValid;

    qint32 m_previous;
    bool m_previous_isSet;
    bool m_previous_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildStatus_minutes)

#endif // OAIBuildStatus_minutes_H
