/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISplitTestApi_H
#define OAI_OAISplitTestApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISplitTest.h"
#include "OAISplitTestSetup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISplitTestApi : public QObject {
    Q_OBJECT

public:
    OAISplitTestApi(const int timeOut = 0);
    ~OAISplitTestApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  branch_tests OAISplitTestSetup [required]
    */
    virtual void createSplitTest(const QString &site_id, const OAISplitTestSetup &branch_tests);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  split_test_id QString [required]
    */
    virtual void disableSplitTest(const QString &site_id, const QString &split_test_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  split_test_id QString [required]
    */
    virtual void enableSplitTest(const QString &site_id, const QString &split_test_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  split_test_id QString [required]
    */
    virtual void getSplitTest(const QString &site_id, const QString &split_test_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void getSplitTests(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  split_test_id QString [required]
    * @param[in]  branch_tests OAISplitTestSetup [required]
    */
    virtual void updateSplitTest(const QString &site_id, const QString &split_test_id, const OAISplitTestSetup &branch_tests);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSplitTestCallback(OAIHttpRequestWorker *worker);
    void disableSplitTestCallback(OAIHttpRequestWorker *worker);
    void enableSplitTestCallback(OAIHttpRequestWorker *worker);
    void getSplitTestCallback(OAIHttpRequestWorker *worker);
    void getSplitTestsCallback(OAIHttpRequestWorker *worker);
    void updateSplitTestCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSplitTestSignal(OAISplitTest summary);
    void disableSplitTestSignal();
    void enableSplitTestSignal();
    void getSplitTestSignal(OAISplitTest summary);
    void getSplitTestsSignal(QList<OAISplitTest> summary);
    void updateSplitTestSignal(OAISplitTest summary);


    void createSplitTestSignalFull(OAIHttpRequestWorker *worker, OAISplitTest summary);
    void disableSplitTestSignalFull(OAIHttpRequestWorker *worker);
    void enableSplitTestSignalFull(OAIHttpRequestWorker *worker);
    void getSplitTestSignalFull(OAIHttpRequestWorker *worker, OAISplitTest summary);
    void getSplitTestsSignalFull(OAIHttpRequestWorker *worker, QList<OAISplitTest> summary);
    void updateSplitTestSignalFull(OAIHttpRequestWorker *worker, OAISplitTest summary);

    Q_DECL_DEPRECATED_X("Use createSplitTestSignalError() instead")
    void createSplitTestSignalE(OAISplitTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSplitTestSignalError(OAISplitTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableSplitTestSignalError() instead")
    void disableSplitTestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableSplitTestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableSplitTestSignalError() instead")
    void enableSplitTestSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableSplitTestSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSplitTestSignalError() instead")
    void getSplitTestSignalE(OAISplitTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSplitTestSignalError(OAISplitTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSplitTestsSignalError() instead")
    void getSplitTestsSignalE(QList<OAISplitTest> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSplitTestsSignalError(QList<OAISplitTest> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSplitTestSignalError() instead")
    void updateSplitTestSignalE(OAISplitTest summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSplitTestSignalError(OAISplitTest summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSplitTestSignalErrorFull() instead")
    void createSplitTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSplitTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableSplitTestSignalErrorFull() instead")
    void disableSplitTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableSplitTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableSplitTestSignalErrorFull() instead")
    void enableSplitTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableSplitTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSplitTestSignalErrorFull() instead")
    void getSplitTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSplitTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSplitTestsSignalErrorFull() instead")
    void getSplitTestsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSplitTestsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSplitTestSignalErrorFull() instead")
    void updateSplitTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSplitTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
