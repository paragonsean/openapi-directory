/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeployApi_H
#define OAI_OAIDeployApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeploy.h"
#include "OAIDeployFiles.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeployApi : public QObject {
    Q_OBJECT

public:
    OAIDeployApi(const int timeOut = 0);
    ~OAIDeployApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  deploy_id QString [required]
    */
    virtual void cancelSiteDeploy(const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  deploy OAIDeployFiles [required]
    * @param[in]  deploy_previews bool [optional]
    * @param[in]  production bool [optional]
    * @param[in]  state QString [optional]
    * @param[in]  branch QString [optional]
    * @param[in]  latest_published bool [optional]
    * @param[in]  title QString [optional]
    */
    virtual void createSiteDeploy(const QString &site_id, const OAIDeployFiles &deploy, const ::OpenAPI::OptionalParam<bool> &deploy_previews = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &production = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &latest_published = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  deploy_id QString [required]
    */
    virtual void deleteDeploy(const QString &deploy_id);

    /**
    * @param[in]  deploy_id QString [required]
    * @param[in]  site_id QString [required]
    */
    virtual void deleteSiteDeploy(const QString &deploy_id, const QString &site_id);

    /**
    * @param[in]  deploy_id QString [required]
    */
    virtual void getDeploy(const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  deploy_id QString [required]
    */
    virtual void getSiteDeploy(const QString &site_id, const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  deploy_previews bool [optional]
    * @param[in]  production bool [optional]
    * @param[in]  state QString [optional]
    * @param[in]  branch QString [optional]
    * @param[in]  latest_published bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listSiteDeploys(const QString &site_id, const ::OpenAPI::OptionalParam<bool> &deploy_previews = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &production = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &branch = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &latest_published = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  deploy_id QString [required]
    */
    virtual void lockDeploy(const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  deploy_id QString [required]
    */
    virtual void restoreSiteDeploy(const QString &site_id, const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void rollbackSiteDeploy(const QString &site_id);

    /**
    * @param[in]  deploy_id QString [required]
    */
    virtual void unlockDeploy(const QString &deploy_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  deploy_id QString [required]
    * @param[in]  deploy OAIDeployFiles [required]
    */
    virtual void updateSiteDeploy(const QString &site_id, const QString &deploy_id, const OAIDeployFiles &deploy);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelSiteDeployCallback(OAIHttpRequestWorker *worker);
    void createSiteDeployCallback(OAIHttpRequestWorker *worker);
    void deleteDeployCallback(OAIHttpRequestWorker *worker);
    void deleteSiteDeployCallback(OAIHttpRequestWorker *worker);
    void getDeployCallback(OAIHttpRequestWorker *worker);
    void getSiteDeployCallback(OAIHttpRequestWorker *worker);
    void listSiteDeploysCallback(OAIHttpRequestWorker *worker);
    void lockDeployCallback(OAIHttpRequestWorker *worker);
    void restoreSiteDeployCallback(OAIHttpRequestWorker *worker);
    void rollbackSiteDeployCallback(OAIHttpRequestWorker *worker);
    void unlockDeployCallback(OAIHttpRequestWorker *worker);
    void updateSiteDeployCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelSiteDeploySignal(OAIDeploy summary);
    void createSiteDeploySignal(OAIDeploy summary);
    void deleteDeploySignal();
    void deleteSiteDeploySignal();
    void getDeploySignal(OAIDeploy summary);
    void getSiteDeploySignal(OAIDeploy summary);
    void listSiteDeploysSignal(QList<OAIDeploy> summary);
    void lockDeploySignal(OAIDeploy summary);
    void restoreSiteDeploySignal(OAIDeploy summary);
    void rollbackSiteDeploySignal();
    void unlockDeploySignal(OAIDeploy summary);
    void updateSiteDeploySignal(OAIDeploy summary);


    void cancelSiteDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void createSiteDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void deleteDeploySignalFull(OAIHttpRequestWorker *worker);
    void deleteSiteDeploySignalFull(OAIHttpRequestWorker *worker);
    void getDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void getSiteDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void listSiteDeploysSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeploy> summary);
    void lockDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void restoreSiteDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void rollbackSiteDeploySignalFull(OAIHttpRequestWorker *worker);
    void unlockDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);
    void updateSiteDeploySignalFull(OAIHttpRequestWorker *worker, OAIDeploy summary);

    Q_DECL_DEPRECATED_X("Use cancelSiteDeploySignalError() instead")
    void cancelSiteDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSiteDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteDeploySignalError() instead")
    void createSiteDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeploySignalError() instead")
    void deleteDeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteDeploySignalError() instead")
    void deleteSiteDeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteDeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploySignalError() instead")
    void getDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteDeploySignalError() instead")
    void getSiteDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteDeploysSignalError() instead")
    void listSiteDeploysSignalE(QList<OAIDeploy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteDeploysSignalError(QList<OAIDeploy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockDeploySignalError() instead")
    void lockDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lockDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSiteDeploySignalError() instead")
    void restoreSiteDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSiteDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackSiteDeploySignalError() instead")
    void rollbackSiteDeploySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackSiteDeploySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockDeploySignalError() instead")
    void unlockDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteDeploySignalError() instead")
    void updateSiteDeploySignalE(OAIDeploy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteDeploySignalError(OAIDeploy summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelSiteDeploySignalErrorFull() instead")
    void cancelSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteDeploySignalErrorFull() instead")
    void createSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeploySignalErrorFull() instead")
    void deleteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteDeploySignalErrorFull() instead")
    void deleteSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeploySignalErrorFull() instead")
    void getDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteDeploySignalErrorFull() instead")
    void getSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteDeploysSignalErrorFull() instead")
    void listSiteDeploysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteDeploysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lockDeploySignalErrorFull() instead")
    void lockDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lockDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreSiteDeploySignalErrorFull() instead")
    void restoreSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rollbackSiteDeploySignalErrorFull() instead")
    void rollbackSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rollbackSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlockDeploySignalErrorFull() instead")
    void unlockDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlockDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteDeploySignalErrorFull() instead")
    void updateSiteDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
