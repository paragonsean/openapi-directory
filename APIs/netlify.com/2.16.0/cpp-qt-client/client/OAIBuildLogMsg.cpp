/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildLogMsg.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildLogMsg::OAIBuildLogMsg(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildLogMsg::OAIBuildLogMsg() {
    this->initializeModel();
}

OAIBuildLogMsg::~OAIBuildLogMsg() {}

void OAIBuildLogMsg::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;
}

void OAIBuildLogMsg::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildLogMsg::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;
}

QString OAIBuildLogMsg::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildLogMsg::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    return obj;
}

bool OAIBuildLogMsg::isError() const {
    return m_error;
}
void OAIBuildLogMsg::setError(const bool &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIBuildLogMsg::is_error_Set() const{
    return m_error_isSet;
}

bool OAIBuildLogMsg::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIBuildLogMsg::getMessage() const {
    return m_message;
}
void OAIBuildLogMsg::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBuildLogMsg::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBuildLogMsg::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBuildLogMsg::getSection() const {
    return m_section;
}
void OAIBuildLogMsg::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAIBuildLogMsg::is_section_Set() const{
    return m_section_isSet;
}

bool OAIBuildLogMsg::is_section_Valid() const{
    return m_section_isValid;
}

bool OAIBuildLogMsg::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildLogMsg::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
