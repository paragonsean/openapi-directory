/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDeployKeyApi_H
#define OAI_OAIDeployKeyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeployKey.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDeployKeyApi : public QObject {
    Q_OBJECT

public:
    OAIDeployKeyApi(const int timeOut = 0);
    ~OAIDeployKeyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void createDeployKey();

    /**
    * @param[in]  key_id QString [required]
    */
    virtual void deleteDeployKey(const QString &key_id);

    /**
    * @param[in]  key_id QString [required]
    */
    virtual void getDeployKey(const QString &key_id);


    virtual void listDeployKeys();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createDeployKeyCallback(OAIHttpRequestWorker *worker);
    void deleteDeployKeyCallback(OAIHttpRequestWorker *worker);
    void getDeployKeyCallback(OAIHttpRequestWorker *worker);
    void listDeployKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createDeployKeySignal(OAIDeployKey summary);
    void deleteDeployKeySignal();
    void getDeployKeySignal(OAIDeployKey summary);
    void listDeployKeysSignal(QList<OAIDeployKey> summary);


    void createDeployKeySignalFull(OAIHttpRequestWorker *worker, OAIDeployKey summary);
    void deleteDeployKeySignalFull(OAIHttpRequestWorker *worker);
    void getDeployKeySignalFull(OAIHttpRequestWorker *worker, OAIDeployKey summary);
    void listDeployKeysSignalFull(OAIHttpRequestWorker *worker, QList<OAIDeployKey> summary);

    Q_DECL_DEPRECATED_X("Use createDeployKeySignalError() instead")
    void createDeployKeySignalE(OAIDeployKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployKeySignalError(OAIDeployKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployKeySignalError() instead")
    void deleteDeployKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployKeySignalError() instead")
    void getDeployKeySignalE(OAIDeployKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployKeySignalError(OAIDeployKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployKeysSignalError() instead")
    void listDeployKeysSignalE(QList<OAIDeployKey> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployKeysSignalError(QList<OAIDeployKey> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createDeployKeySignalErrorFull() instead")
    void createDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDeployKeySignalErrorFull() instead")
    void deleteDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDeployKeySignalErrorFull() instead")
    void getDeployKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDeployKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDeployKeysSignalErrorFull() instead")
    void listDeployKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDeployKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
