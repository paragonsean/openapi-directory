/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildHook::OAIBuildHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildHook::OAIBuildHook() {
    this->initializeModel();
}

OAIBuildHook::~OAIBuildHook() {}

void OAIBuildHook::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIBuildHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildHook::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIBuildHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildHook::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIBuildHook::getBranch() const {
    return m_branch;
}
void OAIBuildHook::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuildHook::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuildHook::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIBuildHook::getCreatedAt() const {
    return m_created_at;
}
void OAIBuildHook::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBuildHook::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBuildHook::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBuildHook::getId() const {
    return m_id;
}
void OAIBuildHook::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBuildHook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBuildHook::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBuildHook::getSiteId() const {
    return m_site_id;
}
void OAIBuildHook::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIBuildHook::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIBuildHook::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIBuildHook::getTitle() const {
    return m_title;
}
void OAIBuildHook::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBuildHook::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBuildHook::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIBuildHook::getUrl() const {
    return m_url;
}
void OAIBuildHook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIBuildHook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIBuildHook::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIBuildHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
