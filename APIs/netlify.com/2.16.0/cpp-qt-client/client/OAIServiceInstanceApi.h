/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceInstanceApi_H
#define OAI_OAIServiceInstanceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIObject.h"
#include "OAIServiceInstance.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceInstanceApi : public QObject {
    Q_OBJECT

public:
    OAIServiceInstanceApi(const int timeOut = 0);
    ~OAIServiceInstanceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  addon QString [required]
    * @param[in]  config OAIObject [required]
    */
    virtual void createServiceInstance(const QString &site_id, const QString &addon, const OAIObject &config);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  addon QString [required]
    * @param[in]  instance_id QString [required]
    */
    virtual void deleteServiceInstance(const QString &site_id, const QString &addon, const QString &instance_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void listServiceInstancesForSite(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  addon QString [required]
    * @param[in]  instance_id QString [required]
    */
    virtual void showServiceInstance(const QString &site_id, const QString &addon, const QString &instance_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  addon QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  config OAIObject [required]
    */
    virtual void updateServiceInstance(const QString &site_id, const QString &addon, const QString &instance_id, const OAIObject &config);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createServiceInstanceCallback(OAIHttpRequestWorker *worker);
    void deleteServiceInstanceCallback(OAIHttpRequestWorker *worker);
    void listServiceInstancesForSiteCallback(OAIHttpRequestWorker *worker);
    void showServiceInstanceCallback(OAIHttpRequestWorker *worker);
    void updateServiceInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createServiceInstanceSignal(OAIServiceInstance summary);
    void deleteServiceInstanceSignal();
    void listServiceInstancesForSiteSignal(QList<OAIServiceInstance> summary);
    void showServiceInstanceSignal(OAIServiceInstance summary);
    void updateServiceInstanceSignal();


    void createServiceInstanceSignalFull(OAIHttpRequestWorker *worker, OAIServiceInstance summary);
    void deleteServiceInstanceSignalFull(OAIHttpRequestWorker *worker);
    void listServiceInstancesForSiteSignalFull(OAIHttpRequestWorker *worker, QList<OAIServiceInstance> summary);
    void showServiceInstanceSignalFull(OAIHttpRequestWorker *worker, OAIServiceInstance summary);
    void updateServiceInstanceSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createServiceInstanceSignalError() instead")
    void createServiceInstanceSignalE(OAIServiceInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceInstanceSignalError(OAIServiceInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceInstanceSignalError() instead")
    void deleteServiceInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceInstancesForSiteSignalError() instead")
    void listServiceInstancesForSiteSignalE(QList<OAIServiceInstance> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInstancesForSiteSignalError(QList<OAIServiceInstance> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceInstanceSignalError() instead")
    void showServiceInstanceSignalE(OAIServiceInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceInstanceSignalError(OAIServiceInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceInstanceSignalError() instead")
    void updateServiceInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createServiceInstanceSignalErrorFull() instead")
    void createServiceInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServiceInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServiceInstanceSignalErrorFull() instead")
    void deleteServiceInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServiceInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listServiceInstancesForSiteSignalErrorFull() instead")
    void listServiceInstancesForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listServiceInstancesForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showServiceInstanceSignalErrorFull() instead")
    void showServiceInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showServiceInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServiceInstanceSignalErrorFull() instead")
    void updateServiceInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServiceInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
