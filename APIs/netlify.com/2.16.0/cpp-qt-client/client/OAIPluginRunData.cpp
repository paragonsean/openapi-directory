/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginRunData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginRunData::OAIPluginRunData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginRunData::OAIPluginRunData() {
    this->initializeModel();
}

OAIPluginRunData::~OAIPluginRunData() {}

void OAIPluginRunData::initializeModel() {

    m_package_isSet = false;
    m_package_isValid = false;

    m_reporting_event_isSet = false;
    m_reporting_event_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPluginRunData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginRunData::fromJsonObject(QJsonObject json) {

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_reporting_event_isValid = ::OpenAPI::fromJsonValue(m_reporting_event, json[QString("reporting_event")]);
    m_reporting_event_isSet = !json[QString("reporting_event")].isNull() && m_reporting_event_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPluginRunData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginRunData::asJsonObject() const {
    QJsonObject obj;
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_reporting_event_isSet) {
        obj.insert(QString("reporting_event"), ::OpenAPI::toJsonValue(m_reporting_event));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIPluginRunData::getPackage() const {
    return m_package;
}
void OAIPluginRunData::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPluginRunData::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPluginRunData::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIPluginRunData::getReportingEvent() const {
    return m_reporting_event;
}
void OAIPluginRunData::setReportingEvent(const QString &reporting_event) {
    m_reporting_event = reporting_event;
    m_reporting_event_isSet = true;
}

bool OAIPluginRunData::is_reporting_event_Set() const{
    return m_reporting_event_isSet;
}

bool OAIPluginRunData::is_reporting_event_Valid() const{
    return m_reporting_event_isValid;
}

QString OAIPluginRunData::getState() const {
    return m_state;
}
void OAIPluginRunData::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPluginRunData::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPluginRunData::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPluginRunData::getSummary() const {
    return m_summary;
}
void OAIPluginRunData::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPluginRunData::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPluginRunData::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPluginRunData::getText() const {
    return m_text;
}
void OAIPluginRunData::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPluginRunData::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPluginRunData::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPluginRunData::getTitle() const {
    return m_title;
}
void OAIPluginRunData::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPluginRunData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPluginRunData::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPluginRunData::getVersion() const {
    return m_version;
}
void OAIPluginRunData::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPluginRunData::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPluginRunData::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPluginRunData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginRunData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
