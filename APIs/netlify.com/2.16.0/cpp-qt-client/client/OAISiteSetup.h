/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISiteSetup.h
 *
 * 
 */

#ifndef OAISiteSetup_H
#define OAISiteSetup_H

#include <QJsonObject>

#include "OAIDeploy.h"
#include "OAIObject.h"
#include "OAIRepoInfo.h"
#include "OAISite_default_hooks_data.h"
#include "OAISite_processing_settings.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRepoInfo;
class OAISite_default_hooks_data;
class OAISite_processing_settings;
class OAIDeploy;

class OAISiteSetup : public OAIObject {
public:
    OAISiteSetup();
    OAISiteSetup(QString json);
    ~OAISiteSetup() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountName() const;
    void setAccountName(const QString &account_name);
    bool is_account_name_Set() const;
    bool is_account_name_Valid() const;

    QString getAccountSlug() const;
    void setAccountSlug(const QString &account_slug);
    bool is_account_slug_Set() const;
    bool is_account_slug_Valid() const;

    QString getAdminUrl() const;
    void setAdminUrl(const QString &admin_url);
    bool is_admin_url_Set() const;
    bool is_admin_url_Valid() const;

    QString getBuildImage() const;
    void setBuildImage(const QString &build_image);
    bool is_build_image_Set() const;
    bool is_build_image_Valid() const;

    OAIRepoInfo getBuildSettings() const;
    void setBuildSettings(const OAIRepoInfo &build_settings);
    bool is_build_settings_Set() const;
    bool is_build_settings_Valid() const;

    QMap<QString, OAIObject> getCapabilities() const;
    void setCapabilities(const QMap<QString, OAIObject> &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getCustomDomain() const;
    void setCustomDomain(const QString &custom_domain);
    bool is_custom_domain_Set() const;
    bool is_custom_domain_Valid() const;

    OAISite_default_hooks_data getDefaultHooksData() const;
    void setDefaultHooksData(const OAISite_default_hooks_data &default_hooks_data);
    bool is_default_hooks_data_Set() const;
    bool is_default_hooks_data_Valid() const;

    QString getDeployHook() const;
    void setDeployHook(const QString &deploy_hook);
    bool is_deploy_hook_Set() const;
    bool is_deploy_hook_Valid() const;

    QString getDeployUrl() const;
    void setDeployUrl(const QString &deploy_url);
    bool is_deploy_url_Set() const;
    bool is_deploy_url_Valid() const;

    QList<QString> getDomainAliases() const;
    void setDomainAliases(const QList<QString> &domain_aliases);
    bool is_domain_aliases_Set() const;
    bool is_domain_aliases_Valid() const;

    bool isForceSsl() const;
    void setForceSsl(const bool &force_ssl);
    bool is_force_ssl_Set() const;
    bool is_force_ssl_Valid() const;

    QString getGitProvider() const;
    void setGitProvider(const QString &git_provider);
    bool is_git_provider_Set() const;
    bool is_git_provider_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getIdDomain() const;
    void setIdDomain(const QString &id_domain);
    bool is_id_domain_Set() const;
    bool is_id_domain_Valid() const;

    bool isManagedDns() const;
    void setManagedDns(const bool &managed_dns);
    bool is_managed_dns_Set() const;
    bool is_managed_dns_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotificationEmail() const;
    void setNotificationEmail(const QString &notification_email);
    bool is_notification_email_Set() const;
    bool is_notification_email_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getPlan() const;
    void setPlan(const QString &plan);
    bool is_plan_Set() const;
    bool is_plan_Valid() const;

    QString getPrerender() const;
    void setPrerender(const QString &prerender);
    bool is_prerender_Set() const;
    bool is_prerender_Valid() const;

    OAISite_processing_settings getProcessingSettings() const;
    void setProcessingSettings(const OAISite_processing_settings &processing_settings);
    bool is_processing_settings_Set() const;
    bool is_processing_settings_Valid() const;

    OAIDeploy getPublishedDeploy() const;
    void setPublishedDeploy(const OAIDeploy &published_deploy);
    bool is_published_deploy_Set() const;
    bool is_published_deploy_Valid() const;

    QString getScreenshotUrl() const;
    void setScreenshotUrl(const QString &screenshot_url);
    bool is_screenshot_url_Set() const;
    bool is_screenshot_url_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    bool isSsl() const;
    void setSsl(const bool &ssl);
    bool is_ssl_Set() const;
    bool is_ssl_Valid() const;

    QString getSslUrl() const;
    void setSslUrl(const QString &ssl_url);
    bool is_ssl_url_Set() const;
    bool is_ssl_url_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    OAIRepoInfo getRepo() const;
    void setRepo(const OAIRepoInfo &repo);
    bool is_repo_Set() const;
    bool is_repo_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_name;
    bool m_account_name_isSet;
    bool m_account_name_isValid;

    QString m_account_slug;
    bool m_account_slug_isSet;
    bool m_account_slug_isValid;

    QString m_admin_url;
    bool m_admin_url_isSet;
    bool m_admin_url_isValid;

    QString m_build_image;
    bool m_build_image_isSet;
    bool m_build_image_isValid;

    OAIRepoInfo m_build_settings;
    bool m_build_settings_isSet;
    bool m_build_settings_isValid;

    QMap<QString, OAIObject> m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_custom_domain;
    bool m_custom_domain_isSet;
    bool m_custom_domain_isValid;

    OAISite_default_hooks_data m_default_hooks_data;
    bool m_default_hooks_data_isSet;
    bool m_default_hooks_data_isValid;

    QString m_deploy_hook;
    bool m_deploy_hook_isSet;
    bool m_deploy_hook_isValid;

    QString m_deploy_url;
    bool m_deploy_url_isSet;
    bool m_deploy_url_isValid;

    QList<QString> m_domain_aliases;
    bool m_domain_aliases_isSet;
    bool m_domain_aliases_isValid;

    bool m_force_ssl;
    bool m_force_ssl_isSet;
    bool m_force_ssl_isValid;

    QString m_git_provider;
    bool m_git_provider_isSet;
    bool m_git_provider_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_id_domain;
    bool m_id_domain_isSet;
    bool m_id_domain_isValid;

    bool m_managed_dns;
    bool m_managed_dns_isSet;
    bool m_managed_dns_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notification_email;
    bool m_notification_email_isSet;
    bool m_notification_email_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_plan;
    bool m_plan_isSet;
    bool m_plan_isValid;

    QString m_prerender;
    bool m_prerender_isSet;
    bool m_prerender_isValid;

    OAISite_processing_settings m_processing_settings;
    bool m_processing_settings_isSet;
    bool m_processing_settings_isValid;

    OAIDeploy m_published_deploy;
    bool m_published_deploy_isSet;
    bool m_published_deploy_isValid;

    QString m_screenshot_url;
    bool m_screenshot_url_isSet;
    bool m_screenshot_url_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    bool m_ssl;
    bool m_ssl_isSet;
    bool m_ssl_isValid;

    QString m_ssl_url;
    bool m_ssl_url_isSet;
    bool m_ssl_url_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    OAIRepoInfo m_repo;
    bool m_repo_isSet;
    bool m_repo_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISiteSetup)

#endif // OAISiteSetup_H
