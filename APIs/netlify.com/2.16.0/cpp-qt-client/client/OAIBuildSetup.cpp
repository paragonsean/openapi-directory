/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildSetup::OAIBuildSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildSetup::OAIBuildSetup() {
    this->initializeModel();
}

OAIBuildSetup::~OAIBuildSetup() {}

void OAIBuildSetup::initializeModel() {

    m_clear_cache_isSet = false;
    m_clear_cache_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;
}

void OAIBuildSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildSetup::fromJsonObject(QJsonObject json) {

    m_clear_cache_isValid = ::OpenAPI::fromJsonValue(m_clear_cache, json[QString("clear_cache")]);
    m_clear_cache_isSet = !json[QString("clear_cache")].isNull() && m_clear_cache_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;
}

QString OAIBuildSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_clear_cache_isSet) {
        obj.insert(QString("clear_cache"), ::OpenAPI::toJsonValue(m_clear_cache));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    return obj;
}

bool OAIBuildSetup::isClearCache() const {
    return m_clear_cache;
}
void OAIBuildSetup::setClearCache(const bool &clear_cache) {
    m_clear_cache = clear_cache;
    m_clear_cache_isSet = true;
}

bool OAIBuildSetup::is_clear_cache_Set() const{
    return m_clear_cache_isSet;
}

bool OAIBuildSetup::is_clear_cache_Valid() const{
    return m_clear_cache_isValid;
}

QString OAIBuildSetup::getImage() const {
    return m_image;
}
void OAIBuildSetup::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIBuildSetup::is_image_Set() const{
    return m_image_isSet;
}

bool OAIBuildSetup::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIBuildSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clear_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
