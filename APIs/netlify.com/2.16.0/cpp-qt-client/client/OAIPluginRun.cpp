/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPluginRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPluginRun::OAIPluginRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPluginRun::OAIPluginRun() {
    this->initializeModel();
}

OAIPluginRun::~OAIPluginRun() {}

void OAIPluginRun::initializeModel() {

    m_package_isSet = false;
    m_package_isValid = false;

    m_reporting_event_isSet = false;
    m_reporting_event_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_deploy_id_isSet = false;
    m_deploy_id_isValid = false;
}

void OAIPluginRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPluginRun::fromJsonObject(QJsonObject json) {

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_reporting_event_isValid = ::OpenAPI::fromJsonValue(m_reporting_event, json[QString("reporting_event")]);
    m_reporting_event_isSet = !json[QString("reporting_event")].isNull() && m_reporting_event_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_deploy_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_id, json[QString("deploy_id")]);
    m_deploy_id_isSet = !json[QString("deploy_id")].isNull() && m_deploy_id_isValid;
}

QString OAIPluginRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPluginRun::asJsonObject() const {
    QJsonObject obj;
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_reporting_event_isSet) {
        obj.insert(QString("reporting_event"), ::OpenAPI::toJsonValue(m_reporting_event));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_deploy_id_isSet) {
        obj.insert(QString("deploy_id"), ::OpenAPI::toJsonValue(m_deploy_id));
    }
    return obj;
}

QString OAIPluginRun::getPackage() const {
    return m_package;
}
void OAIPluginRun::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPluginRun::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPluginRun::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIPluginRun::getReportingEvent() const {
    return m_reporting_event;
}
void OAIPluginRun::setReportingEvent(const QString &reporting_event) {
    m_reporting_event = reporting_event;
    m_reporting_event_isSet = true;
}

bool OAIPluginRun::is_reporting_event_Set() const{
    return m_reporting_event_isSet;
}

bool OAIPluginRun::is_reporting_event_Valid() const{
    return m_reporting_event_isValid;
}

QString OAIPluginRun::getState() const {
    return m_state;
}
void OAIPluginRun::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPluginRun::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPluginRun::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPluginRun::getSummary() const {
    return m_summary;
}
void OAIPluginRun::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPluginRun::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPluginRun::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPluginRun::getText() const {
    return m_text;
}
void OAIPluginRun::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPluginRun::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPluginRun::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIPluginRun::getTitle() const {
    return m_title;
}
void OAIPluginRun::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPluginRun::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPluginRun::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPluginRun::getVersion() const {
    return m_version;
}
void OAIPluginRun::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPluginRun::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPluginRun::is_version_Valid() const{
    return m_version_isValid;
}

QString OAIPluginRun::getDeployId() const {
    return m_deploy_id;
}
void OAIPluginRun::setDeployId(const QString &deploy_id) {
    m_deploy_id = deploy_id;
    m_deploy_id_isSet = true;
}

bool OAIPluginRun::is_deploy_id_Set() const{
    return m_deploy_id_isSet;
}

bool OAIPluginRun::is_deploy_id_Valid() const{
    return m_deploy_id_isValid;
}

bool OAIPluginRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reporting_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPluginRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
