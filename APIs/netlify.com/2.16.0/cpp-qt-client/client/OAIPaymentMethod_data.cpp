/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod_data.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod_data::OAIPaymentMethod_data(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod_data::OAIPaymentMethod_data() {
    this->initializeModel();
}

OAIPaymentMethod_data::~OAIPaymentMethod_data() {}

void OAIPaymentMethod_data::initializeModel() {

    m_card_type_isSet = false;
    m_card_type_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_last4_isSet = false;
    m_last4_isValid = false;
}

void OAIPaymentMethod_data::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethod_data::fromJsonObject(QJsonObject json) {

    m_card_type_isValid = ::OpenAPI::fromJsonValue(m_card_type, json[QString("card_type")]);
    m_card_type_isSet = !json[QString("card_type")].isNull() && m_card_type_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_last4_isValid = ::OpenAPI::fromJsonValue(m_last4, json[QString("last4")]);
    m_last4_isSet = !json[QString("last4")].isNull() && m_last4_isValid;
}

QString OAIPaymentMethod_data::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethod_data::asJsonObject() const {
    QJsonObject obj;
    if (m_card_type_isSet) {
        obj.insert(QString("card_type"), ::OpenAPI::toJsonValue(m_card_type));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_last4_isSet) {
        obj.insert(QString("last4"), ::OpenAPI::toJsonValue(m_last4));
    }
    return obj;
}

QString OAIPaymentMethod_data::getCardType() const {
    return m_card_type;
}
void OAIPaymentMethod_data::setCardType(const QString &card_type) {
    m_card_type = card_type;
    m_card_type_isSet = true;
}

bool OAIPaymentMethod_data::is_card_type_Set() const{
    return m_card_type_isSet;
}

bool OAIPaymentMethod_data::is_card_type_Valid() const{
    return m_card_type_isValid;
}

QString OAIPaymentMethod_data::getEmail() const {
    return m_email;
}
void OAIPaymentMethod_data::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPaymentMethod_data::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPaymentMethod_data::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIPaymentMethod_data::getLast4() const {
    return m_last4;
}
void OAIPaymentMethod_data::setLast4(const QString &last4) {
    m_last4 = last4;
    m_last4_isSet = true;
}

bool OAIPaymentMethod_data::is_last4_Set() const{
    return m_last4_isSet;
}

bool OAIPaymentMethod_data::is_last4_Valid() const{
    return m_last4_isValid;
}

bool OAIPaymentMethod_data::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last4_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethod_data::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
