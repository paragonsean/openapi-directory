/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployFiles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployFiles::OAIDeployFiles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployFiles::OAIDeployFiles() {
    this->initializeModel();
}

OAIDeployFiles::~OAIDeployFiles() {}

void OAIDeployFiles::initializeModel() {

    m_async_isSet = false;
    m_async_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_function_schedules_isSet = false;
    m_function_schedules_isValid = false;

    m_functions_isSet = false;
    m_functions_isValid = false;

    m_functions_config_isSet = false;
    m_functions_config_isValid = false;
}

void OAIDeployFiles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployFiles::fromJsonObject(QJsonObject json) {

    m_async_isValid = ::OpenAPI::fromJsonValue(m_async, json[QString("async")]);
    m_async_isSet = !json[QString("async")].isNull() && m_async_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_function_schedules_isValid = ::OpenAPI::fromJsonValue(m_function_schedules, json[QString("function_schedules")]);
    m_function_schedules_isSet = !json[QString("function_schedules")].isNull() && m_function_schedules_isValid;

    m_functions_isValid = ::OpenAPI::fromJsonValue(m_functions, json[QString("functions")]);
    m_functions_isSet = !json[QString("functions")].isNull() && m_functions_isValid;

    m_functions_config_isValid = ::OpenAPI::fromJsonValue(m_functions_config, json[QString("functions_config")]);
    m_functions_config_isSet = !json[QString("functions_config")].isNull() && m_functions_config_isValid;
}

QString OAIDeployFiles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployFiles::asJsonObject() const {
    QJsonObject obj;
    if (m_async_isSet) {
        obj.insert(QString("async"), ::OpenAPI::toJsonValue(m_async));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_files_isSet) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_framework_isSet) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_function_schedules.size() > 0) {
        obj.insert(QString("function_schedules"), ::OpenAPI::toJsonValue(m_function_schedules));
    }
    if (m_functions_isSet) {
        obj.insert(QString("functions"), ::OpenAPI::toJsonValue(m_functions));
    }
    if (m_functions_config.size() > 0) {
        obj.insert(QString("functions_config"), ::OpenAPI::toJsonValue(m_functions_config));
    }
    return obj;
}

bool OAIDeployFiles::isAsync() const {
    return m_async;
}
void OAIDeployFiles::setAsync(const bool &async) {
    m_async = async;
    m_async_isSet = true;
}

bool OAIDeployFiles::is_async_Set() const{
    return m_async_isSet;
}

bool OAIDeployFiles::is_async_Valid() const{
    return m_async_isValid;
}

QString OAIDeployFiles::getBranch() const {
    return m_branch;
}
void OAIDeployFiles::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIDeployFiles::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIDeployFiles::is_branch_Valid() const{
    return m_branch_isValid;
}

bool OAIDeployFiles::isDraft() const {
    return m_draft;
}
void OAIDeployFiles::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIDeployFiles::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIDeployFiles::is_draft_Valid() const{
    return m_draft_isValid;
}

OAIObject OAIDeployFiles::getFiles() const {
    return m_files;
}
void OAIDeployFiles::setFiles(const OAIObject &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIDeployFiles::is_files_Set() const{
    return m_files_isSet;
}

bool OAIDeployFiles::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIDeployFiles::getFramework() const {
    return m_framework;
}
void OAIDeployFiles::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIDeployFiles::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIDeployFiles::is_framework_Valid() const{
    return m_framework_isValid;
}

QList<OAIFunctionSchedule> OAIDeployFiles::getFunctionSchedules() const {
    return m_function_schedules;
}
void OAIDeployFiles::setFunctionSchedules(const QList<OAIFunctionSchedule> &function_schedules) {
    m_function_schedules = function_schedules;
    m_function_schedules_isSet = true;
}

bool OAIDeployFiles::is_function_schedules_Set() const{
    return m_function_schedules_isSet;
}

bool OAIDeployFiles::is_function_schedules_Valid() const{
    return m_function_schedules_isValid;
}

OAIObject OAIDeployFiles::getFunctions() const {
    return m_functions;
}
void OAIDeployFiles::setFunctions(const OAIObject &functions) {
    m_functions = functions;
    m_functions_isSet = true;
}

bool OAIDeployFiles::is_functions_Set() const{
    return m_functions_isSet;
}

bool OAIDeployFiles::is_functions_Valid() const{
    return m_functions_isValid;
}

QMap<QString, OAIFunctionConfig> OAIDeployFiles::getFunctionsConfig() const {
    return m_functions_config;
}
void OAIDeployFiles::setFunctionsConfig(const QMap<QString, OAIFunctionConfig> &functions_config) {
    m_functions_config = functions_config;
    m_functions_config_isSet = true;
}

bool OAIDeployFiles::is_functions_config_Set() const{
    return m_functions_config_isSet;
}

bool OAIDeployFiles::is_functions_config_Valid() const{
    return m_functions_config_isValid;
}

bool OAIDeployFiles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functions_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployFiles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
