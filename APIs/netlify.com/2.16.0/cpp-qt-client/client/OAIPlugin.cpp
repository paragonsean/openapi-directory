/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPlugin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPlugin::OAIPlugin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPlugin::OAIPlugin() {
    this->initializeModel();
}

OAIPlugin::~OAIPlugin() {}

void OAIPlugin::initializeModel() {

    m_package_isSet = false;
    m_package_isValid = false;

    m_pinned_version_isSet = false;
    m_pinned_version_isValid = false;
}

void OAIPlugin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPlugin::fromJsonObject(QJsonObject json) {

    m_package_isValid = ::OpenAPI::fromJsonValue(m_package, json[QString("package")]);
    m_package_isSet = !json[QString("package")].isNull() && m_package_isValid;

    m_pinned_version_isValid = ::OpenAPI::fromJsonValue(m_pinned_version, json[QString("pinned_version")]);
    m_pinned_version_isSet = !json[QString("pinned_version")].isNull() && m_pinned_version_isValid;
}

QString OAIPlugin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPlugin::asJsonObject() const {
    QJsonObject obj;
    if (m_package_isSet) {
        obj.insert(QString("package"), ::OpenAPI::toJsonValue(m_package));
    }
    if (m_pinned_version_isSet) {
        obj.insert(QString("pinned_version"), ::OpenAPI::toJsonValue(m_pinned_version));
    }
    return obj;
}

QString OAIPlugin::getPackage() const {
    return m_package;
}
void OAIPlugin::setPackage(const QString &package) {
    m_package = package;
    m_package_isSet = true;
}

bool OAIPlugin::is_package_Set() const{
    return m_package_isSet;
}

bool OAIPlugin::is_package_Valid() const{
    return m_package_isValid;
}

QString OAIPlugin::getPinnedVersion() const {
    return m_pinned_version;
}
void OAIPlugin::setPinnedVersion(const QString &pinned_version) {
    m_pinned_version = pinned_version;
    m_pinned_version_isSet = true;
}

bool OAIPlugin::is_pinned_version_Set() const{
    return m_pinned_version_isSet;
}

bool OAIPlugin::is_pinned_version_Valid() const{
    return m_pinned_version_isValid;
}

bool OAIPlugin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPlugin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
