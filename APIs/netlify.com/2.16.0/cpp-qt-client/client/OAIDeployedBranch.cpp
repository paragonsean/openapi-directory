/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployedBranch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployedBranch::OAIDeployedBranch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployedBranch::OAIDeployedBranch() {
    this->initializeModel();
}

OAIDeployedBranch::~OAIDeployedBranch() {}

void OAIDeployedBranch::initializeModel() {

    m_deploy_id_isSet = false;
    m_deploy_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_ssl_url_isSet = false;
    m_ssl_url_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIDeployedBranch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployedBranch::fromJsonObject(QJsonObject json) {

    m_deploy_id_isValid = ::OpenAPI::fromJsonValue(m_deploy_id, json[QString("deploy_id")]);
    m_deploy_id_isSet = !json[QString("deploy_id")].isNull() && m_deploy_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_ssl_url_isValid = ::OpenAPI::fromJsonValue(m_ssl_url, json[QString("ssl_url")]);
    m_ssl_url_isSet = !json[QString("ssl_url")].isNull() && m_ssl_url_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIDeployedBranch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployedBranch::asJsonObject() const {
    QJsonObject obj;
    if (m_deploy_id_isSet) {
        obj.insert(QString("deploy_id"), ::OpenAPI::toJsonValue(m_deploy_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_ssl_url_isSet) {
        obj.insert(QString("ssl_url"), ::OpenAPI::toJsonValue(m_ssl_url));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIDeployedBranch::getDeployId() const {
    return m_deploy_id;
}
void OAIDeployedBranch::setDeployId(const QString &deploy_id) {
    m_deploy_id = deploy_id;
    m_deploy_id_isSet = true;
}

bool OAIDeployedBranch::is_deploy_id_Set() const{
    return m_deploy_id_isSet;
}

bool OAIDeployedBranch::is_deploy_id_Valid() const{
    return m_deploy_id_isValid;
}

QString OAIDeployedBranch::getId() const {
    return m_id;
}
void OAIDeployedBranch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployedBranch::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployedBranch::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployedBranch::getName() const {
    return m_name;
}
void OAIDeployedBranch::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeployedBranch::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeployedBranch::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeployedBranch::getSlug() const {
    return m_slug;
}
void OAIDeployedBranch::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIDeployedBranch::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIDeployedBranch::is_slug_Valid() const{
    return m_slug_isValid;
}

QString OAIDeployedBranch::getSslUrl() const {
    return m_ssl_url;
}
void OAIDeployedBranch::setSslUrl(const QString &ssl_url) {
    m_ssl_url = ssl_url;
    m_ssl_url_isSet = true;
}

bool OAIDeployedBranch::is_ssl_url_Set() const{
    return m_ssl_url_isSet;
}

bool OAIDeployedBranch::is_ssl_url_Valid() const{
    return m_ssl_url_isValid;
}

QString OAIDeployedBranch::getUrl() const {
    return m_url;
}
void OAIDeployedBranch::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeployedBranch::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeployedBranch::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIDeployedBranch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deploy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployedBranch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
