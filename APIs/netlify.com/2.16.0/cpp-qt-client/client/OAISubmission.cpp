/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubmission::OAISubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubmission::OAISubmission() {
    this->initializeModel();
}

OAISubmission::~OAISubmission() {}

void OAISubmission::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_site_url_isSet = false;
    m_site_url_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAISubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubmission::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_site_url_isValid = ::OpenAPI::fromJsonValue(m_site_url, json[QString("site_url")]);
    m_site_url_isSet = !json[QString("site_url")].isNull() && m_site_url_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAISubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_site_url_isSet) {
        obj.insert(QString("site_url"), ::OpenAPI::toJsonValue(m_site_url));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAISubmission::getBody() const {
    return m_body;
}
void OAISubmission::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAISubmission::is_body_Set() const{
    return m_body_isSet;
}

bool OAISubmission::is_body_Valid() const{
    return m_body_isValid;
}

QString OAISubmission::getCompany() const {
    return m_company;
}
void OAISubmission::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAISubmission::is_company_Set() const{
    return m_company_isSet;
}

bool OAISubmission::is_company_Valid() const{
    return m_company_isValid;
}

QString OAISubmission::getCreatedAt() const {
    return m_created_at;
}
void OAISubmission::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISubmission::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubmission::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAISubmission::getData() const {
    return m_data;
}
void OAISubmission::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAISubmission::is_data_Set() const{
    return m_data_isSet;
}

bool OAISubmission::is_data_Valid() const{
    return m_data_isValid;
}

QString OAISubmission::getEmail() const {
    return m_email;
}
void OAISubmission::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAISubmission::is_email_Set() const{
    return m_email_isSet;
}

bool OAISubmission::is_email_Valid() const{
    return m_email_isValid;
}

QString OAISubmission::getFirstName() const {
    return m_first_name;
}
void OAISubmission::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAISubmission::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAISubmission::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAISubmission::getId() const {
    return m_id;
}
void OAISubmission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubmission::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubmission::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubmission::getLastName() const {
    return m_last_name;
}
void OAISubmission::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAISubmission::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAISubmission::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAISubmission::getName() const {
    return m_name;
}
void OAISubmission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISubmission::is_name_Set() const{
    return m_name_isSet;
}

bool OAISubmission::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISubmission::getNumber() const {
    return m_number;
}
void OAISubmission::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISubmission::is_number_Set() const{
    return m_number_isSet;
}

bool OAISubmission::is_number_Valid() const{
    return m_number_isValid;
}

QString OAISubmission::getSiteUrl() const {
    return m_site_url;
}
void OAISubmission::setSiteUrl(const QString &site_url) {
    m_site_url = site_url;
    m_site_url_isSet = true;
}

bool OAISubmission::is_site_url_Set() const{
    return m_site_url_isSet;
}

bool OAISubmission::is_site_url_Valid() const{
    return m_site_url_isValid;
}

QString OAISubmission::getSummary() const {
    return m_summary;
}
void OAISubmission::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAISubmission::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAISubmission::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAISubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
