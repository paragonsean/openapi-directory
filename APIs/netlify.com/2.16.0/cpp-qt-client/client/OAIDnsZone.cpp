/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsZone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsZone::OAIDnsZone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsZone::OAIDnsZone() {
    this->initializeModel();
}

OAIDnsZone::~OAIDnsZone() {}

void OAIDnsZone::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_slug_isSet = false;
    m_account_slug_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_dedicated_isSet = false;
    m_dedicated_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ipv6_enabled_isSet = false;
    m_ipv6_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_records_isSet = false;
    m_records_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_supported_record_types_isSet = false;
    m_supported_record_types_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDnsZone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsZone::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_account_slug_isValid = ::OpenAPI::fromJsonValue(m_account_slug, json[QString("account_slug")]);
    m_account_slug_isSet = !json[QString("account_slug")].isNull() && m_account_slug_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_dedicated_isValid = ::OpenAPI::fromJsonValue(m_dedicated, json[QString("dedicated")]);
    m_dedicated_isSet = !json[QString("dedicated")].isNull() && m_dedicated_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dns_servers")]);
    m_dns_servers_isSet = !json[QString("dns_servers")].isNull() && m_dns_servers_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ipv6_enabled_isValid = ::OpenAPI::fromJsonValue(m_ipv6_enabled, json[QString("ipv6_enabled")]);
    m_ipv6_enabled_isSet = !json[QString("ipv6_enabled")].isNull() && m_ipv6_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("records")]);
    m_records_isSet = !json[QString("records")].isNull() && m_records_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_supported_record_types_isValid = ::OpenAPI::fromJsonValue(m_supported_record_types, json[QString("supported_record_types")]);
    m_supported_record_types_isSet = !json[QString("supported_record_types")].isNull() && m_supported_record_types_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIDnsZone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsZone::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_slug_isSet) {
        obj.insert(QString("account_slug"), ::OpenAPI::toJsonValue(m_account_slug));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_dedicated_isSet) {
        obj.insert(QString("dedicated"), ::OpenAPI::toJsonValue(m_dedicated));
    }
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dns_servers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ipv6_enabled_isSet) {
        obj.insert(QString("ipv6_enabled"), ::OpenAPI::toJsonValue(m_ipv6_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_records.size() > 0) {
        obj.insert(QString("records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_supported_record_types.size() > 0) {
        obj.insert(QString("supported_record_types"), ::OpenAPI::toJsonValue(m_supported_record_types));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDnsZone::getAccountId() const {
    return m_account_id;
}
void OAIDnsZone::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDnsZone::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDnsZone::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDnsZone::getAccountName() const {
    return m_account_name;
}
void OAIDnsZone::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAIDnsZone::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAIDnsZone::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAIDnsZone::getAccountSlug() const {
    return m_account_slug;
}
void OAIDnsZone::setAccountSlug(const QString &account_slug) {
    m_account_slug = account_slug;
    m_account_slug_isSet = true;
}

bool OAIDnsZone::is_account_slug_Set() const{
    return m_account_slug_isSet;
}

bool OAIDnsZone::is_account_slug_Valid() const{
    return m_account_slug_isValid;
}

QString OAIDnsZone::getCreatedAt() const {
    return m_created_at;
}
void OAIDnsZone::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDnsZone::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDnsZone::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIDnsZone::isDedicated() const {
    return m_dedicated;
}
void OAIDnsZone::setDedicated(const bool &dedicated) {
    m_dedicated = dedicated;
    m_dedicated_isSet = true;
}

bool OAIDnsZone::is_dedicated_Set() const{
    return m_dedicated_isSet;
}

bool OAIDnsZone::is_dedicated_Valid() const{
    return m_dedicated_isValid;
}

QList<QString> OAIDnsZone::getDnsServers() const {
    return m_dns_servers;
}
void OAIDnsZone::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIDnsZone::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIDnsZone::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QString OAIDnsZone::getDomain() const {
    return m_domain;
}
void OAIDnsZone::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDnsZone::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDnsZone::is_domain_Valid() const{
    return m_domain_isValid;
}

QList<QString> OAIDnsZone::getErrors() const {
    return m_errors;
}
void OAIDnsZone::setErrors(const QList<QString> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIDnsZone::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIDnsZone::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIDnsZone::getId() const {
    return m_id;
}
void OAIDnsZone::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDnsZone::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDnsZone::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDnsZone::isIpv6Enabled() const {
    return m_ipv6_enabled;
}
void OAIDnsZone::setIpv6Enabled(const bool &ipv6_enabled) {
    m_ipv6_enabled = ipv6_enabled;
    m_ipv6_enabled_isSet = true;
}

bool OAIDnsZone::is_ipv6_enabled_Set() const{
    return m_ipv6_enabled_isSet;
}

bool OAIDnsZone::is_ipv6_enabled_Valid() const{
    return m_ipv6_enabled_isValid;
}

QString OAIDnsZone::getName() const {
    return m_name;
}
void OAIDnsZone::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDnsZone::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDnsZone::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIDnsRecord> OAIDnsZone::getRecords() const {
    return m_records;
}
void OAIDnsZone::setRecords(const QList<OAIDnsRecord> &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIDnsZone::is_records_Set() const{
    return m_records_isSet;
}

bool OAIDnsZone::is_records_Valid() const{
    return m_records_isValid;
}

QString OAIDnsZone::getSiteId() const {
    return m_site_id;
}
void OAIDnsZone::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIDnsZone::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIDnsZone::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QList<QString> OAIDnsZone::getSupportedRecordTypes() const {
    return m_supported_record_types;
}
void OAIDnsZone::setSupportedRecordTypes(const QList<QString> &supported_record_types) {
    m_supported_record_types = supported_record_types;
    m_supported_record_types_isSet = true;
}

bool OAIDnsZone::is_supported_record_types_Set() const{
    return m_supported_record_types_isSet;
}

bool OAIDnsZone::is_supported_record_types_Valid() const{
    return m_supported_record_types_isValid;
}

QString OAIDnsZone::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDnsZone::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDnsZone::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDnsZone::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIDnsZone::getUserId() const {
    return m_user_id;
}
void OAIDnsZone::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDnsZone::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDnsZone::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDnsZone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_records.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_record_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsZone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
