/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEnvironmentVariablesApi_H
#define OAI_OAIEnvironmentVariablesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateEnvVars_request_inner.h"
#include "OAIEnvVar.h"
#include "OAIError.h"
#include "OAISetEnvVarValue_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEnvironmentVariablesApi : public QObject {
    Q_OBJECT

public:
    OAIEnvironmentVariablesApi(const int timeOut = 0);
    ~OAIEnvironmentVariablesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  site_id QString [optional]
    * @param[in]  env_vars QList<OAICreateEnvVars_request_inner> [optional]
    */
    virtual void createEnvVars(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAICreateEnvVars_request_inner>> &env_vars = ::OpenAPI::OptionalParam<QList<OAICreateEnvVars_request_inner>>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  site_id QString [optional]
    */
    virtual void deleteEnvVar(const QString &account_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  site_id QString [optional]
    */
    virtual void deleteEnvVarValue(const QString &account_id, const QString &id, const QString &key, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  site_id QString [optional]
    */
    virtual void getEnvVar(const QString &account_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  context_name QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  site_id QString [optional]
    */
    virtual void getEnvVars(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &context_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  site_id QString [optional]
    * @param[in]  env_var OAISetEnvVarValue_request [optional]
    */
    virtual void setEnvVarValue(const QString &account_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetEnvVarValue_request> &env_var = ::OpenAPI::OptionalParam<OAISetEnvVarValue_request>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  key QString [required]
    * @param[in]  site_id QString [optional]
    * @param[in]  env_var OAICreateEnvVars_request_inner [optional]
    */
    virtual void updateEnvVar(const QString &account_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &site_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateEnvVars_request_inner> &env_var = ::OpenAPI::OptionalParam<OAICreateEnvVars_request_inner>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createEnvVarsCallback(OAIHttpRequestWorker *worker);
    void deleteEnvVarCallback(OAIHttpRequestWorker *worker);
    void deleteEnvVarValueCallback(OAIHttpRequestWorker *worker);
    void getEnvVarCallback(OAIHttpRequestWorker *worker);
    void getEnvVarsCallback(OAIHttpRequestWorker *worker);
    void setEnvVarValueCallback(OAIHttpRequestWorker *worker);
    void updateEnvVarCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createEnvVarsSignal(QList<OAIEnvVar> summary);
    void deleteEnvVarSignal();
    void deleteEnvVarValueSignal();
    void getEnvVarSignal(OAIEnvVar summary);
    void getEnvVarsSignal(QList<OAIEnvVar> summary);
    void setEnvVarValueSignal(OAIEnvVar summary);
    void updateEnvVarSignal(OAIEnvVar summary);


    void createEnvVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnvVar> summary);
    void deleteEnvVarSignalFull(OAIHttpRequestWorker *worker);
    void deleteEnvVarValueSignalFull(OAIHttpRequestWorker *worker);
    void getEnvVarSignalFull(OAIHttpRequestWorker *worker, OAIEnvVar summary);
    void getEnvVarsSignalFull(OAIHttpRequestWorker *worker, QList<OAIEnvVar> summary);
    void setEnvVarValueSignalFull(OAIHttpRequestWorker *worker, OAIEnvVar summary);
    void updateEnvVarSignalFull(OAIHttpRequestWorker *worker, OAIEnvVar summary);

    Q_DECL_DEPRECATED_X("Use createEnvVarsSignalError() instead")
    void createEnvVarsSignalE(QList<OAIEnvVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvVarsSignalError(QList<OAIEnvVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvVarSignalError() instead")
    void deleteEnvVarSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvVarSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvVarValueSignalError() instead")
    void deleteEnvVarValueSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvVarValueSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvVarSignalError() instead")
    void getEnvVarSignalE(OAIEnvVar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvVarSignalError(OAIEnvVar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvVarsSignalError() instead")
    void getEnvVarsSignalE(QList<OAIEnvVar> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvVarsSignalError(QList<OAIEnvVar> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setEnvVarValueSignalError() instead")
    void setEnvVarValueSignalE(OAIEnvVar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setEnvVarValueSignalError(OAIEnvVar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvVarSignalError() instead")
    void updateEnvVarSignalE(OAIEnvVar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvVarSignalError(OAIEnvVar summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createEnvVarsSignalErrorFull() instead")
    void createEnvVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createEnvVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvVarSignalErrorFull() instead")
    void deleteEnvVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEnvVarValueSignalErrorFull() instead")
    void deleteEnvVarValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEnvVarValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvVarSignalErrorFull() instead")
    void getEnvVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEnvVarsSignalErrorFull() instead")
    void getEnvVarsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEnvVarsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setEnvVarValueSignalErrorFull() instead")
    void setEnvVarValueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setEnvVarValueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEnvVarSignalErrorFull() instead")
    void updateEnvVarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEnvVarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
