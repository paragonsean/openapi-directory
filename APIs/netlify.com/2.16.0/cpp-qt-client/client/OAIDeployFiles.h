/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeployFiles.h
 *
 * 
 */

#ifndef OAIDeployFiles_H
#define OAIDeployFiles_H

#include <QJsonObject>

#include "OAIFunctionConfig.h"
#include "OAIFunctionSchedule.h"
#include "OAIObject.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFunctionSchedule;
class OAIFunctionConfig;

class OAIDeployFiles : public OAIObject {
public:
    OAIDeployFiles();
    OAIDeployFiles(QString json);
    ~OAIDeployFiles() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAsync() const;
    void setAsync(const bool &async);
    bool is_async_Set() const;
    bool is_async_Valid() const;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    bool isDraft() const;
    void setDraft(const bool &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    OAIObject getFiles() const;
    void setFiles(const OAIObject &files);
    bool is_files_Set() const;
    bool is_files_Valid() const;

    QString getFramework() const;
    void setFramework(const QString &framework);
    bool is_framework_Set() const;
    bool is_framework_Valid() const;

    QList<OAIFunctionSchedule> getFunctionSchedules() const;
    void setFunctionSchedules(const QList<OAIFunctionSchedule> &function_schedules);
    bool is_function_schedules_Set() const;
    bool is_function_schedules_Valid() const;

    OAIObject getFunctions() const;
    void setFunctions(const OAIObject &functions);
    bool is_functions_Set() const;
    bool is_functions_Valid() const;

    QMap<QString, OAIFunctionConfig> getFunctionsConfig() const;
    void setFunctionsConfig(const QMap<QString, OAIFunctionConfig> &functions_config);
    bool is_functions_config_Set() const;
    bool is_functions_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_async;
    bool m_async_isSet;
    bool m_async_isValid;

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    bool m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    OAIObject m_files;
    bool m_files_isSet;
    bool m_files_isValid;

    QString m_framework;
    bool m_framework_isSet;
    bool m_framework_isValid;

    QList<OAIFunctionSchedule> m_function_schedules;
    bool m_function_schedules_isSet;
    bool m_function_schedules_isValid;

    OAIObject m_functions;
    bool m_functions_isSet;
    bool m_functions_isValid;

    QMap<QString, OAIFunctionConfig> m_functions_config;
    bool m_functions_config_isSet;
    bool m_functions_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeployFiles)

#endif // OAIDeployFiles_H
