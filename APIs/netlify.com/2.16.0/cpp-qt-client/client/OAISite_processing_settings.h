/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISite_processing_settings.h
 *
 * 
 */

#ifndef OAISite_processing_settings_H
#define OAISite_processing_settings_H

#include <QJsonObject>

#include "OAIMinifyOptions.h"
#include "OAISite_processing_settings_html.h"
#include "OAISite_processing_settings_images.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMinifyOptions;
class OAISite_processing_settings_html;
class OAISite_processing_settings_images;

class OAISite_processing_settings : public OAIObject {
public:
    OAISite_processing_settings();
    OAISite_processing_settings(QString json);
    ~OAISite_processing_settings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMinifyOptions getCss() const;
    void setCss(const OAIMinifyOptions &css);
    bool is_css_Set() const;
    bool is_css_Valid() const;

    OAISite_processing_settings_html getHtml() const;
    void setHtml(const OAISite_processing_settings_html &html);
    bool is_html_Set() const;
    bool is_html_Valid() const;

    OAISite_processing_settings_images getImages() const;
    void setImages(const OAISite_processing_settings_images &images);
    bool is_images_Set() const;
    bool is_images_Valid() const;

    OAIMinifyOptions getJs() const;
    void setJs(const OAIMinifyOptions &js);
    bool is_js_Set() const;
    bool is_js_Valid() const;

    bool isSkip() const;
    void setSkip(const bool &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMinifyOptions m_css;
    bool m_css_isSet;
    bool m_css_isValid;

    OAISite_processing_settings_html m_html;
    bool m_html_isSet;
    bool m_html_isValid;

    OAISite_processing_settings_images m_images;
    bool m_images_isSet;
    bool m_images_isValid;

    OAIMinifyOptions m_js;
    bool m_js_isSet;
    bool m_js_isValid;

    bool m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISite_processing_settings)

#endif // OAISite_processing_settings_H
