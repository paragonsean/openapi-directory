/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountUsageCapability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountUsageCapability::OAIAccountUsageCapability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountUsageCapability::OAIAccountUsageCapability() {
    this->initializeModel();
}

OAIAccountUsageCapability::~OAIAccountUsageCapability() {}

void OAIAccountUsageCapability::initializeModel() {

    m_included_isSet = false;
    m_included_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIAccountUsageCapability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountUsageCapability::fromJsonObject(QJsonObject json) {

    m_included_isValid = ::OpenAPI::fromJsonValue(m_included, json[QString("included")]);
    m_included_isSet = !json[QString("included")].isNull() && m_included_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIAccountUsageCapability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountUsageCapability::asJsonObject() const {
    QJsonObject obj;
    if (m_included_isSet) {
        obj.insert(QString("included"), ::OpenAPI::toJsonValue(m_included));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

qint32 OAIAccountUsageCapability::getIncluded() const {
    return m_included;
}
void OAIAccountUsageCapability::setIncluded(const qint32 &included) {
    m_included = included;
    m_included_isSet = true;
}

bool OAIAccountUsageCapability::is_included_Set() const{
    return m_included_isSet;
}

bool OAIAccountUsageCapability::is_included_Valid() const{
    return m_included_isValid;
}

qint32 OAIAccountUsageCapability::getUsed() const {
    return m_used;
}
void OAIAccountUsageCapability::setUsed(const qint32 &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIAccountUsageCapability::is_used_Set() const{
    return m_used_isSet;
}

bool OAIAccountUsageCapability::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIAccountUsageCapability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountUsageCapability::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
