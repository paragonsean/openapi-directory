/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForm::OAIForm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForm::OAIForm() {
    this->initializeModel();
}

OAIForm::~OAIForm() {}

void OAIForm::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_paths_isSet = false;
    m_paths_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_submission_count_isSet = false;
    m_submission_count_isValid = false;
}

void OAIForm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForm::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_paths_isValid = ::OpenAPI::fromJsonValue(m_paths, json[QString("paths")]);
    m_paths_isSet = !json[QString("paths")].isNull() && m_paths_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_submission_count_isValid = ::OpenAPI::fromJsonValue(m_submission_count, json[QString("submission_count")]);
    m_submission_count_isSet = !json[QString("submission_count")].isNull() && m_submission_count_isValid;
}

QString OAIForm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForm::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_paths.size() > 0) {
        obj.insert(QString("paths"), ::OpenAPI::toJsonValue(m_paths));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_submission_count_isSet) {
        obj.insert(QString("submission_count"), ::OpenAPI::toJsonValue(m_submission_count));
    }
    return obj;
}

QString OAIForm::getCreatedAt() const {
    return m_created_at;
}
void OAIForm::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIForm::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIForm::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIObject> OAIForm::getFields() const {
    return m_fields;
}
void OAIForm::setFields(const QList<OAIObject> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIForm::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIForm::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIForm::getId() const {
    return m_id;
}
void OAIForm::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIForm::is_id_Set() const{
    return m_id_isSet;
}

bool OAIForm::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIForm::getName() const {
    return m_name;
}
void OAIForm::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIForm::is_name_Set() const{
    return m_name_isSet;
}

bool OAIForm::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIForm::getPaths() const {
    return m_paths;
}
void OAIForm::setPaths(const QList<QString> &paths) {
    m_paths = paths;
    m_paths_isSet = true;
}

bool OAIForm::is_paths_Set() const{
    return m_paths_isSet;
}

bool OAIForm::is_paths_Valid() const{
    return m_paths_isValid;
}

QString OAIForm::getSiteId() const {
    return m_site_id;
}
void OAIForm::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIForm::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIForm::is_site_id_Valid() const{
    return m_site_id_isValid;
}

qint32 OAIForm::getSubmissionCount() const {
    return m_submission_count;
}
void OAIForm::setSubmissionCount(const qint32 &submission_count) {
    m_submission_count = submission_count;
    m_submission_count_isSet = true;
}

bool OAIForm::is_submission_count_Set() const{
    return m_submission_count_isSet;
}

bool OAIForm::is_submission_count_Valid() const{
    return m_submission_count_isValid;
}

bool OAIForm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
