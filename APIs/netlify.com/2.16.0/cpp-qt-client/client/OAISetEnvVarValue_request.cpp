/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISetEnvVarValue_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISetEnvVarValue_request::OAISetEnvVarValue_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISetEnvVarValue_request::OAISetEnvVarValue_request() {
    this->initializeModel();
}

OAISetEnvVarValue_request::~OAISetEnvVarValue_request() {}

void OAISetEnvVarValue_request::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISetEnvVarValue_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISetEnvVarValue_request::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISetEnvVarValue_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISetEnvVarValue_request::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISetEnvVarValue_request::getContext() const {
    return m_context;
}
void OAISetEnvVarValue_request::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAISetEnvVarValue_request::is_context_Set() const{
    return m_context_isSet;
}

bool OAISetEnvVarValue_request::is_context_Valid() const{
    return m_context_isValid;
}

QString OAISetEnvVarValue_request::getValue() const {
    return m_value;
}
void OAISetEnvVarValue_request::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISetEnvVarValue_request::is_value_Set() const{
    return m_value_isSet;
}

bool OAISetEnvVarValue_request::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISetEnvVarValue_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISetEnvVarValue_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
