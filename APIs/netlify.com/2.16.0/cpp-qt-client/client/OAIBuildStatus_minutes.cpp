/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildStatus_minutes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildStatus_minutes::OAIBuildStatus_minutes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildStatus_minutes::OAIBuildStatus_minutes() {
    this->initializeModel();
}

OAIBuildStatus_minutes::~OAIBuildStatus_minutes() {}

void OAIBuildStatus_minutes::initializeModel() {

    m_current_isSet = false;
    m_current_isValid = false;

    m_current_average_sec_isSet = false;
    m_current_average_sec_isValid = false;

    m_included_minutes_isSet = false;
    m_included_minutes_isValid = false;

    m_included_minutes_with_packs_isSet = false;
    m_included_minutes_with_packs_isValid = false;

    m_last_updated_at_isSet = false;
    m_last_updated_at_isValid = false;

    m_period_end_date_isSet = false;
    m_period_end_date_isValid = false;

    m_period_start_date_isSet = false;
    m_period_start_date_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;
}

void OAIBuildStatus_minutes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildStatus_minutes::fromJsonObject(QJsonObject json) {

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_current_average_sec_isValid = ::OpenAPI::fromJsonValue(m_current_average_sec, json[QString("current_average_sec")]);
    m_current_average_sec_isSet = !json[QString("current_average_sec")].isNull() && m_current_average_sec_isValid;

    m_included_minutes_isValid = ::OpenAPI::fromJsonValue(m_included_minutes, json[QString("included_minutes")]);
    m_included_minutes_isSet = !json[QString("included_minutes")].isNull() && m_included_minutes_isValid;

    m_included_minutes_with_packs_isValid = ::OpenAPI::fromJsonValue(m_included_minutes_with_packs, json[QString("included_minutes_with_packs")]);
    m_included_minutes_with_packs_isSet = !json[QString("included_minutes_with_packs")].isNull() && m_included_minutes_with_packs_isValid;

    m_last_updated_at_isValid = ::OpenAPI::fromJsonValue(m_last_updated_at, json[QString("last_updated_at")]);
    m_last_updated_at_isSet = !json[QString("last_updated_at")].isNull() && m_last_updated_at_isValid;

    m_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_period_end_date, json[QString("period_end_date")]);
    m_period_end_date_isSet = !json[QString("period_end_date")].isNull() && m_period_end_date_isValid;

    m_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_period_start_date, json[QString("period_start_date")]);
    m_period_start_date_isSet = !json[QString("period_start_date")].isNull() && m_period_start_date_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;
}

QString OAIBuildStatus_minutes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildStatus_minutes::asJsonObject() const {
    QJsonObject obj;
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_current_average_sec_isSet) {
        obj.insert(QString("current_average_sec"), ::OpenAPI::toJsonValue(m_current_average_sec));
    }
    if (m_included_minutes_isSet) {
        obj.insert(QString("included_minutes"), ::OpenAPI::toJsonValue(m_included_minutes));
    }
    if (m_included_minutes_with_packs_isSet) {
        obj.insert(QString("included_minutes_with_packs"), ::OpenAPI::toJsonValue(m_included_minutes_with_packs));
    }
    if (m_last_updated_at_isSet) {
        obj.insert(QString("last_updated_at"), ::OpenAPI::toJsonValue(m_last_updated_at));
    }
    if (m_period_end_date_isSet) {
        obj.insert(QString("period_end_date"), ::OpenAPI::toJsonValue(m_period_end_date));
    }
    if (m_period_start_date_isSet) {
        obj.insert(QString("period_start_date"), ::OpenAPI::toJsonValue(m_period_start_date));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    return obj;
}

qint32 OAIBuildStatus_minutes::getCurrent() const {
    return m_current;
}
void OAIBuildStatus_minutes::setCurrent(const qint32 &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIBuildStatus_minutes::is_current_Set() const{
    return m_current_isSet;
}

bool OAIBuildStatus_minutes::is_current_Valid() const{
    return m_current_isValid;
}

qint32 OAIBuildStatus_minutes::getCurrentAverageSec() const {
    return m_current_average_sec;
}
void OAIBuildStatus_minutes::setCurrentAverageSec(const qint32 &current_average_sec) {
    m_current_average_sec = current_average_sec;
    m_current_average_sec_isSet = true;
}

bool OAIBuildStatus_minutes::is_current_average_sec_Set() const{
    return m_current_average_sec_isSet;
}

bool OAIBuildStatus_minutes::is_current_average_sec_Valid() const{
    return m_current_average_sec_isValid;
}

QString OAIBuildStatus_minutes::getIncludedMinutes() const {
    return m_included_minutes;
}
void OAIBuildStatus_minutes::setIncludedMinutes(const QString &included_minutes) {
    m_included_minutes = included_minutes;
    m_included_minutes_isSet = true;
}

bool OAIBuildStatus_minutes::is_included_minutes_Set() const{
    return m_included_minutes_isSet;
}

bool OAIBuildStatus_minutes::is_included_minutes_Valid() const{
    return m_included_minutes_isValid;
}

QString OAIBuildStatus_minutes::getIncludedMinutesWithPacks() const {
    return m_included_minutes_with_packs;
}
void OAIBuildStatus_minutes::setIncludedMinutesWithPacks(const QString &included_minutes_with_packs) {
    m_included_minutes_with_packs = included_minutes_with_packs;
    m_included_minutes_with_packs_isSet = true;
}

bool OAIBuildStatus_minutes::is_included_minutes_with_packs_Set() const{
    return m_included_minutes_with_packs_isSet;
}

bool OAIBuildStatus_minutes::is_included_minutes_with_packs_Valid() const{
    return m_included_minutes_with_packs_isValid;
}

QString OAIBuildStatus_minutes::getLastUpdatedAt() const {
    return m_last_updated_at;
}
void OAIBuildStatus_minutes::setLastUpdatedAt(const QString &last_updated_at) {
    m_last_updated_at = last_updated_at;
    m_last_updated_at_isSet = true;
}

bool OAIBuildStatus_minutes::is_last_updated_at_Set() const{
    return m_last_updated_at_isSet;
}

bool OAIBuildStatus_minutes::is_last_updated_at_Valid() const{
    return m_last_updated_at_isValid;
}

QString OAIBuildStatus_minutes::getPeriodEndDate() const {
    return m_period_end_date;
}
void OAIBuildStatus_minutes::setPeriodEndDate(const QString &period_end_date) {
    m_period_end_date = period_end_date;
    m_period_end_date_isSet = true;
}

bool OAIBuildStatus_minutes::is_period_end_date_Set() const{
    return m_period_end_date_isSet;
}

bool OAIBuildStatus_minutes::is_period_end_date_Valid() const{
    return m_period_end_date_isValid;
}

QString OAIBuildStatus_minutes::getPeriodStartDate() const {
    return m_period_start_date;
}
void OAIBuildStatus_minutes::setPeriodStartDate(const QString &period_start_date) {
    m_period_start_date = period_start_date;
    m_period_start_date_isSet = true;
}

bool OAIBuildStatus_minutes::is_period_start_date_Set() const{
    return m_period_start_date_isSet;
}

bool OAIBuildStatus_minutes::is_period_start_date_Valid() const{
    return m_period_start_date_isValid;
}

qint32 OAIBuildStatus_minutes::getPrevious() const {
    return m_previous;
}
void OAIBuildStatus_minutes::setPrevious(const qint32 &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAIBuildStatus_minutes::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAIBuildStatus_minutes::is_previous_Valid() const{
    return m_previous_isValid;
}

bool OAIBuildStatus_minutes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_average_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_minutes_with_packs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildStatus_minutes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
