/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISiteApi_H
#define OAI_OAISiteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISite.h"
#include "OAISiteSetup.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISiteApi : public QObject {
    Q_OBJECT

public:
    OAISiteApi(const int timeOut = 0);
    ~OAISiteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site OAISiteSetup [required]
    * @param[in]  configure_dns bool [optional]
    */
    virtual void createSite(const OAISiteSetup &site, const ::OpenAPI::OptionalParam<bool> &configure_dns = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  configure_dns bool [optional]
    * @param[in]  site OAISiteSetup [optional]
    */
    virtual void createSiteInTeam(const QString &account_slug, const ::OpenAPI::OptionalParam<bool> &configure_dns = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAISiteSetup> &site = ::OpenAPI::OptionalParam<OAISiteSetup>());

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void deleteSite(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void getSite(const QString &site_id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listSites(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void listSitesForAccount(const QString &account_slug, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void unlinkSiteRepo(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  site OAISiteSetup [required]
    */
    virtual void updateSite(const QString &site_id, const OAISiteSetup &site);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSiteCallback(OAIHttpRequestWorker *worker);
    void createSiteInTeamCallback(OAIHttpRequestWorker *worker);
    void deleteSiteCallback(OAIHttpRequestWorker *worker);
    void getSiteCallback(OAIHttpRequestWorker *worker);
    void listSitesCallback(OAIHttpRequestWorker *worker);
    void listSitesForAccountCallback(OAIHttpRequestWorker *worker);
    void unlinkSiteRepoCallback(OAIHttpRequestWorker *worker);
    void updateSiteCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSiteSignal(OAISite summary);
    void createSiteInTeamSignal(OAISite summary);
    void deleteSiteSignal();
    void getSiteSignal(OAISite summary);
    void listSitesSignal(QList<OAISite> summary);
    void listSitesForAccountSignal(QList<OAISite> summary);
    void unlinkSiteRepoSignal(OAISite summary);
    void updateSiteSignal(OAISite summary);


    void createSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void createSiteInTeamSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void deleteSiteSignalFull(OAIHttpRequestWorker *worker);
    void getSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void listSitesSignalFull(OAIHttpRequestWorker *worker, QList<OAISite> summary);
    void listSitesForAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAISite> summary);
    void unlinkSiteRepoSignalFull(OAIHttpRequestWorker *worker, OAISite summary);
    void updateSiteSignalFull(OAIHttpRequestWorker *worker, OAISite summary);

    Q_DECL_DEPRECATED_X("Use createSiteSignalError() instead")
    void createSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteInTeamSignalError() instead")
    void createSiteInTeamSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteInTeamSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteSignalError() instead")
    void deleteSiteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteSignalError() instead")
    void getSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSitesSignalError() instead")
    void listSitesSignalE(QList<OAISite> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSitesSignalError(QList<OAISite> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSitesForAccountSignalError() instead")
    void listSitesForAccountSignalE(QList<OAISite> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSitesForAccountSignalError(QList<OAISite> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlinkSiteRepoSignalError() instead")
    void unlinkSiteRepoSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unlinkSiteRepoSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteSignalError() instead")
    void updateSiteSignalE(OAISite summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteSignalError(OAISite summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSiteSignalErrorFull() instead")
    void createSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSiteInTeamSignalErrorFull() instead")
    void createSiteInTeamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteInTeamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteSignalErrorFull() instead")
    void deleteSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteSignalErrorFull() instead")
    void getSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSitesSignalErrorFull() instead")
    void listSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSitesForAccountSignalErrorFull() instead")
    void listSitesForAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSitesForAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlinkSiteRepoSignalErrorFull() instead")
    void unlinkSiteRepoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlinkSiteRepoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteSignalErrorFull() instead")
    void updateSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
