/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvVarValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvVarValue::OAIEnvVarValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvVarValue::OAIEnvVarValue() {
    this->initializeModel();
}

OAIEnvVarValue::~OAIEnvVarValue() {}

void OAIEnvVarValue::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIEnvVarValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvVarValue::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIEnvVarValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvVarValue::asJsonObject() const {
    QJsonObject obj;
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIEnvVarValue::getContext() const {
    return m_context;
}
void OAIEnvVarValue::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIEnvVarValue::is_context_Set() const{
    return m_context_isSet;
}

bool OAIEnvVarValue::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIEnvVarValue::getId() const {
    return m_id;
}
void OAIEnvVarValue::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEnvVarValue::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEnvVarValue::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEnvVarValue::getValue() const {
    return m_value;
}
void OAIEnvVarValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIEnvVarValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIEnvVarValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIEnvVarValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvVarValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
