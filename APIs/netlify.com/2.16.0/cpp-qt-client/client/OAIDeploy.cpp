/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploy::OAIDeploy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploy::OAIDeploy() {
    this->initializeModel();
}

OAIDeploy::~OAIDeploy() {}

void OAIDeploy::initializeModel() {

    m_admin_url_isSet = false;
    m_admin_url_isValid = false;

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_build_id_isSet = false;
    m_build_id_isValid = false;

    m_commit_ref_isSet = false;
    m_commit_ref_isValid = false;

    m_commit_url_isSet = false;
    m_commit_url_isValid = false;

    m_context_isSet = false;
    m_context_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deploy_ssl_url_isSet = false;
    m_deploy_ssl_url_isValid = false;

    m_deploy_url_isSet = false;
    m_deploy_url_isValid = false;

    m_draft_isSet = false;
    m_draft_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_framework_isSet = false;
    m_framework_isValid = false;

    m_function_schedules_isSet = false;
    m_function_schedules_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_locked_isSet = false;
    m_locked_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_required_functions_isSet = false;
    m_required_functions_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_review_url_isSet = false;
    m_review_url_isValid = false;

    m_screenshot_url_isSet = false;
    m_screenshot_url_isValid = false;

    m_site_capabilities_isSet = false;
    m_site_capabilities_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_skipped_isSet = false;
    m_skipped_isValid = false;

    m_ssl_url_isSet = false;
    m_ssl_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDeploy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploy::fromJsonObject(QJsonObject json) {

    m_admin_url_isValid = ::OpenAPI::fromJsonValue(m_admin_url, json[QString("admin_url")]);
    m_admin_url_isSet = !json[QString("admin_url")].isNull() && m_admin_url_isValid;

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_build_id_isValid = ::OpenAPI::fromJsonValue(m_build_id, json[QString("build_id")]);
    m_build_id_isSet = !json[QString("build_id")].isNull() && m_build_id_isValid;

    m_commit_ref_isValid = ::OpenAPI::fromJsonValue(m_commit_ref, json[QString("commit_ref")]);
    m_commit_ref_isSet = !json[QString("commit_ref")].isNull() && m_commit_ref_isValid;

    m_commit_url_isValid = ::OpenAPI::fromJsonValue(m_commit_url, json[QString("commit_url")]);
    m_commit_url_isSet = !json[QString("commit_url")].isNull() && m_commit_url_isValid;

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deploy_ssl_url_isValid = ::OpenAPI::fromJsonValue(m_deploy_ssl_url, json[QString("deploy_ssl_url")]);
    m_deploy_ssl_url_isSet = !json[QString("deploy_ssl_url")].isNull() && m_deploy_ssl_url_isValid;

    m_deploy_url_isValid = ::OpenAPI::fromJsonValue(m_deploy_url, json[QString("deploy_url")]);
    m_deploy_url_isSet = !json[QString("deploy_url")].isNull() && m_deploy_url_isValid;

    m_draft_isValid = ::OpenAPI::fromJsonValue(m_draft, json[QString("draft")]);
    m_draft_isSet = !json[QString("draft")].isNull() && m_draft_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_framework_isValid = ::OpenAPI::fromJsonValue(m_framework, json[QString("framework")]);
    m_framework_isSet = !json[QString("framework")].isNull() && m_framework_isValid;

    m_function_schedules_isValid = ::OpenAPI::fromJsonValue(m_function_schedules, json[QString("function_schedules")]);
    m_function_schedules_isSet = !json[QString("function_schedules")].isNull() && m_function_schedules_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_locked_isValid = ::OpenAPI::fromJsonValue(m_locked, json[QString("locked")]);
    m_locked_isSet = !json[QString("locked")].isNull() && m_locked_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("published_at")]);
    m_published_at_isSet = !json[QString("published_at")].isNull() && m_published_at_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_required_functions_isValid = ::OpenAPI::fromJsonValue(m_required_functions, json[QString("required_functions")]);
    m_required_functions_isSet = !json[QString("required_functions")].isNull() && m_required_functions_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("review_id")]);
    m_review_id_isSet = !json[QString("review_id")].isNull() && m_review_id_isValid;

    m_review_url_isValid = ::OpenAPI::fromJsonValue(m_review_url, json[QString("review_url")]);
    m_review_url_isSet = !json[QString("review_url")].isNull() && m_review_url_isValid;

    m_screenshot_url_isValid = ::OpenAPI::fromJsonValue(m_screenshot_url, json[QString("screenshot_url")]);
    m_screenshot_url_isSet = !json[QString("screenshot_url")].isNull() && m_screenshot_url_isValid;

    m_site_capabilities_isValid = ::OpenAPI::fromJsonValue(m_site_capabilities, json[QString("site_capabilities")]);
    m_site_capabilities_isSet = !json[QString("site_capabilities")].isNull() && m_site_capabilities_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_skipped_isValid = ::OpenAPI::fromJsonValue(m_skipped, json[QString("skipped")]);
    m_skipped_isSet = !json[QString("skipped")].isNull() && m_skipped_isValid;

    m_ssl_url_isValid = ::OpenAPI::fromJsonValue(m_ssl_url, json[QString("ssl_url")]);
    m_ssl_url_isSet = !json[QString("ssl_url")].isNull() && m_ssl_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIDeploy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploy::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_url_isSet) {
        obj.insert(QString("admin_url"), ::OpenAPI::toJsonValue(m_admin_url));
    }
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_build_id_isSet) {
        obj.insert(QString("build_id"), ::OpenAPI::toJsonValue(m_build_id));
    }
    if (m_commit_ref_isSet) {
        obj.insert(QString("commit_ref"), ::OpenAPI::toJsonValue(m_commit_ref));
    }
    if (m_commit_url_isSet) {
        obj.insert(QString("commit_url"), ::OpenAPI::toJsonValue(m_commit_url));
    }
    if (m_context_isSet) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deploy_ssl_url_isSet) {
        obj.insert(QString("deploy_ssl_url"), ::OpenAPI::toJsonValue(m_deploy_ssl_url));
    }
    if (m_deploy_url_isSet) {
        obj.insert(QString("deploy_url"), ::OpenAPI::toJsonValue(m_deploy_url));
    }
    if (m_draft_isSet) {
        obj.insert(QString("draft"), ::OpenAPI::toJsonValue(m_draft));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_framework_isSet) {
        obj.insert(QString("framework"), ::OpenAPI::toJsonValue(m_framework));
    }
    if (m_function_schedules.size() > 0) {
        obj.insert(QString("function_schedules"), ::OpenAPI::toJsonValue(m_function_schedules));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_locked_isSet) {
        obj.insert(QString("locked"), ::OpenAPI::toJsonValue(m_locked));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("published_at"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_required_functions.size() > 0) {
        obj.insert(QString("required_functions"), ::OpenAPI::toJsonValue(m_required_functions));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("review_id"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_review_url_isSet) {
        obj.insert(QString("review_url"), ::OpenAPI::toJsonValue(m_review_url));
    }
    if (m_screenshot_url_isSet) {
        obj.insert(QString("screenshot_url"), ::OpenAPI::toJsonValue(m_screenshot_url));
    }
    if (m_site_capabilities.isSet()) {
        obj.insert(QString("site_capabilities"), ::OpenAPI::toJsonValue(m_site_capabilities));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_skipped_isSet) {
        obj.insert(QString("skipped"), ::OpenAPI::toJsonValue(m_skipped));
    }
    if (m_ssl_url_isSet) {
        obj.insert(QString("ssl_url"), ::OpenAPI::toJsonValue(m_ssl_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDeploy::getAdminUrl() const {
    return m_admin_url;
}
void OAIDeploy::setAdminUrl(const QString &admin_url) {
    m_admin_url = admin_url;
    m_admin_url_isSet = true;
}

bool OAIDeploy::is_admin_url_Set() const{
    return m_admin_url_isSet;
}

bool OAIDeploy::is_admin_url_Valid() const{
    return m_admin_url_isValid;
}

QString OAIDeploy::getBranch() const {
    return m_branch;
}
void OAIDeploy::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIDeploy::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIDeploy::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIDeploy::getBuildId() const {
    return m_build_id;
}
void OAIDeploy::setBuildId(const QString &build_id) {
    m_build_id = build_id;
    m_build_id_isSet = true;
}

bool OAIDeploy::is_build_id_Set() const{
    return m_build_id_isSet;
}

bool OAIDeploy::is_build_id_Valid() const{
    return m_build_id_isValid;
}

QString OAIDeploy::getCommitRef() const {
    return m_commit_ref;
}
void OAIDeploy::setCommitRef(const QString &commit_ref) {
    m_commit_ref = commit_ref;
    m_commit_ref_isSet = true;
}

bool OAIDeploy::is_commit_ref_Set() const{
    return m_commit_ref_isSet;
}

bool OAIDeploy::is_commit_ref_Valid() const{
    return m_commit_ref_isValid;
}

QString OAIDeploy::getCommitUrl() const {
    return m_commit_url;
}
void OAIDeploy::setCommitUrl(const QString &commit_url) {
    m_commit_url = commit_url;
    m_commit_url_isSet = true;
}

bool OAIDeploy::is_commit_url_Set() const{
    return m_commit_url_isSet;
}

bool OAIDeploy::is_commit_url_Valid() const{
    return m_commit_url_isValid;
}

QString OAIDeploy::getContext() const {
    return m_context;
}
void OAIDeploy::setContext(const QString &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIDeploy::is_context_Set() const{
    return m_context_isSet;
}

bool OAIDeploy::is_context_Valid() const{
    return m_context_isValid;
}

QString OAIDeploy::getCreatedAt() const {
    return m_created_at;
}
void OAIDeploy::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeploy::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeploy::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeploy::getDeploySslUrl() const {
    return m_deploy_ssl_url;
}
void OAIDeploy::setDeploySslUrl(const QString &deploy_ssl_url) {
    m_deploy_ssl_url = deploy_ssl_url;
    m_deploy_ssl_url_isSet = true;
}

bool OAIDeploy::is_deploy_ssl_url_Set() const{
    return m_deploy_ssl_url_isSet;
}

bool OAIDeploy::is_deploy_ssl_url_Valid() const{
    return m_deploy_ssl_url_isValid;
}

QString OAIDeploy::getDeployUrl() const {
    return m_deploy_url;
}
void OAIDeploy::setDeployUrl(const QString &deploy_url) {
    m_deploy_url = deploy_url;
    m_deploy_url_isSet = true;
}

bool OAIDeploy::is_deploy_url_Set() const{
    return m_deploy_url_isSet;
}

bool OAIDeploy::is_deploy_url_Valid() const{
    return m_deploy_url_isValid;
}

bool OAIDeploy::isDraft() const {
    return m_draft;
}
void OAIDeploy::setDraft(const bool &draft) {
    m_draft = draft;
    m_draft_isSet = true;
}

bool OAIDeploy::is_draft_Set() const{
    return m_draft_isSet;
}

bool OAIDeploy::is_draft_Valid() const{
    return m_draft_isValid;
}

QString OAIDeploy::getErrorMessage() const {
    return m_error_message;
}
void OAIDeploy::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDeploy::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDeploy::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDeploy::getFramework() const {
    return m_framework;
}
void OAIDeploy::setFramework(const QString &framework) {
    m_framework = framework;
    m_framework_isSet = true;
}

bool OAIDeploy::is_framework_Set() const{
    return m_framework_isSet;
}

bool OAIDeploy::is_framework_Valid() const{
    return m_framework_isValid;
}

QList<OAIFunctionSchedule> OAIDeploy::getFunctionSchedules() const {
    return m_function_schedules;
}
void OAIDeploy::setFunctionSchedules(const QList<OAIFunctionSchedule> &function_schedules) {
    m_function_schedules = function_schedules;
    m_function_schedules_isSet = true;
}

bool OAIDeploy::is_function_schedules_Set() const{
    return m_function_schedules_isSet;
}

bool OAIDeploy::is_function_schedules_Valid() const{
    return m_function_schedules_isValid;
}

QString OAIDeploy::getId() const {
    return m_id;
}
void OAIDeploy::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeploy::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeploy::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeploy::isLocked() const {
    return m_locked;
}
void OAIDeploy::setLocked(const bool &locked) {
    m_locked = locked;
    m_locked_isSet = true;
}

bool OAIDeploy::is_locked_Set() const{
    return m_locked_isSet;
}

bool OAIDeploy::is_locked_Valid() const{
    return m_locked_isValid;
}

QString OAIDeploy::getName() const {
    return m_name;
}
void OAIDeploy::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeploy::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeploy::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeploy::getPublishedAt() const {
    return m_published_at;
}
void OAIDeploy::setPublishedAt(const QString &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIDeploy::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIDeploy::is_published_at_Valid() const{
    return m_published_at_isValid;
}

QList<QString> OAIDeploy::getRequired() const {
    return m_required;
}
void OAIDeploy::setRequired(const QList<QString> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIDeploy::is_required_Set() const{
    return m_required_isSet;
}

bool OAIDeploy::is_required_Valid() const{
    return m_required_isValid;
}

QList<QString> OAIDeploy::getRequiredFunctions() const {
    return m_required_functions;
}
void OAIDeploy::setRequiredFunctions(const QList<QString> &required_functions) {
    m_required_functions = required_functions;
    m_required_functions_isSet = true;
}

bool OAIDeploy::is_required_functions_Set() const{
    return m_required_functions_isSet;
}

bool OAIDeploy::is_required_functions_Valid() const{
    return m_required_functions_isValid;
}

double OAIDeploy::getReviewId() const {
    return m_review_id;
}
void OAIDeploy::setReviewId(const double &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAIDeploy::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAIDeploy::is_review_id_Valid() const{
    return m_review_id_isValid;
}

QString OAIDeploy::getReviewUrl() const {
    return m_review_url;
}
void OAIDeploy::setReviewUrl(const QString &review_url) {
    m_review_url = review_url;
    m_review_url_isSet = true;
}

bool OAIDeploy::is_review_url_Set() const{
    return m_review_url_isSet;
}

bool OAIDeploy::is_review_url_Valid() const{
    return m_review_url_isValid;
}

QString OAIDeploy::getScreenshotUrl() const {
    return m_screenshot_url;
}
void OAIDeploy::setScreenshotUrl(const QString &screenshot_url) {
    m_screenshot_url = screenshot_url;
    m_screenshot_url_isSet = true;
}

bool OAIDeploy::is_screenshot_url_Set() const{
    return m_screenshot_url_isSet;
}

bool OAIDeploy::is_screenshot_url_Valid() const{
    return m_screenshot_url_isValid;
}

OAIDeploy_site_capabilities OAIDeploy::getSiteCapabilities() const {
    return m_site_capabilities;
}
void OAIDeploy::setSiteCapabilities(const OAIDeploy_site_capabilities &site_capabilities) {
    m_site_capabilities = site_capabilities;
    m_site_capabilities_isSet = true;
}

bool OAIDeploy::is_site_capabilities_Set() const{
    return m_site_capabilities_isSet;
}

bool OAIDeploy::is_site_capabilities_Valid() const{
    return m_site_capabilities_isValid;
}

QString OAIDeploy::getSiteId() const {
    return m_site_id;
}
void OAIDeploy::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIDeploy::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIDeploy::is_site_id_Valid() const{
    return m_site_id_isValid;
}

bool OAIDeploy::isSkipped() const {
    return m_skipped;
}
void OAIDeploy::setSkipped(const bool &skipped) {
    m_skipped = skipped;
    m_skipped_isSet = true;
}

bool OAIDeploy::is_skipped_Set() const{
    return m_skipped_isSet;
}

bool OAIDeploy::is_skipped_Valid() const{
    return m_skipped_isValid;
}

QString OAIDeploy::getSslUrl() const {
    return m_ssl_url;
}
void OAIDeploy::setSslUrl(const QString &ssl_url) {
    m_ssl_url = ssl_url;
    m_ssl_url_isSet = true;
}

bool OAIDeploy::is_ssl_url_Set() const{
    return m_ssl_url_isSet;
}

bool OAIDeploy::is_ssl_url_Valid() const{
    return m_ssl_url_isValid;
}

QString OAIDeploy::getState() const {
    return m_state;
}
void OAIDeploy::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDeploy::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDeploy::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIDeploy::getTitle() const {
    return m_title;
}
void OAIDeploy::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIDeploy::is_title_Set() const{
    return m_title_isSet;
}

bool OAIDeploy::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIDeploy::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDeploy::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDeploy::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDeploy::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIDeploy::getUrl() const {
    return m_url;
}
void OAIDeploy::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIDeploy::is_url_Set() const{
    return m_url_isSet;
}

bool OAIDeploy::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIDeploy::getUserId() const {
    return m_user_id;
}
void OAIDeploy::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDeploy::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDeploy::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDeploy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_ssl_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
