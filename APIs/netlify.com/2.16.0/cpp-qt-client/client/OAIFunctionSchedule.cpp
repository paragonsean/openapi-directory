/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionSchedule::OAIFunctionSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionSchedule::OAIFunctionSchedule() {
    this->initializeModel();
}

OAIFunctionSchedule::~OAIFunctionSchedule() {}

void OAIFunctionSchedule::initializeModel() {

    m_cron_isSet = false;
    m_cron_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIFunctionSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionSchedule::fromJsonObject(QJsonObject json) {

    m_cron_isValid = ::OpenAPI::fromJsonValue(m_cron, json[QString("cron")]);
    m_cron_isSet = !json[QString("cron")].isNull() && m_cron_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIFunctionSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_cron_isSet) {
        obj.insert(QString("cron"), ::OpenAPI::toJsonValue(m_cron));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIFunctionSchedule::getCron() const {
    return m_cron;
}
void OAIFunctionSchedule::setCron(const QString &cron) {
    m_cron = cron;
    m_cron_isSet = true;
}

bool OAIFunctionSchedule::is_cron_Set() const{
    return m_cron_isSet;
}

bool OAIFunctionSchedule::is_cron_Valid() const{
    return m_cron_isValid;
}

QString OAIFunctionSchedule::getName() const {
    return m_name;
}
void OAIFunctionSchedule::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunctionSchedule::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunctionSchedule::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFunctionSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cron_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
