/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplitTestSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplitTestSetup::OAISplitTestSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplitTestSetup::OAISplitTestSetup() {
    this->initializeModel();
}

OAISplitTestSetup::~OAISplitTestSetup() {}

void OAISplitTestSetup::initializeModel() {

    m_branch_tests_isSet = false;
    m_branch_tests_isValid = false;
}

void OAISplitTestSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplitTestSetup::fromJsonObject(QJsonObject json) {

    m_branch_tests_isValid = ::OpenAPI::fromJsonValue(m_branch_tests, json[QString("branch_tests")]);
    m_branch_tests_isSet = !json[QString("branch_tests")].isNull() && m_branch_tests_isValid;
}

QString OAISplitTestSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplitTestSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_tests_isSet) {
        obj.insert(QString("branch_tests"), ::OpenAPI::toJsonValue(m_branch_tests));
    }
    return obj;
}

OAIObject OAISplitTestSetup::getBranchTests() const {
    return m_branch_tests;
}
void OAISplitTestSetup::setBranchTests(const OAIObject &branch_tests) {
    m_branch_tests = branch_tests;
    m_branch_tests_isSet = true;
}

bool OAISplitTestSetup::is_branch_tests_Set() const{
    return m_branch_tests_isSet;
}

bool OAISplitTestSetup::is_branch_tests_Valid() const{
    return m_branch_tests_isValid;
}

bool OAISplitTestSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_tests_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplitTestSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
