/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBuildStatus.h
 *
 * 
 */

#ifndef OAIBuildStatus_H
#define OAIBuildStatus_H

#include <QJsonObject>

#include "OAIBuildStatus_minutes.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBuildStatus_minutes;

class OAIBuildStatus : public OAIObject {
public:
    OAIBuildStatus();
    OAIBuildStatus(QString json);
    ~OAIBuildStatus() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getActive() const;
    void setActive(const qint32 &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    qint32 getBuildCount() const;
    void setBuildCount(const qint32 &build_count);
    bool is_build_count_Set() const;
    bool is_build_count_Valid() const;

    qint32 getEnqueued() const;
    void setEnqueued(const qint32 &enqueued);
    bool is_enqueued_Set() const;
    bool is_enqueued_Valid() const;

    OAIBuildStatus_minutes getMinutes() const;
    void setMinutes(const OAIBuildStatus_minutes &minutes);
    bool is_minutes_Set() const;
    bool is_minutes_Valid() const;

    qint32 getPendingConcurrency() const;
    void setPendingConcurrency(const qint32 &pending_concurrency);
    bool is_pending_concurrency_Set() const;
    bool is_pending_concurrency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    qint32 m_build_count;
    bool m_build_count_isSet;
    bool m_build_count_isValid;

    qint32 m_enqueued;
    bool m_enqueued_isSet;
    bool m_enqueued_isValid;

    OAIBuildStatus_minutes m_minutes;
    bool m_minutes_isSet;
    bool m_minutes_isValid;

    qint32 m_pending_concurrency;
    bool m_pending_concurrency_isSet;
    bool m_pending_concurrency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBuildStatus)

#endif // OAIBuildStatus_H
