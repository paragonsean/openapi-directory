/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsZoneSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsZoneSetup::OAIDnsZoneSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsZoneSetup::OAIDnsZoneSetup() {
    this->initializeModel();
}

OAIDnsZoneSetup::~OAIDnsZoneSetup() {}

void OAIDnsZoneSetup::initializeModel() {

    m_account_slug_isSet = false;
    m_account_slug_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;
}

void OAIDnsZoneSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsZoneSetup::fromJsonObject(QJsonObject json) {

    m_account_slug_isValid = ::OpenAPI::fromJsonValue(m_account_slug, json[QString("account_slug")]);
    m_account_slug_isSet = !json[QString("account_slug")].isNull() && m_account_slug_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;
}

QString OAIDnsZoneSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsZoneSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_account_slug_isSet) {
        obj.insert(QString("account_slug"), ::OpenAPI::toJsonValue(m_account_slug));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    return obj;
}

QString OAIDnsZoneSetup::getAccountSlug() const {
    return m_account_slug;
}
void OAIDnsZoneSetup::setAccountSlug(const QString &account_slug) {
    m_account_slug = account_slug;
    m_account_slug_isSet = true;
}

bool OAIDnsZoneSetup::is_account_slug_Set() const{
    return m_account_slug_isSet;
}

bool OAIDnsZoneSetup::is_account_slug_Valid() const{
    return m_account_slug_isValid;
}

QString OAIDnsZoneSetup::getName() const {
    return m_name;
}
void OAIDnsZoneSetup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDnsZoneSetup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDnsZoneSetup::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDnsZoneSetup::getSiteId() const {
    return m_site_id;
}
void OAIDnsZoneSetup::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIDnsZoneSetup::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIDnsZoneSetup::is_site_id_Valid() const{
    return m_site_id_isValid;
}

bool OAIDnsZoneSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsZoneSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
