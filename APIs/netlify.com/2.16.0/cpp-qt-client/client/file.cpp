/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "file.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

file::file(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

file::file() {
    this->initializeModel();
}

file::~file() {}

void file::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void file::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void file::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mime_type")]);
    m_mime_type_isSet = !json[QString("mime_type")].isNull() && m_mime_type_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString file::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject file::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mime_type"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString file::getId() const {
    return m_id;
}
void file::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool file::is_id_Set() const{
    return m_id_isSet;
}

bool file::is_id_Valid() const{
    return m_id_isValid;
}

QString file::getMimeType() const {
    return m_mime_type;
}
void file::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool file::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool file::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

QString file::getPath() const {
    return m_path;
}
void file::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool file::is_path_Set() const{
    return m_path_isSet;
}

bool file::is_path_Valid() const{
    return m_path_isValid;
}

QString file::getSha() const {
    return m_sha;
}
void file::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool file::is_sha_Set() const{
    return m_sha_isSet;
}

bool file::is_sha_Valid() const{
    return m_sha_isValid;
}

qint64 file::getSize() const {
    return m_size;
}
void file::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool file::is_size_Set() const{
    return m_size_isSet;
}

bool file::is_size_Valid() const{
    return m_size_isValid;
}

bool file::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool file::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
