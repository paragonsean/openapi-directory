/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_onboarding_progress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_onboarding_progress::OAIUser_onboarding_progress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_onboarding_progress::OAIUser_onboarding_progress() {
    this->initializeModel();
}

OAIUser_onboarding_progress::~OAIUser_onboarding_progress() {}

void OAIUser_onboarding_progress::initializeModel() {

    m_slides_isSet = false;
    m_slides_isValid = false;
}

void OAIUser_onboarding_progress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_onboarding_progress::fromJsonObject(QJsonObject json) {

    m_slides_isValid = ::OpenAPI::fromJsonValue(m_slides, json[QString("slides")]);
    m_slides_isSet = !json[QString("slides")].isNull() && m_slides_isValid;
}

QString OAIUser_onboarding_progress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_onboarding_progress::asJsonObject() const {
    QJsonObject obj;
    if (m_slides_isSet) {
        obj.insert(QString("slides"), ::OpenAPI::toJsonValue(m_slides));
    }
    return obj;
}

QString OAIUser_onboarding_progress::getSlides() const {
    return m_slides;
}
void OAIUser_onboarding_progress::setSlides(const QString &slides) {
    m_slides = slides;
    m_slides_isSet = true;
}

bool OAIUser_onboarding_progress::is_slides_Set() const{
    return m_slides_isSet;
}

bool OAIUser_onboarding_progress::is_slides_Valid() const{
    return m_slides_isValid;
}

bool OAIUser_onboarding_progress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_slides_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_onboarding_progress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
