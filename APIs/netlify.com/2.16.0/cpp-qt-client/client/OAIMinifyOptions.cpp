/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMinifyOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMinifyOptions::OAIMinifyOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMinifyOptions::OAIMinifyOptions() {
    this->initializeModel();
}

OAIMinifyOptions::~OAIMinifyOptions() {}

void OAIMinifyOptions::initializeModel() {

    m_bundle_isSet = false;
    m_bundle_isValid = false;

    m_minify_isSet = false;
    m_minify_isValid = false;
}

void OAIMinifyOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMinifyOptions::fromJsonObject(QJsonObject json) {

    m_bundle_isValid = ::OpenAPI::fromJsonValue(m_bundle, json[QString("bundle")]);
    m_bundle_isSet = !json[QString("bundle")].isNull() && m_bundle_isValid;

    m_minify_isValid = ::OpenAPI::fromJsonValue(m_minify, json[QString("minify")]);
    m_minify_isSet = !json[QString("minify")].isNull() && m_minify_isValid;
}

QString OAIMinifyOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMinifyOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_isSet) {
        obj.insert(QString("bundle"), ::OpenAPI::toJsonValue(m_bundle));
    }
    if (m_minify_isSet) {
        obj.insert(QString("minify"), ::OpenAPI::toJsonValue(m_minify));
    }
    return obj;
}

bool OAIMinifyOptions::isBundle() const {
    return m_bundle;
}
void OAIMinifyOptions::setBundle(const bool &bundle) {
    m_bundle = bundle;
    m_bundle_isSet = true;
}

bool OAIMinifyOptions::is_bundle_Set() const{
    return m_bundle_isSet;
}

bool OAIMinifyOptions::is_bundle_Valid() const{
    return m_bundle_isValid;
}

bool OAIMinifyOptions::isMinify() const {
    return m_minify;
}
void OAIMinifyOptions::setMinify(const bool &minify) {
    m_minify = minify;
    m_minify_isSet = true;
}

bool OAIMinifyOptions::is_minify_Set() const{
    return m_minify_isSet;
}

bool OAIMinifyOptions::is_minify_Valid() const{
    return m_minify_isValid;
}

bool OAIMinifyOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minify_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMinifyOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
