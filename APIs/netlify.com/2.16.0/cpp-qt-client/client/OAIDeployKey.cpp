/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployKey::OAIDeployKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployKey::OAIDeployKey() {
    this->initializeModel();
}

OAIDeployKey::~OAIDeployKey() {}

void OAIDeployKey::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;
}

void OAIDeployKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployKey::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("public_key")]);
    m_public_key_isSet = !json[QString("public_key")].isNull() && m_public_key_isValid;
}

QString OAIDeployKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployKey::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("public_key"), ::OpenAPI::toJsonValue(m_public_key));
    }
    return obj;
}

QString OAIDeployKey::getCreatedAt() const {
    return m_created_at;
}
void OAIDeployKey::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeployKey::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeployKey::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeployKey::getId() const {
    return m_id;
}
void OAIDeployKey::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeployKey::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeployKey::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDeployKey::getPublicKey() const {
    return m_public_key;
}
void OAIDeployKey::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIDeployKey::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIDeployKey::is_public_key_Valid() const{
    return m_public_key_isValid;
}

bool OAIDeployKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
