/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeploy.h
 *
 * 
 */

#ifndef OAIDeploy_H
#define OAIDeploy_H

#include <QJsonObject>

#include "OAIDeploy_site_capabilities.h"
#include "OAIFunctionSchedule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFunctionSchedule;
class OAIDeploy_site_capabilities;

class OAIDeploy : public OAIObject {
public:
    OAIDeploy();
    OAIDeploy(QString json);
    ~OAIDeploy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAdminUrl() const;
    void setAdminUrl(const QString &admin_url);
    bool is_admin_url_Set() const;
    bool is_admin_url_Valid() const;

    QString getBranch() const;
    void setBranch(const QString &branch);
    bool is_branch_Set() const;
    bool is_branch_Valid() const;

    QString getBuildId() const;
    void setBuildId(const QString &build_id);
    bool is_build_id_Set() const;
    bool is_build_id_Valid() const;

    QString getCommitRef() const;
    void setCommitRef(const QString &commit_ref);
    bool is_commit_ref_Set() const;
    bool is_commit_ref_Valid() const;

    QString getCommitUrl() const;
    void setCommitUrl(const QString &commit_url);
    bool is_commit_url_Set() const;
    bool is_commit_url_Valid() const;

    QString getContext() const;
    void setContext(const QString &context);
    bool is_context_Set() const;
    bool is_context_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getDeploySslUrl() const;
    void setDeploySslUrl(const QString &deploy_ssl_url);
    bool is_deploy_ssl_url_Set() const;
    bool is_deploy_ssl_url_Valid() const;

    QString getDeployUrl() const;
    void setDeployUrl(const QString &deploy_url);
    bool is_deploy_url_Set() const;
    bool is_deploy_url_Valid() const;

    bool isDraft() const;
    void setDraft(const bool &draft);
    bool is_draft_Set() const;
    bool is_draft_Valid() const;

    QString getErrorMessage() const;
    void setErrorMessage(const QString &error_message);
    bool is_error_message_Set() const;
    bool is_error_message_Valid() const;

    QString getFramework() const;
    void setFramework(const QString &framework);
    bool is_framework_Set() const;
    bool is_framework_Valid() const;

    QList<OAIFunctionSchedule> getFunctionSchedules() const;
    void setFunctionSchedules(const QList<OAIFunctionSchedule> &function_schedules);
    bool is_function_schedules_Set() const;
    bool is_function_schedules_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isLocked() const;
    void setLocked(const bool &locked);
    bool is_locked_Set() const;
    bool is_locked_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPublishedAt() const;
    void setPublishedAt(const QString &published_at);
    bool is_published_at_Set() const;
    bool is_published_at_Valid() const;

    QList<QString> getRequired() const;
    void setRequired(const QList<QString> &required);
    bool is_required_Set() const;
    bool is_required_Valid() const;

    QList<QString> getRequiredFunctions() const;
    void setRequiredFunctions(const QList<QString> &required_functions);
    bool is_required_functions_Set() const;
    bool is_required_functions_Valid() const;

    double getReviewId() const;
    void setReviewId(const double &review_id);
    bool is_review_id_Set() const;
    bool is_review_id_Valid() const;

    QString getReviewUrl() const;
    void setReviewUrl(const QString &review_url);
    bool is_review_url_Set() const;
    bool is_review_url_Valid() const;

    QString getScreenshotUrl() const;
    void setScreenshotUrl(const QString &screenshot_url);
    bool is_screenshot_url_Set() const;
    bool is_screenshot_url_Valid() const;

    OAIDeploy_site_capabilities getSiteCapabilities() const;
    void setSiteCapabilities(const OAIDeploy_site_capabilities &site_capabilities);
    bool is_site_capabilities_Set() const;
    bool is_site_capabilities_Valid() const;

    QString getSiteId() const;
    void setSiteId(const QString &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    bool isSkipped() const;
    void setSkipped(const bool &skipped);
    bool is_skipped_Set() const;
    bool is_skipped_Valid() const;

    QString getSslUrl() const;
    void setSslUrl(const QString &ssl_url);
    bool is_ssl_url_Set() const;
    bool is_ssl_url_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_admin_url;
    bool m_admin_url_isSet;
    bool m_admin_url_isValid;

    QString m_branch;
    bool m_branch_isSet;
    bool m_branch_isValid;

    QString m_build_id;
    bool m_build_id_isSet;
    bool m_build_id_isValid;

    QString m_commit_ref;
    bool m_commit_ref_isSet;
    bool m_commit_ref_isValid;

    QString m_commit_url;
    bool m_commit_url_isSet;
    bool m_commit_url_isValid;

    QString m_context;
    bool m_context_isSet;
    bool m_context_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_deploy_ssl_url;
    bool m_deploy_ssl_url_isSet;
    bool m_deploy_ssl_url_isValid;

    QString m_deploy_url;
    bool m_deploy_url_isSet;
    bool m_deploy_url_isValid;

    bool m_draft;
    bool m_draft_isSet;
    bool m_draft_isValid;

    QString m_error_message;
    bool m_error_message_isSet;
    bool m_error_message_isValid;

    QString m_framework;
    bool m_framework_isSet;
    bool m_framework_isValid;

    QList<OAIFunctionSchedule> m_function_schedules;
    bool m_function_schedules_isSet;
    bool m_function_schedules_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_locked;
    bool m_locked_isSet;
    bool m_locked_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_published_at;
    bool m_published_at_isSet;
    bool m_published_at_isValid;

    QList<QString> m_required;
    bool m_required_isSet;
    bool m_required_isValid;

    QList<QString> m_required_functions;
    bool m_required_functions_isSet;
    bool m_required_functions_isValid;

    double m_review_id;
    bool m_review_id_isSet;
    bool m_review_id_isValid;

    QString m_review_url;
    bool m_review_url_isSet;
    bool m_review_url_isValid;

    QString m_screenshot_url;
    bool m_screenshot_url_isSet;
    bool m_screenshot_url_isValid;

    OAIDeploy_site_capabilities m_site_capabilities;
    bool m_site_capabilities_isSet;
    bool m_site_capabilities_isValid;

    QString m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    bool m_skipped;
    bool m_skipped_isSet;
    bool m_skipped_isValid;

    QString m_ssl_url;
    bool m_ssl_url_isSet;
    bool m_ssl_url_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeploy)

#endif // OAIDeploy_H
