/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvVar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvVar::OAIEnvVar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvVar::OAIEnvVar() {
    this->initializeModel();
}

OAIEnvVar::~OAIEnvVar() {}

void OAIEnvVar::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIEnvVar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvVar::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updated_by")]);
    m_updated_by_isSet = !json[QString("updated_by")].isNull() && m_updated_by_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIEnvVar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvVar::asJsonObject() const {
    QJsonObject obj;
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updated_by"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIEnvVar::getKey() const {
    return m_key;
}
void OAIEnvVar::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIEnvVar::is_key_Set() const{
    return m_key_isSet;
}

bool OAIEnvVar::is_key_Valid() const{
    return m_key_isValid;
}

QList<QString> OAIEnvVar::getScopes() const {
    return m_scopes;
}
void OAIEnvVar::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIEnvVar::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIEnvVar::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QDateTime OAIEnvVar::getUpdatedAt() const {
    return m_updated_at;
}
void OAIEnvVar::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIEnvVar::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIEnvVar::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIEnvVarUser OAIEnvVar::getUpdatedBy() const {
    return m_updated_by;
}
void OAIEnvVar::setUpdatedBy(const OAIEnvVarUser &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIEnvVar::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIEnvVar::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QList<OAIEnvVarValue> OAIEnvVar::getValues() const {
    return m_values;
}
void OAIEnvVar::setValues(const QList<OAIEnvVarValue> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIEnvVar::is_values_Set() const{
    return m_values_isSet;
}

bool OAIEnvVar::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIEnvVar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvVar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
