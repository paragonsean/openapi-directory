/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDnsRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDnsRecord::OAIDnsRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDnsRecord::OAIDnsRecord() {
    this->initializeModel();
}

OAIDnsRecord::~OAIDnsRecord() {}

void OAIDnsRecord::initializeModel() {

    m_dns_zone_id_isSet = false;
    m_dns_zone_id_isValid = false;

    m_flag_isSet = false;
    m_flag_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_managed_isSet = false;
    m_managed_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_ttl_isSet = false;
    m_ttl_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIDnsRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDnsRecord::fromJsonObject(QJsonObject json) {

    m_dns_zone_id_isValid = ::OpenAPI::fromJsonValue(m_dns_zone_id, json[QString("dns_zone_id")]);
    m_dns_zone_id_isSet = !json[QString("dns_zone_id")].isNull() && m_dns_zone_id_isValid;

    m_flag_isValid = ::OpenAPI::fromJsonValue(m_flag, json[QString("flag")]);
    m_flag_isSet = !json[QString("flag")].isNull() && m_flag_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_managed_isValid = ::OpenAPI::fromJsonValue(m_managed, json[QString("managed")]);
    m_managed_isSet = !json[QString("managed")].isNull() && m_managed_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_ttl_isValid = ::OpenAPI::fromJsonValue(m_ttl, json[QString("ttl")]);
    m_ttl_isSet = !json[QString("ttl")].isNull() && m_ttl_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIDnsRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDnsRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_zone_id_isSet) {
        obj.insert(QString("dns_zone_id"), ::OpenAPI::toJsonValue(m_dns_zone_id));
    }
    if (m_flag_isSet) {
        obj.insert(QString("flag"), ::OpenAPI::toJsonValue(m_flag));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_managed_isSet) {
        obj.insert(QString("managed"), ::OpenAPI::toJsonValue(m_managed));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_ttl_isSet) {
        obj.insert(QString("ttl"), ::OpenAPI::toJsonValue(m_ttl));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIDnsRecord::getDnsZoneId() const {
    return m_dns_zone_id;
}
void OAIDnsRecord::setDnsZoneId(const QString &dns_zone_id) {
    m_dns_zone_id = dns_zone_id;
    m_dns_zone_id_isSet = true;
}

bool OAIDnsRecord::is_dns_zone_id_Set() const{
    return m_dns_zone_id_isSet;
}

bool OAIDnsRecord::is_dns_zone_id_Valid() const{
    return m_dns_zone_id_isValid;
}

qint32 OAIDnsRecord::getFlag() const {
    return m_flag;
}
void OAIDnsRecord::setFlag(const qint32 &flag) {
    m_flag = flag;
    m_flag_isSet = true;
}

bool OAIDnsRecord::is_flag_Set() const{
    return m_flag_isSet;
}

bool OAIDnsRecord::is_flag_Valid() const{
    return m_flag_isValid;
}

QString OAIDnsRecord::getHostname() const {
    return m_hostname;
}
void OAIDnsRecord::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIDnsRecord::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIDnsRecord::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIDnsRecord::getId() const {
    return m_id;
}
void OAIDnsRecord::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDnsRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDnsRecord::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDnsRecord::isManaged() const {
    return m_managed;
}
void OAIDnsRecord::setManaged(const bool &managed) {
    m_managed = managed;
    m_managed_isSet = true;
}

bool OAIDnsRecord::is_managed_Set() const{
    return m_managed_isSet;
}

bool OAIDnsRecord::is_managed_Valid() const{
    return m_managed_isValid;
}

qint64 OAIDnsRecord::getPriority() const {
    return m_priority;
}
void OAIDnsRecord::setPriority(const qint64 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIDnsRecord::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIDnsRecord::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIDnsRecord::getSiteId() const {
    return m_site_id;
}
void OAIDnsRecord::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIDnsRecord::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIDnsRecord::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIDnsRecord::getTag() const {
    return m_tag;
}
void OAIDnsRecord::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIDnsRecord::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIDnsRecord::is_tag_Valid() const{
    return m_tag_isValid;
}

qint64 OAIDnsRecord::getTtl() const {
    return m_ttl;
}
void OAIDnsRecord::setTtl(const qint64 &ttl) {
    m_ttl = ttl;
    m_ttl_isSet = true;
}

bool OAIDnsRecord::is_ttl_Set() const{
    return m_ttl_isSet;
}

bool OAIDnsRecord::is_ttl_Valid() const{
    return m_ttl_isValid;
}

QString OAIDnsRecord::getType() const {
    return m_type;
}
void OAIDnsRecord::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDnsRecord::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDnsRecord::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIDnsRecord::getValue() const {
    return m_value;
}
void OAIDnsRecord::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIDnsRecord::is_value_Set() const{
    return m_value_isSet;
}

bool OAIDnsRecord::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIDnsRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDnsRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
