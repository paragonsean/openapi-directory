/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuildHookSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuildHookSetup::OAIBuildHookSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuildHookSetup::OAIBuildHookSetup() {
    this->initializeModel();
}

OAIBuildHookSetup::~OAIBuildHookSetup() {}

void OAIBuildHookSetup::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIBuildHookSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuildHookSetup::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIBuildHookSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuildHookSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIBuildHookSetup::getBranch() const {
    return m_branch;
}
void OAIBuildHookSetup::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAIBuildHookSetup::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAIBuildHookSetup::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAIBuildHookSetup::getTitle() const {
    return m_title;
}
void OAIBuildHookSetup::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIBuildHookSetup::is_title_Set() const{
    return m_title_isSet;
}

bool OAIBuildHookSetup::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIBuildHookSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuildHookSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
