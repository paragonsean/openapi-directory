/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountUpdateMemberSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountUpdateMemberSetup::OAIAccountUpdateMemberSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountUpdateMemberSetup::OAIAccountUpdateMemberSetup() {
    this->initializeModel();
}

OAIAccountUpdateMemberSetup::~OAIAccountUpdateMemberSetup() {}

void OAIAccountUpdateMemberSetup::initializeModel() {

    m_role_isSet = false;
    m_role_isValid = false;

    m_site_access_isSet = false;
    m_site_access_isValid = false;

    m_site_ids_isSet = false;
    m_site_ids_isValid = false;
}

void OAIAccountUpdateMemberSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountUpdateMemberSetup::fromJsonObject(QJsonObject json) {

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_site_access_isValid = ::OpenAPI::fromJsonValue(m_site_access, json[QString("site_access")]);
    m_site_access_isSet = !json[QString("site_access")].isNull() && m_site_access_isValid;

    m_site_ids_isValid = ::OpenAPI::fromJsonValue(m_site_ids, json[QString("site_ids")]);
    m_site_ids_isSet = !json[QString("site_ids")].isNull() && m_site_ids_isValid;
}

QString OAIAccountUpdateMemberSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountUpdateMemberSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_site_access_isSet) {
        obj.insert(QString("site_access"), ::OpenAPI::toJsonValue(m_site_access));
    }
    if (m_site_ids.size() > 0) {
        obj.insert(QString("site_ids"), ::OpenAPI::toJsonValue(m_site_ids));
    }
    return obj;
}

QString OAIAccountUpdateMemberSetup::getRole() const {
    return m_role;
}
void OAIAccountUpdateMemberSetup::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAccountUpdateMemberSetup::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAccountUpdateMemberSetup::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIAccountUpdateMemberSetup::getSiteAccess() const {
    return m_site_access;
}
void OAIAccountUpdateMemberSetup::setSiteAccess(const QString &site_access) {
    m_site_access = site_access;
    m_site_access_isSet = true;
}

bool OAIAccountUpdateMemberSetup::is_site_access_Set() const{
    return m_site_access_isSet;
}

bool OAIAccountUpdateMemberSetup::is_site_access_Valid() const{
    return m_site_access_isValid;
}

QList<QString> OAIAccountUpdateMemberSetup::getSiteIds() const {
    return m_site_ids;
}
void OAIAccountUpdateMemberSetup::setSiteIds(const QList<QString> &site_ids) {
    m_site_ids = site_ids;
    m_site_ids_isSet = true;
}

bool OAIAccountUpdateMemberSetup::is_site_ids_Set() const{
    return m_site_ids_isSet;
}

bool OAIAccountUpdateMemberSetup::is_site_ids_Valid() const{
    return m_site_ids_isValid;
}

bool OAIAccountUpdateMemberSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountUpdateMemberSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
