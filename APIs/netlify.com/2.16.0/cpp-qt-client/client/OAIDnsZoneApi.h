/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDnsZoneApi_H
#define OAI_OAIDnsZoneApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDnsRecord.h"
#include "OAIDnsRecordCreate.h"
#include "OAIDnsZone.h"
#include "OAIDnsZoneSetup.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDnsZoneApi : public QObject {
    Q_OBJECT

public:
    OAIDnsZoneApi(const int timeOut = 0);
    ~OAIDnsZoneApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void configureDNSForSite(const QString &site_id);

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  dns_record OAIDnsRecordCreate [required]
    */
    virtual void createDnsRecord(const QString &zone_id, const OAIDnsRecordCreate &dns_record);

    /**
    * @param[in]  dns_zone_params OAIDnsZoneSetup [required]
    */
    virtual void createDnsZone(const OAIDnsZoneSetup &dns_zone_params);

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  dns_record_id QString [required]
    */
    virtual void deleteDnsRecord(const QString &zone_id, const QString &dns_record_id);

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void deleteDnsZone(const QString &zone_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void getDNSForSite(const QString &site_id);

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void getDnsRecords(const QString &zone_id);

    /**
    * @param[in]  zone_id QString [required]
    */
    virtual void getDnsZone(const QString &zone_id);

    /**
    * @param[in]  account_slug QString [optional]
    */
    virtual void getDnsZones(const ::OpenAPI::OptionalParam<QString> &account_slug = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  dns_record_id QString [required]
    */
    virtual void getIndividualDnsRecord(const QString &zone_id, const QString &dns_record_id);

    /**
    * @param[in]  zone_id QString [required]
    * @param[in]  account_id QString [required]
    * @param[in]  transfer_account_id QString [required]
    * @param[in]  transfer_user_id QString [required]
    */
    virtual void transferDnsZone(const QString &zone_id, const QString &account_id, const QString &transfer_account_id, const QString &transfer_user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void configureDNSForSiteCallback(OAIHttpRequestWorker *worker);
    void createDnsRecordCallback(OAIHttpRequestWorker *worker);
    void createDnsZoneCallback(OAIHttpRequestWorker *worker);
    void deleteDnsRecordCallback(OAIHttpRequestWorker *worker);
    void deleteDnsZoneCallback(OAIHttpRequestWorker *worker);
    void getDNSForSiteCallback(OAIHttpRequestWorker *worker);
    void getDnsRecordsCallback(OAIHttpRequestWorker *worker);
    void getDnsZoneCallback(OAIHttpRequestWorker *worker);
    void getDnsZonesCallback(OAIHttpRequestWorker *worker);
    void getIndividualDnsRecordCallback(OAIHttpRequestWorker *worker);
    void transferDnsZoneCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void configureDNSForSiteSignal(QList<OAIDnsZone> summary);
    void createDnsRecordSignal(OAIDnsRecord summary);
    void createDnsZoneSignal(OAIDnsZone summary);
    void deleteDnsRecordSignal();
    void deleteDnsZoneSignal();
    void getDNSForSiteSignal(QList<OAIDnsZone> summary);
    void getDnsRecordsSignal(QList<OAIDnsRecord> summary);
    void getDnsZoneSignal(OAIDnsZone summary);
    void getDnsZonesSignal(QList<OAIDnsZone> summary);
    void getIndividualDnsRecordSignal(OAIDnsRecord summary);
    void transferDnsZoneSignal(OAIDnsZone summary);


    void configureDNSForSiteSignalFull(OAIHttpRequestWorker *worker, QList<OAIDnsZone> summary);
    void createDnsRecordSignalFull(OAIHttpRequestWorker *worker, OAIDnsRecord summary);
    void createDnsZoneSignalFull(OAIHttpRequestWorker *worker, OAIDnsZone summary);
    void deleteDnsRecordSignalFull(OAIHttpRequestWorker *worker);
    void deleteDnsZoneSignalFull(OAIHttpRequestWorker *worker);
    void getDNSForSiteSignalFull(OAIHttpRequestWorker *worker, QList<OAIDnsZone> summary);
    void getDnsRecordsSignalFull(OAIHttpRequestWorker *worker, QList<OAIDnsRecord> summary);
    void getDnsZoneSignalFull(OAIHttpRequestWorker *worker, OAIDnsZone summary);
    void getDnsZonesSignalFull(OAIHttpRequestWorker *worker, QList<OAIDnsZone> summary);
    void getIndividualDnsRecordSignalFull(OAIHttpRequestWorker *worker, OAIDnsRecord summary);
    void transferDnsZoneSignalFull(OAIHttpRequestWorker *worker, OAIDnsZone summary);

    Q_DECL_DEPRECATED_X("Use configureDNSForSiteSignalError() instead")
    void configureDNSForSiteSignalE(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configureDNSForSiteSignalError(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDnsRecordSignalError() instead")
    void createDnsRecordSignalE(OAIDnsRecord summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDnsRecordSignalError(OAIDnsRecord summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDnsZoneSignalError() instead")
    void createDnsZoneSignalE(OAIDnsZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDnsZoneSignalError(OAIDnsZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDnsRecordSignalError() instead")
    void deleteDnsRecordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDnsRecordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDnsZoneSignalError() instead")
    void deleteDnsZoneSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDnsZoneSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDNSForSiteSignalError() instead")
    void getDNSForSiteSignalE(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDNSForSiteSignalError(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsRecordsSignalError() instead")
    void getDnsRecordsSignalE(QList<OAIDnsRecord> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsRecordsSignalError(QList<OAIDnsRecord> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsZoneSignalError() instead")
    void getDnsZoneSignalE(OAIDnsZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsZoneSignalError(OAIDnsZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsZonesSignalError() instead")
    void getDnsZonesSignalE(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsZonesSignalError(QList<OAIDnsZone> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndividualDnsRecordSignalError() instead")
    void getIndividualDnsRecordSignalE(OAIDnsRecord summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndividualDnsRecordSignalError(OAIDnsRecord summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDnsZoneSignalError() instead")
    void transferDnsZoneSignalE(OAIDnsZone summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDnsZoneSignalError(OAIDnsZone summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use configureDNSForSiteSignalErrorFull() instead")
    void configureDNSForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configureDNSForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDnsRecordSignalErrorFull() instead")
    void createDnsRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDnsRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDnsZoneSignalErrorFull() instead")
    void createDnsZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDnsZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDnsRecordSignalErrorFull() instead")
    void deleteDnsRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDnsRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDnsZoneSignalErrorFull() instead")
    void deleteDnsZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDnsZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDNSForSiteSignalErrorFull() instead")
    void getDNSForSiteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDNSForSiteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsRecordsSignalErrorFull() instead")
    void getDnsRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsZoneSignalErrorFull() instead")
    void getDnsZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDnsZonesSignalErrorFull() instead")
    void getDnsZonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDnsZonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIndividualDnsRecordSignalErrorFull() instead")
    void getIndividualDnsRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIndividualDnsRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transferDnsZoneSignalErrorFull() instead")
    void transferDnsZoneSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transferDnsZoneSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
