/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMemberApi_H
#define OAI_OAIMemberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountAddMemberSetup.h"
#include "OAIAccountUpdateMemberSetup.h"
#include "OAIError.h"
#include "OAIMember.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMemberApi : public QObject {
    Q_OBJECT

public:
    OAIMemberApi(const int timeOut = 0);
    ~OAIMemberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  account_add_member_setup OAIAccountAddMemberSetup [required]
    */
    virtual void addMemberToAccount(const QString &account_slug, const OAIAccountAddMemberSetup &account_add_member_setup);

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void getAccountMember(const QString &account_slug, const QString &member_id);

    /**
    * @param[in]  account_slug QString [required]
    */
    virtual void listMembersForAccount(const QString &account_slug);

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  member_id QString [required]
    */
    virtual void removeAccountMember(const QString &account_slug, const QString &member_id);

    /**
    * @param[in]  account_slug QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  account_update_member_setup OAIAccountUpdateMemberSetup [required]
    */
    virtual void updateAccountMember(const QString &account_slug, const QString &member_id, const OAIAccountUpdateMemberSetup &account_update_member_setup);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addMemberToAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountMemberCallback(OAIHttpRequestWorker *worker);
    void listMembersForAccountCallback(OAIHttpRequestWorker *worker);
    void removeAccountMemberCallback(OAIHttpRequestWorker *worker);
    void updateAccountMemberCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addMemberToAccountSignal(QList<OAIMember> summary);
    void getAccountMemberSignal(OAIMember summary);
    void listMembersForAccountSignal(QList<OAIMember> summary);
    void removeAccountMemberSignal();
    void updateAccountMemberSignal(OAIMember summary);


    void addMemberToAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAIMember> summary);
    void getAccountMemberSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);
    void listMembersForAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAIMember> summary);
    void removeAccountMemberSignalFull(OAIHttpRequestWorker *worker);
    void updateAccountMemberSignalFull(OAIHttpRequestWorker *worker, OAIMember summary);

    Q_DECL_DEPRECATED_X("Use addMemberToAccountSignalError() instead")
    void addMemberToAccountSignalE(QList<OAIMember> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addMemberToAccountSignalError(QList<OAIMember> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountMemberSignalError() instead")
    void getAccountMemberSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountMemberSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMembersForAccountSignalError() instead")
    void listMembersForAccountSignalE(QList<OAIMember> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMembersForAccountSignalError(QList<OAIMember> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAccountMemberSignalError() instead")
    void removeAccountMemberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAccountMemberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountMemberSignalError() instead")
    void updateAccountMemberSignalE(OAIMember summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountMemberSignalError(OAIMember summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addMemberToAccountSignalErrorFull() instead")
    void addMemberToAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addMemberToAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountMemberSignalErrorFull() instead")
    void getAccountMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMembersForAccountSignalErrorFull() instead")
    void listMembersForAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMembersForAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAccountMemberSignalErrorFull() instead")
    void removeAccountMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAccountMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountMemberSignalErrorFull() instead")
    void updateAccountMemberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountMemberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
