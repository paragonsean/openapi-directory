/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_affiliate_id_isSet = false;
    m_affiliate_id_isValid = false;

    m_avatar_url_isSet = false;
    m_avatar_url_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_login_isSet = false;
    m_last_login_isValid = false;

    m_login_providers_isSet = false;
    m_login_providers_isValid = false;

    m_onboarding_progress_isSet = false;
    m_onboarding_progress_isValid = false;

    m_site_count_isSet = false;
    m_site_count_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_affiliate_id_isValid = ::OpenAPI::fromJsonValue(m_affiliate_id, json[QString("affiliate_id")]);
    m_affiliate_id_isSet = !json[QString("affiliate_id")].isNull() && m_affiliate_id_isValid;

    m_avatar_url_isValid = ::OpenAPI::fromJsonValue(m_avatar_url, json[QString("avatar_url")]);
    m_avatar_url_isSet = !json[QString("avatar_url")].isNull() && m_avatar_url_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_login_isValid = ::OpenAPI::fromJsonValue(m_last_login, json[QString("last_login")]);
    m_last_login_isSet = !json[QString("last_login")].isNull() && m_last_login_isValid;

    m_login_providers_isValid = ::OpenAPI::fromJsonValue(m_login_providers, json[QString("login_providers")]);
    m_login_providers_isSet = !json[QString("login_providers")].isNull() && m_login_providers_isValid;

    m_onboarding_progress_isValid = ::OpenAPI::fromJsonValue(m_onboarding_progress, json[QString("onboarding_progress")]);
    m_onboarding_progress_isSet = !json[QString("onboarding_progress")].isNull() && m_onboarding_progress_isValid;

    m_site_count_isValid = ::OpenAPI::fromJsonValue(m_site_count, json[QString("site_count")]);
    m_site_count_isSet = !json[QString("site_count")].isNull() && m_site_count_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_affiliate_id_isSet) {
        obj.insert(QString("affiliate_id"), ::OpenAPI::toJsonValue(m_affiliate_id));
    }
    if (m_avatar_url_isSet) {
        obj.insert(QString("avatar_url"), ::OpenAPI::toJsonValue(m_avatar_url));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_login_isSet) {
        obj.insert(QString("last_login"), ::OpenAPI::toJsonValue(m_last_login));
    }
    if (m_login_providers.size() > 0) {
        obj.insert(QString("login_providers"), ::OpenAPI::toJsonValue(m_login_providers));
    }
    if (m_onboarding_progress.isSet()) {
        obj.insert(QString("onboarding_progress"), ::OpenAPI::toJsonValue(m_onboarding_progress));
    }
    if (m_site_count_isSet) {
        obj.insert(QString("site_count"), ::OpenAPI::toJsonValue(m_site_count));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    return obj;
}

QString OAIUser::getAffiliateId() const {
    return m_affiliate_id;
}
void OAIUser::setAffiliateId(const QString &affiliate_id) {
    m_affiliate_id = affiliate_id;
    m_affiliate_id_isSet = true;
}

bool OAIUser::is_affiliate_id_Set() const{
    return m_affiliate_id_isSet;
}

bool OAIUser::is_affiliate_id_Valid() const{
    return m_affiliate_id_isValid;
}

QString OAIUser::getAvatarUrl() const {
    return m_avatar_url;
}
void OAIUser::setAvatarUrl(const QString &avatar_url) {
    m_avatar_url = avatar_url;
    m_avatar_url_isSet = true;
}

bool OAIUser::is_avatar_url_Set() const{
    return m_avatar_url_isSet;
}

bool OAIUser::is_avatar_url_Valid() const{
    return m_avatar_url_isValid;
}

QString OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getFullName() const {
    return m_full_name;
}
void OAIUser::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUser::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUser::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getLastLogin() const {
    return m_last_login;
}
void OAIUser::setLastLogin(const QString &last_login) {
    m_last_login = last_login;
    m_last_login_isSet = true;
}

bool OAIUser::is_last_login_Set() const{
    return m_last_login_isSet;
}

bool OAIUser::is_last_login_Valid() const{
    return m_last_login_isValid;
}

QList<QString> OAIUser::getLoginProviders() const {
    return m_login_providers;
}
void OAIUser::setLoginProviders(const QList<QString> &login_providers) {
    m_login_providers = login_providers;
    m_login_providers_isSet = true;
}

bool OAIUser::is_login_providers_Set() const{
    return m_login_providers_isSet;
}

bool OAIUser::is_login_providers_Valid() const{
    return m_login_providers_isValid;
}

OAIUser_onboarding_progress OAIUser::getOnboardingProgress() const {
    return m_onboarding_progress;
}
void OAIUser::setOnboardingProgress(const OAIUser_onboarding_progress &onboarding_progress) {
    m_onboarding_progress = onboarding_progress;
    m_onboarding_progress_isSet = true;
}

bool OAIUser::is_onboarding_progress_Set() const{
    return m_onboarding_progress_isSet;
}

bool OAIUser::is_onboarding_progress_Valid() const{
    return m_onboarding_progress_isValid;
}

qint64 OAIUser::getSiteCount() const {
    return m_site_count;
}
void OAIUser::setSiteCount(const qint64 &site_count) {
    m_site_count = site_count;
    m_site_count_isSet = true;
}

bool OAIUser::is_site_count_Set() const{
    return m_site_count_isSet;
}

bool OAIUser::is_site_count_Valid() const{
    return m_site_count_isValid;
}

QString OAIUser::getUid() const {
    return m_uid;
}
void OAIUser::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIUser::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIUser::is_uid_Valid() const{
    return m_uid_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affiliate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
