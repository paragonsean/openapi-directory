/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeploy_site_capabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeploy_site_capabilities::OAIDeploy_site_capabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeploy_site_capabilities::OAIDeploy_site_capabilities() {
    this->initializeModel();
}

OAIDeploy_site_capabilities::~OAIDeploy_site_capabilities() {}

void OAIDeploy_site_capabilities::initializeModel() {

    m_large_media_enabled_isSet = false;
    m_large_media_enabled_isValid = false;
}

void OAIDeploy_site_capabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeploy_site_capabilities::fromJsonObject(QJsonObject json) {

    m_large_media_enabled_isValid = ::OpenAPI::fromJsonValue(m_large_media_enabled, json[QString("large_media_enabled")]);
    m_large_media_enabled_isSet = !json[QString("large_media_enabled")].isNull() && m_large_media_enabled_isValid;
}

QString OAIDeploy_site_capabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeploy_site_capabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_large_media_enabled_isSet) {
        obj.insert(QString("large_media_enabled"), ::OpenAPI::toJsonValue(m_large_media_enabled));
    }
    return obj;
}

bool OAIDeploy_site_capabilities::isLargeMediaEnabled() const {
    return m_large_media_enabled;
}
void OAIDeploy_site_capabilities::setLargeMediaEnabled(const bool &large_media_enabled) {
    m_large_media_enabled = large_media_enabled;
    m_large_media_enabled_isSet = true;
}

bool OAIDeploy_site_capabilities::is_large_media_enabled_Set() const{
    return m_large_media_enabled_isSet;
}

bool OAIDeploy_site_capabilities::is_large_media_enabled_Valid() const{
    return m_large_media_enabled_isValid;
}

bool OAIDeploy_site_capabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_large_media_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeploy_site_capabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
