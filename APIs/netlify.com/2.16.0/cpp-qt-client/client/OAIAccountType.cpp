/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountType::OAIAccountType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountType::OAIAccountType() {
    this->initializeModel();
}

OAIAccountType::~OAIAccountType() {}

void OAIAccountType::initializeModel() {

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_monthly_dollar_price_isSet = false;
    m_monthly_dollar_price_isValid = false;

    m_monthly_seats_addon_dollar_price_isSet = false;
    m_monthly_seats_addon_dollar_price_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_yearly_dollar_price_isSet = false;
    m_yearly_dollar_price_isValid = false;

    m_yearly_seats_addon_dollar_price_isSet = false;
    m_yearly_seats_addon_dollar_price_isValid = false;
}

void OAIAccountType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountType::fromJsonObject(QJsonObject json) {

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_monthly_dollar_price_isValid = ::OpenAPI::fromJsonValue(m_monthly_dollar_price, json[QString("monthly_dollar_price")]);
    m_monthly_dollar_price_isSet = !json[QString("monthly_dollar_price")].isNull() && m_monthly_dollar_price_isValid;

    m_monthly_seats_addon_dollar_price_isValid = ::OpenAPI::fromJsonValue(m_monthly_seats_addon_dollar_price, json[QString("monthly_seats_addon_dollar_price")]);
    m_monthly_seats_addon_dollar_price_isSet = !json[QString("monthly_seats_addon_dollar_price")].isNull() && m_monthly_seats_addon_dollar_price_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_yearly_dollar_price_isValid = ::OpenAPI::fromJsonValue(m_yearly_dollar_price, json[QString("yearly_dollar_price")]);
    m_yearly_dollar_price_isSet = !json[QString("yearly_dollar_price")].isNull() && m_yearly_dollar_price_isValid;

    m_yearly_seats_addon_dollar_price_isValid = ::OpenAPI::fromJsonValue(m_yearly_seats_addon_dollar_price, json[QString("yearly_seats_addon_dollar_price")]);
    m_yearly_seats_addon_dollar_price_isSet = !json[QString("yearly_seats_addon_dollar_price")].isNull() && m_yearly_seats_addon_dollar_price_isValid;
}

QString OAIAccountType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountType::asJsonObject() const {
    QJsonObject obj;
    if (m_capabilities_isSet) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_monthly_dollar_price_isSet) {
        obj.insert(QString("monthly_dollar_price"), ::OpenAPI::toJsonValue(m_monthly_dollar_price));
    }
    if (m_monthly_seats_addon_dollar_price_isSet) {
        obj.insert(QString("monthly_seats_addon_dollar_price"), ::OpenAPI::toJsonValue(m_monthly_seats_addon_dollar_price));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_yearly_dollar_price_isSet) {
        obj.insert(QString("yearly_dollar_price"), ::OpenAPI::toJsonValue(m_yearly_dollar_price));
    }
    if (m_yearly_seats_addon_dollar_price_isSet) {
        obj.insert(QString("yearly_seats_addon_dollar_price"), ::OpenAPI::toJsonValue(m_yearly_seats_addon_dollar_price));
    }
    return obj;
}

OAIObject OAIAccountType::getCapabilities() const {
    return m_capabilities;
}
void OAIAccountType::setCapabilities(const OAIObject &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIAccountType::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIAccountType::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAIAccountType::getDescription() const {
    return m_description;
}
void OAIAccountType::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccountType::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccountType::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAccountType::getId() const {
    return m_id;
}
void OAIAccountType::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccountType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccountType::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIAccountType::getMonthlyDollarPrice() const {
    return m_monthly_dollar_price;
}
void OAIAccountType::setMonthlyDollarPrice(const qint32 &monthly_dollar_price) {
    m_monthly_dollar_price = monthly_dollar_price;
    m_monthly_dollar_price_isSet = true;
}

bool OAIAccountType::is_monthly_dollar_price_Set() const{
    return m_monthly_dollar_price_isSet;
}

bool OAIAccountType::is_monthly_dollar_price_Valid() const{
    return m_monthly_dollar_price_isValid;
}

qint32 OAIAccountType::getMonthlySeatsAddonDollarPrice() const {
    return m_monthly_seats_addon_dollar_price;
}
void OAIAccountType::setMonthlySeatsAddonDollarPrice(const qint32 &monthly_seats_addon_dollar_price) {
    m_monthly_seats_addon_dollar_price = monthly_seats_addon_dollar_price;
    m_monthly_seats_addon_dollar_price_isSet = true;
}

bool OAIAccountType::is_monthly_seats_addon_dollar_price_Set() const{
    return m_monthly_seats_addon_dollar_price_isSet;
}

bool OAIAccountType::is_monthly_seats_addon_dollar_price_Valid() const{
    return m_monthly_seats_addon_dollar_price_isValid;
}

QString OAIAccountType::getName() const {
    return m_name;
}
void OAIAccountType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccountType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccountType::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAccountType::getYearlyDollarPrice() const {
    return m_yearly_dollar_price;
}
void OAIAccountType::setYearlyDollarPrice(const qint32 &yearly_dollar_price) {
    m_yearly_dollar_price = yearly_dollar_price;
    m_yearly_dollar_price_isSet = true;
}

bool OAIAccountType::is_yearly_dollar_price_Set() const{
    return m_yearly_dollar_price_isSet;
}

bool OAIAccountType::is_yearly_dollar_price_Valid() const{
    return m_yearly_dollar_price_isValid;
}

qint32 OAIAccountType::getYearlySeatsAddonDollarPrice() const {
    return m_yearly_seats_addon_dollar_price;
}
void OAIAccountType::setYearlySeatsAddonDollarPrice(const qint32 &yearly_seats_addon_dollar_price) {
    m_yearly_seats_addon_dollar_price = yearly_seats_addon_dollar_price;
    m_yearly_seats_addon_dollar_price_isSet = true;
}

bool OAIAccountType::is_yearly_seats_addon_dollar_price_Set() const{
    return m_yearly_seats_addon_dollar_price_isSet;
}

bool OAIAccountType::is_yearly_seats_addon_dollar_price_Valid() const{
    return m_yearly_seats_addon_dollar_price_isValid;
}

bool OAIAccountType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capabilities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_dollar_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_seats_addon_dollar_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yearly_dollar_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yearly_seats_addon_dollar_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
