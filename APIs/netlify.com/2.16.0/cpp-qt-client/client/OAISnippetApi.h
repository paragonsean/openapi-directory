/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISnippetApi_H
#define OAI_OAISnippetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAISnippet.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISnippetApi : public QObject {
    Q_OBJECT

public:
    OAISnippetApi(const int timeOut = 0);
    ~OAISnippetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  snippet OAISnippet [required]
    */
    virtual void createSiteSnippet(const QString &site_id, const OAISnippet &snippet);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  snippet_id QString [required]
    */
    virtual void deleteSiteSnippet(const QString &site_id, const QString &snippet_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  snippet_id QString [required]
    */
    virtual void getSiteSnippet(const QString &site_id, const QString &snippet_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void listSiteSnippets(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  snippet_id QString [required]
    * @param[in]  snippet OAISnippet [required]
    */
    virtual void updateSiteSnippet(const QString &site_id, const QString &snippet_id, const OAISnippet &snippet);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSiteSnippetCallback(OAIHttpRequestWorker *worker);
    void deleteSiteSnippetCallback(OAIHttpRequestWorker *worker);
    void getSiteSnippetCallback(OAIHttpRequestWorker *worker);
    void listSiteSnippetsCallback(OAIHttpRequestWorker *worker);
    void updateSiteSnippetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSiteSnippetSignal(OAISnippet summary);
    void deleteSiteSnippetSignal();
    void getSiteSnippetSignal(OAISnippet summary);
    void listSiteSnippetsSignal(QList<OAISnippet> summary);
    void updateSiteSnippetSignal();


    void createSiteSnippetSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void deleteSiteSnippetSignalFull(OAIHttpRequestWorker *worker);
    void getSiteSnippetSignalFull(OAIHttpRequestWorker *worker, OAISnippet summary);
    void listSiteSnippetsSignalFull(OAIHttpRequestWorker *worker, QList<OAISnippet> summary);
    void updateSiteSnippetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createSiteSnippetSignalError() instead")
    void createSiteSnippetSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSnippetSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteSnippetSignalError() instead")
    void deleteSiteSnippetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteSnippetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteSnippetSignalError() instead")
    void getSiteSnippetSignalE(OAISnippet summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSnippetSignalError(OAISnippet summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteSnippetsSignalError() instead")
    void listSiteSnippetsSignalE(QList<OAISnippet> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteSnippetsSignalError(QList<OAISnippet> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteSnippetSignalError() instead")
    void updateSiteSnippetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteSnippetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSiteSnippetSignalErrorFull() instead")
    void createSiteSnippetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteSnippetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteSnippetSignalErrorFull() instead")
    void deleteSiteSnippetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteSnippetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteSnippetSignalErrorFull() instead")
    void getSiteSnippetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteSnippetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteSnippetsSignalErrorFull() instead")
    void listSiteSnippetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteSnippetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteSnippetSignalErrorFull() instead")
    void updateSiteSnippetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteSnippetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
