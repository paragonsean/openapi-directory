/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountMembership_capabilities.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountMembership_capabilities::OAIAccountMembership_capabilities(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountMembership_capabilities::OAIAccountMembership_capabilities() {
    this->initializeModel();
}

OAIAccountMembership_capabilities::~OAIAccountMembership_capabilities() {}

void OAIAccountMembership_capabilities::initializeModel() {

    m_collaborators_isSet = false;
    m_collaborators_isValid = false;

    m_sites_isSet = false;
    m_sites_isValid = false;
}

void OAIAccountMembership_capabilities::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountMembership_capabilities::fromJsonObject(QJsonObject json) {

    m_collaborators_isValid = ::OpenAPI::fromJsonValue(m_collaborators, json[QString("collaborators")]);
    m_collaborators_isSet = !json[QString("collaborators")].isNull() && m_collaborators_isValid;

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;
}

QString OAIAccountMembership_capabilities::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountMembership_capabilities::asJsonObject() const {
    QJsonObject obj;
    if (m_collaborators.isSet()) {
        obj.insert(QString("collaborators"), ::OpenAPI::toJsonValue(m_collaborators));
    }
    if (m_sites.isSet()) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    return obj;
}

OAIAccountUsageCapability OAIAccountMembership_capabilities::getCollaborators() const {
    return m_collaborators;
}
void OAIAccountMembership_capabilities::setCollaborators(const OAIAccountUsageCapability &collaborators) {
    m_collaborators = collaborators;
    m_collaborators_isSet = true;
}

bool OAIAccountMembership_capabilities::is_collaborators_Set() const{
    return m_collaborators_isSet;
}

bool OAIAccountMembership_capabilities::is_collaborators_Valid() const{
    return m_collaborators_isValid;
}

OAIAccountUsageCapability OAIAccountMembership_capabilities::getSites() const {
    return m_sites;
}
void OAIAccountMembership_capabilities::setSites(const OAIAccountUsageCapability &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIAccountMembership_capabilities::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIAccountMembership_capabilities::is_sites_Valid() const{
    return m_sites_isValid;
}

bool OAIAccountMembership_capabilities::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collaborators.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sites.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountMembership_capabilities::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
