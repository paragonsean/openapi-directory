/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDnsRecordCreate.h
 *
 * 
 */

#ifndef OAIDnsRecordCreate_H
#define OAIDnsRecordCreate_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDnsRecordCreate : public OAIObject {
public:
    OAIDnsRecordCreate();
    OAIDnsRecordCreate(QString json);
    ~OAIDnsRecordCreate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getFlag() const;
    void setFlag(const qint64 &flag);
    bool is_flag_Set() const;
    bool is_flag_Valid() const;

    QString getHostname() const;
    void setHostname(const QString &hostname);
    bool is_hostname_Set() const;
    bool is_hostname_Valid() const;

    qint64 getPort() const;
    void setPort(const qint64 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    qint64 getPriority() const;
    void setPriority(const qint64 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    qint64 getTtl() const;
    void setTtl(const qint64 &ttl);
    bool is_ttl_Set() const;
    bool is_ttl_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    qint64 getWeight() const;
    void setWeight(const qint64 &weight);
    bool is_weight_Set() const;
    bool is_weight_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_flag;
    bool m_flag_isSet;
    bool m_flag_isValid;

    QString m_hostname;
    bool m_hostname_isSet;
    bool m_hostname_isValid;

    qint64 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    qint64 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    qint64 m_ttl;
    bool m_ttl_isSet;
    bool m_ttl_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    qint64 m_weight;
    bool m_weight_isSet;
    bool m_weight_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDnsRecordCreate)

#endif // OAIDnsRecordCreate_H
