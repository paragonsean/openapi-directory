/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite_processing_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite_processing_settings::OAISite_processing_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite_processing_settings::OAISite_processing_settings() {
    this->initializeModel();
}

OAISite_processing_settings::~OAISite_processing_settings() {}

void OAISite_processing_settings::initializeModel() {

    m_css_isSet = false;
    m_css_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_js_isSet = false;
    m_js_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;
}

void OAISite_processing_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite_processing_settings::fromJsonObject(QJsonObject json) {

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_js_isValid = ::OpenAPI::fromJsonValue(m_js, json[QString("js")]);
    m_js_isSet = !json[QString("js")].isNull() && m_js_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;
}

QString OAISite_processing_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite_processing_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_css.isSet()) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_images.isSet()) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_js.isSet()) {
        obj.insert(QString("js"), ::OpenAPI::toJsonValue(m_js));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    return obj;
}

OAIMinifyOptions OAISite_processing_settings::getCss() const {
    return m_css;
}
void OAISite_processing_settings::setCss(const OAIMinifyOptions &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAISite_processing_settings::is_css_Set() const{
    return m_css_isSet;
}

bool OAISite_processing_settings::is_css_Valid() const{
    return m_css_isValid;
}

OAISite_processing_settings_html OAISite_processing_settings::getHtml() const {
    return m_html;
}
void OAISite_processing_settings::setHtml(const OAISite_processing_settings_html &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAISite_processing_settings::is_html_Set() const{
    return m_html_isSet;
}

bool OAISite_processing_settings::is_html_Valid() const{
    return m_html_isValid;
}

OAISite_processing_settings_images OAISite_processing_settings::getImages() const {
    return m_images;
}
void OAISite_processing_settings::setImages(const OAISite_processing_settings_images &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISite_processing_settings::is_images_Set() const{
    return m_images_isSet;
}

bool OAISite_processing_settings::is_images_Valid() const{
    return m_images_isValid;
}

OAIMinifyOptions OAISite_processing_settings::getJs() const {
    return m_js;
}
void OAISite_processing_settings::setJs(const OAIMinifyOptions &js) {
    m_js = js;
    m_js_isSet = true;
}

bool OAISite_processing_settings::is_js_Set() const{
    return m_js_isSet;
}

bool OAISite_processing_settings::is_js_Valid() const{
    return m_js_isValid;
}

bool OAISite_processing_settings::isSkip() const {
    return m_skip;
}
void OAISite_processing_settings::setSkip(const bool &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAISite_processing_settings::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAISite_processing_settings::is_skip_Valid() const{
    return m_skip_isValid;
}

bool OAISite_processing_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_css.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_js.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite_processing_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
