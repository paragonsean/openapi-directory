/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("content_type")]);
    m_content_type_isSet = !json[QString("content_type")].isNull() && m_content_type_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creator_id")]);
    m_creator_id_isSet = !json[QString("creator_id")].isNull() && m_creator_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("content_type"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creator_id"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

QString OAIAsset::getContentType() const {
    return m_content_type;
}
void OAIAsset::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIAsset::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIAsset::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIAsset::getCreatedAt() const {
    return m_created_at;
}
void OAIAsset::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAsset::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAsset::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAsset::getCreatorId() const {
    return m_creator_id;
}
void OAIAsset::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIAsset::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIAsset::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAIAsset::getId() const {
    return m_id;
}
void OAIAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAsset::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAsset::getKey() const {
    return m_key;
}
void OAIAsset::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAsset::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAsset::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIAsset::getName() const {
    return m_name;
}
void OAIAsset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsset::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAsset::getSiteId() const {
    return m_site_id;
}
void OAIAsset::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIAsset::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIAsset::is_site_id_Valid() const{
    return m_site_id_isValid;
}

qint64 OAIAsset::getSize() const {
    return m_size;
}
void OAIAsset::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIAsset::is_size_Set() const{
    return m_size_isSet;
}

bool OAIAsset::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIAsset::getState() const {
    return m_state;
}
void OAIAsset::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAsset::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAsset::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAsset::getUpdatedAt() const {
    return m_updated_at;
}
void OAIAsset::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIAsset::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIAsset::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIAsset::getUrl() const {
    return m_url;
}
void OAIAsset::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAsset::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAsset::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAsset::getVisibility() const {
    return m_visibility;
}
void OAIAsset::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIAsset::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIAsset::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
