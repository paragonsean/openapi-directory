/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplitTest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplitTest::OAISplitTest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplitTest::OAISplitTest() {
    this->initializeModel();
}

OAISplitTest::~OAISplitTest() {}

void OAISplitTest::initializeModel() {

    m_active_isSet = false;
    m_active_isValid = false;

    m_branches_isSet = false;
    m_branches_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_unpublished_at_isSet = false;
    m_unpublished_at_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISplitTest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplitTest::fromJsonObject(QJsonObject json) {

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_branches_isValid = ::OpenAPI::fromJsonValue(m_branches, json[QString("branches")]);
    m_branches_isSet = !json[QString("branches")].isNull() && m_branches_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_unpublished_at_isValid = ::OpenAPI::fromJsonValue(m_unpublished_at, json[QString("unpublished_at")]);
    m_unpublished_at_isSet = !json[QString("unpublished_at")].isNull() && m_unpublished_at_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISplitTest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplitTest::asJsonObject() const {
    QJsonObject obj;
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_branches.size() > 0) {
        obj.insert(QString("branches"), ::OpenAPI::toJsonValue(m_branches));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_unpublished_at_isSet) {
        obj.insert(QString("unpublished_at"), ::OpenAPI::toJsonValue(m_unpublished_at));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAISplitTest::isActive() const {
    return m_active;
}
void OAISplitTest::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAISplitTest::is_active_Set() const{
    return m_active_isSet;
}

bool OAISplitTest::is_active_Valid() const{
    return m_active_isValid;
}

QList<OAIObject> OAISplitTest::getBranches() const {
    return m_branches;
}
void OAISplitTest::setBranches(const QList<OAIObject> &branches) {
    m_branches = branches;
    m_branches_isSet = true;
}

bool OAISplitTest::is_branches_Set() const{
    return m_branches_isSet;
}

bool OAISplitTest::is_branches_Valid() const{
    return m_branches_isValid;
}

QString OAISplitTest::getCreatedAt() const {
    return m_created_at;
}
void OAISplitTest::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISplitTest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISplitTest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISplitTest::getId() const {
    return m_id;
}
void OAISplitTest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISplitTest::is_id_Set() const{
    return m_id_isSet;
}

bool OAISplitTest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISplitTest::getName() const {
    return m_name;
}
void OAISplitTest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISplitTest::is_name_Set() const{
    return m_name_isSet;
}

bool OAISplitTest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISplitTest::getPath() const {
    return m_path;
}
void OAISplitTest::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISplitTest::is_path_Set() const{
    return m_path_isSet;
}

bool OAISplitTest::is_path_Valid() const{
    return m_path_isValid;
}

QString OAISplitTest::getSiteId() const {
    return m_site_id;
}
void OAISplitTest::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAISplitTest::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAISplitTest::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAISplitTest::getUnpublishedAt() const {
    return m_unpublished_at;
}
void OAISplitTest::setUnpublishedAt(const QString &unpublished_at) {
    m_unpublished_at = unpublished_at;
    m_unpublished_at_isSet = true;
}

bool OAISplitTest::is_unpublished_at_Set() const{
    return m_unpublished_at_isSet;
}

bool OAISplitTest::is_unpublished_at_Valid() const{
    return m_unpublished_at_isValid;
}

QString OAISplitTest::getUpdatedAt() const {
    return m_updated_at;
}
void OAISplitTest::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISplitTest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISplitTest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISplitTest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unpublished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplitTest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
