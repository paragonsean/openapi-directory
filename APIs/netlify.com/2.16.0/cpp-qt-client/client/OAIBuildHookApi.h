/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBuildHookApi_H
#define OAI_OAIBuildHookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBuildHook.h"
#include "OAIBuildHookSetup.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBuildHookApi : public QObject {
    Q_OBJECT

public:
    OAIBuildHookApi(const int timeOut = 0);
    ~OAIBuildHookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  build_hook OAIBuildHookSetup [required]
    */
    virtual void createSiteBuildHook(const QString &site_id, const OAIBuildHookSetup &build_hook);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void deleteSiteBuildHook(const QString &site_id, const QString &id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getSiteBuildHook(const QString &site_id, const QString &id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void listSiteBuildHooks(const QString &site_id);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  build_hook OAIBuildHookSetup [required]
    */
    virtual void updateSiteBuildHook(const QString &site_id, const QString &id, const OAIBuildHookSetup &build_hook);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSiteBuildHookCallback(OAIHttpRequestWorker *worker);
    void deleteSiteBuildHookCallback(OAIHttpRequestWorker *worker);
    void getSiteBuildHookCallback(OAIHttpRequestWorker *worker);
    void listSiteBuildHooksCallback(OAIHttpRequestWorker *worker);
    void updateSiteBuildHookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSiteBuildHookSignal(OAIBuildHook summary);
    void deleteSiteBuildHookSignal();
    void getSiteBuildHookSignal(OAIBuildHook summary);
    void listSiteBuildHooksSignal(QList<OAIBuildHook> summary);
    void updateSiteBuildHookSignal();


    void createSiteBuildHookSignalFull(OAIHttpRequestWorker *worker, OAIBuildHook summary);
    void deleteSiteBuildHookSignalFull(OAIHttpRequestWorker *worker);
    void getSiteBuildHookSignalFull(OAIHttpRequestWorker *worker, OAIBuildHook summary);
    void listSiteBuildHooksSignalFull(OAIHttpRequestWorker *worker, QList<OAIBuildHook> summary);
    void updateSiteBuildHookSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createSiteBuildHookSignalError() instead")
    void createSiteBuildHookSignalE(OAIBuildHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteBuildHookSignalError(OAIBuildHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteBuildHookSignalError() instead")
    void deleteSiteBuildHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteBuildHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteBuildHookSignalError() instead")
    void getSiteBuildHookSignalE(OAIBuildHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteBuildHookSignalError(OAIBuildHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteBuildHooksSignalError() instead")
    void listSiteBuildHooksSignalE(QList<OAIBuildHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteBuildHooksSignalError(QList<OAIBuildHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteBuildHookSignalError() instead")
    void updateSiteBuildHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteBuildHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSiteBuildHookSignalErrorFull() instead")
    void createSiteBuildHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSiteBuildHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSiteBuildHookSignalErrorFull() instead")
    void deleteSiteBuildHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSiteBuildHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSiteBuildHookSignalErrorFull() instead")
    void getSiteBuildHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSiteBuildHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSiteBuildHooksSignalErrorFull() instead")
    void listSiteBuildHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSiteBuildHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSiteBuildHookSignalErrorFull() instead")
    void updateSiteBuildHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSiteBuildHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
