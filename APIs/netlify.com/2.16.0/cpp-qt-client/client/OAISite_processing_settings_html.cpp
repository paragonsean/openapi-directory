/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite_processing_settings_html.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite_processing_settings_html::OAISite_processing_settings_html(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite_processing_settings_html::OAISite_processing_settings_html() {
    this->initializeModel();
}

OAISite_processing_settings_html::~OAISite_processing_settings_html() {}

void OAISite_processing_settings_html::initializeModel() {

    m_pretty_urls_isSet = false;
    m_pretty_urls_isValid = false;
}

void OAISite_processing_settings_html::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite_processing_settings_html::fromJsonObject(QJsonObject json) {

    m_pretty_urls_isValid = ::OpenAPI::fromJsonValue(m_pretty_urls, json[QString("pretty_urls")]);
    m_pretty_urls_isSet = !json[QString("pretty_urls")].isNull() && m_pretty_urls_isValid;
}

QString OAISite_processing_settings_html::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite_processing_settings_html::asJsonObject() const {
    QJsonObject obj;
    if (m_pretty_urls_isSet) {
        obj.insert(QString("pretty_urls"), ::OpenAPI::toJsonValue(m_pretty_urls));
    }
    return obj;
}

bool OAISite_processing_settings_html::isPrettyUrls() const {
    return m_pretty_urls;
}
void OAISite_processing_settings_html::setPrettyUrls(const bool &pretty_urls) {
    m_pretty_urls = pretty_urls;
    m_pretty_urls_isSet = true;
}

bool OAISite_processing_settings_html::is_pretty_urls_Set() const{
    return m_pretty_urls_isSet;
}

bool OAISite_processing_settings_html::is_pretty_urls_Valid() const{
    return m_pretty_urls_isValid;
}

bool OAISite_processing_settings_html::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pretty_urls_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite_processing_settings_html::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
