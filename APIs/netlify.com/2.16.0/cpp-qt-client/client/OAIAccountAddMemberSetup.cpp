/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountAddMemberSetup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountAddMemberSetup::OAIAccountAddMemberSetup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountAddMemberSetup::OAIAccountAddMemberSetup() {
    this->initializeModel();
}

OAIAccountAddMemberSetup::~OAIAccountAddMemberSetup() {}

void OAIAccountAddMemberSetup::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIAccountAddMemberSetup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountAddMemberSetup::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIAccountAddMemberSetup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountAddMemberSetup::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIAccountAddMemberSetup::getEmail() const {
    return m_email;
}
void OAIAccountAddMemberSetup::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountAddMemberSetup::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountAddMemberSetup::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountAddMemberSetup::getRole() const {
    return m_role;
}
void OAIAccountAddMemberSetup::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIAccountAddMemberSetup::is_role_Set() const{
    return m_role_isSet;
}

bool OAIAccountAddMemberSetup::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIAccountAddMemberSetup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountAddMemberSetup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
