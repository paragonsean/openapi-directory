/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnippet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnippet::OAISnippet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnippet::OAISnippet() {
    this->initializeModel();
}

OAISnippet::~OAISnippet() {}

void OAISnippet::initializeModel() {

    m_general_isSet = false;
    m_general_isValid = false;

    m_general_position_isSet = false;
    m_general_position_isValid = false;

    m_goal_isSet = false;
    m_goal_isValid = false;

    m_goal_position_isSet = false;
    m_goal_position_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISnippet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnippet::fromJsonObject(QJsonObject json) {

    m_general_isValid = ::OpenAPI::fromJsonValue(m_general, json[QString("general")]);
    m_general_isSet = !json[QString("general")].isNull() && m_general_isValid;

    m_general_position_isValid = ::OpenAPI::fromJsonValue(m_general_position, json[QString("general_position")]);
    m_general_position_isSet = !json[QString("general_position")].isNull() && m_general_position_isValid;

    m_goal_isValid = ::OpenAPI::fromJsonValue(m_goal, json[QString("goal")]);
    m_goal_isSet = !json[QString("goal")].isNull() && m_goal_isValid;

    m_goal_position_isValid = ::OpenAPI::fromJsonValue(m_goal_position, json[QString("goal_position")]);
    m_goal_position_isSet = !json[QString("goal_position")].isNull() && m_goal_position_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("site_id")]);
    m_site_id_isSet = !json[QString("site_id")].isNull() && m_site_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISnippet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnippet::asJsonObject() const {
    QJsonObject obj;
    if (m_general_isSet) {
        obj.insert(QString("general"), ::OpenAPI::toJsonValue(m_general));
    }
    if (m_general_position_isSet) {
        obj.insert(QString("general_position"), ::OpenAPI::toJsonValue(m_general_position));
    }
    if (m_goal_isSet) {
        obj.insert(QString("goal"), ::OpenAPI::toJsonValue(m_goal));
    }
    if (m_goal_position_isSet) {
        obj.insert(QString("goal_position"), ::OpenAPI::toJsonValue(m_goal_position));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("site_id"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAISnippet::getGeneral() const {
    return m_general;
}
void OAISnippet::setGeneral(const QString &general) {
    m_general = general;
    m_general_isSet = true;
}

bool OAISnippet::is_general_Set() const{
    return m_general_isSet;
}

bool OAISnippet::is_general_Valid() const{
    return m_general_isValid;
}

QString OAISnippet::getGeneralPosition() const {
    return m_general_position;
}
void OAISnippet::setGeneralPosition(const QString &general_position) {
    m_general_position = general_position;
    m_general_position_isSet = true;
}

bool OAISnippet::is_general_position_Set() const{
    return m_general_position_isSet;
}

bool OAISnippet::is_general_position_Valid() const{
    return m_general_position_isValid;
}

QString OAISnippet::getGoal() const {
    return m_goal;
}
void OAISnippet::setGoal(const QString &goal) {
    m_goal = goal;
    m_goal_isSet = true;
}

bool OAISnippet::is_goal_Set() const{
    return m_goal_isSet;
}

bool OAISnippet::is_goal_Valid() const{
    return m_goal_isValid;
}

QString OAISnippet::getGoalPosition() const {
    return m_goal_position;
}
void OAISnippet::setGoalPosition(const QString &goal_position) {
    m_goal_position = goal_position;
    m_goal_position_isSet = true;
}

bool OAISnippet::is_goal_position_Set() const{
    return m_goal_position_isSet;
}

bool OAISnippet::is_goal_position_Valid() const{
    return m_goal_position_isValid;
}

qint32 OAISnippet::getId() const {
    return m_id;
}
void OAISnippet::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISnippet::is_id_Set() const{
    return m_id_isSet;
}

bool OAISnippet::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISnippet::getSiteId() const {
    return m_site_id;
}
void OAISnippet::setSiteId(const QString &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAISnippet::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAISnippet::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAISnippet::getTitle() const {
    return m_title;
}
void OAISnippet::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISnippet::is_title_Set() const{
    return m_title_isSet;
}

bool OAISnippet::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISnippet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_general_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_goal_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnippet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
