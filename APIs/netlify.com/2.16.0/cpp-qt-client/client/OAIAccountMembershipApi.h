/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountMembershipApi_H
#define OAI_OAIAccountMembershipApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountMembership.h"
#include "OAIAccountSetup.h"
#include "OAIAccountUpdateSetup.h"
#include "OAIError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountMembershipApi : public QObject {
    Q_OBJECT

public:
    OAIAccountMembershipApi(const int timeOut = 0);
    ~OAIAccountMembershipApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void cancelAccount(const QString &account_id);

    /**
    * @param[in]  account_setup OAIAccountSetup [required]
    */
    virtual void createAccount(const OAIAccountSetup &account_setup);

    /**
    * @param[in]  account_id QString [required]
    */
    virtual void getAccount(const QString &account_id);


    virtual void listAccountsForUser();

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  account_update_setup OAIAccountUpdateSetup [optional]
    */
    virtual void updateAccount(const QString &account_id, const ::OpenAPI::OptionalParam<OAIAccountUpdateSetup> &account_update_setup = ::OpenAPI::OptionalParam<OAIAccountUpdateSetup>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelAccountCallback(OAIHttpRequestWorker *worker);
    void createAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void listAccountsForUserCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelAccountSignal();
    void createAccountSignal(OAIAccountMembership summary);
    void getAccountSignal(QList<OAIAccountMembership> summary);
    void listAccountsForUserSignal(QList<OAIAccountMembership> summary);
    void updateAccountSignal(OAIAccountMembership summary);


    void cancelAccountSignalFull(OAIHttpRequestWorker *worker);
    void createAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccountMembership summary);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccountMembership> summary);
    void listAccountsForUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccountMembership> summary);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccountMembership summary);

    Q_DECL_DEPRECATED_X("Use cancelAccountSignalError() instead")
    void cancelAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSignalError() instead")
    void createAccountSignalE(OAIAccountMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalError(OAIAccountMembership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(QList<OAIAccountMembership> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(QList<OAIAccountMembership> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsForUserSignalError() instead")
    void listAccountsForUserSignalE(QList<OAIAccountMembership> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsForUserSignalError(QList<OAIAccountMembership> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(OAIAccountMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(OAIAccountMembership summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelAccountSignalErrorFull() instead")
    void cancelAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSignalErrorFull() instead")
    void createAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsForUserSignalErrorFull() instead")
    void listAccountsForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
