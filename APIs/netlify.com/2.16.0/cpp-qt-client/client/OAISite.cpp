/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite::OAISite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite::OAISite() {
    this->initializeModel();
}

OAISite::~OAISite() {}

void OAISite::initializeModel() {

    m_account_name_isSet = false;
    m_account_name_isValid = false;

    m_account_slug_isSet = false;
    m_account_slug_isValid = false;

    m_admin_url_isSet = false;
    m_admin_url_isValid = false;

    m_build_image_isSet = false;
    m_build_image_isValid = false;

    m_build_settings_isSet = false;
    m_build_settings_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_domain_isSet = false;
    m_custom_domain_isValid = false;

    m_default_hooks_data_isSet = false;
    m_default_hooks_data_isValid = false;

    m_deploy_hook_isSet = false;
    m_deploy_hook_isValid = false;

    m_deploy_url_isSet = false;
    m_deploy_url_isValid = false;

    m_domain_aliases_isSet = false;
    m_domain_aliases_isValid = false;

    m_force_ssl_isSet = false;
    m_force_ssl_isValid = false;

    m_git_provider_isSet = false;
    m_git_provider_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_id_domain_isSet = false;
    m_id_domain_isValid = false;

    m_managed_dns_isSet = false;
    m_managed_dns_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notification_email_isSet = false;
    m_notification_email_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_prerender_isSet = false;
    m_prerender_isValid = false;

    m_processing_settings_isSet = false;
    m_processing_settings_isValid = false;

    m_published_deploy_isSet = false;
    m_published_deploy_isValid = false;

    m_screenshot_url_isSet = false;
    m_screenshot_url_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_ssl_isSet = false;
    m_ssl_isValid = false;

    m_ssl_url_isSet = false;
    m_ssl_url_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite::fromJsonObject(QJsonObject json) {

    m_account_name_isValid = ::OpenAPI::fromJsonValue(m_account_name, json[QString("account_name")]);
    m_account_name_isSet = !json[QString("account_name")].isNull() && m_account_name_isValid;

    m_account_slug_isValid = ::OpenAPI::fromJsonValue(m_account_slug, json[QString("account_slug")]);
    m_account_slug_isSet = !json[QString("account_slug")].isNull() && m_account_slug_isValid;

    m_admin_url_isValid = ::OpenAPI::fromJsonValue(m_admin_url, json[QString("admin_url")]);
    m_admin_url_isSet = !json[QString("admin_url")].isNull() && m_admin_url_isValid;

    m_build_image_isValid = ::OpenAPI::fromJsonValue(m_build_image, json[QString("build_image")]);
    m_build_image_isSet = !json[QString("build_image")].isNull() && m_build_image_isValid;

    m_build_settings_isValid = ::OpenAPI::fromJsonValue(m_build_settings, json[QString("build_settings")]);
    m_build_settings_isSet = !json[QString("build_settings")].isNull() && m_build_settings_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_domain_isValid = ::OpenAPI::fromJsonValue(m_custom_domain, json[QString("custom_domain")]);
    m_custom_domain_isSet = !json[QString("custom_domain")].isNull() && m_custom_domain_isValid;

    m_default_hooks_data_isValid = ::OpenAPI::fromJsonValue(m_default_hooks_data, json[QString("default_hooks_data")]);
    m_default_hooks_data_isSet = !json[QString("default_hooks_data")].isNull() && m_default_hooks_data_isValid;

    m_deploy_hook_isValid = ::OpenAPI::fromJsonValue(m_deploy_hook, json[QString("deploy_hook")]);
    m_deploy_hook_isSet = !json[QString("deploy_hook")].isNull() && m_deploy_hook_isValid;

    m_deploy_url_isValid = ::OpenAPI::fromJsonValue(m_deploy_url, json[QString("deploy_url")]);
    m_deploy_url_isSet = !json[QString("deploy_url")].isNull() && m_deploy_url_isValid;

    m_domain_aliases_isValid = ::OpenAPI::fromJsonValue(m_domain_aliases, json[QString("domain_aliases")]);
    m_domain_aliases_isSet = !json[QString("domain_aliases")].isNull() && m_domain_aliases_isValid;

    m_force_ssl_isValid = ::OpenAPI::fromJsonValue(m_force_ssl, json[QString("force_ssl")]);
    m_force_ssl_isSet = !json[QString("force_ssl")].isNull() && m_force_ssl_isValid;

    m_git_provider_isValid = ::OpenAPI::fromJsonValue(m_git_provider, json[QString("git_provider")]);
    m_git_provider_isSet = !json[QString("git_provider")].isNull() && m_git_provider_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_id_domain_isValid = ::OpenAPI::fromJsonValue(m_id_domain, json[QString("id_domain")]);
    m_id_domain_isSet = !json[QString("id_domain")].isNull() && m_id_domain_isValid;

    m_managed_dns_isValid = ::OpenAPI::fromJsonValue(m_managed_dns, json[QString("managed_dns")]);
    m_managed_dns_isSet = !json[QString("managed_dns")].isNull() && m_managed_dns_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notification_email_isValid = ::OpenAPI::fromJsonValue(m_notification_email, json[QString("notification_email")]);
    m_notification_email_isSet = !json[QString("notification_email")].isNull() && m_notification_email_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_prerender_isValid = ::OpenAPI::fromJsonValue(m_prerender, json[QString("prerender")]);
    m_prerender_isSet = !json[QString("prerender")].isNull() && m_prerender_isValid;

    m_processing_settings_isValid = ::OpenAPI::fromJsonValue(m_processing_settings, json[QString("processing_settings")]);
    m_processing_settings_isSet = !json[QString("processing_settings")].isNull() && m_processing_settings_isValid;

    m_published_deploy_isValid = ::OpenAPI::fromJsonValue(m_published_deploy, json[QString("published_deploy")]);
    m_published_deploy_isSet = !json[QString("published_deploy")].isNull() && m_published_deploy_isValid;

    m_screenshot_url_isValid = ::OpenAPI::fromJsonValue(m_screenshot_url, json[QString("screenshot_url")]);
    m_screenshot_url_isSet = !json[QString("screenshot_url")].isNull() && m_screenshot_url_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_ssl_isValid = ::OpenAPI::fromJsonValue(m_ssl, json[QString("ssl")]);
    m_ssl_isSet = !json[QString("ssl")].isNull() && m_ssl_isValid;

    m_ssl_url_isValid = ::OpenAPI::fromJsonValue(m_ssl_url, json[QString("ssl_url")]);
    m_ssl_url_isSet = !json[QString("ssl_url")].isNull() && m_ssl_url_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAISite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite::asJsonObject() const {
    QJsonObject obj;
    if (m_account_name_isSet) {
        obj.insert(QString("account_name"), ::OpenAPI::toJsonValue(m_account_name));
    }
    if (m_account_slug_isSet) {
        obj.insert(QString("account_slug"), ::OpenAPI::toJsonValue(m_account_slug));
    }
    if (m_admin_url_isSet) {
        obj.insert(QString("admin_url"), ::OpenAPI::toJsonValue(m_admin_url));
    }
    if (m_build_image_isSet) {
        obj.insert(QString("build_image"), ::OpenAPI::toJsonValue(m_build_image));
    }
    if (m_build_settings.isSet()) {
        obj.insert(QString("build_settings"), ::OpenAPI::toJsonValue(m_build_settings));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_domain_isSet) {
        obj.insert(QString("custom_domain"), ::OpenAPI::toJsonValue(m_custom_domain));
    }
    if (m_default_hooks_data.isSet()) {
        obj.insert(QString("default_hooks_data"), ::OpenAPI::toJsonValue(m_default_hooks_data));
    }
    if (m_deploy_hook_isSet) {
        obj.insert(QString("deploy_hook"), ::OpenAPI::toJsonValue(m_deploy_hook));
    }
    if (m_deploy_url_isSet) {
        obj.insert(QString("deploy_url"), ::OpenAPI::toJsonValue(m_deploy_url));
    }
    if (m_domain_aliases.size() > 0) {
        obj.insert(QString("domain_aliases"), ::OpenAPI::toJsonValue(m_domain_aliases));
    }
    if (m_force_ssl_isSet) {
        obj.insert(QString("force_ssl"), ::OpenAPI::toJsonValue(m_force_ssl));
    }
    if (m_git_provider_isSet) {
        obj.insert(QString("git_provider"), ::OpenAPI::toJsonValue(m_git_provider));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_id_domain_isSet) {
        obj.insert(QString("id_domain"), ::OpenAPI::toJsonValue(m_id_domain));
    }
    if (m_managed_dns_isSet) {
        obj.insert(QString("managed_dns"), ::OpenAPI::toJsonValue(m_managed_dns));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notification_email_isSet) {
        obj.insert(QString("notification_email"), ::OpenAPI::toJsonValue(m_notification_email));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_prerender_isSet) {
        obj.insert(QString("prerender"), ::OpenAPI::toJsonValue(m_prerender));
    }
    if (m_processing_settings.isSet()) {
        obj.insert(QString("processing_settings"), ::OpenAPI::toJsonValue(m_processing_settings));
    }
    if (m_published_deploy.isSet()) {
        obj.insert(QString("published_deploy"), ::OpenAPI::toJsonValue(m_published_deploy));
    }
    if (m_screenshot_url_isSet) {
        obj.insert(QString("screenshot_url"), ::OpenAPI::toJsonValue(m_screenshot_url));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_ssl_isSet) {
        obj.insert(QString("ssl"), ::OpenAPI::toJsonValue(m_ssl));
    }
    if (m_ssl_url_isSet) {
        obj.insert(QString("ssl_url"), ::OpenAPI::toJsonValue(m_ssl_url));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISite::getAccountName() const {
    return m_account_name;
}
void OAISite::setAccountName(const QString &account_name) {
    m_account_name = account_name;
    m_account_name_isSet = true;
}

bool OAISite::is_account_name_Set() const{
    return m_account_name_isSet;
}

bool OAISite::is_account_name_Valid() const{
    return m_account_name_isValid;
}

QString OAISite::getAccountSlug() const {
    return m_account_slug;
}
void OAISite::setAccountSlug(const QString &account_slug) {
    m_account_slug = account_slug;
    m_account_slug_isSet = true;
}

bool OAISite::is_account_slug_Set() const{
    return m_account_slug_isSet;
}

bool OAISite::is_account_slug_Valid() const{
    return m_account_slug_isValid;
}

QString OAISite::getAdminUrl() const {
    return m_admin_url;
}
void OAISite::setAdminUrl(const QString &admin_url) {
    m_admin_url = admin_url;
    m_admin_url_isSet = true;
}

bool OAISite::is_admin_url_Set() const{
    return m_admin_url_isSet;
}

bool OAISite::is_admin_url_Valid() const{
    return m_admin_url_isValid;
}

QString OAISite::getBuildImage() const {
    return m_build_image;
}
void OAISite::setBuildImage(const QString &build_image) {
    m_build_image = build_image;
    m_build_image_isSet = true;
}

bool OAISite::is_build_image_Set() const{
    return m_build_image_isSet;
}

bool OAISite::is_build_image_Valid() const{
    return m_build_image_isValid;
}

OAIRepoInfo OAISite::getBuildSettings() const {
    return m_build_settings;
}
void OAISite::setBuildSettings(const OAIRepoInfo &build_settings) {
    m_build_settings = build_settings;
    m_build_settings_isSet = true;
}

bool OAISite::is_build_settings_Set() const{
    return m_build_settings_isSet;
}

bool OAISite::is_build_settings_Valid() const{
    return m_build_settings_isValid;
}

QMap<QString, OAIObject> OAISite::getCapabilities() const {
    return m_capabilities;
}
void OAISite::setCapabilities(const QMap<QString, OAIObject> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAISite::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAISite::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAISite::getCreatedAt() const {
    return m_created_at;
}
void OAISite::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISite::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISite::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISite::getCustomDomain() const {
    return m_custom_domain;
}
void OAISite::setCustomDomain(const QString &custom_domain) {
    m_custom_domain = custom_domain;
    m_custom_domain_isSet = true;
}

bool OAISite::is_custom_domain_Set() const{
    return m_custom_domain_isSet;
}

bool OAISite::is_custom_domain_Valid() const{
    return m_custom_domain_isValid;
}

OAISite_default_hooks_data OAISite::getDefaultHooksData() const {
    return m_default_hooks_data;
}
void OAISite::setDefaultHooksData(const OAISite_default_hooks_data &default_hooks_data) {
    m_default_hooks_data = default_hooks_data;
    m_default_hooks_data_isSet = true;
}

bool OAISite::is_default_hooks_data_Set() const{
    return m_default_hooks_data_isSet;
}

bool OAISite::is_default_hooks_data_Valid() const{
    return m_default_hooks_data_isValid;
}

QString OAISite::getDeployHook() const {
    return m_deploy_hook;
}
void OAISite::setDeployHook(const QString &deploy_hook) {
    m_deploy_hook = deploy_hook;
    m_deploy_hook_isSet = true;
}

bool OAISite::is_deploy_hook_Set() const{
    return m_deploy_hook_isSet;
}

bool OAISite::is_deploy_hook_Valid() const{
    return m_deploy_hook_isValid;
}

QString OAISite::getDeployUrl() const {
    return m_deploy_url;
}
void OAISite::setDeployUrl(const QString &deploy_url) {
    m_deploy_url = deploy_url;
    m_deploy_url_isSet = true;
}

bool OAISite::is_deploy_url_Set() const{
    return m_deploy_url_isSet;
}

bool OAISite::is_deploy_url_Valid() const{
    return m_deploy_url_isValid;
}

QList<QString> OAISite::getDomainAliases() const {
    return m_domain_aliases;
}
void OAISite::setDomainAliases(const QList<QString> &domain_aliases) {
    m_domain_aliases = domain_aliases;
    m_domain_aliases_isSet = true;
}

bool OAISite::is_domain_aliases_Set() const{
    return m_domain_aliases_isSet;
}

bool OAISite::is_domain_aliases_Valid() const{
    return m_domain_aliases_isValid;
}

bool OAISite::isForceSsl() const {
    return m_force_ssl;
}
void OAISite::setForceSsl(const bool &force_ssl) {
    m_force_ssl = force_ssl;
    m_force_ssl_isSet = true;
}

bool OAISite::is_force_ssl_Set() const{
    return m_force_ssl_isSet;
}

bool OAISite::is_force_ssl_Valid() const{
    return m_force_ssl_isValid;
}

QString OAISite::getGitProvider() const {
    return m_git_provider;
}
void OAISite::setGitProvider(const QString &git_provider) {
    m_git_provider = git_provider;
    m_git_provider_isSet = true;
}

bool OAISite::is_git_provider_Set() const{
    return m_git_provider_isSet;
}

bool OAISite::is_git_provider_Valid() const{
    return m_git_provider_isValid;
}

QString OAISite::getId() const {
    return m_id;
}
void OAISite::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISite::is_id_Set() const{
    return m_id_isSet;
}

bool OAISite::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISite::getIdDomain() const {
    return m_id_domain;
}
void OAISite::setIdDomain(const QString &id_domain) {
    m_id_domain = id_domain;
    m_id_domain_isSet = true;
}

bool OAISite::is_id_domain_Set() const{
    return m_id_domain_isSet;
}

bool OAISite::is_id_domain_Valid() const{
    return m_id_domain_isValid;
}

bool OAISite::isManagedDns() const {
    return m_managed_dns;
}
void OAISite::setManagedDns(const bool &managed_dns) {
    m_managed_dns = managed_dns;
    m_managed_dns_isSet = true;
}

bool OAISite::is_managed_dns_Set() const{
    return m_managed_dns_isSet;
}

bool OAISite::is_managed_dns_Valid() const{
    return m_managed_dns_isValid;
}

QString OAISite::getName() const {
    return m_name;
}
void OAISite::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISite::is_name_Set() const{
    return m_name_isSet;
}

bool OAISite::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISite::getNotificationEmail() const {
    return m_notification_email;
}
void OAISite::setNotificationEmail(const QString &notification_email) {
    m_notification_email = notification_email;
    m_notification_email_isSet = true;
}

bool OAISite::is_notification_email_Set() const{
    return m_notification_email_isSet;
}

bool OAISite::is_notification_email_Valid() const{
    return m_notification_email_isValid;
}

QString OAISite::getPassword() const {
    return m_password;
}
void OAISite::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAISite::is_password_Set() const{
    return m_password_isSet;
}

bool OAISite::is_password_Valid() const{
    return m_password_isValid;
}

QString OAISite::getPlan() const {
    return m_plan;
}
void OAISite::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAISite::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAISite::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAISite::getPrerender() const {
    return m_prerender;
}
void OAISite::setPrerender(const QString &prerender) {
    m_prerender = prerender;
    m_prerender_isSet = true;
}

bool OAISite::is_prerender_Set() const{
    return m_prerender_isSet;
}

bool OAISite::is_prerender_Valid() const{
    return m_prerender_isValid;
}

OAISite_processing_settings OAISite::getProcessingSettings() const {
    return m_processing_settings;
}
void OAISite::setProcessingSettings(const OAISite_processing_settings &processing_settings) {
    m_processing_settings = processing_settings;
    m_processing_settings_isSet = true;
}

bool OAISite::is_processing_settings_Set() const{
    return m_processing_settings_isSet;
}

bool OAISite::is_processing_settings_Valid() const{
    return m_processing_settings_isValid;
}

OAIDeploy OAISite::getPublishedDeploy() const {
    return m_published_deploy;
}
void OAISite::setPublishedDeploy(const OAIDeploy &published_deploy) {
    m_published_deploy = published_deploy;
    m_published_deploy_isSet = true;
}

bool OAISite::is_published_deploy_Set() const{
    return m_published_deploy_isSet;
}

bool OAISite::is_published_deploy_Valid() const{
    return m_published_deploy_isValid;
}

QString OAISite::getScreenshotUrl() const {
    return m_screenshot_url;
}
void OAISite::setScreenshotUrl(const QString &screenshot_url) {
    m_screenshot_url = screenshot_url;
    m_screenshot_url_isSet = true;
}

bool OAISite::is_screenshot_url_Set() const{
    return m_screenshot_url_isSet;
}

bool OAISite::is_screenshot_url_Valid() const{
    return m_screenshot_url_isValid;
}

QString OAISite::getSessionId() const {
    return m_session_id;
}
void OAISite::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAISite::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAISite::is_session_id_Valid() const{
    return m_session_id_isValid;
}

bool OAISite::isSsl() const {
    return m_ssl;
}
void OAISite::setSsl(const bool &ssl) {
    m_ssl = ssl;
    m_ssl_isSet = true;
}

bool OAISite::is_ssl_Set() const{
    return m_ssl_isSet;
}

bool OAISite::is_ssl_Valid() const{
    return m_ssl_isValid;
}

QString OAISite::getSslUrl() const {
    return m_ssl_url;
}
void OAISite::setSslUrl(const QString &ssl_url) {
    m_ssl_url = ssl_url;
    m_ssl_url_isSet = true;
}

bool OAISite::is_ssl_url_Set() const{
    return m_ssl_url_isSet;
}

bool OAISite::is_ssl_url_Valid() const{
    return m_ssl_url_isValid;
}

QString OAISite::getState() const {
    return m_state;
}
void OAISite::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISite::is_state_Set() const{
    return m_state_isSet;
}

bool OAISite::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISite::getUpdatedAt() const {
    return m_updated_at;
}
void OAISite::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISite::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISite::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAISite::getUrl() const {
    return m_url;
}
void OAISite::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISite::is_url_Set() const{
    return m_url_isSet;
}

bool OAISite::is_url_Valid() const{
    return m_url_isValid;
}

QString OAISite::getUserId() const {
    return m_user_id;
}
void OAISite::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISite::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISite::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_build_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_hooks_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_hook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_dns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prerender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_deploy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screenshot_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
