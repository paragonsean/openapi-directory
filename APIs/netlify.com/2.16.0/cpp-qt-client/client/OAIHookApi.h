/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHookApi_H
#define OAI_OAIHookApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIError.h"
#include "OAIHook.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHookApi : public QObject {
    Q_OBJECT

public:
    OAIHookApi(const int timeOut = 0);
    ~OAIHookApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  site_id QString [required]
    * @param[in]  hook OAIHook [required]
    */
    virtual void createHookBySiteId(const QString &site_id, const OAIHook &hook);

    /**
    * @param[in]  hook_id QString [required]
    */
    virtual void deleteHook(const QString &hook_id);

    /**
    * @param[in]  hook_id QString [required]
    */
    virtual void enableHook(const QString &hook_id);

    /**
    * @param[in]  hook_id QString [required]
    */
    virtual void getHook(const QString &hook_id);

    /**
    * @param[in]  site_id QString [required]
    */
    virtual void listHooksBySiteId(const QString &site_id);

    /**
    * @param[in]  hook_id QString [required]
    * @param[in]  hook OAIHook [required]
    */
    virtual void updateHook(const QString &hook_id, const OAIHook &hook);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createHookBySiteIdCallback(OAIHttpRequestWorker *worker);
    void deleteHookCallback(OAIHttpRequestWorker *worker);
    void enableHookCallback(OAIHttpRequestWorker *worker);
    void getHookCallback(OAIHttpRequestWorker *worker);
    void listHooksBySiteIdCallback(OAIHttpRequestWorker *worker);
    void updateHookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createHookBySiteIdSignal(OAIHook summary);
    void deleteHookSignal();
    void enableHookSignal(OAIHook summary);
    void getHookSignal(OAIHook summary);
    void listHooksBySiteIdSignal(QList<OAIHook> summary);
    void updateHookSignal(OAIHook summary);


    void createHookBySiteIdSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void deleteHookSignalFull(OAIHttpRequestWorker *worker);
    void enableHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void getHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);
    void listHooksBySiteIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIHook> summary);
    void updateHookSignalFull(OAIHttpRequestWorker *worker, OAIHook summary);

    Q_DECL_DEPRECATED_X("Use createHookBySiteIdSignalError() instead")
    void createHookBySiteIdSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createHookBySiteIdSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHookSignalError() instead")
    void deleteHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHookSignalError() instead")
    void enableHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHookSignalError() instead")
    void getHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHooksBySiteIdSignalError() instead")
    void listHooksBySiteIdSignalE(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listHooksBySiteIdSignalError(QList<OAIHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHookSignalError() instead")
    void updateHookSignalE(OAIHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHookSignalError(OAIHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createHookBySiteIdSignalErrorFull() instead")
    void createHookBySiteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createHookBySiteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteHookSignalErrorFull() instead")
    void deleteHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableHookSignalErrorFull() instead")
    void enableHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHookSignalErrorFull() instead")
    void getHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listHooksBySiteIdSignalErrorFull() instead")
    void listHooksBySiteIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listHooksBySiteIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateHookSignalErrorFull() instead")
    void updateHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
