/**
 * Netlify's API documentation
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * The version of the OpenAPI document: 2.16.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepoInfo.h
 *
 * 
 */

#ifndef OAIRepoInfo_H
#define OAIRepoInfo_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRepoInfo : public OAIObject {
public:
    OAIRepoInfo();
    OAIRepoInfo(QString json);
    ~OAIRepoInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedBranches() const;
    void setAllowedBranches(const QList<QString> &allowed_branches);
    bool is_allowed_branches_Set() const;
    bool is_allowed_branches_Valid() const;

    QString getCmd() const;
    void setCmd(const QString &cmd);
    bool is_cmd_Set() const;
    bool is_cmd_Valid() const;

    QString getDeployKeyId() const;
    void setDeployKeyId(const QString &deploy_key_id);
    bool is_deploy_key_id_Set() const;
    bool is_deploy_key_id_Valid() const;

    QString getDir() const;
    void setDir(const QString &dir);
    bool is_dir_Set() const;
    bool is_dir_Valid() const;

    QMap<QString, QString> getEnv() const;
    void setEnv(const QMap<QString, QString> &env);
    bool is_env_Set() const;
    bool is_env_Valid() const;

    QString getFunctionsDir() const;
    void setFunctionsDir(const QString &functions_dir);
    bool is_functions_dir_Set() const;
    bool is_functions_dir_Valid() const;

    qint32 getId() const;
    void setId(const qint32 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    qint32 getInstallationId() const;
    void setInstallationId(const qint32 &installation_id);
    bool is_installation_id_Set() const;
    bool is_installation_id_Valid() const;

    bool isPrivateLogs() const;
    void setPrivateLogs(const bool &private_logs);
    bool is_private_logs_Set() const;
    bool is_private_logs_Valid() const;

    QString getProvider() const;
    void setProvider(const QString &provider);
    bool is_provider_Set() const;
    bool is_provider_Valid() const;

    bool isPublicRepo() const;
    void setPublicRepo(const bool &public_repo);
    bool is_public_repo_Set() const;
    bool is_public_repo_Valid() const;

    QString getRepoBranch() const;
    void setRepoBranch(const QString &repo_branch);
    bool is_repo_branch_Set() const;
    bool is_repo_branch_Valid() const;

    QString getRepoPath() const;
    void setRepoPath(const QString &repo_path);
    bool is_repo_path_Set() const;
    bool is_repo_path_Valid() const;

    QString getRepoUrl() const;
    void setRepoUrl(const QString &repo_url);
    bool is_repo_url_Set() const;
    bool is_repo_url_Valid() const;

    bool isStopBuilds() const;
    void setStopBuilds(const bool &stop_builds);
    bool is_stop_builds_Set() const;
    bool is_stop_builds_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_branches;
    bool m_allowed_branches_isSet;
    bool m_allowed_branches_isValid;

    QString m_cmd;
    bool m_cmd_isSet;
    bool m_cmd_isValid;

    QString m_deploy_key_id;
    bool m_deploy_key_id_isSet;
    bool m_deploy_key_id_isValid;

    QString m_dir;
    bool m_dir_isSet;
    bool m_dir_isValid;

    QMap<QString, QString> m_env;
    bool m_env_isSet;
    bool m_env_isValid;

    QString m_functions_dir;
    bool m_functions_dir_isSet;
    bool m_functions_dir_isValid;

    qint32 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    qint32 m_installation_id;
    bool m_installation_id_isSet;
    bool m_installation_id_isValid;

    bool m_private_logs;
    bool m_private_logs_isSet;
    bool m_private_logs_isValid;

    QString m_provider;
    bool m_provider_isSet;
    bool m_provider_isValid;

    bool m_public_repo;
    bool m_public_repo_isSet;
    bool m_public_repo_isValid;

    QString m_repo_branch;
    bool m_repo_branch_isSet;
    bool m_repo_branch_isValid;

    QString m_repo_path;
    bool m_repo_path_isSet;
    bool m_repo_path_isValid;

    QString m_repo_url;
    bool m_repo_url_isSet;
    bool m_repo_url_isValid;

    bool m_stop_builds;
    bool m_stop_builds_isSet;
    bool m_stop_builds_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepoInfo)

#endif // OAIRepoInfo_H
