# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionPlanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription_plan_id: int=None):
        """SubscriptionPlanRequest - a model defined in OpenAPI

        :param subscription_plan_id: The subscription_plan_id of this SubscriptionPlanRequest.
        """
        self.openapi_types = {
            'subscription_plan_id': int
        }

        self.attribute_map = {
            'subscription_plan_id': 'subscriptionPlanId'
        }

        self._subscription_plan_id = subscription_plan_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionPlanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionPlanRequest of this SubscriptionPlanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription_plan_id(self):
        """Gets the subscription_plan_id of this SubscriptionPlanRequest.

        subscription plan id

        :return: The subscription_plan_id of this SubscriptionPlanRequest.
        :rtype: int
        """
        return self._subscription_plan_id

    @subscription_plan_id.setter
    def subscription_plan_id(self, subscription_plan_id):
        """Sets the subscription_plan_id of this SubscriptionPlanRequest.

        subscription plan id

        :param subscription_plan_id: The subscription_plan_id of this SubscriptionPlanRequest.
        :type subscription_plan_id: int
        """
        if subscription_plan_id is None:
            raise ValueError("Invalid value for `subscription_plan_id`, must not be `None`")

        self._subscription_plan_id = subscription_plan_id
