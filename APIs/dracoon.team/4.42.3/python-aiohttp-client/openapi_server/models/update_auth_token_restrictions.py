# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateAuthTokenRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token_validity: int=None, overwrite_enabled: bool=None, refresh_token_validity: int=None):
        """UpdateAuthTokenRestrictions - a model defined in OpenAPI

        :param access_token_validity: The access_token_validity of this UpdateAuthTokenRestrictions.
        :param overwrite_enabled: The overwrite_enabled of this UpdateAuthTokenRestrictions.
        :param refresh_token_validity: The refresh_token_validity of this UpdateAuthTokenRestrictions.
        """
        self.openapi_types = {
            'access_token_validity': int,
            'overwrite_enabled': bool,
            'refresh_token_validity': int
        }

        self.attribute_map = {
            'access_token_validity': 'accessTokenValidity',
            'overwrite_enabled': 'overwriteEnabled',
            'refresh_token_validity': 'refreshTokenValidity'
        }

        self._access_token_validity = access_token_validity
        self._overwrite_enabled = overwrite_enabled
        self._refresh_token_validity = refresh_token_validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAuthTokenRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAuthTokenRestrictions of this UpdateAuthTokenRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth access token validity (in seconds)

        :return: The access_token_validity of this UpdateAuthTokenRestrictions.
        :rtype: int
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth access token validity (in seconds)

        :param access_token_validity: The access_token_validity of this UpdateAuthTokenRestrictions.
        :type access_token_validity: int
        """

        self._access_token_validity = access_token_validity

    @property
    def overwrite_enabled(self):
        """Gets the overwrite_enabled of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Defines if OAuth token restrictions are enabled

        :return: The overwrite_enabled of this UpdateAuthTokenRestrictions.
        :rtype: bool
        """
        return self._overwrite_enabled

    @overwrite_enabled.setter
    def overwrite_enabled(self, overwrite_enabled):
        """Sets the overwrite_enabled of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Defines if OAuth token restrictions are enabled

        :param overwrite_enabled: The overwrite_enabled of this UpdateAuthTokenRestrictions.
        :type overwrite_enabled: bool
        """
        if overwrite_enabled is None:
            raise ValueError("Invalid value for `overwrite_enabled`, must not be `None`")

        self._overwrite_enabled = overwrite_enabled

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth refresh token validity (in seconds)

        :return: The refresh_token_validity of this UpdateAuthTokenRestrictions.
        :rtype: int
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this UpdateAuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth refresh token validity (in seconds)

        :param refresh_token_validity: The refresh_token_validity of this UpdateAuthTokenRestrictions.
        :type refresh_token_validity: int
        """

        self._refresh_token_validity = refresh_token_validity
