# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class UploadShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, cnt_files: int=None, cnt_uploads: int=None, created_at: datetime=None, created_by: UserInfo=None, data_url: str=None, expire_at: datetime=None, files_expiry_period: int=None, id: int=None, internal_notes: str=None, is_encrypted: bool=None, is_protected: bool=None, max_size: int=None, max_slots: int=None, name: str=None, notes: str=None, notify_creator: bool=None, recipients: str=None, show_creator_name: bool=None, show_creator_username: bool=None, show_uploaded_files: bool=None, sms_recipients: str=None, target_id: int=None, target_path: str=None, target_type: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """UploadShare - a model defined in OpenAPI

        :param access_key: The access_key of this UploadShare.
        :param cnt_files: The cnt_files of this UploadShare.
        :param cnt_uploads: The cnt_uploads of this UploadShare.
        :param created_at: The created_at of this UploadShare.
        :param created_by: The created_by of this UploadShare.
        :param data_url: The data_url of this UploadShare.
        :param expire_at: The expire_at of this UploadShare.
        :param files_expiry_period: The files_expiry_period of this UploadShare.
        :param id: The id of this UploadShare.
        :param internal_notes: The internal_notes of this UploadShare.
        :param is_encrypted: The is_encrypted of this UploadShare.
        :param is_protected: The is_protected of this UploadShare.
        :param max_size: The max_size of this UploadShare.
        :param max_slots: The max_slots of this UploadShare.
        :param name: The name of this UploadShare.
        :param notes: The notes of this UploadShare.
        :param notify_creator: The notify_creator of this UploadShare.
        :param recipients: The recipients of this UploadShare.
        :param show_creator_name: The show_creator_name of this UploadShare.
        :param show_creator_username: The show_creator_username of this UploadShare.
        :param show_uploaded_files: The show_uploaded_files of this UploadShare.
        :param sms_recipients: The sms_recipients of this UploadShare.
        :param target_id: The target_id of this UploadShare.
        :param target_path: The target_path of this UploadShare.
        :param target_type: The target_type of this UploadShare.
        :param updated_at: The updated_at of this UploadShare.
        :param updated_by: The updated_by of this UploadShare.
        """
        self.openapi_types = {
            'access_key': str,
            'cnt_files': int,
            'cnt_uploads': int,
            'created_at': datetime,
            'created_by': UserInfo,
            'data_url': str,
            'expire_at': datetime,
            'files_expiry_period': int,
            'id': int,
            'internal_notes': str,
            'is_encrypted': bool,
            'is_protected': bool,
            'max_size': int,
            'max_slots': int,
            'name': str,
            'notes': str,
            'notify_creator': bool,
            'recipients': str,
            'show_creator_name': bool,
            'show_creator_username': bool,
            'show_uploaded_files': bool,
            'sms_recipients': str,
            'target_id': int,
            'target_path': str,
            'target_type': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'cnt_files': 'cntFiles',
            'cnt_uploads': 'cntUploads',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'data_url': 'dataUrl',
            'expire_at': 'expireAt',
            'files_expiry_period': 'filesExpiryPeriod',
            'id': 'id',
            'internal_notes': 'internalNotes',
            'is_encrypted': 'isEncrypted',
            'is_protected': 'isProtected',
            'max_size': 'maxSize',
            'max_slots': 'maxSlots',
            'name': 'name',
            'notes': 'notes',
            'notify_creator': 'notifyCreator',
            'recipients': 'recipients',
            'show_creator_name': 'showCreatorName',
            'show_creator_username': 'showCreatorUsername',
            'show_uploaded_files': 'showUploadedFiles',
            'sms_recipients': 'smsRecipients',
            'target_id': 'targetId',
            'target_path': 'targetPath',
            'target_type': 'targetType',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._access_key = access_key
        self._cnt_files = cnt_files
        self._cnt_uploads = cnt_uploads
        self._created_at = created_at
        self._created_by = created_by
        self._data_url = data_url
        self._expire_at = expire_at
        self._files_expiry_period = files_expiry_period
        self._id = id
        self._internal_notes = internal_notes
        self._is_encrypted = is_encrypted
        self._is_protected = is_protected
        self._max_size = max_size
        self._max_slots = max_slots
        self._name = name
        self._notes = notes
        self._notify_creator = notify_creator
        self._recipients = recipients
        self._show_creator_name = show_creator_name
        self._show_creator_username = show_creator_username
        self._show_uploaded_files = show_uploaded_files
        self._sms_recipients = sms_recipients
        self._target_id = target_id
        self._target_path = target_path
        self._target_type = target_type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadShare of this UploadShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this UploadShare.

        Share access key to generate secure link

        :return: The access_key of this UploadShare.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this UploadShare.

        Share access key to generate secure link

        :param access_key: The access_key of this UploadShare.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")

        self._access_key = access_key

    @property
    def cnt_files(self):
        """Gets the cnt_files of this UploadShare.

        Total amount of existing files uploaded with this share.

        :return: The cnt_files of this UploadShare.
        :rtype: int
        """
        return self._cnt_files

    @cnt_files.setter
    def cnt_files(self, cnt_files):
        """Sets the cnt_files of this UploadShare.

        Total amount of existing files uploaded with this share.

        :param cnt_files: The cnt_files of this UploadShare.
        :type cnt_files: int
        """

        self._cnt_files = cnt_files

    @property
    def cnt_uploads(self):
        """Gets the cnt_uploads of this UploadShare.

        Total amount of uploads conducted with this share.

        :return: The cnt_uploads of this UploadShare.
        :rtype: int
        """
        return self._cnt_uploads

    @cnt_uploads.setter
    def cnt_uploads(self, cnt_uploads):
        """Sets the cnt_uploads of this UploadShare.

        Total amount of uploads conducted with this share.

        :param cnt_uploads: The cnt_uploads of this UploadShare.
        :type cnt_uploads: int
        """

        self._cnt_uploads = cnt_uploads

    @property
    def created_at(self):
        """Gets the created_at of this UploadShare.

        Creation date

        :return: The created_at of this UploadShare.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UploadShare.

        Creation date

        :param created_at: The created_at of this UploadShare.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this UploadShare.


        :return: The created_by of this UploadShare.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this UploadShare.


        :param created_by: The created_by of this UploadShare.
        :type created_by: UserInfo
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def data_url(self):
        """Gets the data_url of this UploadShare.

        Upload Share URL

        :return: The data_url of this UploadShare.
        :rtype: str
        """
        return self._data_url

    @data_url.setter
    def data_url(self, data_url):
        """Sets the data_url of this UploadShare.

        Upload Share URL

        :param data_url: The data_url of this UploadShare.
        :type data_url: str
        """

        self._data_url = data_url

    @property
    def expire_at(self):
        """Gets the expire_at of this UploadShare.

        Expiration date

        :return: The expire_at of this UploadShare.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this UploadShare.

        Expiration date

        :param expire_at: The expire_at of this UploadShare.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def files_expiry_period(self):
        """Gets the files_expiry_period of this UploadShare.

        Number of days after which uploaded files expire

        :return: The files_expiry_period of this UploadShare.
        :rtype: int
        """
        return self._files_expiry_period

    @files_expiry_period.setter
    def files_expiry_period(self, files_expiry_period):
        """Sets the files_expiry_period of this UploadShare.

        Number of days after which uploaded files expire

        :param files_expiry_period: The files_expiry_period of this UploadShare.
        :type files_expiry_period: int
        """

        self._files_expiry_period = files_expiry_period

    @property
    def id(self):
        """Gets the id of this UploadShare.

        Share ID

        :return: The id of this UploadShare.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UploadShare.

        Share ID

        :param id: The id of this UploadShare.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def internal_notes(self):
        """Gets the internal_notes of this UploadShare.

        &#128640; Since v4.11.0  Internal notes

        :return: The internal_notes of this UploadShare.
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this UploadShare.

        &#128640; Since v4.11.0  Internal notes

        :param internal_notes: The internal_notes of this UploadShare.
        :type internal_notes: str
        """

        self._internal_notes = internal_notes

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this UploadShare.

        Encryption state

        :return: The is_encrypted of this UploadShare.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this UploadShare.

        Encryption state

        :param is_encrypted: The is_encrypted of this UploadShare.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_protected(self):
        """Gets the is_protected of this UploadShare.

        Is share protected by password

        :return: The is_protected of this UploadShare.
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this UploadShare.

        Is share protected by password

        :param is_protected: The is_protected of this UploadShare.
        :type is_protected: bool
        """
        if is_protected is None:
            raise ValueError("Invalid value for `is_protected`, must not be `None`")

        self._is_protected = is_protected

    @property
    def max_size(self):
        """Gets the max_size of this UploadShare.

        Maximal total size of uploaded files (in bytes)

        :return: The max_size of this UploadShare.
        :rtype: int
        """
        return self._max_size

    @max_size.setter
    def max_size(self, max_size):
        """Sets the max_size of this UploadShare.

        Maximal total size of uploaded files (in bytes)

        :param max_size: The max_size of this UploadShare.
        :type max_size: int
        """

        self._max_size = max_size

    @property
    def max_slots(self):
        """Gets the max_slots of this UploadShare.

        Maximal amount of files to upload

        :return: The max_slots of this UploadShare.
        :rtype: int
        """
        return self._max_slots

    @max_slots.setter
    def max_slots(self, max_slots):
        """Sets the max_slots of this UploadShare.

        Maximal amount of files to upload

        :param max_slots: The max_slots of this UploadShare.
        :type max_slots: int
        """

        self._max_slots = max_slots

    @property
    def name(self):
        """Gets the name of this UploadShare.

        Alias name

        :return: The name of this UploadShare.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UploadShare.

        Alias name

        :param name: The name of this UploadShare.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this UploadShare.

        User notes

        :return: The notes of this UploadShare.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UploadShare.

        User notes

        :param notes: The notes of this UploadShare.
        :type notes: str
        """

        self._notes = notes

    @property
    def notify_creator(self):
        """Gets the notify_creator of this UploadShare.

        &#128679; Deprecated since v4.20.0  Notify creator on every upload.

        :return: The notify_creator of this UploadShare.
        :rtype: bool
        """
        return self._notify_creator

    @notify_creator.setter
    def notify_creator(self, notify_creator):
        """Sets the notify_creator of this UploadShare.

        &#128679; Deprecated since v4.20.0  Notify creator on every upload.

        :param notify_creator: The notify_creator of this UploadShare.
        :type notify_creator: bool
        """
        if notify_creator is None:
            raise ValueError("Invalid value for `notify_creator`, must not be `None`")

        self._notify_creator = notify_creator

    @property
    def recipients(self):
        """Gets the recipients of this UploadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses

        :return: The recipients of this UploadShare.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this UploadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses

        :param recipients: The recipients of this UploadShare.
        :type recipients: str
        """

        self._recipients = recipients

    @property
    def show_creator_name(self):
        """Gets the show_creator_name of this UploadShare.

        &#128640; Since v4.11.0  Show creator first and last name.

        :return: The show_creator_name of this UploadShare.
        :rtype: bool
        """
        return self._show_creator_name

    @show_creator_name.setter
    def show_creator_name(self, show_creator_name):
        """Sets the show_creator_name of this UploadShare.

        &#128640; Since v4.11.0  Show creator first and last name.

        :param show_creator_name: The show_creator_name of this UploadShare.
        :type show_creator_name: bool
        """

        self._show_creator_name = show_creator_name

    @property
    def show_creator_username(self):
        """Gets the show_creator_username of this UploadShare.

        &#128640; Since v4.11.0  Show creator email address.

        :return: The show_creator_username of this UploadShare.
        :rtype: bool
        """
        return self._show_creator_username

    @show_creator_username.setter
    def show_creator_username(self, show_creator_username):
        """Sets the show_creator_username of this UploadShare.

        &#128640; Since v4.11.0  Show creator email address.

        :param show_creator_username: The show_creator_username of this UploadShare.
        :type show_creator_username: bool
        """

        self._show_creator_username = show_creator_username

    @property
    def show_uploaded_files(self):
        """Gets the show_uploaded_files of this UploadShare.

        Allow display of already uploaded files

        :return: The show_uploaded_files of this UploadShare.
        :rtype: bool
        """
        return self._show_uploaded_files

    @show_uploaded_files.setter
    def show_uploaded_files(self, show_uploaded_files):
        """Sets the show_uploaded_files of this UploadShare.

        Allow display of already uploaded files

        :param show_uploaded_files: The show_uploaded_files of this UploadShare.
        :type show_uploaded_files: bool
        """

        self._show_uploaded_files = show_uploaded_files

    @property
    def sms_recipients(self):
        """Gets the sms_recipients of this UploadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs

        :return: The sms_recipients of this UploadShare.
        :rtype: str
        """
        return self._sms_recipients

    @sms_recipients.setter
    def sms_recipients(self, sms_recipients):
        """Sets the sms_recipients of this UploadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs

        :param sms_recipients: The sms_recipients of this UploadShare.
        :type sms_recipients: str
        """

        self._sms_recipients = sms_recipients

    @property
    def target_id(self):
        """Gets the target_id of this UploadShare.

        Target room or folder ID

        :return: The target_id of this UploadShare.
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this UploadShare.

        Target room or folder ID

        :param target_id: The target_id of this UploadShare.
        :type target_id: int
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")

        self._target_id = target_id

    @property
    def target_path(self):
        """Gets the target_path of this UploadShare.

        Path to shared upload node

        :return: The target_path of this UploadShare.
        :rtype: str
        """
        return self._target_path

    @target_path.setter
    def target_path(self, target_path):
        """Sets the target_path of this UploadShare.

        Path to shared upload node

        :param target_path: The target_path of this UploadShare.
        :type target_path: str
        """

        self._target_path = target_path

    @property
    def target_type(self):
        """Gets the target_type of this UploadShare.

        Node type

        :return: The target_type of this UploadShare.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this UploadShare.

        Node type

        :param target_type: The target_type of this UploadShare.
        :type target_type: str
        """

        self._target_type = target_type

    @property
    def updated_at(self):
        """Gets the updated_at of this UploadShare.

        Modification date

        :return: The updated_at of this UploadShare.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UploadShare.

        Modification date

        :param updated_at: The updated_at of this UploadShare.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this UploadShare.


        :return: The updated_by of this UploadShare.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this UploadShare.


        :param updated_by: The updated_by of this UploadShare.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by
