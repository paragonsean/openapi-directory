# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestActiveDirectoryConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ldap_users_domain: str=None, server_admin_name: str=None, server_admin_password: str=None, server_ip: str=None, server_port: int=None, ssl_finger_print: str=None, use_ldaps: bool=False):
        """TestActiveDirectoryConfigRequest - a model defined in OpenAPI

        :param ldap_users_domain: The ldap_users_domain of this TestActiveDirectoryConfigRequest.
        :param server_admin_name: The server_admin_name of this TestActiveDirectoryConfigRequest.
        :param server_admin_password: The server_admin_password of this TestActiveDirectoryConfigRequest.
        :param server_ip: The server_ip of this TestActiveDirectoryConfigRequest.
        :param server_port: The server_port of this TestActiveDirectoryConfigRequest.
        :param ssl_finger_print: The ssl_finger_print of this TestActiveDirectoryConfigRequest.
        :param use_ldaps: The use_ldaps of this TestActiveDirectoryConfigRequest.
        """
        self.openapi_types = {
            'ldap_users_domain': str,
            'server_admin_name': str,
            'server_admin_password': str,
            'server_ip': str,
            'server_port': int,
            'ssl_finger_print': str,
            'use_ldaps': bool
        }

        self.attribute_map = {
            'ldap_users_domain': 'ldapUsersDomain',
            'server_admin_name': 'serverAdminName',
            'server_admin_password': 'serverAdminPassword',
            'server_ip': 'serverIp',
            'server_port': 'serverPort',
            'ssl_finger_print': 'sslFingerPrint',
            'use_ldaps': 'useLdaps'
        }

        self._ldap_users_domain = ldap_users_domain
        self._server_admin_name = server_admin_name
        self._server_admin_password = server_admin_password
        self._server_ip = server_ip
        self._server_port = server_port
        self._ssl_finger_print = ssl_finger_print
        self._use_ldaps = use_ldaps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestActiveDirectoryConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestActiveDirectoryConfigRequest of this TestActiveDirectoryConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ldap_users_domain(self):
        """Gets the ldap_users_domain of this TestActiveDirectoryConfigRequest.

        Search scope of Active Directory; only users below this node can log on.

        :return: The ldap_users_domain of this TestActiveDirectoryConfigRequest.
        :rtype: str
        """
        return self._ldap_users_domain

    @ldap_users_domain.setter
    def ldap_users_domain(self, ldap_users_domain):
        """Sets the ldap_users_domain of this TestActiveDirectoryConfigRequest.

        Search scope of Active Directory; only users below this node can log on.

        :param ldap_users_domain: The ldap_users_domain of this TestActiveDirectoryConfigRequest.
        :type ldap_users_domain: str
        """
        if ldap_users_domain is None:
            raise ValueError("Invalid value for `ldap_users_domain`, must not be `None`")

        self._ldap_users_domain = ldap_users_domain

    @property
    def server_admin_name(self):
        """Gets the server_admin_name of this TestActiveDirectoryConfigRequest.

        Distinguished Name (DN) of Active Directory administrative account

        :return: The server_admin_name of this TestActiveDirectoryConfigRequest.
        :rtype: str
        """
        return self._server_admin_name

    @server_admin_name.setter
    def server_admin_name(self, server_admin_name):
        """Sets the server_admin_name of this TestActiveDirectoryConfigRequest.

        Distinguished Name (DN) of Active Directory administrative account

        :param server_admin_name: The server_admin_name of this TestActiveDirectoryConfigRequest.
        :type server_admin_name: str
        """
        if server_admin_name is None:
            raise ValueError("Invalid value for `server_admin_name`, must not be `None`")

        self._server_admin_name = server_admin_name

    @property
    def server_admin_password(self):
        """Gets the server_admin_password of this TestActiveDirectoryConfigRequest.

        Password of Active Directory administrative account

        :return: The server_admin_password of this TestActiveDirectoryConfigRequest.
        :rtype: str
        """
        return self._server_admin_password

    @server_admin_password.setter
    def server_admin_password(self, server_admin_password):
        """Sets the server_admin_password of this TestActiveDirectoryConfigRequest.

        Password of Active Directory administrative account

        :param server_admin_password: The server_admin_password of this TestActiveDirectoryConfigRequest.
        :type server_admin_password: str
        """
        if server_admin_password is None:
            raise ValueError("Invalid value for `server_admin_password`, must not be `None`")

        self._server_admin_password = server_admin_password

    @property
    def server_ip(self):
        """Gets the server_ip of this TestActiveDirectoryConfigRequest.

        IPv4 or IPv6 address or host name

        :return: The server_ip of this TestActiveDirectoryConfigRequest.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this TestActiveDirectoryConfigRequest.

        IPv4 or IPv6 address or host name

        :param server_ip: The server_ip of this TestActiveDirectoryConfigRequest.
        :type server_ip: str
        """
        if server_ip is None:
            raise ValueError("Invalid value for `server_ip`, must not be `None`")

        self._server_ip = server_ip

    @property
    def server_port(self):
        """Gets the server_port of this TestActiveDirectoryConfigRequest.

        Port

        :return: The server_port of this TestActiveDirectoryConfigRequest.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this TestActiveDirectoryConfigRequest.

        Port

        :param server_port: The server_port of this TestActiveDirectoryConfigRequest.
        :type server_port: int
        """
        if server_port is None:
            raise ValueError("Invalid value for `server_port`, must not be `None`")

        self._server_port = server_port

    @property
    def ssl_finger_print(self):
        """Gets the ssl_finger_print of this TestActiveDirectoryConfigRequest.

        SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`

        :return: The ssl_finger_print of this TestActiveDirectoryConfigRequest.
        :rtype: str
        """
        return self._ssl_finger_print

    @ssl_finger_print.setter
    def ssl_finger_print(self, ssl_finger_print):
        """Sets the ssl_finger_print of this TestActiveDirectoryConfigRequest.

        SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`

        :param ssl_finger_print: The ssl_finger_print of this TestActiveDirectoryConfigRequest.
        :type ssl_finger_print: str
        """

        self._ssl_finger_print = ssl_finger_print

    @property
    def use_ldaps(self):
        """Gets the use_ldaps of this TestActiveDirectoryConfigRequest.

        Determines whether LDAPS should be used instead of plain LDAP.

        :return: The use_ldaps of this TestActiveDirectoryConfigRequest.
        :rtype: bool
        """
        return self._use_ldaps

    @use_ldaps.setter
    def use_ldaps(self, use_ldaps):
        """Sets the use_ldaps of this TestActiveDirectoryConfigRequest.

        Determines whether LDAPS should be used instead of plain LDAP.

        :param use_ldaps: The use_ldaps of this TestActiveDirectoryConfigRequest.
        :type use_ldaps: bool
        """

        self._use_ldaps = use_ldaps
