# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feature import Feature
from openapi_server.models.featured_o_auth_client import FeaturedOAuthClient
from openapi_server import util


class ProductPackageResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clients: List[FeaturedOAuthClient]=None, features: List[Feature]=None, product_package_id: int=None, product_package_name: str=None):
        """ProductPackageResponse - a model defined in OpenAPI

        :param clients: The clients of this ProductPackageResponse.
        :param features: The features of this ProductPackageResponse.
        :param product_package_id: The product_package_id of this ProductPackageResponse.
        :param product_package_name: The product_package_name of this ProductPackageResponse.
        """
        self.openapi_types = {
            'clients': List[FeaturedOAuthClient],
            'features': List[Feature],
            'product_package_id': int,
            'product_package_name': str
        }

        self.attribute_map = {
            'clients': 'clients',
            'features': 'features',
            'product_package_id': 'productPackageId',
            'product_package_name': 'productPackageName'
        }

        self._clients = clients
        self._features = features
        self._product_package_id = product_package_id
        self._product_package_name = product_package_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductPackageResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductPackageResponse of this ProductPackageResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clients(self):
        """Gets the clients of this ProductPackageResponse.

        OAuth Client Information

        :return: The clients of this ProductPackageResponse.
        :rtype: List[FeaturedOAuthClient]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ProductPackageResponse.

        OAuth Client Information

        :param clients: The clients of this ProductPackageResponse.
        :type clients: List[FeaturedOAuthClient]
        """
        if clients is None:
            raise ValueError("Invalid value for `clients`, must not be `None`")

        self._clients = clients

    @property
    def features(self):
        """Gets the features of this ProductPackageResponse.

        Features

        :return: The features of this ProductPackageResponse.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this ProductPackageResponse.

        Features

        :param features: The features of this ProductPackageResponse.
        :type features: List[Feature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")

        self._features = features

    @property
    def product_package_id(self):
        """Gets the product_package_id of this ProductPackageResponse.

        ID

        :return: The product_package_id of this ProductPackageResponse.
        :rtype: int
        """
        return self._product_package_id

    @product_package_id.setter
    def product_package_id(self, product_package_id):
        """Sets the product_package_id of this ProductPackageResponse.

        ID

        :param product_package_id: The product_package_id of this ProductPackageResponse.
        :type product_package_id: int
        """
        if product_package_id is None:
            raise ValueError("Invalid value for `product_package_id`, must not be `None`")

        self._product_package_id = product_package_id

    @property
    def product_package_name(self):
        """Gets the product_package_name of this ProductPackageResponse.

        Name

        :return: The product_package_name of this ProductPackageResponse.
        :rtype: str
        """
        return self._product_package_name

    @product_package_name.setter
    def product_package_name(self, product_package_name):
        """Sets the product_package_name of this ProductPackageResponse.

        Name

        :param product_package_name: The product_package_name of this ProductPackageResponse.
        :type product_package_name: str
        """
        if product_package_name is None:
            raise ValueError("Invalid value for `product_package_name`, must not be `None`")

        self._product_package_name = product_package_name
