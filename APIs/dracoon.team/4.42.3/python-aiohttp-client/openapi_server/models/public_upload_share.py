# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.public_uploaded_file_data import PublicUploadedFileData
from openapi_server.models.user_user_public_key_list import UserUserPublicKeyList
from openapi_server import util


class PublicUploadShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, creator_name: str=None, creator_username: str=None, expire_at: datetime=None, is_encrypted: bool=None, is_protected: bool=None, name: str=None, notes: str=None, remaining_size: int=None, remaining_slots: int=None, show_uploaded_files: bool=None, uploaded_files: List[PublicUploadedFileData]=None, user_user_public_key_list: UserUserPublicKeyList=None):
        """PublicUploadShare - a model defined in OpenAPI

        :param created_at: The created_at of this PublicUploadShare.
        :param creator_name: The creator_name of this PublicUploadShare.
        :param creator_username: The creator_username of this PublicUploadShare.
        :param expire_at: The expire_at of this PublicUploadShare.
        :param is_encrypted: The is_encrypted of this PublicUploadShare.
        :param is_protected: The is_protected of this PublicUploadShare.
        :param name: The name of this PublicUploadShare.
        :param notes: The notes of this PublicUploadShare.
        :param remaining_size: The remaining_size of this PublicUploadShare.
        :param remaining_slots: The remaining_slots of this PublicUploadShare.
        :param show_uploaded_files: The show_uploaded_files of this PublicUploadShare.
        :param uploaded_files: The uploaded_files of this PublicUploadShare.
        :param user_user_public_key_list: The user_user_public_key_list of this PublicUploadShare.
        """
        self.openapi_types = {
            'created_at': datetime,
            'creator_name': str,
            'creator_username': str,
            'expire_at': datetime,
            'is_encrypted': bool,
            'is_protected': bool,
            'name': str,
            'notes': str,
            'remaining_size': int,
            'remaining_slots': int,
            'show_uploaded_files': bool,
            'uploaded_files': List[PublicUploadedFileData],
            'user_user_public_key_list': UserUserPublicKeyList
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'creator_name': 'creatorName',
            'creator_username': 'creatorUsername',
            'expire_at': 'expireAt',
            'is_encrypted': 'isEncrypted',
            'is_protected': 'isProtected',
            'name': 'name',
            'notes': 'notes',
            'remaining_size': 'remainingSize',
            'remaining_slots': 'remainingSlots',
            'show_uploaded_files': 'showUploadedFiles',
            'uploaded_files': 'uploadedFiles',
            'user_user_public_key_list': 'userUserPublicKeyList'
        }

        self._created_at = created_at
        self._creator_name = creator_name
        self._creator_username = creator_username
        self._expire_at = expire_at
        self._is_encrypted = is_encrypted
        self._is_protected = is_protected
        self._name = name
        self._notes = notes
        self._remaining_size = remaining_size
        self._remaining_slots = remaining_slots
        self._show_uploaded_files = show_uploaded_files
        self._uploaded_files = uploaded_files
        self._user_user_public_key_list = user_user_public_key_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicUploadShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicUploadShare of this PublicUploadShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PublicUploadShare.

        Creation date

        :return: The created_at of this PublicUploadShare.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicUploadShare.

        Creation date

        :param created_at: The created_at of this PublicUploadShare.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creator_name(self):
        """Gets the creator_name of this PublicUploadShare.

        &#128640; Since v4.11.0  Creator name

        :return: The creator_name of this PublicUploadShare.
        :rtype: str
        """
        return self._creator_name

    @creator_name.setter
    def creator_name(self, creator_name):
        """Sets the creator_name of this PublicUploadShare.

        &#128640; Since v4.11.0  Creator name

        :param creator_name: The creator_name of this PublicUploadShare.
        :type creator_name: str
        """
        if creator_name is None:
            raise ValueError("Invalid value for `creator_name`, must not be `None`")

        self._creator_name = creator_name

    @property
    def creator_username(self):
        """Gets the creator_username of this PublicUploadShare.

        &#128640; Since v4.11.0  Creator username

        :return: The creator_username of this PublicUploadShare.
        :rtype: str
        """
        return self._creator_username

    @creator_username.setter
    def creator_username(self, creator_username):
        """Sets the creator_username of this PublicUploadShare.

        &#128640; Since v4.11.0  Creator username

        :param creator_username: The creator_username of this PublicUploadShare.
        :type creator_username: str
        """

        self._creator_username = creator_username

    @property
    def expire_at(self):
        """Gets the expire_at of this PublicUploadShare.

        Expiration date

        :return: The expire_at of this PublicUploadShare.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this PublicUploadShare.

        Expiration date

        :param expire_at: The expire_at of this PublicUploadShare.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this PublicUploadShare.

        Encryption state

        :return: The is_encrypted of this PublicUploadShare.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this PublicUploadShare.

        Encryption state

        :param is_encrypted: The is_encrypted of this PublicUploadShare.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_protected(self):
        """Gets the is_protected of this PublicUploadShare.

        Is share protected by password

        :return: The is_protected of this PublicUploadShare.
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this PublicUploadShare.

        Is share protected by password

        :param is_protected: The is_protected of this PublicUploadShare.
        :type is_protected: bool
        """
        if is_protected is None:
            raise ValueError("Invalid value for `is_protected`, must not be `None`")

        self._is_protected = is_protected

    @property
    def name(self):
        """Gets the name of this PublicUploadShare.

        Share display name (alias name)

        :return: The name of this PublicUploadShare.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicUploadShare.

        Share display name (alias name)

        :param name: The name of this PublicUploadShare.
        :type name: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this PublicUploadShare.

        User notes

        :return: The notes of this PublicUploadShare.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this PublicUploadShare.

        User notes

        :param notes: The notes of this PublicUploadShare.
        :type notes: str
        """

        self._notes = notes

    @property
    def remaining_size(self):
        """Gets the remaining_size of this PublicUploadShare.

        Remaining size

        :return: The remaining_size of this PublicUploadShare.
        :rtype: int
        """
        return self._remaining_size

    @remaining_size.setter
    def remaining_size(self, remaining_size):
        """Sets the remaining_size of this PublicUploadShare.

        Remaining size

        :param remaining_size: The remaining_size of this PublicUploadShare.
        :type remaining_size: int
        """

        self._remaining_size = remaining_size

    @property
    def remaining_slots(self):
        """Gets the remaining_slots of this PublicUploadShare.

        Remaining slots

        :return: The remaining_slots of this PublicUploadShare.
        :rtype: int
        """
        return self._remaining_slots

    @remaining_slots.setter
    def remaining_slots(self, remaining_slots):
        """Sets the remaining_slots of this PublicUploadShare.

        Remaining slots

        :param remaining_slots: The remaining_slots of this PublicUploadShare.
        :type remaining_slots: int
        """

        self._remaining_slots = remaining_slots

    @property
    def show_uploaded_files(self):
        """Gets the show_uploaded_files of this PublicUploadShare.

        Allow display of already uploaded files

        :return: The show_uploaded_files of this PublicUploadShare.
        :rtype: bool
        """
        return self._show_uploaded_files

    @show_uploaded_files.setter
    def show_uploaded_files(self, show_uploaded_files):
        """Sets the show_uploaded_files of this PublicUploadShare.

        Allow display of already uploaded files

        :param show_uploaded_files: The show_uploaded_files of this PublicUploadShare.
        :type show_uploaded_files: bool
        """

        self._show_uploaded_files = show_uploaded_files

    @property
    def uploaded_files(self):
        """Gets the uploaded_files of this PublicUploadShare.

        List of (public) uploaded files

        :return: The uploaded_files of this PublicUploadShare.
        :rtype: List[PublicUploadedFileData]
        """
        return self._uploaded_files

    @uploaded_files.setter
    def uploaded_files(self, uploaded_files):
        """Sets the uploaded_files of this PublicUploadShare.

        List of (public) uploaded files

        :param uploaded_files: The uploaded_files of this PublicUploadShare.
        :type uploaded_files: List[PublicUploadedFileData]
        """

        self._uploaded_files = uploaded_files

    @property
    def user_user_public_key_list(self):
        """Gets the user_user_public_key_list of this PublicUploadShare.


        :return: The user_user_public_key_list of this PublicUploadShare.
        :rtype: UserUserPublicKeyList
        """
        return self._user_user_public_key_list

    @user_user_public_key_list.setter
    def user_user_public_key_list(self, user_user_public_key_list):
        """Sets the user_user_public_key_list of this PublicUploadShare.


        :param user_user_public_key_list: The user_user_public_key_list of this PublicUploadShare.
        :type user_user_public_key_list: UserUserPublicKeyList
        """

        self._user_user_public_key_list = user_user_public_key_list
