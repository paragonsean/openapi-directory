# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CharacterRules(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, must_contain_characters: List[str]=None, number_of_characteristics_to_enforce: int=None):
        """CharacterRules - a model defined in OpenAPI

        :param must_contain_characters: The must_contain_characters of this CharacterRules.
        :param number_of_characteristics_to_enforce: The number_of_characteristics_to_enforce of this CharacterRules.
        """
        self.openapi_types = {
            'must_contain_characters': List[str],
            'number_of_characteristics_to_enforce': int
        }

        self.attribute_map = {
            'must_contain_characters': 'mustContainCharacters',
            'number_of_characteristics_to_enforce': 'numberOfCharacteristicsToEnforce'
        }

        self._must_contain_characters = must_contain_characters
        self._number_of_characteristics_to_enforce = number_of_characteristics_to_enforce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CharacterRules':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CharacterRules of this CharacterRules.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def must_contain_characters(self):
        """Gets the must_contain_characters of this CharacterRules.

        Characters which a password must contain:  * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)  * `uppercase` - at least one uppercase character  * `lowercase` - at least one lowercase character  * `numeric` - at least one numeric character  * `special` - at least one special character (letters and digits excluded)  * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)  * `none` - none of the above

        :return: The must_contain_characters of this CharacterRules.
        :rtype: List[str]
        """
        return self._must_contain_characters

    @must_contain_characters.setter
    def must_contain_characters(self, must_contain_characters):
        """Sets the must_contain_characters of this CharacterRules.

        Characters which a password must contain:  * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)  * `uppercase` - at least one uppercase character  * `lowercase` - at least one lowercase character  * `numeric` - at least one numeric character  * `special` - at least one special character (letters and digits excluded)  * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)  * `none` - none of the above

        :param must_contain_characters: The must_contain_characters of this CharacterRules.
        :type must_contain_characters: List[str]
        """
        allowed_values = ["alpha", "uppercase", "lowercase", "numeric", "special", "all", "none"]  # noqa: E501
        if not set(must_contain_characters).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `must_contain_characters` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(must_contain_characters) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._must_contain_characters = must_contain_characters

    @property
    def number_of_characteristics_to_enforce(self):
        """Gets the number_of_characteristics_to_enforce of this CharacterRules.

        Number of characteristics to enforce  e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`  all 4 character sets can be enforced; but also only 2 of them

        :return: The number_of_characteristics_to_enforce of this CharacterRules.
        :rtype: int
        """
        return self._number_of_characteristics_to_enforce

    @number_of_characteristics_to_enforce.setter
    def number_of_characteristics_to_enforce(self, number_of_characteristics_to_enforce):
        """Sets the number_of_characteristics_to_enforce of this CharacterRules.

        Number of characteristics to enforce  e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`  all 4 character sets can be enforced; but also only 2 of them

        :param number_of_characteristics_to_enforce: The number_of_characteristics_to_enforce of this CharacterRules.
        :type number_of_characteristics_to_enforce: int
        """
        if number_of_characteristics_to_enforce is None:
            raise ValueError("Invalid value for `number_of_characteristics_to_enforce`, must not be `None`")
        if number_of_characteristics_to_enforce is not None and number_of_characteristics_to_enforce > 4:
            raise ValueError("Invalid value for `number_of_characteristics_to_enforce`, must be a value less than or equal to `4`")
        if number_of_characteristics_to_enforce is not None and number_of_characteristics_to_enforce < 0:
            raise ValueError("Invalid value for `number_of_characteristics_to_enforce`, must be a value greater than or equal to `0`")

        self._number_of_characteristics_to_enforce = number_of_characteristics_to_enforce
