# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature_id: int=None, feature_name: str=None, is_available: bool=None):
        """Feature - a model defined in OpenAPI

        :param feature_id: The feature_id of this Feature.
        :param feature_name: The feature_name of this Feature.
        :param is_available: The is_available of this Feature.
        """
        self.openapi_types = {
            'feature_id': int,
            'feature_name': str,
            'is_available': bool
        }

        self.attribute_map = {
            'feature_id': 'featureId',
            'feature_name': 'featureName',
            'is_available': 'isAvailable'
        }

        self._feature_id = feature_id
        self._feature_name = feature_name
        self._is_available = is_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature_id(self):
        """Gets the feature_id of this Feature.

        ID

        :return: The feature_id of this Feature.
        :rtype: int
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this Feature.

        ID

        :param feature_id: The feature_id of this Feature.
        :type feature_id: int
        """
        if feature_id is None:
            raise ValueError("Invalid value for `feature_id`, must not be `None`")

        self._feature_id = feature_id

    @property
    def feature_name(self):
        """Gets the feature_name of this Feature.

        Name

        :return: The feature_name of this Feature.
        :rtype: str
        """
        return self._feature_name

    @feature_name.setter
    def feature_name(self, feature_name):
        """Sets the feature_name of this Feature.

        Name

        :param feature_name: The feature_name of this Feature.
        :type feature_name: str
        """
        if feature_name is None:
            raise ValueError("Invalid value for `feature_name`, must not be `None`")

        self._feature_name = feature_name

    @property
    def is_available(self):
        """Gets the is_available of this Feature.

        Is Available

        :return: The is_available of this Feature.
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this Feature.

        Is Available

        :param is_available: The is_available of this Feature.
        :type is_available: bool
        """
        if is_available is None:
            raise ValueError("Invalid value for `is_available`, must not be `None`")

        self._is_available = is_available
