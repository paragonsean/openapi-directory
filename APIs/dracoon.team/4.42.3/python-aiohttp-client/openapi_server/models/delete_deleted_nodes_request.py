# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteDeletedNodesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_node_ids: List[int]=None):
        """DeleteDeletedNodesRequest - a model defined in OpenAPI

        :param deleted_node_ids: The deleted_node_ids of this DeleteDeletedNodesRequest.
        """
        self.openapi_types = {
            'deleted_node_ids': List[int]
        }

        self.attribute_map = {
            'deleted_node_ids': 'deletedNodeIds'
        }

        self._deleted_node_ids = deleted_node_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteDeletedNodesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteDeletedNodesRequest of this DeleteDeletedNodesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_node_ids(self):
        """Gets the deleted_node_ids of this DeleteDeletedNodesRequest.

        List of deleted node IDs

        :return: The deleted_node_ids of this DeleteDeletedNodesRequest.
        :rtype: List[int]
        """
        return self._deleted_node_ids

    @deleted_node_ids.setter
    def deleted_node_ids(self, deleted_node_ids):
        """Sets the deleted_node_ids of this DeleteDeletedNodesRequest.

        List of deleted node IDs

        :param deleted_node_ids: The deleted_node_ids of this DeleteDeletedNodesRequest.
        :type deleted_node_ids: List[int]
        """
        if deleted_node_ids is None:
            raise ValueError("Invalid value for `deleted_node_ids`, must not be `None`")

        self._deleted_node_ids = deleted_node_ids
