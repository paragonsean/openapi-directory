# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_mandatory: bool=False, key: str=None, value: str=None):
        """S3Tag - a model defined in OpenAPI

        :param id: The id of this S3Tag.
        :param is_mandatory: The is_mandatory of this S3Tag.
        :param key: The key of this S3Tag.
        :param value: The value of this S3Tag.
        """
        self.openapi_types = {
            'id': int,
            'is_mandatory': bool,
            'key': str,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_mandatory': 'isMandatory',
            'key': 'key',
            'value': 'value'
        }

        self._id = id
        self._is_mandatory = is_mandatory
        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Tag of this S3Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this S3Tag.

        S3 tag ID

        :return: The id of this S3Tag.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this S3Tag.

        S3 tag ID

        :param id: The id of this S3Tag.
        :type id: int
        """

        self._id = id

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this S3Tag.

        Determines whether S3 is mandatory or not

        :return: The is_mandatory of this S3Tag.
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this S3Tag.

        Determines whether S3 is mandatory or not

        :param is_mandatory: The is_mandatory of this S3Tag.
        :type is_mandatory: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def key(self):
        """Gets the key of this S3Tag.

        S3 tag key

        :return: The key of this S3Tag.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this S3Tag.

        S3 tag key

        :param key: The key of this S3Tag.
        :type key: str
        """

        self._key = key

    @property
    def value(self):
        """Gets the value of this S3Tag.

        S3 tag value

        :return: The value of this S3Tag.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this S3Tag.

        S3 tag value

        :param value: The value of this S3Tag.
        :type value: str
        """

        self._value = value
