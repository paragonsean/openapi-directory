# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.private_key_container import PrivateKeyContainer
from openapi_server.models.public_key_container import PublicKeyContainer
from openapi_server import util


class CreateKeyPairRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, previous_private_key: PrivateKeyContainer=None, private_key_container: PrivateKeyContainer=None, public_key_container: PublicKeyContainer=None):
        """CreateKeyPairRequest - a model defined in OpenAPI

        :param previous_private_key: The previous_private_key of this CreateKeyPairRequest.
        :param private_key_container: The private_key_container of this CreateKeyPairRequest.
        :param public_key_container: The public_key_container of this CreateKeyPairRequest.
        """
        self.openapi_types = {
            'previous_private_key': PrivateKeyContainer,
            'private_key_container': PrivateKeyContainer,
            'public_key_container': PublicKeyContainer
        }

        self.attribute_map = {
            'previous_private_key': 'previousPrivateKey',
            'private_key_container': 'privateKeyContainer',
            'public_key_container': 'publicKeyContainer'
        }

        self._previous_private_key = previous_private_key
        self._private_key_container = private_key_container
        self._public_key_container = public_key_container

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateKeyPairRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateKeyPairRequest of this CreateKeyPairRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def previous_private_key(self):
        """Gets the previous_private_key of this CreateKeyPairRequest.


        :return: The previous_private_key of this CreateKeyPairRequest.
        :rtype: PrivateKeyContainer
        """
        return self._previous_private_key

    @previous_private_key.setter
    def previous_private_key(self, previous_private_key):
        """Sets the previous_private_key of this CreateKeyPairRequest.


        :param previous_private_key: The previous_private_key of this CreateKeyPairRequest.
        :type previous_private_key: PrivateKeyContainer
        """
        if previous_private_key is None:
            raise ValueError("Invalid value for `previous_private_key`, must not be `None`")

        self._previous_private_key = previous_private_key

    @property
    def private_key_container(self):
        """Gets the private_key_container of this CreateKeyPairRequest.


        :return: The private_key_container of this CreateKeyPairRequest.
        :rtype: PrivateKeyContainer
        """
        return self._private_key_container

    @private_key_container.setter
    def private_key_container(self, private_key_container):
        """Sets the private_key_container of this CreateKeyPairRequest.


        :param private_key_container: The private_key_container of this CreateKeyPairRequest.
        :type private_key_container: PrivateKeyContainer
        """
        if private_key_container is None:
            raise ValueError("Invalid value for `private_key_container`, must not be `None`")

        self._private_key_container = private_key_container

    @property
    def public_key_container(self):
        """Gets the public_key_container of this CreateKeyPairRequest.


        :return: The public_key_container of this CreateKeyPairRequest.
        :rtype: PublicKeyContainer
        """
        return self._public_key_container

    @public_key_container.setter
    def public_key_container(self, public_key_container):
        """Sets the public_key_container of this CreateKeyPairRequest.


        :param public_key_container: The public_key_container of this CreateKeyPairRequest.
        :type public_key_container: PublicKeyContainer
        """
        if public_key_container is None:
            raise ValueError("Invalid value for `public_key_container`, must not be `None`")

        self._public_key_container = public_key_container
