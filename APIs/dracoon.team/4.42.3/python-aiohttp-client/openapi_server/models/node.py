# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encryption_info import EncryptionInfo
from openapi_server.models.node_permissions import NodePermissions
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class Node(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_parent_id: int=None, branch_version: int=None, children: List[Node]=None, classification: int=None, cnt_children: int=None, cnt_comments: int=None, cnt_deleted_versions: int=None, cnt_download_shares: int=None, cnt_files: int=None, cnt_folders: int=None, cnt_rooms: int=None, cnt_upload_shares: int=None, created_at: datetime=None, created_by: UserInfo=None, encryption_info: EncryptionInfo=None, expire_at: datetime=None, file_type: str=None, has_activities_log: bool=True, hash: str=None, id: int=None, inherit_permissions: bool=None, is_browsable: bool=None, is_encrypted: bool=None, is_favorite: bool=None, media_token: str=None, media_type: str=None, name: str=None, notes: str=None, parent_id: int=None, parent_path: str=None, permissions: NodePermissions=None, quota: int=None, recycle_bin_retention_period: int=None, reference_id: int=None, size: int=None, timestamp_creation: datetime=None, timestamp_modification: datetime=None, type: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """Node - a model defined in OpenAPI

        :param auth_parent_id: The auth_parent_id of this Node.
        :param branch_version: The branch_version of this Node.
        :param children: The children of this Node.
        :param classification: The classification of this Node.
        :param cnt_children: The cnt_children of this Node.
        :param cnt_comments: The cnt_comments of this Node.
        :param cnt_deleted_versions: The cnt_deleted_versions of this Node.
        :param cnt_download_shares: The cnt_download_shares of this Node.
        :param cnt_files: The cnt_files of this Node.
        :param cnt_folders: The cnt_folders of this Node.
        :param cnt_rooms: The cnt_rooms of this Node.
        :param cnt_upload_shares: The cnt_upload_shares of this Node.
        :param created_at: The created_at of this Node.
        :param created_by: The created_by of this Node.
        :param encryption_info: The encryption_info of this Node.
        :param expire_at: The expire_at of this Node.
        :param file_type: The file_type of this Node.
        :param has_activities_log: The has_activities_log of this Node.
        :param hash: The hash of this Node.
        :param id: The id of this Node.
        :param inherit_permissions: The inherit_permissions of this Node.
        :param is_browsable: The is_browsable of this Node.
        :param is_encrypted: The is_encrypted of this Node.
        :param is_favorite: The is_favorite of this Node.
        :param media_token: The media_token of this Node.
        :param media_type: The media_type of this Node.
        :param name: The name of this Node.
        :param notes: The notes of this Node.
        :param parent_id: The parent_id of this Node.
        :param parent_path: The parent_path of this Node.
        :param permissions: The permissions of this Node.
        :param quota: The quota of this Node.
        :param recycle_bin_retention_period: The recycle_bin_retention_period of this Node.
        :param reference_id: The reference_id of this Node.
        :param size: The size of this Node.
        :param timestamp_creation: The timestamp_creation of this Node.
        :param timestamp_modification: The timestamp_modification of this Node.
        :param type: The type of this Node.
        :param updated_at: The updated_at of this Node.
        :param updated_by: The updated_by of this Node.
        """
        self.openapi_types = {
            'auth_parent_id': int,
            'branch_version': int,
            'children': List[Node],
            'classification': int,
            'cnt_children': int,
            'cnt_comments': int,
            'cnt_deleted_versions': int,
            'cnt_download_shares': int,
            'cnt_files': int,
            'cnt_folders': int,
            'cnt_rooms': int,
            'cnt_upload_shares': int,
            'created_at': datetime,
            'created_by': UserInfo,
            'encryption_info': EncryptionInfo,
            'expire_at': datetime,
            'file_type': str,
            'has_activities_log': bool,
            'hash': str,
            'id': int,
            'inherit_permissions': bool,
            'is_browsable': bool,
            'is_encrypted': bool,
            'is_favorite': bool,
            'media_token': str,
            'media_type': str,
            'name': str,
            'notes': str,
            'parent_id': int,
            'parent_path': str,
            'permissions': NodePermissions,
            'quota': int,
            'recycle_bin_retention_period': int,
            'reference_id': int,
            'size': int,
            'timestamp_creation': datetime,
            'timestamp_modification': datetime,
            'type': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'auth_parent_id': 'authParentId',
            'branch_version': 'branchVersion',
            'children': 'children',
            'classification': 'classification',
            'cnt_children': 'cntChildren',
            'cnt_comments': 'cntComments',
            'cnt_deleted_versions': 'cntDeletedVersions',
            'cnt_download_shares': 'cntDownloadShares',
            'cnt_files': 'cntFiles',
            'cnt_folders': 'cntFolders',
            'cnt_rooms': 'cntRooms',
            'cnt_upload_shares': 'cntUploadShares',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'encryption_info': 'encryptionInfo',
            'expire_at': 'expireAt',
            'file_type': 'fileType',
            'has_activities_log': 'hasActivitiesLog',
            'hash': 'hash',
            'id': 'id',
            'inherit_permissions': 'inheritPermissions',
            'is_browsable': 'isBrowsable',
            'is_encrypted': 'isEncrypted',
            'is_favorite': 'isFavorite',
            'media_token': 'mediaToken',
            'media_type': 'mediaType',
            'name': 'name',
            'notes': 'notes',
            'parent_id': 'parentId',
            'parent_path': 'parentPath',
            'permissions': 'permissions',
            'quota': 'quota',
            'recycle_bin_retention_period': 'recycleBinRetentionPeriod',
            'reference_id': 'referenceId',
            'size': 'size',
            'timestamp_creation': 'timestampCreation',
            'timestamp_modification': 'timestampModification',
            'type': 'type',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._auth_parent_id = auth_parent_id
        self._branch_version = branch_version
        self._children = children
        self._classification = classification
        self._cnt_children = cnt_children
        self._cnt_comments = cnt_comments
        self._cnt_deleted_versions = cnt_deleted_versions
        self._cnt_download_shares = cnt_download_shares
        self._cnt_files = cnt_files
        self._cnt_folders = cnt_folders
        self._cnt_rooms = cnt_rooms
        self._cnt_upload_shares = cnt_upload_shares
        self._created_at = created_at
        self._created_by = created_by
        self._encryption_info = encryption_info
        self._expire_at = expire_at
        self._file_type = file_type
        self._has_activities_log = has_activities_log
        self._hash = hash
        self._id = id
        self._inherit_permissions = inherit_permissions
        self._is_browsable = is_browsable
        self._is_encrypted = is_encrypted
        self._is_favorite = is_favorite
        self._media_token = media_token
        self._media_type = media_type
        self._name = name
        self._notes = notes
        self._parent_id = parent_id
        self._parent_path = parent_path
        self._permissions = permissions
        self._quota = quota
        self._recycle_bin_retention_period = recycle_bin_retention_period
        self._reference_id = reference_id
        self._size = size
        self._timestamp_creation = timestamp_creation
        self._timestamp_modification = timestamp_modification
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Node of this Node.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_parent_id(self):
        """Gets the auth_parent_id of this Node.

        &#128640; Since v4.15.0  Auth parent room ID

        :return: The auth_parent_id of this Node.
        :rtype: int
        """
        return self._auth_parent_id

    @auth_parent_id.setter
    def auth_parent_id(self, auth_parent_id):
        """Sets the auth_parent_id of this Node.

        &#128640; Since v4.15.0  Auth parent room ID

        :param auth_parent_id: The auth_parent_id of this Node.
        :type auth_parent_id: int
        """

        self._auth_parent_id = auth_parent_id

    @property
    def branch_version(self):
        """Gets the branch_version of this Node.

        Version of last change in this node or a node further down the tree.

        :return: The branch_version of this Node.
        :rtype: int
        """
        return self._branch_version

    @branch_version.setter
    def branch_version(self, branch_version):
        """Sets the branch_version of this Node.

        Version of last change in this node or a node further down the tree.

        :param branch_version: The branch_version of this Node.
        :type branch_version: int
        """

        self._branch_version = branch_version

    @property
    def children(self):
        """Gets the children of this Node.

        &#128679; Deprecated since v4.10.0  Child nodes list (if requested)  (for rooms / folders only)

        :return: The children of this Node.
        :rtype: List[Node]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this Node.

        &#128679; Deprecated since v4.10.0  Child nodes list (if requested)  (for rooms / folders only)

        :param children: The children of this Node.
        :type children: List[Node]
        """

        self._children = children

    @property
    def classification(self):
        """Gets the classification of this Node.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential

        :return: The classification of this Node.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Node.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential

        :param classification: The classification of this Node.
        :type classification: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def cnt_children(self):
        """Gets the cnt_children of this Node.

        &#128679; Deprecated since v4.11.0  Number of direct children  (no recursion; for rooms / folders only)

        :return: The cnt_children of this Node.
        :rtype: int
        """
        return self._cnt_children

    @cnt_children.setter
    def cnt_children(self, cnt_children):
        """Sets the cnt_children of this Node.

        &#128679; Deprecated since v4.11.0  Number of direct children  (no recursion; for rooms / folders only)

        :param cnt_children: The cnt_children of this Node.
        :type cnt_children: int
        """

        self._cnt_children = cnt_children

    @property
    def cnt_comments(self):
        """Gets the cnt_comments of this Node.

        Returns the number of comments of this node.

        :return: The cnt_comments of this Node.
        :rtype: int
        """
        return self._cnt_comments

    @cnt_comments.setter
    def cnt_comments(self, cnt_comments):
        """Sets the cnt_comments of this Node.

        Returns the number of comments of this node.

        :param cnt_comments: The cnt_comments of this Node.
        :type cnt_comments: int
        """

        self._cnt_comments = cnt_comments

    @property
    def cnt_deleted_versions(self):
        """Gets the cnt_deleted_versions of this Node.

        Number of deleted versions of this file / folder  (for rooms / folders only)

        :return: The cnt_deleted_versions of this Node.
        :rtype: int
        """
        return self._cnt_deleted_versions

    @cnt_deleted_versions.setter
    def cnt_deleted_versions(self, cnt_deleted_versions):
        """Sets the cnt_deleted_versions of this Node.

        Number of deleted versions of this file / folder  (for rooms / folders only)

        :param cnt_deleted_versions: The cnt_deleted_versions of this Node.
        :type cnt_deleted_versions: int
        """

        self._cnt_deleted_versions = cnt_deleted_versions

    @property
    def cnt_download_shares(self):
        """Gets the cnt_download_shares of this Node.

        Returns the number of Download Shares of this node.

        :return: The cnt_download_shares of this Node.
        :rtype: int
        """
        return self._cnt_download_shares

    @cnt_download_shares.setter
    def cnt_download_shares(self, cnt_download_shares):
        """Sets the cnt_download_shares of this Node.

        Returns the number of Download Shares of this node.

        :param cnt_download_shares: The cnt_download_shares of this Node.
        :type cnt_download_shares: int
        """

        self._cnt_download_shares = cnt_download_shares

    @property
    def cnt_files(self):
        """Gets the cnt_files of this Node.

        &#128640; Since v4.11.0  Amount of direct child files where this node is the parent node  (no recursion; for rooms / folders only)

        :return: The cnt_files of this Node.
        :rtype: int
        """
        return self._cnt_files

    @cnt_files.setter
    def cnt_files(self, cnt_files):
        """Sets the cnt_files of this Node.

        &#128640; Since v4.11.0  Amount of direct child files where this node is the parent node  (no recursion; for rooms / folders only)

        :param cnt_files: The cnt_files of this Node.
        :type cnt_files: int
        """

        self._cnt_files = cnt_files

    @property
    def cnt_folders(self):
        """Gets the cnt_folders of this Node.

        &#128640; Since v4.11.0  Amount of direct child folders where this node is the parent node  (no recursion; for rooms / folders only)

        :return: The cnt_folders of this Node.
        :rtype: int
        """
        return self._cnt_folders

    @cnt_folders.setter
    def cnt_folders(self, cnt_folders):
        """Sets the cnt_folders of this Node.

        &#128640; Since v4.11.0  Amount of direct child folders where this node is the parent node  (no recursion; for rooms / folders only)

        :param cnt_folders: The cnt_folders of this Node.
        :type cnt_folders: int
        """

        self._cnt_folders = cnt_folders

    @property
    def cnt_rooms(self):
        """Gets the cnt_rooms of this Node.

        &#128640; Since v4.11.0  Amount of direct child rooms where this node is the parent node  (no recursion; for rooms only)

        :return: The cnt_rooms of this Node.
        :rtype: int
        """
        return self._cnt_rooms

    @cnt_rooms.setter
    def cnt_rooms(self, cnt_rooms):
        """Sets the cnt_rooms of this Node.

        &#128640; Since v4.11.0  Amount of direct child rooms where this node is the parent node  (no recursion; for rooms only)

        :param cnt_rooms: The cnt_rooms of this Node.
        :type cnt_rooms: int
        """

        self._cnt_rooms = cnt_rooms

    @property
    def cnt_upload_shares(self):
        """Gets the cnt_upload_shares of this Node.

        Returns the number of Upload Shares of this node.

        :return: The cnt_upload_shares of this Node.
        :rtype: int
        """
        return self._cnt_upload_shares

    @cnt_upload_shares.setter
    def cnt_upload_shares(self, cnt_upload_shares):
        """Sets the cnt_upload_shares of this Node.

        Returns the number of Upload Shares of this node.

        :param cnt_upload_shares: The cnt_upload_shares of this Node.
        :type cnt_upload_shares: int
        """

        self._cnt_upload_shares = cnt_upload_shares

    @property
    def created_at(self):
        """Gets the created_at of this Node.

        Creation date

        :return: The created_at of this Node.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Node.

        Creation date

        :param created_at: The created_at of this Node.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Node.


        :return: The created_by of this Node.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Node.


        :param created_by: The created_by of this Node.
        :type created_by: UserInfo
        """

        self._created_by = created_by

    @property
    def encryption_info(self):
        """Gets the encryption_info of this Node.


        :return: The encryption_info of this Node.
        :rtype: EncryptionInfo
        """
        return self._encryption_info

    @encryption_info.setter
    def encryption_info(self, encryption_info):
        """Sets the encryption_info of this Node.


        :param encryption_info: The encryption_info of this Node.
        :type encryption_info: EncryptionInfo
        """

        self._encryption_info = encryption_info

    @property
    def expire_at(self):
        """Gets the expire_at of this Node.

        Expiration date

        :return: The expire_at of this Node.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Node.

        Expiration date

        :param expire_at: The expire_at of this Node.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def file_type(self):
        """Gets the file_type of this Node.

        File type / extension (for files only)

        :return: The file_type of this Node.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this Node.

        File type / extension (for files only)

        :param file_type: The file_type of this Node.
        :type file_type: str
        """

        self._file_type = file_type

    @property
    def has_activities_log(self):
        """Gets the has_activities_log of this Node.

        Is activities log active (for rooms only)

        :return: The has_activities_log of this Node.
        :rtype: bool
        """
        return self._has_activities_log

    @has_activities_log.setter
    def has_activities_log(self, has_activities_log):
        """Sets the has_activities_log of this Node.

        Is activities log active (for rooms only)

        :param has_activities_log: The has_activities_log of this Node.
        :type has_activities_log: bool
        """

        self._has_activities_log = has_activities_log

    @property
    def hash(self):
        """Gets the hash of this Node.

        MD5 hash of file

        :return: The hash of this Node.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Node.

        MD5 hash of file

        :param hash: The hash of this Node.
        :type hash: str
        """

        self._hash = hash

    @property
    def id(self):
        """Gets the id of this Node.

        Node ID

        :return: The id of this Node.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Node.

        Node ID

        :param id: The id of this Node.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def inherit_permissions(self):
        """Gets the inherit_permissions of this Node.

        Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)

        :return: The inherit_permissions of this Node.
        :rtype: bool
        """
        return self._inherit_permissions

    @inherit_permissions.setter
    def inherit_permissions(self, inherit_permissions):
        """Sets the inherit_permissions of this Node.

        Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)

        :param inherit_permissions: The inherit_permissions of this Node.
        :type inherit_permissions: bool
        """

        self._inherit_permissions = inherit_permissions

    @property
    def is_browsable(self):
        """Gets the is_browsable of this Node.

        &#128640; Since v4.11.0  Determines whether node is browsable by client (for rooms only)

        :return: The is_browsable of this Node.
        :rtype: bool
        """
        return self._is_browsable

    @is_browsable.setter
    def is_browsable(self, is_browsable):
        """Sets the is_browsable of this Node.

        &#128640; Since v4.11.0  Determines whether node is browsable by client (for rooms only)

        :param is_browsable: The is_browsable of this Node.
        :type is_browsable: bool
        """

        self._is_browsable = is_browsable

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this Node.

        Encryption state

        :return: The is_encrypted of this Node.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this Node.

        Encryption state

        :param is_encrypted: The is_encrypted of this Node.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_favorite(self):
        """Gets the is_favorite of this Node.

        Node is marked as favorite (for rooms / folders only)

        :return: The is_favorite of this Node.
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this Node.

        Node is marked as favorite (for rooms / folders only)

        :param is_favorite: The is_favorite of this Node.
        :type is_favorite: bool
        """

        self._is_favorite = is_favorite

    @property
    def media_token(self):
        """Gets the media_token of this Node.

        Media server media token

        :return: The media_token of this Node.
        :rtype: str
        """
        return self._media_token

    @media_token.setter
    def media_token(self, media_token):
        """Sets the media_token of this Node.

        Media server media token

        :param media_token: The media_token of this Node.
        :type media_token: str
        """

        self._media_token = media_token

    @property
    def media_type(self):
        """Gets the media_type of this Node.

        File media type (for files only)

        :return: The media_type of this Node.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Node.

        File media type (for files only)

        :param media_type: The media_type of this Node.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def name(self):
        """Gets the name of this Node.

        Name

        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.

        Name

        :param name: The name of this Node.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this Node.

        User notes

        :return: The notes of this Node.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Node.

        User notes

        :param notes: The notes of this Node.
        :type notes: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this Node.

        Parent node ID (room or folder)

        :return: The parent_id of this Node.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Node.

        Parent node ID (room or folder)

        :param parent_id: The parent_id of this Node.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def parent_path(self):
        """Gets the parent_path of this Node.

        Parent node path  `/` if node is a root node (room)

        :return: The parent_path of this Node.
        :rtype: str
        """
        return self._parent_path

    @parent_path.setter
    def parent_path(self, parent_path):
        """Sets the parent_path of this Node.

        Parent node path  `/` if node is a root node (room)

        :param parent_path: The parent_path of this Node.
        :type parent_path: str
        """

        self._parent_path = parent_path

    @property
    def permissions(self):
        """Gets the permissions of this Node.


        :return: The permissions of this Node.
        :rtype: NodePermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Node.


        :param permissions: The permissions of this Node.
        :type permissions: NodePermissions
        """

        self._permissions = permissions

    @property
    def quota(self):
        """Gets the quota of this Node.

        Quota in byte

        :return: The quota of this Node.
        :rtype: int
        """
        return self._quota

    @quota.setter
    def quota(self, quota):
        """Sets the quota of this Node.

        Quota in byte

        :param quota: The quota of this Node.
        :type quota: int
        """

        self._quota = quota

    @property
    def recycle_bin_retention_period(self):
        """Gets the recycle_bin_retention_period of this Node.

        Retention period for deleted nodes in days

        :return: The recycle_bin_retention_period of this Node.
        :rtype: int
        """
        return self._recycle_bin_retention_period

    @recycle_bin_retention_period.setter
    def recycle_bin_retention_period(self, recycle_bin_retention_period):
        """Sets the recycle_bin_retention_period of this Node.

        Retention period for deleted nodes in days

        :param recycle_bin_retention_period: The recycle_bin_retention_period of this Node.
        :type recycle_bin_retention_period: int
        """
        if recycle_bin_retention_period is not None and recycle_bin_retention_period > 9999:
            raise ValueError("Invalid value for `recycle_bin_retention_period`, must be a value less than or equal to `9999`")
        if recycle_bin_retention_period is not None and recycle_bin_retention_period < 0:
            raise ValueError("Invalid value for `recycle_bin_retention_period`, must be a value greater than or equal to `0`")

        self._recycle_bin_retention_period = recycle_bin_retention_period

    @property
    def reference_id(self):
        """Gets the reference_id of this Node.

        &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file

        :return: The reference_id of this Node.
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this Node.

        &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file

        :param reference_id: The reference_id of this Node.
        :type reference_id: int
        """

        self._reference_id = reference_id

    @property
    def size(self):
        """Gets the size of this Node.

        Node size in byte

        :return: The size of this Node.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Node.

        Node size in byte

        :param size: The size of this Node.
        :type size: int
        """

        self._size = size

    @property
    def timestamp_creation(self):
        """Gets the timestamp_creation of this Node.

        &#128640; Since v4.22.0  Time the node was created on external file system

        :return: The timestamp_creation of this Node.
        :rtype: datetime
        """
        return self._timestamp_creation

    @timestamp_creation.setter
    def timestamp_creation(self, timestamp_creation):
        """Sets the timestamp_creation of this Node.

        &#128640; Since v4.22.0  Time the node was created on external file system

        :param timestamp_creation: The timestamp_creation of this Node.
        :type timestamp_creation: datetime
        """

        self._timestamp_creation = timestamp_creation

    @property
    def timestamp_modification(self):
        """Gets the timestamp_modification of this Node.

        &#128640; Since v4.22.0  Time the content of a node was last modified on external file system

        :return: The timestamp_modification of this Node.
        :rtype: datetime
        """
        return self._timestamp_modification

    @timestamp_modification.setter
    def timestamp_modification(self, timestamp_modification):
        """Sets the timestamp_modification of this Node.

        &#128640; Since v4.22.0  Time the content of a node was last modified on external file system

        :param timestamp_modification: The timestamp_modification of this Node.
        :type timestamp_modification: datetime
        """

        self._timestamp_modification = timestamp_modification

    @property
    def type(self):
        """Gets the type of this Node.

        Node type

        :return: The type of this Node.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Node.

        Node type

        :param type: The type of this Node.
        :type type: str
        """
        allowed_values = ["room", "folder", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Node.

        Modification date

        :return: The updated_at of this Node.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Node.

        Modification date

        :param updated_at: The updated_at of this Node.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Node.


        :return: The updated_by of this Node.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Node.


        :param updated_by: The updated_by of this Node.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by
