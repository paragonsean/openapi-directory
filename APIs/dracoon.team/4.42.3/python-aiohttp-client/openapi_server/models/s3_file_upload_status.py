# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_response import ErrorResponse
from openapi_server.models.node import Node
from openapi_server import util


class S3FileUploadStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_details: ErrorResponse=None, node: Node=None, status: str=None):
        """S3FileUploadStatus - a model defined in OpenAPI

        :param error_details: The error_details of this S3FileUploadStatus.
        :param node: The node of this S3FileUploadStatus.
        :param status: The status of this S3FileUploadStatus.
        """
        self.openapi_types = {
            'error_details': ErrorResponse,
            'node': Node,
            'status': str
        }

        self.attribute_map = {
            'error_details': 'errorDetails',
            'node': 'node',
            'status': 'status'
        }

        self._error_details = error_details
        self._node = node
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3FileUploadStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3FileUploadStatus of this S3FileUploadStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_details(self):
        """Gets the error_details of this S3FileUploadStatus.


        :return: The error_details of this S3FileUploadStatus.
        :rtype: ErrorResponse
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this S3FileUploadStatus.


        :param error_details: The error_details of this S3FileUploadStatus.
        :type error_details: ErrorResponse
        """

        self._error_details = error_details

    @property
    def node(self):
        """Gets the node of this S3FileUploadStatus.


        :return: The node of this S3FileUploadStatus.
        :rtype: Node
        """
        return self._node

    @node.setter
    def node(self, node):
        """Sets the node of this S3FileUploadStatus.


        :param node: The node of this S3FileUploadStatus.
        :type node: Node
        """

        self._node = node

    @property
    def status(self):
        """Gets the status of this S3FileUploadStatus.

        S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload

        :return: The status of this S3FileUploadStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this S3FileUploadStatus.

        S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload

        :param status: The status of this S3FileUploadStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
