# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pending_assignment_data import PendingAssignmentData
from openapi_server.models.range import Range
from openapi_server import util


class PendingAssignmentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[PendingAssignmentData]=None, range: Range=None):
        """PendingAssignmentList - a model defined in OpenAPI

        :param items: The items of this PendingAssignmentList.
        :param range: The range of this PendingAssignmentList.
        """
        self.openapi_types = {
            'items': List[PendingAssignmentData],
            'range': Range
        }

        self.attribute_map = {
            'items': 'items',
            'range': 'range'
        }

        self._items = items
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingAssignmentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PendingAssignmentList of this PendingAssignmentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this PendingAssignmentList.

        List of pending assignment information

        :return: The items of this PendingAssignmentList.
        :rtype: List[PendingAssignmentData]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this PendingAssignmentList.

        List of pending assignment information

        :param items: The items of this PendingAssignmentList.
        :type items: List[PendingAssignmentData]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def range(self):
        """Gets the range of this PendingAssignmentList.


        :return: The range of this PendingAssignmentList.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this PendingAssignmentList.


        :param range: The range of this PendingAssignmentList.
        :type range: Range
        """

        self._range = range
