# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MfaTotpConfirmationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, otp: str=None):
        """MfaTotpConfirmationRequest - a model defined in OpenAPI

        :param id: The id of this MfaTotpConfirmationRequest.
        :param otp: The otp of this MfaTotpConfirmationRequest.
        """
        self.openapi_types = {
            'id': int,
            'otp': str
        }

        self.attribute_map = {
            'id': 'id',
            'otp': 'otp'
        }

        self._id = id
        self._otp = otp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MfaTotpConfirmationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MfaTotpConfirmationRequest of this MfaTotpConfirmationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this MfaTotpConfirmationRequest.

        ID

        :return: The id of this MfaTotpConfirmationRequest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MfaTotpConfirmationRequest.

        ID

        :param id: The id of this MfaTotpConfirmationRequest.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def otp(self):
        """Gets the otp of this MfaTotpConfirmationRequest.

        Generated valid OTP

        :return: The otp of this MfaTotpConfirmationRequest.
        :rtype: str
        """
        return self._otp

    @otp.setter
    def otp(self, otp):
        """Sets the otp of this MfaTotpConfirmationRequest.

        Generated valid OTP

        :param otp: The otp of this MfaTotpConfirmationRequest.
        :type otp: str
        """
        if otp is None:
            raise ValueError("Invalid value for `otp`, must not be `None`")

        self._otp = otp
