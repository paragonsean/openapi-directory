# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_attributes import CustomerAttributes
from openapi_server import util


class UpdateCustomerResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_code: str=None, company_name: str=None, created_at: datetime=None, customer_attributes: CustomerAttributes=None, customer_contract_type: str=None, customer_uuid: str=None, id: int=None, is_locked: bool=False, lock_status: bool=False, provider_customer_id: str=None, quota_max: int=None, trial_days: int=None, updated_at: datetime=None, user_max: int=None, webhooks_max: int=None):
        """UpdateCustomerResponse - a model defined in OpenAPI

        :param activation_code: The activation_code of this UpdateCustomerResponse.
        :param company_name: The company_name of this UpdateCustomerResponse.
        :param created_at: The created_at of this UpdateCustomerResponse.
        :param customer_attributes: The customer_attributes of this UpdateCustomerResponse.
        :param customer_contract_type: The customer_contract_type of this UpdateCustomerResponse.
        :param customer_uuid: The customer_uuid of this UpdateCustomerResponse.
        :param id: The id of this UpdateCustomerResponse.
        :param is_locked: The is_locked of this UpdateCustomerResponse.
        :param lock_status: The lock_status of this UpdateCustomerResponse.
        :param provider_customer_id: The provider_customer_id of this UpdateCustomerResponse.
        :param quota_max: The quota_max of this UpdateCustomerResponse.
        :param trial_days: The trial_days of this UpdateCustomerResponse.
        :param updated_at: The updated_at of this UpdateCustomerResponse.
        :param user_max: The user_max of this UpdateCustomerResponse.
        :param webhooks_max: The webhooks_max of this UpdateCustomerResponse.
        """
        self.openapi_types = {
            'activation_code': str,
            'company_name': str,
            'created_at': datetime,
            'customer_attributes': CustomerAttributes,
            'customer_contract_type': str,
            'customer_uuid': str,
            'id': int,
            'is_locked': bool,
            'lock_status': bool,
            'provider_customer_id': str,
            'quota_max': int,
            'trial_days': int,
            'updated_at': datetime,
            'user_max': int,
            'webhooks_max': int
        }

        self.attribute_map = {
            'activation_code': 'activationCode',
            'company_name': 'companyName',
            'created_at': 'createdAt',
            'customer_attributes': 'customerAttributes',
            'customer_contract_type': 'customerContractType',
            'customer_uuid': 'customerUuid',
            'id': 'id',
            'is_locked': 'isLocked',
            'lock_status': 'lockStatus',
            'provider_customer_id': 'providerCustomerId',
            'quota_max': 'quotaMax',
            'trial_days': 'trialDays',
            'updated_at': 'updatedAt',
            'user_max': 'userMax',
            'webhooks_max': 'webhooksMax'
        }

        self._activation_code = activation_code
        self._company_name = company_name
        self._created_at = created_at
        self._customer_attributes = customer_attributes
        self._customer_contract_type = customer_contract_type
        self._customer_uuid = customer_uuid
        self._id = id
        self._is_locked = is_locked
        self._lock_status = lock_status
        self._provider_customer_id = provider_customer_id
        self._quota_max = quota_max
        self._trial_days = trial_days
        self._updated_at = updated_at
        self._user_max = user_max
        self._webhooks_max = webhooks_max

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCustomerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCustomerResponse of this UpdateCustomerResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_code(self):
        """Gets the activation_code of this UpdateCustomerResponse.

        &#128679; Deprecated since v4.8.0  Customer activation code string:  * valid only for types `free` and `demo`  * for `pay` customers it is empty

        :return: The activation_code of this UpdateCustomerResponse.
        :rtype: str
        """
        return self._activation_code

    @activation_code.setter
    def activation_code(self, activation_code):
        """Sets the activation_code of this UpdateCustomerResponse.

        &#128679; Deprecated since v4.8.0  Customer activation code string:  * valid only for types `free` and `demo`  * for `pay` customers it is empty

        :param activation_code: The activation_code of this UpdateCustomerResponse.
        :type activation_code: str
        """

        self._activation_code = activation_code

    @property
    def company_name(self):
        """Gets the company_name of this UpdateCustomerResponse.

        Company name

        :return: The company_name of this UpdateCustomerResponse.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this UpdateCustomerResponse.

        Company name

        :param company_name: The company_name of this UpdateCustomerResponse.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def created_at(self):
        """Gets the created_at of this UpdateCustomerResponse.

        Creation date

        :return: The created_at of this UpdateCustomerResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UpdateCustomerResponse.

        Creation date

        :param created_at: The created_at of this UpdateCustomerResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def customer_attributes(self):
        """Gets the customer_attributes of this UpdateCustomerResponse.


        :return: The customer_attributes of this UpdateCustomerResponse.
        :rtype: CustomerAttributes
        """
        return self._customer_attributes

    @customer_attributes.setter
    def customer_attributes(self, customer_attributes):
        """Sets the customer_attributes of this UpdateCustomerResponse.


        :param customer_attributes: The customer_attributes of this UpdateCustomerResponse.
        :type customer_attributes: CustomerAttributes
        """

        self._customer_attributes = customer_attributes

    @property
    def customer_contract_type(self):
        """Gets the customer_contract_type of this UpdateCustomerResponse.

        Customer type

        :return: The customer_contract_type of this UpdateCustomerResponse.
        :rtype: str
        """
        return self._customer_contract_type

    @customer_contract_type.setter
    def customer_contract_type(self, customer_contract_type):
        """Sets the customer_contract_type of this UpdateCustomerResponse.

        Customer type

        :param customer_contract_type: The customer_contract_type of this UpdateCustomerResponse.
        :type customer_contract_type: str
        """
        allowed_values = ["demo", "free", "pay"]  # noqa: E501
        if customer_contract_type not in allowed_values:
            raise ValueError(
                "Invalid value for `customer_contract_type` ({0}), must be one of {1}"
                .format(customer_contract_type, allowed_values)
            )

        self._customer_contract_type = customer_contract_type

    @property
    def customer_uuid(self):
        """Gets the customer_uuid of this UpdateCustomerResponse.

        &#128640; Since v4.21.0  Customer UUID

        :return: The customer_uuid of this UpdateCustomerResponse.
        :rtype: str
        """
        return self._customer_uuid

    @customer_uuid.setter
    def customer_uuid(self, customer_uuid):
        """Sets the customer_uuid of this UpdateCustomerResponse.

        &#128640; Since v4.21.0  Customer UUID

        :param customer_uuid: The customer_uuid of this UpdateCustomerResponse.
        :type customer_uuid: str
        """
        if customer_uuid is None:
            raise ValueError("Invalid value for `customer_uuid`, must not be `None`")

        self._customer_uuid = customer_uuid

    @property
    def id(self):
        """Gets the id of this UpdateCustomerResponse.

        Unique identifier for the customer

        :return: The id of this UpdateCustomerResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateCustomerResponse.

        Unique identifier for the customer

        :param id: The id of this UpdateCustomerResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_locked(self):
        """Gets the is_locked of this UpdateCustomerResponse.

        Customer is locked:  * `false` - unlocked  * `true` - locked    All users of this customer will be blocked and can not login anymore.

        :return: The is_locked of this UpdateCustomerResponse.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this UpdateCustomerResponse.

        Customer is locked:  * `false` - unlocked  * `true` - locked    All users of this customer will be blocked and can not login anymore.

        :param is_locked: The is_locked of this UpdateCustomerResponse.
        :type is_locked: bool
        """

        self._is_locked = is_locked

    @property
    def lock_status(self):
        """Gets the lock_status of this UpdateCustomerResponse.

        &#128679; Deprecated since v4.7.0  Customer lock status:  * `false` - unlocked  * `true` - locked    Please use `isLocked` instead.  All users of this customer will be blocked and can not login anymore.

        :return: The lock_status of this UpdateCustomerResponse.
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this UpdateCustomerResponse.

        &#128679; Deprecated since v4.7.0  Customer lock status:  * `false` - unlocked  * `true` - locked    Please use `isLocked` instead.  All users of this customer will be blocked and can not login anymore.

        :param lock_status: The lock_status of this UpdateCustomerResponse.
        :type lock_status: bool
        """
        if lock_status is None:
            raise ValueError("Invalid value for `lock_status`, must not be `None`")

        self._lock_status = lock_status

    @property
    def provider_customer_id(self):
        """Gets the provider_customer_id of this UpdateCustomerResponse.

        Provider customer ID

        :return: The provider_customer_id of this UpdateCustomerResponse.
        :rtype: str
        """
        return self._provider_customer_id

    @provider_customer_id.setter
    def provider_customer_id(self, provider_customer_id):
        """Sets the provider_customer_id of this UpdateCustomerResponse.

        Provider customer ID

        :param provider_customer_id: The provider_customer_id of this UpdateCustomerResponse.
        :type provider_customer_id: str
        """

        self._provider_customer_id = provider_customer_id

    @property
    def quota_max(self):
        """Gets the quota_max of this UpdateCustomerResponse.

        Maximal disc space which can be allocated by customer in bytes. -1 for unlimited

        :return: The quota_max of this UpdateCustomerResponse.
        :rtype: int
        """
        return self._quota_max

    @quota_max.setter
    def quota_max(self, quota_max):
        """Sets the quota_max of this UpdateCustomerResponse.

        Maximal disc space which can be allocated by customer in bytes. -1 for unlimited

        :param quota_max: The quota_max of this UpdateCustomerResponse.
        :type quota_max: int
        """
        if quota_max is None:
            raise ValueError("Invalid value for `quota_max`, must not be `None`")

        self._quota_max = quota_max

    @property
    def trial_days(self):
        """Gets the trial_days of this UpdateCustomerResponse.

        Number of days left for trial period (relevant only for type `demo`)  (not used)

        :return: The trial_days of this UpdateCustomerResponse.
        :rtype: int
        """
        return self._trial_days

    @trial_days.setter
    def trial_days(self, trial_days):
        """Sets the trial_days of this UpdateCustomerResponse.

        Number of days left for trial period (relevant only for type `demo`)  (not used)

        :param trial_days: The trial_days of this UpdateCustomerResponse.
        :type trial_days: int
        """

        self._trial_days = trial_days

    @property
    def updated_at(self):
        """Gets the updated_at of this UpdateCustomerResponse.

        Modification date

        :return: The updated_at of this UpdateCustomerResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UpdateCustomerResponse.

        Modification date

        :param updated_at: The updated_at of this UpdateCustomerResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_max(self):
        """Gets the user_max of this UpdateCustomerResponse.

        Maximal number of users

        :return: The user_max of this UpdateCustomerResponse.
        :rtype: int
        """
        return self._user_max

    @user_max.setter
    def user_max(self, user_max):
        """Sets the user_max of this UpdateCustomerResponse.

        Maximal number of users

        :param user_max: The user_max of this UpdateCustomerResponse.
        :type user_max: int
        """
        if user_max is None:
            raise ValueError("Invalid value for `user_max`, must not be `None`")

        self._user_max = user_max

    @property
    def webhooks_max(self):
        """Gets the webhooks_max of this UpdateCustomerResponse.

        &#128640; Since v4.19.0  Maximal number of webhooks

        :return: The webhooks_max of this UpdateCustomerResponse.
        :rtype: int
        """
        return self._webhooks_max

    @webhooks_max.setter
    def webhooks_max(self, webhooks_max):
        """Sets the webhooks_max of this UpdateCustomerResponse.

        &#128640; Since v4.19.0  Maximal number of webhooks

        :param webhooks_max: The webhooks_max of this UpdateCustomerResponse.
        :type webhooks_max: int
        """

        self._webhooks_max = webhooks_max
