# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_scope import NotificationScope
from openapi_server import util


class NotificationScopeList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[NotificationScope]=None):
        """NotificationScopeList - a model defined in OpenAPI

        :param items: The items of this NotificationScopeList.
        """
        self.openapi_types = {
            'items': List[NotificationScope]
        }

        self.attribute_map = {
            'items': 'items'
        }

        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationScopeList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationScopeList of this NotificationScopeList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this NotificationScopeList.

        List of notification scopes

        :return: The items of this NotificationScopeList.
        :rtype: List[NotificationScope]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this NotificationScopeList.

        List of notification scopes

        :param items: The items of this NotificationScopeList.
        :type items: List[NotificationScope]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items
