# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FailoverServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failover_enabled: bool=None, failover_ip_address: str=None, failover_port: int=None):
        """FailoverServer - a model defined in OpenAPI

        :param failover_enabled: The failover_enabled of this FailoverServer.
        :param failover_ip_address: The failover_ip_address of this FailoverServer.
        :param failover_port: The failover_port of this FailoverServer.
        """
        self.openapi_types = {
            'failover_enabled': bool,
            'failover_ip_address': str,
            'failover_port': int
        }

        self.attribute_map = {
            'failover_enabled': 'failoverEnabled',
            'failover_ip_address': 'failoverIpAddress',
            'failover_port': 'failoverPort'
        }

        self._failover_enabled = failover_enabled
        self._failover_ip_address = failover_ip_address
        self._failover_port = failover_port

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FailoverServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FailoverServer of this FailoverServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failover_enabled(self):
        """Gets the failover_enabled of this FailoverServer.

        RADIUS Failover Server is active

        :return: The failover_enabled of this FailoverServer.
        :rtype: bool
        """
        return self._failover_enabled

    @failover_enabled.setter
    def failover_enabled(self, failover_enabled):
        """Sets the failover_enabled of this FailoverServer.

        RADIUS Failover Server is active

        :param failover_enabled: The failover_enabled of this FailoverServer.
        :type failover_enabled: bool
        """
        if failover_enabled is None:
            raise ValueError("Invalid value for `failover_enabled`, must not be `None`")

        self._failover_enabled = failover_enabled

    @property
    def failover_ip_address(self):
        """Gets the failover_ip_address of this FailoverServer.

        RADIUS Failover Server IP Address  Required if failover server is enabled.

        :return: The failover_ip_address of this FailoverServer.
        :rtype: str
        """
        return self._failover_ip_address

    @failover_ip_address.setter
    def failover_ip_address(self, failover_ip_address):
        """Sets the failover_ip_address of this FailoverServer.

        RADIUS Failover Server IP Address  Required if failover server is enabled.

        :param failover_ip_address: The failover_ip_address of this FailoverServer.
        :type failover_ip_address: str
        """
        if failover_ip_address is None:
            raise ValueError("Invalid value for `failover_ip_address`, must not be `None`")

        self._failover_ip_address = failover_ip_address

    @property
    def failover_port(self):
        """Gets the failover_port of this FailoverServer.

        RADIUS Failover Server Port  Required if failover server is enabled.

        :return: The failover_port of this FailoverServer.
        :rtype: int
        """
        return self._failover_port

    @failover_port.setter
    def failover_port(self, failover_port):
        """Sets the failover_port of this FailoverServer.

        RADIUS Failover Server Port  Required if failover server is enabled.

        :param failover_port: The failover_port of this FailoverServer.
        :type failover_port: int
        """
        if failover_port is None:
            raise ValueError("Invalid value for `failover_port`, must not be `None`")

        self._failover_port = failover_port
