# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_list import RoleList
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class Group(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cnt_users: int=None, created_at: datetime=None, created_by: UserInfo=None, expire_at: datetime=None, group_roles: RoleList=None, id: int=None, name: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """Group - a model defined in OpenAPI

        :param cnt_users: The cnt_users of this Group.
        :param created_at: The created_at of this Group.
        :param created_by: The created_by of this Group.
        :param expire_at: The expire_at of this Group.
        :param group_roles: The group_roles of this Group.
        :param id: The id of this Group.
        :param name: The name of this Group.
        :param updated_at: The updated_at of this Group.
        :param updated_by: The updated_by of this Group.
        """
        self.openapi_types = {
            'cnt_users': int,
            'created_at': datetime,
            'created_by': UserInfo,
            'expire_at': datetime,
            'group_roles': RoleList,
            'id': int,
            'name': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'cnt_users': 'cntUsers',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'expire_at': 'expireAt',
            'group_roles': 'groupRoles',
            'id': 'id',
            'name': 'name',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._cnt_users = cnt_users
        self._created_at = created_at
        self._created_by = created_by
        self._expire_at = expire_at
        self._group_roles = group_roles
        self._id = id
        self._name = name
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Group':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Group of this Group.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cnt_users(self):
        """Gets the cnt_users of this Group.

        Amount of users

        :return: The cnt_users of this Group.
        :rtype: int
        """
        return self._cnt_users

    @cnt_users.setter
    def cnt_users(self, cnt_users):
        """Sets the cnt_users of this Group.

        Amount of users

        :param cnt_users: The cnt_users of this Group.
        :type cnt_users: int
        """
        if cnt_users is None:
            raise ValueError("Invalid value for `cnt_users`, must not be `None`")

        self._cnt_users = cnt_users

    @property
    def created_at(self):
        """Gets the created_at of this Group.

        Creation date

        :return: The created_at of this Group.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Group.

        Creation date

        :param created_at: The created_at of this Group.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Group.


        :return: The created_by of this Group.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Group.


        :param created_by: The created_by of this Group.
        :type created_by: UserInfo
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def expire_at(self):
        """Gets the expire_at of this Group.

        Expiration date

        :return: The expire_at of this Group.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Group.

        Expiration date

        :param expire_at: The expire_at of this Group.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def group_roles(self):
        """Gets the group_roles of this Group.


        :return: The group_roles of this Group.
        :rtype: RoleList
        """
        return self._group_roles

    @group_roles.setter
    def group_roles(self, group_roles):
        """Sets the group_roles of this Group.


        :param group_roles: The group_roles of this Group.
        :type group_roles: RoleList
        """

        self._group_roles = group_roles

    @property
    def id(self):
        """Gets the id of this Group.

        Unique identifier for the group

        :return: The id of this Group.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Group.

        Unique identifier for the group

        :param id: The id of this Group.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Group.

        Group name

        :return: The name of this Group.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Group.

        Group name

        :param name: The name of this Group.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this Group.

        Modification date

        :return: The updated_at of this Group.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Group.

        Modification date

        :param updated_at: The updated_at of this Group.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Group.


        :return: The updated_by of this Group.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Group.


        :param updated_by: The updated_by of this Group.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by
