# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_key import FileKey
from openapi_server.models.s3_file_upload_part import S3FileUploadPart
from openapi_server import util


class CompleteS3FileUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_key: FileKey=None, file_name: str=None, keep_share_links: bool=False, parts: List[S3FileUploadPart]=None, resolution_strategy: str='autorename'):
        """CompleteS3FileUploadRequest - a model defined in OpenAPI

        :param file_key: The file_key of this CompleteS3FileUploadRequest.
        :param file_name: The file_name of this CompleteS3FileUploadRequest.
        :param keep_share_links: The keep_share_links of this CompleteS3FileUploadRequest.
        :param parts: The parts of this CompleteS3FileUploadRequest.
        :param resolution_strategy: The resolution_strategy of this CompleteS3FileUploadRequest.
        """
        self.openapi_types = {
            'file_key': FileKey,
            'file_name': str,
            'keep_share_links': bool,
            'parts': List[S3FileUploadPart],
            'resolution_strategy': str
        }

        self.attribute_map = {
            'file_key': 'fileKey',
            'file_name': 'fileName',
            'keep_share_links': 'keepShareLinks',
            'parts': 'parts',
            'resolution_strategy': 'resolutionStrategy'
        }

        self._file_key = file_key
        self._file_name = file_name
        self._keep_share_links = keep_share_links
        self._parts = parts
        self._resolution_strategy = resolution_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteS3FileUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteS3FileUploadRequest of this CompleteS3FileUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_key(self):
        """Gets the file_key of this CompleteS3FileUploadRequest.


        :return: The file_key of this CompleteS3FileUploadRequest.
        :rtype: FileKey
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this CompleteS3FileUploadRequest.


        :param file_key: The file_key of this CompleteS3FileUploadRequest.
        :type file_key: FileKey
        """

        self._file_key = file_key

    @property
    def file_name(self):
        """Gets the file_name of this CompleteS3FileUploadRequest.

        New file name to store with

        :return: The file_name of this CompleteS3FileUploadRequest.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CompleteS3FileUploadRequest.

        New file name to store with

        :param file_name: The file_name of this CompleteS3FileUploadRequest.
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def keep_share_links(self):
        """Gets the keep_share_links of this CompleteS3FileUploadRequest.

        Preserve Download Share Links and point them to the new node.

        :return: The keep_share_links of this CompleteS3FileUploadRequest.
        :rtype: bool
        """
        return self._keep_share_links

    @keep_share_links.setter
    def keep_share_links(self, keep_share_links):
        """Sets the keep_share_links of this CompleteS3FileUploadRequest.

        Preserve Download Share Links and point them to the new node.

        :param keep_share_links: The keep_share_links of this CompleteS3FileUploadRequest.
        :type keep_share_links: bool
        """

        self._keep_share_links = keep_share_links

    @property
    def parts(self):
        """Gets the parts of this CompleteS3FileUploadRequest.

        List of S3 file upload parts

        :return: The parts of this CompleteS3FileUploadRequest.
        :rtype: List[S3FileUploadPart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this CompleteS3FileUploadRequest.

        List of S3 file upload parts

        :param parts: The parts of this CompleteS3FileUploadRequest.
        :type parts: List[S3FileUploadPart]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")

        self._parts = parts

    @property
    def resolution_strategy(self):
        """Gets the resolution_strategy of this CompleteS3FileUploadRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :return: The resolution_strategy of this CompleteS3FileUploadRequest.
        :rtype: str
        """
        return self._resolution_strategy

    @resolution_strategy.setter
    def resolution_strategy(self, resolution_strategy):
        """Sets the resolution_strategy of this CompleteS3FileUploadRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :param resolution_strategy: The resolution_strategy of this CompleteS3FileUploadRequest.
        :type resolution_strategy: str
        """
        allowed_values = ["autorename", "overwrite", "fail"]  # noqa: E501
        if resolution_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_strategy` ({0}), must be one of {1}"
                .format(resolution_strategy, allowed_values)
            )

        self._resolution_strategy = resolution_strategy
