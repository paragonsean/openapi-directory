# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RestoreDeletedNodesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deleted_node_ids: List[int]=None, keep_share_links: bool=False, parent_id: int=None, resolution_strategy: str='autorename'):
        """RestoreDeletedNodesRequest - a model defined in OpenAPI

        :param deleted_node_ids: The deleted_node_ids of this RestoreDeletedNodesRequest.
        :param keep_share_links: The keep_share_links of this RestoreDeletedNodesRequest.
        :param parent_id: The parent_id of this RestoreDeletedNodesRequest.
        :param resolution_strategy: The resolution_strategy of this RestoreDeletedNodesRequest.
        """
        self.openapi_types = {
            'deleted_node_ids': List[int],
            'keep_share_links': bool,
            'parent_id': int,
            'resolution_strategy': str
        }

        self.attribute_map = {
            'deleted_node_ids': 'deletedNodeIds',
            'keep_share_links': 'keepShareLinks',
            'parent_id': 'parentId',
            'resolution_strategy': 'resolutionStrategy'
        }

        self._deleted_node_ids = deleted_node_ids
        self._keep_share_links = keep_share_links
        self._parent_id = parent_id
        self._resolution_strategy = resolution_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestoreDeletedNodesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestoreDeletedNodesRequest of this RestoreDeletedNodesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deleted_node_ids(self):
        """Gets the deleted_node_ids of this RestoreDeletedNodesRequest.

        List of deleted node IDs

        :return: The deleted_node_ids of this RestoreDeletedNodesRequest.
        :rtype: List[int]
        """
        return self._deleted_node_ids

    @deleted_node_ids.setter
    def deleted_node_ids(self, deleted_node_ids):
        """Sets the deleted_node_ids of this RestoreDeletedNodesRequest.

        List of deleted node IDs

        :param deleted_node_ids: The deleted_node_ids of this RestoreDeletedNodesRequest.
        :type deleted_node_ids: List[int]
        """
        if deleted_node_ids is None:
            raise ValueError("Invalid value for `deleted_node_ids`, must not be `None`")

        self._deleted_node_ids = deleted_node_ids

    @property
    def keep_share_links(self):
        """Gets the keep_share_links of this RestoreDeletedNodesRequest.

        Preserve Download Share Links and point them to the new node.

        :return: The keep_share_links of this RestoreDeletedNodesRequest.
        :rtype: bool
        """
        return self._keep_share_links

    @keep_share_links.setter
    def keep_share_links(self, keep_share_links):
        """Sets the keep_share_links of this RestoreDeletedNodesRequest.

        Preserve Download Share Links and point them to the new node.

        :param keep_share_links: The keep_share_links of this RestoreDeletedNodesRequest.
        :type keep_share_links: bool
        """

        self._keep_share_links = keep_share_links

    @property
    def parent_id(self):
        """Gets the parent_id of this RestoreDeletedNodesRequest.

        Node parent ID  (default: previous parent ID)

        :return: The parent_id of this RestoreDeletedNodesRequest.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this RestoreDeletedNodesRequest.

        Node parent ID  (default: previous parent ID)

        :param parent_id: The parent_id of this RestoreDeletedNodesRequest.
        :type parent_id: int
        """

        self._parent_id = parent_id

    @property
    def resolution_strategy(self):
        """Gets the resolution_strategy of this RestoreDeletedNodesRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :return: The resolution_strategy of this RestoreDeletedNodesRequest.
        :rtype: str
        """
        return self._resolution_strategy

    @resolution_strategy.setter
    def resolution_strategy(self, resolution_strategy):
        """Sets the resolution_strategy of this RestoreDeletedNodesRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :param resolution_strategy: The resolution_strategy of this RestoreDeletedNodesRequest.
        :type resolution_strategy: str
        """
        allowed_values = ["autorename", "overwrite", "fail"]  # noqa: E501
        if resolution_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_strategy` ({0}), must be one of {1}"
                .format(resolution_strategy, allowed_values)
            )

        self._resolution_strategy = resolution_strategy
