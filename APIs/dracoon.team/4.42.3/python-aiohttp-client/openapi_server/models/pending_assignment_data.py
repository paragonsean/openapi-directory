# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_info import GroupInfo
from openapi_server.models.pending_group_data import PendingGroupData
from openapi_server.models.pending_user_data import PendingUserData
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class PendingAssignmentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_info: GroupInfo=None, pending_group_data: PendingGroupData=None, pending_user_data: PendingUserData=None, room_id: int=None, room_name: str=None, state: str=None, user_info: UserInfo=None):
        """PendingAssignmentData - a model defined in OpenAPI

        :param group_info: The group_info of this PendingAssignmentData.
        :param pending_group_data: The pending_group_data of this PendingAssignmentData.
        :param pending_user_data: The pending_user_data of this PendingAssignmentData.
        :param room_id: The room_id of this PendingAssignmentData.
        :param room_name: The room_name of this PendingAssignmentData.
        :param state: The state of this PendingAssignmentData.
        :param user_info: The user_info of this PendingAssignmentData.
        """
        self.openapi_types = {
            'group_info': GroupInfo,
            'pending_group_data': PendingGroupData,
            'pending_user_data': PendingUserData,
            'room_id': int,
            'room_name': str,
            'state': str,
            'user_info': UserInfo
        }

        self.attribute_map = {
            'group_info': 'groupInfo',
            'pending_group_data': 'pendingGroupData',
            'pending_user_data': 'pendingUserData',
            'room_id': 'roomId',
            'room_name': 'roomName',
            'state': 'state',
            'user_info': 'userInfo'
        }

        self._group_info = group_info
        self._pending_group_data = pending_group_data
        self._pending_user_data = pending_user_data
        self._room_id = room_id
        self._room_name = room_name
        self._state = state
        self._user_info = user_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingAssignmentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PendingAssignmentData of this PendingAssignmentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_info(self):
        """Gets the group_info of this PendingAssignmentData.


        :return: The group_info of this PendingAssignmentData.
        :rtype: GroupInfo
        """
        return self._group_info

    @group_info.setter
    def group_info(self, group_info):
        """Sets the group_info of this PendingAssignmentData.


        :param group_info: The group_info of this PendingAssignmentData.
        :type group_info: GroupInfo
        """
        if group_info is None:
            raise ValueError("Invalid value for `group_info`, must not be `None`")

        self._group_info = group_info

    @property
    def pending_group_data(self):
        """Gets the pending_group_data of this PendingAssignmentData.


        :return: The pending_group_data of this PendingAssignmentData.
        :rtype: PendingGroupData
        """
        return self._pending_group_data

    @pending_group_data.setter
    def pending_group_data(self, pending_group_data):
        """Sets the pending_group_data of this PendingAssignmentData.


        :param pending_group_data: The pending_group_data of this PendingAssignmentData.
        :type pending_group_data: PendingGroupData
        """
        if pending_group_data is None:
            raise ValueError("Invalid value for `pending_group_data`, must not be `None`")

        self._pending_group_data = pending_group_data

    @property
    def pending_user_data(self):
        """Gets the pending_user_data of this PendingAssignmentData.


        :return: The pending_user_data of this PendingAssignmentData.
        :rtype: PendingUserData
        """
        return self._pending_user_data

    @pending_user_data.setter
    def pending_user_data(self, pending_user_data):
        """Sets the pending_user_data of this PendingAssignmentData.


        :param pending_user_data: The pending_user_data of this PendingAssignmentData.
        :type pending_user_data: PendingUserData
        """
        if pending_user_data is None:
            raise ValueError("Invalid value for `pending_user_data`, must not be `None`")

        self._pending_user_data = pending_user_data

    @property
    def room_id(self):
        """Gets the room_id of this PendingAssignmentData.

        Room ID

        :return: The room_id of this PendingAssignmentData.
        :rtype: int
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this PendingAssignmentData.

        Room ID

        :param room_id: The room_id of this PendingAssignmentData.
        :type room_id: int
        """
        if room_id is None:
            raise ValueError("Invalid value for `room_id`, must not be `None`")

        self._room_id = room_id

    @property
    def room_name(self):
        """Gets the room_name of this PendingAssignmentData.

        Room name

        :return: The room_name of this PendingAssignmentData.
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this PendingAssignmentData.

        Room name

        :param room_name: The room_name of this PendingAssignmentData.
        :type room_name: str
        """
        if room_name is None:
            raise ValueError("Invalid value for `room_name`, must not be `None`")

        self._room_name = room_name

    @property
    def state(self):
        """Gets the state of this PendingAssignmentData.

        Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`

        :return: The state of this PendingAssignmentData.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PendingAssignmentData.

        Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`

        :param state: The state of this PendingAssignmentData.
        :type state: str
        """
        allowed_values = ["ACCEPTED", "DENIED", "WAITING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_info(self):
        """Gets the user_info of this PendingAssignmentData.


        :return: The user_info of this PendingAssignmentData.
        :rtype: UserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this PendingAssignmentData.


        :param user_info: The user_info of this PendingAssignmentData.
        :type user_info: UserInfo
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")

        self._user_info = user_info
