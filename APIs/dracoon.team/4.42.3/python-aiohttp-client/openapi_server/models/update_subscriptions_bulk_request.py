# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSubscriptionsBulkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_subscribed: bool=None, object_ids: List[int]=None):
        """UpdateSubscriptionsBulkRequest - a model defined in OpenAPI

        :param is_subscribed: The is_subscribed of this UpdateSubscriptionsBulkRequest.
        :param object_ids: The object_ids of this UpdateSubscriptionsBulkRequest.
        """
        self.openapi_types = {
            'is_subscribed': bool,
            'object_ids': List[int]
        }

        self.attribute_map = {
            'is_subscribed': 'isSubscribed',
            'object_ids': 'objectIds'
        }

        self._is_subscribed = is_subscribed
        self._object_ids = object_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSubscriptionsBulkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSubscriptionsBulkRequest of this UpdateSubscriptionsBulkRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_subscribed(self):
        """Gets the is_subscribed of this UpdateSubscriptionsBulkRequest.

        Creates or deletes a subscription on each item in an array of objects.

        :return: The is_subscribed of this UpdateSubscriptionsBulkRequest.
        :rtype: bool
        """
        return self._is_subscribed

    @is_subscribed.setter
    def is_subscribed(self, is_subscribed):
        """Sets the is_subscribed of this UpdateSubscriptionsBulkRequest.

        Creates or deletes a subscription on each item in an array of objects.

        :param is_subscribed: The is_subscribed of this UpdateSubscriptionsBulkRequest.
        :type is_subscribed: bool
        """
        if is_subscribed is None:
            raise ValueError("Invalid value for `is_subscribed`, must not be `None`")

        self._is_subscribed = is_subscribed

    @property
    def object_ids(self):
        """Gets the object_ids of this UpdateSubscriptionsBulkRequest.

        List of ids

        :return: The object_ids of this UpdateSubscriptionsBulkRequest.
        :rtype: List[int]
        """
        return self._object_ids

    @object_ids.setter
    def object_ids(self, object_ids):
        """Sets the object_ids of this UpdateSubscriptionsBulkRequest.

        List of ids

        :param object_ids: The object_ids of this UpdateSubscriptionsBulkRequest.
        :type object_ids: List[int]
        """
        if object_ids is None:
            raise ValueError("Invalid value for `object_ids`, must not be `None`")

        self._object_ids = object_ids
