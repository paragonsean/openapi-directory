# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThirdPartyDependenciesData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, artifact_id: str=None, description: str=None, group_id: str=None, id: str=None, licenses: List[str]=None, name: str=None, type: str=None, url: str=None, version: str=None):
        """ThirdPartyDependenciesData - a model defined in OpenAPI

        :param artifact_id: The artifact_id of this ThirdPartyDependenciesData.
        :param description: The description of this ThirdPartyDependenciesData.
        :param group_id: The group_id of this ThirdPartyDependenciesData.
        :param id: The id of this ThirdPartyDependenciesData.
        :param licenses: The licenses of this ThirdPartyDependenciesData.
        :param name: The name of this ThirdPartyDependenciesData.
        :param type: The type of this ThirdPartyDependenciesData.
        :param url: The url of this ThirdPartyDependenciesData.
        :param version: The version of this ThirdPartyDependenciesData.
        """
        self.openapi_types = {
            'artifact_id': str,
            'description': str,
            'group_id': str,
            'id': str,
            'licenses': List[str],
            'name': str,
            'type': str,
            'url': str,
            'version': str
        }

        self.attribute_map = {
            'artifact_id': 'artifactId',
            'description': 'description',
            'group_id': 'groupId',
            'id': 'id',
            'licenses': 'licenses',
            'name': 'name',
            'type': 'type',
            'url': 'url',
            'version': 'version'
        }

        self._artifact_id = artifact_id
        self._description = description
        self._group_id = group_id
        self._id = id
        self._licenses = licenses
        self._name = name
        self._type = type
        self._url = url
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyDependenciesData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyDependenciesData of this ThirdPartyDependenciesData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def artifact_id(self):
        """Gets the artifact_id of this ThirdPartyDependenciesData.

        Third party dependencies artifactId

        :return: The artifact_id of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._artifact_id

    @artifact_id.setter
    def artifact_id(self, artifact_id):
        """Sets the artifact_id of this ThirdPartyDependenciesData.

        Third party dependencies artifactId

        :param artifact_id: The artifact_id of this ThirdPartyDependenciesData.
        :type artifact_id: str
        """
        if artifact_id is None:
            raise ValueError("Invalid value for `artifact_id`, must not be `None`")

        self._artifact_id = artifact_id

    @property
    def description(self):
        """Gets the description of this ThirdPartyDependenciesData.

        Third party dependencies description

        :return: The description of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ThirdPartyDependenciesData.

        Third party dependencies description

        :param description: The description of this ThirdPartyDependenciesData.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def group_id(self):
        """Gets the group_id of this ThirdPartyDependenciesData.

        Third party dependencies groupId

        :return: The group_id of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ThirdPartyDependenciesData.

        Third party dependencies groupId

        :param group_id: The group_id of this ThirdPartyDependenciesData.
        :type group_id: str
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this ThirdPartyDependenciesData.

        Third party dependencies id

        :return: The id of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThirdPartyDependenciesData.

        Third party dependencies id

        :param id: The id of this ThirdPartyDependenciesData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def licenses(self):
        """Gets the licenses of this ThirdPartyDependenciesData.

        Third party dependencies licenses type

        :return: The licenses of this ThirdPartyDependenciesData.
        :rtype: List[str]
        """
        return self._licenses

    @licenses.setter
    def licenses(self, licenses):
        """Sets the licenses of this ThirdPartyDependenciesData.

        Third party dependencies licenses type

        :param licenses: The licenses of this ThirdPartyDependenciesData.
        :type licenses: List[str]
        """
        if licenses is None:
            raise ValueError("Invalid value for `licenses`, must not be `None`")

        self._licenses = licenses

    @property
    def name(self):
        """Gets the name of this ThirdPartyDependenciesData.

        Third party dependencies name

        :return: The name of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThirdPartyDependenciesData.

        Third party dependencies name

        :param name: The name of this ThirdPartyDependenciesData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ThirdPartyDependenciesData.

        Third party dependencies type

        :return: The type of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ThirdPartyDependenciesData.

        Third party dependencies type

        :param type: The type of this ThirdPartyDependenciesData.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this ThirdPartyDependenciesData.

        Third party dependencies url

        :return: The url of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ThirdPartyDependenciesData.

        Third party dependencies url

        :param url: The url of this ThirdPartyDependenciesData.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def version(self):
        """Gets the version of this ThirdPartyDependenciesData.

        Third party dependencies version

        :return: The version of this ThirdPartyDependenciesData.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ThirdPartyDependenciesData.

        Third party dependencies version

        :param version: The version of this ThirdPartyDependenciesData.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
