# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class S3Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key_defined: bool=None, bucket_name: str=None, bucket_url: str=None, endpoint_url: str=None, region: str=None, secret_key_defined: bool=None):
        """S3Config - a model defined in OpenAPI

        :param access_key_defined: The access_key_defined of this S3Config.
        :param bucket_name: The bucket_name of this S3Config.
        :param bucket_url: The bucket_url of this S3Config.
        :param endpoint_url: The endpoint_url of this S3Config.
        :param region: The region of this S3Config.
        :param secret_key_defined: The secret_key_defined of this S3Config.
        """
        self.openapi_types = {
            'access_key_defined': bool,
            'bucket_name': str,
            'bucket_url': str,
            'endpoint_url': str,
            'region': str,
            'secret_key_defined': bool
        }

        self.attribute_map = {
            'access_key_defined': 'accessKeyDefined',
            'bucket_name': 'bucketName',
            'bucket_url': 'bucketUrl',
            'endpoint_url': 'endpointUrl',
            'region': 'region',
            'secret_key_defined': 'secretKeyDefined'
        }

        self._access_key_defined = access_key_defined
        self._bucket_name = bucket_name
        self._bucket_url = bucket_url
        self._endpoint_url = endpoint_url
        self._region = region
        self._secret_key_defined = secret_key_defined

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3Config of this S3Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key_defined(self):
        """Gets the access_key_defined of this S3Config.

        Determines whether Access Key ID is defined

        :return: The access_key_defined of this S3Config.
        :rtype: bool
        """
        return self._access_key_defined

    @access_key_defined.setter
    def access_key_defined(self, access_key_defined):
        """Sets the access_key_defined of this S3Config.

        Determines whether Access Key ID is defined

        :param access_key_defined: The access_key_defined of this S3Config.
        :type access_key_defined: bool
        """
        if access_key_defined is None:
            raise ValueError("Invalid value for `access_key_defined`, must not be `None`")

        self._access_key_defined = access_key_defined

    @property
    def bucket_name(self):
        """Gets the bucket_name of this S3Config.

        &#128679; Deprecated since v4.24.0  S3 bucket name  use `bucketUrl` instead

        :return: The bucket_name of this S3Config.
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this S3Config.

        &#128679; Deprecated since v4.24.0  S3 bucket name  use `bucketUrl` instead

        :param bucket_name: The bucket_name of this S3Config.
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def bucket_url(self):
        """Gets the bucket_url of this S3Config.

        S3 object storage bucket URL

        :return: The bucket_url of this S3Config.
        :rtype: str
        """
        return self._bucket_url

    @bucket_url.setter
    def bucket_url(self, bucket_url):
        """Sets the bucket_url of this S3Config.

        S3 object storage bucket URL

        :param bucket_url: The bucket_url of this S3Config.
        :type bucket_url: str
        """
        if bucket_url is None:
            raise ValueError("Invalid value for `bucket_url`, must not be `None`")

        self._bucket_url = bucket_url

    @property
    def endpoint_url(self):
        """Gets the endpoint_url of this S3Config.

        &#128679; Deprecated since v4.24.0  S3 object storage endpoint URL  use `bucketUrl` instead

        :return: The endpoint_url of this S3Config.
        :rtype: str
        """
        return self._endpoint_url

    @endpoint_url.setter
    def endpoint_url(self, endpoint_url):
        """Sets the endpoint_url of this S3Config.

        &#128679; Deprecated since v4.24.0  S3 object storage endpoint URL  use `bucketUrl` instead

        :param endpoint_url: The endpoint_url of this S3Config.
        :type endpoint_url: str
        """

        self._endpoint_url = endpoint_url

    @property
    def region(self):
        """Gets the region of this S3Config.

        S3 region

        :return: The region of this S3Config.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this S3Config.

        S3 region

        :param region: The region of this S3Config.
        :type region: str
        """

        self._region = region

    @property
    def secret_key_defined(self):
        """Gets the secret_key_defined of this S3Config.

        Determines whether Access Secret Key is defined

        :return: The secret_key_defined of this S3Config.
        :rtype: bool
        """
        return self._secret_key_defined

    @secret_key_defined.setter
    def secret_key_defined(self, secret_key_defined):
        """Sets the secret_key_defined of this S3Config.

        Determines whether Access Secret Key is defined

        :param secret_key_defined: The secret_key_defined of this S3Config.
        :type secret_key_defined: bool
        """
        if secret_key_defined is None:
            raise ValueError("Invalid value for `secret_key_defined`, must not be `None`")

        self._secret_key_defined = secret_key_defined
