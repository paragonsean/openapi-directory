# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOAuthClientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token_validity: int=None, approval_validity: int=None, client_id: str=None, client_name: str=None, client_secret: str=None, client_type: str=None, grant_types: List[str]=None, redirect_uris: List[str]=None, refresh_token_validity: int=None):
        """CreateOAuthClientRequest - a model defined in OpenAPI

        :param access_token_validity: The access_token_validity of this CreateOAuthClientRequest.
        :param approval_validity: The approval_validity of this CreateOAuthClientRequest.
        :param client_id: The client_id of this CreateOAuthClientRequest.
        :param client_name: The client_name of this CreateOAuthClientRequest.
        :param client_secret: The client_secret of this CreateOAuthClientRequest.
        :param client_type: The client_type of this CreateOAuthClientRequest.
        :param grant_types: The grant_types of this CreateOAuthClientRequest.
        :param redirect_uris: The redirect_uris of this CreateOAuthClientRequest.
        :param refresh_token_validity: The refresh_token_validity of this CreateOAuthClientRequest.
        """
        self.openapi_types = {
            'access_token_validity': int,
            'approval_validity': int,
            'client_id': str,
            'client_name': str,
            'client_secret': str,
            'client_type': str,
            'grant_types': List[str],
            'redirect_uris': List[str],
            'refresh_token_validity': int
        }

        self.attribute_map = {
            'access_token_validity': 'accessTokenValidity',
            'approval_validity': 'approvalValidity',
            'client_id': 'clientId',
            'client_name': 'clientName',
            'client_secret': 'clientSecret',
            'client_type': 'clientType',
            'grant_types': 'grantTypes',
            'redirect_uris': 'redirectUris',
            'refresh_token_validity': 'refreshTokenValidity'
        }

        self._access_token_validity = access_token_validity
        self._approval_validity = approval_validity
        self._client_id = client_id
        self._client_name = client_name
        self._client_secret = client_secret
        self._client_type = client_type
        self._grant_types = grant_types
        self._redirect_uris = redirect_uris
        self._refresh_token_validity = refresh_token_validity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOAuthClientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOAuthClientRequest of this CreateOAuthClientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this CreateOAuthClientRequest.

        Validity of the access token in seconds.

        :return: The access_token_validity of this CreateOAuthClientRequest.
        :rtype: int
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this CreateOAuthClientRequest.

        Validity of the access token in seconds.

        :param access_token_validity: The access_token_validity of this CreateOAuthClientRequest.
        :type access_token_validity: int
        """

        self._access_token_validity = access_token_validity

    @property
    def approval_validity(self):
        """Gets the approval_validity of this CreateOAuthClientRequest.

        &#128640; Since v4.22.0  Validity of the approval interval in seconds.

        :return: The approval_validity of this CreateOAuthClientRequest.
        :rtype: int
        """
        return self._approval_validity

    @approval_validity.setter
    def approval_validity(self, approval_validity):
        """Sets the approval_validity of this CreateOAuthClientRequest.

        &#128640; Since v4.22.0  Validity of the approval interval in seconds.

        :param approval_validity: The approval_validity of this CreateOAuthClientRequest.
        :type approval_validity: int
        """

        self._approval_validity = approval_validity

    @property
    def client_id(self):
        """Gets the client_id of this CreateOAuthClientRequest.

        ID of the OAuth client

        :return: The client_id of this CreateOAuthClientRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CreateOAuthClientRequest.

        ID of the OAuth client

        :param client_id: The client_id of this CreateOAuthClientRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this CreateOAuthClientRequest.

        Name, which is shown at the client configuration and authorization.

        :return: The client_name of this CreateOAuthClientRequest.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this CreateOAuthClientRequest.

        Name, which is shown at the client configuration and authorization.

        :param client_name: The client_name of this CreateOAuthClientRequest.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def client_secret(self):
        """Gets the client_secret of this CreateOAuthClientRequest.

        Secret, which client uses at authentication.

        :return: The client_secret of this CreateOAuthClientRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CreateOAuthClientRequest.

        Secret, which client uses at authentication.

        :param client_secret: The client_secret of this CreateOAuthClientRequest.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def client_type(self):
        """Gets the client_type of this CreateOAuthClientRequest.

        Determines whether client is a confidential or public client.

        :return: The client_type of this CreateOAuthClientRequest.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this CreateOAuthClientRequest.

        Determines whether client is a confidential or public client.

        :param client_type: The client_type of this CreateOAuthClientRequest.
        :type client_type: str
        """
        allowed_values = ["confidential", "public"]  # noqa: E501
        if client_type not in allowed_values:
            raise ValueError(
                "Invalid value for `client_type` ({0}), must be one of {1}"
                .format(client_type, allowed_values)
            )

        self._client_type = client_type

    @property
    def grant_types(self):
        """Gets the grant_types of this CreateOAuthClientRequest.

        Authorized grant types  * `authorization_code`  * `implicit`  * `password`  * `client_credentials`  * `refresh_token`    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)

        :return: The grant_types of this CreateOAuthClientRequest.
        :rtype: List[str]
        """
        return self._grant_types

    @grant_types.setter
    def grant_types(self, grant_types):
        """Sets the grant_types of this CreateOAuthClientRequest.

        Authorized grant types  * `authorization_code`  * `implicit`  * `password`  * `client_credentials`  * `refresh_token`    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)

        :param grant_types: The grant_types of this CreateOAuthClientRequest.
        :type grant_types: List[str]
        """
        allowed_values = ["authorization_code", "client_credentials", "implicit", "password", "refresh_token"]  # noqa: E501
        if not set(grant_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `grant_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(grant_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._grant_types = grant_types

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this CreateOAuthClientRequest.

        URIs, to which a user is redirected after authorization.

        :return: The redirect_uris of this CreateOAuthClientRequest.
        :rtype: List[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this CreateOAuthClientRequest.

        URIs, to which a user is redirected after authorization.

        :param redirect_uris: The redirect_uris of this CreateOAuthClientRequest.
        :type redirect_uris: List[str]
        """
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")

        self._redirect_uris = redirect_uris

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this CreateOAuthClientRequest.

        Validity of the refresh token in seconds.

        :return: The refresh_token_validity of this CreateOAuthClientRequest.
        :rtype: int
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this CreateOAuthClientRequest.

        Validity of the refresh token in seconds.

        :param refresh_token_validity: The refresh_token_validity of this CreateOAuthClientRequest.
        :type refresh_token_validity: int
        """

        self._refresh_token_validity = refresh_token_validity
