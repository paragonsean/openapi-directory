# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OpenIdProvider(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_global_available: bool=None, issuer: str=None, mapping_claim: str=None, name: str=None, user_management_url: str=None):
        """OpenIdProvider - a model defined in OpenAPI

        :param id: The id of this OpenIdProvider.
        :param is_global_available: The is_global_available of this OpenIdProvider.
        :param issuer: The issuer of this OpenIdProvider.
        :param mapping_claim: The mapping_claim of this OpenIdProvider.
        :param name: The name of this OpenIdProvider.
        :param user_management_url: The user_management_url of this OpenIdProvider.
        """
        self.openapi_types = {
            'id': int,
            'is_global_available': bool,
            'issuer': str,
            'mapping_claim': str,
            'name': str,
            'user_management_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_global_available': 'isGlobalAvailable',
            'issuer': 'issuer',
            'mapping_claim': 'mappingClaim',
            'name': 'name',
            'user_management_url': 'userManagementUrl'
        }

        self._id = id
        self._is_global_available = is_global_available
        self._issuer = issuer
        self._mapping_claim = mapping_claim
        self._name = name
        self._user_management_url = user_management_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OpenIdProvider':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OpenIdProvider of this OpenIdProvider.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OpenIdProvider.

        ID

        :return: The id of this OpenIdProvider.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OpenIdProvider.

        ID

        :param id: The id of this OpenIdProvider.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_global_available(self):
        """Gets the is_global_available of this OpenIdProvider.

        Is available for all customers

        :return: The is_global_available of this OpenIdProvider.
        :rtype: bool
        """
        return self._is_global_available

    @is_global_available.setter
    def is_global_available(self, is_global_available):
        """Sets the is_global_available of this OpenIdProvider.

        Is available for all customers

        :param is_global_available: The is_global_available of this OpenIdProvider.
        :type is_global_available: bool
        """
        if is_global_available is None:
            raise ValueError("Invalid value for `is_global_available`, must not be `None`")

        self._is_global_available = is_global_available

    @property
    def issuer(self):
        """Gets the issuer of this OpenIdProvider.

        Issuer identifier of the IDP  The value is a case sensitive URL.

        :return: The issuer of this OpenIdProvider.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this OpenIdProvider.

        Issuer identifier of the IDP  The value is a case sensitive URL.

        :param issuer: The issuer of this OpenIdProvider.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def mapping_claim(self):
        """Gets the mapping_claim of this OpenIdProvider.

        Name of the claim which is used for the user mapping.

        :return: The mapping_claim of this OpenIdProvider.
        :rtype: str
        """
        return self._mapping_claim

    @mapping_claim.setter
    def mapping_claim(self, mapping_claim):
        """Sets the mapping_claim of this OpenIdProvider.

        Name of the claim which is used for the user mapping.

        :param mapping_claim: The mapping_claim of this OpenIdProvider.
        :type mapping_claim: str
        """
        if mapping_claim is None:
            raise ValueError("Invalid value for `mapping_claim`, must not be `None`")

        self._mapping_claim = mapping_claim

    @property
    def name(self):
        """Gets the name of this OpenIdProvider.

        Name of the IDP

        :return: The name of this OpenIdProvider.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OpenIdProvider.

        Name of the IDP

        :param name: The name of this OpenIdProvider.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def user_management_url(self):
        """Gets the user_management_url of this OpenIdProvider.

        URL of the user management UI.  Use empty string to remove.

        :return: The user_management_url of this OpenIdProvider.
        :rtype: str
        """
        return self._user_management_url

    @user_management_url.setter
    def user_management_url(self, user_management_url):
        """Sets the user_management_url of this OpenIdProvider.

        URL of the user management UI.  Use empty string to remove.

        :param user_management_url: The user_management_url of this OpenIdProvider.
        :type user_management_url: str
        """

        self._user_management_url = user_management_url
