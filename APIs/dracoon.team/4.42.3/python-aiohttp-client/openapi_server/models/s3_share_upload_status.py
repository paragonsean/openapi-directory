# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_response import ErrorResponse
from openapi_server import util


class S3ShareUploadStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_details: ErrorResponse=None, file_name: str=None, size: int=None, status: str=None):
        """S3ShareUploadStatus - a model defined in OpenAPI

        :param error_details: The error_details of this S3ShareUploadStatus.
        :param file_name: The file_name of this S3ShareUploadStatus.
        :param size: The size of this S3ShareUploadStatus.
        :param status: The status of this S3ShareUploadStatus.
        """
        self.openapi_types = {
            'error_details': ErrorResponse,
            'file_name': str,
            'size': int,
            'status': str
        }

        self.attribute_map = {
            'error_details': 'errorDetails',
            'file_name': 'fileName',
            'size': 'size',
            'status': 'status'
        }

        self._error_details = error_details
        self._file_name = file_name
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'S3ShareUploadStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The S3ShareUploadStatus of this S3ShareUploadStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_details(self):
        """Gets the error_details of this S3ShareUploadStatus.


        :return: The error_details of this S3ShareUploadStatus.
        :rtype: ErrorResponse
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this S3ShareUploadStatus.


        :param error_details: The error_details of this S3ShareUploadStatus.
        :type error_details: ErrorResponse
        """

        self._error_details = error_details

    @property
    def file_name(self):
        """Gets the file_name of this S3ShareUploadStatus.

        File name

        :return: The file_name of this S3ShareUploadStatus.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this S3ShareUploadStatus.

        File name

        :param file_name: The file_name of this S3ShareUploadStatus.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def size(self):
        """Gets the size of this S3ShareUploadStatus.

        File size in byte

        :return: The size of this S3ShareUploadStatus.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this S3ShareUploadStatus.

        File size in byte

        :param size: The size of this S3ShareUploadStatus.
        :type size: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this S3ShareUploadStatus.

        S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload

        :return: The status of this S3ShareUploadStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this S3ShareUploadStatus.

        S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload

        :param status: The status of this S3ShareUploadStatus.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
