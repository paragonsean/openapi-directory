# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, created_by: UserInfo=None, id: int=None, is_changed: bool=None, is_deleted: bool=None, text: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """Comment - a model defined in OpenAPI

        :param created_at: The created_at of this Comment.
        :param created_by: The created_by of this Comment.
        :param id: The id of this Comment.
        :param is_changed: The is_changed of this Comment.
        :param is_deleted: The is_deleted of this Comment.
        :param text: The text of this Comment.
        :param updated_at: The updated_at of this Comment.
        :param updated_by: The updated_by of this Comment.
        """
        self.openapi_types = {
            'created_at': datetime,
            'created_by': UserInfo,
            'id': int,
            'is_changed': bool,
            'is_deleted': bool,
            'text': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'id': 'id',
            'is_changed': 'isChanged',
            'is_deleted': 'isDeleted',
            'text': 'text',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._id = id
        self._is_changed = is_changed
        self._is_deleted = is_deleted
        self._text = text
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Comment.

        Creation date

        :return: The created_at of this Comment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Comment.

        Creation date

        :param created_at: The created_at of this Comment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Comment.


        :return: The created_by of this Comment.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Comment.


        :param created_by: The created_by of this Comment.
        :type created_by: UserInfo
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this Comment.

        Comment ID

        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        Comment ID

        :param id: The id of this Comment.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_changed(self):
        """Gets the is_changed of this Comment.

        Determines whether comment was edited or not

        :return: The is_changed of this Comment.
        :rtype: bool
        """
        return self._is_changed

    @is_changed.setter
    def is_changed(self, is_changed):
        """Sets the is_changed of this Comment.

        Determines whether comment was edited or not

        :param is_changed: The is_changed of this Comment.
        :type is_changed: bool
        """
        if is_changed is None:
            raise ValueError("Invalid value for `is_changed`, must not be `None`")

        self._is_changed = is_changed

    @property
    def is_deleted(self):
        """Gets the is_deleted of this Comment.

        Determines whether comment was deleted or not

        :return: The is_deleted of this Comment.
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this Comment.

        Determines whether comment was deleted or not

        :param is_deleted: The is_deleted of this Comment.
        :type is_deleted: bool
        """
        if is_deleted is None:
            raise ValueError("Invalid value for `is_deleted`, must not be `None`")

        self._is_deleted = is_deleted

    @property
    def text(self):
        """Gets the text of this Comment.

        Comment text

        :return: The text of this Comment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Comment.

        Comment text

        :param text: The text of this Comment.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def updated_at(self):
        """Gets the updated_at of this Comment.

        Modification date

        :return: The updated_at of this Comment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Comment.

        Modification date

        :param updated_at: The updated_at of this Comment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Comment.


        :return: The updated_by of this Comment.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Comment.


        :param updated_by: The updated_by of this Comment.
        :type updated_by: UserInfo
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")

        self._updated_by = updated_by
