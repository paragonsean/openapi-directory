# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlgorithmVersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, status: str=None, version: str=None):
        """AlgorithmVersionInfo - a model defined in OpenAPI

        :param description: The description of this AlgorithmVersionInfo.
        :param status: The status of this AlgorithmVersionInfo.
        :param version: The version of this AlgorithmVersionInfo.
        """
        self.openapi_types = {
            'description': str,
            'status': str,
            'version': str
        }

        self.attribute_map = {
            'description': 'description',
            'status': 'status',
            'version': 'version'
        }

        self._description = description
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlgorithmVersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlgorithmVersionInfo of this AlgorithmVersionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this AlgorithmVersionInfo.

        Algorithm description

        :return: The description of this AlgorithmVersionInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlgorithmVersionInfo.

        Algorithm description

        :param description: The description of this AlgorithmVersionInfo.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def status(self):
        """Gets the status of this AlgorithmVersionInfo.

        Algorithm status  Derived from preference value and threshold

        :return: The status of this AlgorithmVersionInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlgorithmVersionInfo.

        Algorithm status  Derived from preference value and threshold

        :param status: The status of this AlgorithmVersionInfo.
        :type status: str
        """
        allowed_values = ["REQUIRED", "DISCOURAGED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def version(self):
        """Gets the version of this AlgorithmVersionInfo.

        Algorithm version

        :return: The version of this AlgorithmVersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AlgorithmVersionInfo.

        Algorithm version

        :param version: The version of this AlgorithmVersionInfo.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
