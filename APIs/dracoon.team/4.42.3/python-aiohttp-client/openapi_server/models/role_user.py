# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class RoleUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, id: int=None, is_member: bool=None, user_info: UserInfo=None):
        """RoleUser - a model defined in OpenAPI

        :param display_name: The display_name of this RoleUser.
        :param id: The id of this RoleUser.
        :param is_member: The is_member of this RoleUser.
        :param user_info: The user_info of this RoleUser.
        """
        self.openapi_types = {
            'display_name': str,
            'id': int,
            'is_member': bool,
            'user_info': UserInfo
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'id': 'id',
            'is_member': 'isMember',
            'user_info': 'userInfo'
        }

        self._display_name = display_name
        self._id = id
        self._is_member = is_member
        self._user_info = user_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoleUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoleUser of this RoleUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this RoleUser.

        &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name

        :return: The display_name of this RoleUser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoleUser.

        &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name

        :param display_name: The display_name of this RoleUser.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this RoleUser.

        &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead

        :return: The id of this RoleUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoleUser.

        &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead

        :param id: The id of this RoleUser.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_member(self):
        """Gets the is_member of this RoleUser.

        Is user member of the role

        :return: The is_member of this RoleUser.
        :rtype: bool
        """
        return self._is_member

    @is_member.setter
    def is_member(self, is_member):
        """Sets the is_member of this RoleUser.

        Is user member of the role

        :param is_member: The is_member of this RoleUser.
        :type is_member: bool
        """
        if is_member is None:
            raise ValueError("Invalid value for `is_member`, must not be `None`")

        self._is_member = is_member

    @property
    def user_info(self):
        """Gets the user_info of this RoleUser.


        :return: The user_info of this RoleUser.
        :rtype: UserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this RoleUser.


        :param user_info: The user_info of this RoleUser.
        :type user_info: UserInfo
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")

        self._user_info = user_info
