# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActiveDirectoryConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_export_group: str=None, alias: str=None, create_home_folder: bool=False, home_folder_parent: int=None, id: int=None, ldap_users_domain: str=None, sds_import_group: int=None, server_admin_name: str=None, server_ip: str=None, server_port: int=None, ssl_finger_print: str=None, use_ldaps: bool=None, user_filter: str=None, user_import: bool=None):
        """ActiveDirectoryConfig - a model defined in OpenAPI

        :param ad_export_group: The ad_export_group of this ActiveDirectoryConfig.
        :param alias: The alias of this ActiveDirectoryConfig.
        :param create_home_folder: The create_home_folder of this ActiveDirectoryConfig.
        :param home_folder_parent: The home_folder_parent of this ActiveDirectoryConfig.
        :param id: The id of this ActiveDirectoryConfig.
        :param ldap_users_domain: The ldap_users_domain of this ActiveDirectoryConfig.
        :param sds_import_group: The sds_import_group of this ActiveDirectoryConfig.
        :param server_admin_name: The server_admin_name of this ActiveDirectoryConfig.
        :param server_ip: The server_ip of this ActiveDirectoryConfig.
        :param server_port: The server_port of this ActiveDirectoryConfig.
        :param ssl_finger_print: The ssl_finger_print of this ActiveDirectoryConfig.
        :param use_ldaps: The use_ldaps of this ActiveDirectoryConfig.
        :param user_filter: The user_filter of this ActiveDirectoryConfig.
        :param user_import: The user_import of this ActiveDirectoryConfig.
        """
        self.openapi_types = {
            'ad_export_group': str,
            'alias': str,
            'create_home_folder': bool,
            'home_folder_parent': int,
            'id': int,
            'ldap_users_domain': str,
            'sds_import_group': int,
            'server_admin_name': str,
            'server_ip': str,
            'server_port': int,
            'ssl_finger_print': str,
            'use_ldaps': bool,
            'user_filter': str,
            'user_import': bool
        }

        self.attribute_map = {
            'ad_export_group': 'adExportGroup',
            'alias': 'alias',
            'create_home_folder': 'createHomeFolder',
            'home_folder_parent': 'homeFolderParent',
            'id': 'id',
            'ldap_users_domain': 'ldapUsersDomain',
            'sds_import_group': 'sdsImportGroup',
            'server_admin_name': 'serverAdminName',
            'server_ip': 'serverIp',
            'server_port': 'serverPort',
            'ssl_finger_print': 'sslFingerPrint',
            'use_ldaps': 'useLdaps',
            'user_filter': 'userFilter',
            'user_import': 'userImport'
        }

        self._ad_export_group = ad_export_group
        self._alias = alias
        self._create_home_folder = create_home_folder
        self._home_folder_parent = home_folder_parent
        self._id = id
        self._ldap_users_domain = ldap_users_domain
        self._sds_import_group = sds_import_group
        self._server_admin_name = server_admin_name
        self._server_ip = server_ip
        self._server_port = server_port
        self._ssl_finger_print = ssl_finger_print
        self._use_ldaps = use_ldaps
        self._user_filter = user_filter
        self._user_import = user_import

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveDirectoryConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveDirectoryConfig of this ActiveDirectoryConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_export_group(self):
        """Gets the ad_export_group of this ActiveDirectoryConfig.

        If `userImport` is set to `true`,  the user must be member of this Active Directory group to receive a newly created DRACOON account.

        :return: The ad_export_group of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._ad_export_group

    @ad_export_group.setter
    def ad_export_group(self, ad_export_group):
        """Sets the ad_export_group of this ActiveDirectoryConfig.

        If `userImport` is set to `true`,  the user must be member of this Active Directory group to receive a newly created DRACOON account.

        :param ad_export_group: The ad_export_group of this ActiveDirectoryConfig.
        :type ad_export_group: str
        """
        if ad_export_group is None:
            raise ValueError("Invalid value for `ad_export_group`, must not be `None`")

        self._ad_export_group = ad_export_group

    @property
    def alias(self):
        """Gets the alias of this ActiveDirectoryConfig.

        Unique name for an Active Directory configuration

        :return: The alias of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ActiveDirectoryConfig.

        Unique name for an Active Directory configuration

        :param alias: The alias of this ActiveDirectoryConfig.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def create_home_folder(self):
        """Gets the create_home_folder of this ActiveDirectoryConfig.

        &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  Determines whether a room is created for each user that is created by automatic import (like a home folder).  Room's name will equal the user's login name.

        :return: The create_home_folder of this ActiveDirectoryConfig.
        :rtype: bool
        """
        return self._create_home_folder

    @create_home_folder.setter
    def create_home_folder(self, create_home_folder):
        """Sets the create_home_folder of this ActiveDirectoryConfig.

        &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  Determines whether a room is created for each user that is created by automatic import (like a home folder).  Room's name will equal the user's login name.

        :param create_home_folder: The create_home_folder of this ActiveDirectoryConfig.
        :type create_home_folder: bool
        """

        self._create_home_folder = create_home_folder

    @property
    def home_folder_parent(self):
        """Gets the home_folder_parent of this ActiveDirectoryConfig.

        &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  ID of the room in which the individual rooms for users will be created.

        :return: The home_folder_parent of this ActiveDirectoryConfig.
        :rtype: int
        """
        return self._home_folder_parent

    @home_folder_parent.setter
    def home_folder_parent(self, home_folder_parent):
        """Sets the home_folder_parent of this ActiveDirectoryConfig.

        &#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  ID of the room in which the individual rooms for users will be created.

        :param home_folder_parent: The home_folder_parent of this ActiveDirectoryConfig.
        :type home_folder_parent: int
        """

        self._home_folder_parent = home_folder_parent

    @property
    def id(self):
        """Gets the id of this ActiveDirectoryConfig.

        ID

        :return: The id of this ActiveDirectoryConfig.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActiveDirectoryConfig.

        ID

        :param id: The id of this ActiveDirectoryConfig.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ldap_users_domain(self):
        """Gets the ldap_users_domain of this ActiveDirectoryConfig.

        Search scope of Active Directory; only users below this node can log on.

        :return: The ldap_users_domain of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._ldap_users_domain

    @ldap_users_domain.setter
    def ldap_users_domain(self, ldap_users_domain):
        """Sets the ldap_users_domain of this ActiveDirectoryConfig.

        Search scope of Active Directory; only users below this node can log on.

        :param ldap_users_domain: The ldap_users_domain of this ActiveDirectoryConfig.
        :type ldap_users_domain: str
        """
        if ldap_users_domain is None:
            raise ValueError("Invalid value for `ldap_users_domain`, must not be `None`")

        self._ldap_users_domain = ldap_users_domain

    @property
    def sds_import_group(self):
        """Gets the sds_import_group of this ActiveDirectoryConfig.

        User group that is assigned to users who are created by automatic import.  Reset with `0`

        :return: The sds_import_group of this ActiveDirectoryConfig.
        :rtype: int
        """
        return self._sds_import_group

    @sds_import_group.setter
    def sds_import_group(self, sds_import_group):
        """Sets the sds_import_group of this ActiveDirectoryConfig.

        User group that is assigned to users who are created by automatic import.  Reset with `0`

        :param sds_import_group: The sds_import_group of this ActiveDirectoryConfig.
        :type sds_import_group: int
        """

        self._sds_import_group = sds_import_group

    @property
    def server_admin_name(self):
        """Gets the server_admin_name of this ActiveDirectoryConfig.

        Distinguished Name (DN) of Active Directory administrative account

        :return: The server_admin_name of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._server_admin_name

    @server_admin_name.setter
    def server_admin_name(self, server_admin_name):
        """Sets the server_admin_name of this ActiveDirectoryConfig.

        Distinguished Name (DN) of Active Directory administrative account

        :param server_admin_name: The server_admin_name of this ActiveDirectoryConfig.
        :type server_admin_name: str
        """
        if server_admin_name is None:
            raise ValueError("Invalid value for `server_admin_name`, must not be `None`")

        self._server_admin_name = server_admin_name

    @property
    def server_ip(self):
        """Gets the server_ip of this ActiveDirectoryConfig.

        IPv4 or IPv6 address or host name

        :return: The server_ip of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._server_ip

    @server_ip.setter
    def server_ip(self, server_ip):
        """Sets the server_ip of this ActiveDirectoryConfig.

        IPv4 or IPv6 address or host name

        :param server_ip: The server_ip of this ActiveDirectoryConfig.
        :type server_ip: str
        """
        if server_ip is None:
            raise ValueError("Invalid value for `server_ip`, must not be `None`")

        self._server_ip = server_ip

    @property
    def server_port(self):
        """Gets the server_port of this ActiveDirectoryConfig.

        Port

        :return: The server_port of this ActiveDirectoryConfig.
        :rtype: int
        """
        return self._server_port

    @server_port.setter
    def server_port(self, server_port):
        """Sets the server_port of this ActiveDirectoryConfig.

        Port

        :param server_port: The server_port of this ActiveDirectoryConfig.
        :type server_port: int
        """
        if server_port is None:
            raise ValueError("Invalid value for `server_port`, must not be `None`")
        if server_port is not None and server_port > 65535:
            raise ValueError("Invalid value for `server_port`, must be a value less than or equal to `65535`")
        if server_port is not None and server_port < 0:
            raise ValueError("Invalid value for `server_port`, must be a value greater than or equal to `0`")

        self._server_port = server_port

    @property
    def ssl_finger_print(self):
        """Gets the ssl_finger_print of this ActiveDirectoryConfig.

        SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`

        :return: The ssl_finger_print of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._ssl_finger_print

    @ssl_finger_print.setter
    def ssl_finger_print(self, ssl_finger_print):
        """Sets the ssl_finger_print of this ActiveDirectoryConfig.

        SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`

        :param ssl_finger_print: The ssl_finger_print of this ActiveDirectoryConfig.
        :type ssl_finger_print: str
        """

        self._ssl_finger_print = ssl_finger_print

    @property
    def use_ldaps(self):
        """Gets the use_ldaps of this ActiveDirectoryConfig.

        Determines whether LDAPS should be used instead of plain LDAP.

        :return: The use_ldaps of this ActiveDirectoryConfig.
        :rtype: bool
        """
        return self._use_ldaps

    @use_ldaps.setter
    def use_ldaps(self, use_ldaps):
        """Sets the use_ldaps of this ActiveDirectoryConfig.

        Determines whether LDAPS should be used instead of plain LDAP.

        :param use_ldaps: The use_ldaps of this ActiveDirectoryConfig.
        :type use_ldaps: bool
        """
        if use_ldaps is None:
            raise ValueError("Invalid value for `use_ldaps`, must not be `None`")

        self._use_ldaps = use_ldaps

    @property
    def user_filter(self):
        """Gets the user_filter of this ActiveDirectoryConfig.

        Name of Active Directory attribute that is used as login name.

        :return: The user_filter of this ActiveDirectoryConfig.
        :rtype: str
        """
        return self._user_filter

    @user_filter.setter
    def user_filter(self, user_filter):
        """Sets the user_filter of this ActiveDirectoryConfig.

        Name of Active Directory attribute that is used as login name.

        :param user_filter: The user_filter of this ActiveDirectoryConfig.
        :type user_filter: str
        """
        if user_filter is None:
            raise ValueError("Invalid value for `user_filter`, must not be `None`")

        self._user_filter = user_filter

    @property
    def user_import(self):
        """Gets the user_import of this ActiveDirectoryConfig.

        Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.

        :return: The user_import of this ActiveDirectoryConfig.
        :rtype: bool
        """
        return self._user_import

    @user_import.setter
    def user_import(self, user_import):
        """Sets the user_import of this ActiveDirectoryConfig.

        Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.

        :param user_import: The user_import of this ActiveDirectoryConfig.
        :type user_import: bool
        """
        if user_import is None:
            raise ValueError("Invalid value for `user_import`, must not be `None`")

        self._user_import = user_import
