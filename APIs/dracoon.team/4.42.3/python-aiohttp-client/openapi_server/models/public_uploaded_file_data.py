# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicUploadedFileData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, hash: str=None, name: str=None, size: int=None):
        """PublicUploadedFileData - a model defined in OpenAPI

        :param created_at: The created_at of this PublicUploadedFileData.
        :param hash: The hash of this PublicUploadedFileData.
        :param name: The name of this PublicUploadedFileData.
        :param size: The size of this PublicUploadedFileData.
        """
        self.openapi_types = {
            'created_at': datetime,
            'hash': str,
            'name': str,
            'size': int
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'hash': 'hash',
            'name': 'name',
            'size': 'size'
        }

        self._created_at = created_at
        self._hash = hash
        self._name = name
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublicUploadedFileData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublicUploadedFileData of this PublicUploadedFileData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this PublicUploadedFileData.

        Creation date

        :return: The created_at of this PublicUploadedFileData.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicUploadedFileData.

        Creation date

        :param created_at: The created_at of this PublicUploadedFileData.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def hash(self):
        """Gets the hash of this PublicUploadedFileData.

        Hash value of transferred file

        :return: The hash of this PublicUploadedFileData.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this PublicUploadedFileData.

        Hash value of transferred file

        :param hash: The hash of this PublicUploadedFileData.
        :type hash: str
        """

        self._hash = hash

    @property
    def name(self):
        """Gets the name of this PublicUploadedFileData.

        Name

        :return: The name of this PublicUploadedFileData.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicUploadedFileData.

        Name

        :param name: The name of this PublicUploadedFileData.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this PublicUploadedFileData.

        File size in byte

        :return: The size of this PublicUploadedFileData.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PublicUploadedFileData.

        File size in byte

        :param size: The size of this PublicUploadedFileData.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
