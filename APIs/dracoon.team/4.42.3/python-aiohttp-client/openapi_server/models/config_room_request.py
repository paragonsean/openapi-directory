# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigRoomRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_group_ids: List[int]=None, admin_ids: List[int]=None, classification: int=2, has_activities_log: bool=True, inherit_permissions: bool=None, new_group_member_acceptance: str='autoallow', recycle_bin_retention_period: int=None, take_over_permissions: bool=None):
        """ConfigRoomRequest - a model defined in OpenAPI

        :param admin_group_ids: The admin_group_ids of this ConfigRoomRequest.
        :param admin_ids: The admin_ids of this ConfigRoomRequest.
        :param classification: The classification of this ConfigRoomRequest.
        :param has_activities_log: The has_activities_log of this ConfigRoomRequest.
        :param inherit_permissions: The inherit_permissions of this ConfigRoomRequest.
        :param new_group_member_acceptance: The new_group_member_acceptance of this ConfigRoomRequest.
        :param recycle_bin_retention_period: The recycle_bin_retention_period of this ConfigRoomRequest.
        :param take_over_permissions: The take_over_permissions of this ConfigRoomRequest.
        """
        self.openapi_types = {
            'admin_group_ids': List[int],
            'admin_ids': List[int],
            'classification': int,
            'has_activities_log': bool,
            'inherit_permissions': bool,
            'new_group_member_acceptance': str,
            'recycle_bin_retention_period': int,
            'take_over_permissions': bool
        }

        self.attribute_map = {
            'admin_group_ids': 'adminGroupIds',
            'admin_ids': 'adminIds',
            'classification': 'classification',
            'has_activities_log': 'hasActivitiesLog',
            'inherit_permissions': 'inheritPermissions',
            'new_group_member_acceptance': 'newGroupMemberAcceptance',
            'recycle_bin_retention_period': 'recycleBinRetentionPeriod',
            'take_over_permissions': 'takeOverPermissions'
        }

        self._admin_group_ids = admin_group_ids
        self._admin_ids = admin_ids
        self._classification = classification
        self._has_activities_log = has_activities_log
        self._inherit_permissions = inherit_permissions
        self._new_group_member_acceptance = new_group_member_acceptance
        self._recycle_bin_retention_period = recycle_bin_retention_period
        self._take_over_permissions = take_over_permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigRoomRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigRoomRequest of this ConfigRoomRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_group_ids(self):
        """Gets the admin_group_ids of this ConfigRoomRequest.

        List of group ids  A room requires at least one admin (user or group)

        :return: The admin_group_ids of this ConfigRoomRequest.
        :rtype: List[int]
        """
        return self._admin_group_ids

    @admin_group_ids.setter
    def admin_group_ids(self, admin_group_ids):
        """Sets the admin_group_ids of this ConfigRoomRequest.

        List of group ids  A room requires at least one admin (user or group)

        :param admin_group_ids: The admin_group_ids of this ConfigRoomRequest.
        :type admin_group_ids: List[int]
        """

        self._admin_group_ids = admin_group_ids

    @property
    def admin_ids(self):
        """Gets the admin_ids of this ConfigRoomRequest.

        List of user ids  A room requires at least one admin (user or group)

        :return: The admin_ids of this ConfigRoomRequest.
        :rtype: List[int]
        """
        return self._admin_ids

    @admin_ids.setter
    def admin_ids(self, admin_ids):
        """Sets the admin_ids of this ConfigRoomRequest.

        List of user ids  A room requires at least one admin (user or group)

        :param admin_ids: The admin_ids of this ConfigRoomRequest.
        :type admin_ids: List[int]
        """

        self._admin_ids = admin_ids

    @property
    def classification(self):
        """Gets the classification of this ConfigRoomRequest.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    Provided (or default) classification is taken from room  when file gets uploaded without any classification.

        :return: The classification of this ConfigRoomRequest.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this ConfigRoomRequest.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    Provided (or default) classification is taken from room  when file gets uploaded without any classification.

        :param classification: The classification of this ConfigRoomRequest.
        :type classification: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def has_activities_log(self):
        """Gets the has_activities_log of this ConfigRoomRequest.

        Is activities log active (for rooms only)

        :return: The has_activities_log of this ConfigRoomRequest.
        :rtype: bool
        """
        return self._has_activities_log

    @has_activities_log.setter
    def has_activities_log(self, has_activities_log):
        """Sets the has_activities_log of this ConfigRoomRequest.

        Is activities log active (for rooms only)

        :param has_activities_log: The has_activities_log of this ConfigRoomRequest.
        :type has_activities_log: bool
        """

        self._has_activities_log = has_activities_log

    @property
    def inherit_permissions(self):
        """Gets the inherit_permissions of this ConfigRoomRequest.

        Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)

        :return: The inherit_permissions of this ConfigRoomRequest.
        :rtype: bool
        """
        return self._inherit_permissions

    @inherit_permissions.setter
    def inherit_permissions(self, inherit_permissions):
        """Sets the inherit_permissions of this ConfigRoomRequest.

        Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)

        :param inherit_permissions: The inherit_permissions of this ConfigRoomRequest.
        :type inherit_permissions: bool
        """

        self._inherit_permissions = inherit_permissions

    @property
    def new_group_member_acceptance(self):
        """Gets the new_group_member_acceptance of this ConfigRoomRequest.

        Behaviour when new users are added to the group:  * `autoallow`  * `pending`    Only relevant if `adminGroupIds` has items.

        :return: The new_group_member_acceptance of this ConfigRoomRequest.
        :rtype: str
        """
        return self._new_group_member_acceptance

    @new_group_member_acceptance.setter
    def new_group_member_acceptance(self, new_group_member_acceptance):
        """Sets the new_group_member_acceptance of this ConfigRoomRequest.

        Behaviour when new users are added to the group:  * `autoallow`  * `pending`    Only relevant if `adminGroupIds` has items.

        :param new_group_member_acceptance: The new_group_member_acceptance of this ConfigRoomRequest.
        :type new_group_member_acceptance: str
        """
        allowed_values = ["autoallow", "pending"]  # noqa: E501
        if new_group_member_acceptance not in allowed_values:
            raise ValueError(
                "Invalid value for `new_group_member_acceptance` ({0}), must be one of {1}"
                .format(new_group_member_acceptance, allowed_values)
            )

        self._new_group_member_acceptance = new_group_member_acceptance

    @property
    def recycle_bin_retention_period(self):
        """Gets the recycle_bin_retention_period of this ConfigRoomRequest.

        Retention period for deleted nodes in days

        :return: The recycle_bin_retention_period of this ConfigRoomRequest.
        :rtype: int
        """
        return self._recycle_bin_retention_period

    @recycle_bin_retention_period.setter
    def recycle_bin_retention_period(self, recycle_bin_retention_period):
        """Sets the recycle_bin_retention_period of this ConfigRoomRequest.

        Retention period for deleted nodes in days

        :param recycle_bin_retention_period: The recycle_bin_retention_period of this ConfigRoomRequest.
        :type recycle_bin_retention_period: int
        """
        if recycle_bin_retention_period is not None and recycle_bin_retention_period > 9999:
            raise ValueError("Invalid value for `recycle_bin_retention_period`, must be a value less than or equal to `9999`")
        if recycle_bin_retention_period is not None and recycle_bin_retention_period < 0:
            raise ValueError("Invalid value for `recycle_bin_retention_period`, must be a value greater than or equal to `0`")

        self._recycle_bin_retention_period = recycle_bin_retention_period

    @property
    def take_over_permissions(self):
        """Gets the take_over_permissions of this ConfigRoomRequest.

        Take over existing permissions

        :return: The take_over_permissions of this ConfigRoomRequest.
        :rtype: bool
        """
        return self._take_over_permissions

    @take_over_permissions.setter
    def take_over_permissions(self, take_over_permissions):
        """Sets the take_over_permissions of this ConfigRoomRequest.

        Take over existing permissions

        :param take_over_permissions: The take_over_permissions of this ConfigRoomRequest.
        :type take_over_permissions: bool
        """

        self._take_over_permissions = take_over_permissions
