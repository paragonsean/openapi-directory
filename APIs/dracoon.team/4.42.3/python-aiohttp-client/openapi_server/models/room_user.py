# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_permissions import NodePermissions
from openapi_server.models.public_key_container import PublicKeyContainer
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class RoomUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, email: str=None, id: int=None, is_granted: bool=None, login: str=None, permissions: NodePermissions=None, public_key_container: PublicKeyContainer=None, user_info: UserInfo=None):
        """RoomUser - a model defined in OpenAPI

        :param display_name: The display_name of this RoomUser.
        :param email: The email of this RoomUser.
        :param id: The id of this RoomUser.
        :param is_granted: The is_granted of this RoomUser.
        :param login: The login of this RoomUser.
        :param permissions: The permissions of this RoomUser.
        :param public_key_container: The public_key_container of this RoomUser.
        :param user_info: The user_info of this RoomUser.
        """
        self.openapi_types = {
            'display_name': str,
            'email': str,
            'id': int,
            'is_granted': bool,
            'login': str,
            'permissions': NodePermissions,
            'public_key_container': PublicKeyContainer,
            'user_info': UserInfo
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'email': 'email',
            'id': 'id',
            'is_granted': 'isGranted',
            'login': 'login',
            'permissions': 'permissions',
            'public_key_container': 'publicKeyContainer',
            'user_info': 'userInfo'
        }

        self._display_name = display_name
        self._email = email
        self._id = id
        self._is_granted = is_granted
        self._login = login
        self._permissions = permissions
        self._public_key_container = public_key_container
        self._user_info = user_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomUser of this RoomUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this RoomUser.

        &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name

        :return: The display_name of this RoomUser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RoomUser.

        &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name

        :param display_name: The display_name of this RoomUser.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this RoomUser.

        &#128679; Deprecated since v4.11.0  Email   use `email` from `UserInfo` instead

        :return: The email of this RoomUser.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RoomUser.

        &#128679; Deprecated since v4.11.0  Email   use `email` from `UserInfo` instead

        :param email: The email of this RoomUser.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this RoomUser.

        &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead

        :return: The id of this RoomUser.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RoomUser.

        &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead

        :param id: The id of this RoomUser.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_granted(self):
        """Gets the is_granted of this RoomUser.

        Is user granted room permissions

        :return: The is_granted of this RoomUser.
        :rtype: bool
        """
        return self._is_granted

    @is_granted.setter
    def is_granted(self, is_granted):
        """Sets the is_granted of this RoomUser.

        Is user granted room permissions

        :param is_granted: The is_granted of this RoomUser.
        :type is_granted: bool
        """
        if is_granted is None:
            raise ValueError("Invalid value for `is_granted`, must not be `None`")

        self._is_granted = is_granted

    @property
    def login(self):
        """Gets the login of this RoomUser.

        &#128679; Deprecated since v4.11.0  User login name

        :return: The login of this RoomUser.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this RoomUser.

        &#128679; Deprecated since v4.11.0  User login name

        :param login: The login of this RoomUser.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def permissions(self):
        """Gets the permissions of this RoomUser.


        :return: The permissions of this RoomUser.
        :rtype: NodePermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this RoomUser.


        :param permissions: The permissions of this RoomUser.
        :type permissions: NodePermissions
        """

        self._permissions = permissions

    @property
    def public_key_container(self):
        """Gets the public_key_container of this RoomUser.


        :return: The public_key_container of this RoomUser.
        :rtype: PublicKeyContainer
        """
        return self._public_key_container

    @public_key_container.setter
    def public_key_container(self, public_key_container):
        """Sets the public_key_container of this RoomUser.


        :param public_key_container: The public_key_container of this RoomUser.
        :type public_key_container: PublicKeyContainer
        """

        self._public_key_container = public_key_container

    @property
    def user_info(self):
        """Gets the user_info of this RoomUser.


        :return: The user_info of this RoomUser.
        :rtype: UserInfo
        """
        return self._user_info

    @user_info.setter
    def user_info(self, user_info):
        """Sets the user_info of this RoomUser.


        :param user_info: The user_info of this RoomUser.
        :type user_info: UserInfo
        """
        if user_info is None:
            raise ValueError("Invalid value for `user_info`, must not be `None`")

        self._user_info = user_info
