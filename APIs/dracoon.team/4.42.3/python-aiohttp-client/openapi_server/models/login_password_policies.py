# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.character_rules import CharacterRules
from openapi_server.models.password_expiration import PasswordExpiration
from openapi_server.models.user_info import UserInfo
from openapi_server.models.user_lockout import UserLockout
from openapi_server import util


class LoginPasswordPolicies(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_rules: CharacterRules=None, min_length: int=None, number_of_archived_passwords: int=None, password_expiration: PasswordExpiration=None, reject_dictionary_words: bool=None, reject_keyboard_patterns: bool=None, reject_user_info: bool=None, updated_at: datetime=None, updated_by: UserInfo=None, user_lockout: UserLockout=None):
        """LoginPasswordPolicies - a model defined in OpenAPI

        :param character_rules: The character_rules of this LoginPasswordPolicies.
        :param min_length: The min_length of this LoginPasswordPolicies.
        :param number_of_archived_passwords: The number_of_archived_passwords of this LoginPasswordPolicies.
        :param password_expiration: The password_expiration of this LoginPasswordPolicies.
        :param reject_dictionary_words: The reject_dictionary_words of this LoginPasswordPolicies.
        :param reject_keyboard_patterns: The reject_keyboard_patterns of this LoginPasswordPolicies.
        :param reject_user_info: The reject_user_info of this LoginPasswordPolicies.
        :param updated_at: The updated_at of this LoginPasswordPolicies.
        :param updated_by: The updated_by of this LoginPasswordPolicies.
        :param user_lockout: The user_lockout of this LoginPasswordPolicies.
        """
        self.openapi_types = {
            'character_rules': CharacterRules,
            'min_length': int,
            'number_of_archived_passwords': int,
            'password_expiration': PasswordExpiration,
            'reject_dictionary_words': bool,
            'reject_keyboard_patterns': bool,
            'reject_user_info': bool,
            'updated_at': datetime,
            'updated_by': UserInfo,
            'user_lockout': UserLockout
        }

        self.attribute_map = {
            'character_rules': 'characterRules',
            'min_length': 'minLength',
            'number_of_archived_passwords': 'numberOfArchivedPasswords',
            'password_expiration': 'passwordExpiration',
            'reject_dictionary_words': 'rejectDictionaryWords',
            'reject_keyboard_patterns': 'rejectKeyboardPatterns',
            'reject_user_info': 'rejectUserInfo',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy',
            'user_lockout': 'userLockout'
        }

        self._character_rules = character_rules
        self._min_length = min_length
        self._number_of_archived_passwords = number_of_archived_passwords
        self._password_expiration = password_expiration
        self._reject_dictionary_words = reject_dictionary_words
        self._reject_keyboard_patterns = reject_keyboard_patterns
        self._reject_user_info = reject_user_info
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._user_lockout = user_lockout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginPasswordPolicies':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginPasswordPolicies of this LoginPasswordPolicies.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_rules(self):
        """Gets the character_rules of this LoginPasswordPolicies.


        :return: The character_rules of this LoginPasswordPolicies.
        :rtype: CharacterRules
        """
        return self._character_rules

    @character_rules.setter
    def character_rules(self, character_rules):
        """Sets the character_rules of this LoginPasswordPolicies.


        :param character_rules: The character_rules of this LoginPasswordPolicies.
        :type character_rules: CharacterRules
        """
        if character_rules is None:
            raise ValueError("Invalid value for `character_rules`, must not be `None`")

        self._character_rules = character_rules

    @property
    def min_length(self):
        """Gets the min_length of this LoginPasswordPolicies.

        Minimum number of characters a password must contain

        :return: The min_length of this LoginPasswordPolicies.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this LoginPasswordPolicies.

        Minimum number of characters a password must contain

        :param min_length: The min_length of this LoginPasswordPolicies.
        :type min_length: int
        """
        if min_length is None:
            raise ValueError("Invalid value for `min_length`, must not be `None`")
        if min_length is not None and min_length > 1024:
            raise ValueError("Invalid value for `min_length`, must be a value less than or equal to `1024`")
        if min_length is not None and min_length < 1:
            raise ValueError("Invalid value for `min_length`, must be a value greater than or equal to `1`")

        self._min_length = min_length

    @property
    def number_of_archived_passwords(self):
        """Gets the number_of_archived_passwords of this LoginPasswordPolicies.

        Number of passwords to archive  (must be between `0` and `10`; `0` means that password history is disabled)

        :return: The number_of_archived_passwords of this LoginPasswordPolicies.
        :rtype: int
        """
        return self._number_of_archived_passwords

    @number_of_archived_passwords.setter
    def number_of_archived_passwords(self, number_of_archived_passwords):
        """Sets the number_of_archived_passwords of this LoginPasswordPolicies.

        Number of passwords to archive  (must be between `0` and `10`; `0` means that password history is disabled)

        :param number_of_archived_passwords: The number_of_archived_passwords of this LoginPasswordPolicies.
        :type number_of_archived_passwords: int
        """
        if number_of_archived_passwords is None:
            raise ValueError("Invalid value for `number_of_archived_passwords`, must not be `None`")
        if number_of_archived_passwords is not None and number_of_archived_passwords > 10:
            raise ValueError("Invalid value for `number_of_archived_passwords`, must be a value less than or equal to `10`")
        if number_of_archived_passwords is not None and number_of_archived_passwords < 1:
            raise ValueError("Invalid value for `number_of_archived_passwords`, must be a value greater than or equal to `1`")

        self._number_of_archived_passwords = number_of_archived_passwords

    @property
    def password_expiration(self):
        """Gets the password_expiration of this LoginPasswordPolicies.


        :return: The password_expiration of this LoginPasswordPolicies.
        :rtype: PasswordExpiration
        """
        return self._password_expiration

    @password_expiration.setter
    def password_expiration(self, password_expiration):
        """Sets the password_expiration of this LoginPasswordPolicies.


        :param password_expiration: The password_expiration of this LoginPasswordPolicies.
        :type password_expiration: PasswordExpiration
        """
        if password_expiration is None:
            raise ValueError("Invalid value for `password_expiration`, must not be `None`")

        self._password_expiration = password_expiration

    @property
    def reject_dictionary_words(self):
        """Gets the reject_dictionary_words of this LoginPasswordPolicies.

        Determines whether a password must NOT contain word(s) from a dictionary

        :return: The reject_dictionary_words of this LoginPasswordPolicies.
        :rtype: bool
        """
        return self._reject_dictionary_words

    @reject_dictionary_words.setter
    def reject_dictionary_words(self, reject_dictionary_words):
        """Sets the reject_dictionary_words of this LoginPasswordPolicies.

        Determines whether a password must NOT contain word(s) from a dictionary

        :param reject_dictionary_words: The reject_dictionary_words of this LoginPasswordPolicies.
        :type reject_dictionary_words: bool
        """
        if reject_dictionary_words is None:
            raise ValueError("Invalid value for `reject_dictionary_words`, must not be `None`")

        self._reject_dictionary_words = reject_dictionary_words

    @property
    def reject_keyboard_patterns(self):
        """Gets the reject_keyboard_patterns of this LoginPasswordPolicies.

        Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)  (min. 4 character pattern)

        :return: The reject_keyboard_patterns of this LoginPasswordPolicies.
        :rtype: bool
        """
        return self._reject_keyboard_patterns

    @reject_keyboard_patterns.setter
    def reject_keyboard_patterns(self, reject_keyboard_patterns):
        """Sets the reject_keyboard_patterns of this LoginPasswordPolicies.

        Determines whether a password must NOT contain keyboard patterns (e.g. `qwertz`, `asdf`)  (min. 4 character pattern)

        :param reject_keyboard_patterns: The reject_keyboard_patterns of this LoginPasswordPolicies.
        :type reject_keyboard_patterns: bool
        """
        if reject_keyboard_patterns is None:
            raise ValueError("Invalid value for `reject_keyboard_patterns`, must not be `None`")

        self._reject_keyboard_patterns = reject_keyboard_patterns

    @property
    def reject_user_info(self):
        """Gets the reject_user_info of this LoginPasswordPolicies.

        Determines whether a password must NOT contain user info (first name, last name, email, user name)

        :return: The reject_user_info of this LoginPasswordPolicies.
        :rtype: bool
        """
        return self._reject_user_info

    @reject_user_info.setter
    def reject_user_info(self, reject_user_info):
        """Sets the reject_user_info of this LoginPasswordPolicies.

        Determines whether a password must NOT contain user info (first name, last name, email, user name)

        :param reject_user_info: The reject_user_info of this LoginPasswordPolicies.
        :type reject_user_info: bool
        """
        if reject_user_info is None:
            raise ValueError("Invalid value for `reject_user_info`, must not be `None`")

        self._reject_user_info = reject_user_info

    @property
    def updated_at(self):
        """Gets the updated_at of this LoginPasswordPolicies.

        Modification date

        :return: The updated_at of this LoginPasswordPolicies.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this LoginPasswordPolicies.

        Modification date

        :param updated_at: The updated_at of this LoginPasswordPolicies.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this LoginPasswordPolicies.


        :return: The updated_by of this LoginPasswordPolicies.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this LoginPasswordPolicies.


        :param updated_by: The updated_by of this LoginPasswordPolicies.
        :type updated_by: UserInfo
        """
        if updated_by is None:
            raise ValueError("Invalid value for `updated_by`, must not be `None`")

        self._updated_by = updated_by

    @property
    def user_lockout(self):
        """Gets the user_lockout of this LoginPasswordPolicies.


        :return: The user_lockout of this LoginPasswordPolicies.
        :rtype: UserLockout
        """
        return self._user_lockout

    @user_lockout.setter
    def user_lockout(self, user_lockout):
        """Sets the user_lockout of this LoginPasswordPolicies.


        :param user_lockout: The user_lockout of this LoginPasswordPolicies.
        :type user_lockout: UserLockout
        """
        if user_lockout is None:
            raise ValueError("Invalid value for `user_lockout`, must not be `None`")

        self._user_lockout = user_lockout
