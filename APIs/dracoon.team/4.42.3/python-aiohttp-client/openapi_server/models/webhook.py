# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, created_by: UserInfo=None, event_type_names: List[str]=None, expire_at: datetime=None, fail_status: int=None, id: int=None, is_enabled: bool=None, name: str=None, secret: str=None, updated_at: datetime=None, updated_by: UserInfo=None, url: str=None):
        """Webhook - a model defined in OpenAPI

        :param created_at: The created_at of this Webhook.
        :param created_by: The created_by of this Webhook.
        :param event_type_names: The event_type_names of this Webhook.
        :param expire_at: The expire_at of this Webhook.
        :param fail_status: The fail_status of this Webhook.
        :param id: The id of this Webhook.
        :param is_enabled: The is_enabled of this Webhook.
        :param name: The name of this Webhook.
        :param secret: The secret of this Webhook.
        :param updated_at: The updated_at of this Webhook.
        :param updated_by: The updated_by of this Webhook.
        :param url: The url of this Webhook.
        """
        self.openapi_types = {
            'created_at': datetime,
            'created_by': UserInfo,
            'event_type_names': List[str],
            'expire_at': datetime,
            'fail_status': int,
            'id': int,
            'is_enabled': bool,
            'name': str,
            'secret': str,
            'updated_at': datetime,
            'updated_by': UserInfo,
            'url': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'event_type_names': 'eventTypeNames',
            'expire_at': 'expireAt',
            'fail_status': 'failStatus',
            'id': 'id',
            'is_enabled': 'isEnabled',
            'name': 'name',
            'secret': 'secret',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy',
            'url': 'url'
        }

        self._created_at = created_at
        self._created_by = created_by
        self._event_type_names = event_type_names
        self._expire_at = expire_at
        self._fail_status = fail_status
        self._id = id
        self._is_enabled = is_enabled
        self._name = name
        self._secret = secret
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Webhook.

        Creation date

        :return: The created_at of this Webhook.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Webhook.

        Creation date

        :param created_at: The created_at of this Webhook.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Webhook.


        :return: The created_by of this Webhook.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Webhook.


        :param created_by: The created_by of this Webhook.
        :type created_by: UserInfo
        """

        self._created_by = created_by

    @property
    def event_type_names(self):
        """Gets the event_type_names of this Webhook.

        List of names of event types

        :return: The event_type_names of this Webhook.
        :rtype: List[str]
        """
        return self._event_type_names

    @event_type_names.setter
    def event_type_names(self, event_type_names):
        """Sets the event_type_names of this Webhook.

        List of names of event types

        :param event_type_names: The event_type_names of this Webhook.
        :type event_type_names: List[str]
        """
        if event_type_names is None:
            raise ValueError("Invalid value for `event_type_names`, must not be `None`")

        self._event_type_names = event_type_names

    @property
    def expire_at(self):
        """Gets the expire_at of this Webhook.

        Expiration date / time

        :return: The expire_at of this Webhook.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this Webhook.

        Expiration date / time

        :param expire_at: The expire_at of this Webhook.
        :type expire_at: datetime
        """
        if expire_at is None:
            raise ValueError("Invalid value for `expire_at`, must not be `None`")

        self._expire_at = expire_at

    @property
    def fail_status(self):
        """Gets the fail_status of this Webhook.

        Last HTTP status code when a webhook is disabled due to delivery failures

        :return: The fail_status of this Webhook.
        :rtype: int
        """
        return self._fail_status

    @fail_status.setter
    def fail_status(self, fail_status):
        """Sets the fail_status of this Webhook.

        Last HTTP status code when a webhook is disabled due to delivery failures

        :param fail_status: The fail_status of this Webhook.
        :type fail_status: int
        """

        self._fail_status = fail_status

    @property
    def id(self):
        """Gets the id of this Webhook.

        ID

        :return: The id of this Webhook.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        ID

        :param id: The id of this Webhook.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this Webhook.

        Is enabled

        :return: The is_enabled of this Webhook.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this Webhook.

        Is enabled

        :param is_enabled: The is_enabled of this Webhook.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this Webhook.

        Name

        :return: The name of this Webhook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Webhook.

        Name

        :param name: The name of this Webhook.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this Webhook.

        Secret; used for event message signatures

        :return: The secret of this Webhook.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Webhook.

        Secret; used for event message signatures

        :param secret: The secret of this Webhook.
        :type secret: str
        """

        self._secret = secret

    @property
    def updated_at(self):
        """Gets the updated_at of this Webhook.

        Modification date

        :return: The updated_at of this Webhook.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Webhook.

        Modification date

        :param updated_at: The updated_at of this Webhook.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Webhook.


        :return: The updated_by of this Webhook.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Webhook.


        :param updated_by: The updated_by of this Webhook.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by

    @property
    def url(self):
        """Gets the url of this Webhook.

        URL

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        URL

        :param url: The url of this Webhook.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
