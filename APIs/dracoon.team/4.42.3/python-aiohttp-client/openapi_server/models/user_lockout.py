# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserLockout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, lockout_period: int=None, max_number_of_login_failures: int=None):
        """UserLockout - a model defined in OpenAPI

        :param enabled: The enabled of this UserLockout.
        :param lockout_period: The lockout_period of this UserLockout.
        :param max_number_of_login_failures: The max_number_of_login_failures of this UserLockout.
        """
        self.openapi_types = {
            'enabled': bool,
            'lockout_period': int,
            'max_number_of_login_failures': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'lockout_period': 'lockoutPeriod',
            'max_number_of_login_failures': 'maxNumberOfLoginFailures'
        }

        self._enabled = enabled
        self._lockout_period = lockout_period
        self._max_number_of_login_failures = max_number_of_login_failures

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLockout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserLockout of this UserLockout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UserLockout.

        Determines whether user lockout is enabled

        :return: The enabled of this UserLockout.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UserLockout.

        Determines whether user lockout is enabled

        :param enabled: The enabled of this UserLockout.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def lockout_period(self):
        """Gets the lockout_period of this UserLockout.

        Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded

        :return: The lockout_period of this UserLockout.
        :rtype: int
        """
        return self._lockout_period

    @lockout_period.setter
    def lockout_period(self, lockout_period):
        """Sets the lockout_period of this UserLockout.

        Amount of minutes a user has to wait to make another login attempt after `maxNumberOfLoginFailures` has been exceeded

        :param lockout_period: The lockout_period of this UserLockout.
        :type lockout_period: int
        """

        self._lockout_period = lockout_period

    @property
    def max_number_of_login_failures(self):
        """Gets the max_number_of_login_failures of this UserLockout.

        Maximum allowed number of failed login attempts

        :return: The max_number_of_login_failures of this UserLockout.
        :rtype: int
        """
        return self._max_number_of_login_failures

    @max_number_of_login_failures.setter
    def max_number_of_login_failures(self, max_number_of_login_failures):
        """Sets the max_number_of_login_failures of this UserLockout.

        Maximum allowed number of failed login attempts

        :param max_number_of_login_failures: The max_number_of_login_failures of this UserLockout.
        :type max_number_of_login_failures: int
        """

        self._max_number_of_login_failures = max_number_of_login_failures
