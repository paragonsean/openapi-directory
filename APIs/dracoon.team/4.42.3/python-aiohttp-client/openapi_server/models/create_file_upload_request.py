# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.object_expiration import ObjectExpiration
from openapi_server import util


class CreateFileUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification: int=None, direct_s3_upload: bool=False, expiration: ObjectExpiration=None, name: str=None, notes: str=None, parent_id: int=None, size: int=None, timestamp_creation: datetime=None, timestamp_modification: datetime=None):
        """CreateFileUploadRequest - a model defined in OpenAPI

        :param classification: The classification of this CreateFileUploadRequest.
        :param direct_s3_upload: The direct_s3_upload of this CreateFileUploadRequest.
        :param expiration: The expiration of this CreateFileUploadRequest.
        :param name: The name of this CreateFileUploadRequest.
        :param notes: The notes of this CreateFileUploadRequest.
        :param parent_id: The parent_id of this CreateFileUploadRequest.
        :param size: The size of this CreateFileUploadRequest.
        :param timestamp_creation: The timestamp_creation of this CreateFileUploadRequest.
        :param timestamp_modification: The timestamp_modification of this CreateFileUploadRequest.
        """
        self.openapi_types = {
            'classification': int,
            'direct_s3_upload': bool,
            'expiration': ObjectExpiration,
            'name': str,
            'notes': str,
            'parent_id': int,
            'size': int,
            'timestamp_creation': datetime,
            'timestamp_modification': datetime
        }

        self.attribute_map = {
            'classification': 'classification',
            'direct_s3_upload': 'directS3Upload',
            'expiration': 'expiration',
            'name': 'name',
            'notes': 'notes',
            'parent_id': 'parentId',
            'size': 'size',
            'timestamp_creation': 'timestampCreation',
            'timestamp_modification': 'timestampModification'
        }

        self._classification = classification
        self._direct_s3_upload = direct_s3_upload
        self._expiration = expiration
        self._name = name
        self._notes = notes
        self._parent_id = parent_id
        self._size = size
        self._timestamp_creation = timestamp_creation
        self._timestamp_modification = timestamp_modification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateFileUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateFileUploadRequest of this CreateFileUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification(self):
        """Gets the classification of this CreateFileUploadRequest.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :return: The classification of this CreateFileUploadRequest.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this CreateFileUploadRequest.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :param classification: The classification of this CreateFileUploadRequest.
        :type classification: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def direct_s3_upload(self):
        """Gets the direct_s3_upload of this CreateFileUploadRequest.

        &#128640; Since v4.15.0  Upload direct to S3

        :return: The direct_s3_upload of this CreateFileUploadRequest.
        :rtype: bool
        """
        return self._direct_s3_upload

    @direct_s3_upload.setter
    def direct_s3_upload(self, direct_s3_upload):
        """Sets the direct_s3_upload of this CreateFileUploadRequest.

        &#128640; Since v4.15.0  Upload direct to S3

        :param direct_s3_upload: The direct_s3_upload of this CreateFileUploadRequest.
        :type direct_s3_upload: bool
        """

        self._direct_s3_upload = direct_s3_upload

    @property
    def expiration(self):
        """Gets the expiration of this CreateFileUploadRequest.


        :return: The expiration of this CreateFileUploadRequest.
        :rtype: ObjectExpiration
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CreateFileUploadRequest.


        :param expiration: The expiration of this CreateFileUploadRequest.
        :type expiration: ObjectExpiration
        """

        self._expiration = expiration

    @property
    def name(self):
        """Gets the name of this CreateFileUploadRequest.

        File name

        :return: The name of this CreateFileUploadRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateFileUploadRequest.

        File name

        :param name: The name of this CreateFileUploadRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CreateFileUploadRequest.

        User notes  Use empty string to remove.

        :return: The notes of this CreateFileUploadRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateFileUploadRequest.

        User notes  Use empty string to remove.

        :param notes: The notes of this CreateFileUploadRequest.
        :type notes: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateFileUploadRequest.

        Parent node ID (room or folder)

        :return: The parent_id of this CreateFileUploadRequest.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateFileUploadRequest.

        Parent node ID (room or folder)

        :param parent_id: The parent_id of this CreateFileUploadRequest.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def size(self):
        """Gets the size of this CreateFileUploadRequest.

        File size in byte

        :return: The size of this CreateFileUploadRequest.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this CreateFileUploadRequest.

        File size in byte

        :param size: The size of this CreateFileUploadRequest.
        :type size: int
        """

        self._size = size

    @property
    def timestamp_creation(self):
        """Gets the timestamp_creation of this CreateFileUploadRequest.

        &#128640; Since v4.22.0  Time the node was created on external file system  (default: current server datetime in UTC format)

        :return: The timestamp_creation of this CreateFileUploadRequest.
        :rtype: datetime
        """
        return self._timestamp_creation

    @timestamp_creation.setter
    def timestamp_creation(self, timestamp_creation):
        """Sets the timestamp_creation of this CreateFileUploadRequest.

        &#128640; Since v4.22.0  Time the node was created on external file system  (default: current server datetime in UTC format)

        :param timestamp_creation: The timestamp_creation of this CreateFileUploadRequest.
        :type timestamp_creation: datetime
        """

        self._timestamp_creation = timestamp_creation

    @property
    def timestamp_modification(self):
        """Gets the timestamp_modification of this CreateFileUploadRequest.

        &#128640; Since v4.22.0  Time the content of a node was last modified on external file system  (default: current server datetime in UTC format)

        :return: The timestamp_modification of this CreateFileUploadRequest.
        :rtype: datetime
        """
        return self._timestamp_modification

    @timestamp_modification.setter
    def timestamp_modification(self, timestamp_modification):
        """Sets the timestamp_modification of this CreateFileUploadRequest.

        &#128640; Since v4.22.0  Time the content of a node was last modified on external file system  (default: current server datetime in UTC format)

        :param timestamp_modification: The timestamp_modification of this CreateFileUploadRequest.
        :type timestamp_modification: datetime
        """

        self._timestamp_modification = timestamp_modification
