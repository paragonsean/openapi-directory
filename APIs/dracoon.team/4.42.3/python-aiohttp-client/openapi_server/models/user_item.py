# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_list import RoleList
from openapi_server.models.user_attributes import UserAttributes
from openapi_server import util


class UserItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_uuid: str=None, created_at: datetime=None, email: str=None, expire_at: datetime=None, first_name: str=None, gender: str='n', has_manageable_rooms: bool=None, home_room_id: int=None, id: int=None, is_encryption_enabled: bool=None, is_locked: bool=False, last_login_success_at: datetime=None, last_name: str=None, lock_status: int=None, login: str=None, phone: str=None, title: str=None, user_attributes: UserAttributes=None, user_name: str=None, user_roles: RoleList=None):
        """UserItem - a model defined in OpenAPI

        :param avatar_uuid: The avatar_uuid of this UserItem.
        :param created_at: The created_at of this UserItem.
        :param email: The email of this UserItem.
        :param expire_at: The expire_at of this UserItem.
        :param first_name: The first_name of this UserItem.
        :param gender: The gender of this UserItem.
        :param has_manageable_rooms: The has_manageable_rooms of this UserItem.
        :param home_room_id: The home_room_id of this UserItem.
        :param id: The id of this UserItem.
        :param is_encryption_enabled: The is_encryption_enabled of this UserItem.
        :param is_locked: The is_locked of this UserItem.
        :param last_login_success_at: The last_login_success_at of this UserItem.
        :param last_name: The last_name of this UserItem.
        :param lock_status: The lock_status of this UserItem.
        :param login: The login of this UserItem.
        :param phone: The phone of this UserItem.
        :param title: The title of this UserItem.
        :param user_attributes: The user_attributes of this UserItem.
        :param user_name: The user_name of this UserItem.
        :param user_roles: The user_roles of this UserItem.
        """
        self.openapi_types = {
            'avatar_uuid': str,
            'created_at': datetime,
            'email': str,
            'expire_at': datetime,
            'first_name': str,
            'gender': str,
            'has_manageable_rooms': bool,
            'home_room_id': int,
            'id': int,
            'is_encryption_enabled': bool,
            'is_locked': bool,
            'last_login_success_at': datetime,
            'last_name': str,
            'lock_status': int,
            'login': str,
            'phone': str,
            'title': str,
            'user_attributes': UserAttributes,
            'user_name': str,
            'user_roles': RoleList
        }

        self.attribute_map = {
            'avatar_uuid': 'avatarUuid',
            'created_at': 'createdAt',
            'email': 'email',
            'expire_at': 'expireAt',
            'first_name': 'firstName',
            'gender': 'gender',
            'has_manageable_rooms': 'hasManageableRooms',
            'home_room_id': 'homeRoomId',
            'id': 'id',
            'is_encryption_enabled': 'isEncryptionEnabled',
            'is_locked': 'isLocked',
            'last_login_success_at': 'lastLoginSuccessAt',
            'last_name': 'lastName',
            'lock_status': 'lockStatus',
            'login': 'login',
            'phone': 'phone',
            'title': 'title',
            'user_attributes': 'userAttributes',
            'user_name': 'userName',
            'user_roles': 'userRoles'
        }

        self._avatar_uuid = avatar_uuid
        self._created_at = created_at
        self._email = email
        self._expire_at = expire_at
        self._first_name = first_name
        self._gender = gender
        self._has_manageable_rooms = has_manageable_rooms
        self._home_room_id = home_room_id
        self._id = id
        self._is_encryption_enabled = is_encryption_enabled
        self._is_locked = is_locked
        self._last_login_success_at = last_login_success_at
        self._last_name = last_name
        self._lock_status = lock_status
        self._login = login
        self._phone = phone
        self._title = title
        self._user_attributes = user_attributes
        self._user_name = user_name
        self._user_roles = user_roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserItem of this UserItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_uuid(self):
        """Gets the avatar_uuid of this UserItem.

        &#128640; Since v4.11.0  Avatar UUID

        :return: The avatar_uuid of this UserItem.
        :rtype: str
        """
        return self._avatar_uuid

    @avatar_uuid.setter
    def avatar_uuid(self, avatar_uuid):
        """Sets the avatar_uuid of this UserItem.

        &#128640; Since v4.11.0  Avatar UUID

        :param avatar_uuid: The avatar_uuid of this UserItem.
        :type avatar_uuid: str
        """
        if avatar_uuid is None:
            raise ValueError("Invalid value for `avatar_uuid`, must not be `None`")

        self._avatar_uuid = avatar_uuid

    @property
    def created_at(self):
        """Gets the created_at of this UserItem.

        Creation date

        :return: The created_at of this UserItem.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserItem.

        Creation date

        :param created_at: The created_at of this UserItem.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this UserItem.

        Email 

        :return: The email of this UserItem.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserItem.

        Email 

        :param email: The email of this UserItem.
        :type email: str
        """

        self._email = email

    @property
    def expire_at(self):
        """Gets the expire_at of this UserItem.

        Expiration date

        :return: The expire_at of this UserItem.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this UserItem.

        Expiration date

        :param expire_at: The expire_at of this UserItem.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def first_name(self):
        """Gets the first_name of this UserItem.

        User first name

        :return: The first_name of this UserItem.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserItem.

        User first name

        :param first_name: The first_name of this UserItem.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this UserItem.

        &#128679; Deprecated since v4.12.0  Gender

        :return: The gender of this UserItem.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserItem.

        &#128679; Deprecated since v4.12.0  Gender

        :param gender: The gender of this UserItem.
        :type gender: str
        """

        self._gender = gender

    @property
    def has_manageable_rooms(self):
        """Gets the has_manageable_rooms of this UserItem.

        &#128679; Deprecated since v4.27.0  User has manageable rooms

        :return: The has_manageable_rooms of this UserItem.
        :rtype: bool
        """
        return self._has_manageable_rooms

    @has_manageable_rooms.setter
    def has_manageable_rooms(self, has_manageable_rooms):
        """Sets the has_manageable_rooms of this UserItem.

        &#128679; Deprecated since v4.27.0  User has manageable rooms

        :param has_manageable_rooms: The has_manageable_rooms of this UserItem.
        :type has_manageable_rooms: bool
        """

        self._has_manageable_rooms = has_manageable_rooms

    @property
    def home_room_id(self):
        """Gets the home_room_id of this UserItem.

        Homeroom ID

        :return: The home_room_id of this UserItem.
        :rtype: int
        """
        return self._home_room_id

    @home_room_id.setter
    def home_room_id(self, home_room_id):
        """Sets the home_room_id of this UserItem.

        Homeroom ID

        :param home_room_id: The home_room_id of this UserItem.
        :type home_room_id: int
        """

        self._home_room_id = home_room_id

    @property
    def id(self):
        """Gets the id of this UserItem.

        Unique identifier for the user

        :return: The id of this UserItem.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserItem.

        Unique identifier for the user

        :param id: The id of this UserItem.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_encryption_enabled(self):
        """Gets the is_encryption_enabled of this UserItem.

        User has generated private key.  Possible if client-side encryption is active for this customer

        :return: The is_encryption_enabled of this UserItem.
        :rtype: bool
        """
        return self._is_encryption_enabled

    @is_encryption_enabled.setter
    def is_encryption_enabled(self, is_encryption_enabled):
        """Sets the is_encryption_enabled of this UserItem.

        User has generated private key.  Possible if client-side encryption is active for this customer

        :param is_encryption_enabled: The is_encryption_enabled of this UserItem.
        :type is_encryption_enabled: bool
        """

        self._is_encryption_enabled = is_encryption_enabled

    @property
    def is_locked(self):
        """Gets the is_locked of this UserItem.

        User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.

        :return: The is_locked of this UserItem.
        :rtype: bool
        """
        return self._is_locked

    @is_locked.setter
    def is_locked(self, is_locked):
        """Sets the is_locked of this UserItem.

        User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.

        :param is_locked: The is_locked of this UserItem.
        :type is_locked: bool
        """
        if is_locked is None:
            raise ValueError("Invalid value for `is_locked`, must not be `None`")

        self._is_locked = is_locked

    @property
    def last_login_success_at(self):
        """Gets the last_login_success_at of this UserItem.

        Last successful logon date

        :return: The last_login_success_at of this UserItem.
        :rtype: datetime
        """
        return self._last_login_success_at

    @last_login_success_at.setter
    def last_login_success_at(self, last_login_success_at):
        """Sets the last_login_success_at of this UserItem.

        Last successful logon date

        :param last_login_success_at: The last_login_success_at of this UserItem.
        :type last_login_success_at: datetime
        """

        self._last_login_success_at = last_login_success_at

    @property
    def last_name(self):
        """Gets the last_name of this UserItem.

        User last name

        :return: The last_name of this UserItem.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserItem.

        User last name

        :param last_name: The last_name of this UserItem.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def lock_status(self):
        """Gets the lock_status of this UserItem.

        &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.

        :return: The lock_status of this UserItem.
        :rtype: int
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this UserItem.

        &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.

        :param lock_status: The lock_status of this UserItem.
        :type lock_status: int
        """
        if lock_status is None:
            raise ValueError("Invalid value for `lock_status`, must not be `None`")

        self._lock_status = lock_status

    @property
    def login(self):
        """Gets the login of this UserItem.

        &#128679; Deprecated since v4.13.0  User login name

        :return: The login of this UserItem.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserItem.

        &#128679; Deprecated since v4.13.0  User login name

        :param login: The login of this UserItem.
        :type login: str
        """
        if login is None:
            raise ValueError("Invalid value for `login`, must not be `None`")

        self._login = login

    @property
    def phone(self):
        """Gets the phone of this UserItem.

        Phone number

        :return: The phone of this UserItem.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserItem.

        Phone number

        :param phone: The phone of this UserItem.
        :type phone: str
        """

        self._phone = phone

    @property
    def title(self):
        """Gets the title of this UserItem.

        &#128679; Deprecated since v4.18.0  Job title

        :return: The title of this UserItem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserItem.

        &#128679; Deprecated since v4.18.0  Job title

        :param title: The title of this UserItem.
        :type title: str
        """

        self._title = title

    @property
    def user_attributes(self):
        """Gets the user_attributes of this UserItem.


        :return: The user_attributes of this UserItem.
        :rtype: UserAttributes
        """
        return self._user_attributes

    @user_attributes.setter
    def user_attributes(self, user_attributes):
        """Sets the user_attributes of this UserItem.


        :param user_attributes: The user_attributes of this UserItem.
        :type user_attributes: UserAttributes
        """

        self._user_attributes = user_attributes

    @property
    def user_name(self):
        """Gets the user_name of this UserItem.

        &#128640; Since v4.13.0  Username

        :return: The user_name of this UserItem.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserItem.

        &#128640; Since v4.13.0  Username

        :param user_name: The user_name of this UserItem.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def user_roles(self):
        """Gets the user_roles of this UserItem.


        :return: The user_roles of this UserItem.
        :rtype: RoleList
        """
        return self._user_roles

    @user_roles.setter
    def user_roles(self, user_roles):
        """Sets the user_roles of this UserItem.


        :param user_roles: The user_roles of this UserItem.
        :type user_roles: RoleList
        """

        self._user_roles = user_roles
