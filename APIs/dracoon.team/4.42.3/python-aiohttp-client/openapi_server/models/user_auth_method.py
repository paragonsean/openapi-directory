# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_entry import KeyValueEntry
from openapi_server import util


class UserAuthMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_id: str=None, is_enabled: bool=None, options: List[KeyValueEntry]=None):
        """UserAuthMethod - a model defined in OpenAPI

        :param auth_id: The auth_id of this UserAuthMethod.
        :param is_enabled: The is_enabled of this UserAuthMethod.
        :param options: The options of this UserAuthMethod.
        """
        self.openapi_types = {
            'auth_id': str,
            'is_enabled': bool,
            'options': List[KeyValueEntry]
        }

        self.attribute_map = {
            'auth_id': 'authId',
            'is_enabled': 'isEnabled',
            'options': 'options'
        }

        self._auth_id = auth_id
        self._is_enabled = is_enabled
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAuthMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAuthMethod of this UserAuthMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_id(self):
        """Gets the auth_id of this UserAuthMethod.

        Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :return: The auth_id of this UserAuthMethod.
        :rtype: str
        """
        return self._auth_id

    @auth_id.setter
    def auth_id(self, auth_id):
        """Sets the auth_id of this UserAuthMethod.

        Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :param auth_id: The auth_id of this UserAuthMethod.
        :type auth_id: str
        """
        if auth_id is None:
            raise ValueError("Invalid value for `auth_id`, must not be `None`")

        self._auth_id = auth_id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this UserAuthMethod.

        Is enabled

        :return: The is_enabled of this UserAuthMethod.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this UserAuthMethod.

        Is enabled

        :param is_enabled: The is_enabled of this UserAuthMethod.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def options(self):
        """Gets the options of this UserAuthMethod.

        Authentication method options

        :return: The options of this UserAuthMethod.
        :rtype: List[KeyValueEntry]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this UserAuthMethod.

        Authentication method options

        :param options: The options of this UserAuthMethod.
        :type options: List[KeyValueEntry]
        """

        self._options = options
