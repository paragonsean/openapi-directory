# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RoomWebhookAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_assigned: bool=None, webhook_id: int=None):
        """RoomWebhookAssignment - a model defined in OpenAPI

        :param is_assigned: The is_assigned of this RoomWebhookAssignment.
        :param webhook_id: The webhook_id of this RoomWebhookAssignment.
        """
        self.openapi_types = {
            'is_assigned': bool,
            'webhook_id': int
        }

        self.attribute_map = {
            'is_assigned': 'isAssigned',
            'webhook_id': 'webhookId'
        }

        self._is_assigned = is_assigned
        self._webhook_id = webhook_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RoomWebhookAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RoomWebhookAssignment of this RoomWebhookAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_assigned(self):
        """Gets the is_assigned of this RoomWebhookAssignment.

        Determines whether webhook is assigned to the room.

        :return: The is_assigned of this RoomWebhookAssignment.
        :rtype: bool
        """
        return self._is_assigned

    @is_assigned.setter
    def is_assigned(self, is_assigned):
        """Sets the is_assigned of this RoomWebhookAssignment.

        Determines whether webhook is assigned to the room.

        :param is_assigned: The is_assigned of this RoomWebhookAssignment.
        :type is_assigned: bool
        """
        if is_assigned is None:
            raise ValueError("Invalid value for `is_assigned`, must not be `None`")

        self._is_assigned = is_assigned

    @property
    def webhook_id(self):
        """Gets the webhook_id of this RoomWebhookAssignment.

        Webhook ID

        :return: The webhook_id of this RoomWebhookAssignment.
        :rtype: int
        """
        return self._webhook_id

    @webhook_id.setter
    def webhook_id(self, webhook_id):
        """Sets the webhook_id of this RoomWebhookAssignment.

        Webhook ID

        :param webhook_id: The webhook_id of this RoomWebhookAssignment.
        :type webhook_id: int
        """
        if webhook_id is None:
            raise ValueError("Invalid value for `webhook_id`, must not be `None`")

        self._webhook_id = webhook_id
