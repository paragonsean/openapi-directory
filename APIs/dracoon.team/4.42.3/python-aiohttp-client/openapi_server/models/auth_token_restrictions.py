# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthTokenRestrictions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token_validity: int=None, refresh_token_validity: int=None, restriction_enabled: bool=None):
        """AuthTokenRestrictions - a model defined in OpenAPI

        :param access_token_validity: The access_token_validity of this AuthTokenRestrictions.
        :param refresh_token_validity: The refresh_token_validity of this AuthTokenRestrictions.
        :param restriction_enabled: The restriction_enabled of this AuthTokenRestrictions.
        """
        self.openapi_types = {
            'access_token_validity': int,
            'refresh_token_validity': int,
            'restriction_enabled': bool
        }

        self.attribute_map = {
            'access_token_validity': 'accessTokenValidity',
            'refresh_token_validity': 'refreshTokenValidity',
            'restriction_enabled': 'restrictionEnabled'
        }

        self._access_token_validity = access_token_validity
        self._refresh_token_validity = refresh_token_validity
        self._restriction_enabled = restriction_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthTokenRestrictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthTokenRestrictions of this AuthTokenRestrictions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token_validity(self):
        """Gets the access_token_validity of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth access token validity (in seconds)

        :return: The access_token_validity of this AuthTokenRestrictions.
        :rtype: int
        """
        return self._access_token_validity

    @access_token_validity.setter
    def access_token_validity(self, access_token_validity):
        """Sets the access_token_validity of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth access token validity (in seconds)

        :param access_token_validity: The access_token_validity of this AuthTokenRestrictions.
        :type access_token_validity: int
        """

        self._access_token_validity = access_token_validity

    @property
    def refresh_token_validity(self):
        """Gets the refresh_token_validity of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth refresh token validity (in seconds)

        :return: The refresh_token_validity of this AuthTokenRestrictions.
        :rtype: int
        """
        return self._refresh_token_validity

    @refresh_token_validity.setter
    def refresh_token_validity(self, refresh_token_validity):
        """Sets the refresh_token_validity of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Restricted OAuth refresh token validity (in seconds)

        :param refresh_token_validity: The refresh_token_validity of this AuthTokenRestrictions.
        :type refresh_token_validity: int
        """

        self._refresh_token_validity = refresh_token_validity

    @property
    def restriction_enabled(self):
        """Gets the restriction_enabled of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Defines if OAuth token restrictions are enabled

        :return: The restriction_enabled of this AuthTokenRestrictions.
        :rtype: bool
        """
        return self._restriction_enabled

    @restriction_enabled.setter
    def restriction_enabled(self, restriction_enabled):
        """Sets the restriction_enabled of this AuthTokenRestrictions.

        &#128640; Since v4.13.0  Defines if OAuth token restrictions are enabled

        :param restriction_enabled: The restriction_enabled of this AuthTokenRestrictions.
        :type restriction_enabled: bool
        """

        self._restriction_enabled = restriction_enabled
