# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NodePermissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, change: bool=None, create: bool=None, delete: bool=None, delete_recycle_bin: bool=None, manage: bool=None, manage_download_share: bool=None, manage_upload_share: bool=None, read: bool=None, read_recycle_bin: bool=None, restore_recycle_bin: bool=None):
        """NodePermissions - a model defined in OpenAPI

        :param change: The change of this NodePermissions.
        :param create: The create of this NodePermissions.
        :param delete: The delete of this NodePermissions.
        :param delete_recycle_bin: The delete_recycle_bin of this NodePermissions.
        :param manage: The manage of this NodePermissions.
        :param manage_download_share: The manage_download_share of this NodePermissions.
        :param manage_upload_share: The manage_upload_share of this NodePermissions.
        :param read: The read of this NodePermissions.
        :param read_recycle_bin: The read_recycle_bin of this NodePermissions.
        :param restore_recycle_bin: The restore_recycle_bin of this NodePermissions.
        """
        self.openapi_types = {
            'change': bool,
            'create': bool,
            'delete': bool,
            'delete_recycle_bin': bool,
            'manage': bool,
            'manage_download_share': bool,
            'manage_upload_share': bool,
            'read': bool,
            'read_recycle_bin': bool,
            'restore_recycle_bin': bool
        }

        self.attribute_map = {
            'change': 'change',
            'create': 'create',
            'delete': 'delete',
            'delete_recycle_bin': 'deleteRecycleBin',
            'manage': 'manage',
            'manage_download_share': 'manageDownloadShare',
            'manage_upload_share': 'manageUploadShare',
            'read': 'read',
            'read_recycle_bin': 'readRecycleBin',
            'restore_recycle_bin': 'restoreRecycleBin'
        }

        self._change = change
        self._create = create
        self._delete = delete
        self._delete_recycle_bin = delete_recycle_bin
        self._manage = manage
        self._manage_download_share = manage_download_share
        self._manage_upload_share = manage_upload_share
        self._read = read
        self._read_recycle_bin = read_recycle_bin
        self._restore_recycle_bin = restore_recycle_bin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodePermissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodePermissions of this NodePermissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def change(self):
        """Gets the change of this NodePermissions.

        User / Group may update metadata of nodes: rename files and folders, change classification, etc.

        :return: The change of this NodePermissions.
        :rtype: bool
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this NodePermissions.

        User / Group may update metadata of nodes: rename files and folders, change classification, etc.

        :param change: The change of this NodePermissions.
        :type change: bool
        """
        if change is None:
            raise ValueError("Invalid value for `change`, must not be `None`")

        self._change = change

    @property
    def create(self):
        """Gets the create of this NodePermissions.

        User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.

        :return: The create of this NodePermissions.
        :rtype: bool
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this NodePermissions.

        User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.

        :param create: The create of this NodePermissions.
        :type create: bool
        """
        if create is None:
            raise ValueError("Invalid value for `create`, must not be `None`")

        self._create = create

    @property
    def delete(self):
        """Gets the delete of this NodePermissions.

        User / Group may overwrite and remove files / folders, move files from this room.

        :return: The delete of this NodePermissions.
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this NodePermissions.

        User / Group may overwrite and remove files / folders, move files from this room.

        :param delete: The delete of this NodePermissions.
        :type delete: bool
        """
        if delete is None:
            raise ValueError("Invalid value for `delete`, must not be `None`")

        self._delete = delete

    @property
    def delete_recycle_bin(self):
        """Gets the delete_recycle_bin of this NodePermissions.

        User / Group may permanently remove files / folders from the recycle bin.

        :return: The delete_recycle_bin of this NodePermissions.
        :rtype: bool
        """
        return self._delete_recycle_bin

    @delete_recycle_bin.setter
    def delete_recycle_bin(self, delete_recycle_bin):
        """Sets the delete_recycle_bin of this NodePermissions.

        User / Group may permanently remove files / folders from the recycle bin.

        :param delete_recycle_bin: The delete_recycle_bin of this NodePermissions.
        :type delete_recycle_bin: bool
        """
        if delete_recycle_bin is None:
            raise ValueError("Invalid value for `delete_recycle_bin`, must not be `None`")

        self._delete_recycle_bin = delete_recycle_bin

    @property
    def manage(self):
        """Gets the manage of this NodePermissions.

        User / Group may grant all of the above permissions to other users and groups independently,  may update room metadata and create / update / delete subordinary rooms, has all permissions.

        :return: The manage of this NodePermissions.
        :rtype: bool
        """
        return self._manage

    @manage.setter
    def manage(self, manage):
        """Sets the manage of this NodePermissions.

        User / Group may grant all of the above permissions to other users and groups independently,  may update room metadata and create / update / delete subordinary rooms, has all permissions.

        :param manage: The manage of this NodePermissions.
        :type manage: bool
        """
        if manage is None:
            raise ValueError("Invalid value for `manage`, must not be `None`")

        self._manage = manage

    @property
    def manage_download_share(self):
        """Gets the manage_download_share of this NodePermissions.

        User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.

        :return: The manage_download_share of this NodePermissions.
        :rtype: bool
        """
        return self._manage_download_share

    @manage_download_share.setter
    def manage_download_share(self, manage_download_share):
        """Sets the manage_download_share of this NodePermissions.

        User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.

        :param manage_download_share: The manage_download_share of this NodePermissions.
        :type manage_download_share: bool
        """
        if manage_download_share is None:
            raise ValueError("Invalid value for `manage_download_share`, must not be `None`")

        self._manage_download_share = manage_download_share

    @property
    def manage_upload_share(self):
        """Gets the manage_upload_share of this NodePermissions.

        User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.

        :return: The manage_upload_share of this NodePermissions.
        :rtype: bool
        """
        return self._manage_upload_share

    @manage_upload_share.setter
    def manage_upload_share(self, manage_upload_share):
        """Sets the manage_upload_share of this NodePermissions.

        User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.

        :param manage_upload_share: The manage_upload_share of this NodePermissions.
        :type manage_upload_share: bool
        """
        if manage_upload_share is None:
            raise ValueError("Invalid value for `manage_upload_share`, must not be `None`")

        self._manage_upload_share = manage_upload_share

    @property
    def read(self):
        """Gets the read of this NodePermissions.

        User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.

        :return: The read of this NodePermissions.
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this NodePermissions.

        User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.

        :param read: The read of this NodePermissions.
        :type read: bool
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")

        self._read = read

    @property
    def read_recycle_bin(self):
        """Gets the read_recycle_bin of this NodePermissions.

        User / Group may look up files / folders in the recycle bin.

        :return: The read_recycle_bin of this NodePermissions.
        :rtype: bool
        """
        return self._read_recycle_bin

    @read_recycle_bin.setter
    def read_recycle_bin(self, read_recycle_bin):
        """Sets the read_recycle_bin of this NodePermissions.

        User / Group may look up files / folders in the recycle bin.

        :param read_recycle_bin: The read_recycle_bin of this NodePermissions.
        :type read_recycle_bin: bool
        """
        if read_recycle_bin is None:
            raise ValueError("Invalid value for `read_recycle_bin`, must not be `None`")

        self._read_recycle_bin = read_recycle_bin

    @property
    def restore_recycle_bin(self):
        """Gets the restore_recycle_bin of this NodePermissions.

        User / Group may restore files / folders from recycle bin - room permissions required.

        :return: The restore_recycle_bin of this NodePermissions.
        :rtype: bool
        """
        return self._restore_recycle_bin

    @restore_recycle_bin.setter
    def restore_recycle_bin(self, restore_recycle_bin):
        """Sets the restore_recycle_bin of this NodePermissions.

        User / Group may restore files / folders from recycle bin - room permissions required.

        :param restore_recycle_bin: The restore_recycle_bin of this NodePermissions.
        :type restore_recycle_bin: bool
        """
        if restore_recycle_bin is None:
            raise ValueError("Invalid value for `restore_recycle_bin`, must not be `None`")

        self._restore_recycle_bin = restore_recycle_bin
