# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute1: str=None, attribute2: str=None, attribute3: str=None, auth_parent_source: str=None, auth_parent_target: str=None, customer_id: int=None, id: int=None, message: str=None, object_id1: int=None, object_id2: int=None, object_name1: str=None, object_name2: str=None, object_type1: int=None, object_type2: int=None, operation_id: int=None, operation_name: str=None, status: int=None, time: datetime=None, user_client: str=None, user_id: int=None, user_ip: str=None, user_name: str=None):
        """LogEvent - a model defined in OpenAPI

        :param attribute1: The attribute1 of this LogEvent.
        :param attribute2: The attribute2 of this LogEvent.
        :param attribute3: The attribute3 of this LogEvent.
        :param auth_parent_source: The auth_parent_source of this LogEvent.
        :param auth_parent_target: The auth_parent_target of this LogEvent.
        :param customer_id: The customer_id of this LogEvent.
        :param id: The id of this LogEvent.
        :param message: The message of this LogEvent.
        :param object_id1: The object_id1 of this LogEvent.
        :param object_id2: The object_id2 of this LogEvent.
        :param object_name1: The object_name1 of this LogEvent.
        :param object_name2: The object_name2 of this LogEvent.
        :param object_type1: The object_type1 of this LogEvent.
        :param object_type2: The object_type2 of this LogEvent.
        :param operation_id: The operation_id of this LogEvent.
        :param operation_name: The operation_name of this LogEvent.
        :param status: The status of this LogEvent.
        :param time: The time of this LogEvent.
        :param user_client: The user_client of this LogEvent.
        :param user_id: The user_id of this LogEvent.
        :param user_ip: The user_ip of this LogEvent.
        :param user_name: The user_name of this LogEvent.
        """
        self.openapi_types = {
            'attribute1': str,
            'attribute2': str,
            'attribute3': str,
            'auth_parent_source': str,
            'auth_parent_target': str,
            'customer_id': int,
            'id': int,
            'message': str,
            'object_id1': int,
            'object_id2': int,
            'object_name1': str,
            'object_name2': str,
            'object_type1': int,
            'object_type2': int,
            'operation_id': int,
            'operation_name': str,
            'status': int,
            'time': datetime,
            'user_client': str,
            'user_id': int,
            'user_ip': str,
            'user_name': str
        }

        self.attribute_map = {
            'attribute1': 'attribute1',
            'attribute2': 'attribute2',
            'attribute3': 'attribute3',
            'auth_parent_source': 'authParentSource',
            'auth_parent_target': 'authParentTarget',
            'customer_id': 'customerId',
            'id': 'id',
            'message': 'message',
            'object_id1': 'objectId1',
            'object_id2': 'objectId2',
            'object_name1': 'objectName1',
            'object_name2': 'objectName2',
            'object_type1': 'objectType1',
            'object_type2': 'objectType2',
            'operation_id': 'operationId',
            'operation_name': 'operationName',
            'status': 'status',
            'time': 'time',
            'user_client': 'userClient',
            'user_id': 'userId',
            'user_ip': 'userIp',
            'user_name': 'userName'
        }

        self._attribute1 = attribute1
        self._attribute2 = attribute2
        self._attribute3 = attribute3
        self._auth_parent_source = auth_parent_source
        self._auth_parent_target = auth_parent_target
        self._customer_id = customer_id
        self._id = id
        self._message = message
        self._object_id1 = object_id1
        self._object_id2 = object_id2
        self._object_name1 = object_name1
        self._object_name2 = object_name2
        self._object_type1 = object_type1
        self._object_type2 = object_type2
        self._operation_id = operation_id
        self._operation_name = operation_name
        self._status = status
        self._time = time
        self._user_client = user_client
        self._user_id = user_id
        self._user_ip = user_ip
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogEvent of this LogEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute1(self):
        """Gets the attribute1 of this LogEvent.

        Attribute 1

        :return: The attribute1 of this LogEvent.
        :rtype: str
        """
        return self._attribute1

    @attribute1.setter
    def attribute1(self, attribute1):
        """Sets the attribute1 of this LogEvent.

        Attribute 1

        :param attribute1: The attribute1 of this LogEvent.
        :type attribute1: str
        """

        self._attribute1 = attribute1

    @property
    def attribute2(self):
        """Gets the attribute2 of this LogEvent.

        Attribute 2

        :return: The attribute2 of this LogEvent.
        :rtype: str
        """
        return self._attribute2

    @attribute2.setter
    def attribute2(self, attribute2):
        """Sets the attribute2 of this LogEvent.

        Attribute 2

        :param attribute2: The attribute2 of this LogEvent.
        :type attribute2: str
        """

        self._attribute2 = attribute2

    @property
    def attribute3(self):
        """Gets the attribute3 of this LogEvent.

        Attribute 3

        :return: The attribute3 of this LogEvent.
        :rtype: str
        """
        return self._attribute3

    @attribute3.setter
    def attribute3(self, attribute3):
        """Sets the attribute3 of this LogEvent.

        Attribute 3

        :param attribute3: The attribute3 of this LogEvent.
        :type attribute3: str
        """

        self._attribute3 = attribute3

    @property
    def auth_parent_source(self):
        """Gets the auth_parent_source of this LogEvent.

        Auth parent source ID

        :return: The auth_parent_source of this LogEvent.
        :rtype: str
        """
        return self._auth_parent_source

    @auth_parent_source.setter
    def auth_parent_source(self, auth_parent_source):
        """Sets the auth_parent_source of this LogEvent.

        Auth parent source ID

        :param auth_parent_source: The auth_parent_source of this LogEvent.
        :type auth_parent_source: str
        """

        self._auth_parent_source = auth_parent_source

    @property
    def auth_parent_target(self):
        """Gets the auth_parent_target of this LogEvent.

        Auth parent target ID

        :return: The auth_parent_target of this LogEvent.
        :rtype: str
        """
        return self._auth_parent_target

    @auth_parent_target.setter
    def auth_parent_target(self, auth_parent_target):
        """Sets the auth_parent_target of this LogEvent.

        Auth parent target ID

        :param auth_parent_target: The auth_parent_target of this LogEvent.
        :type auth_parent_target: str
        """

        self._auth_parent_target = auth_parent_target

    @property
    def customer_id(self):
        """Gets the customer_id of this LogEvent.

        Unique identifier for the customer

        :return: The customer_id of this LogEvent.
        :rtype: int
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this LogEvent.

        Unique identifier for the customer

        :param customer_id: The customer_id of this LogEvent.
        :type customer_id: int
        """

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this LogEvent.

        Event ID

        :return: The id of this LogEvent.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogEvent.

        Event ID

        :param id: The id of this LogEvent.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this LogEvent.

        Event description

        :return: The message of this LogEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this LogEvent.

        Event description

        :param message: The message of this LogEvent.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def object_id1(self):
        """Gets the object_id1 of this LogEvent.

        Object ID 1

        :return: The object_id1 of this LogEvent.
        :rtype: int
        """
        return self._object_id1

    @object_id1.setter
    def object_id1(self, object_id1):
        """Sets the object_id1 of this LogEvent.

        Object ID 1

        :param object_id1: The object_id1 of this LogEvent.
        :type object_id1: int
        """

        self._object_id1 = object_id1

    @property
    def object_id2(self):
        """Gets the object_id2 of this LogEvent.

        Object ID 2

        :return: The object_id2 of this LogEvent.
        :rtype: int
        """
        return self._object_id2

    @object_id2.setter
    def object_id2(self, object_id2):
        """Sets the object_id2 of this LogEvent.

        Object ID 2

        :param object_id2: The object_id2 of this LogEvent.
        :type object_id2: int
        """

        self._object_id2 = object_id2

    @property
    def object_name1(self):
        """Gets the object_name1 of this LogEvent.

        Object name 1

        :return: The object_name1 of this LogEvent.
        :rtype: str
        """
        return self._object_name1

    @object_name1.setter
    def object_name1(self, object_name1):
        """Sets the object_name1 of this LogEvent.

        Object name 1

        :param object_name1: The object_name1 of this LogEvent.
        :type object_name1: str
        """

        self._object_name1 = object_name1

    @property
    def object_name2(self):
        """Gets the object_name2 of this LogEvent.

        Object name 2

        :return: The object_name2 of this LogEvent.
        :rtype: str
        """
        return self._object_name2

    @object_name2.setter
    def object_name2(self, object_name2):
        """Sets the object_name2 of this LogEvent.

        Object name 2

        :param object_name2: The object_name2 of this LogEvent.
        :type object_name2: str
        """

        self._object_name2 = object_name2

    @property
    def object_type1(self):
        """Gets the object_type1 of this LogEvent.

        Object type 1

        :return: The object_type1 of this LogEvent.
        :rtype: int
        """
        return self._object_type1

    @object_type1.setter
    def object_type1(self, object_type1):
        """Sets the object_type1 of this LogEvent.

        Object type 1

        :param object_type1: The object_type1 of this LogEvent.
        :type object_type1: int
        """

        self._object_type1 = object_type1

    @property
    def object_type2(self):
        """Gets the object_type2 of this LogEvent.

        Object type 2

        :return: The object_type2 of this LogEvent.
        :rtype: int
        """
        return self._object_type2

    @object_type2.setter
    def object_type2(self, object_type2):
        """Sets the object_type2 of this LogEvent.

        Object type 2

        :param object_type2: The object_type2 of this LogEvent.
        :type object_type2: int
        """

        self._object_type2 = object_type2

    @property
    def operation_id(self):
        """Gets the operation_id of this LogEvent.

        Operation type ID

        :return: The operation_id of this LogEvent.
        :rtype: int
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this LogEvent.

        Operation type ID

        :param operation_id: The operation_id of this LogEvent.
        :type operation_id: int
        """

        self._operation_id = operation_id

    @property
    def operation_name(self):
        """Gets the operation_name of this LogEvent.

        Operation name

        :return: The operation_name of this LogEvent.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this LogEvent.

        Operation name

        :param operation_name: The operation_name of this LogEvent.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def status(self):
        """Gets the status of this LogEvent.

        Operation status:  * `0` - Success  * `2` - Error

        :return: The status of this LogEvent.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this LogEvent.

        Operation status:  * `0` - Success  * `2` - Error

        :param status: The status of this LogEvent.
        :type status: int
        """
        allowed_values = [0, 2]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time(self):
        """Gets the time of this LogEvent.

        Event timestamp

        :return: The time of this LogEvent.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this LogEvent.

        Event timestamp

        :param time: The time of this LogEvent.
        :type time: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time

    @property
    def user_client(self):
        """Gets the user_client of this LogEvent.

        Client

        :return: The user_client of this LogEvent.
        :rtype: str
        """
        return self._user_client

    @user_client.setter
    def user_client(self, user_client):
        """Sets the user_client of this LogEvent.

        Client

        :param user_client: The user_client of this LogEvent.
        :type user_client: str
        """

        self._user_client = user_client

    @property
    def user_id(self):
        """Gets the user_id of this LogEvent.

        Unique identifier for the user

        :return: The user_id of this LogEvent.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this LogEvent.

        Unique identifier for the user

        :param user_id: The user_id of this LogEvent.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_ip(self):
        """Gets the user_ip of this LogEvent.

        User IP

        :return: The user_ip of this LogEvent.
        :rtype: str
        """
        return self._user_ip

    @user_ip.setter
    def user_ip(self, user_ip):
        """Sets the user_ip of this LogEvent.

        User IP

        :param user_ip: The user_ip of this LogEvent.
        :type user_ip: str
        """

        self._user_ip = user_ip

    @property
    def user_name(self):
        """Gets the user_name of this LogEvent.

        Username

        :return: The user_name of this LogEvent.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LogEvent.

        Username

        :param user_name: The user_name of this LogEvent.
        :type user_name: str
        """

        self._user_name = user_name
