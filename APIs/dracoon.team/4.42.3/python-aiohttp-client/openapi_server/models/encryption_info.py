# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EncryptionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_space_key_state: str=None, room_key_state: str=None, user_key_state: str=None):
        """EncryptionInfo - a model defined in OpenAPI

        :param data_space_key_state: The data_space_key_state of this EncryptionInfo.
        :param room_key_state: The room_key_state of this EncryptionInfo.
        :param user_key_state: The user_key_state of this EncryptionInfo.
        """
        self.openapi_types = {
            'data_space_key_state': str,
            'room_key_state': str,
            'user_key_state': str
        }

        self.attribute_map = {
            'data_space_key_state': 'dataSpaceKeyState',
            'room_key_state': 'roomKeyState',
            'user_key_state': 'userKeyState'
        }

        self._data_space_key_state = data_space_key_state
        self._room_key_state = room_key_state
        self._user_key_state = user_key_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptionInfo of this EncryptionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_space_key_state(self):
        """Gets the data_space_key_state of this EncryptionInfo.

        DRACOON key state

        :return: The data_space_key_state of this EncryptionInfo.
        :rtype: str
        """
        return self._data_space_key_state

    @data_space_key_state.setter
    def data_space_key_state(self, data_space_key_state):
        """Sets the data_space_key_state of this EncryptionInfo.

        DRACOON key state

        :param data_space_key_state: The data_space_key_state of this EncryptionInfo.
        :type data_space_key_state: str
        """
        allowed_values = ["none", "available", "pending"]  # noqa: E501
        if data_space_key_state not in allowed_values:
            raise ValueError(
                "Invalid value for `data_space_key_state` ({0}), must be one of {1}"
                .format(data_space_key_state, allowed_values)
            )

        self._data_space_key_state = data_space_key_state

    @property
    def room_key_state(self):
        """Gets the room_key_state of this EncryptionInfo.

        Room key state

        :return: The room_key_state of this EncryptionInfo.
        :rtype: str
        """
        return self._room_key_state

    @room_key_state.setter
    def room_key_state(self, room_key_state):
        """Sets the room_key_state of this EncryptionInfo.

        Room key state

        :param room_key_state: The room_key_state of this EncryptionInfo.
        :type room_key_state: str
        """
        allowed_values = ["none", "available", "pending"]  # noqa: E501
        if room_key_state not in allowed_values:
            raise ValueError(
                "Invalid value for `room_key_state` ({0}), must be one of {1}"
                .format(room_key_state, allowed_values)
            )

        self._room_key_state = room_key_state

    @property
    def user_key_state(self):
        """Gets the user_key_state of this EncryptionInfo.

        User key state

        :return: The user_key_state of this EncryptionInfo.
        :rtype: str
        """
        return self._user_key_state

    @user_key_state.setter
    def user_key_state(self, user_key_state):
        """Sets the user_key_state of this EncryptionInfo.

        User key state

        :param user_key_state: The user_key_state of this EncryptionInfo.
        :type user_key_state: str
        """
        allowed_values = ["none", "available", "pending"]  # noqa: E501
        if user_key_state not in allowed_values:
            raise ValueError(
                "Invalid value for `user_key_state` ({0}), must be one of {1}"
                .format(user_key_state, allowed_values)
            )

        self._user_key_state = user_key_state
