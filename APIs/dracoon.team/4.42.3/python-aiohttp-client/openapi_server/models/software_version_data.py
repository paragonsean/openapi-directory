# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareVersionData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_date: datetime=None, is_dracoon_cloud: bool=None, rest_api_version: str=None, scm_revision_number: str=None, sds_server_version: str=None):
        """SoftwareVersionData - a model defined in OpenAPI

        :param build_date: The build_date of this SoftwareVersionData.
        :param is_dracoon_cloud: The is_dracoon_cloud of this SoftwareVersionData.
        :param rest_api_version: The rest_api_version of this SoftwareVersionData.
        :param scm_revision_number: The scm_revision_number of this SoftwareVersionData.
        :param sds_server_version: The sds_server_version of this SoftwareVersionData.
        """
        self.openapi_types = {
            'build_date': datetime,
            'is_dracoon_cloud': bool,
            'rest_api_version': str,
            'scm_revision_number': str,
            'sds_server_version': str
        }

        self.attribute_map = {
            'build_date': 'buildDate',
            'is_dracoon_cloud': 'isDracoonCloud',
            'rest_api_version': 'restApiVersion',
            'scm_revision_number': 'scmRevisionNumber',
            'sds_server_version': 'sdsServerVersion'
        }

        self._build_date = build_date
        self._is_dracoon_cloud = is_dracoon_cloud
        self._rest_api_version = rest_api_version
        self._scm_revision_number = scm_revision_number
        self._sds_server_version = sds_server_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareVersionData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareVersionData of this SoftwareVersionData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_date(self):
        """Gets the build_date of this SoftwareVersionData.

        Build date

        :return: The build_date of this SoftwareVersionData.
        :rtype: datetime
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this SoftwareVersionData.

        Build date

        :param build_date: The build_date of this SoftwareVersionData.
        :type build_date: datetime
        """
        if build_date is None:
            raise ValueError("Invalid value for `build_date`, must not be `None`")

        self._build_date = build_date

    @property
    def is_dracoon_cloud(self):
        """Gets the is_dracoon_cloud of this SoftwareVersionData.

        &#128640; Since v4.24.0  Determines if the DRACOON Core is deployed in the cloud environment

        :return: The is_dracoon_cloud of this SoftwareVersionData.
        :rtype: bool
        """
        return self._is_dracoon_cloud

    @is_dracoon_cloud.setter
    def is_dracoon_cloud(self, is_dracoon_cloud):
        """Sets the is_dracoon_cloud of this SoftwareVersionData.

        &#128640; Since v4.24.0  Determines if the DRACOON Core is deployed in the cloud environment

        :param is_dracoon_cloud: The is_dracoon_cloud of this SoftwareVersionData.
        :type is_dracoon_cloud: bool
        """

        self._is_dracoon_cloud = is_dracoon_cloud

    @property
    def rest_api_version(self):
        """Gets the rest_api_version of this SoftwareVersionData.

        REST API version

        :return: The rest_api_version of this SoftwareVersionData.
        :rtype: str
        """
        return self._rest_api_version

    @rest_api_version.setter
    def rest_api_version(self, rest_api_version):
        """Sets the rest_api_version of this SoftwareVersionData.

        REST API version

        :param rest_api_version: The rest_api_version of this SoftwareVersionData.
        :type rest_api_version: str
        """
        if rest_api_version is None:
            raise ValueError("Invalid value for `rest_api_version`, must not be `None`")

        self._rest_api_version = rest_api_version

    @property
    def scm_revision_number(self):
        """Gets the scm_revision_number of this SoftwareVersionData.

        Revision number

        :return: The scm_revision_number of this SoftwareVersionData.
        :rtype: str
        """
        return self._scm_revision_number

    @scm_revision_number.setter
    def scm_revision_number(self, scm_revision_number):
        """Sets the scm_revision_number of this SoftwareVersionData.

        Revision number

        :param scm_revision_number: The scm_revision_number of this SoftwareVersionData.
        :type scm_revision_number: str
        """
        if scm_revision_number is None:
            raise ValueError("Invalid value for `scm_revision_number`, must not be `None`")

        self._scm_revision_number = scm_revision_number

    @property
    def sds_server_version(self):
        """Gets the sds_server_version of this SoftwareVersionData.

        DRACOON server version

        :return: The sds_server_version of this SoftwareVersionData.
        :rtype: str
        """
        return self._sds_server_version

    @sds_server_version.setter
    def sds_server_version(self, sds_server_version):
        """Sets the sds_server_version of this SoftwareVersionData.

        DRACOON server version

        :param sds_server_version: The sds_server_version of this SoftwareVersionData.
        :type sds_server_version: str
        """
        if sds_server_version is None:
            raise ValueError("Invalid value for `sds_server_version`, must not be `None`")

        self._sds_server_version = sds_server_version
