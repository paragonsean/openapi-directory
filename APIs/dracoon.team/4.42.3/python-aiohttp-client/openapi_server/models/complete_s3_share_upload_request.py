# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.s3_file_upload_part import S3FileUploadPart
from openapi_server.models.user_file_key import UserFileKey
from openapi_server import util


class CompleteS3ShareUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parts: List[S3FileUploadPart]=None, user_file_key_list: List[UserFileKey]=None):
        """CompleteS3ShareUploadRequest - a model defined in OpenAPI

        :param parts: The parts of this CompleteS3ShareUploadRequest.
        :param user_file_key_list: The user_file_key_list of this CompleteS3ShareUploadRequest.
        """
        self.openapi_types = {
            'parts': List[S3FileUploadPart],
            'user_file_key_list': List[UserFileKey]
        }

        self.attribute_map = {
            'parts': 'parts',
            'user_file_key_list': 'userFileKeyList'
        }

        self._parts = parts
        self._user_file_key_list = user_file_key_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CompleteS3ShareUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CompleteS3ShareUploadRequest of this CompleteS3ShareUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parts(self):
        """Gets the parts of this CompleteS3ShareUploadRequest.

        List of S3 file upload parts

        :return: The parts of this CompleteS3ShareUploadRequest.
        :rtype: List[S3FileUploadPart]
        """
        return self._parts

    @parts.setter
    def parts(self, parts):
        """Sets the parts of this CompleteS3ShareUploadRequest.

        List of S3 file upload parts

        :param parts: The parts of this CompleteS3ShareUploadRequest.
        :type parts: List[S3FileUploadPart]
        """
        if parts is None:
            raise ValueError("Invalid value for `parts`, must not be `None`")

        self._parts = parts

    @property
    def user_file_key_list(self):
        """Gets the user_file_key_list of this CompleteS3ShareUploadRequest.

        List of user file keys

        :return: The user_file_key_list of this CompleteS3ShareUploadRequest.
        :rtype: List[UserFileKey]
        """
        return self._user_file_key_list

    @user_file_key_list.setter
    def user_file_key_list(self, user_file_key_list):
        """Sets the user_file_key_list of this CompleteS3ShareUploadRequest.

        List of user file keys

        :param user_file_key_list: The user_file_key_list of this CompleteS3ShareUploadRequest.
        :type user_file_key_list: List[UserFileKey]
        """

        self._user_file_key_list = user_file_key_list
