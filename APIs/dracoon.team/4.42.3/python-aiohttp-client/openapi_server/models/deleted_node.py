# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class DeletedNode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessed_at: datetime=None, classification: int=None, created_at: datetime=None, created_by: UserInfo=None, deleted_at: datetime=None, deleted_by: UserInfo=None, expire_at: datetime=None, id: int=None, is_encrypted: bool=None, name: str=None, notes: str=None, parent_id: int=None, parent_path: str=None, reference_id: int=None, size: int=None, type: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """DeletedNode - a model defined in OpenAPI

        :param accessed_at: The accessed_at of this DeletedNode.
        :param classification: The classification of this DeletedNode.
        :param created_at: The created_at of this DeletedNode.
        :param created_by: The created_by of this DeletedNode.
        :param deleted_at: The deleted_at of this DeletedNode.
        :param deleted_by: The deleted_by of this DeletedNode.
        :param expire_at: The expire_at of this DeletedNode.
        :param id: The id of this DeletedNode.
        :param is_encrypted: The is_encrypted of this DeletedNode.
        :param name: The name of this DeletedNode.
        :param notes: The notes of this DeletedNode.
        :param parent_id: The parent_id of this DeletedNode.
        :param parent_path: The parent_path of this DeletedNode.
        :param reference_id: The reference_id of this DeletedNode.
        :param size: The size of this DeletedNode.
        :param type: The type of this DeletedNode.
        :param updated_at: The updated_at of this DeletedNode.
        :param updated_by: The updated_by of this DeletedNode.
        """
        self.openapi_types = {
            'accessed_at': datetime,
            'classification': int,
            'created_at': datetime,
            'created_by': UserInfo,
            'deleted_at': datetime,
            'deleted_by': UserInfo,
            'expire_at': datetime,
            'id': int,
            'is_encrypted': bool,
            'name': str,
            'notes': str,
            'parent_id': int,
            'parent_path': str,
            'reference_id': int,
            'size': int,
            'type': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'accessed_at': 'accessedAt',
            'classification': 'classification',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'deleted_at': 'deletedAt',
            'deleted_by': 'deletedBy',
            'expire_at': 'expireAt',
            'id': 'id',
            'is_encrypted': 'isEncrypted',
            'name': 'name',
            'notes': 'notes',
            'parent_id': 'parentId',
            'parent_path': 'parentPath',
            'reference_id': 'referenceId',
            'size': 'size',
            'type': 'type',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._accessed_at = accessed_at
        self._classification = classification
        self._created_at = created_at
        self._created_by = created_by
        self._deleted_at = deleted_at
        self._deleted_by = deleted_by
        self._expire_at = expire_at
        self._id = id
        self._is_encrypted = is_encrypted
        self._name = name
        self._notes = notes
        self._parent_id = parent_id
        self._parent_path = parent_path
        self._reference_id = reference_id
        self._size = size
        self._type = type
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletedNode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletedNode of this DeletedNode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessed_at(self):
        """Gets the accessed_at of this DeletedNode.

        Last access date

        :return: The accessed_at of this DeletedNode.
        :rtype: datetime
        """
        return self._accessed_at

    @accessed_at.setter
    def accessed_at(self, accessed_at):
        """Sets the accessed_at of this DeletedNode.

        Last access date

        :param accessed_at: The accessed_at of this DeletedNode.
        :type accessed_at: datetime
        """

        self._accessed_at = accessed_at

    @property
    def classification(self):
        """Gets the classification of this DeletedNode.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :return: The classification of this DeletedNode.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this DeletedNode.

        Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :param classification: The classification of this DeletedNode.
        :type classification: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def created_at(self):
        """Gets the created_at of this DeletedNode.

        Creation date

        :return: The created_at of this DeletedNode.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeletedNode.

        Creation date

        :param created_at: The created_at of this DeletedNode.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this DeletedNode.


        :return: The created_by of this DeletedNode.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DeletedNode.


        :param created_by: The created_by of this DeletedNode.
        :type created_by: UserInfo
        """

        self._created_by = created_by

    @property
    def deleted_at(self):
        """Gets the deleted_at of this DeletedNode.

        Deletion date

        :return: The deleted_at of this DeletedNode.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this DeletedNode.

        Deletion date

        :param deleted_at: The deleted_at of this DeletedNode.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def deleted_by(self):
        """Gets the deleted_by of this DeletedNode.


        :return: The deleted_by of this DeletedNode.
        :rtype: UserInfo
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by):
        """Sets the deleted_by of this DeletedNode.


        :param deleted_by: The deleted_by of this DeletedNode.
        :type deleted_by: UserInfo
        """

        self._deleted_by = deleted_by

    @property
    def expire_at(self):
        """Gets the expire_at of this DeletedNode.

        Expiration date

        :return: The expire_at of this DeletedNode.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this DeletedNode.

        Expiration date

        :param expire_at: The expire_at of this DeletedNode.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def id(self):
        """Gets the id of this DeletedNode.

        Node ID

        :return: The id of this DeletedNode.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeletedNode.

        Node ID

        :param id: The id of this DeletedNode.
        :type id: int
        """

        self._id = id

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this DeletedNode.

        Encryption state

        :return: The is_encrypted of this DeletedNode.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this DeletedNode.

        Encryption state

        :param is_encrypted: The is_encrypted of this DeletedNode.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def name(self):
        """Gets the name of this DeletedNode.

        Node name

        :return: The name of this DeletedNode.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeletedNode.

        Node name

        :param name: The name of this DeletedNode.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this DeletedNode.

        User notes

        :return: The notes of this DeletedNode.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DeletedNode.

        User notes

        :param notes: The notes of this DeletedNode.
        :type notes: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this DeletedNode.

        Parent node ID (room or folder)

        :return: The parent_id of this DeletedNode.
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this DeletedNode.

        Parent node ID (room or folder)

        :param parent_id: The parent_id of this DeletedNode.
        :type parent_id: int
        """
        if parent_id is None:
            raise ValueError("Invalid value for `parent_id`, must not be `None`")

        self._parent_id = parent_id

    @property
    def parent_path(self):
        """Gets the parent_path of this DeletedNode.

        Parent node path  `/` if node is a root node (room)

        :return: The parent_path of this DeletedNode.
        :rtype: str
        """
        return self._parent_path

    @parent_path.setter
    def parent_path(self, parent_path):
        """Sets the parent_path of this DeletedNode.

        Parent node path  `/` if node is a root node (room)

        :param parent_path: The parent_path of this DeletedNode.
        :type parent_path: str
        """
        if parent_path is None:
            raise ValueError("Invalid value for `parent_path`, must not be `None`")

        self._parent_path = parent_path

    @property
    def reference_id(self):
        """Gets the reference_id of this DeletedNode.

        &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file

        :return: The reference_id of this DeletedNode.
        :rtype: int
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this DeletedNode.

        &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file

        :param reference_id: The reference_id of this DeletedNode.
        :type reference_id: int
        """

        self._reference_id = reference_id

    @property
    def size(self):
        """Gets the size of this DeletedNode.

        Node size in byte

        :return: The size of this DeletedNode.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DeletedNode.

        Node size in byte

        :param size: The size of this DeletedNode.
        :type size: int
        """

        self._size = size

    @property
    def type(self):
        """Gets the type of this DeletedNode.

        Node type

        :return: The type of this DeletedNode.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DeletedNode.

        Node type

        :param type: The type of this DeletedNode.
        :type type: str
        """
        allowed_values = ["folder", "file"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this DeletedNode.

        Modification date

        :return: The updated_at of this DeletedNode.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DeletedNode.

        Modification date

        :param updated_at: The updated_at of this DeletedNode.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this DeletedNode.


        :return: The updated_by of this DeletedNode.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DeletedNode.


        :param updated_by: The updated_by of this DeletedNode.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by
