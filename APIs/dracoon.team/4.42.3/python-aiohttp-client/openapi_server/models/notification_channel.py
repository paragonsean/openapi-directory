# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationChannel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, frequency: int=None, id: int=None, is_enabled: bool=None, name: str=None, type: str=None):
        """NotificationChannel - a model defined in OpenAPI

        :param frequency: The frequency of this NotificationChannel.
        :param id: The id of this NotificationChannel.
        :param is_enabled: The is_enabled of this NotificationChannel.
        :param name: The name of this NotificationChannel.
        :param type: The type of this NotificationChannel.
        """
        self.openapi_types = {
            'frequency': int,
            'id': int,
            'is_enabled': bool,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'frequency': 'frequency',
            'id': 'id',
            'is_enabled': 'isEnabled',
            'name': 'name',
            'type': 'type'
        }

        self._frequency = frequency
        self._id = id
        self._is_enabled = is_enabled
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationChannel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationChannel of this NotificationChannel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def frequency(self):
        """Gets the frequency of this NotificationChannel.

        Channel frequency (aggregation window size in minutes)

        :return: The frequency of this NotificationChannel.
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this NotificationChannel.

        Channel frequency (aggregation window size in minutes)

        :param frequency: The frequency of this NotificationChannel.
        :type frequency: int
        """
        if frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this NotificationChannel.

        Channel ID

        :return: The id of this NotificationChannel.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationChannel.

        Channel ID

        :param id: The id of this NotificationChannel.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_enabled(self):
        """Gets the is_enabled of this NotificationChannel.

        Determines whether channel is enabled

        :return: The is_enabled of this NotificationChannel.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this NotificationChannel.

        Determines whether channel is enabled

        :param is_enabled: The is_enabled of this NotificationChannel.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this NotificationChannel.

        Name

        :return: The name of this NotificationChannel.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NotificationChannel.

        Name

        :param name: The name of this NotificationChannel.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this NotificationChannel.

        Channel type (only `EMAIL` available at the moment)

        :return: The type of this NotificationChannel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationChannel.

        Channel type (only `EMAIL` available at the moment)

        :param type: The type of this NotificationChannel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
