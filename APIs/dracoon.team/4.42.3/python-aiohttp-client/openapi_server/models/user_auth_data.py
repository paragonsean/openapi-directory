# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserAuthData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_config_id: int=None, login: str=None, method: str=None, must_change_password: bool=None, oid_config_id: int=None, password: str=None):
        """UserAuthData - a model defined in OpenAPI

        :param ad_config_id: The ad_config_id of this UserAuthData.
        :param login: The login of this UserAuthData.
        :param method: The method of this UserAuthData.
        :param must_change_password: The must_change_password of this UserAuthData.
        :param oid_config_id: The oid_config_id of this UserAuthData.
        :param password: The password of this UserAuthData.
        """
        self.openapi_types = {
            'ad_config_id': int,
            'login': str,
            'method': str,
            'must_change_password': bool,
            'oid_config_id': int,
            'password': str
        }

        self.attribute_map = {
            'ad_config_id': 'adConfigId',
            'login': 'login',
            'method': 'method',
            'must_change_password': 'mustChangePassword',
            'oid_config_id': 'oidConfigId',
            'password': 'password'
        }

        self._ad_config_id = ad_config_id
        self._login = login
        self._method = method
        self._must_change_password = must_change_password
        self._oid_config_id = oid_config_id
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserAuthData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserAuthData of this UserAuthData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_config_id(self):
        """Gets the ad_config_id of this UserAuthData.

        ID of the user's Active Directory.

        :return: The ad_config_id of this UserAuthData.
        :rtype: int
        """
        return self._ad_config_id

    @ad_config_id.setter
    def ad_config_id(self, ad_config_id):
        """Sets the ad_config_id of this UserAuthData.

        ID of the user's Active Directory.

        :param ad_config_id: The ad_config_id of this UserAuthData.
        :type ad_config_id: int
        """

        self._ad_config_id = ad_config_id

    @property
    def login(self):
        """Gets the login of this UserAuthData.

        User login name

        :return: The login of this UserAuthData.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this UserAuthData.

        User login name

        :param login: The login of this UserAuthData.
        :type login: str
        """

        self._login = login

    @property
    def method(self):
        """Gets the method of this UserAuthData.

        Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :return: The method of this UserAuthData.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this UserAuthData.

        Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :param method: The method of this UserAuthData.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def must_change_password(self):
        """Gets the must_change_password of this UserAuthData.

        Determines whether user has to change his / her password  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types

        :return: The must_change_password of this UserAuthData.
        :rtype: bool
        """
        return self._must_change_password

    @must_change_password.setter
    def must_change_password(self, must_change_password):
        """Sets the must_change_password of this UserAuthData.

        Determines whether user has to change his / her password  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types

        :param must_change_password: The must_change_password of this UserAuthData.
        :type must_change_password: bool
        """

        self._must_change_password = must_change_password

    @property
    def oid_config_id(self):
        """Gets the oid_config_id of this UserAuthData.

        ID of the user's OIDC provider.

        :return: The oid_config_id of this UserAuthData.
        :rtype: int
        """
        return self._oid_config_id

    @oid_config_id.setter
    def oid_config_id(self, oid_config_id):
        """Sets the oid_config_id of this UserAuthData.

        ID of the user's OIDC provider.

        :param oid_config_id: The oid_config_id of this UserAuthData.
        :type oid_config_id: int
        """

        self._oid_config_id = oid_config_id

    @property
    def password(self):
        """Gets the password of this UserAuthData.

        Password (only relevant for `basic` authentication type)  *NOT* your Active Directory, OpenID or RADIUS password!

        :return: The password of this UserAuthData.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserAuthData.

        Password (only relevant for `basic` authentication type)  *NOT* your Active Directory, OpenID or RADIUS password!

        :param password: The password of this UserAuthData.
        :type password: str
        """

        self._password = password
