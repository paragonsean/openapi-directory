# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InfrastructureProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_dracoon_cloud: bool=None, media_server_config_enabled: bool=None, s3_default_region: str=None, s3_enforce_direct_upload: bool=None, sms_config_enabled: bool=None, tenant_uuid: str=None):
        """InfrastructureProperties - a model defined in OpenAPI

        :param is_dracoon_cloud: The is_dracoon_cloud of this InfrastructureProperties.
        :param media_server_config_enabled: The media_server_config_enabled of this InfrastructureProperties.
        :param s3_default_region: The s3_default_region of this InfrastructureProperties.
        :param s3_enforce_direct_upload: The s3_enforce_direct_upload of this InfrastructureProperties.
        :param sms_config_enabled: The sms_config_enabled of this InfrastructureProperties.
        :param tenant_uuid: The tenant_uuid of this InfrastructureProperties.
        """
        self.openapi_types = {
            'is_dracoon_cloud': bool,
            'media_server_config_enabled': bool,
            's3_default_region': str,
            's3_enforce_direct_upload': bool,
            'sms_config_enabled': bool,
            'tenant_uuid': str
        }

        self.attribute_map = {
            'is_dracoon_cloud': 'isDracoonCloud',
            'media_server_config_enabled': 'mediaServerConfigEnabled',
            's3_default_region': 's3DefaultRegion',
            's3_enforce_direct_upload': 's3EnforceDirectUpload',
            'sms_config_enabled': 'smsConfigEnabled',
            'tenant_uuid': 'tenantUuid'
        }

        self._is_dracoon_cloud = is_dracoon_cloud
        self._media_server_config_enabled = media_server_config_enabled
        self._s3_default_region = s3_default_region
        self._s3_enforce_direct_upload = s3_enforce_direct_upload
        self._sms_config_enabled = sms_config_enabled
        self._tenant_uuid = tenant_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfrastructureProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InfrastructureProperties of this InfrastructureProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_dracoon_cloud(self):
        """Gets the is_dracoon_cloud of this InfrastructureProperties.

        &#128640; Since v4.21.0  Determines if the DRACOON Core is deployed in the cloud environment

        :return: The is_dracoon_cloud of this InfrastructureProperties.
        :rtype: bool
        """
        return self._is_dracoon_cloud

    @is_dracoon_cloud.setter
    def is_dracoon_cloud(self, is_dracoon_cloud):
        """Sets the is_dracoon_cloud of this InfrastructureProperties.

        &#128640; Since v4.21.0  Determines if the DRACOON Core is deployed in the cloud environment

        :param is_dracoon_cloud: The is_dracoon_cloud of this InfrastructureProperties.
        :type is_dracoon_cloud: bool
        """

        self._is_dracoon_cloud = is_dracoon_cloud

    @property
    def media_server_config_enabled(self):
        """Gets the media_server_config_enabled of this InfrastructureProperties.

        Determines if the media server is enabled

        :return: The media_server_config_enabled of this InfrastructureProperties.
        :rtype: bool
        """
        return self._media_server_config_enabled

    @media_server_config_enabled.setter
    def media_server_config_enabled(self, media_server_config_enabled):
        """Sets the media_server_config_enabled of this InfrastructureProperties.

        Determines if the media server is enabled

        :param media_server_config_enabled: The media_server_config_enabled of this InfrastructureProperties.
        :type media_server_config_enabled: bool
        """

        self._media_server_config_enabled = media_server_config_enabled

    @property
    def s3_default_region(self):
        """Gets the s3_default_region of this InfrastructureProperties.

        Suggested S3 Region

        :return: The s3_default_region of this InfrastructureProperties.
        :rtype: str
        """
        return self._s3_default_region

    @s3_default_region.setter
    def s3_default_region(self, s3_default_region):
        """Sets the s3_default_region of this InfrastructureProperties.

        Suggested S3 Region

        :param s3_default_region: The s3_default_region of this InfrastructureProperties.
        :type s3_default_region: str
        """

        self._s3_default_region = s3_default_region

    @property
    def s3_enforce_direct_upload(self):
        """Gets the s3_enforce_direct_upload of this InfrastructureProperties.

        &#128640; Since v4.15.0  Enforce direct upload to S3

        :return: The s3_enforce_direct_upload of this InfrastructureProperties.
        :rtype: bool
        """
        return self._s3_enforce_direct_upload

    @s3_enforce_direct_upload.setter
    def s3_enforce_direct_upload(self, s3_enforce_direct_upload):
        """Sets the s3_enforce_direct_upload of this InfrastructureProperties.

        &#128640; Since v4.15.0  Enforce direct upload to S3

        :param s3_enforce_direct_upload: The s3_enforce_direct_upload of this InfrastructureProperties.
        :type s3_enforce_direct_upload: bool
        """

        self._s3_enforce_direct_upload = s3_enforce_direct_upload

    @property
    def sms_config_enabled(self):
        """Gets the sms_config_enabled of this InfrastructureProperties.

        Allow sending of share passwords via SMS

        :return: The sms_config_enabled of this InfrastructureProperties.
        :rtype: bool
        """
        return self._sms_config_enabled

    @sms_config_enabled.setter
    def sms_config_enabled(self, sms_config_enabled):
        """Sets the sms_config_enabled of this InfrastructureProperties.

        Allow sending of share passwords via SMS

        :param sms_config_enabled: The sms_config_enabled of this InfrastructureProperties.
        :type sms_config_enabled: bool
        """

        self._sms_config_enabled = sms_config_enabled

    @property
    def tenant_uuid(self):
        """Gets the tenant_uuid of this InfrastructureProperties.

        &#128640; Since v4.21.0  Current tenant UUID

        :return: The tenant_uuid of this InfrastructureProperties.
        :rtype: str
        """
        return self._tenant_uuid

    @tenant_uuid.setter
    def tenant_uuid(self, tenant_uuid):
        """Sets the tenant_uuid of this InfrastructureProperties.

        &#128640; Since v4.21.0  Current tenant UUID

        :param tenant_uuid: The tenant_uuid of this InfrastructureProperties.
        :type tenant_uuid: str
        """

        self._tenant_uuid = tenant_uuid
