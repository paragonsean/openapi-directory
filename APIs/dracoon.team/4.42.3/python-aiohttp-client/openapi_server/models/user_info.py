# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_uuid: str=None, display_name: str=None, email: str=None, first_name: str=None, id: int=None, last_name: str=None, title: str=None, user_name: str=None, user_type: str=None):
        """UserInfo - a model defined in OpenAPI

        :param avatar_uuid: The avatar_uuid of this UserInfo.
        :param display_name: The display_name of this UserInfo.
        :param email: The email of this UserInfo.
        :param first_name: The first_name of this UserInfo.
        :param id: The id of this UserInfo.
        :param last_name: The last_name of this UserInfo.
        :param title: The title of this UserInfo.
        :param user_name: The user_name of this UserInfo.
        :param user_type: The user_type of this UserInfo.
        """
        self.openapi_types = {
            'avatar_uuid': str,
            'display_name': str,
            'email': str,
            'first_name': str,
            'id': int,
            'last_name': str,
            'title': str,
            'user_name': str,
            'user_type': str
        }

        self.attribute_map = {
            'avatar_uuid': 'avatarUuid',
            'display_name': 'displayName',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'title': 'title',
            'user_name': 'userName',
            'user_type': 'userType'
        }

        self._avatar_uuid = avatar_uuid
        self._display_name = display_name
        self._email = email
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._title = title
        self._user_name = user_name
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserInfo of this UserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_uuid(self):
        """Gets the avatar_uuid of this UserInfo.

        &#128640; Since v4.11.0  Avatar UUID

        :return: The avatar_uuid of this UserInfo.
        :rtype: str
        """
        return self._avatar_uuid

    @avatar_uuid.setter
    def avatar_uuid(self, avatar_uuid):
        """Sets the avatar_uuid of this UserInfo.

        &#128640; Since v4.11.0  Avatar UUID

        :param avatar_uuid: The avatar_uuid of this UserInfo.
        :type avatar_uuid: str
        """
        if avatar_uuid is None:
            raise ValueError("Invalid value for `avatar_uuid`, must not be `None`")

        self._avatar_uuid = avatar_uuid

    @property
    def display_name(self):
        """Gets the display_name of this UserInfo.

        &#128679; Deprecated since v4.11.0  Display name  use other fields from `UserInfo` instead to combine a display name

        :return: The display_name of this UserInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserInfo.

        &#128679; Deprecated since v4.11.0  Display name  use other fields from `UserInfo` instead to combine a display name

        :param display_name: The display_name of this UserInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this UserInfo.

        &#128640; Since v4.11.0  Email 

        :return: The email of this UserInfo.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserInfo.

        &#128640; Since v4.11.0  Email 

        :param email: The email of this UserInfo.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserInfo.

        &#128640; Since v4.11.0  User first name (mandatory if `userType` is `internal`)

        :return: The first_name of this UserInfo.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserInfo.

        &#128640; Since v4.11.0  User first name (mandatory if `userType` is `internal`)

        :param first_name: The first_name of this UserInfo.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this UserInfo.

        Unique identifier for the user

        :return: The id of this UserInfo.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserInfo.

        Unique identifier for the user

        :param id: The id of this UserInfo.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this UserInfo.

        &#128640; Since v4.11.0  User last name (mandatory if `userType` is `internal`)

        :return: The last_name of this UserInfo.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserInfo.

        &#128640; Since v4.11.0  User last name (mandatory if `userType` is `internal`)

        :param last_name: The last_name of this UserInfo.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def title(self):
        """Gets the title of this UserInfo.

        &#128679; Deprecated since v4.18.0  Job title

        :return: The title of this UserInfo.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this UserInfo.

        &#128679; Deprecated since v4.18.0  Job title

        :param title: The title of this UserInfo.
        :type title: str
        """

        self._title = title

    @property
    def user_name(self):
        """Gets the user_name of this UserInfo.

        &#128640; Since v4.13.0  Username (only returned for `internal` users)

        :return: The user_name of this UserInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserInfo.

        &#128640; Since v4.13.0  Username (only returned for `internal` users)

        :param user_name: The user_name of this UserInfo.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def user_type(self):
        """Gets the user_type of this UserInfo.

        &#128640; Since v4.11.0  User type:  * `internal` - ordinary DRACOON user  * `external` - external user without DRACOON account  * `system` - system user (non human &#128125;)  * `deleted` - deleted DRACOON user

        :return: The user_type of this UserInfo.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this UserInfo.

        &#128640; Since v4.11.0  User type:  * `internal` - ordinary DRACOON user  * `external` - external user without DRACOON account  * `system` - system user (non human &#128125;)  * `deleted` - deleted DRACOON user

        :param user_type: The user_type of this UserInfo.
        :type user_type: str
        """
        allowed_values = ["system", "internal", "external", "deleted"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type
