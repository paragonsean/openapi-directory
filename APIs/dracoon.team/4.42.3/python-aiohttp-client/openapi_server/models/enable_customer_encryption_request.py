# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_key_pair_container import UserKeyPairContainer
from openapi_server import util


class EnableCustomerEncryptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_space_rescue_key: UserKeyPairContainer=None, enable_customer_encryption: bool=None):
        """EnableCustomerEncryptionRequest - a model defined in OpenAPI

        :param data_space_rescue_key: The data_space_rescue_key of this EnableCustomerEncryptionRequest.
        :param enable_customer_encryption: The enable_customer_encryption of this EnableCustomerEncryptionRequest.
        """
        self.openapi_types = {
            'data_space_rescue_key': UserKeyPairContainer,
            'enable_customer_encryption': bool
        }

        self.attribute_map = {
            'data_space_rescue_key': 'dataSpaceRescueKey',
            'enable_customer_encryption': 'enableCustomerEncryption'
        }

        self._data_space_rescue_key = data_space_rescue_key
        self._enable_customer_encryption = enable_customer_encryption

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableCustomerEncryptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableCustomerEncryptionRequest of this EnableCustomerEncryptionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_space_rescue_key(self):
        """Gets the data_space_rescue_key of this EnableCustomerEncryptionRequest.


        :return: The data_space_rescue_key of this EnableCustomerEncryptionRequest.
        :rtype: UserKeyPairContainer
        """
        return self._data_space_rescue_key

    @data_space_rescue_key.setter
    def data_space_rescue_key(self, data_space_rescue_key):
        """Sets the data_space_rescue_key of this EnableCustomerEncryptionRequest.


        :param data_space_rescue_key: The data_space_rescue_key of this EnableCustomerEncryptionRequest.
        :type data_space_rescue_key: UserKeyPairContainer
        """
        if data_space_rescue_key is None:
            raise ValueError("Invalid value for `data_space_rescue_key`, must not be `None`")

        self._data_space_rescue_key = data_space_rescue_key

    @property
    def enable_customer_encryption(self):
        """Gets the enable_customer_encryption of this EnableCustomerEncryptionRequest.

        Set `true` to enable encryption for this customer

        :return: The enable_customer_encryption of this EnableCustomerEncryptionRequest.
        :rtype: bool
        """
        return self._enable_customer_encryption

    @enable_customer_encryption.setter
    def enable_customer_encryption(self, enable_customer_encryption):
        """Sets the enable_customer_encryption of this EnableCustomerEncryptionRequest.

        Set `true` to enable encryption for this customer

        :param enable_customer_encryption: The enable_customer_encryption of this EnableCustomerEncryptionRequest.
        :type enable_customer_encryption: bool
        """
        if enable_customer_encryption is None:
            raise ValueError("Invalid value for `enable_customer_encryption`, must not be `None`")

        self._enable_customer_encryption = enable_customer_encryption
