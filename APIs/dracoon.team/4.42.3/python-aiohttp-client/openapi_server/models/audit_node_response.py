# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_user_permission import AuditUserPermission
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class AuditNodeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_user_permission_list: List[AuditUserPermission]=None, node_cnt_children: int=None, node_created_at: datetime=None, node_created_by: UserInfo=None, node_has_activities_log: bool=True, node_has_recycle_bin: bool=None, node_id: int=None, node_is_encrypted: bool=None, node_name: str=None, node_parent_id: int=None, node_parent_path: str=None, node_quota: int=None, node_recycle_bin_retention_period: int=None, node_size: int=None, node_updated_at: datetime=None, node_updated_by: UserInfo=None):
        """AuditNodeResponse - a model defined in OpenAPI

        :param audit_user_permission_list: The audit_user_permission_list of this AuditNodeResponse.
        :param node_cnt_children: The node_cnt_children of this AuditNodeResponse.
        :param node_created_at: The node_created_at of this AuditNodeResponse.
        :param node_created_by: The node_created_by of this AuditNodeResponse.
        :param node_has_activities_log: The node_has_activities_log of this AuditNodeResponse.
        :param node_has_recycle_bin: The node_has_recycle_bin of this AuditNodeResponse.
        :param node_id: The node_id of this AuditNodeResponse.
        :param node_is_encrypted: The node_is_encrypted of this AuditNodeResponse.
        :param node_name: The node_name of this AuditNodeResponse.
        :param node_parent_id: The node_parent_id of this AuditNodeResponse.
        :param node_parent_path: The node_parent_path of this AuditNodeResponse.
        :param node_quota: The node_quota of this AuditNodeResponse.
        :param node_recycle_bin_retention_period: The node_recycle_bin_retention_period of this AuditNodeResponse.
        :param node_size: The node_size of this AuditNodeResponse.
        :param node_updated_at: The node_updated_at of this AuditNodeResponse.
        :param node_updated_by: The node_updated_by of this AuditNodeResponse.
        """
        self.openapi_types = {
            'audit_user_permission_list': List[AuditUserPermission],
            'node_cnt_children': int,
            'node_created_at': datetime,
            'node_created_by': UserInfo,
            'node_has_activities_log': bool,
            'node_has_recycle_bin': bool,
            'node_id': int,
            'node_is_encrypted': bool,
            'node_name': str,
            'node_parent_id': int,
            'node_parent_path': str,
            'node_quota': int,
            'node_recycle_bin_retention_period': int,
            'node_size': int,
            'node_updated_at': datetime,
            'node_updated_by': UserInfo
        }

        self.attribute_map = {
            'audit_user_permission_list': 'auditUserPermissionList',
            'node_cnt_children': 'nodeCntChildren',
            'node_created_at': 'nodeCreatedAt',
            'node_created_by': 'nodeCreatedBy',
            'node_has_activities_log': 'nodeHasActivitiesLog',
            'node_has_recycle_bin': 'nodeHasRecycleBin',
            'node_id': 'nodeId',
            'node_is_encrypted': 'nodeIsEncrypted',
            'node_name': 'nodeName',
            'node_parent_id': 'nodeParentId',
            'node_parent_path': 'nodeParentPath',
            'node_quota': 'nodeQuota',
            'node_recycle_bin_retention_period': 'nodeRecycleBinRetentionPeriod',
            'node_size': 'nodeSize',
            'node_updated_at': 'nodeUpdatedAt',
            'node_updated_by': 'nodeUpdatedBy'
        }

        self._audit_user_permission_list = audit_user_permission_list
        self._node_cnt_children = node_cnt_children
        self._node_created_at = node_created_at
        self._node_created_by = node_created_by
        self._node_has_activities_log = node_has_activities_log
        self._node_has_recycle_bin = node_has_recycle_bin
        self._node_id = node_id
        self._node_is_encrypted = node_is_encrypted
        self._node_name = node_name
        self._node_parent_id = node_parent_id
        self._node_parent_path = node_parent_path
        self._node_quota = node_quota
        self._node_recycle_bin_retention_period = node_recycle_bin_retention_period
        self._node_size = node_size
        self._node_updated_at = node_updated_at
        self._node_updated_by = node_updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditNodeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditNodeResponse of this AuditNodeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_user_permission_list(self):
        """Gets the audit_user_permission_list of this AuditNodeResponse.

        List of assigned users with permissions

        :return: The audit_user_permission_list of this AuditNodeResponse.
        :rtype: List[AuditUserPermission]
        """
        return self._audit_user_permission_list

    @audit_user_permission_list.setter
    def audit_user_permission_list(self, audit_user_permission_list):
        """Sets the audit_user_permission_list of this AuditNodeResponse.

        List of assigned users with permissions

        :param audit_user_permission_list: The audit_user_permission_list of this AuditNodeResponse.
        :type audit_user_permission_list: List[AuditUserPermission]
        """
        if audit_user_permission_list is None:
            raise ValueError("Invalid value for `audit_user_permission_list`, must not be `None`")

        self._audit_user_permission_list = audit_user_permission_list

    @property
    def node_cnt_children(self):
        """Gets the node_cnt_children of this AuditNodeResponse.

        Number of direct children  (no recursion; for rooms only)

        :return: The node_cnt_children of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_cnt_children

    @node_cnt_children.setter
    def node_cnt_children(self, node_cnt_children):
        """Sets the node_cnt_children of this AuditNodeResponse.

        Number of direct children  (no recursion; for rooms only)

        :param node_cnt_children: The node_cnt_children of this AuditNodeResponse.
        :type node_cnt_children: int
        """
        if node_cnt_children is None:
            raise ValueError("Invalid value for `node_cnt_children`, must not be `None`")

        self._node_cnt_children = node_cnt_children

    @property
    def node_created_at(self):
        """Gets the node_created_at of this AuditNodeResponse.

        Creation date

        :return: The node_created_at of this AuditNodeResponse.
        :rtype: datetime
        """
        return self._node_created_at

    @node_created_at.setter
    def node_created_at(self, node_created_at):
        """Sets the node_created_at of this AuditNodeResponse.

        Creation date

        :param node_created_at: The node_created_at of this AuditNodeResponse.
        :type node_created_at: datetime
        """

        self._node_created_at = node_created_at

    @property
    def node_created_by(self):
        """Gets the node_created_by of this AuditNodeResponse.


        :return: The node_created_by of this AuditNodeResponse.
        :rtype: UserInfo
        """
        return self._node_created_by

    @node_created_by.setter
    def node_created_by(self, node_created_by):
        """Sets the node_created_by of this AuditNodeResponse.


        :param node_created_by: The node_created_by of this AuditNodeResponse.
        :type node_created_by: UserInfo
        """

        self._node_created_by = node_created_by

    @property
    def node_has_activities_log(self):
        """Gets the node_has_activities_log of this AuditNodeResponse.

        Is activities log active (for rooms only)

        :return: The node_has_activities_log of this AuditNodeResponse.
        :rtype: bool
        """
        return self._node_has_activities_log

    @node_has_activities_log.setter
    def node_has_activities_log(self, node_has_activities_log):
        """Sets the node_has_activities_log of this AuditNodeResponse.

        Is activities log active (for rooms only)

        :param node_has_activities_log: The node_has_activities_log of this AuditNodeResponse.
        :type node_has_activities_log: bool
        """

        self._node_has_activities_log = node_has_activities_log

    @property
    def node_has_recycle_bin(self):
        """Gets the node_has_recycle_bin of this AuditNodeResponse.

        &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).

        :return: The node_has_recycle_bin of this AuditNodeResponse.
        :rtype: bool
        """
        return self._node_has_recycle_bin

    @node_has_recycle_bin.setter
    def node_has_recycle_bin(self, node_has_recycle_bin):
        """Sets the node_has_recycle_bin of this AuditNodeResponse.

        &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).

        :param node_has_recycle_bin: The node_has_recycle_bin of this AuditNodeResponse.
        :type node_has_recycle_bin: bool
        """

        self._node_has_recycle_bin = node_has_recycle_bin

    @property
    def node_id(self):
        """Gets the node_id of this AuditNodeResponse.

        Node ID

        :return: The node_id of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this AuditNodeResponse.

        Node ID

        :param node_id: The node_id of this AuditNodeResponse.
        :type node_id: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def node_is_encrypted(self):
        """Gets the node_is_encrypted of this AuditNodeResponse.

        Encryption state

        :return: The node_is_encrypted of this AuditNodeResponse.
        :rtype: bool
        """
        return self._node_is_encrypted

    @node_is_encrypted.setter
    def node_is_encrypted(self, node_is_encrypted):
        """Sets the node_is_encrypted of this AuditNodeResponse.

        Encryption state

        :param node_is_encrypted: The node_is_encrypted of this AuditNodeResponse.
        :type node_is_encrypted: bool
        """

        self._node_is_encrypted = node_is_encrypted

    @property
    def node_name(self):
        """Gets the node_name of this AuditNodeResponse.

        Node name

        :return: The node_name of this AuditNodeResponse.
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this AuditNodeResponse.

        Node name

        :param node_name: The node_name of this AuditNodeResponse.
        :type node_name: str
        """
        if node_name is None:
            raise ValueError("Invalid value for `node_name`, must not be `None`")

        self._node_name = node_name

    @property
    def node_parent_id(self):
        """Gets the node_parent_id of this AuditNodeResponse.

        Parent node ID (room or folder)

        :return: The node_parent_id of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_parent_id

    @node_parent_id.setter
    def node_parent_id(self, node_parent_id):
        """Sets the node_parent_id of this AuditNodeResponse.

        Parent node ID (room or folder)

        :param node_parent_id: The node_parent_id of this AuditNodeResponse.
        :type node_parent_id: int
        """

        self._node_parent_id = node_parent_id

    @property
    def node_parent_path(self):
        """Gets the node_parent_path of this AuditNodeResponse.

        Parent node path  `/` if node is a root node (room)

        :return: The node_parent_path of this AuditNodeResponse.
        :rtype: str
        """
        return self._node_parent_path

    @node_parent_path.setter
    def node_parent_path(self, node_parent_path):
        """Sets the node_parent_path of this AuditNodeResponse.

        Parent node path  `/` if node is a root node (room)

        :param node_parent_path: The node_parent_path of this AuditNodeResponse.
        :type node_parent_path: str
        """
        if node_parent_path is None:
            raise ValueError("Invalid value for `node_parent_path`, must not be `None`")

        self._node_parent_path = node_parent_path

    @property
    def node_quota(self):
        """Gets the node_quota of this AuditNodeResponse.

        Quota in byte

        :return: The node_quota of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_quota

    @node_quota.setter
    def node_quota(self, node_quota):
        """Sets the node_quota of this AuditNodeResponse.

        Quota in byte

        :param node_quota: The node_quota of this AuditNodeResponse.
        :type node_quota: int
        """

        self._node_quota = node_quota

    @property
    def node_recycle_bin_retention_period(self):
        """Gets the node_recycle_bin_retention_period of this AuditNodeResponse.

        Retention period for deleted nodes in days

        :return: The node_recycle_bin_retention_period of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_recycle_bin_retention_period

    @node_recycle_bin_retention_period.setter
    def node_recycle_bin_retention_period(self, node_recycle_bin_retention_period):
        """Sets the node_recycle_bin_retention_period of this AuditNodeResponse.

        Retention period for deleted nodes in days

        :param node_recycle_bin_retention_period: The node_recycle_bin_retention_period of this AuditNodeResponse.
        :type node_recycle_bin_retention_period: int
        """
        if node_recycle_bin_retention_period is not None and node_recycle_bin_retention_period > 9999:
            raise ValueError("Invalid value for `node_recycle_bin_retention_period`, must be a value less than or equal to `9999`")
        if node_recycle_bin_retention_period is not None and node_recycle_bin_retention_period < 0:
            raise ValueError("Invalid value for `node_recycle_bin_retention_period`, must be a value greater than or equal to `0`")

        self._node_recycle_bin_retention_period = node_recycle_bin_retention_period

    @property
    def node_size(self):
        """Gets the node_size of this AuditNodeResponse.

        Node size in byte

        :return: The node_size of this AuditNodeResponse.
        :rtype: int
        """
        return self._node_size

    @node_size.setter
    def node_size(self, node_size):
        """Sets the node_size of this AuditNodeResponse.

        Node size in byte

        :param node_size: The node_size of this AuditNodeResponse.
        :type node_size: int
        """

        self._node_size = node_size

    @property
    def node_updated_at(self):
        """Gets the node_updated_at of this AuditNodeResponse.

        Modification date

        :return: The node_updated_at of this AuditNodeResponse.
        :rtype: datetime
        """
        return self._node_updated_at

    @node_updated_at.setter
    def node_updated_at(self, node_updated_at):
        """Sets the node_updated_at of this AuditNodeResponse.

        Modification date

        :param node_updated_at: The node_updated_at of this AuditNodeResponse.
        :type node_updated_at: datetime
        """

        self._node_updated_at = node_updated_at

    @property
    def node_updated_by(self):
        """Gets the node_updated_by of this AuditNodeResponse.


        :return: The node_updated_by of this AuditNodeResponse.
        :rtype: UserInfo
        """
        return self._node_updated_by

    @node_updated_by.setter
    def node_updated_by(self, node_updated_by):
        """Sets the node_updated_by of this AuditNodeResponse.


        :param node_updated_by: The node_updated_by of this AuditNodeResponse.
        :type node_updated_by: UserInfo
        """

        self._node_updated_by = node_updated_by
