# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_key_pair_container import UserKeyPairContainer
from openapi_server import util


class EncryptRoomRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_room_rescue_key: UserKeyPairContainer=None, is_encrypted: bool=None, use_data_space_rescue_key: bool=None):
        """EncryptRoomRequest - a model defined in OpenAPI

        :param data_room_rescue_key: The data_room_rescue_key of this EncryptRoomRequest.
        :param is_encrypted: The is_encrypted of this EncryptRoomRequest.
        :param use_data_space_rescue_key: The use_data_space_rescue_key of this EncryptRoomRequest.
        """
        self.openapi_types = {
            'data_room_rescue_key': UserKeyPairContainer,
            'is_encrypted': bool,
            'use_data_space_rescue_key': bool
        }

        self.attribute_map = {
            'data_room_rescue_key': 'dataRoomRescueKey',
            'is_encrypted': 'isEncrypted',
            'use_data_space_rescue_key': 'useDataSpaceRescueKey'
        }

        self._data_room_rescue_key = data_room_rescue_key
        self._is_encrypted = is_encrypted
        self._use_data_space_rescue_key = use_data_space_rescue_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EncryptRoomRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EncryptRoomRequest of this EncryptRoomRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_room_rescue_key(self):
        """Gets the data_room_rescue_key of this EncryptRoomRequest.


        :return: The data_room_rescue_key of this EncryptRoomRequest.
        :rtype: UserKeyPairContainer
        """
        return self._data_room_rescue_key

    @data_room_rescue_key.setter
    def data_room_rescue_key(self, data_room_rescue_key):
        """Sets the data_room_rescue_key of this EncryptRoomRequest.


        :param data_room_rescue_key: The data_room_rescue_key of this EncryptRoomRequest.
        :type data_room_rescue_key: UserKeyPairContainer
        """

        self._data_room_rescue_key = data_room_rescue_key

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this EncryptRoomRequest.

        Encryption state

        :return: The is_encrypted of this EncryptRoomRequest.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this EncryptRoomRequest.

        Encryption state

        :param is_encrypted: The is_encrypted of this EncryptRoomRequest.
        :type is_encrypted: bool
        """
        if is_encrypted is None:
            raise ValueError("Invalid value for `is_encrypted`, must not be `None`")

        self._is_encrypted = is_encrypted

    @property
    def use_data_space_rescue_key(self):
        """Gets the use_data_space_rescue_key of this EncryptRoomRequest.

        Use system emergency password (rescue key) for files in this room

        :return: The use_data_space_rescue_key of this EncryptRoomRequest.
        :rtype: bool
        """
        return self._use_data_space_rescue_key

    @use_data_space_rescue_key.setter
    def use_data_space_rescue_key(self, use_data_space_rescue_key):
        """Sets the use_data_space_rescue_key of this EncryptRoomRequest.

        Use system emergency password (rescue key) for files in this room

        :param use_data_space_rescue_key: The use_data_space_rescue_key of this EncryptRoomRequest.
        :type use_data_space_rescue_key: bool
        """

        self._use_data_space_rescue_key = use_data_space_rescue_key
