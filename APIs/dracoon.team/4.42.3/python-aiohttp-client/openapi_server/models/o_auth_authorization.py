# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuthAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_name: str=None, created_at: datetime=None, expires_at: datetime=None, id: int=None, is_current_authorization: bool=None, is_standard: bool=None, used_at: datetime=None, user_agent_category: str=None, user_agent_info: str=None, user_agent_os: str=None, user_agent_type: str=None):
        """OAuthAuthorization - a model defined in OpenAPI

        :param client_id: The client_id of this OAuthAuthorization.
        :param client_name: The client_name of this OAuthAuthorization.
        :param created_at: The created_at of this OAuthAuthorization.
        :param expires_at: The expires_at of this OAuthAuthorization.
        :param id: The id of this OAuthAuthorization.
        :param is_current_authorization: The is_current_authorization of this OAuthAuthorization.
        :param is_standard: The is_standard of this OAuthAuthorization.
        :param used_at: The used_at of this OAuthAuthorization.
        :param user_agent_category: The user_agent_category of this OAuthAuthorization.
        :param user_agent_info: The user_agent_info of this OAuthAuthorization.
        :param user_agent_os: The user_agent_os of this OAuthAuthorization.
        :param user_agent_type: The user_agent_type of this OAuthAuthorization.
        """
        self.openapi_types = {
            'client_id': str,
            'client_name': str,
            'created_at': datetime,
            'expires_at': datetime,
            'id': int,
            'is_current_authorization': bool,
            'is_standard': bool,
            'used_at': datetime,
            'user_agent_category': str,
            'user_agent_info': str,
            'user_agent_os': str,
            'user_agent_type': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_name': 'clientName',
            'created_at': 'createdAt',
            'expires_at': 'expiresAt',
            'id': 'id',
            'is_current_authorization': 'isCurrentAuthorization',
            'is_standard': 'isStandard',
            'used_at': 'usedAt',
            'user_agent_category': 'userAgentCategory',
            'user_agent_info': 'userAgentInfo',
            'user_agent_os': 'userAgentOs',
            'user_agent_type': 'userAgentType'
        }

        self._client_id = client_id
        self._client_name = client_name
        self._created_at = created_at
        self._expires_at = expires_at
        self._id = id
        self._is_current_authorization = is_current_authorization
        self._is_standard = is_standard
        self._used_at = used_at
        self._user_agent_category = user_agent_category
        self._user_agent_info = user_agent_info
        self._user_agent_os = user_agent_os
        self._user_agent_type = user_agent_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthAuthorization of this OAuthAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OAuthAuthorization.

        ID of the OAuth client

        :return: The client_id of this OAuthAuthorization.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthAuthorization.

        ID of the OAuth client

        :param client_id: The client_id of this OAuthAuthorization.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this OAuthAuthorization.

        Name, which is shown at the client configuration and authorization.

        :return: The client_name of this OAuthAuthorization.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this OAuthAuthorization.

        Name, which is shown at the client configuration and authorization.

        :param client_name: The client_name of this OAuthAuthorization.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def created_at(self):
        """Gets the created_at of this OAuthAuthorization.

        &#128640; Since v4.13.0  Creation date of the authorization

        :return: The created_at of this OAuthAuthorization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this OAuthAuthorization.

        &#128640; Since v4.13.0  Creation date of the authorization

        :param created_at: The created_at of this OAuthAuthorization.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def expires_at(self):
        """Gets the expires_at of this OAuthAuthorization.

        Expiration date of the authorization

        :return: The expires_at of this OAuthAuthorization.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this OAuthAuthorization.

        Expiration date of the authorization

        :param expires_at: The expires_at of this OAuthAuthorization.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this OAuthAuthorization.

        &#128640; Since v4.12.0  ID of the OAuth authorization

        :return: The id of this OAuthAuthorization.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OAuthAuthorization.

        &#128640; Since v4.12.0  ID of the OAuth authorization

        :param id: The id of this OAuthAuthorization.
        :type id: int
        """

        self._id = id

    @property
    def is_current_authorization(self):
        """Gets the is_current_authorization of this OAuthAuthorization.

        &#128640; Since v4.25.0  Determines whether authorization matches the one from Authorization Header

        :return: The is_current_authorization of this OAuthAuthorization.
        :rtype: bool
        """
        return self._is_current_authorization

    @is_current_authorization.setter
    def is_current_authorization(self, is_current_authorization):
        """Sets the is_current_authorization of this OAuthAuthorization.

        &#128640; Since v4.25.0  Determines whether authorization matches the one from Authorization Header

        :param is_current_authorization: The is_current_authorization of this OAuthAuthorization.
        :type is_current_authorization: bool
        """

        self._is_current_authorization = is_current_authorization

    @property
    def is_standard(self):
        """Gets the is_standard of this OAuthAuthorization.

        &#128640; Since v4.12.0  Determines whether client is a standard client.

        :return: The is_standard of this OAuthAuthorization.
        :rtype: bool
        """
        return self._is_standard

    @is_standard.setter
    def is_standard(self, is_standard):
        """Sets the is_standard of this OAuthAuthorization.

        &#128640; Since v4.12.0  Determines whether client is a standard client.

        :param is_standard: The is_standard of this OAuthAuthorization.
        :type is_standard: bool
        """

        self._is_standard = is_standard

    @property
    def used_at(self):
        """Gets the used_at of this OAuthAuthorization.

        &#128640; Since v4.13.0  Usage date of the authorization  (Time of last usage.)

        :return: The used_at of this OAuthAuthorization.
        :rtype: datetime
        """
        return self._used_at

    @used_at.setter
    def used_at(self, used_at):
        """Sets the used_at of this OAuthAuthorization.

        &#128640; Since v4.13.0  Usage date of the authorization  (Time of last usage.)

        :param used_at: The used_at of this OAuthAuthorization.
        :type used_at: datetime
        """

        self._used_at = used_at

    @property
    def user_agent_category(self):
        """Gets the user_agent_category of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent category.

        :return: The user_agent_category of this OAuthAuthorization.
        :rtype: str
        """
        return self._user_agent_category

    @user_agent_category.setter
    def user_agent_category(self, user_agent_category):
        """Sets the user_agent_category of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent category.

        :param user_agent_category: The user_agent_category of this OAuthAuthorization.
        :type user_agent_category: str
        """
        allowed_values = ["browser", "native", "unknown"]  # noqa: E501
        if user_agent_category not in allowed_values:
            raise ValueError(
                "Invalid value for `user_agent_category` ({0}), must be one of {1}"
                .format(user_agent_category, allowed_values)
            )

        self._user_agent_category = user_agent_category

    @property
    def user_agent_info(self):
        """Gets the user_agent_info of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent info.

        :return: The user_agent_info of this OAuthAuthorization.
        :rtype: str
        """
        return self._user_agent_info

    @user_agent_info.setter
    def user_agent_info(self, user_agent_info):
        """Sets the user_agent_info of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent info.

        :param user_agent_info: The user_agent_info of this OAuthAuthorization.
        :type user_agent_info: str
        """

        self._user_agent_info = user_agent_info

    @property
    def user_agent_os(self):
        """Gets the user_agent_os of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent OS.

        :return: The user_agent_os of this OAuthAuthorization.
        :rtype: str
        """
        return self._user_agent_os

    @user_agent_os.setter
    def user_agent_os(self, user_agent_os):
        """Sets the user_agent_os of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent OS.

        :param user_agent_os: The user_agent_os of this OAuthAuthorization.
        :type user_agent_os: str
        """

        self._user_agent_os = user_agent_os

    @property
    def user_agent_type(self):
        """Gets the user_agent_type of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent type.

        :return: The user_agent_type of this OAuthAuthorization.
        :rtype: str
        """
        return self._user_agent_type

    @user_agent_type.setter
    def user_agent_type(self, user_agent_type):
        """Sets the user_agent_type of this OAuthAuthorization.

        &#128640; Since v4.12.0  User agent type.

        :param user_agent_type: The user_agent_type of this OAuthAuthorization.
        :type user_agent_type: str
        """

        self._user_agent_type = user_agent_type
