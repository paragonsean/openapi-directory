# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_auth_token_restrictions import UpdateAuthTokenRestrictions
from openapi_server import util


class UpdateGeneralSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token_restrictions: UpdateAuthTokenRestrictions=None, crypto_enabled: bool=None, email_notification_button_enabled: bool=None, eula_enabled: bool=None, hide_login_input_fields: bool=None, media_server_enabled: bool=None, s3_tags_enabled: bool=None, share_password_sms_enabled: bool=None, weak_password_enabled: bool=None):
        """UpdateGeneralSettings - a model defined in OpenAPI

        :param auth_token_restrictions: The auth_token_restrictions of this UpdateGeneralSettings.
        :param crypto_enabled: The crypto_enabled of this UpdateGeneralSettings.
        :param email_notification_button_enabled: The email_notification_button_enabled of this UpdateGeneralSettings.
        :param eula_enabled: The eula_enabled of this UpdateGeneralSettings.
        :param hide_login_input_fields: The hide_login_input_fields of this UpdateGeneralSettings.
        :param media_server_enabled: The media_server_enabled of this UpdateGeneralSettings.
        :param s3_tags_enabled: The s3_tags_enabled of this UpdateGeneralSettings.
        :param share_password_sms_enabled: The share_password_sms_enabled of this UpdateGeneralSettings.
        :param weak_password_enabled: The weak_password_enabled of this UpdateGeneralSettings.
        """
        self.openapi_types = {
            'auth_token_restrictions': UpdateAuthTokenRestrictions,
            'crypto_enabled': bool,
            'email_notification_button_enabled': bool,
            'eula_enabled': bool,
            'hide_login_input_fields': bool,
            'media_server_enabled': bool,
            's3_tags_enabled': bool,
            'share_password_sms_enabled': bool,
            'weak_password_enabled': bool
        }

        self.attribute_map = {
            'auth_token_restrictions': 'authTokenRestrictions',
            'crypto_enabled': 'cryptoEnabled',
            'email_notification_button_enabled': 'emailNotificationButtonEnabled',
            'eula_enabled': 'eulaEnabled',
            'hide_login_input_fields': 'hideLoginInputFields',
            'media_server_enabled': 'mediaServerEnabled',
            's3_tags_enabled': 's3TagsEnabled',
            'share_password_sms_enabled': 'sharePasswordSmsEnabled',
            'weak_password_enabled': 'weakPasswordEnabled'
        }

        self._auth_token_restrictions = auth_token_restrictions
        self._crypto_enabled = crypto_enabled
        self._email_notification_button_enabled = email_notification_button_enabled
        self._eula_enabled = eula_enabled
        self._hide_login_input_fields = hide_login_input_fields
        self._media_server_enabled = media_server_enabled
        self._s3_tags_enabled = s3_tags_enabled
        self._share_password_sms_enabled = share_password_sms_enabled
        self._weak_password_enabled = weak_password_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateGeneralSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateGeneralSettings of this UpdateGeneralSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token_restrictions(self):
        """Gets the auth_token_restrictions of this UpdateGeneralSettings.


        :return: The auth_token_restrictions of this UpdateGeneralSettings.
        :rtype: UpdateAuthTokenRestrictions
        """
        return self._auth_token_restrictions

    @auth_token_restrictions.setter
    def auth_token_restrictions(self, auth_token_restrictions):
        """Sets the auth_token_restrictions of this UpdateGeneralSettings.


        :param auth_token_restrictions: The auth_token_restrictions of this UpdateGeneralSettings.
        :type auth_token_restrictions: UpdateAuthTokenRestrictions
        """

        self._auth_token_restrictions = auth_token_restrictions

    @property
    def crypto_enabled(self):
        """Gets the crypto_enabled of this UpdateGeneralSettings.

        Activation status of client-side encryption.  Can only be enabled once; disabling is not possible.

        :return: The crypto_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._crypto_enabled

    @crypto_enabled.setter
    def crypto_enabled(self, crypto_enabled):
        """Sets the crypto_enabled of this UpdateGeneralSettings.

        Activation status of client-side encryption.  Can only be enabled once; disabling is not possible.

        :param crypto_enabled: The crypto_enabled of this UpdateGeneralSettings.
        :type crypto_enabled: bool
        """

        self._crypto_enabled = crypto_enabled

    @property
    def email_notification_button_enabled(self):
        """Gets the email_notification_button_enabled of this UpdateGeneralSettings.

        Enable email notification button

        :return: The email_notification_button_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._email_notification_button_enabled

    @email_notification_button_enabled.setter
    def email_notification_button_enabled(self, email_notification_button_enabled):
        """Sets the email_notification_button_enabled of this UpdateGeneralSettings.

        Enable email notification button

        :param email_notification_button_enabled: The email_notification_button_enabled of this UpdateGeneralSettings.
        :type email_notification_button_enabled: bool
        """

        self._email_notification_button_enabled = email_notification_button_enabled

    @property
    def eula_enabled(self):
        """Gets the eula_enabled of this UpdateGeneralSettings.

        Each user has to confirm the EULA at first login.

        :return: The eula_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._eula_enabled

    @eula_enabled.setter
    def eula_enabled(self, eula_enabled):
        """Sets the eula_enabled of this UpdateGeneralSettings.

        Each user has to confirm the EULA at first login.

        :param eula_enabled: The eula_enabled of this UpdateGeneralSettings.
        :type eula_enabled: bool
        """

        self._eula_enabled = eula_enabled

    @property
    def hide_login_input_fields(self):
        """Gets the hide_login_input_fields of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.13.0  Defines if login fields should be hidden

        :return: The hide_login_input_fields of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._hide_login_input_fields

    @hide_login_input_fields.setter
    def hide_login_input_fields(self, hide_login_input_fields):
        """Sets the hide_login_input_fields of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.13.0  Defines if login fields should be hidden

        :param hide_login_input_fields: The hide_login_input_fields of this UpdateGeneralSettings.
        :type hide_login_input_fields: bool
        """

        self._hide_login_input_fields = hide_login_input_fields

    @property
    def media_server_enabled(self):
        """Gets the media_server_enabled of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.12.0  Determines if the media server is enabled

        :return: The media_server_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._media_server_enabled

    @media_server_enabled.setter
    def media_server_enabled(self, media_server_enabled):
        """Sets the media_server_enabled of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.12.0  Determines if the media server is enabled

        :param media_server_enabled: The media_server_enabled of this UpdateGeneralSettings.
        :type media_server_enabled: bool
        """

        self._media_server_enabled = media_server_enabled

    @property
    def s3_tags_enabled(self):
        """Gets the s3_tags_enabled of this UpdateGeneralSettings.

        &#128640; Since v4.9.0  Defines if S3 tags are enabled

        :return: The s3_tags_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._s3_tags_enabled

    @s3_tags_enabled.setter
    def s3_tags_enabled(self, s3_tags_enabled):
        """Sets the s3_tags_enabled of this UpdateGeneralSettings.

        &#128640; Since v4.9.0  Defines if S3 tags are enabled

        :param s3_tags_enabled: The s3_tags_enabled of this UpdateGeneralSettings.
        :type s3_tags_enabled: bool
        """

        self._s3_tags_enabled = s3_tags_enabled

    @property
    def share_password_sms_enabled(self):
        """Gets the share_password_sms_enabled of this UpdateGeneralSettings.

        Allow sending of share passwords via SMS

        :return: The share_password_sms_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._share_password_sms_enabled

    @share_password_sms_enabled.setter
    def share_password_sms_enabled(self, share_password_sms_enabled):
        """Sets the share_password_sms_enabled of this UpdateGeneralSettings.

        Allow sending of share passwords via SMS

        :param share_password_sms_enabled: The share_password_sms_enabled of this UpdateGeneralSettings.
        :type share_password_sms_enabled: bool
        """

        self._share_password_sms_enabled = share_password_sms_enabled

    @property
    def weak_password_enabled(self):
        """Gets the weak_password_enabled of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.14.0  Allow weak password  * A weak password has to fulfill the following criteria:     * is at least 8 characters long     * contains letters and numbers  * A strong password has to fulfill the following criteria in addition:     * contains at least one special character     * contains upper and lower case characters  Please use `PUT /system/config/policies/passwords` API to change configured password policies.

        :return: The weak_password_enabled of this UpdateGeneralSettings.
        :rtype: bool
        """
        return self._weak_password_enabled

    @weak_password_enabled.setter
    def weak_password_enabled(self, weak_password_enabled):
        """Sets the weak_password_enabled of this UpdateGeneralSettings.

        &#128679; Deprecated since v4.14.0  Allow weak password  * A weak password has to fulfill the following criteria:     * is at least 8 characters long     * contains letters and numbers  * A strong password has to fulfill the following criteria in addition:     * contains at least one special character     * contains upper and lower case characters  Please use `PUT /system/config/policies/passwords` API to change configured password policies.

        :param weak_password_enabled: The weak_password_enabled of this UpdateGeneralSettings.
        :type weak_password_enabled: bool
        """

        self._weak_password_enabled = weak_password_enabled
