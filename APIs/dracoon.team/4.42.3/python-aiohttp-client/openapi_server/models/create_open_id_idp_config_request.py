# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateOpenIdIdpConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_end_point_url: str=None, client_id: str=None, client_secret: str=None, fallback_mapping_claim: str=None, flow: str=None, issuer: str=None, jwks_end_point_url: str=None, mapping_claim: str=None, name: str=None, pkce_challenge_method: str='plain', pkce_enabled: bool=False, redirect_uris: List[str]=None, scopes: List[str]=None, token_end_point_url: str=None, user_import_enabled: bool=False, user_import_group: int=None, user_info_end_point_url: str=None, user_info_source: str=None, user_management_url: str=None, user_update_enabled: bool=False):
        """CreateOpenIdIdpConfigRequest - a model defined in OpenAPI

        :param authorization_end_point_url: The authorization_end_point_url of this CreateOpenIdIdpConfigRequest.
        :param client_id: The client_id of this CreateOpenIdIdpConfigRequest.
        :param client_secret: The client_secret of this CreateOpenIdIdpConfigRequest.
        :param fallback_mapping_claim: The fallback_mapping_claim of this CreateOpenIdIdpConfigRequest.
        :param flow: The flow of this CreateOpenIdIdpConfigRequest.
        :param issuer: The issuer of this CreateOpenIdIdpConfigRequest.
        :param jwks_end_point_url: The jwks_end_point_url of this CreateOpenIdIdpConfigRequest.
        :param mapping_claim: The mapping_claim of this CreateOpenIdIdpConfigRequest.
        :param name: The name of this CreateOpenIdIdpConfigRequest.
        :param pkce_challenge_method: The pkce_challenge_method of this CreateOpenIdIdpConfigRequest.
        :param pkce_enabled: The pkce_enabled of this CreateOpenIdIdpConfigRequest.
        :param redirect_uris: The redirect_uris of this CreateOpenIdIdpConfigRequest.
        :param scopes: The scopes of this CreateOpenIdIdpConfigRequest.
        :param token_end_point_url: The token_end_point_url of this CreateOpenIdIdpConfigRequest.
        :param user_import_enabled: The user_import_enabled of this CreateOpenIdIdpConfigRequest.
        :param user_import_group: The user_import_group of this CreateOpenIdIdpConfigRequest.
        :param user_info_end_point_url: The user_info_end_point_url of this CreateOpenIdIdpConfigRequest.
        :param user_info_source: The user_info_source of this CreateOpenIdIdpConfigRequest.
        :param user_management_url: The user_management_url of this CreateOpenIdIdpConfigRequest.
        :param user_update_enabled: The user_update_enabled of this CreateOpenIdIdpConfigRequest.
        """
        self.openapi_types = {
            'authorization_end_point_url': str,
            'client_id': str,
            'client_secret': str,
            'fallback_mapping_claim': str,
            'flow': str,
            'issuer': str,
            'jwks_end_point_url': str,
            'mapping_claim': str,
            'name': str,
            'pkce_challenge_method': str,
            'pkce_enabled': bool,
            'redirect_uris': List[str],
            'scopes': List[str],
            'token_end_point_url': str,
            'user_import_enabled': bool,
            'user_import_group': int,
            'user_info_end_point_url': str,
            'user_info_source': str,
            'user_management_url': str,
            'user_update_enabled': bool
        }

        self.attribute_map = {
            'authorization_end_point_url': 'authorizationEndPointUrl',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'fallback_mapping_claim': 'fallbackMappingClaim',
            'flow': 'flow',
            'issuer': 'issuer',
            'jwks_end_point_url': 'jwksEndPointUrl',
            'mapping_claim': 'mappingClaim',
            'name': 'name',
            'pkce_challenge_method': 'pkceChallengeMethod',
            'pkce_enabled': 'pkceEnabled',
            'redirect_uris': 'redirectUris',
            'scopes': 'scopes',
            'token_end_point_url': 'tokenEndPointUrl',
            'user_import_enabled': 'userImportEnabled',
            'user_import_group': 'userImportGroup',
            'user_info_end_point_url': 'userInfoEndPointUrl',
            'user_info_source': 'userInfoSource',
            'user_management_url': 'userManagementUrl',
            'user_update_enabled': 'userUpdateEnabled'
        }

        self._authorization_end_point_url = authorization_end_point_url
        self._client_id = client_id
        self._client_secret = client_secret
        self._fallback_mapping_claim = fallback_mapping_claim
        self._flow = flow
        self._issuer = issuer
        self._jwks_end_point_url = jwks_end_point_url
        self._mapping_claim = mapping_claim
        self._name = name
        self._pkce_challenge_method = pkce_challenge_method
        self._pkce_enabled = pkce_enabled
        self._redirect_uris = redirect_uris
        self._scopes = scopes
        self._token_end_point_url = token_end_point_url
        self._user_import_enabled = user_import_enabled
        self._user_import_group = user_import_group
        self._user_info_end_point_url = user_info_end_point_url
        self._user_info_source = user_info_source
        self._user_management_url = user_management_url
        self._user_update_enabled = user_update_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOpenIdIdpConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOpenIdIdpConfigRequest of this CreateOpenIdIdpConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_end_point_url(self):
        """Gets the authorization_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the authorization endpoint

        :return: The authorization_end_point_url of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._authorization_end_point_url

    @authorization_end_point_url.setter
    def authorization_end_point_url(self, authorization_end_point_url):
        """Sets the authorization_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the authorization endpoint

        :param authorization_end_point_url: The authorization_end_point_url of this CreateOpenIdIdpConfigRequest.
        :type authorization_end_point_url: str
        """
        if authorization_end_point_url is None:
            raise ValueError("Invalid value for `authorization_end_point_url`, must not be `None`")

        self._authorization_end_point_url = authorization_end_point_url

    @property
    def client_id(self):
        """Gets the client_id of this CreateOpenIdIdpConfigRequest.

        ID of the OpenID client

        :return: The client_id of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CreateOpenIdIdpConfigRequest.

        ID of the OpenID client

        :param client_id: The client_id of this CreateOpenIdIdpConfigRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this CreateOpenIdIdpConfigRequest.

        Secret, which client uses at authentication.

        :return: The client_secret of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CreateOpenIdIdpConfigRequest.

        Secret, which client uses at authentication.

        :param client_secret: The client_secret of this CreateOpenIdIdpConfigRequest.
        :type client_secret: str
        """
        if client_secret is None:
            raise ValueError("Invalid value for `client_secret`, must not be `None`")

        self._client_secret = client_secret

    @property
    def fallback_mapping_claim(self):
        """Gets the fallback_mapping_claim of this CreateOpenIdIdpConfigRequest.

        Name of the claim which is used for the user mapping fallback.

        :return: The fallback_mapping_claim of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._fallback_mapping_claim

    @fallback_mapping_claim.setter
    def fallback_mapping_claim(self, fallback_mapping_claim):
        """Sets the fallback_mapping_claim of this CreateOpenIdIdpConfigRequest.

        Name of the claim which is used for the user mapping fallback.

        :param fallback_mapping_claim: The fallback_mapping_claim of this CreateOpenIdIdpConfigRequest.
        :type fallback_mapping_claim: str
        """

        self._fallback_mapping_claim = fallback_mapping_claim

    @property
    def flow(self):
        """Gets the flow of this CreateOpenIdIdpConfigRequest.

        &#128640; Since v4.11.0  Flow, which is used at authentication

        :return: The flow of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this CreateOpenIdIdpConfigRequest.

        &#128640; Since v4.11.0  Flow, which is used at authentication

        :param flow: The flow of this CreateOpenIdIdpConfigRequest.
        :type flow: str
        """
        allowed_values = ["authorization_code", "hybrid"]  # noqa: E501
        if flow not in allowed_values:
            raise ValueError(
                "Invalid value for `flow` ({0}), must be one of {1}"
                .format(flow, allowed_values)
            )

        self._flow = flow

    @property
    def issuer(self):
        """Gets the issuer of this CreateOpenIdIdpConfigRequest.

        Issuer identifier of the IDP  The value is a case sensitive URL.

        :return: The issuer of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CreateOpenIdIdpConfigRequest.

        Issuer identifier of the IDP  The value is a case sensitive URL.

        :param issuer: The issuer of this CreateOpenIdIdpConfigRequest.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def jwks_end_point_url(self):
        """Gets the jwks_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the JWKS endpoint

        :return: The jwks_end_point_url of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._jwks_end_point_url

    @jwks_end_point_url.setter
    def jwks_end_point_url(self, jwks_end_point_url):
        """Sets the jwks_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the JWKS endpoint

        :param jwks_end_point_url: The jwks_end_point_url of this CreateOpenIdIdpConfigRequest.
        :type jwks_end_point_url: str
        """
        if jwks_end_point_url is None:
            raise ValueError("Invalid value for `jwks_end_point_url`, must not be `None`")

        self._jwks_end_point_url = jwks_end_point_url

    @property
    def mapping_claim(self):
        """Gets the mapping_claim of this CreateOpenIdIdpConfigRequest.

        Name of the claim which is used for the user mapping.

        :return: The mapping_claim of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._mapping_claim

    @mapping_claim.setter
    def mapping_claim(self, mapping_claim):
        """Sets the mapping_claim of this CreateOpenIdIdpConfigRequest.

        Name of the claim which is used for the user mapping.

        :param mapping_claim: The mapping_claim of this CreateOpenIdIdpConfigRequest.
        :type mapping_claim: str
        """
        if mapping_claim is None:
            raise ValueError("Invalid value for `mapping_claim`, must not be `None`")

        self._mapping_claim = mapping_claim

    @property
    def name(self):
        """Gets the name of this CreateOpenIdIdpConfigRequest.

        Name of the IDP

        :return: The name of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOpenIdIdpConfigRequest.

        Name of the IDP

        :param name: The name of this CreateOpenIdIdpConfigRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pkce_challenge_method(self):
        """Gets the pkce_challenge_method of this CreateOpenIdIdpConfigRequest.

        PKCE code challenge method.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)

        :return: The pkce_challenge_method of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._pkce_challenge_method

    @pkce_challenge_method.setter
    def pkce_challenge_method(self, pkce_challenge_method):
        """Sets the pkce_challenge_method of this CreateOpenIdIdpConfigRequest.

        PKCE code challenge method.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)

        :param pkce_challenge_method: The pkce_challenge_method of this CreateOpenIdIdpConfigRequest.
        :type pkce_challenge_method: str
        """

        self._pkce_challenge_method = pkce_challenge_method

    @property
    def pkce_enabled(self):
        """Gets the pkce_enabled of this CreateOpenIdIdpConfigRequest.

        Determines whether PKCE is enabled.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)

        :return: The pkce_enabled of this CreateOpenIdIdpConfigRequest.
        :rtype: bool
        """
        return self._pkce_enabled

    @pkce_enabled.setter
    def pkce_enabled(self, pkce_enabled):
        """Sets the pkce_enabled of this CreateOpenIdIdpConfigRequest.

        Determines whether PKCE is enabled.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)

        :param pkce_enabled: The pkce_enabled of this CreateOpenIdIdpConfigRequest.
        :type pkce_enabled: bool
        """

        self._pkce_enabled = pkce_enabled

    @property
    def redirect_uris(self):
        """Gets the redirect_uris of this CreateOpenIdIdpConfigRequest.

        URIs, to which a user is redirected after authorization.

        :return: The redirect_uris of this CreateOpenIdIdpConfigRequest.
        :rtype: List[str]
        """
        return self._redirect_uris

    @redirect_uris.setter
    def redirect_uris(self, redirect_uris):
        """Sets the redirect_uris of this CreateOpenIdIdpConfigRequest.

        URIs, to which a user is redirected after authorization.

        :param redirect_uris: The redirect_uris of this CreateOpenIdIdpConfigRequest.
        :type redirect_uris: List[str]
        """
        if redirect_uris is None:
            raise ValueError("Invalid value for `redirect_uris`, must not be `None`")

        self._redirect_uris = redirect_uris

    @property
    def scopes(self):
        """Gets the scopes of this CreateOpenIdIdpConfigRequest.

        List of requested scopes

        :return: The scopes of this CreateOpenIdIdpConfigRequest.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this CreateOpenIdIdpConfigRequest.

        List of requested scopes

        :param scopes: The scopes of this CreateOpenIdIdpConfigRequest.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def token_end_point_url(self):
        """Gets the token_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the token endpoint

        :return: The token_end_point_url of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._token_end_point_url

    @token_end_point_url.setter
    def token_end_point_url(self, token_end_point_url):
        """Sets the token_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the token endpoint

        :param token_end_point_url: The token_end_point_url of this CreateOpenIdIdpConfigRequest.
        :type token_end_point_url: str
        """
        if token_end_point_url is None:
            raise ValueError("Invalid value for `token_end_point_url`, must not be `None`")

        self._token_end_point_url = token_end_point_url

    @property
    def user_import_enabled(self):
        """Gets the user_import_enabled of this CreateOpenIdIdpConfigRequest.

        Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.

        :return: The user_import_enabled of this CreateOpenIdIdpConfigRequest.
        :rtype: bool
        """
        return self._user_import_enabled

    @user_import_enabled.setter
    def user_import_enabled(self, user_import_enabled):
        """Sets the user_import_enabled of this CreateOpenIdIdpConfigRequest.

        Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.

        :param user_import_enabled: The user_import_enabled of this CreateOpenIdIdpConfigRequest.
        :type user_import_enabled: bool
        """

        self._user_import_enabled = user_import_enabled

    @property
    def user_import_group(self):
        """Gets the user_import_group of this CreateOpenIdIdpConfigRequest.

        User group that is assigned to users who are created by automatic import.  Reset with `0`

        :return: The user_import_group of this CreateOpenIdIdpConfigRequest.
        :rtype: int
        """
        return self._user_import_group

    @user_import_group.setter
    def user_import_group(self, user_import_group):
        """Sets the user_import_group of this CreateOpenIdIdpConfigRequest.

        User group that is assigned to users who are created by automatic import.  Reset with `0`

        :param user_import_group: The user_import_group of this CreateOpenIdIdpConfigRequest.
        :type user_import_group: int
        """

        self._user_import_group = user_import_group

    @property
    def user_info_end_point_url(self):
        """Gets the user_info_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the user info endpoint

        :return: The user_info_end_point_url of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._user_info_end_point_url

    @user_info_end_point_url.setter
    def user_info_end_point_url(self, user_info_end_point_url):
        """Sets the user_info_end_point_url of this CreateOpenIdIdpConfigRequest.

        URL of the user info endpoint

        :param user_info_end_point_url: The user_info_end_point_url of this CreateOpenIdIdpConfigRequest.
        :type user_info_end_point_url: str
        """
        if user_info_end_point_url is None:
            raise ValueError("Invalid value for `user_info_end_point_url`, must not be `None`")

        self._user_info_end_point_url = user_info_end_point_url

    @property
    def user_info_source(self):
        """Gets the user_info_source of this CreateOpenIdIdpConfigRequest.

        &#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.

        :return: The user_info_source of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._user_info_source

    @user_info_source.setter
    def user_info_source(self, user_info_source):
        """Sets the user_info_source of this CreateOpenIdIdpConfigRequest.

        &#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.

        :param user_info_source: The user_info_source of this CreateOpenIdIdpConfigRequest.
        :type user_info_source: str
        """
        allowed_values = ["user_info_endpoint", "id_token"]  # noqa: E501
        if user_info_source not in allowed_values:
            raise ValueError(
                "Invalid value for `user_info_source` ({0}), must be one of {1}"
                .format(user_info_source, allowed_values)
            )

        self._user_info_source = user_info_source

    @property
    def user_management_url(self):
        """Gets the user_management_url of this CreateOpenIdIdpConfigRequest.

        URL of the user management UI.  Use empty string to remove.

        :return: The user_management_url of this CreateOpenIdIdpConfigRequest.
        :rtype: str
        """
        return self._user_management_url

    @user_management_url.setter
    def user_management_url(self, user_management_url):
        """Sets the user_management_url of this CreateOpenIdIdpConfigRequest.

        URL of the user management UI.  Use empty string to remove.

        :param user_management_url: The user_management_url of this CreateOpenIdIdpConfigRequest.
        :type user_management_url: str
        """

        self._user_management_url = user_management_url

    @property
    def user_update_enabled(self):
        """Gets the user_update_enabled of this CreateOpenIdIdpConfigRequest.

        Determines if the DRACOON account is updated with data from AD / IDP.  For OpenID Connect, the scopes `email` and `profile` are needed.

        :return: The user_update_enabled of this CreateOpenIdIdpConfigRequest.
        :rtype: bool
        """
        return self._user_update_enabled

    @user_update_enabled.setter
    def user_update_enabled(self, user_update_enabled):
        """Sets the user_update_enabled of this CreateOpenIdIdpConfigRequest.

        Determines if the DRACOON account is updated with data from AD / IDP.  For OpenID Connect, the scopes `email` and `profile` are needed.

        :param user_update_enabled: The user_update_enabled of this CreateOpenIdIdpConfigRequest.
        :type user_update_enabled: bool
        """

        self._user_update_enabled = user_update_enabled
