# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mfa_config import MfaConfig
from openapi_server.models.object_expiration import ObjectExpiration
from openapi_server.models.user_auth_data import UserAuthData
from openapi_server.models.user_auth_method import UserAuthMethod
from openapi_server import util


class CreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_data: UserAuthData=None, auth_methods: List[UserAuthMethod]=None, email: str=None, expiration: ObjectExpiration=None, first_name: str=None, gender: str='n', is_nonmember_viewer: bool=None, last_name: str=None, login: str=None, mfa_config: MfaConfig=None, needs_to_change_password: bool=None, notify_user: bool=None, password: str=None, phone: str=None, receiver_language: str=None, title: str=None, user_name: str=None):
        """CreateUserRequest - a model defined in OpenAPI

        :param auth_data: The auth_data of this CreateUserRequest.
        :param auth_methods: The auth_methods of this CreateUserRequest.
        :param email: The email of this CreateUserRequest.
        :param expiration: The expiration of this CreateUserRequest.
        :param first_name: The first_name of this CreateUserRequest.
        :param gender: The gender of this CreateUserRequest.
        :param is_nonmember_viewer: The is_nonmember_viewer of this CreateUserRequest.
        :param last_name: The last_name of this CreateUserRequest.
        :param login: The login of this CreateUserRequest.
        :param mfa_config: The mfa_config of this CreateUserRequest.
        :param needs_to_change_password: The needs_to_change_password of this CreateUserRequest.
        :param notify_user: The notify_user of this CreateUserRequest.
        :param password: The password of this CreateUserRequest.
        :param phone: The phone of this CreateUserRequest.
        :param receiver_language: The receiver_language of this CreateUserRequest.
        :param title: The title of this CreateUserRequest.
        :param user_name: The user_name of this CreateUserRequest.
        """
        self.openapi_types = {
            'auth_data': UserAuthData,
            'auth_methods': List[UserAuthMethod],
            'email': str,
            'expiration': ObjectExpiration,
            'first_name': str,
            'gender': str,
            'is_nonmember_viewer': bool,
            'last_name': str,
            'login': str,
            'mfa_config': MfaConfig,
            'needs_to_change_password': bool,
            'notify_user': bool,
            'password': str,
            'phone': str,
            'receiver_language': str,
            'title': str,
            'user_name': str
        }

        self.attribute_map = {
            'auth_data': 'authData',
            'auth_methods': 'authMethods',
            'email': 'email',
            'expiration': 'expiration',
            'first_name': 'firstName',
            'gender': 'gender',
            'is_nonmember_viewer': 'isNonmemberViewer',
            'last_name': 'lastName',
            'login': 'login',
            'mfa_config': 'mfaConfig',
            'needs_to_change_password': 'needsToChangePassword',
            'notify_user': 'notifyUser',
            'password': 'password',
            'phone': 'phone',
            'receiver_language': 'receiverLanguage',
            'title': 'title',
            'user_name': 'userName'
        }

        self._auth_data = auth_data
        self._auth_methods = auth_methods
        self._email = email
        self._expiration = expiration
        self._first_name = first_name
        self._gender = gender
        self._is_nonmember_viewer = is_nonmember_viewer
        self._last_name = last_name
        self._login = login
        self._mfa_config = mfa_config
        self._needs_to_change_password = needs_to_change_password
        self._notify_user = notify_user
        self._password = password
        self._phone = phone
        self._receiver_language = receiver_language
        self._title = title
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserRequest of this CreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_data(self):
        """Gets the auth_data of this CreateUserRequest.


        :return: The auth_data of this CreateUserRequest.
        :rtype: UserAuthData
        """
        return self._auth_data

    @auth_data.setter
    def auth_data(self, auth_data):
        """Sets the auth_data of this CreateUserRequest.


        :param auth_data: The auth_data of this CreateUserRequest.
        :type auth_data: UserAuthData
        """

        self._auth_data = auth_data

    @property
    def auth_methods(self):
        """Gets the auth_methods of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `radius`  * `openid`  use `authData` instead

        :return: The auth_methods of this CreateUserRequest.
        :rtype: List[UserAuthMethod]
        """
        return self._auth_methods

    @auth_methods.setter
    def auth_methods(self, auth_methods):
        """Sets the auth_methods of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `radius`  * `openid`  use `authData` instead

        :param auth_methods: The auth_methods of this CreateUserRequest.
        :type auth_methods: List[UserAuthMethod]
        """

        self._auth_methods = auth_methods

    @property
    def email(self):
        """Gets the email of this CreateUserRequest.

        Email 

        :return: The email of this CreateUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserRequest.

        Email 

        :param email: The email of this CreateUserRequest.
        :type email: str
        """

        self._email = email

    @property
    def expiration(self):
        """Gets the expiration of this CreateUserRequest.


        :return: The expiration of this CreateUserRequest.
        :rtype: ObjectExpiration
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this CreateUserRequest.


        :param expiration: The expiration of this CreateUserRequest.
        :type expiration: ObjectExpiration
        """

        self._expiration = expiration

    @property
    def first_name(self):
        """Gets the first_name of this CreateUserRequest.

        User first name

        :return: The first_name of this CreateUserRequest.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateUserRequest.

        User first name

        :param first_name: The first_name of this CreateUserRequest.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this CreateUserRequest.

        &#128679; Deprecated since v4.12.0  Gender  Do NOT use `gender`! It will be ignored.

        :return: The gender of this CreateUserRequest.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this CreateUserRequest.

        &#128679; Deprecated since v4.12.0  Gender  Do NOT use `gender`! It will be ignored.

        :param gender: The gender of this CreateUserRequest.
        :type gender: str
        """

        self._gender = gender

    @property
    def is_nonmember_viewer(self):
        """Gets the is_nonmember_viewer of this CreateUserRequest.

        &#128640; Since v4.12.0  Determines whether user has the role NONMEMBER_VIEWER

        :return: The is_nonmember_viewer of this CreateUserRequest.
        :rtype: bool
        """
        return self._is_nonmember_viewer

    @is_nonmember_viewer.setter
    def is_nonmember_viewer(self, is_nonmember_viewer):
        """Sets the is_nonmember_viewer of this CreateUserRequest.

        &#128640; Since v4.12.0  Determines whether user has the role NONMEMBER_VIEWER

        :param is_nonmember_viewer: The is_nonmember_viewer of this CreateUserRequest.
        :type is_nonmember_viewer: bool
        """

        self._is_nonmember_viewer = is_nonmember_viewer

    @property
    def last_name(self):
        """Gets the last_name of this CreateUserRequest.

        User last name

        :return: The last_name of this CreateUserRequest.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateUserRequest.

        User last name

        :param last_name: The last_name of this CreateUserRequest.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def login(self):
        """Gets the login of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  User login name

        :return: The login of this CreateUserRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  User login name

        :param login: The login of this CreateUserRequest.
        :type login: str
        """

        self._login = login

    @property
    def mfa_config(self):
        """Gets the mfa_config of this CreateUserRequest.


        :return: The mfa_config of this CreateUserRequest.
        :rtype: MfaConfig
        """
        return self._mfa_config

    @mfa_config.setter
    def mfa_config(self, mfa_config):
        """Sets the mfa_config of this CreateUserRequest.


        :param mfa_config: The mfa_config of this CreateUserRequest.
        :type mfa_config: MfaConfig
        """

        self._mfa_config = mfa_config

    @property
    def needs_to_change_password(self):
        """Gets the needs_to_change_password of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use `authDate.mustChangePassword` instead

        :return: The needs_to_change_password of this CreateUserRequest.
        :rtype: bool
        """
        return self._needs_to_change_password

    @needs_to_change_password.setter
    def needs_to_change_password(self, needs_to_change_password):
        """Sets the needs_to_change_password of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use `authDate.mustChangePassword` instead

        :param needs_to_change_password: The needs_to_change_password of this CreateUserRequest.
        :type needs_to_change_password: bool
        """

        self._needs_to_change_password = needs_to_change_password

    @property
    def notify_user(self):
        """Gets the notify_user of this CreateUserRequest.

        &#128640; Since v4.9.0  Notify user about his new account  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types

        :return: The notify_user of this CreateUserRequest.
        :rtype: bool
        """
        return self._notify_user

    @notify_user.setter
    def notify_user(self, notify_user):
        """Sets the notify_user of this CreateUserRequest.

        &#128640; Since v4.9.0  Notify user about his new account  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types

        :param notify_user: The notify_user of this CreateUserRequest.
        :type notify_user: bool
        """

        self._notify_user = notify_user

    @property
    def password(self):
        """Gets the password of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  An initial password may be preset  use `authData` instead

        :return: The password of this CreateUserRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CreateUserRequest.

        &#128679; Deprecated since v4.13.0  An initial password may be preset  use `authData` instead

        :param password: The password of this CreateUserRequest.
        :type password: str
        """

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this CreateUserRequest.

        Phone number

        :return: The phone of this CreateUserRequest.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateUserRequest.

        Phone number

        :param phone: The phone of this CreateUserRequest.
        :type phone: str
        """

        self._phone = phone

    @property
    def receiver_language(self):
        """Gets the receiver_language of this CreateUserRequest.

        IETF language tag

        :return: The receiver_language of this CreateUserRequest.
        :rtype: str
        """
        return self._receiver_language

    @receiver_language.setter
    def receiver_language(self, receiver_language):
        """Sets the receiver_language of this CreateUserRequest.

        IETF language tag

        :param receiver_language: The receiver_language of this CreateUserRequest.
        :type receiver_language: str
        """

        self._receiver_language = receiver_language

    @property
    def title(self):
        """Gets the title of this CreateUserRequest.

        &#128679; Deprecated since v4.18.0  Job title

        :return: The title of this CreateUserRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateUserRequest.

        &#128679; Deprecated since v4.18.0  Job title

        :param title: The title of this CreateUserRequest.
        :type title: str
        """

        self._title = title

    @property
    def user_name(self):
        """Gets the user_name of this CreateUserRequest.

        &#128640; Since v4.13.0  Username

        :return: The user_name of this CreateUserRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this CreateUserRequest.

        &#128640; Since v4.13.0  Username

        :param user_name: The user_name of this CreateUserRequest.
        :type user_name: str
        """

        self._user_name = user_name
