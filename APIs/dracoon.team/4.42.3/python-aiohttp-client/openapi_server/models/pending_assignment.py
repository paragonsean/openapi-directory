# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PendingAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_id: int=None, room_id: int=None, room_name: str=None, state: str=None, user_id: int=None):
        """PendingAssignment - a model defined in OpenAPI

        :param group_id: The group_id of this PendingAssignment.
        :param room_id: The room_id of this PendingAssignment.
        :param room_name: The room_name of this PendingAssignment.
        :param state: The state of this PendingAssignment.
        :param user_id: The user_id of this PendingAssignment.
        """
        self.openapi_types = {
            'group_id': int,
            'room_id': int,
            'room_name': str,
            'state': str,
            'user_id': int
        }

        self.attribute_map = {
            'group_id': 'groupId',
            'room_id': 'roomId',
            'room_name': 'roomName',
            'state': 'state',
            'user_id': 'userId'
        }

        self._group_id = group_id
        self._room_id = room_id
        self._room_name = room_name
        self._state = state
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PendingAssignment of this PendingAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_id(self):
        """Gets the group_id of this PendingAssignment.

        Unique identifier for the group

        :return: The group_id of this PendingAssignment.
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PendingAssignment.

        Unique identifier for the group

        :param group_id: The group_id of this PendingAssignment.
        :type group_id: int
        """
        if group_id is None:
            raise ValueError("Invalid value for `group_id`, must not be `None`")

        self._group_id = group_id

    @property
    def room_id(self):
        """Gets the room_id of this PendingAssignment.

        Room ID

        :return: The room_id of this PendingAssignment.
        :rtype: int
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this PendingAssignment.

        Room ID

        :param room_id: The room_id of this PendingAssignment.
        :type room_id: int
        """
        if room_id is None:
            raise ValueError("Invalid value for `room_id`, must not be `None`")

        self._room_id = room_id

    @property
    def room_name(self):
        """Gets the room_name of this PendingAssignment.

        Room name

        :return: The room_name of this PendingAssignment.
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this PendingAssignment.

        Room name

        :param room_name: The room_name of this PendingAssignment.
        :type room_name: str
        """
        if room_name is None:
            raise ValueError("Invalid value for `room_name`, must not be `None`")

        self._room_name = room_name

    @property
    def state(self):
        """Gets the state of this PendingAssignment.

        Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`

        :return: The state of this PendingAssignment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PendingAssignment.

        Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`

        :param state: The state of this PendingAssignment.
        :type state: str
        """
        allowed_values = ["ACCEPTED", "DENIED", "WAITING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_id(self):
        """Gets the user_id of this PendingAssignment.

        Unique identifier for the user

        :return: The user_id of this PendingAssignment.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this PendingAssignment.

        Unique identifier for the user

        :param user_id: The user_id of this PendingAssignment.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
