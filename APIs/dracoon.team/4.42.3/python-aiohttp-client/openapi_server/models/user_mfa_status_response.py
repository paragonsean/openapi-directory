# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mfa_setup_status import MfaSetupStatus
from openapi_server import util


class UserMfaStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mfa_enforced: bool=None, mfa_setups: List[MfaSetupStatus]=None):
        """UserMfaStatusResponse - a model defined in OpenAPI

        :param mfa_enforced: The mfa_enforced of this UserMfaStatusResponse.
        :param mfa_setups: The mfa_setups of this UserMfaStatusResponse.
        """
        self.openapi_types = {
            'mfa_enforced': bool,
            'mfa_setups': List[MfaSetupStatus]
        }

        self.attribute_map = {
            'mfa_enforced': 'mfaEnforced',
            'mfa_setups': 'mfaSetups'
        }

        self._mfa_enforced = mfa_enforced
        self._mfa_setups = mfa_setups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserMfaStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserMfaStatusResponse of this UserMfaStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mfa_enforced(self):
        """Gets the mfa_enforced of this UserMfaStatusResponse.

        Determines whether multi-factor authentication is enforced

        :return: The mfa_enforced of this UserMfaStatusResponse.
        :rtype: bool
        """
        return self._mfa_enforced

    @mfa_enforced.setter
    def mfa_enforced(self, mfa_enforced):
        """Sets the mfa_enforced of this UserMfaStatusResponse.

        Determines whether multi-factor authentication is enforced

        :param mfa_enforced: The mfa_enforced of this UserMfaStatusResponse.
        :type mfa_enforced: bool
        """
        if mfa_enforced is None:
            raise ValueError("Invalid value for `mfa_enforced`, must not be `None`")

        self._mfa_enforced = mfa_enforced

    @property
    def mfa_setups(self):
        """Gets the mfa_setups of this UserMfaStatusResponse.

        Information about the second factor authentication method setup by the user

        :return: The mfa_setups of this UserMfaStatusResponse.
        :rtype: List[MfaSetupStatus]
        """
        return self._mfa_setups

    @mfa_setups.setter
    def mfa_setups(self, mfa_setups):
        """Sets the mfa_setups of this UserMfaStatusResponse.

        Information about the second factor authentication method setup by the user

        :param mfa_setups: The mfa_setups of this UserMfaStatusResponse.
        :type mfa_setups: List[MfaSetupStatus]
        """
        if mfa_setups is None:
            raise ValueError("Invalid value for `mfa_setups`, must not be `None`")

        self._mfa_setups = mfa_setups
