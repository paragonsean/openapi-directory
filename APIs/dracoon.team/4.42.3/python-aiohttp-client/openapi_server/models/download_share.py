# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_info import UserInfo
from openapi_server import util


class DownloadShare(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, classification: int=None, cnt_downloads: int=None, created_at: datetime=None, created_by: UserInfo=None, data_url: str=None, expire_at: datetime=None, id: int=None, internal_notes: str=None, is_encrypted: bool=None, is_protected: bool=None, max_downloads: int=None, name: str=None, node_id: int=None, node_path: str=None, node_type: str=None, notes: str=None, notify_creator: bool=None, recipients: str=None, show_creator_name: bool=None, show_creator_username: bool=None, sms_recipients: str=None, updated_at: datetime=None, updated_by: UserInfo=None):
        """DownloadShare - a model defined in OpenAPI

        :param access_key: The access_key of this DownloadShare.
        :param classification: The classification of this DownloadShare.
        :param cnt_downloads: The cnt_downloads of this DownloadShare.
        :param created_at: The created_at of this DownloadShare.
        :param created_by: The created_by of this DownloadShare.
        :param data_url: The data_url of this DownloadShare.
        :param expire_at: The expire_at of this DownloadShare.
        :param id: The id of this DownloadShare.
        :param internal_notes: The internal_notes of this DownloadShare.
        :param is_encrypted: The is_encrypted of this DownloadShare.
        :param is_protected: The is_protected of this DownloadShare.
        :param max_downloads: The max_downloads of this DownloadShare.
        :param name: The name of this DownloadShare.
        :param node_id: The node_id of this DownloadShare.
        :param node_path: The node_path of this DownloadShare.
        :param node_type: The node_type of this DownloadShare.
        :param notes: The notes of this DownloadShare.
        :param notify_creator: The notify_creator of this DownloadShare.
        :param recipients: The recipients of this DownloadShare.
        :param show_creator_name: The show_creator_name of this DownloadShare.
        :param show_creator_username: The show_creator_username of this DownloadShare.
        :param sms_recipients: The sms_recipients of this DownloadShare.
        :param updated_at: The updated_at of this DownloadShare.
        :param updated_by: The updated_by of this DownloadShare.
        """
        self.openapi_types = {
            'access_key': str,
            'classification': int,
            'cnt_downloads': int,
            'created_at': datetime,
            'created_by': UserInfo,
            'data_url': str,
            'expire_at': datetime,
            'id': int,
            'internal_notes': str,
            'is_encrypted': bool,
            'is_protected': bool,
            'max_downloads': int,
            'name': str,
            'node_id': int,
            'node_path': str,
            'node_type': str,
            'notes': str,
            'notify_creator': bool,
            'recipients': str,
            'show_creator_name': bool,
            'show_creator_username': bool,
            'sms_recipients': str,
            'updated_at': datetime,
            'updated_by': UserInfo
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'classification': 'classification',
            'cnt_downloads': 'cntDownloads',
            'created_at': 'createdAt',
            'created_by': 'createdBy',
            'data_url': 'dataUrl',
            'expire_at': 'expireAt',
            'id': 'id',
            'internal_notes': 'internalNotes',
            'is_encrypted': 'isEncrypted',
            'is_protected': 'isProtected',
            'max_downloads': 'maxDownloads',
            'name': 'name',
            'node_id': 'nodeId',
            'node_path': 'nodePath',
            'node_type': 'nodeType',
            'notes': 'notes',
            'notify_creator': 'notifyCreator',
            'recipients': 'recipients',
            'show_creator_name': 'showCreatorName',
            'show_creator_username': 'showCreatorUsername',
            'sms_recipients': 'smsRecipients',
            'updated_at': 'updatedAt',
            'updated_by': 'updatedBy'
        }

        self._access_key = access_key
        self._classification = classification
        self._cnt_downloads = cnt_downloads
        self._created_at = created_at
        self._created_by = created_by
        self._data_url = data_url
        self._expire_at = expire_at
        self._id = id
        self._internal_notes = internal_notes
        self._is_encrypted = is_encrypted
        self._is_protected = is_protected
        self._max_downloads = max_downloads
        self._name = name
        self._node_id = node_id
        self._node_path = node_path
        self._node_type = node_type
        self._notes = notes
        self._notify_creator = notify_creator
        self._recipients = recipients
        self._show_creator_name = show_creator_name
        self._show_creator_username = show_creator_username
        self._sms_recipients = sms_recipients
        self._updated_at = updated_at
        self._updated_by = updated_by

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadShare':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadShare of this DownloadShare.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this DownloadShare.

        Share access key to generate secure link

        :return: The access_key of this DownloadShare.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this DownloadShare.

        Share access key to generate secure link

        :param access_key: The access_key of this DownloadShare.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")

        self._access_key = access_key

    @property
    def classification(self):
        """Gets the classification of this DownloadShare.

        &#128679; Deprecated since v4.11.0  Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :return: The classification of this DownloadShare.
        :rtype: int
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this DownloadShare.

        &#128679; Deprecated since v4.11.0  Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)

        :param classification: The classification of this DownloadShare.
        :type classification: int
        """
        allowed_values = [1, 2, 3, 4]  # noqa: E501
        if classification not in allowed_values:
            raise ValueError(
                "Invalid value for `classification` ({0}), must be one of {1}"
                .format(classification, allowed_values)
            )

        self._classification = classification

    @property
    def cnt_downloads(self):
        """Gets the cnt_downloads of this DownloadShare.

        Downloads counter (incremented on each download)

        :return: The cnt_downloads of this DownloadShare.
        :rtype: int
        """
        return self._cnt_downloads

    @cnt_downloads.setter
    def cnt_downloads(self, cnt_downloads):
        """Sets the cnt_downloads of this DownloadShare.

        Downloads counter (incremented on each download)

        :param cnt_downloads: The cnt_downloads of this DownloadShare.
        :type cnt_downloads: int
        """
        if cnt_downloads is None:
            raise ValueError("Invalid value for `cnt_downloads`, must not be `None`")

        self._cnt_downloads = cnt_downloads

    @property
    def created_at(self):
        """Gets the created_at of this DownloadShare.

        Creation date

        :return: The created_at of this DownloadShare.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DownloadShare.

        Creation date

        :param created_at: The created_at of this DownloadShare.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this DownloadShare.


        :return: The created_by of this DownloadShare.
        :rtype: UserInfo
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DownloadShare.


        :param created_by: The created_by of this DownloadShare.
        :type created_by: UserInfo
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def data_url(self):
        """Gets the data_url of this DownloadShare.

        Path to shared download node

        :return: The data_url of this DownloadShare.
        :rtype: str
        """
        return self._data_url

    @data_url.setter
    def data_url(self, data_url):
        """Sets the data_url of this DownloadShare.

        Path to shared download node

        :param data_url: The data_url of this DownloadShare.
        :type data_url: str
        """

        self._data_url = data_url

    @property
    def expire_at(self):
        """Gets the expire_at of this DownloadShare.

        Expiration date

        :return: The expire_at of this DownloadShare.
        :rtype: datetime
        """
        return self._expire_at

    @expire_at.setter
    def expire_at(self, expire_at):
        """Sets the expire_at of this DownloadShare.

        Expiration date

        :param expire_at: The expire_at of this DownloadShare.
        :type expire_at: datetime
        """

        self._expire_at = expire_at

    @property
    def id(self):
        """Gets the id of this DownloadShare.

        Share ID

        :return: The id of this DownloadShare.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DownloadShare.

        Share ID

        :param id: The id of this DownloadShare.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def internal_notes(self):
        """Gets the internal_notes of this DownloadShare.

        &#128640; Since v4.11.0  Internal notes

        :return: The internal_notes of this DownloadShare.
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this DownloadShare.

        &#128640; Since v4.11.0  Internal notes

        :param internal_notes: The internal_notes of this DownloadShare.
        :type internal_notes: str
        """

        self._internal_notes = internal_notes

    @property
    def is_encrypted(self):
        """Gets the is_encrypted of this DownloadShare.

        Encrypted share  (this only applies to shared files, not folders)

        :return: The is_encrypted of this DownloadShare.
        :rtype: bool
        """
        return self._is_encrypted

    @is_encrypted.setter
    def is_encrypted(self, is_encrypted):
        """Sets the is_encrypted of this DownloadShare.

        Encrypted share  (this only applies to shared files, not folders)

        :param is_encrypted: The is_encrypted of this DownloadShare.
        :type is_encrypted: bool
        """

        self._is_encrypted = is_encrypted

    @property
    def is_protected(self):
        """Gets the is_protected of this DownloadShare.

        Is share protected by password

        :return: The is_protected of this DownloadShare.
        :rtype: bool
        """
        return self._is_protected

    @is_protected.setter
    def is_protected(self, is_protected):
        """Sets the is_protected of this DownloadShare.

        Is share protected by password

        :param is_protected: The is_protected of this DownloadShare.
        :type is_protected: bool
        """

        self._is_protected = is_protected

    @property
    def max_downloads(self):
        """Gets the max_downloads of this DownloadShare.

        Max allowed downloads

        :return: The max_downloads of this DownloadShare.
        :rtype: int
        """
        return self._max_downloads

    @max_downloads.setter
    def max_downloads(self, max_downloads):
        """Sets the max_downloads of this DownloadShare.

        Max allowed downloads

        :param max_downloads: The max_downloads of this DownloadShare.
        :type max_downloads: int
        """

        self._max_downloads = max_downloads

    @property
    def name(self):
        """Gets the name of this DownloadShare.

        Alias name

        :return: The name of this DownloadShare.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DownloadShare.

        Alias name

        :param name: The name of this DownloadShare.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def node_id(self):
        """Gets the node_id of this DownloadShare.

        Source node ID

        :return: The node_id of this DownloadShare.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id):
        """Sets the node_id of this DownloadShare.

        Source node ID

        :param node_id: The node_id of this DownloadShare.
        :type node_id: int
        """
        if node_id is None:
            raise ValueError("Invalid value for `node_id`, must not be `None`")

        self._node_id = node_id

    @property
    def node_path(self):
        """Gets the node_path of this DownloadShare.

        Path to shared download node

        :return: The node_path of this DownloadShare.
        :rtype: str
        """
        return self._node_path

    @node_path.setter
    def node_path(self, node_path):
        """Sets the node_path of this DownloadShare.

        Path to shared download node

        :param node_path: The node_path of this DownloadShare.
        :type node_path: str
        """

        self._node_path = node_path

    @property
    def node_type(self):
        """Gets the node_type of this DownloadShare.

        Node type

        :return: The node_type of this DownloadShare.
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this DownloadShare.

        Node type

        :param node_type: The node_type of this DownloadShare.
        :type node_type: str
        """

        self._node_type = node_type

    @property
    def notes(self):
        """Gets the notes of this DownloadShare.

        User notes

        :return: The notes of this DownloadShare.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this DownloadShare.

        User notes

        :param notes: The notes of this DownloadShare.
        :type notes: str
        """

        self._notes = notes

    @property
    def notify_creator(self):
        """Gets the notify_creator of this DownloadShare.

        &#128679; Deprecated since v4.20.0  Notify creator on every download.

        :return: The notify_creator of this DownloadShare.
        :rtype: bool
        """
        return self._notify_creator

    @notify_creator.setter
    def notify_creator(self, notify_creator):
        """Sets the notify_creator of this DownloadShare.

        &#128679; Deprecated since v4.20.0  Notify creator on every download.

        :param notify_creator: The notify_creator of this DownloadShare.
        :type notify_creator: bool
        """
        if notify_creator is None:
            raise ValueError("Invalid value for `notify_creator`, must not be `None`")

        self._notify_creator = notify_creator

    @property
    def recipients(self):
        """Gets the recipients of this DownloadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses

        :return: The recipients of this DownloadShare.
        :rtype: str
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this DownloadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses

        :param recipients: The recipients of this DownloadShare.
        :type recipients: str
        """

        self._recipients = recipients

    @property
    def show_creator_name(self):
        """Gets the show_creator_name of this DownloadShare.

        Show creator first and last name.

        :return: The show_creator_name of this DownloadShare.
        :rtype: bool
        """
        return self._show_creator_name

    @show_creator_name.setter
    def show_creator_name(self, show_creator_name):
        """Sets the show_creator_name of this DownloadShare.

        Show creator first and last name.

        :param show_creator_name: The show_creator_name of this DownloadShare.
        :type show_creator_name: bool
        """

        self._show_creator_name = show_creator_name

    @property
    def show_creator_username(self):
        """Gets the show_creator_username of this DownloadShare.

        Show creator email address.

        :return: The show_creator_username of this DownloadShare.
        :rtype: bool
        """
        return self._show_creator_username

    @show_creator_username.setter
    def show_creator_username(self, show_creator_username):
        """Sets the show_creator_username of this DownloadShare.

        Show creator email address.

        :param show_creator_username: The show_creator_username of this DownloadShare.
        :type show_creator_username: bool
        """

        self._show_creator_username = show_creator_username

    @property
    def sms_recipients(self):
        """Gets the sms_recipients of this DownloadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs

        :return: The sms_recipients of this DownloadShare.
        :rtype: str
        """
        return self._sms_recipients

    @sms_recipients.setter
    def sms_recipients(self, sms_recipients):
        """Sets the sms_recipients of this DownloadShare.

        &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs

        :param sms_recipients: The sms_recipients of this DownloadShare.
        :type sms_recipients: str
        """

        self._sms_recipients = sms_recipients

    @property
    def updated_at(self):
        """Gets the updated_at of this DownloadShare.

        Modification date

        :return: The updated_at of this DownloadShare.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DownloadShare.

        Modification date

        :param updated_at: The updated_at of this DownloadShare.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self):
        """Gets the updated_by of this DownloadShare.


        :return: The updated_by of this DownloadShare.
        :rtype: UserInfo
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this DownloadShare.


        :param updated_by: The updated_by of this DownloadShare.
        :type updated_by: UserInfo
        """

        self._updated_by = updated_by
