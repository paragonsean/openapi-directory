# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, is_deprecated: bool=None, name: str=None):
        """LogOperation - a model defined in OpenAPI

        :param id: The id of this LogOperation.
        :param is_deprecated: The is_deprecated of this LogOperation.
        :param name: The name of this LogOperation.
        """
        self.openapi_types = {
            'id': int,
            'is_deprecated': bool,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'is_deprecated': 'isDeprecated',
            'name': 'name'
        }

        self._id = id
        self._is_deprecated = is_deprecated
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LogOperation of this LogOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this LogOperation.

        Operation type ID

        :return: The id of this LogOperation.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogOperation.

        Operation type ID

        :param id: The id of this LogOperation.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_deprecated(self):
        """Gets the is_deprecated of this LogOperation.

        Determines whether log operation is deprecated or not

        :return: The is_deprecated of this LogOperation.
        :rtype: bool
        """
        return self._is_deprecated

    @is_deprecated.setter
    def is_deprecated(self, is_deprecated):
        """Sets the is_deprecated of this LogOperation.

        Determines whether log operation is deprecated or not

        :param is_deprecated: The is_deprecated of this LogOperation.
        :type is_deprecated: bool
        """
        if is_deprecated is None:
            raise ValueError("Invalid value for `is_deprecated`, must not be `None`")

        self._is_deprecated = is_deprecated

    @property
    def name(self):
        """Gets the name of this LogOperation.

        Operation name

        :return: The name of this LogOperation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this LogOperation.

        Operation name

        :param name: The name of this LogOperation.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
