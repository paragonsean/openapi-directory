# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OAuthApproval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_name: str=None, expires_at: datetime=None):
        """OAuthApproval - a model defined in OpenAPI

        :param client_id: The client_id of this OAuthApproval.
        :param client_name: The client_name of this OAuthApproval.
        :param expires_at: The expires_at of this OAuthApproval.
        """
        self.openapi_types = {
            'client_id': str,
            'client_name': str,
            'expires_at': datetime
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_name': 'clientName',
            'expires_at': 'expiresAt'
        }

        self._client_id = client_id
        self._client_name = client_name
        self._expires_at = expires_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OAuthApproval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OAuthApproval of this OAuthApproval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this OAuthApproval.

        ID of the OAuth client

        :return: The client_id of this OAuthApproval.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this OAuthApproval.

        ID of the OAuth client

        :param client_id: The client_id of this OAuthApproval.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_name(self):
        """Gets the client_name of this OAuthApproval.

        Name, which is shown at the client configuration and authorization.

        :return: The client_name of this OAuthApproval.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this OAuthApproval.

        Name, which is shown at the client configuration and authorization.

        :param client_name: The client_name of this OAuthApproval.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def expires_at(self):
        """Gets the expires_at of this OAuthApproval.

        Expiration date of the approval

        :return: The expires_at of this OAuthApproval.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this OAuthApproval.

        Expiration date of the approval

        :param expires_at: The expires_at of this OAuthApproval.
        :type expires_at: datetime
        """

        self._expires_at = expires_at
