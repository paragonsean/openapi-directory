# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_key import FileKey
from openapi_server import util


class UserFileKeySetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_id: int=None, file_key: FileKey=None, user_id: int=None):
        """UserFileKeySetRequest - a model defined in OpenAPI

        :param file_id: The file_id of this UserFileKeySetRequest.
        :param file_key: The file_key of this UserFileKeySetRequest.
        :param user_id: The user_id of this UserFileKeySetRequest.
        """
        self.openapi_types = {
            'file_id': int,
            'file_key': FileKey,
            'user_id': int
        }

        self.attribute_map = {
            'file_id': 'fileId',
            'file_key': 'fileKey',
            'user_id': 'userId'
        }

        self._file_id = file_id
        self._file_key = file_key
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserFileKeySetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserFileKeySetRequest of this UserFileKeySetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_id(self):
        """Gets the file_id of this UserFileKeySetRequest.

        File ID

        :return: The file_id of this UserFileKeySetRequest.
        :rtype: int
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this UserFileKeySetRequest.

        File ID

        :param file_id: The file_id of this UserFileKeySetRequest.
        :type file_id: int
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def file_key(self):
        """Gets the file_key of this UserFileKeySetRequest.


        :return: The file_key of this UserFileKeySetRequest.
        :rtype: FileKey
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this UserFileKeySetRequest.


        :param file_key: The file_key of this UserFileKeySetRequest.
        :type file_key: FileKey
        """
        if file_key is None:
            raise ValueError("Invalid value for `file_key`, must not be `None`")

        self._file_key = file_key

    @property
    def user_id(self):
        """Gets the user_id of this UserFileKeySetRequest.

        Unique identifier for the user

        :return: The user_id of this UserFileKeySetRequest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UserFileKeySetRequest.

        Unique identifier for the user

        :param user_id: The user_id of this UserFileKeySetRequest.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
