# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_file_keys import FileFileKeys
from openapi_server.models.range import Range
from openapi_server.models.user_id_file_id_item import UserIdFileIdItem
from openapi_server.models.user_user_public_key import UserUserPublicKey
from openapi_server import util


class MissingKeysResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[FileFileKeys]=None, items: List[UserIdFileIdItem]=None, range: Range=None, users: List[UserUserPublicKey]=None):
        """MissingKeysResponse - a model defined in OpenAPI

        :param files: The files of this MissingKeysResponse.
        :param items: The items of this MissingKeysResponse.
        :param range: The range of this MissingKeysResponse.
        :param users: The users of this MissingKeysResponse.
        """
        self.openapi_types = {
            'files': List[FileFileKeys],
            'items': List[UserIdFileIdItem],
            'range': Range,
            'users': List[UserUserPublicKey]
        }

        self.attribute_map = {
            'files': 'files',
            'items': 'items',
            'range': 'range',
            'users': 'users'
        }

        self._files = files
        self._items = items
        self._range = range
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MissingKeysResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MissingKeysResponse of this MissingKeysResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this MissingKeysResponse.

        List of file keys

        :return: The files of this MissingKeysResponse.
        :rtype: List[FileFileKeys]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this MissingKeysResponse.

        List of file keys

        :param files: The files of this MissingKeysResponse.
        :type files: List[FileFileKeys]
        """

        self._files = files

    @property
    def items(self):
        """Gets the items of this MissingKeysResponse.

        List of user ID and file ID mappings

        :return: The items of this MissingKeysResponse.
        :rtype: List[UserIdFileIdItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MissingKeysResponse.

        List of user ID and file ID mappings

        :param items: The items of this MissingKeysResponse.
        :type items: List[UserIdFileIdItem]
        """

        self._items = items

    @property
    def range(self):
        """Gets the range of this MissingKeysResponse.


        :return: The range of this MissingKeysResponse.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this MissingKeysResponse.


        :param range: The range of this MissingKeysResponse.
        :type range: Range
        """

        self._range = range

    @property
    def users(self):
        """Gets the users of this MissingKeysResponse.

        List of user public keys

        :return: The users of this MissingKeysResponse.
        :rtype: List[UserUserPublicKey]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this MissingKeysResponse.

        List of user public keys

        :param users: The users of this MissingKeysResponse.
        :type users: List[UserUserPublicKey]
        """

        self._users = users
