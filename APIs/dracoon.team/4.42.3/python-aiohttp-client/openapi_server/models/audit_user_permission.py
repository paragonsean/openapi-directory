# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.node_permissions import NodePermissions
from openapi_server import util


class AuditUserPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: NodePermissions=None, user_first_name: str=None, user_id: int=None, user_last_name: str=None, user_login: str=None):
        """AuditUserPermission - a model defined in OpenAPI

        :param permissions: The permissions of this AuditUserPermission.
        :param user_first_name: The user_first_name of this AuditUserPermission.
        :param user_id: The user_id of this AuditUserPermission.
        :param user_last_name: The user_last_name of this AuditUserPermission.
        :param user_login: The user_login of this AuditUserPermission.
        """
        self.openapi_types = {
            'permissions': NodePermissions,
            'user_first_name': str,
            'user_id': int,
            'user_last_name': str,
            'user_login': str
        }

        self.attribute_map = {
            'permissions': 'permissions',
            'user_first_name': 'userFirstName',
            'user_id': 'userId',
            'user_last_name': 'userLastName',
            'user_login': 'userLogin'
        }

        self._permissions = permissions
        self._user_first_name = user_first_name
        self._user_id = user_id
        self._user_last_name = user_last_name
        self._user_login = user_login

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditUserPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditUserPermission of this AuditUserPermission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this AuditUserPermission.


        :return: The permissions of this AuditUserPermission.
        :rtype: NodePermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AuditUserPermission.


        :param permissions: The permissions of this AuditUserPermission.
        :type permissions: NodePermissions
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def user_first_name(self):
        """Gets the user_first_name of this AuditUserPermission.

        User first name

        :return: The user_first_name of this AuditUserPermission.
        :rtype: str
        """
        return self._user_first_name

    @user_first_name.setter
    def user_first_name(self, user_first_name):
        """Sets the user_first_name of this AuditUserPermission.

        User first name

        :param user_first_name: The user_first_name of this AuditUserPermission.
        :type user_first_name: str
        """
        if user_first_name is None:
            raise ValueError("Invalid value for `user_first_name`, must not be `None`")

        self._user_first_name = user_first_name

    @property
    def user_id(self):
        """Gets the user_id of this AuditUserPermission.

        Unique identifier for the user

        :return: The user_id of this AuditUserPermission.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditUserPermission.

        Unique identifier for the user

        :param user_id: The user_id of this AuditUserPermission.
        :type user_id: int
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id

    @property
    def user_last_name(self):
        """Gets the user_last_name of this AuditUserPermission.

        User last name

        :return: The user_last_name of this AuditUserPermission.
        :rtype: str
        """
        return self._user_last_name

    @user_last_name.setter
    def user_last_name(self, user_last_name):
        """Sets the user_last_name of this AuditUserPermission.

        User last name

        :param user_last_name: The user_last_name of this AuditUserPermission.
        :type user_last_name: str
        """
        if user_last_name is None:
            raise ValueError("Invalid value for `user_last_name`, must not be `None`")

        self._user_last_name = user_last_name

    @property
    def user_login(self):
        """Gets the user_login of this AuditUserPermission.

        User login name

        :return: The user_login of this AuditUserPermission.
        :rtype: str
        """
        return self._user_login

    @user_login.setter
    def user_login(self, user_login):
        """Sets the user_login of this AuditUserPermission.

        User login name

        :param user_login: The user_login of this AuditUserPermission.
        :type user_login: str
        """
        if user_login is None:
            raise ValueError("Invalid value for `user_login`, must not be `None`")

        self._user_login = user_login
