# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_enabled: bool=None, name: str=None, priority: int=None):
        """AuthMethod - a model defined in OpenAPI

        :param is_enabled: The is_enabled of this AuthMethod.
        :param name: The name of this AuthMethod.
        :param priority: The priority of this AuthMethod.
        """
        self.openapi_types = {
            'is_enabled': bool,
            'name': str,
            'priority': int
        }

        self.attribute_map = {
            'is_enabled': 'isEnabled',
            'name': 'name',
            'priority': 'priority'
        }

        self._is_enabled = is_enabled
        self._name = name
        self._priority = priority

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthMethod of this AuthMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_enabled(self):
        """Gets the is_enabled of this AuthMethod.

        Is enabled

        :return: The is_enabled of this AuthMethod.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this AuthMethod.

        Is enabled

        :param is_enabled: The is_enabled of this AuthMethod.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this AuthMethod.

        Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :return: The name of this AuthMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuthMethod.

        Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`

        :param name: The name of this AuthMethod.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def priority(self):
        """Gets the priority of this AuthMethod.

        Priority (smaller values have higher priority)

        :return: The priority of this AuthMethod.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AuthMethod.

        Priority (smaller values have higher priority)

        :param priority: The priority of this AuthMethod.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")

        self._priority = priority
