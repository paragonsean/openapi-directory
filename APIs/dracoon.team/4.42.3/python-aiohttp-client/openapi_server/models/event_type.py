# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, usable_customer_admin_webhook: bool=None, usable_node_webhook: bool=None, usable_push_notification: bool=None, usable_tenant_webhook: bool=None):
        """EventType - a model defined in OpenAPI

        :param id: The id of this EventType.
        :param name: The name of this EventType.
        :param usable_customer_admin_webhook: The usable_customer_admin_webhook of this EventType.
        :param usable_node_webhook: The usable_node_webhook of this EventType.
        :param usable_push_notification: The usable_push_notification of this EventType.
        :param usable_tenant_webhook: The usable_tenant_webhook of this EventType.
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'usable_customer_admin_webhook': bool,
            'usable_node_webhook': bool,
            'usable_push_notification': bool,
            'usable_tenant_webhook': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'usable_customer_admin_webhook': 'usableCustomerAdminWebhook',
            'usable_node_webhook': 'usableNodeWebhook',
            'usable_push_notification': 'usablePushNotification',
            'usable_tenant_webhook': 'usableTenantWebhook'
        }

        self._id = id
        self._name = name
        self._usable_customer_admin_webhook = usable_customer_admin_webhook
        self._usable_node_webhook = usable_node_webhook
        self._usable_push_notification = usable_push_notification
        self._usable_tenant_webhook = usable_tenant_webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventType of this EventType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this EventType.

        ID

        :return: The id of this EventType.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventType.

        ID

        :param id: The id of this EventType.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this EventType.

        Name

        :return: The name of this EventType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EventType.

        Name

        :param name: The name of this EventType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def usable_customer_admin_webhook(self):
        """Gets the usable_customer_admin_webhook of this EventType.

        Usable as customer admin webhook

        :return: The usable_customer_admin_webhook of this EventType.
        :rtype: bool
        """
        return self._usable_customer_admin_webhook

    @usable_customer_admin_webhook.setter
    def usable_customer_admin_webhook(self, usable_customer_admin_webhook):
        """Sets the usable_customer_admin_webhook of this EventType.

        Usable as customer admin webhook

        :param usable_customer_admin_webhook: The usable_customer_admin_webhook of this EventType.
        :type usable_customer_admin_webhook: bool
        """
        if usable_customer_admin_webhook is None:
            raise ValueError("Invalid value for `usable_customer_admin_webhook`, must not be `None`")

        self._usable_customer_admin_webhook = usable_customer_admin_webhook

    @property
    def usable_node_webhook(self):
        """Gets the usable_node_webhook of this EventType.

        Usable as node webhook

        :return: The usable_node_webhook of this EventType.
        :rtype: bool
        """
        return self._usable_node_webhook

    @usable_node_webhook.setter
    def usable_node_webhook(self, usable_node_webhook):
        """Sets the usable_node_webhook of this EventType.

        Usable as node webhook

        :param usable_node_webhook: The usable_node_webhook of this EventType.
        :type usable_node_webhook: bool
        """
        if usable_node_webhook is None:
            raise ValueError("Invalid value for `usable_node_webhook`, must not be `None`")

        self._usable_node_webhook = usable_node_webhook

    @property
    def usable_push_notification(self):
        """Gets the usable_push_notification of this EventType.

        Usable as push notification

        :return: The usable_push_notification of this EventType.
        :rtype: bool
        """
        return self._usable_push_notification

    @usable_push_notification.setter
    def usable_push_notification(self, usable_push_notification):
        """Sets the usable_push_notification of this EventType.

        Usable as push notification

        :param usable_push_notification: The usable_push_notification of this EventType.
        :type usable_push_notification: bool
        """
        if usable_push_notification is None:
            raise ValueError("Invalid value for `usable_push_notification`, must not be `None`")

        self._usable_push_notification = usable_push_notification

    @property
    def usable_tenant_webhook(self):
        """Gets the usable_tenant_webhook of this EventType.

        Usable as tenant webhook

        :return: The usable_tenant_webhook of this EventType.
        :rtype: bool
        """
        return self._usable_tenant_webhook

    @usable_tenant_webhook.setter
    def usable_tenant_webhook(self, usable_tenant_webhook):
        """Sets the usable_tenant_webhook of this EventType.

        Usable as tenant webhook

        :param usable_tenant_webhook: The usable_tenant_webhook of this EventType.
        :type usable_tenant_webhook: bool
        """
        if usable_tenant_webhook is None:
            raise ValueError("Invalid value for `usable_tenant_webhook`, must not be `None`")

        self._usable_tenant_webhook = usable_tenant_webhook
