# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, language: str=None, login: str=None, password: str=None, state: str=None, token: str=None, user_name: str=None):
        """LoginRequest - a model defined in OpenAPI

        :param auth_type: The auth_type of this LoginRequest.
        :param language: The language of this LoginRequest.
        :param login: The login of this LoginRequest.
        :param password: The password of this LoginRequest.
        :param state: The state of this LoginRequest.
        :param token: The token of this LoginRequest.
        :param user_name: The user_name of this LoginRequest.
        """
        self.openapi_types = {
            'auth_type': str,
            'language': str,
            'login': str,
            'password': str,
            'state': str,
            'token': str,
            'user_name': str
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'language': 'language',
            'login': 'login',
            'password': 'password',
            'state': 'state',
            'token': 'token',
            'user_name': 'userName'
        }

        self._auth_type = auth_type
        self._language = language
        self._login = login
        self._password = password
        self._state = state
        self._token = token
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginRequest of this LoginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this LoginRequest.

        Authentication methods

        :return: The auth_type of this LoginRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this LoginRequest.

        Authentication methods

        :param auth_type: The auth_type of this LoginRequest.
        :type auth_type: str
        """
        allowed_values = ["basic", "active_directory", "radius"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def language(self):
        """Gets the language of this LoginRequest.

        &#128679; Deprecated since v4.7.0  Language ID or ISO 639-1 code

        :return: The language of this LoginRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this LoginRequest.

        &#128679; Deprecated since v4.7.0  Language ID or ISO 639-1 code

        :param language: The language of this LoginRequest.
        :type language: str
        """

        self._language = language

    @property
    def login(self):
        """Gets the login of this LoginRequest.

        &#128679; Deprecated since v4.7.0  User login name

        :return: The login of this LoginRequest.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login):
        """Sets the login of this LoginRequest.

        &#128679; Deprecated since v4.7.0  User login name

        :param login: The login of this LoginRequest.
        :type login: str
        """

        self._login = login

    @property
    def password(self):
        """Gets the password of this LoginRequest.

        Password

        :return: The password of this LoginRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LoginRequest.

        Password

        :param password: The password of this LoginRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def state(self):
        """Gets the state of this LoginRequest.

        For RADIUS Access-Challenge  If a `replyState` is returned, it must be included as `state` in the following request.

        :return: The state of this LoginRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this LoginRequest.

        For RADIUS Access-Challenge  If a `replyState` is returned, it must be included as `state` in the following request.

        :param state: The state of this LoginRequest.
        :type state: str
        """

        self._state = state

    @property
    def token(self):
        """Gets the token of this LoginRequest.

        RADIUS Token

        :return: The token of this LoginRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this LoginRequest.

        RADIUS Token

        :param token: The token of this LoginRequest.
        :type token: str
        """

        self._token = token

    @property
    def user_name(self):
        """Gets the user_name of this LoginRequest.

        &#128640; Since v4.13.0  Username

        :return: The user_name of this LoginRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this LoginRequest.

        &#128640; Since v4.13.0  Username

        :param user_name: The user_name of this LoginRequest.
        :type user_name: str
        """

        self._user_name = user_name
