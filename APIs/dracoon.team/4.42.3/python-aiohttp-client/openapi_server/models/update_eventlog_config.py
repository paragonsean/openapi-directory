# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateEventlogConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, log_ip_enabled: bool=None, retention_period: int=None):
        """UpdateEventlogConfig - a model defined in OpenAPI

        :param enabled: The enabled of this UpdateEventlogConfig.
        :param log_ip_enabled: The log_ip_enabled of this UpdateEventlogConfig.
        :param retention_period: The retention_period of this UpdateEventlogConfig.
        """
        self.openapi_types = {
            'enabled': bool,
            'log_ip_enabled': bool,
            'retention_period': int
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'log_ip_enabled': 'logIpEnabled',
            'retention_period': 'retentionPeriod'
        }

        self._enabled = enabled
        self._log_ip_enabled = log_ip_enabled
        self._retention_period = retention_period

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateEventlogConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateEventlogConfig of this UpdateEventlogConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this UpdateEventlogConfig.

        Is eventlog enabled?

        :return: The enabled of this UpdateEventlogConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdateEventlogConfig.

        Is eventlog enabled?

        :param enabled: The enabled of this UpdateEventlogConfig.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def log_ip_enabled(self):
        """Gets the log_ip_enabled of this UpdateEventlogConfig.

        Determines whether user’s IP address is logged.

        :return: The log_ip_enabled of this UpdateEventlogConfig.
        :rtype: bool
        """
        return self._log_ip_enabled

    @log_ip_enabled.setter
    def log_ip_enabled(self, log_ip_enabled):
        """Sets the log_ip_enabled of this UpdateEventlogConfig.

        Determines whether user’s IP address is logged.

        :param log_ip_enabled: The log_ip_enabled of this UpdateEventlogConfig.
        :type log_ip_enabled: bool
        """

        self._log_ip_enabled = log_ip_enabled

    @property
    def retention_period(self):
        """Gets the retention_period of this UpdateEventlogConfig.

        Retention period (in days) of event log entries.  After that period, all entries are deleted.  Recommended value: 7

        :return: The retention_period of this UpdateEventlogConfig.
        :rtype: int
        """
        return self._retention_period

    @retention_period.setter
    def retention_period(self, retention_period):
        """Sets the retention_period of this UpdateEventlogConfig.

        Retention period (in days) of event log entries.  After that period, all entries are deleted.  Recommended value: 7

        :param retention_period: The retention_period of this UpdateEventlogConfig.
        :type retention_period: int
        """

        self._retention_period = retention_period
