# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.move_node import MoveNode
from openapi_server import util


class MoveNodesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[MoveNode]=None, keep_share_links: bool=False, node_ids: List[int]=None, resolution_strategy: str='autorename'):
        """MoveNodesRequest - a model defined in OpenAPI

        :param items: The items of this MoveNodesRequest.
        :param keep_share_links: The keep_share_links of this MoveNodesRequest.
        :param node_ids: The node_ids of this MoveNodesRequest.
        :param resolution_strategy: The resolution_strategy of this MoveNodesRequest.
        """
        self.openapi_types = {
            'items': List[MoveNode],
            'keep_share_links': bool,
            'node_ids': List[int],
            'resolution_strategy': str
        }

        self.attribute_map = {
            'items': 'items',
            'keep_share_links': 'keepShareLinks',
            'node_ids': 'nodeIds',
            'resolution_strategy': 'resolutionStrategy'
        }

        self._items = items
        self._keep_share_links = keep_share_links
        self._node_ids = node_ids
        self._resolution_strategy = resolution_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoveNodesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MoveNodesRequest of this MoveNodesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this MoveNodesRequest.

        List of nodes to be moved

        :return: The items of this MoveNodesRequest.
        :rtype: List[MoveNode]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this MoveNodesRequest.

        List of nodes to be moved

        :param items: The items of this MoveNodesRequest.
        :type items: List[MoveNode]
        """

        self._items = items

    @property
    def keep_share_links(self):
        """Gets the keep_share_links of this MoveNodesRequest.

        Preserve Download Share Links and point them to the new node.

        :return: The keep_share_links of this MoveNodesRequest.
        :rtype: bool
        """
        return self._keep_share_links

    @keep_share_links.setter
    def keep_share_links(self, keep_share_links):
        """Sets the keep_share_links of this MoveNodesRequest.

        Preserve Download Share Links and point them to the new node.

        :param keep_share_links: The keep_share_links of this MoveNodesRequest.
        :type keep_share_links: bool
        """

        self._keep_share_links = keep_share_links

    @property
    def node_ids(self):
        """Gets the node_ids of this MoveNodesRequest.

        &#128679; Deprecated since v4.5.0  Node IDs  Please use `items` instead.

        :return: The node_ids of this MoveNodesRequest.
        :rtype: List[int]
        """
        return self._node_ids

    @node_ids.setter
    def node_ids(self, node_ids):
        """Sets the node_ids of this MoveNodesRequest.

        &#128679; Deprecated since v4.5.0  Node IDs  Please use `items` instead.

        :param node_ids: The node_ids of this MoveNodesRequest.
        :type node_ids: List[int]
        """

        self._node_ids = node_ids

    @property
    def resolution_strategy(self):
        """Gets the resolution_strategy of this MoveNodesRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :return: The resolution_strategy of this MoveNodesRequest.
        :rtype: str
        """
        return self._resolution_strategy

    @resolution_strategy.setter
    def resolution_strategy(self, resolution_strategy):
        """Sets the resolution_strategy of this MoveNodesRequest.

        Node conflict resolution strategy:  * `autorename`  * `overwrite`  * `fail`

        :param resolution_strategy: The resolution_strategy of this MoveNodesRequest.
        :type resolution_strategy: str
        """
        allowed_values = ["autorename", "overwrite", "fail"]  # noqa: E501
        if resolution_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_strategy` ({0}), must be one of {1}"
                .format(resolution_strategy, allowed_values)
            )

        self._resolution_strategy = resolution_strategy
