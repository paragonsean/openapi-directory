# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Avatar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar_uri: str=None, avatar_uuid: str=None, is_custom_avatar: bool=None):
        """Avatar - a model defined in OpenAPI

        :param avatar_uri: The avatar_uri of this Avatar.
        :param avatar_uuid: The avatar_uuid of this Avatar.
        :param is_custom_avatar: The is_custom_avatar of this Avatar.
        """
        self.openapi_types = {
            'avatar_uri': str,
            'avatar_uuid': str,
            'is_custom_avatar': bool
        }

        self.attribute_map = {
            'avatar_uri': 'avatarUri',
            'avatar_uuid': 'avatarUuid',
            'is_custom_avatar': 'isCustomAvatar'
        }

        self._avatar_uri = avatar_uri
        self._avatar_uuid = avatar_uuid
        self._is_custom_avatar = is_custom_avatar

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Avatar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Avatar of this Avatar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar_uri(self):
        """Gets the avatar_uri of this Avatar.

        Avatar URI

        :return: The avatar_uri of this Avatar.
        :rtype: str
        """
        return self._avatar_uri

    @avatar_uri.setter
    def avatar_uri(self, avatar_uri):
        """Sets the avatar_uri of this Avatar.

        Avatar URI

        :param avatar_uri: The avatar_uri of this Avatar.
        :type avatar_uri: str
        """
        if avatar_uri is None:
            raise ValueError("Invalid value for `avatar_uri`, must not be `None`")

        self._avatar_uri = avatar_uri

    @property
    def avatar_uuid(self):
        """Gets the avatar_uuid of this Avatar.

        Avatar UUID

        :return: The avatar_uuid of this Avatar.
        :rtype: str
        """
        return self._avatar_uuid

    @avatar_uuid.setter
    def avatar_uuid(self, avatar_uuid):
        """Sets the avatar_uuid of this Avatar.

        Avatar UUID

        :param avatar_uuid: The avatar_uuid of this Avatar.
        :type avatar_uuid: str
        """
        if avatar_uuid is None:
            raise ValueError("Invalid value for `avatar_uuid`, must not be `None`")

        self._avatar_uuid = avatar_uuid

    @property
    def is_custom_avatar(self):
        """Gets the is_custom_avatar of this Avatar.

        Determines whether user updated his / her avatar with own image

        :return: The is_custom_avatar of this Avatar.
        :rtype: bool
        """
        return self._is_custom_avatar

    @is_custom_avatar.setter
    def is_custom_avatar(self, is_custom_avatar):
        """Sets the is_custom_avatar of this Avatar.

        Determines whether user updated his / her avatar with own image

        :param is_custom_avatar: The is_custom_avatar of this Avatar.
        :type is_custom_avatar: bool
        """
        if is_custom_avatar is None:
            raise ValueError("Invalid value for `is_custom_avatar`, must not be `None`")

        self._is_custom_avatar = is_custom_avatar
