# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileKeyContainer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iv: str=None, key: str=None, tag: str=None, version: str=None):
        """FileKeyContainer - a model defined in OpenAPI

        :param iv: The iv of this FileKeyContainer.
        :param key: The key of this FileKeyContainer.
        :param tag: The tag of this FileKeyContainer.
        :param version: The version of this FileKeyContainer.
        """
        self.openapi_types = {
            'iv': str,
            'key': str,
            'tag': str,
            'version': str
        }

        self.attribute_map = {
            'iv': 'iv',
            'key': 'key',
            'tag': 'tag',
            'version': 'version'
        }

        self._iv = iv
        self._key = key
        self._tag = tag
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileKeyContainer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileKeyContainer of this FileKeyContainer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iv(self):
        """Gets the iv of this FileKeyContainer.

        Initial vector

        :return: The iv of this FileKeyContainer.
        :rtype: str
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this FileKeyContainer.

        Initial vector

        :param iv: The iv of this FileKeyContainer.
        :type iv: str
        """
        if iv is None:
            raise ValueError("Invalid value for `iv`, must not be `None`")

        self._iv = iv

    @property
    def key(self):
        """Gets the key of this FileKeyContainer.

        Encryption key

        :return: The key of this FileKeyContainer.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this FileKeyContainer.

        Encryption key

        :param key: The key of this FileKeyContainer.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def tag(self):
        """Gets the tag of this FileKeyContainer.

        Authentication tag  (needed with authenticated encryption)

        :return: The tag of this FileKeyContainer.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this FileKeyContainer.

        Authentication tag  (needed with authenticated encryption)

        :param tag: The tag of this FileKeyContainer.
        :type tag: str
        """

        self._tag = tag

    @property
    def version(self):
        """Gets the version of this FileKeyContainer.

        Version

        :return: The version of this FileKeyContainer.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FileKeyContainer.

        Version

        :param version: The version of this FileKeyContainer.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version
