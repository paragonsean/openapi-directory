# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.range import Range
from openapi_server.models.subscribed_upload_share import SubscribedUploadShare
from openapi_server import util


class SubscribedUploadShareList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, items: List[SubscribedUploadShare]=None, range: Range=None):
        """SubscribedUploadShareList - a model defined in OpenAPI

        :param items: The items of this SubscribedUploadShareList.
        :param range: The range of this SubscribedUploadShareList.
        """
        self.openapi_types = {
            'items': List[SubscribedUploadShare],
            'range': Range
        }

        self.attribute_map = {
            'items': 'items',
            'range': 'range'
        }

        self._items = items
        self._range = range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscribedUploadShareList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscribedUploadShareList of this SubscribedUploadShareList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def items(self):
        """Gets the items of this SubscribedUploadShareList.

        List of subscribed upload shares

        :return: The items of this SubscribedUploadShareList.
        :rtype: List[SubscribedUploadShare]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubscribedUploadShareList.

        List of subscribed upload shares

        :param items: The items of this SubscribedUploadShareList.
        :type items: List[SubscribedUploadShare]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")

        self._items = items

    @property
    def range(self):
        """Gets the range of this SubscribedUploadShareList.


        :return: The range of this SubscribedUploadShareList.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this SubscribedUploadShareList.


        :param range: The range of this SubscribedUploadShareList.
        :type range: Range
        """
        if range is None:
            raise ValueError("Invalid value for `range`, must not be `None`")

        self._range = range
