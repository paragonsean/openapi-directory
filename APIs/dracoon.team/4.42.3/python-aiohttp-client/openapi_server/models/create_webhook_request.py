# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateWebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_type_names: List[str]=None, is_enabled: bool=None, name: str=None, secret: str=None, trigger_example_event: bool=None, url: str=None):
        """CreateWebhookRequest - a model defined in OpenAPI

        :param event_type_names: The event_type_names of this CreateWebhookRequest.
        :param is_enabled: The is_enabled of this CreateWebhookRequest.
        :param name: The name of this CreateWebhookRequest.
        :param secret: The secret of this CreateWebhookRequest.
        :param trigger_example_event: The trigger_example_event of this CreateWebhookRequest.
        :param url: The url of this CreateWebhookRequest.
        """
        self.openapi_types = {
            'event_type_names': List[str],
            'is_enabled': bool,
            'name': str,
            'secret': str,
            'trigger_example_event': bool,
            'url': str
        }

        self.attribute_map = {
            'event_type_names': 'eventTypeNames',
            'is_enabled': 'isEnabled',
            'name': 'name',
            'secret': 'secret',
            'trigger_example_event': 'triggerExampleEvent',
            'url': 'url'
        }

        self._event_type_names = event_type_names
        self._is_enabled = is_enabled
        self._name = name
        self._secret = secret
        self._trigger_example_event = trigger_example_event
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWebhookRequest of this CreateWebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type_names(self):
        """Gets the event_type_names of this CreateWebhookRequest.

        List of names of event types

        :return: The event_type_names of this CreateWebhookRequest.
        :rtype: List[str]
        """
        return self._event_type_names

    @event_type_names.setter
    def event_type_names(self, event_type_names):
        """Sets the event_type_names of this CreateWebhookRequest.

        List of names of event types

        :param event_type_names: The event_type_names of this CreateWebhookRequest.
        :type event_type_names: List[str]
        """
        if event_type_names is None:
            raise ValueError("Invalid value for `event_type_names`, must not be `None`")

        self._event_type_names = event_type_names

    @property
    def is_enabled(self):
        """Gets the is_enabled of this CreateWebhookRequest.

        Is enabled

        :return: The is_enabled of this CreateWebhookRequest.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this CreateWebhookRequest.

        Is enabled

        :param is_enabled: The is_enabled of this CreateWebhookRequest.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def name(self):
        """Gets the name of this CreateWebhookRequest.

        Name

        :return: The name of this CreateWebhookRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWebhookRequest.

        Name

        :param name: The name of this CreateWebhookRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def secret(self):
        """Gets the secret of this CreateWebhookRequest.

        Secret; used for event message signatures

        :return: The secret of this CreateWebhookRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this CreateWebhookRequest.

        Secret; used for event message signatures

        :param secret: The secret of this CreateWebhookRequest.
        :type secret: str
        """

        self._secret = secret

    @property
    def trigger_example_event(self):
        """Gets the trigger_example_event of this CreateWebhookRequest.

        If set to true, an example event is being created

        :return: The trigger_example_event of this CreateWebhookRequest.
        :rtype: bool
        """
        return self._trigger_example_event

    @trigger_example_event.setter
    def trigger_example_event(self, trigger_example_event):
        """Sets the trigger_example_event of this CreateWebhookRequest.

        If set to true, an example event is being created

        :param trigger_example_event: The trigger_example_event of this CreateWebhookRequest.
        :type trigger_example_event: bool
        """

        self._trigger_example_event = trigger_example_event

    @property
    def url(self):
        """Gets the url of this CreateWebhookRequest.

        URL (must begin with the `HTTPS` scheme)

        :return: The url of this CreateWebhookRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateWebhookRequest.

        URL (must begin with the `HTTPS` scheme)

        :param url: The url of this CreateWebhookRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
