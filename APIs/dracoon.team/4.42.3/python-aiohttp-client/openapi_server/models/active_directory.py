# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActiveDirectory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, id: int=None, is_global_available: bool=None):
        """ActiveDirectory - a model defined in OpenAPI

        :param alias: The alias of this ActiveDirectory.
        :param id: The id of this ActiveDirectory.
        :param is_global_available: The is_global_available of this ActiveDirectory.
        """
        self.openapi_types = {
            'alias': str,
            'id': int,
            'is_global_available': bool
        }

        self.attribute_map = {
            'alias': 'alias',
            'id': 'id',
            'is_global_available': 'isGlobalAvailable'
        }

        self._alias = alias
        self._id = id
        self._is_global_available = is_global_available

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActiveDirectory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActiveDirectory of this ActiveDirectory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this ActiveDirectory.

        Unique name for an Active Directory configuration

        :return: The alias of this ActiveDirectory.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ActiveDirectory.

        Unique name for an Active Directory configuration

        :param alias: The alias of this ActiveDirectory.
        :type alias: str
        """
        if alias is None:
            raise ValueError("Invalid value for `alias`, must not be `None`")

        self._alias = alias

    @property
    def id(self):
        """Gets the id of this ActiveDirectory.

        ID

        :return: The id of this ActiveDirectory.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActiveDirectory.

        ID

        :param id: The id of this ActiveDirectory.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_global_available(self):
        """Gets the is_global_available of this ActiveDirectory.

        Is available for all customers

        :return: The is_global_available of this ActiveDirectory.
        :rtype: bool
        """
        return self._is_global_available

    @is_global_available.setter
    def is_global_available(self, is_global_available):
        """Sets the is_global_available of this ActiveDirectory.

        Is available for all customers

        :param is_global_available: The is_global_available of this ActiveDirectory.
        :type is_global_available: bool
        """
        if is_global_available is None:
            raise ValueError("Invalid value for `is_global_available`, must not be `None`")

        self._is_global_available = is_global_available
