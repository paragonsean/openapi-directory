# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TotpSetupResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, otp_uri: str=None, qr_code: str=None, secret: str=None):
        """TotpSetupResponse - a model defined in OpenAPI

        :param id: The id of this TotpSetupResponse.
        :param otp_uri: The otp_uri of this TotpSetupResponse.
        :param qr_code: The qr_code of this TotpSetupResponse.
        :param secret: The secret of this TotpSetupResponse.
        """
        self.openapi_types = {
            'id': int,
            'otp_uri': str,
            'qr_code': str,
            'secret': str
        }

        self.attribute_map = {
            'id': 'id',
            'otp_uri': 'otpUri',
            'qr_code': 'qrCode',
            'secret': 'secret'
        }

        self._id = id
        self._otp_uri = otp_uri
        self._qr_code = qr_code
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotpSetupResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotpSetupResponse of this TotpSetupResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this TotpSetupResponse.

        ID

        :return: The id of this TotpSetupResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TotpSetupResponse.

        ID

        :param id: The id of this TotpSetupResponse.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def otp_uri(self):
        """Gets the otp_uri of this TotpSetupResponse.

        URI containing secret key, issuer and account information

        :return: The otp_uri of this TotpSetupResponse.
        :rtype: str
        """
        return self._otp_uri

    @otp_uri.setter
    def otp_uri(self, otp_uri):
        """Sets the otp_uri of this TotpSetupResponse.

        URI containing secret key, issuer and account information

        :param otp_uri: The otp_uri of this TotpSetupResponse.
        :type otp_uri: str
        """
        if otp_uri is None:
            raise ValueError("Invalid value for `otp_uri`, must not be `None`")

        self._otp_uri = otp_uri

    @property
    def qr_code(self):
        """Gets the qr_code of this TotpSetupResponse.

        TOTP data URL (QR Code)

        :return: The qr_code of this TotpSetupResponse.
        :rtype: str
        """
        return self._qr_code

    @qr_code.setter
    def qr_code(self, qr_code):
        """Sets the qr_code of this TotpSetupResponse.

        TOTP data URL (QR Code)

        :param qr_code: The qr_code of this TotpSetupResponse.
        :type qr_code: str
        """
        if qr_code is None:
            raise ValueError("Invalid value for `qr_code`, must not be `None`")

        self._qr_code = qr_code

    @property
    def secret(self):
        """Gets the secret of this TotpSetupResponse.

        Secret key used for setup of TOTP authentication

        :return: The secret of this TotpSetupResponse.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this TotpSetupResponse.

        Secret key used for setup of TOTP authentication

        :param secret: The secret of this TotpSetupResponse.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
