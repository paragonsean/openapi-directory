# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotificationConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_ids: List[int]=None, event_type_name: str=None, id: int=None, scope_id: int=None):
        """NotificationConfig - a model defined in OpenAPI

        :param channel_ids: The channel_ids of this NotificationConfig.
        :param event_type_name: The event_type_name of this NotificationConfig.
        :param id: The id of this NotificationConfig.
        :param scope_id: The scope_id of this NotificationConfig.
        """
        self.openapi_types = {
            'channel_ids': List[int],
            'event_type_name': str,
            'id': int,
            'scope_id': int
        }

        self.attribute_map = {
            'channel_ids': 'channelIds',
            'event_type_name': 'eventTypeName',
            'id': 'id',
            'scope_id': 'scopeId'
        }

        self._channel_ids = channel_ids
        self._event_type_name = event_type_name
        self._id = id
        self._scope_id = scope_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationConfig of this NotificationConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_ids(self):
        """Gets the channel_ids of this NotificationConfig.

        List of notification channel IDs

        :return: The channel_ids of this NotificationConfig.
        :rtype: List[int]
        """
        return self._channel_ids

    @channel_ids.setter
    def channel_ids(self, channel_ids):
        """Sets the channel_ids of this NotificationConfig.

        List of notification channel IDs

        :param channel_ids: The channel_ids of this NotificationConfig.
        :type channel_ids: List[int]
        """
        if channel_ids is None:
            raise ValueError("Invalid value for `channel_ids`, must not be `None`")

        self._channel_ids = channel_ids

    @property
    def event_type_name(self):
        """Gets the event_type_name of this NotificationConfig.

        Event type name

        :return: The event_type_name of this NotificationConfig.
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this NotificationConfig.

        Event type name

        :param event_type_name: The event_type_name of this NotificationConfig.
        :type event_type_name: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")

        self._event_type_name = event_type_name

    @property
    def id(self):
        """Gets the id of this NotificationConfig.

        Notification configuration ID

        :return: The id of this NotificationConfig.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationConfig.

        Notification configuration ID

        :param id: The id of this NotificationConfig.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def scope_id(self):
        """Gets the scope_id of this NotificationConfig.

        Scope ID

        :return: The scope_id of this NotificationConfig.
        :rtype: int
        """
        return self._scope_id

    @scope_id.setter
    def scope_id(self, scope_id):
        """Sets the scope_id of this NotificationConfig.

        Scope ID

        :param scope_id: The scope_id of this NotificationConfig.
        :type scope_id: int
        """
        if scope_id is None:
            raise ValueError("Invalid value for `scope_id`, must not be `None`")

        self._scope_id = scope_id
