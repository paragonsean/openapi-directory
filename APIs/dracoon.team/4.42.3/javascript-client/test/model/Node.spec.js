/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DracoonApi);
  }
}(this, function(expect, DracoonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DracoonApi.Node();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Node', function() {
    it('should create an instance of Node', function() {
      // uncomment below and update the code to test Node
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be.a(DracoonApi.Node);
    });

    it('should have the property authParentId (base name: "authParentId")', function() {
      // uncomment below and update the code to test the property authParentId
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property branchVersion (base name: "branchVersion")', function() {
      // uncomment below and update the code to test the property branchVersion
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property children (base name: "children")', function() {
      // uncomment below and update the code to test the property children
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property classification (base name: "classification")', function() {
      // uncomment below and update the code to test the property classification
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntChildren (base name: "cntChildren")', function() {
      // uncomment below and update the code to test the property cntChildren
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntComments (base name: "cntComments")', function() {
      // uncomment below and update the code to test the property cntComments
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntDeletedVersions (base name: "cntDeletedVersions")', function() {
      // uncomment below and update the code to test the property cntDeletedVersions
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntDownloadShares (base name: "cntDownloadShares")', function() {
      // uncomment below and update the code to test the property cntDownloadShares
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntFiles (base name: "cntFiles")', function() {
      // uncomment below and update the code to test the property cntFiles
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntFolders (base name: "cntFolders")', function() {
      // uncomment below and update the code to test the property cntFolders
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntRooms (base name: "cntRooms")', function() {
      // uncomment below and update the code to test the property cntRooms
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property cntUploadShares (base name: "cntUploadShares")', function() {
      // uncomment below and update the code to test the property cntUploadShares
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property encryptionInfo (base name: "encryptionInfo")', function() {
      // uncomment below and update the code to test the property encryptionInfo
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property expireAt (base name: "expireAt")', function() {
      // uncomment below and update the code to test the property expireAt
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property fileType (base name: "fileType")', function() {
      // uncomment below and update the code to test the property fileType
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property hasActivitiesLog (base name: "hasActivitiesLog")', function() {
      // uncomment below and update the code to test the property hasActivitiesLog
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property hash (base name: "hash")', function() {
      // uncomment below and update the code to test the property hash
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property inheritPermissions (base name: "inheritPermissions")', function() {
      // uncomment below and update the code to test the property inheritPermissions
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property isBrowsable (base name: "isBrowsable")', function() {
      // uncomment below and update the code to test the property isBrowsable
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property isEncrypted (base name: "isEncrypted")', function() {
      // uncomment below and update the code to test the property isEncrypted
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property isFavorite (base name: "isFavorite")', function() {
      // uncomment below and update the code to test the property isFavorite
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property mediaToken (base name: "mediaToken")', function() {
      // uncomment below and update the code to test the property mediaToken
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property mediaType (base name: "mediaType")', function() {
      // uncomment below and update the code to test the property mediaType
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property notes (base name: "notes")', function() {
      // uncomment below and update the code to test the property notes
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parentId")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property parentPath (base name: "parentPath")', function() {
      // uncomment below and update the code to test the property parentPath
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property quota (base name: "quota")', function() {
      // uncomment below and update the code to test the property quota
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property recycleBinRetentionPeriod (base name: "recycleBinRetentionPeriod")', function() {
      // uncomment below and update the code to test the property recycleBinRetentionPeriod
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property referenceId (base name: "referenceId")', function() {
      // uncomment below and update the code to test the property referenceId
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property size (base name: "size")', function() {
      // uncomment below and update the code to test the property size
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property timestampCreation (base name: "timestampCreation")', function() {
      // uncomment below and update the code to test the property timestampCreation
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property timestampModification (base name: "timestampModification")', function() {
      // uncomment below and update the code to test the property timestampModification
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

    it('should have the property updatedBy (base name: "updatedBy")', function() {
      // uncomment below and update the code to test the property updatedBy
      //var instance = new DracoonApi.Node();
      //expect(instance).to.be();
    });

  });

}));
