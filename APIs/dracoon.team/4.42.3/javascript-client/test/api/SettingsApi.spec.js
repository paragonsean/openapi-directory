/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DracoonApi);
  }
}(this, function(expect, DracoonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DracoonApi.SettingsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SettingsApi', function() {
    describe('createAndPreserveKeyPair', function() {
      it('should call createAndPreserveKeyPair successfully', function(done) {
        //uncomment below and update the code to test createAndPreserveKeyPair
        //instance.createAndPreserveKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWebhook', function() {
      it('should call createWebhook successfully', function(done) {
        //uncomment below and update the code to test createWebhook
        //instance.createWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSystemRescueKeyPair', function() {
      it('should call removeSystemRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test removeSystemRescueKeyPair
        //instance.removeSystemRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeWebhook', function() {
      it('should call removeWebhook successfully', function(done) {
        //uncomment below and update the code to test removeWebhook
        //instance.removeWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestAllSystemRescueKeyPairs', function() {
      it('should call requestAllSystemRescueKeyPairs successfully', function(done) {
        //uncomment below and update the code to test requestAllSystemRescueKeyPairs
        //instance.requestAllSystemRescueKeyPairs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestListOfEventTypesForConfigManager', function() {
      it('should call requestListOfEventTypesForConfigManager successfully', function(done) {
        //uncomment below and update the code to test requestListOfEventTypesForConfigManager
        //instance.requestListOfEventTypesForConfigManager(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestListOfWebhooks', function() {
      it('should call requestListOfWebhooks successfully', function(done) {
        //uncomment below and update the code to test requestListOfWebhooks
        //instance.requestListOfWebhooks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestNotificationChannels', function() {
      it('should call requestNotificationChannels successfully', function(done) {
        //uncomment below and update the code to test requestNotificationChannels
        //instance.requestNotificationChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestSettings', function() {
      it('should call requestSettings successfully', function(done) {
        //uncomment below and update the code to test requestSettings
        //instance.requestSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestSystemRescueKeyPair', function() {
      it('should call requestSystemRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test requestSystemRescueKeyPair
        //instance.requestSystemRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestWebhook', function() {
      it('should call requestWebhook successfully', function(done) {
        //uncomment below and update the code to test requestWebhook
        //instance.requestWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetWebhookLifetime', function() {
      it('should call resetWebhookLifetime successfully', function(done) {
        //uncomment below and update the code to test resetWebhookLifetime
        //instance.resetWebhookLifetime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSettings', function() {
      it('should call setSettings successfully', function(done) {
        //uncomment below and update the code to test setSettings
        //instance.setSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSystemRescueKeyPair', function() {
      it('should call setSystemRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test setSystemRescueKeyPair
        //instance.setSystemRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('toggleNotificationChannels', function() {
      it('should call toggleNotificationChannels successfully', function(done) {
        //uncomment below and update the code to test toggleNotificationChannels
        //instance.toggleNotificationChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWebhook', function() {
      it('should call updateWebhook successfully', function(done) {
        //uncomment below and update the code to test updateWebhook
        //instance.updateWebhook(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
