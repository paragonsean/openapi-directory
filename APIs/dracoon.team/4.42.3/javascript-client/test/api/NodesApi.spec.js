/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DracoonApi);
  }
}(this, function(expect, DracoonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DracoonApi.NodesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NodesApi', function() {
    describe('addFavorite', function() {
      it('should call addFavorite successfully', function(done) {
        //uncomment below and update the code to test addFavorite
        //instance.addFavorite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRoomGuestUsers', function() {
      it('should call addRoomGuestUsers successfully', function(done) {
        //uncomment below and update the code to test addRoomGuestUsers
        //instance.addRoomGuestUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelFileUpload', function() {
      it('should call cancelFileUpload successfully', function(done) {
        //uncomment below and update the code to test cancelFileUpload
        //instance.cancelFileUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changePendingAssignments', function() {
      it('should call changePendingAssignments successfully', function(done) {
        //uncomment below and update the code to test changePendingAssignments
        //instance.changePendingAssignments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeFileUpload', function() {
      it('should call completeFileUpload successfully', function(done) {
        //uncomment below and update the code to test completeFileUpload
        //instance.completeFileUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('completeS3FileUpload', function() {
      it('should call completeS3FileUpload successfully', function(done) {
        //uncomment below and update the code to test completeS3FileUpload
        //instance.completeS3FileUpload(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('configureRoom', function() {
      it('should call configureRoom successfully', function(done) {
        //uncomment below and update the code to test configureRoom
        //instance.configureRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('copyNodes', function() {
      it('should call copyNodes successfully', function(done) {
        //uncomment below and update the code to test copyNodes
        //instance.copyNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAndPreserveRoomRescueKeyPair', function() {
      it('should call createAndPreserveRoomRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test createAndPreserveRoomRescueKeyPair
        //instance.createAndPreserveRoomRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFileUploadChannel', function() {
      it('should call createFileUploadChannel successfully', function(done) {
        //uncomment below and update the code to test createFileUploadChannel
        //instance.createFileUploadChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createFolder', function() {
      it('should call createFolder successfully', function(done) {
        //uncomment below and update the code to test createFolder
        //instance.createFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNodeComment', function() {
      it('should call createNodeComment successfully', function(done) {
        //uncomment below and update the code to test createNodeComment
        //instance.createNodeComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoom', function() {
      it('should call createRoom successfully', function(done) {
        //uncomment below and update the code to test createRoom
        //instance.createRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('downloadZipArchive', function() {
      it('should call downloadZipArchive successfully', function(done) {
        //uncomment below and update the code to test downloadZipArchive
        //instance.downloadZipArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('emptyDeletedNodes', function() {
      it('should call emptyDeletedNodes successfully', function(done) {
        //uncomment below and update the code to test emptyDeletedNodes
        //instance.emptyDeletedNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('encryptRoom', function() {
      it('should call encryptRoom successfully', function(done) {
        //uncomment below and update the code to test encryptRoom
        //instance.encryptRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDownloadUrl', function() {
      it('should call generateDownloadUrl successfully', function(done) {
        //uncomment below and update the code to test generateDownloadUrl
        //instance.generateDownloadUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateDownloadUrlForZipArchive', function() {
      it('should call generateDownloadUrlForZipArchive successfully', function(done) {
        //uncomment below and update the code to test generateDownloadUrlForZipArchive
        //instance.generateDownloadUrlForZipArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generatePresignedUrlsFiles', function() {
      it('should call generatePresignedUrlsFiles successfully', function(done) {
        //uncomment below and update the code to test generatePresignedUrlsFiles
        //instance.generatePresignedUrlsFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('handleRoomWebhookAssignments', function() {
      it('should call handleRoomWebhookAssignments successfully', function(done) {
        //uncomment below and update the code to test handleRoomWebhookAssignments
        //instance.handleRoomWebhookAssignments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveNodes', function() {
      it('should call moveNodes successfully', function(done) {
        //uncomment below and update the code to test moveNodes
        //instance.moveNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeDeletedNodes', function() {
      it('should call removeDeletedNodes successfully', function(done) {
        //uncomment below and update the code to test removeDeletedNodes
        //instance.removeDeletedNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeFavorite', function() {
      it('should call removeFavorite successfully', function(done) {
        //uncomment below and update the code to test removeFavorite
        //instance.removeFavorite(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeNode', function() {
      it('should call removeNode successfully', function(done) {
        //uncomment below and update the code to test removeNode
        //instance.removeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeNodeComment', function() {
      it('should call removeNodeComment successfully', function(done) {
        //uncomment below and update the code to test removeNodeComment
        //instance.removeNodeComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeNodes', function() {
      it('should call removeNodes successfully', function(done) {
        //uncomment below and update the code to test removeNodes
        //instance.removeNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeRoomRescueKeyPair', function() {
      it('should call removeRoomRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test removeRoomRescueKeyPair
        //instance.removeRoomRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestDeletedNode', function() {
      it('should call requestDeletedNode successfully', function(done) {
        //uncomment below and update the code to test requestDeletedNode
        //instance.requestDeletedNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestDeletedNodeVersions', function() {
      it('should call requestDeletedNodeVersions successfully', function(done) {
        //uncomment below and update the code to test requestDeletedNodeVersions
        //instance.requestDeletedNodeVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestDeletedNodesSummary', function() {
      it('should call requestDeletedNodesSummary successfully', function(done) {
        //uncomment below and update the code to test requestDeletedNodesSummary
        //instance.requestDeletedNodesSummary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestFileVersionList', function() {
      it('should call requestFileVersionList successfully', function(done) {
        //uncomment below and update the code to test requestFileVersionList
        //instance.requestFileVersionList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestListOfWebhooksForRoom', function() {
      it('should call requestListOfWebhooksForRoom successfully', function(done) {
        //uncomment below and update the code to test requestListOfWebhooksForRoom
        //instance.requestListOfWebhooksForRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestMissingFileKeys', function() {
      it('should call requestMissingFileKeys successfully', function(done) {
        //uncomment below and update the code to test requestMissingFileKeys
        //instance.requestMissingFileKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestNode', function() {
      it('should call requestNode successfully', function(done) {
        //uncomment below and update the code to test requestNode
        //instance.requestNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestNodeComments', function() {
      it('should call requestNodeComments successfully', function(done) {
        //uncomment below and update the code to test requestNodeComments
        //instance.requestNodeComments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestNodeParents', function() {
      it('should call requestNodeParents successfully', function(done) {
        //uncomment below and update the code to test requestNodeParents
        //instance.requestNodeParents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestNodes', function() {
      it('should call requestNodes successfully', function(done) {
        //uncomment below and update the code to test requestNodes
        //instance.requestNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestPendingAssignments', function() {
      it('should call requestPendingAssignments successfully', function(done) {
        //uncomment below and update the code to test requestPendingAssignments
        //instance.requestPendingAssignments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomActivitiesLogAsJson', function() {
      it('should call requestRoomActivitiesLogAsJson successfully', function(done) {
        //uncomment below and update the code to test requestRoomActivitiesLogAsJson
        //instance.requestRoomActivitiesLogAsJson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomGroups', function() {
      it('should call requestRoomGroups successfully', function(done) {
        //uncomment below and update the code to test requestRoomGroups
        //instance.requestRoomGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomPolicies', function() {
      it('should call requestRoomPolicies successfully', function(done) {
        //uncomment below and update the code to test requestRoomPolicies
        //instance.requestRoomPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomRescueKey', function() {
      it('should call requestRoomRescueKey successfully', function(done) {
        //uncomment below and update the code to test requestRoomRescueKey
        //instance.requestRoomRescueKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomRescueKeyPair', function() {
      it('should call requestRoomRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test requestRoomRescueKeyPair
        //instance.requestRoomRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomRescueKeyPairs', function() {
      it('should call requestRoomRescueKeyPairs successfully', function(done) {
        //uncomment below and update the code to test requestRoomRescueKeyPairs
        //instance.requestRoomRescueKeyPairs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomS3Tags', function() {
      it('should call requestRoomS3Tags successfully', function(done) {
        //uncomment below and update the code to test requestRoomS3Tags
        //instance.requestRoomS3Tags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestRoomUsers', function() {
      it('should call requestRoomUsers successfully', function(done) {
        //uncomment below and update the code to test requestRoomUsers
        //instance.requestRoomUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestSystemRescueKey', function() {
      it('should call requestSystemRescueKey successfully', function(done) {
        //uncomment below and update the code to test requestSystemRescueKey
        //instance.requestSystemRescueKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUploadStatusFiles', function() {
      it('should call requestUploadStatusFiles successfully', function(done) {
        //uncomment below and update the code to test requestUploadStatusFiles
        //instance.requestUploadStatusFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUserFileKey', function() {
      it('should call requestUserFileKey successfully', function(done) {
        //uncomment below and update the code to test requestUserFileKey
        //instance.requestUserFileKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restoreNodes', function() {
      it('should call restoreNodes successfully', function(done) {
        //uncomment below and update the code to test restoreNodes
        //instance.restoreNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeRoomGroups', function() {
      it('should call revokeRoomGroups successfully', function(done) {
        //uncomment below and update the code to test revokeRoomGroups
        //instance.revokeRoomGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeRoomUsers', function() {
      it('should call revokeRoomUsers successfully', function(done) {
        //uncomment below and update the code to test revokeRoomUsers
        //instance.revokeRoomUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchNodes', function() {
      it('should call searchNodes successfully', function(done) {
        //uncomment below and update the code to test searchNodes
        //instance.searchNodes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRoomPolicies', function() {
      it('should call setRoomPolicies successfully', function(done) {
        //uncomment below and update the code to test setRoomPolicies
        //instance.setRoomPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRoomRescueKeyPair', function() {
      it('should call setRoomRescueKeyPair successfully', function(done) {
        //uncomment below and update the code to test setRoomRescueKeyPair
        //instance.setRoomRescueKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setRoomS3Tags', function() {
      it('should call setRoomS3Tags successfully', function(done) {
        //uncomment below and update the code to test setRoomS3Tags
        //instance.setRoomS3Tags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setUserFileKeys', function() {
      it('should call setUserFileKeys successfully', function(done) {
        //uncomment below and update the code to test setUserFileKeys
        //instance.setUserFileKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFavorites', function() {
      it('should call updateFavorites successfully', function(done) {
        //uncomment below and update the code to test updateFavorites
        //instance.updateFavorites(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFile', function() {
      it('should call updateFile successfully', function(done) {
        //uncomment below and update the code to test updateFile
        //instance.updateFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFiles', function() {
      it('should call updateFiles successfully', function(done) {
        //uncomment below and update the code to test updateFiles
        //instance.updateFiles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFolder', function() {
      it('should call updateFolder successfully', function(done) {
        //uncomment below and update the code to test updateFolder
        //instance.updateFolder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodeComment', function() {
      it('should call updateNodeComment successfully', function(done) {
        //uncomment below and update the code to test updateNodeComment
        //instance.updateNodeComment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoom', function() {
      it('should call updateRoom successfully', function(done) {
        //uncomment below and update the code to test updateRoom
        //instance.updateRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoomGroups', function() {
      it('should call updateRoomGroups successfully', function(done) {
        //uncomment below and update the code to test updateRoomGroups
        //instance.updateRoomGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoomUsers', function() {
      it('should call updateRoomUsers successfully', function(done) {
        //uncomment below and update the code to test updateRoomUsers
        //instance.updateRoomUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFileAsMultipart', function() {
      it('should call uploadFileAsMultipart successfully', function(done) {
        //uncomment below and update the code to test uploadFileAsMultipart
        //instance.uploadFileAsMultipart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
