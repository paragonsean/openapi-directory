/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DracoonApi);
  }
}(this, function(expect, DracoonApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DracoonApi.UserApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserApi', function() {
    describe('changeUserPassword', function() {
      it('should call changeUserPassword successfully', function(done) {
        //uncomment below and update the code to test changeUserPassword
        //instance.changeUserPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('confirmTotpSetup', function() {
      it('should call confirmTotpSetup successfully', function(done) {
        //uncomment below and update the code to test confirmTotpSetup
        //instance.confirmTotpSetup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAndPreserveUserKeyPair', function() {
      it('should call createAndPreserveUserKeyPair successfully', function(done) {
        //uncomment below and update the code to test createAndPreserveUserKeyPair
        //instance.createAndPreserveUserKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMfaTotpSetup', function() {
      it('should call deleteMfaTotpSetup successfully', function(done) {
        //uncomment below and update the code to test deleteMfaTotpSetup
        //instance.deleteMfaTotpSetup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableCustomerEncryption', function() {
      it('should call enableCustomerEncryption successfully', function(done) {
        //uncomment below and update the code to test enableCustomerEncryption
        //instance.enableCustomerEncryption(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMfaStatusForUser', function() {
      it('should call getMfaStatusForUser successfully', function(done) {
        //uncomment below and update the code to test getMfaStatusForUser
        //instance.getMfaStatusForUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTotpSetupInformation', function() {
      it('should call getTotpSetupInformation successfully', function(done) {
        //uncomment below and update the code to test getTotpSetupInformation
        //instance.getTotpSetupInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDownloadShareSubscriptions', function() {
      it('should call listDownloadShareSubscriptions successfully', function(done) {
        //uncomment below and update the code to test listDownloadShareSubscriptions
        //instance.listDownloadShareSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listNodeSubscriptions', function() {
      it('should call listNodeSubscriptions successfully', function(done) {
        //uncomment below and update the code to test listNodeSubscriptions
        //instance.listNodeSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUploadShareSubscriptions', function() {
      it('should call listUploadShareSubscriptions successfully', function(done) {
        //uncomment below and update the code to test listUploadShareSubscriptions
        //instance.listUploadShareSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logout', function() {
      it('should call logout successfully', function(done) {
        //uncomment below and update the code to test logout
        //instance.logout(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pingUser', function() {
      it('should call pingUser successfully', function(done) {
        //uncomment below and update the code to test pingUser
        //instance.pingUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeOAuthApproval', function() {
      it('should call removeOAuthApproval successfully', function(done) {
        //uncomment below and update the code to test removeOAuthApproval
        //instance.removeOAuthApproval(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeOAuthAuthorization', function() {
      it('should call removeOAuthAuthorization successfully', function(done) {
        //uncomment below and update the code to test removeOAuthAuthorization
        //instance.removeOAuthAuthorization(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeOAuthAuthorizations', function() {
      it('should call removeOAuthAuthorizations successfully', function(done) {
        //uncomment below and update the code to test removeOAuthAuthorizations
        //instance.removeOAuthAuthorizations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeProfileAttribute', function() {
      it('should call removeProfileAttribute successfully', function(done) {
        //uncomment below and update the code to test removeProfileAttribute
        //instance.removeProfileAttribute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeUserKeyPair', function() {
      it('should call removeUserKeyPair successfully', function(done) {
        //uncomment below and update the code to test removeUserKeyPair
        //instance.removeUserKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestAvatar', function() {
      it('should call requestAvatar successfully', function(done) {
        //uncomment below and update the code to test requestAvatar
        //instance.requestAvatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestCustomerInfo', function() {
      it('should call requestCustomerInfo successfully', function(done) {
        //uncomment below and update the code to test requestCustomerInfo
        //instance.requestCustomerInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestCustomerKeyPair', function() {
      it('should call requestCustomerKeyPair successfully', function(done) {
        //uncomment below and update the code to test requestCustomerKeyPair
        //instance.requestCustomerKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestListOfNotificationConfigs', function() {
      it('should call requestListOfNotificationConfigs successfully', function(done) {
        //uncomment below and update the code to test requestListOfNotificationConfigs
        //instance.requestListOfNotificationConfigs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestOAuthApprovals', function() {
      it('should call requestOAuthApprovals successfully', function(done) {
        //uncomment below and update the code to test requestOAuthApprovals
        //instance.requestOAuthApprovals(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestOAuthAuthorizations', function() {
      it('should call requestOAuthAuthorizations successfully', function(done) {
        //uncomment below and update the code to test requestOAuthAuthorizations
        //instance.requestOAuthAuthorizations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestProfileAttributes', function() {
      it('should call requestProfileAttributes successfully', function(done) {
        //uncomment below and update the code to test requestProfileAttributes
        //instance.requestProfileAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUserInfo', function() {
      it('should call requestUserInfo successfully', function(done) {
        //uncomment below and update the code to test requestUserInfo
        //instance.requestUserInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUserKeyPair', function() {
      it('should call requestUserKeyPair successfully', function(done) {
        //uncomment below and update the code to test requestUserKeyPair
        //instance.requestUserKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('requestUserKeyPairs', function() {
      it('should call requestUserKeyPairs successfully', function(done) {
        //uncomment below and update the code to test requestUserKeyPairs
        //instance.requestUserKeyPairs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetAvatar', function() {
      it('should call resetAvatar successfully', function(done) {
        //uncomment below and update the code to test resetAvatar
        //instance.resetAvatar(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setProfileAttributes', function() {
      it('should call setProfileAttributes successfully', function(done) {
        //uncomment below and update the code to test setProfileAttributes
        //instance.setProfileAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setUserKeyPair', function() {
      it('should call setUserKeyPair successfully', function(done) {
        //uncomment below and update the code to test setUserKeyPair
        //instance.setUserKeyPair(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeDownloadShare', function() {
      it('should call subscribeDownloadShare successfully', function(done) {
        //uncomment below and update the code to test subscribeDownloadShare
        //instance.subscribeDownloadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeDownloadShares', function() {
      it('should call subscribeDownloadShares successfully', function(done) {
        //uncomment below and update the code to test subscribeDownloadShares
        //instance.subscribeDownloadShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeNode', function() {
      it('should call subscribeNode successfully', function(done) {
        //uncomment below and update the code to test subscribeNode
        //instance.subscribeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeUploadShare', function() {
      it('should call subscribeUploadShare successfully', function(done) {
        //uncomment below and update the code to test subscribeUploadShare
        //instance.subscribeUploadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('subscribeUploadShares', function() {
      it('should call subscribeUploadShares successfully', function(done) {
        //uncomment below and update the code to test subscribeUploadShares
        //instance.subscribeUploadShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribeDownloadShare', function() {
      it('should call unsubscribeDownloadShare successfully', function(done) {
        //uncomment below and update the code to test unsubscribeDownloadShare
        //instance.unsubscribeDownloadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribeNode', function() {
      it('should call unsubscribeNode successfully', function(done) {
        //uncomment below and update the code to test unsubscribeNode
        //instance.unsubscribeNode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unsubscribeUploadShare', function() {
      it('should call unsubscribeUploadShare successfully', function(done) {
        //uncomment below and update the code to test unsubscribeUploadShare
        //instance.unsubscribeUploadShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNodeSubscriptions', function() {
      it('should call updateNodeSubscriptions successfully', function(done) {
        //uncomment below and update the code to test updateNodeSubscriptions
        //instance.updateNodeSubscriptions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNotificationConfig', function() {
      it('should call updateNotificationConfig successfully', function(done) {
        //uncomment below and update the code to test updateNotificationConfig
        //instance.updateNotificationConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProfileAttributes', function() {
      it('should call updateProfileAttributes successfully', function(done) {
        //uncomment below and update the code to test updateProfileAttributes
        //instance.updateProfileAttributes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserAccount', function() {
      it('should call updateUserAccount successfully', function(done) {
        //uncomment below and update the code to test updateUserAccount
        //instance.updateUserAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadAvatarAsMultipart', function() {
      it('should call uploadAvatarAsMultipart successfully', function(done) {
        //uncomment below and update the code to test uploadAvatarAsMultipart
        //instance.uploadAvatarAsMultipart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('useEmergencyCode', function() {
      it('should call useEmergencyCode successfully', function(done) {
        //uncomment below and update the code to test useEmergencyCode
        //instance.useEmergencyCode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
