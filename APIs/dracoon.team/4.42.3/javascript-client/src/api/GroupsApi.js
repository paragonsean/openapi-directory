/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeGroupMembersRequest from '../model/ChangeGroupMembersRequest';
import CreateGroupRequest from '../model/CreateGroupRequest';
import ErrorResponse from '../model/ErrorResponse';
import Group from '../model/Group';
import GroupList from '../model/GroupList';
import GroupUserList from '../model/GroupUserList';
import LastAdminGroupRoomList from '../model/LastAdminGroupRoomList';
import RoleList from '../model/RoleList';
import RoomTreeDataList from '../model/RoomTreeDataList';
import UpdateGroupRequest from '../model/UpdateGroupRequest';

/**
* Groups service.
* @module api/GroupsApi
* @version 4.42.3
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addGroupMembers operation.
     * @callback module:api/GroupsApi~addGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group members
     * ### Description: Add members to a group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.  ### Postcondition:  New members are added to the group.  ### Further Information: Batch function.   The newly provided members will be added to the existing ones.
     * @param {Number} groupId Group ID
     * @param {module:model/ChangeGroupMembersRequest} changeGroupMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~addGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    addGroupMembers(groupId, changeGroupMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = changeGroupMembersRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling addGroupMembers");
      }
      // verify the required parameter 'changeGroupMembersRequest' is set
      if (changeGroupMembersRequest === undefined || changeGroupMembersRequest === null) {
        throw new Error("Missing the required parameter 'changeGroupMembersRequest' when calling addGroupMembers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroup operation.
     * @callback module:api/GroupsApi~createGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new user group
     * ### Description: Create a new user group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.  ### Postcondition:  A new user group is created.  ### Further Information: * If a group should **NOT** expire, leave `expireAt` empty. * Group names are limited to **150** characters * Forbidden characters in group name: [`<`, `>`] 
     * @param {module:model/CreateGroupRequest} createGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~createGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    createGroup(createGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createGroupRequest;
      // verify the required parameter 'createGroupRequest' is set
      if (createGroupRequest === undefined || createGroupRequest === null) {
        throw new Error("Missing the required parameter 'createGroupRequest' when calling createGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v4/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroup operation.
     * @callback module:api/GroupsApi~removeGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user group
     * ### Description: Delete a user group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete groups</span> required.  ### Postcondition:  User group is deleted.  ### Further Information: None.
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~removeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroup(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupMembers operation.
     * @callback module:api/GroupsApi~removeGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove group members
     * ### Description:   Remove group members.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.  ### Postcondition:  Provided users are removed from the user group.  ### Further Information: Batch function.   The provided users are removed from the user group. Maximum number of users to remove in one request is 200.
     * @param {Number} groupId Group ID
     * @param {module:model/ChangeGroupMembersRequest} changeGroupMembersRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~removeGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    removeGroupMembers(groupId, changeGroupMembersRequest, opts, callback) {
      opts = opts || {};
      let postBody = changeGroupMembersRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling removeGroupMembers");
      }
      // verify the required parameter 'changeGroupMembersRequest' is set
      if (changeGroupMembersRequest === undefined || changeGroupMembersRequest === null) {
        throw new Error("Missing the required parameter 'changeGroupMembersRequest' when calling removeGroupMembers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestGroup operation.
     * @callback module:api/GroupsApi~requestGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user group
     * ### Description:   Retrieve detailed information about a user group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.  ### Postcondition:  User group is returned.  ### Further Information: None.
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    requestGroup(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling requestGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestGroupMembers operation.
     * @callback module:api/GroupsApi~requestGroupMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupUserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request group member users or / and users who can become a member
     * ### Description:   Retrieve a list of group member users or / and users who can become a member.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.  ### Postcondition:  List of users is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isMember:eq:false|user:cn:searchString`   Get all users that are **NOT** in this group **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` | | `isMember` | Filter group members | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |  </details>
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestGroupMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupUserList}
     */
    requestGroupMembers(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling requestGroupMembers");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupUserList;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestGroupRoles operation.
     * @callback module:api/GroupsApi~requestGroupRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of roles assigned to the group
     * ### Description:   Retrieve a list of all roles granted to a group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.  ### Postcondition:  List of granted roles is returned.  ### Further Information: None.
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestGroupRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleList}
     */
    requestGroupRoles(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling requestGroupRoles");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleList;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestGroupRooms operation.
     * @callback module:api/GroupsApi~requestGroupRoomsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomTreeDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request rooms granted to the group or / and rooms that can be granted
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.10.0</h3>  ### Description:   Retrieves a list of rooms granted to the group and / or that can be granted.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.  ### Postcondition:  List of rooms is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isGranted:eq:false|name:cn:searchString`   Get all rooms where the group is **NOT** granted **AND** whose name is like `searchString`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `name` | Room name filter | `cn` | Room name contains value. | `search String` | | `isGranted` | Filter rooms which the group is (not) granted | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` | | `effectivePerm` | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`:  DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `true` |  </details>
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestGroupRoomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomTreeDataList}
     */
    requestGroupRooms(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling requestGroupRooms");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoomTreeDataList;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/rooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestGroups operation.
     * @callback module:api/GroupsApi~requestGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of user groups
     * ### Description:   Returns a list of user groups.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read groups</span> required.  ### Postcondition:  List of user groups is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:cn:searchString`   Filter by group name containing `searchString`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `name` | Group name filter | `cn` | Group name contains value. | `search String` | | `hasRole` | (**`NEW`**) Group role filter<br>For more information about roles check **`GET /roles`** API | `eq` | Group role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _\"manage\"_ permission</li></ul> |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:asc|expireAt:desc`   Sort by `name` ascending **AND** by `expireAt` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Group name | | `createdAt` | Creation date | | `expireAt` | Expiration date | | `cntUsers` | Amount of users |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupList}
     */
    requestGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupList;
      return this.apiClient.callApi(
        '/v4/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLastAdminRoomsGroups operation.
     * @callback module:api/GroupsApi~requestLastAdminRoomsGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastAdminGroupRoomList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request rooms where the group is defined as last admin group
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description:   Retrieve a list of all rooms where the group is defined as last admin group.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.  ### Postcondition:  List of rooms is returned.   ### Further Information: An empty list is returned if no rooms were found where the group is defined as last admin group.
     * @param {Number} groupId Group ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~requestLastAdminRoomsGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastAdminGroupRoomList}
     */
    requestLastAdminRoomsGroups(groupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling requestLastAdminRoomsGroups");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LastAdminGroupRoomList;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}/last_admin_rooms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGroup operation.
     * @callback module:api/GroupsApi~updateGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user group's metadata
     * ### Description:   Update user group's metadata .  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change groups</span> required.  ### Postcondition:  User group's metadata is changed.  ### Further Information: * If a group should **NOT** expire, leave `expireAt` empty. * Group names are limited to **150** characters * **All** characters are allowed.
     * @param {Number} groupId Group ID
     * @param {module:model/UpdateGroupRequest} updateGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/GroupsApi~updateGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    updateGroup(groupId, updateGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateGroupRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling updateGroup");
      }
      // verify the required parameter 'updateGroupRequest' is set
      if (updateGroupRequest === undefined || updateGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateGroupRequest' when calling updateGroup");
      }

      let pathParams = {
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v4/groups/{group_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
