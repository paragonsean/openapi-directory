/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChunkUploadResponse from '../model/ChunkUploadResponse';
import CompleteUploadRequest from '../model/CompleteUploadRequest';
import ErrorResponse from '../model/ErrorResponse';
import Node from '../model/Node';

/**
* Uploads service.
* @module api/UploadsApi
* @version 4.42.3
*/
export default class UploadsApi {

    /**
    * Constructs a new UploadsApi. 
    * @alias module:api/UploadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelFileUploadByToken operation.
     * @callback module:api/UploadsApi~cancelFileUploadByTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel file upload
     * ### Description: Cancel file upload.  ### Precondition: Valid upload token.  ### Postcondition: Upload canceled, token invalidated and all already transfered chunks removed.  ### Further Information: It is recommended to notify the API about cancelled uploads if possible.
     * @param {String} token Upload token
     * @param {module:api/UploadsApi~cancelFileUploadByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelFileUploadByToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling cancelFileUploadByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/uploads/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeFileUploadByToken operation.
     * @callback module:api/UploadsApi~completeFileUploadByTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete file upload
     * ### Description: Finish uploading a file.  ### Precondition: Valid upload token.  ### Postcondition: File created.  ### Further Information: The provided file name might be changed in accordance with the resolution strategy:  * **autorename**: changes the file name and adds a number to avoid conflicts. * **overwrite**: deletes any old file with the same file name. * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.  Please ensure that all chunks have been transferred correctly before finishing the upload.  Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`
     * @param {String} token Upload token
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:model/CompleteUploadRequest} [completeUploadRequest] 
     * @param {module:api/UploadsApi~completeFileUploadByTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    completeFileUploadByToken(token, opts, callback) {
      opts = opts || {};
      let postBody = opts['completeUploadRequest'];
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling completeFileUploadByToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/uploads/{token}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileByTokenAsMultipart1 operation.
     * @callback module:api/UploadsApi~uploadFileByTokenAsMultipart1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * ### Description:   Upload a (chunk of a) file.  ### Precondition: Valid upload token.  ### Postcondition: Chunk uploaded.  ### Further Information: Range requests are supported.    Following `Content-Types` are supported by this API: * `multipart/form-data` * provided `Content-Type`  For both file upload types set the correct `Content-Type` header and body.    ### Examples:    * `multipart/form-data` ``` POST /api/v4/uploads/{token} HTTP/1.1  Header: ... Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW ...  Body: ------WebKitFormBoundary7MA4YWxkTrZu0gW Content-Disposition: form-data; name=\"file\"; filename=\"file.txt\" Content-Type: text/plain  Content of file.txt ------WebKitFormBoundary7MA4YWxkTrZu0gW-- ```  * any other `Content-Type`  ``` POST /api/v4/uploads/{token} HTTP/1.1  Header: ... Content-Type: { ... } ...  Body: raw content ``` 
     * @param {String} token Upload token
     * @param {File} file File
     * @param {Object} opts Optional parameters
     * @param {String} [contentRange] Content-Range   e.g. `bytes 0-999/3980`
     * @param {module:api/UploadsApi~uploadFileByTokenAsMultipart1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkUploadResponse}
     */
    uploadFileByTokenAsMultipart1(token, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling uploadFileByTokenAsMultipart1");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFileByTokenAsMultipart1");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Range': opts['contentRange']
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ChunkUploadResponse;
      return this.apiClient.callApi(
        '/v4/uploads/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
