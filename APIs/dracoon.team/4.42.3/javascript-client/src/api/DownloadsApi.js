/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';

/**
* Downloads service.
* @module api/DownloadsApi
* @version 4.42.3
*/
export default class DownloadsApi {

    /**
    * Constructs a new DownloadsApi. 
    * @alias module:api/DownloadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadAvatar operation.
     * @callback module:api/DownloadsApi~downloadAvatarCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download avatar
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Download avatar for given user ID and UUID.  ### Precondition: Valid UUID.  ### Postcondition: Stream is returned.  ### Further Information: None.
     * @param {Number} userId User ID
     * @param {String} uuid UUID of the avatar
     * @param {module:api/DownloadsApi~downloadAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    downloadAvatar(userId, uuid, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling downloadAvatar");
      }
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling downloadAvatar");
      }

      let pathParams = {
        'user_id': userId,
        'uuid': uuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v4/downloads/avatar/{user_id}/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileViaToken operation.
     * @callback module:api/DownloadsApi~downloadFileViaTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * ### Description: Download a file.  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.
     * @param {String} token Download token
     * @param {Object} opts Optional parameters
     * @param {String} [range] Range   e.g. `bytes=0-999`
     * @param {Boolean} [genericMimetype] Always return `application/octet-stream` instead of specific mimetype
     * @param {Boolean} [inline] Use Content-Disposition: `inline` instead of `attachment`
     * @param {module:api/DownloadsApi~downloadFileViaTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadFileViaToken(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling downloadFileViaToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'generic_mimetype': opts['genericMimetype'],
        'inline': opts['inline']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/downloads/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileViaToken1 operation.
     * @callback module:api/DownloadsApi~downloadFileViaToken1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file
     * ### Description: Download a file.  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.
     * @param {String} token Download token
     * @param {Object} opts Optional parameters
     * @param {String} [range] Range   e.g. `bytes=0-999`
     * @param {Boolean} [genericMimetype] Always return `application/octet-stream` instead of specific mimetype
     * @param {Boolean} [inline] Use Content-Disposition: `inline` instead of `attachment`
     * @param {module:api/DownloadsApi~downloadFileViaToken1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadFileViaToken1(token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling downloadFileViaToken1");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
        'generic_mimetype': opts['genericMimetype'],
        'inline': opts['inline']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/downloads/{token}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadZipArchiveViaToken operation.
     * @callback module:api/DownloadsApi~downloadZipArchiveViaTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download ZIP archive
     * ### Description: Download multiple files in a ZIP archive.  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Create a download token with `POST /nodes/zip` API.
     * @param {String} token Download token
     * @param {module:api/DownloadsApi~downloadZipArchiveViaTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadZipArchiveViaToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling downloadZipArchiveViaToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/downloads/zip/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
