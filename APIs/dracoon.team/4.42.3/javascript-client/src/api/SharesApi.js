/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDownloadShareRequest from '../model/CreateDownloadShareRequest';
import CreateUploadShareRequest from '../model/CreateUploadShareRequest';
import DeleteDownloadSharesRequest from '../model/DeleteDownloadSharesRequest';
import DeleteUploadSharesRequest from '../model/DeleteUploadSharesRequest';
import DownloadShare from '../model/DownloadShare';
import DownloadShareLinkEmail from '../model/DownloadShareLinkEmail';
import DownloadShareList from '../model/DownloadShareList';
import ErrorResponse from '../model/ErrorResponse';
import ResetPassword400Response from '../model/ResetPassword400Response';
import UpdateDownloadShareRequest from '../model/UpdateDownloadShareRequest';
import UpdateDownloadSharesBulkRequest from '../model/UpdateDownloadSharesBulkRequest';
import UpdateUploadShareRequest from '../model/UpdateUploadShareRequest';
import UpdateUploadSharesBulkRequest from '../model/UpdateUploadSharesBulkRequest';
import UploadShare from '../model/UploadShare';
import UploadShareLinkEmail from '../model/UploadShareLinkEmail';
import UploadShareList from '../model/UploadShareList';

/**
* Shares service.
* @module api/SharesApi
* @version 4.42.3
*/
export default class SharesApi {

    /**
    * Constructs a new SharesApi. 
    * @alias module:api/SharesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDownloadShare operation.
     * @callback module:api/SharesApi~createDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Download Share
     * ### Description: Create a new Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share is created.  ### Further Information:  If the target node is a room: subordinary rooms are excluded from a Download Share.  * `name` is limited to **150** characters. * `notes` are limited to **255** characters. * `password` is limited to **1024** characters.  Use `POST /shares/downloads/{share_id}/email` API for sending emails.    Forbidden characters in passwords: [`&`, `'`, `<`, `>`]  Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters may not be displayed correctly in short messages (SMS).
     * @param {module:model/CreateDownloadShareRequest} createDownloadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~createDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadShare}
     */
    createDownloadShare(createDownloadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDownloadShareRequest;
      // verify the required parameter 'createDownloadShareRequest' is set
      if (createDownloadShareRequest === undefined || createDownloadShareRequest === null) {
        throw new Error("Missing the required parameter 'createDownloadShareRequest' when calling createDownloadShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DownloadShare;
      return this.apiClient.callApi(
        '/v4/shares/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createUploadShare operation.
     * @callback module:api/SharesApi~createUploadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new Upload Share
     * ### Description: Create a new Upload Share (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share is created.  ### Further Information:  * `name` is limited to **150** characters. * `notes` are limited to **255** characters. * `password` is limited to **1024** characters.  Forbidden characters in passwords: [`&`, `'`, `<`, `>`]    Use `POST /shares/uploads/{share_id}/email` API for sending emails.  Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters may not be displayed correctly in short messages (SMS).
     * @param {module:model/CreateUploadShareRequest} createUploadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~createUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadShare}
     */
    createUploadShare(createUploadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = createUploadShareRequest;
      // verify the required parameter 'createUploadShareRequest' is set
      if (createUploadShareRequest === undefined || createUploadShareRequest === null) {
        throw new Error("Missing the required parameter 'createUploadShareRequest' when calling createUploadShare");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadShare;
      return this.apiClient.callApi(
        '/v4/shares/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDownloadShares operation.
     * @callback module:api/SharesApi~deleteDownloadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Download Shares
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>  ### Functional Description: Delete multiple Download Shares.  ### Precondition: User with _\"manage download share\"_ permissions on target nodes.  ### Postcondition: Download Shares are deleted.  ### Further Information: Only the Download Shares are removed; the referenced files or containers persists.
     * @param {module:model/DeleteDownloadSharesRequest} deleteDownloadSharesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~deleteDownloadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDownloadShares(deleteDownloadSharesRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDownloadSharesRequest;
      // verify the required parameter 'deleteDownloadSharesRequest' is set
      if (deleteDownloadSharesRequest === undefined || deleteDownloadSharesRequest === null) {
        throw new Error("Missing the required parameter 'deleteDownloadSharesRequest' when calling deleteDownloadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/downloads', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUploadShares operation.
     * @callback module:api/SharesApi~deleteUploadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Upload Shares
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.21.0</h3>  ### Functional Description: Delete multiple Upload Shares (aka Upload Accounts).  ### Precondition: User has _\"manage upload share\"_ permissions on target containers.  ### Postcondition: Upload Shares are deleted.  ### Further Information: Only the Upload Shares are removed; already uploaded files and the target container persist.
     * @param {module:model/DeleteUploadSharesRequest} deleteUploadSharesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~deleteUploadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUploadShares(deleteUploadSharesRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteUploadSharesRequest;
      // verify the required parameter 'deleteUploadSharesRequest' is set
      if (deleteUploadSharesRequest === undefined || deleteUploadSharesRequest === null) {
        throw new Error("Missing the required parameter 'deleteUploadSharesRequest' when calling deleteUploadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/uploads', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDownloadShare operation.
     * @callback module:api/SharesApi~removeDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Download Share
     * ### Description: Delete a Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share is deleted.  ### Further Information: Only the Download Share is removed; the referenced file or container persists.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~removeDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDownloadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling removeDownloadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/downloads/{share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUploadShare operation.
     * @callback module:api/SharesApi~removeUploadShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Upload Share
     * ### Description: Delete an Upload Share (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share is deleted.  ### Further Information: Only the Upload Share is removed; already uploaded files and the target container persist.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~removeUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUploadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling removeUploadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/uploads/{share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDownloadShare operation.
     * @callback module:api/SharesApi~requestDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Download Share
     * ### Description:   Retrieve detailed information about one Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share is returned  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadShare}
     */
    requestDownloadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling requestDownloadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadShare;
      return this.apiClient.callApi(
        '/v4/shares/downloads/{share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDownloadShareQr operation.
     * @callback module:api/SharesApi~requestDownloadShareQrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Download Share via QR Code
     * ### Description:   Retrieve detailed information about one Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share is returned  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestDownloadShareQrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadShare}
     */
    requestDownloadShareQr(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling requestDownloadShareQr");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadShare;
      return this.apiClient.callApi(
        '/v4/shares/downloads/{share_id}/qr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDownloadShares operation.
     * @callback module:api/SharesApi~requestDownloadSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of Download Shares
     * ### Description:   Retrieve a list of Download Shares.  ### Precondition: Authenticated user.  ### Postcondition: List of available Download Shares is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes.  Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:cn:searchString_1|createdBy:cn:searchString_2` Filter by file name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `name` | Alias or node name filter | `cn` | Alias or node name contains value. | `search String` | | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` | | `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` | | `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` | | `nodeId` | Source node ID | `eq` | Source node (room, folder, file) ID equals value. | `positive Integer` | | `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` | | `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`userId`</del>  | Creator user ID | `eq` | Creator user ID equals value. Use `createdById` instead | `positive Integer` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:asc|expireAt:desc`   Sort by `name` ascending **AND** by `expireAt` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Alias or node name | | `notifyCreator` | Notify creator on every download | | `expireAt` | Expiration date | | `createdAt` | Creation date | | `createdBy` | Creator first name, last name | | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> |  </details> 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestDownloadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadShareList}
     */
    requestDownloadShares(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadShareList;
      return this.apiClient.callApi(
        '/v4/shares/downloads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUploadShare operation.
     * @callback module:api/SharesApi~requestUploadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Upload Share
     * ### Description:   Retrieve detailed information about one Upload Share (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share is returned.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadShare}
     */
    requestUploadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling requestUploadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadShare;
      return this.apiClient.callApi(
        '/v4/shares/uploads/{share_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUploadShareQr operation.
     * @callback module:api/SharesApi~requestUploadShareQrCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Upload Share via QR Code
     * ### Description:   Retrieve detailed information about one Upload Share (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share is returned.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestUploadShareQrCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadShare}
     */
    requestUploadShareQr(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling requestUploadShareQr");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadShare;
      return this.apiClient.callApi(
        '/v4/shares/uploads/{share_id}/qr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUploadShares operation.
     * @callback module:api/SharesApi~requestUploadSharesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of Upload Shares
     * ### Description:   Retrieve a list of Upload Shares (aka File Requests).  ### Precondition: Authenticated user.  ### Postcondition: List of available Upload Shares is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical (**AND**). createdBy and updatedBy searches several user-related attributes. Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:cn:searchString_1|createdBy:cn:searchString_2`   Filter by alias name contains `searchString_1` **AND** creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains `searchString_2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `name` | Alias name filter | `cn` | Alias name contains value. | `search String` | | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `createdBy` | Creator info filter | `cn, eq` | Creator info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` | | `createdById` | Creator ID filter | `eq` | Creator ID equals value. | `positive Integer` | | `accessKey` | Share access key filter | `cn` | Share access key contains values. | `search String` | | `userId` | Creator user ID | `eq` | Creator user ID equals value. | `positive Integer` | | `targetId` | Target node ID | `eq` | Target node (room, folder) ID equals value. | `positive Integer` | | `updatedBy` | Modifier info filter | `cn, eq` | Modifier info (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) contains value. | `search String` | | `updatedById` | Modifier ID filter | `eq` | Modifier ID equals value. | `positive Integer` |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`targetId`</del> | Target node ID | `cn` | Target node (room, folder) ID equals value. | `positive Integer` | | <del>`userId` </del>| Creator user ID | `eq` | Creator user ID equals value. Use `createdById` instead. | `positive Integer` |  </details>  ---  Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:asc|expireAt:desc`   Sort by `name` ascending **AND** by `expireAt` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Alias name | | `notifyCreator` | Notify creator on every upload | | `expireAt` | Expiration date | | `createdAt` | Creation date | | `createdBy` | Creator first name, last name |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~requestUploadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadShareList}
     */
    requestUploadShares(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadShareList;
      return this.apiClient.callApi(
        '/v4/shares/uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDownloadShareLinkViaEmail operation.
     * @callback module:api/SharesApi~sendDownloadShareLinkViaEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an existing Download Share link via email
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Send an email to specific recipients for existing Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share link successfully sent.  ### Further Information:  * Forbidden characters in the email body: [`<`, `>`] 
     * @param {Number} shareId Share ID
     * @param {module:model/DownloadShareLinkEmail} downloadShareLinkEmail 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~sendDownloadShareLinkViaEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendDownloadShareLinkViaEmail(shareId, downloadShareLinkEmail, opts, callback) {
      opts = opts || {};
      let postBody = downloadShareLinkEmail;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling sendDownloadShareLinkViaEmail");
      }
      // verify the required parameter 'downloadShareLinkEmail' is set
      if (downloadShareLinkEmail === undefined || downloadShareLinkEmail === null) {
        throw new Error("Missing the required parameter 'downloadShareLinkEmail' when calling sendDownloadShareLinkViaEmail");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/downloads/{share_id}/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendUploadShareLinkViaEmail operation.
     * @callback module:api/SharesApi~sendUploadShareLinkViaEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send an existing Upload Share link via email
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Send an email to specific recipients for existing Upload Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share link successfully sent.  ### Further Information:  * Forbidden characters in the email body: [`<`, `>`] 
     * @param {Number} shareId Share ID
     * @param {module:model/UploadShareLinkEmail} uploadShareLinkEmail 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~sendUploadShareLinkViaEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sendUploadShareLinkViaEmail(shareId, uploadShareLinkEmail, opts, callback) {
      opts = opts || {};
      let postBody = uploadShareLinkEmail;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling sendUploadShareLinkViaEmail");
      }
      // verify the required parameter 'uploadShareLinkEmail' is set
      if (uploadShareLinkEmail === undefined || uploadShareLinkEmail === null) {
        throw new Error("Missing the required parameter 'uploadShareLinkEmail' when calling sendUploadShareLinkViaEmail");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/uploads/{share_id}/email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDownloadShare operation.
     * @callback module:api/SharesApi~updateDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Download Share
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Update an existing Download Share.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Share is successfully updated.  ### Further Information: * `name` is limited to **150** characters. * `notes` are limited to **255** characters. * `password` is limited to **1024** characters.  Forbidden characters in passwords: [`&`, `'`, `<`, `>`]  Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters may not be displayed correctly in short messages (SMS).
     * @param {Number} shareId Share ID
     * @param {module:model/UpdateDownloadShareRequest} updateDownloadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~updateDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadShare}
     */
    updateDownloadShare(shareId, updateDownloadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDownloadShareRequest;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling updateDownloadShare");
      }
      // verify the required parameter 'updateDownloadShareRequest' is set
      if (updateDownloadShareRequest === undefined || updateDownloadShareRequest === null) {
        throw new Error("Missing the required parameter 'updateDownloadShareRequest' when calling updateDownloadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DownloadShare;
      return this.apiClient.callApi(
        '/v4/shares/downloads/{share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDownloadShares operation.
     * @callback module:api/SharesApi~updateDownloadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a list of Download Shares
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description: Update a list of existing Download Shares.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span> permissions on target node.  ### Postcondition: Download Shares are successfully updated.  ### Further Information: Maximum number of shares is 200
     * @param {module:model/UpdateDownloadSharesBulkRequest} updateDownloadSharesBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~updateDownloadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDownloadShares(updateDownloadSharesBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDownloadSharesBulkRequest;
      // verify the required parameter 'updateDownloadSharesBulkRequest' is set
      if (updateDownloadSharesBulkRequest === undefined || updateDownloadSharesBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateDownloadSharesBulkRequest' when calling updateDownloadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/downloads', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUploadShare operation.
     * @callback module:api/SharesApi~updateUploadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Upload Share
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Update existing Upload Share (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Share successfully updated.  ### Further Information:  * `name` is limited to **150** characters. * `notes` are limited to **255** characters. * `password` is limited to **1024** characters.  Forbidden characters in passwords: [`&`, `'`, `<`, `>`]  Please keep in mind that due to various restrictions of different telecommunication providers, non-ASCII characters may not be displayed correctly in short messages (SMS).
     * @param {Number} shareId Share ID
     * @param {module:model/UpdateUploadShareRequest} updateUploadShareRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~updateUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadShare}
     */
    updateUploadShare(shareId, updateUploadShareRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUploadShareRequest;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling updateUploadShare");
      }
      // verify the required parameter 'updateUploadShareRequest' is set
      if (updateUploadShareRequest === undefined || updateUploadShareRequest === null) {
        throw new Error("Missing the required parameter 'updateUploadShareRequest' when calling updateUploadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadShare;
      return this.apiClient.callApi(
        '/v4/shares/uploads/{share_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUploadShares operation.
     * @callback module:api/SharesApi~updateUploadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update List of Upload Shares
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description: Update a list of existing Upload Shares (aka File Request).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span> permissions on target container.  ### Postcondition: Upload Shares successfully updated.  ### Further Information: Maximum number of shares is 200
     * @param {module:model/UpdateUploadSharesBulkRequest} updateUploadSharesBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SharesApi~updateUploadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUploadShares(updateUploadSharesBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUploadSharesBulkRequest;
      // verify the required parameter 'updateUploadSharesBulkRequest' is set
      if (updateUploadSharesBulkRequest === undefined || updateUploadSharesBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateUploadSharesBulkRequest' when calling updateUploadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/shares/uploads', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
