/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributesResponse from '../model/AttributesResponse';
import CreateWebhookRequest from '../model/CreateWebhookRequest';
import Customer from '../model/Customer';
import CustomerAttributes from '../model/CustomerAttributes';
import CustomerList from '../model/CustomerList';
import ErrorResponse from '../model/ErrorResponse';
import EventTypeList from '../model/EventTypeList';
import NewCustomerRequest from '../model/NewCustomerRequest';
import NewCustomerResponse from '../model/NewCustomerResponse';
import ResetPassword400Response from '../model/ResetPassword400Response';
import UpdateCustomerRequest from '../model/UpdateCustomerRequest';
import UpdateCustomerResponse from '../model/UpdateCustomerResponse';
import UpdateWebhookRequest from '../model/UpdateWebhookRequest';
import UserList from '../model/UserList';
import Webhook from '../model/Webhook';
import WebhookList from '../model/WebhookList';

/**
* Provisioning service.
* @module api/ProvisioningApi
* @version 4.42.3
*/
export default class ProvisioningApi {

    /**
    * Constructs a new ProvisioningApi. 
    * @alias module:api/ProvisioningApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCustomer operation.
     * @callback module:api/ProvisioningApi~createCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create customer
     * ### Description: Create a new customer.  ### Precondition: Authentication with `X-Sds-Service-Token` required.    ### Postcondition: A new customer is created.  ### Further Information: If no company name is set, first letter of the first name separated by dot followed by last name of the first administrator is used (e.g. `J.Doe`).   Max quota has to be at least `1 MB` (= `1.048.576 B`).  If `basic` authentication is enabled, the first administrator will get `basic` authentication by default.   To create a first administrator without `basic` authentication it **MUST** be disabled explicitly.    Forbidden characters in passwords: [`&`, `'`, `<`, `>`]  ### Authentication Method Options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Authentication Method | Option Key | Option Value | | :--- | :--- | :--- | | `basic` / `sql` | `username` | Unique user identifier | | `active_directory` | `ad_config_id` (optional) | Active Directory configuration ID | |  | `username` | Active Directory username according to authentication setting `userFilter` | | `radius` | `username` | RADIUS username | | `openid` | `openid_config_id` (optional) | OpenID Connect configuration ID | |  | `username` | OpenID Connect username according to authentication setting `mappingClaim` |  </details> 
     * @param {module:model/NewCustomerRequest} newCustomerRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~createCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewCustomerResponse}
     */
    createCustomer(newCustomerRequest, opts, callback) {
      opts = opts || {};
      let postBody = newCustomerRequest;
      // verify the required parameter 'newCustomerRequest' is set
      if (newCustomerRequest === undefined || newCustomerRequest === null) {
        throw new Error("Missing the required parameter 'newCustomerRequest' when calling createCustomer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewCustomerResponse;
      return this.apiClient.callApi(
        '/v4/provisioning/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTenantWebhook operation.
     * @callback module:api/ProvisioningApi~createTenantWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tenant webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Create a new webhook for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: Webhook is created for given event types.  ### Further Information: URL must begin with the `HTTPS` scheme. Webhook names are limited to 150 characters.  ### Available event types: <details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Name | Description | Scope | | :--- | :--- | :--- | | **`customer.created`** | Triggered when a new customer is created | Tenant Webhook | | **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook | | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |  </details>
     * @param {module:model/CreateWebhookRequest} createWebhookRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~createTenantWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    createTenantWebhook(createWebhookRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWebhookRequest;
      // verify the required parameter 'createWebhookRequest' is set
      if (createWebhookRequest === undefined || createWebhookRequest === null) {
        throw new Error("Missing the required parameter 'createWebhookRequest' when calling createTenantWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCustomer operation.
     * @callback module:api/ProvisioningApi~removeCustomerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove customer
     * ### Description: Delete a customer.  ### Precondition: Authentication with `X-Sds-Service-Token` required.  ### Postcondition: Customer is deleted.  ### Further Information: None.
     * @param {Number} customerId Customer ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~removeCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling removeCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeCustomerAttribute operation.
     * @callback module:api/ProvisioningApi~removeCustomerAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove customer attribute
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>  ### Description: Delete a custom customer attribute.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.  ### Postcondition: Custom customer attribute gets deleted.  ### Further Information: * Allowed characters for keys are: `[a-zA-Z0-9_-]`   * Characters are **case-insensitive**.
     * @param {Number} customerId Customer ID
     * @param {String} key Key
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~removeCustomerAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeCustomerAttribute(customerId, key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling removeCustomerAttribute");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeCustomerAttribute");
      }

      let pathParams = {
        'customer_id': customerId,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}/customerAttributes/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTenantWebhook operation.
     * @callback module:api/ProvisioningApi~removeTenantWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove tenant webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Delete a webhook for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: Webhook is deleted.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~removeTenantWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeTenantWebhook(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling removeTenantWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks/{webhook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomer operation.
     * @callback module:api/ProvisioningApi~requestCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get customer
     * ### Description:   Receive details of a selected customer.  ### Precondition: Authentication with `X-Sds-Service-Token` required.  ### Postcondition: Customer details are returned.  ### Further Information: None.
     * @param {Number} customerId Customer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Boolean} [includeAttributes] Include custom customer attributes.
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    requestCustomer(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling requestCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        'include_attributes': opts['includeAttributes']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomerAttributes operation.
     * @callback module:api/ProvisioningApi~requestCustomerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request customer attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>  ### Description:   Retrieve a list of customer attributes.  ### Precondition: Authentication with `X-Sds-Service-Token` required.   Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read all customers</span> required.  ### Postcondition: List of attributes is returned.  ### Further Information:  ### Filtering: Filters are case insensitive.   All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `key:cn:searchString_1|value:cn:searchString_2`   Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `key` | Customer attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` | | `value` | Customer attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `key:asc|value:desc`   Sort by `key` ascending **AND** by `value` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `key` | Customer attribute key | | `value` | Customer attribute value |  </details>
     * @param {Number} customerId Customer ID
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestCustomerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributesResponse}
     */
    requestCustomerAttributes(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling requestCustomerAttributes");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributesResponse;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}/customerAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomerUsers operation.
     * @callback module:api/ProvisioningApi~requestCustomerUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of customer users
     * ### Description:   Receive a list of users associated with a certain customer.  ### Precondition: Authentication with `X-Sds-Service-Token` required.  ### Postcondition: List of customer users is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Except for `login`, `firstName` and  `lastName` - these are connected via logical disjunction (**OR**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `login:cn:searchString_1|firstName:cn:searchString_2|lockStatus:eq:2`   Filter users by login contains `searchString_1` **OR** firstName contains `searchString_2` **AND** those who are **NOT** locked.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `email` | Email filter | `eq`, `cn` | Email contains value. | `search String` | | `userName` | User name filter | `eq`, `cn` | UserName contains value. | `search String` | | `firstName` | User first name filter | `cn` | User first name contains value. | `search String` | | `lastName` | User last name filter | `cn` | User last name contains value. | `search String` | | `isLocked` | User lock status filter | `eq` |  | `true or false` | | `effectiveRoles` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE roles<ul><li>`false`: DIRECT roles</li><li>`true`: DIRECT **AND** EFFECTIVE roles</li></ul>DIRECT means: e.g. user gets role **directly** granted from someone with _grant permission_ right.<br>EFFECTIVE means: e.g. user gets role through **group membership**. | `eq` |  | `true or false`<br>default: `false` | | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `phone` | Phone filter | `eq` | Phone equals value. | `search String` | | `isEncryptionEnabled` | Encryption status filter<ul><li>client-side encryption</li><li>private key possession</li></ul> | `eq` |  | `true or false` | | `hasRole` | (**`NEW`**) User role filter<br>Depends on **effectiveRoles**.<br>For more information about roles check **`GET /roles`** API | `eq`, `neq` | User role equals value. | <ul><li>`CONFIG_MANAGER` - Manages global configuration</li><li>`USER_MANAGER` - Manages users</li><li>`GROUP_MANAGER` - Manages user groups</li><li>`ROOM_MANAGER` - Manages top level rooms</li><li>`LOG_AUDITOR` - Reads audit logs</li><li>`NONMEMBER_VIEWER` - Views users and groups when having room _\"manage\"_ permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`lockStatus`</del> | User lock status filter | `eq` | User lock status equals value. | <ul><li>`0` - Locked</li><li>`1` - Web access allowed</li><li>`2` - Web and mobile access allowed</li></ul> | | <del>`login`</del> |  User login filter | `cn` | User login contains value. | `search String` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `firstName:asc|lastLoginSuccessAt:desc`   Sort by `firstName` ascending **AND** by `lastLoginSuccessAt` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `userName` | User name | | `email` | User email | | `firstName` | User first name | | `lastName` | User last name | | `isLocked` | User lock status | | `lastLoginSuccessAt` | Last successful login date | | `expireAt` | Expiration date | | `createdAt` | Creation date |  </details>  ### Deprecated sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | <del>`gender`</del> | Gender | | <del>`lockStatus`</del> | User lock status | | <del>`login`</del> | User login |  </details>
     * @param {Number} customerId Customer ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Boolean} [includeAttributes] Include custom user attributes.
     * @param {Boolean} [includeRoles] Include roles
     * @param {Boolean} [includeManageableRooms] Include hasManageableRooms (deprecated)
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestCustomerUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    requestCustomerUsers(customerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling requestCustomerUsers");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort'],
        'include_attributes': opts['includeAttributes'],
        'include_roles': opts['includeRoles'],
        'include_manageable_rooms': opts['includeManageableRooms']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomers operation.
     * @callback module:api/ProvisioningApi~requestCustomersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of customers
     * ### Description:   Receive a list of customers.  ### Precondition: Authentication with `X-Sds-Service-Token` required.  ### Postcondition: List of customers is returned.  ### Further Information: This list returns a maximum of **1000** entries.    ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `trialDaysLeft:le:10|userMax:le:100`   Get all customers with `10` trial days left **AND** user maximum **<=** `100`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `id` | Customer ID filter | `eq` | Customer ID equals value. | `positive Integer` | | `companyName` | Company name filter | `cn` | Company name contains value. | `search String` | | `customerContractType` | Customer contract type filter | `eq` | Customer contract type equals value. | <ul><li>`demo`</li><li>`free`</li><li>`pay`</li></ul> | | `trialDaysLeft` | Left trial days filter | `ge, le` | Left trial days are greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `trialDaysLeft:ge:5`&#124;`trialDaysLeft:le:10` | | `providerCustomerId` | Provider Customer ID filter | `cn, eq` | Provider Customer ID contains / equals value. | `search String` | | `quotaMax` | Maximum quota filter | `ge, le` | Maximum quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaMax:ge:1024`&#124;`quotaMax:le:1073741824` | `positive Integer` | | `quotaUsed` | Used quota filter | `ge, le` | Used quota is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `quotaUsed:ge:1024`&#124;`quotaUsed:le:1073741824` | `positive Integer` | | `userMax` | User maximum filter | `ge, le` | User maxiumum is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userMax:ge:10`&#124;`userMax:le:100` | `positive Integer` | | `userUsed` | Number of registered users filter | `ge, le` | Number of registered users is is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `userUsed:ge:10`&#124;`userUsed:le:100` | `positive Integer` | | `isLocked` | Lock status filter | `eq` |  | `true or false` | | `createdAt` | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `updatedAt` | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `lastLoginAt` | Last login date filter | `ge, le` | Last login date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `lastLoginAt:ge:2016-12-31`&#124;`lastLoginAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `userLogin` | User login filter | `eq` | User login name equals value.<br>Search user all logins e.g. `basic`, `active_directory`, `radius`. | `search String` | | `attributeKey` | Customer attribute key filter | `eq`, `nex` | Customer attribute key equals value / Customer attribute does **NOT** exist at customer | `search String` | | `attributeValue` | Customer attribute value filter | `eq` | Customer attribute value equals value. | `search String` |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`activationCode`</del> | Activation code filter | `cn, eq` | Activation code contains / equals value. | `search String` | | <del>`lockStatus`</del> | Lock status filter | `eq` |  | <ul><li>`0` - unlocked</li><li>`1` - locked</li></ul> |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `companyName:desc|userUsed:asc`   Sort by `companyName` descending **AND** `userUsed` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `companyName` | Company name | | `customerContractType` | Customer contract type | | `trialDaysLeft` | Number of remaining trial days (demo customers) | | `providerCustomerId` | Provider Customer ID | | `quotaMax` | Maximum quota | | `quotaUsed` | Currently used quota | | `userMax` | Maximum user number | | `userUsed` | Number of registered users | | `isLocked` | Lock status of customer | | `createdAt` | Creation date | | `updatedAt` | Last modification date | | `lastLoginAt` | Last login date of any user of this customer |  </details>  ### Deprecated sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | <del>`lockStatus`</del> | Lock status of customer |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Boolean} [includeAttributes] Include custom customer attributes.
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestCustomersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerList}
     */
    requestCustomers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort'],
        'include_attributes': opts['includeAttributes']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerList;
      return this.apiClient.callApi(
        '/v4/provisioning/customers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfEventTypesForTenant operation.
     * @callback module:api/ProvisioningApi~requestListOfEventTypesForTenantCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of event types
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a list of available event types.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: List of available event types is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestListOfEventTypesForTenantCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeList}
     */
    requestListOfEventTypesForTenant(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTypeList;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks/event_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfTenantWebhooks operation.
     * @callback module:api/ProvisioningApi~requestListOfTenantWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of tenant webhooks
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a list of webhooks for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: List of webhooks is returned.  ### Further Information:   Output is limited to **500** entries.   For more results please use filter criteria and paging (`offset` + `limit`).   `EncryptionInfo` is **NOT** provided.   Wildcard character is the asterisk character: **`*`**  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:cn:goo|createdAt:ge:2015-01-01`   Get webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`| | **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` | | **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` | | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc|isEnabled:asc`   Sort by `name` descending and `isEnabled` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`id`** | Webhook id | | **`name`** | Webhook name | | **`isEnabled`** | Webhook isEnabled | | **`createdAt`** | Creation date | | **`updatedAt`** | Last modification date | | **`expiration`** | Expiration date |  </details> 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestListOfTenantWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookList}
     */
    requestListOfTenantWebhooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookList;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestTenantWebhook operation.
     * @callback module:api/ProvisioningApi~requestTenantWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request tenant webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a specific webhook for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: Webhook is returned.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~requestTenantWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    requestTenantWebhook(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling requestTenantWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks/{webhook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetTenantWebhookLifetime operation.
     * @callback module:api/ProvisioningApi~resetTenantWebhookLifetimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset tenant webhook lifetime
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Reset the lifetime of a webhook for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: Lifetime of the webhook is reset.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~resetTenantWebhookLifetimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    resetTenantWebhookLifetime(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling resetTenantWebhookLifetime");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks/{webhook_id}/reset_lifetime', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setCustomerAttributes operation.
     * @callback module:api/ProvisioningApi~setCustomerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set customer attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.28.0</h3>  ### Description:   Set custom customer attributes.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.  ### Postcondition: Custom customer attributes gets set.  ### Further Information: Batch function.   All existing customer attributes will be deleted.    * Allowed characters for keys are: `[a-zA-Z0-9_-]`   * Characters are **case-insensitive**. 
     * @param {Number} customerId Customer ID
     * @param {module:model/CustomerAttributes} customerAttributes 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~setCustomerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    setCustomerAttributes(customerId, customerAttributes, opts, callback) {
      opts = opts || {};
      let postBody = customerAttributes;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling setCustomerAttributes");
      }
      // verify the required parameter 'customerAttributes' is set
      if (customerAttributes === undefined || customerAttributes === null) {
        throw new Error("Missing the required parameter 'customerAttributes' when calling setCustomerAttributes");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}/customerAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomer operation.
     * @callback module:api/ProvisioningApi~updateCustomerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCustomerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update customer
     * ### Description:   Change selected attributes of a customer.  ### Precondition: Authentication with `X-Sds-Service-Token` required.  ### Postcondition: Selected attributes of customer are updated.  ### Further Information: None.
     * @param {Number} customerId Customer ID
     * @param {module:model/UpdateCustomerRequest} updateCustomerRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~updateCustomerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCustomerResponse}
     */
    updateCustomer(customerId, updateCustomerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCustomerRequest;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }
      // verify the required parameter 'updateCustomerRequest' is set
      if (updateCustomerRequest === undefined || updateCustomerRequest === null) {
        throw new Error("Missing the required parameter 'updateCustomerRequest' when calling updateCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCustomerResponse;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCustomerAttributes operation.
     * @callback module:api/ProvisioningApi~updateCustomerAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or edit customer attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.4.0</h3>  ### Description:   Add or edit custom customer attributes. <br/><br/><span style=\"font-weight: bold; color: red;\"> &#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**</span><br/>  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> required.  ### Postcondition: Custom customer attributes get added or edited.  ### Further Information: Batch function.   If an entry exists before, it will be overwritten.    * Allowed characters for keys are: `[a-zA-Z0-9_-]`   * Characters are **case-insensitive**.
     * @param {Number} customerId Customer ID
     * @param {module:model/CustomerAttributes} customerAttributes 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~updateCustomerAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    updateCustomerAttributes(customerId, customerAttributes, opts, callback) {
      opts = opts || {};
      let postBody = customerAttributes;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomerAttributes");
      }
      // verify the required parameter 'customerAttributes' is set
      if (customerAttributes === undefined || customerAttributes === null) {
        throw new Error("Missing the required parameter 'customerAttributes' when calling updateCustomerAttributes");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Customer;
      return this.apiClient.callApi(
        '/v4/provisioning/customers/{customer_id}/customerAttributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTenantWebhook operation.
     * @callback module:api/ProvisioningApi~updateTenantWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tenant webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Update an existing webhook for the tenant scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage webhook</span> required.  ### Postcondition: Webhook is updated.  ### Further Information: URL must begin with the `HTTPS` scheme. Webhook names are limited to 150 characters.  ### Available event types:  <details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Name | Description | Scope | | :--- | :--- | :--- | | **`customer.created`** | Triggered when a new customer is created | Tenant Webhook | | **`customer.deleted`** | Triggered when a user is deleted | Tenant Webhook | | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Tenant Webhook |  </details>
     * @param {Number} webhookId Webhook ID
     * @param {module:model/UpdateWebhookRequest} updateWebhookRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsServiceToken] Service Authentication token
     * @param {module:api/ProvisioningApi~updateTenantWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    updateTenantWebhook(webhookId, updateWebhookRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWebhookRequest;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling updateTenantWebhook");
      }
      // verify the required parameter 'updateWebhookRequest' is set
      if (updateWebhookRequest === undefined || updateWebhookRequest === null) {
        throw new Error("Missing the required parameter 'updateWebhookRequest' when calling updateTenantWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Service-Token': opts['xSdsServiceToken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/provisioning/webhooks/{webhook_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
