/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ChangeNodeCommentRequest from '../model/ChangeNodeCommentRequest';
import ChunkUploadResponse from '../model/ChunkUploadResponse';
import Comment from '../model/Comment';
import CommentList from '../model/CommentList';
import CompleteS3FileUploadRequest from '../model/CompleteS3FileUploadRequest';
import CompleteUploadRequest from '../model/CompleteUploadRequest';
import ConfigRoomRequest from '../model/ConfigRoomRequest';
import CopyNodesRequest from '../model/CopyNodesRequest';
import CreateFileUploadRequest from '../model/CreateFileUploadRequest';
import CreateFileUploadResponse from '../model/CreateFileUploadResponse';
import CreateFolderRequest from '../model/CreateFolderRequest';
import CreateKeyPairRequest from '../model/CreateKeyPairRequest';
import CreateNodeCommentRequest from '../model/CreateNodeCommentRequest';
import CreateRoomRequest from '../model/CreateRoomRequest';
import DeleteDeletedNodesRequest from '../model/DeleteDeletedNodesRequest';
import DeleteNodesRequest from '../model/DeleteNodesRequest';
import DeletedNode from '../model/DeletedNode';
import DeletedNodeSummaryList from '../model/DeletedNodeSummaryList';
import DeletedNodeVersionsList from '../model/DeletedNodeVersionsList';
import DownloadTokenGenerateResponse from '../model/DownloadTokenGenerateResponse';
import EncryptRoomRequest from '../model/EncryptRoomRequest';
import ErrorResponse from '../model/ErrorResponse';
import FileKey from '../model/FileKey';
import FileVersionList from '../model/FileVersionList';
import GeneratePresignedUrlsRequest from '../model/GeneratePresignedUrlsRequest';
import LogEventList from '../model/LogEventList';
import MissingKeysResponse from '../model/MissingKeysResponse';
import MoveNodesRequest from '../model/MoveNodesRequest';
import Node from '../model/Node';
import NodeList from '../model/NodeList';
import NodeParentList from '../model/NodeParentList';
import PendingAssignmentList from '../model/PendingAssignmentList';
import PendingAssignmentsRequest from '../model/PendingAssignmentsRequest';
import PresignedUrlList from '../model/PresignedUrlList';
import RestoreDeletedNodesRequest from '../model/RestoreDeletedNodesRequest';
import RoomGroupList from '../model/RoomGroupList';
import RoomGroupsAddBatchRequest from '../model/RoomGroupsAddBatchRequest';
import RoomGroupsDeleteBatchRequest from '../model/RoomGroupsDeleteBatchRequest';
import RoomGuestUserAddRequest from '../model/RoomGuestUserAddRequest';
import RoomPolicies from '../model/RoomPolicies';
import RoomPoliciesRequest from '../model/RoomPoliciesRequest';
import RoomUserList from '../model/RoomUserList';
import RoomUsersAddBatchRequest from '../model/RoomUsersAddBatchRequest';
import RoomUsersDeleteBatchRequest from '../model/RoomUsersDeleteBatchRequest';
import RoomWebhookList from '../model/RoomWebhookList';
import S3FileUploadStatus from '../model/S3FileUploadStatus';
import S3TagIds from '../model/S3TagIds';
import S3TagList from '../model/S3TagList';
import UpdateFavoritesBulkRequest from '../model/UpdateFavoritesBulkRequest';
import UpdateFileRequest from '../model/UpdateFileRequest';
import UpdateFilesBulkRequest from '../model/UpdateFilesBulkRequest';
import UpdateFolderRequest from '../model/UpdateFolderRequest';
import UpdateRoomRequest from '../model/UpdateRoomRequest';
import UpdateRoomWebhookRequest from '../model/UpdateRoomWebhookRequest';
import UserFileKeySetBatchRequest from '../model/UserFileKeySetBatchRequest';
import UserKeyPairContainer from '../model/UserKeyPairContainer';
import ZipDownloadRequest from '../model/ZipDownloadRequest';

/**
* Nodes service.
* @module api/NodesApi
* @version 4.42.3
*/
export default class NodesApi {

    /**
    * Constructs a new NodesApi. 
    * @alias module:api/NodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFavorite operation.
     * @callback module:api/NodesApi~addFavoriteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark a node (room, folder or file) as favorite
     * ### Description:   Marks a node (room, folder or file) as favorite.  ### Precondition: Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).  ### Postcondition: A node gets marked as favorite.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~addFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    addFavorite(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling addFavorite");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRoomGuestUsers operation.
     * @callback module:api/NodesApi~addRoomGuestUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add guest users to a room
     * ### Description: Add guest users to a room  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role. <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Guest User Policy</span> needs to be enabled.   ### Postcondition: New or existing Guest-Users now have guest-permissions for this room  ### Further Information: Batch function.
     * @param {Number} roomId Room ID
     * @param {module:model/RoomGuestUserAddRequest} roomGuestUserAddRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~addRoomGuestUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRoomGuestUsers(roomId, roomGuestUserAddRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomGuestUserAddRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling addRoomGuestUsers");
      }
      // verify the required parameter 'roomGuestUserAddRequest' is set
      if (roomGuestUserAddRequest === undefined || roomGuestUserAddRequest === null) {
        throw new Error("Missing the required parameter 'roomGuestUserAddRequest' when calling addRoomGuestUsers");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/guest_users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelFileUpload operation.
     * @callback module:api/NodesApi~cancelFileUploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel file upload
     * ### Description: Cancel a (S3) file upload and destroy the upload channel.  ### Precondition: An upload channel has been created and user has to be the creator of the upload channel.  ### Postcondition: The upload channel is removed and all temporary uploaded data is purged.  ### Further Information: It is recommended to notify the API about cancelled uploads if possible.
     * @param {String} uploadId Upload channel ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~cancelFileUploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelFileUpload(uploadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling cancelFileUpload");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePendingAssignments operation.
     * @callback module:api/NodesApi~changePendingAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Handle user-room assignments per group
     * ### Description:   Handles a list of user-room assignments by groups that have **NOT** been approved yet   **WAITING** or **DENIED** assignments can be **ACCEPTED**.  ### Precondition: None.  ### Postcondition: User-room assignment is approved and the user gets access to the group.  ### Further Information: Room administrators should **SHOULD** handle pending assignments to provide access to rooms for other users.
     * @param {module:model/PendingAssignmentsRequest} pendingAssignmentsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~changePendingAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePendingAssignments(pendingAssignmentsRequest, opts, callback) {
      opts = opts || {};
      let postBody = pendingAssignmentsRequest;
      // verify the required parameter 'pendingAssignmentsRequest' is set
      if (pendingAssignmentsRequest === undefined || pendingAssignmentsRequest === null) {
        throw new Error("Missing the required parameter 'pendingAssignmentsRequest' when calling changePendingAssignments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/pending', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeFileUpload operation.
     * @callback module:api/NodesApi~completeFileUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.9.0</h3>  ### Use `uploads` API  ### Description: Finishes an upload and closes the corresponding upload channel.  ### Precondition: An upload channel has been created and data has been transmitted.  ### Postcondition: The upload is finished and the temporary file is moved to the productive environment.  ### Further Information: The provided file name might be changed in accordance with the resolution strategy:   * **autorename**: changes the file name and adds a number to avoid conflicts. * **overwrite**: deletes any old file with the same file name. * **fail**: returns an error; in this case, another `PUT` request with a different file name may be sent.  Please ensure that all chunks have been transferred correctly before finishing the upload.   Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `
     * @param {String} uploadId Upload channel ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:model/CompleteUploadRequest} [completeUploadRequest] 
     * @param {module:api/NodesApi~completeFileUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    completeFileUpload(uploadId, opts, callback) {
      opts = opts || {};
      let postBody = opts['completeUploadRequest'];
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling completeFileUpload");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeS3FileUpload operation.
     * @callback module:api/NodesApi~completeS3FileUploadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Finishes a S3 file upload and closes the corresponding upload channel.  ### Precondition: An upload channel has been created, data has been transmitted and user has to be the creator of the upload channel  ### Postcondition: Upload channel is closed. S3 multipart upload request is completed.  ### Further Information: Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`
     * @param {String} uploadId Upload channel ID
     * @param {module:model/CompleteS3FileUploadRequest} completeS3FileUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~completeS3FileUploadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeS3FileUpload(uploadId, completeS3FileUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = completeS3FileUploadRequest;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling completeS3FileUpload");
      }
      // verify the required parameter 'completeS3FileUploadRequest' is set
      if (completeS3FileUploadRequest === undefined || completeS3FileUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeS3FileUploadRequest' when calling completeS3FileUpload");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}/s3', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configureRoom operation.
     * @callback module:api/NodesApi~configureRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configure room
     * ### Description: Configure a room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Room's configuration is changed.  ### Further Information: Provided (or default) classification is taken from room when file gets uploaded without any classification.    To set `adminIds` or `adminGroupIds` the `inheritPermissions` value has to be `false`. Otherwise use: * `PUT /nodes/rooms/{room_id}/groups` * `PUT /nodes/rooms/{room_id}/users `    APIs.
     * @param {Number} roomId Room ID
     * @param {module:model/ConfigRoomRequest} configRoomRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~configureRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    configureRoom(roomId, configRoomRequest, opts, callback) {
      opts = opts || {};
      let postBody = configRoomRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling configureRoom");
      }
      // verify the required parameter 'configRoomRequest' is set
      if (configRoomRequest === undefined || configRoomRequest === null) {
        throw new Error("Missing the required parameter 'configRoomRequest' when calling configureRoom");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the copyNodes operation.
     * @callback module:api/NodesApi~copyNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copy node(s)
     * ### Description: Copies nodes (folder, file) to another parent.  ### Precondition: Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.  ### Postcondition: Nodes are copied to target parent.  ### Further Information: Nodes **MUST** be in same source parent.   **Rooms **CANNOT** be copied.**  Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {Number} nodeId Target parent node ID
     * @param {module:model/CopyNodesRequest} copyNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~copyNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    copyNodes(nodeId, copyNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = copyNodesRequest;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling copyNodes");
      }
      // verify the required parameter 'copyNodesRequest' is set
      if (copyNodesRequest === undefined || copyNodesRequest === null) {
        throw new Error("Missing the required parameter 'copyNodesRequest' when calling copyNodes");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/copy_to', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAndPreserveRoomRescueKeyPair operation.
     * @callback module:api/NodesApi~createAndPreserveRoomRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create key pair and preserve copy of old private key
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Create room rescue key pair and preserve copy of old private key.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Room rescue key pair is created.   Copy of old private key is preserved.  ### Further Information: You can submit your old private key, encrypted with your current password.   This allows migrating file keys encrypted with your old key pair to the new one.
     * @param {Number} roomId Room ID
     * @param {module:model/CreateKeyPairRequest} createKeyPairRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~createAndPreserveRoomRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAndPreserveRoomRescueKeyPair(roomId, createKeyPairRequest, opts, callback) {
      opts = opts || {};
      let postBody = createKeyPairRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling createAndPreserveRoomRescueKeyPair");
      }
      // verify the required parameter 'createKeyPairRequest' is set
      if (createKeyPairRequest === undefined || createKeyPairRequest === null) {
        throw new Error("Missing the required parameter 'createKeyPairRequest' when calling createAndPreserveRoomRescueKeyPair");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/keypairs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFileUploadChannel operation.
     * @callback module:api/NodesApi~createFileUploadChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateFileUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new file upload channel
     * ### Description: This endpoint creates a new upload channel which is the first step in any file upload workflow.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).  ### Postcondition: A new upload channel for a file is created.   Its ID and an upload token are returned.  ### Further Information: The upload ID is used for uploads with `X-Sds-Auth-Token` header, the upload token can be used for uploads without authentication header.  Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.  Notes are limited to **255** characters.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {module:model/CreateFileUploadRequest} createFileUploadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~createFileUploadChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateFileUploadResponse}
     */
    createFileUploadChannel(createFileUploadRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFileUploadRequest;
      // verify the required parameter 'createFileUploadRequest' is set
      if (createFileUploadRequest === undefined || createFileUploadRequest === null) {
        throw new Error("Missing the required parameter 'createFileUploadRequest' when calling createFileUploadChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateFileUploadResponse;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createFolder operation.
     * @callback module:api/NodesApi~createFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new folder
     * ### Description: Create a new folder.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in current room.  ### Postcondition: New folder is created.  ### Further Information: Folders **CANNOT** be created on top level (without parent element).   Notes are limited to **255** characters.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {module:model/CreateFolderRequest} createFolderRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~createFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    createFolder(createFolderRequest, opts, callback) {
      opts = opts || {};
      let postBody = createFolderRequest;
      // verify the required parameter 'createFolderRequest' is set
      if (createFolderRequest === undefined || createFolderRequest === null) {
        throw new Error("Missing the required parameter 'createFolderRequest' when calling createFolder");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/folders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNodeComment operation.
     * @callback module:api/NodesApi~createNodeCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create node comment
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description: Create a comment for a specific node.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.  ### Postcondition: Comment is created.  ### Further Information: Maximum allowed text length: **65535** characters.
     * @param {Number} nodeId Node ID
     * @param {module:model/CreateNodeCommentRequest} createNodeCommentRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~createNodeCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    createNodeComment(nodeId, createNodeCommentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createNodeCommentRequest;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling createNodeComment");
      }
      // verify the required parameter 'createNodeCommentRequest' is set
      if (createNodeCommentRequest === undefined || createNodeCommentRequest === null) {
        throw new Error("Missing the required parameter 'createNodeCommentRequest' when calling createNodeComment");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoom operation.
     * @callback module:api/NodesApi~createRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new room
     * ### Description: Creates a new room at the provided parent node.   Creation of top level rooms provided.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span> permissions in the parent room.  ### Postcondition: A new room is created.  ### Further Information:   Rooms may only have other rooms as parent.   Rooms on top level do **NOT** have any parent.   Rooms may have rooms as children on n hierarchy levels.   If permission inheritance is disabled, there **MUST** be at least one admin user / group (with neither the group nor the user having an expiration date).  Notes are limited to **255** characters.  Provided (or default) classification is taken from room when file gets uploaded without any classification.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `
     * @param {module:model/CreateRoomRequest} createRoomRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~createRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    createRoom(createRoomRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRoomRequest;
      // verify the required parameter 'createRoomRequest' is set
      if (createRoomRequest === undefined || createRoomRequest === null) {
        throw new Error("Missing the required parameter 'createRoomRequest' when calling createRoom");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/rooms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadZipArchive operation.
     * @callback module:api/NodesApi~downloadZipArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download files / folders as ZIP archive
     * ### Description:   Download multiple files in a ZIP archive.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.  ### Postcondition: Stream is returned.  ### Further Information: None.
     * @param {module:model/ZipDownloadRequest} zipDownloadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~downloadZipArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadZipArchive(zipDownloadRequest, opts, callback) {
      opts = opts || {};
      let postBody = zipDownloadRequest;
      // verify the required parameter 'zipDownloadRequest' is set
      if (zipDownloadRequest === undefined || zipDownloadRequest === null) {
        throw new Error("Missing the required parameter 'zipDownloadRequest' when calling downloadZipArchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/zip/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the emptyDeletedNodes operation.
     * @callback module:api/NodesApi~emptyDeletedNodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Empty recycle bin
     * ### Description:   Empty a recycle bin.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.  ### Postcondition: All files in the recycle bin are permanently removed.  ### Further Information: Actually removes the previously deleted files from the system.   **This action is irreversible.**
     * @param {Number} nodeId Room ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~emptyDeletedNodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    emptyDeletedNodes(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling emptyDeletedNodes");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/deleted_nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the encryptRoom operation.
     * @callback module:api/NodesApi~encryptRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Encrypt room
     * ### Description:   Activates the client-side encryption for a room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Encryption of room is activated.  ### Further Information: Only empty rooms at the top level may be encrypted.   This endpoint may also be used to disable encryption of an empty room.
     * @param {Number} roomId Room ID
     * @param {module:model/EncryptRoomRequest} encryptRoomRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~encryptRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    encryptRoom(roomId, encryptRoomRequest, opts, callback) {
      opts = opts || {};
      let postBody = encryptRoomRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling encryptRoom");
      }
      // verify the required parameter 'encryptRoomRequest' is set
      if (encryptRoomRequest === undefined || encryptRoomRequest === null) {
        throw new Error("Missing the required parameter 'encryptRoomRequest' when calling encryptRoom");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/encrypt', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDownloadUrl operation.
     * @callback module:api/NodesApi~generateDownloadUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadTokenGenerateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate download URL
     * ### Description: Create a download URL to retrieve a file without `X-Sds-Auth-Token` Header.  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.  ### Postcondition: Download token is generated and returned.  ### Further Information: The token is necessary to access `downloads` ressources.
     * @param {Number} fileId File ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~generateDownloadUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadTokenGenerateResponse}
     */
    generateDownloadUrl(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling generateDownloadUrl");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadTokenGenerateResponse;
      return this.apiClient.callApi(
        '/v4/nodes/files/{file_id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDownloadUrlForZipArchive operation.
     * @callback module:api/NodesApi~generateDownloadUrlForZipArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadTokenGenerateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate download URL for ZIP download
     * ### Description:   Create a download URL to retrieve several files in one ZIP archive.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.  ### Postcondition: Download URL is generated and returned.  ### Further Information: The token is necessary to access `downloads` resources.   ZIP download is only available for files and folders.
     * @param {module:model/ZipDownloadRequest} zipDownloadRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~generateDownloadUrlForZipArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadTokenGenerateResponse}
     */
    generateDownloadUrlForZipArchive(zipDownloadRequest, opts, callback) {
      opts = opts || {};
      let postBody = zipDownloadRequest;
      // verify the required parameter 'zipDownloadRequest' is set
      if (zipDownloadRequest === undefined || zipDownloadRequest === null) {
        throw new Error("Missing the required parameter 'zipDownloadRequest' when calling generateDownloadUrlForZipArchive");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DownloadTokenGenerateResponse;
      return this.apiClient.callApi(
        '/v4/nodes/zip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePresignedUrlsFiles operation.
     * @callback module:api/NodesApi~generatePresignedUrlsFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PresignedUrlList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate presigned URLs for S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Generate presigned URLs for S3 file upload.  ### Precondition: An upload channel has been created and user has to be the creator of the upload channel.  ### Postcondition: List of presigned URLs is returned.  ### Further Information: The size for each part must be >= 5 MB, except for the last part.   The part number of the first part in S3 is 1 (not 0).   Use HTTP method `PUT` for uploading bytes via presigned URL.
     * @param {String} uploadId Upload channel ID
     * @param {module:model/GeneratePresignedUrlsRequest} generatePresignedUrlsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~generatePresignedUrlsFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PresignedUrlList}
     */
    generatePresignedUrlsFiles(uploadId, generatePresignedUrlsRequest, opts, callback) {
      opts = opts || {};
      let postBody = generatePresignedUrlsRequest;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling generatePresignedUrlsFiles");
      }
      // verify the required parameter 'generatePresignedUrlsRequest' is set
      if (generatePresignedUrlsRequest === undefined || generatePresignedUrlsRequest === null) {
        throw new Error("Missing the required parameter 'generatePresignedUrlsRequest' when calling generatePresignedUrlsFiles");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PresignedUrlList;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}/s3_urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the handleRoomWebhookAssignments operation.
     * @callback module:api/NodesApi~handleRoomWebhookAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomWebhookList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign or unassign webhooks to room
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Handle room webhook assignments.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: List of webhooks is returned.  ### Further Information: None.  ### Available event types:  <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Name | Description | Scope | | :--- | :--- | :--- | | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook | | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook | | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook | | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook | | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook | | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook | | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook | | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook | | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook | | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook | | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook | | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |  </details>
     * @param {Number} roomId Room ID
     * @param {module:model/UpdateRoomWebhookRequest} updateRoomWebhookRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~handleRoomWebhookAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomWebhookList}
     */
    handleRoomWebhookAssignments(roomId, updateRoomWebhookRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoomWebhookRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling handleRoomWebhookAssignments");
      }
      // verify the required parameter 'updateRoomWebhookRequest' is set
      if (updateRoomWebhookRequest === undefined || updateRoomWebhookRequest === null) {
        throw new Error("Missing the required parameter 'updateRoomWebhookRequest' when calling handleRoomWebhookAssignments");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoomWebhookList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/webhooks', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveNodes operation.
     * @callback module:api/NodesApi~moveNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move node(s)
     * ### Description:   Moves nodes (folder, file) to another parent.  ### Precondition: Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions in the source parent and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the target parent node.  ### Postcondition: Nodes are moved to target parent.  ### Further Information: Nodes **MUST** be in same source parent.   **Rooms **CANNOT** be moved.**  Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {Number} nodeId Target parent node ID
     * @param {module:model/MoveNodesRequest} moveNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~moveNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    moveNodes(nodeId, moveNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = moveNodesRequest;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling moveNodes");
      }
      // verify the required parameter 'moveNodesRequest' is set
      if (moveNodesRequest === undefined || moveNodesRequest === null) {
        throw new Error("Missing the required parameter 'moveNodesRequest' when calling moveNodes");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/move_to', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDeletedNodes operation.
     * @callback module:api/NodesApi~removeDeletedNodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove nodes from recycle bin
     * ### Description: Permanently remove a list of nodes from the recycle bin.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete recycle bin</span> permissions in parent room.  ### Postcondition: All provided nodes are removed.  ### Further Information: The removal of deleted nodes from the recycle bin is irreversible.
     * @param {module:model/DeleteDeletedNodesRequest} deleteDeletedNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeDeletedNodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeDeletedNodes(deleteDeletedNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDeletedNodesRequest;
      // verify the required parameter 'deleteDeletedNodesRequest' is set
      if (deleteDeletedNodesRequest === undefined || deleteDeletedNodesRequest === null) {
        throw new Error("Missing the required parameter 'deleteDeletedNodesRequest' when calling removeDeletedNodes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/deleted_nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeFavorite operation.
     * @callback module:api/NodesApi~removeFavoriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmark a node (room, folder or file) as favorite
     * ### Description: Unmarks a node (room, folder or file) as favorite.  ### Precondition: Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).  ### Postcondition: A node gets unmarked as favorite.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeFavorite(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling removeFavorite");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNode operation.
     * @callback module:api/NodesApi~removeNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove node
     * ### Description: Delete node (room, folder or file).  ### Precondition: Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).  ### Postcondition: Node gets deleted.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNode(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling removeNode");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNodeComment operation.
     * @callback module:api/NodesApi~removeNodeCommentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove node comment
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description: Delete an existing comment for a specific node.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment **OR** <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> in auth parent room.  ### Postcondition: Comment is deleted.  ### Further Information: None.
     * @param {Number} commentId Comment ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeNodeCommentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNodeComment(commentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling removeNodeComment");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/comments/{comment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeNodes operation.
     * @callback module:api/NodesApi~removeNodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove nodes
     * ### Description: Delete nodes (room, folder or file).  ### Precondition: Authenticated user with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; delete</span> permissions on supplied nodes (for folders or files) or on superordinated node (for rooms).  ### Postcondition: Nodes are deleted.  ### Further Information: Nodes **MUST** be in same parent.
     * @param {module:model/DeleteNodesRequest} deleteNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeNodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeNodes(deleteNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteNodesRequest;
      // verify the required parameter 'deleteNodesRequest' is set
      if (deleteNodesRequest === undefined || deleteNodesRequest === null) {
        throw new Error("Missing the required parameter 'deleteNodesRequest' when calling removeNodes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRoomRescueKeyPair operation.
     * @callback module:api/NodesApi~removeRoomRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove rooms's rescue key pair
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Delete room rescue key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is removed (cf. further information below).  ### Further Information: Please set a new room rescue key pair first and re-encrypt file keys with it.   If no version is set, deleted key pair with lowest preference value.   Although, `version` **SHOULD** be set. 
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~removeRoomRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRoomRescueKeyPair(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling removeRoomRescueKeyPair");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/keypair', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDeletedNode operation.
     * @callback module:api/NodesApi~requestDeletedNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request deleted node
     * ### Description:   Get metadata of a deleted node.  ### Precondition: User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.  ### Postcondition: Requested deleted node is returned.  ### Further Information: None.
     * @param {Number} deletedNodeId Deleted node ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestDeletedNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedNode}
     */
    requestDeletedNode(deletedNodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'deletedNodeId' is set
      if (deletedNodeId === undefined || deletedNodeId === null) {
        throw new Error("Missing the required parameter 'deletedNodeId' when calling requestDeletedNode");
      }

      let pathParams = {
        'deleted_node_id': deletedNodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedNode;
      return this.apiClient.callApi(
        '/v4/nodes/deleted_nodes/{deleted_node_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDeletedNodeVersions operation.
     * @callback module:api/NodesApi~requestDeletedNodeVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedNodeVersionsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request deleted versions of nodes
     * ### Description:   Retrieve all deleted versions of a node.  ### Precondition: User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.  ### Postcondition: List of deleted versions of a node is returned.  ### Further Information: The node is identified by three parameters: * parent ID * name * type (file, folder).  Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `expireAt:desc|size:asc`   Sort by `expireAt` descending **AND** `size` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `expireAt` | Expiration date | | `accessedAt` | Last access date | | `size` | Node size | | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> | | `createdAt` | Creation date | | `createdBy` | Creator first name, last name | | `updatedAt` | Last modification date | | `updatedBy` | Last modifier first name, last name | | `deletedAt` | Deleted date | | `deletedBy` | Deleter first name, last name |  </details>
     * @param {Number} nodeId Parent ID (room or folder ID)
     * @param {String} type Node type
     * @param {String} name Node name
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestDeletedNodeVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedNodeVersionsList}
     */
    requestDeletedNodeVersions(nodeId, type, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling requestDeletedNodeVersions");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling requestDeletedNodeVersions");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling requestDeletedNodeVersions");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'type': type,
        'name': name,
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedNodeVersionsList;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/deleted_nodes/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestDeletedNodesSummary operation.
     * @callback module:api/NodesApi~requestDeletedNodesSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeletedNodeSummaryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of deleted nodes
     * ### Description:   Retrieve a list of deleted nodes in a recycle bin.  ### Precondition: User can access parent room and has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read recycle bin</span> permissions.  ### Postcondition: List of deleted nodes is returned.  ### Further Information: Only room IDs are accepted as parent ID since only rooms may have a recycle bin.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `type:eq:file:folder|name:cn:searchString_1|parentPath:cn:searchString_2`   Get deleted nodes where type equals (`file` **OR** `folder`) **AND** deleted node name containing `searchString_1` **AND** deleted node parent path containing `searchString 2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `type` | Node type filter | `eq` | Node type equals value(s).<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:folder:file` | <ul><li>`folder`</li><li>`file`</li></ul> | | `name` | Node name filter | `cn` | Node name contains value. | `search String` | | `parentPath` | Parent path filter | `cn` | Parent path contains value. | `search String` | | `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31`&#124;<br>`timestampCreation:le:2018-01-01` | `Date (yyyy-MM-dd)` | | `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.   Nodes are sorted by type first, then by sent sort string.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc|timestampCreation:asc`   Sort by `name` descending **AND** `timestampCreation` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Node name | | `cntVersions` | Number of deleted versions of this file | | `firstDeletedAt` | First deleted version | | `lastDeletedAt` | Last deleted version | | `parentPath` | Parent path of deleted node | | `timestampCreation` | Creation timestamp | | `timestampModification` | Modification timestamp |  </details>
     * @param {Number} nodeId Parent ID (can only be a room ID)
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestDeletedNodesSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeletedNodeSummaryList}
     */
    requestDeletedNodesSummary(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling requestDeletedNodesSummary");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'filter': opts['filter'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeletedNodeSummaryList;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/deleted_nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestFileVersionList operation.
     * @callback module:api/NodesApi~requestFileVersionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileVersionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of file versions
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description:   Request a list of file versions. Both nodes and deleted nodes are included, depending on the user's permissions.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read/read recycle bin</span> permissions in parent room.  ### Postcondition: List of file versions is returned.  ### Further Information: Maximum number of file versions is 500. The list is sorted by ID DESC. 
     * @param {Number} referenceId Reference ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestFileVersionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileVersionList}
     */
    requestFileVersionList(referenceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'referenceId' is set
      if (referenceId === undefined || referenceId === null) {
        throw new Error("Missing the required parameter 'referenceId' when calling requestFileVersionList");
      }

      let pathParams = {
        'reference_id': referenceId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileVersionList;
      return this.apiClient.callApi(
        '/v4/nodes/files/versions/{reference_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfWebhooksForRoom operation.
     * @callback module:api/NodesApi~requestListOfWebhooksForRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomWebhookList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of webhooks that are assigned or can be assigned to this room
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a list of webhooks for the room scope with their assignment status.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: List of webhooks is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isAssigned:eq:true`   Get a list of assigned webhooks to the room.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`isAssigned`** | Assigned/unassigned webhooks filter | `eq` |  | `true or false` |  </details>
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestListOfWebhooksForRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomWebhookList}
     */
    requestListOfWebhooksForRoom(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestListOfWebhooksForRoom");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoomWebhookList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestMissingFileKeys operation.
     * @callback module:api/NodesApi~requestMissingFileKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MissingKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request files without user's file key
     * ### Description:   Requests a list of missing file keys that may be generated by the current user.    ### Precondition: User has a key pair.   Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>  ### Postcondition: None.  ### Further Information: Clients **SHOULD** regularly request missing file keys to provide access to files for other users.   The returned list is ordered by priority (emergency passwords / rescue keys are returned first). There is an enforced limit of **100** items per request. A total value greater than limit signals that there are more entries but does not necessarily reflect the precise number of total items. 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {Number} [roomId] Room ID
     * @param {Number} [fileId] File ID
     * @param {Number} [userId] User ID
     * @param {module:model/String} [useKey] Determines which key should be used (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestMissingFileKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MissingKeysResponse}
     */
    requestMissingFileKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'room_id': opts['roomId'],
        'file_id': opts['fileId'],
        'user_id': opts['userId'],
        'use_key': opts['useKey']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MissingKeysResponse;
      return this.apiClient.callApi(
        '/v4/nodes/missingFileKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNode operation.
     * @callback module:api/NodesApi~requestNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request node
     * ### Description:   Get node (room, folder or file).  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in auth parent room.  ### Postcondition: Requested node is returned.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    requestNode(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling requestNode");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNodeComments operation.
     * @callback module:api/NodesApi~requestNodeCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of node comments
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description: Get comments for a specific node.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node.  ### Postcondition: List with comments (sorted by `createdAt` timestamp) is returned.  ### Further Information: An empty list is returned if no comments were found.   Output is limited to **500** entries.   For more results please use filter criteria and paging (`offset` + `limit`).  
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {Boolean} [hideDeleted] Hide deleted comments (default: false)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestNodeCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommentList}
     */
    requestNodeComments(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling requestNodeComments");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'hide_deleted': opts['hideDeleted']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommentList;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNodeParents operation.
     * @callback module:api/NodesApi~requestNodeParentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeParentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of parent nodes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description:   Requests a list of node ancestors, sorted from root node to the node's direct parent node.  ### Precondition: User is allowed to browse through the node tree until the requested node.  ### Postcondition: List of parent nodes is returned.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestNodeParentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeParentList}
     */
    requestNodeParents(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling requestNodeParents");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeParentList;
      return this.apiClient.callApi(
        '/v4/nodes/{node_id}/parents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNodes operation.
     * @callback module:api/NodesApi~requestNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of nodes
     * ### Description:   Provides a hierarchical list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.  ### Precondition: Authenticated user.  ### Postcondition: List of nodes is returned.  ### Further Information: `EncryptionInfo` is **NOT** provided.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `type:eq:room:folder|perm:eq:read`   Get nodes where type equals (`room` **OR** `folder`) **AND** user has `read` permissions.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `type` | Node type filter | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder` | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> | | `perm` | Permission filter | `eq` | Permission equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `perm:eq:read:create:delete` | <ul><li>`manage`</li><li>`read`</li><li>`change`</li><li>`create`</li><li>`delete`</li><li>`manageDownloadShare`</li><li>`manageUploadShare`</li><li>`canReadRecycleBin`</li><li>`canRestoreRecycleBin`</li><li>`canDeleteRecycleBin`</li></ul> | | `childPerm` | Same as `perm`, but less restrictive (applies to child nodes only).<br>Child nodes of the parent node which do not meet the filter condition<br>are **NOT** returned. | `eq` | cf. `perm` | cf. `perm` | | `name` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` | | `encrypted` | Node encryption status filter | `eq` |  | `true or false` | | `branchVersion` | Node branch version filter | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404` | `version number` | | `timestampCreation` | Creation timestamp filter | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` | | `timestampModification` | Modification timestamp filter | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` | | `referenceId`           | Reference ID filter               | `eq` | Reference ID equals value.   | `Integer ` | </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.   Nodes are sorted by type first, then by sent sort string.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc|fileType:asc`   Sort by `name` descending **AND** `fileType` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Node name | | `createdAt` | Creation date | | `createdBy` | Creator first name, last name | | `updatedAt` | Last modification date | | `updatedBy` | Last modifier first name, last name | | `fileType` | File type (extension) | | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> | | `size` | Node size | | `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) | | `timestampCreation` | Creation timestamp | | `timestampModification` | Modification timestamp |  </details>  ### Deprecated sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [depthLevel] * `0` - top level nodes only  * `n` (any positive number) - include `n` levels starting from the current node
     * @param {Number} [parentId] Parent node ID.  Only rooms and folders can be parents.  Parent ID `0` or empty is the root node.
     * @param {Boolean} [roomManager] Show all rooms for management perspective.  Only possible for _Rooms Managers_ / _Room Admins_.  For all other users, it will be ignored.
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeList}
     */
    requestNodes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'depth_level': opts['depthLevel'],
        'parent_id': opts['parentId'],
        'room_manager': opts['roomManager'],
        'filter': opts['filter'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeList;
      return this.apiClient.callApi(
        '/v4/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPendingAssignments operation.
     * @callback module:api/NodesApi~requestPendingAssignmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PendingAssignmentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user-room assignments per group
     * ### Description:   Requests a list of user-room assignments by groups that have **NOT** been approved yet   These can have the state: * **WAITING**   * **DENIED**   * **ACCEPTED**    **ACCEPTED** assignments are already removed from the list.  ### Precondition: None.  ### Postcondition: List of user-room assignments is returned.  ### Further Information: Room administrators **SHOULD** regularly request pending assingments to provide access to rooms for other users.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `state:eq:WAITING`   Filter assignments by state `WAITING`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` | | `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` | | `roomId` | Room ID filter | `eq` | Room ID equals value. | `positive Integer` | | `state` | Assignment state | `eq` | Assignment state equals value. | `WAITING or DENIED` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `userId:desc|state:asc`   Sort by `userId` descending **AND** `state` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `userId` | User ID | | `groupId` | Group ID | | `roomId` | Room ID | | `state` | State |  </details>
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestPendingAssignmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PendingAssignmentList}
     */
    requestPendingAssignments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PendingAssignmentList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomActivitiesLogAsJson operation.
     * @callback module:api/NodesApi~requestRoomActivitiesLogAsJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogEventList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request events of a room
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description: Retrieve syslog (audit log) events related to a room.  ### Precondition: Requires <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on that room.  ### Postcondition: List of events is returned.  ### Further Information: Output may be limited to a certain number of entries.   Please use filter criteria and paging.  Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `time:desc`   Sort by `time` descending (default sort option).  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `time` | Event timestamp |  </details>
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [dateStart] Filter events from given date   e.g. `2015-12-31T23:59:00`
     * @param {String} [dateEnd] Filter events until given date   e.g. `2015-12-31T23:59:00`
     * @param {Number} [type] Operation ID   cf. `GET /eventlog/operations`
     * @param {Number} [userId] User ID
     * @param {Number} [status] Operation status:  * `0` - Success  * `2` - Error
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomActivitiesLogAsJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogEventList}
     */
    requestRoomActivitiesLogAsJson(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomActivitiesLogAsJson");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'type': opts['type'],
        'user_id': opts['userId'],
        'status': opts['status']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogEventList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomGroups operation.
     * @callback module:api/NodesApi~requestRoomGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomGroupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request room granted group(s) or / and group(s) that can be granted
     * ### Description:   Retrieve a list of groups that are and / or can be granted to the room.  ### Precondition: Any permissions on target room.  ### Postcondition: List of groups is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isGranted:eq:false|name:cn:searchString`   Get all groups that are **NOT** granted to this room **AND** whose name is like `searchString`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `name` | Group name filter | `cn` | Group name contains value. | `search String` | | `groupId` | Group ID filter | `eq` | Group ID equals value. | `positive Integer` | | `isGranted` | Filter the groups that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for groups in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` | | `permissionsManage` | Filter the groups that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` | | `effectivePerm` | Filter groups with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**. | `eq` |  | `true or false`<br>default: `false` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc`   Sort by `name` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Group name |  </details>
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomGroupList}
     */
    requestRoomGroups(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomGroups");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoomGroupList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomPolicies operation.
     * @callback module:api/NodesApi~requestRoomPoliciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomPolicies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Room Policies
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.32.0</h3>  ### Description:   Retrieve the room policies: * `defaultExpirationPeriod`  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.  ### Postcondition: Room Policies returned.  ### Further Information: `defaultExpirationPeriod`: Default policy room expiration period in seconds. All existing and future files in a room will have their expiration date set to this period after their respective upload. Existing files can be set to expire earlier afterwards. `0` means no default expiration policy will be enforced.    
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomPolicies}
     */
    requestRoomPolicies(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomPolicies");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoomPolicies;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomRescueKey operation.
     * @callback module:api/NodesApi~requestRoomRescueKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request room rescue key
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>  ### Description:   Returns the file key for the room emergency password / rescue key of a certain file (if available).  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.  ### Postcondition: File key is returned.  ### Further Information: None.
     * @param {Number} fileId File ID
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomRescueKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileKey}
     */
    requestRoomRescueKey(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling requestRoomRescueKey");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileKey;
      return this.apiClient.callApi(
        '/v4/nodes/files/{file_id}/data_room_file_key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomRescueKeyPair operation.
     * @callback module:api/NodesApi~requestRoomRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserKeyPairContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request room rescue key
     * ### Description:   Retrieve the room rescue key pair.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.  ### Postcondition: Key pair is returned.  ### Further Information: None.
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserKeyPairContainer}
     */
    requestRoomRescueKeyPair(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomRescueKeyPair");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserKeyPairContainer;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/keypair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomRescueKeyPairs operation.
     * @callback module:api/NodesApi~requestRoomRescueKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserKeyPairContainer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request all room rescue key pairs
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Retrieve all room rescue key pairs to allow migrating room-rescue-key-encrypted file keys.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in that room.  ### Postcondition: List of key pairs is returned.  ### Further Information: In the case of an algorithm migration to a room rescue key pair, one should create the new key pair before deleting the old one. This allows re-encrypting file keys with the new key pair, using the old one.  This API allows to retrieve both key pairs, in contrast to `GET /nodes/rooms/{room_id}/keypair`, which only delivers the preferred one. 
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomRescueKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserKeyPairContainer>}
     */
    requestRoomRescueKeyPairs(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomRescueKeyPairs");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserKeyPairContainer];
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/keypairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomS3Tags operation.
     * @callback module:api/NodesApi~requestRoomS3TagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3TagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of all assigned S3 tags to the room
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Retrieve a list of S3 tags assigned to a room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: List of assigned S3 tags is returned.  ### Further Information: None.
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomS3TagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3TagList}
     */
    requestRoomS3Tags(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomS3Tags");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3TagList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/s3_tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRoomUsers operation.
     * @callback module:api/NodesApi~requestRoomUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoomUserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request room granted user(s) or / and user(s) that can be granted
     * ### Description:   Retrieve a list of users that are and / or can be granted to the room.  ### Precondition: Any permissions on target room.  ### Postcondition: None.  ### Further Information: List of users is returned.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  > `permissionsManage:eq:true|user:cn:searchString`   Get all users that have `manage` permissions to this room **AND** whose (`firstName` **OR** `lastName` **OR** `email` **OR** `username`) is like `searchString`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `user` | User filter | `cn` | User contains value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`). | `search String` | | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` | | `isGranted` | Filter the users that have (no) access to this room.<br>**This filter is only available for room administrators.**<br>**Other users can only look for users in their rooms, so this filter is `true` and **CANNOT** be overridden.** | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `true` | | `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room. | `eq` |  | `true or false` | | `effectivePerm` | Filter users with DIRECT or DIRECT **AND** EFFECTIVE permissions<ul><li>`false`: DIRECT permissions</li><li>`true`: DIRECT **AND** EFFECTIVE permissions</li><li>`any`: DIRECT **AND** EFFECTIVE **AND** OVER GROUP permissions</li></ul>DIRECT means: e.g. room administrator grants `read` permissions to group of users **directly** on desired room.<br>EFFECTIVE means: e.g. group of users gets `read` permissions on desired room through **inheritance**.<br>OVER GROUP means: e.g. user gets `read` permissions on desired room through **group membership**. | `eq` |  | <ul><li>`true`</li><li>`false`</li><li>`any`</li></ul>default: `false` | | `hasRole` | User role filter<br>For more Roles information please call `GET /roles API` | `eq`, `neq` | User role  equals value. | <ul><li>`CONFIG_MANAGER` - Manage global configs</li><li>`USER_MANAGER` - Manage Users</li><li>`GROUP_MANAGER` - Manage User-Groups</li><li>`ROOM_MANAGER` - Manage top level Data Rooms</li><li>`LOG_AUDITOR` - Read logs</li><li>`NONMEMBER_VIEWER` - View users and groups when having room manage permission</li><li>`USER` - Regular User role</li><li>`GUEST_USER` - Guest User role</li></ul> |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`displayName`</del> | User display name filter (use `user` filter) | `cn` | User display name contains value (`firstName` **OR** `lastName` **OR** `email`). | `search String` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `user:desc`   Sort by `user` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`user`** | User - sort by `firstName`, `lastName`, `username`, `email` (in this order) |  </details>
     * @param {Number} roomId Room ID
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestRoomUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoomUserList}
     */
    requestRoomUsers(roomId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling requestRoomUsers");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoomUserList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSystemRescueKey operation.
     * @callback module:api/NodesApi~requestSystemRescueKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request system rescue key
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>  ### Description:   Returns the file key for the system emergency password / rescue key of a certain file (if available).  ### Precondition: User with <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions in parent room.  ### Postcondition: File key is returned.  ### Further Information: None.
     * @param {Number} fileId File ID
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestSystemRescueKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileKey}
     */
    requestSystemRescueKey(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling requestSystemRescueKey");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileKey;
      return this.apiClient.callApi(
        '/v4/nodes/files/{file_id}/data_space_file_key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUploadStatusFiles operation.
     * @callback module:api/NodesApi~requestUploadStatusFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3FileUploadStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request status of S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Request status of a S3 file upload.  ### Precondition: An upload channel has been created and user has to be the creator of the upload channel.  ### Postcondition: Status of S3 multipart upload request is returned.  ### Further Information: None.  ### Possible errors: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Http Status | Error Code | Description | | :--- | :--- | :--- | | `400 Bad Request` | `-80000` | Mandatory fields cannot be empty | | `400 Bad Request` | `-80001` | Invalid positive number | | `400 Bad Request` | `-80002` | Invalid number | | `400 Bad Request` | `-40001` | (Target) room is not encrypted | | `400 Bad Request` | `-40755` | Bad file name | | `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room | | `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share | | `403 Forbidden` |  | Access denied | | `404 Not Found` | `-20501` | Upload not found | | `404 Not Found` | `-40000` | Container not found | | `404 Not Found` | `-41000` | Node not found | | `404 Not Found` | `-70501` | User not found | | `409 Conflict` | `-40010` | Container cannot be overwritten | | `409 Conflict` |  | File cannot be overwritten | | `500 Internal Server Error` |  | System Error | | `502 Bad Gateway` |  | S3 Error | | `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share | | `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room | | `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota | | `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |  </details>
     * @param {String} uploadId Upload channel ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestUploadStatusFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3FileUploadStatus}
     */
    requestUploadStatusFiles(uploadId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling requestUploadStatusFiles");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3FileUploadStatus;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUserFileKey operation.
     * @callback module:api/NodesApi~requestUserFileKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user's file key
     * ### Description:   Returns the file key for the current user (if available).  ### Precondition: User with one of the following permissions in parent room: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>  ### Postcondition: File key is returned.  ### Further Information: The symmetric file key is encrypted with the user's public key.   File keys are generated with the workflow _\"Generate file keys\"_ that starts at `GET /nodes/missingFileKeys`.
     * @param {Number} fileId File ID
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~requestUserFileKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileKey}
     */
    requestUserFileKey(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling requestUserFileKey");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileKey;
      return this.apiClient.callApi(
        '/v4/nodes/files/{file_id}/user_file_key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreNodes operation.
     * @callback module:api/NodesApi~restoreNodesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore deleted nodes
     * ### Description:   Restore a list of deleted nodes.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in parent room and <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; restore recycle bin</span> permissions.  ### Postcondition: The selected files are moved from the recycle bin to the chosen productive container.  ### Further Information: If no parent ID is provided, the node is restored to its previous location.   The default resolution strategy is `autorename` that adds numbers to the file name until the conflict is solved.   If an existing file is overwritten, it is moved to the recycle bin instead of the restored one.  Download share id (if exists) gets changed if: - node with the same name exists in the target container - `resolutionStrategy` is `overwrite` - `keepShareLinks` is `true`
     * @param {module:model/RestoreDeletedNodesRequest} restoreDeletedNodesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~restoreNodesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restoreNodes(restoreDeletedNodesRequest, opts, callback) {
      opts = opts || {};
      let postBody = restoreDeletedNodesRequest;
      // verify the required parameter 'restoreDeletedNodesRequest' is set
      if (restoreDeletedNodesRequest === undefined || restoreDeletedNodesRequest === null) {
        throw new Error("Missing the required parameter 'restoreDeletedNodesRequest' when calling restoreNodes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/deleted_nodes/actions/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeRoomGroups operation.
     * @callback module:api/NodesApi~revokeRoomGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke granted group(s) from room
     * ### Description:   Revoke granted groups from room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Group's permissions are revoked.  ### Further Information: Batch function.  
     * @param {Number} roomId Room ID
     * @param {module:model/RoomGroupsDeleteBatchRequest} roomGroupsDeleteBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~revokeRoomGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeRoomGroups(roomId, roomGroupsDeleteBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomGroupsDeleteBatchRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling revokeRoomGroups");
      }
      // verify the required parameter 'roomGroupsDeleteBatchRequest' is set
      if (roomGroupsDeleteBatchRequest === undefined || roomGroupsDeleteBatchRequest === null) {
        throw new Error("Missing the required parameter 'roomGroupsDeleteBatchRequest' when calling revokeRoomGroups");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokeRoomUsers operation.
     * @callback module:api/NodesApi~revokeRoomUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke granted user(s) from room
     * ### Description:   Revoke granted users from room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: User's permissions are revoked.  ### Further Information: Batch function.  
     * @param {Number} roomId Room ID
     * @param {module:model/RoomUsersDeleteBatchRequest} roomUsersDeleteBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~revokeRoomUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokeRoomUsers(roomId, roomUsersDeleteBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomUsersDeleteBatchRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling revokeRoomUsers");
      }
      // verify the required parameter 'roomUsersDeleteBatchRequest' is set
      if (roomUsersDeleteBatchRequest === undefined || roomUsersDeleteBatchRequest === null) {
        throw new Error("Missing the required parameter 'roomUsersDeleteBatchRequest' when calling revokeRoomUsers");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchNodes operation.
     * @callback module:api/NodesApi~searchNodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search nodes
     * ### Description:   Provides a flat list of file system nodes (rooms, folders or files) of a given parent that are accessible by the current user.  ### Precondition: Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> nodes (i.e. `isBrowsable = true`).  ### Postcondition: List of nodes is returned.  ### Further Information:   Output is limited to **500** entries.   For more results please use filter criteria and paging (`offset` + `limit`).   `EncryptionInfo` is **NOT** provided.   Wildcard character is the asterisk character: `*`  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `type:eq:file|createdAt:ge:2015-01-01`   Get nodes where type equals `file` **AND** file creation date is **>=** `2015-01-01`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME`            | Filter Description                | `OPERATOR` | Operator Description                                                                                                                                                                                                                                                                | `VALUE` | |:------------------------|:----------------------------------| :--- |:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- | | `type`                  | Node type filter                  | `eq` | Node type equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**).<br>e.g. `type:eq:room:folder`                                                                                                                                        | <ul><li>`room`</li><li>`folder`</li><li>`file`</li></ul> | | `fileType`              | File type filter (file extension) | `cn, eq` | File type contains / equals value.                                                                                                                                                                                                                                                  | `search String` | | `classification`        | Classification filter             | `eq` | Classification equals value.                                                                                                                                                                                                                                                        | <ul><li>`1` - public</li><li>`2` - internal</li><li>`3` - confidential</li><li>`4` - strictly confidential</li></ul> | | `createdBy`             | Creator login filter              | `cn, eq` | Creator login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`).                                                                                                                                                                             | `search String` | | `createdById`           | Creator ID filter                 | `eq` | Creator ID equals value.                                                                                                                                                                                                                                                            | `positive Integer  or -1 for external user` | | `createdAt`             | Creation date filter              | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01`                                                                | `Date (yyyy-MM-dd)` | | `updatedBy`             | Last modifier login filter        | `cn, eq` | Last modifier login contains / equals value (`firstName` **OR** `lastName` **OR** `email` **OR** `username`).                                                                                                                                                                       | `search String` | | `updatedById`           | Last modifier ID filter           | `eq` | Modifier ID equals value.                                                                                                                                                                                                                                                           | `positive Integer or -1 for external user` | | `updatedAt`             | Last modification date filter     | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01`                                                       | `Date (yyyy-MM-dd)` | | `expireAt`              | Expiration date filter            | `ge, le` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expireAt:ge:2016-12-31`&#124;`expireAt:le:2018-01-01`                                                                | `Date (yyyy-MM-dd)` | | `size`                  | Node size filter                  | `ge, le` | Node size is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `size:ge:5`&#124;`size:le:10`                                                                                               | `size in bytes` | | `isFavorite`            | Favorite filter                   | `eq` |                                                                                                                                                                                                                                                                                     | `true or false` | | `branchVersion`         | Node branch version filter        | `ge, le` | Branch version is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `branchVersion:ge:1423280937404`&#124;`branchVersion:le:1523280937404`                                                 | `version number` | | `parentPath`            | Parent path                       | `cn, eq` | Parent path contains / equals  value.                                                                                                                                                                                                                                               | `search String` | | `timestampCreation`     | Creation timestamp filter         | `ge, le` | Creation timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampCreation:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampCreation:le:2018-01-01T11:00:00.540`             | `Date (yyyy-MM-dd)` | | `timestampModification` | Modification timestamp filter     | `ge, le` | Modification timestamp is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `timestampModification:ge:2016-12-31T23:00:00.123`&#124;<br>`timestampModification:le:2018-01-01T11:00:00.540` | `Date (yyyy-MM-dd)` | | `referenceId`           | Reference ID filter               | `eq` | Reference ID equals value.                                                                                                                                                                                                                                                          | `Integer ` | </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc|size:asc`   Sort by `name` descending **AND** `size` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `name` | Node name | | `createdAt` | Creation date | | `createdBy` | Creator first name, last name | | `updatedAt` | Last modification date | | `updatedBy` | Last modifier first name, last name | | `fileType` | File type (extension) | | `classification` | Classification ID:<ul><li>1 - public</li><li>2 - internal</li><li>3 - confidential</li><li>4 - strictly confidential</li></ul> | | `size` | Node size | | `cntDeletedVersions` | Number of deleted versions of this file / folder (**NOT** recursive; for files and folders only) | | `type` | Node type (room, folder, file) | | `parentPath` | Parent path | | `timestampCreation` | Creation timestamp | | `timestampModification` | Modification timestamp |  </details>  ### Deprecated sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | <del>`cntChildren`</del> | Number of direct children (**NOT** recursive; for rooms and folders only) |  </details>
     * @param {String} searchString Search string
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [depthLevel] * `0` - top level nodes only (default)  * `-1` - full tree  * `n` (any positive number) - include `n` levels starting from the current node
     * @param {Number} [parentId] Parent node ID.  Only rooms and folders can be parents.  Parent ID `0` or empty is the root node.
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~searchNodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NodeList}
     */
    searchNodes(searchString, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchString' is set
      if (searchString === undefined || searchString === null) {
        throw new Error("Missing the required parameter 'searchString' when calling searchNodes");
      }

      let pathParams = {
      };
      let queryParams = {
        'search_string': searchString,
        'depth_level': opts['depthLevel'],
        'parent_id': opts['parentId'],
        'filter': opts['filter'],
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NodeList;
      return this.apiClient.callApi(
        '/v4/nodes/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoomPolicies operation.
     * @callback module:api/NodesApi~setRoomPoliciesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set room policies
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.32.0</h3>  ### Description:   Retrieve the room policies: * `defaultExpirationPeriod`  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Room policy is set.  ### Further Information: `defaultExpirationPeriod`: Default policy room expiration period in seconds. All existing and future files in a room will have their expiration date set to this period after their respective upload. Existing files can be set to expire earlier afterwards. `0` means no default expiration policy will be enforced. This removes all expiration dates from existing files.
     * @param {Number} roomId Room ID
     * @param {module:model/RoomPoliciesRequest} roomPoliciesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~setRoomPoliciesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRoomPolicies(roomId, roomPoliciesRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomPoliciesRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling setRoomPolicies");
      }
      // verify the required parameter 'roomPoliciesRequest' is set
      if (roomPoliciesRequest === undefined || roomPoliciesRequest === null) {
        throw new Error("Missing the required parameter 'roomPoliciesRequest' when calling setRoomPolicies");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/policies', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoomRescueKeyPair operation.
     * @callback module:api/NodesApi~setRoomRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set room's rescue key pair
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Set room rescue key pair.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Key pair is set.  ### Further Information: Room rescue key pair can be used to upgrade algorithm.
     * @param {Number} roomId Room ID
     * @param {module:model/UserKeyPairContainer} userKeyPairContainer 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~setRoomRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setRoomRescueKeyPair(roomId, userKeyPairContainer, opts, callback) {
      opts = opts || {};
      let postBody = userKeyPairContainer;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling setRoomRescueKeyPair");
      }
      // verify the required parameter 'userKeyPairContainer' is set
      if (userKeyPairContainer === undefined || userKeyPairContainer === null) {
        throw new Error("Missing the required parameter 'userKeyPairContainer' when calling setRoomRescueKeyPair");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/keypair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setRoomS3Tags operation.
     * @callback module:api/NodesApi~setRoomS3TagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3TagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set S3 tags for a room
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Set S3 tags to a room.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>.  ### Postcondition: Provided S3 tags are assigned to a room.  ### Further Information: Every request overrides current S3 tags.   Mandatory S3 tag IDs **MUST** be sent.
     * @param {Number} roomId Room ID
     * @param {module:model/S3TagIds} s3TagIds 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~setRoomS3TagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3TagList}
     */
    setRoomS3Tags(roomId, s3TagIds, opts, callback) {
      opts = opts || {};
      let postBody = s3TagIds;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling setRoomS3Tags");
      }
      // verify the required parameter 's3TagIds' is set
      if (s3TagIds === undefined || s3TagIds === null) {
        throw new Error("Missing the required parameter 's3TagIds' when calling setRoomS3Tags");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = S3TagList;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/s3_tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserFileKeys operation.
     * @callback module:api/NodesApi~setUserFileKeysCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set file keys for a list of users and files
     * ### Description:   Sets symmetric file keys for several users and files.  ### Precondition: User has file keys for the files.   Only settable by users that own one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>  ### Postcondition: Stores new file keys for other users.  ### Further Information: Only users with copies of the file key (encrypted with their public keys) can access a certain file.   This endpoint is used for the distribution of file keys amongst an authorized user base.   User can set file key for himself.   The users who already have a file key are ignored and keep the distributed file key 
     * @param {module:model/UserFileKeySetBatchRequest} userFileKeySetBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~setUserFileKeysCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setUserFileKeys(userFileKeySetBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = userFileKeySetBatchRequest;
      // verify the required parameter 'userFileKeySetBatchRequest' is set
      if (userFileKeySetBatchRequest === undefined || userFileKeySetBatchRequest === null) {
        throw new Error("Missing the required parameter 'userFileKeySetBatchRequest' when calling setUserFileKeys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/files/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFavorites operation.
     * @callback module:api/NodesApi~updateFavoritesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark or unmark a list of nodes (room, folder or file) as favorite
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description:   Marks or unmarks a list of nodes (room, folder or file) as favorite.  ### Precondition: Authenticated user is allowed to <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128065; see</span> the node (i.e. `isBrowsable = true`).  ### Postcondition: Nodes gets marked as favorite.  ### Further Information: Maximum number of nodes is 200.
     * @param {module:model/UpdateFavoritesBulkRequest} updateFavoritesBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateFavoritesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFavorites(updateFavoritesBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFavoritesBulkRequest;
      // verify the required parameter 'updateFavoritesBulkRequest' is set
      if (updateFavoritesBulkRequest === undefined || updateFavoritesBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateFavoritesBulkRequest' when calling updateFavorites");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/favorites', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFile operation.
     * @callback module:api/NodesApi~updateFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a file’s metadata
     * ### Description: Updates a list of file’s metadata.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.  ### Postcondition: File's metadata is changed.   
     * @param {Number} fileId File ID
     * @param {module:model/UpdateFileRequest} updateFileRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    updateFile(fileId, updateFileRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFileRequest;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling updateFile");
      }
      // verify the required parameter 'updateFileRequest' is set
      if (updateFileRequest === undefined || updateFileRequest === null) {
        throw new Error("Missing the required parameter 'updateFileRequest' when calling updateFile");
      }

      let pathParams = {
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/files/{file_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFiles operation.
     * @callback module:api/NodesApi~updateFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a list of  file’s metadata
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description:   Updates a list of file’s metadata.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.  ### Postcondition: File's metadata is changed.  ### Further Information: Maximum number of files is 200 
     * @param {module:model/UpdateFilesBulkRequest} updateFilesBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateFiles(updateFilesBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFilesBulkRequest;
      // verify the required parameter 'updateFilesBulkRequest' is set
      if (updateFilesBulkRequest === undefined || updateFilesBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateFilesBulkRequest' when calling updateFiles");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/files', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateFolder operation.
     * @callback module:api/NodesApi~updateFolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates folder’s metadata
     * ### Description:   Updates folder’s metadata.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change</span> permissions in parent room.  ### Postcondition: Folder's metadata is changed.  ### Further Information: Notes are limited to **255** characters.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {Number} folderId Folder ID
     * @param {module:model/UpdateFolderRequest} updateFolderRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateFolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    updateFolder(folderId, updateFolderRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateFolderRequest;
      // verify the required parameter 'folderId' is set
      if (folderId === undefined || folderId === null) {
        throw new Error("Missing the required parameter 'folderId' when calling updateFolder");
      }
      // verify the required parameter 'updateFolderRequest' is set
      if (updateFolderRequest === undefined || updateFolderRequest === null) {
        throw new Error("Missing the required parameter 'updateFolderRequest' when calling updateFolder");
      }

      let pathParams = {
        'folder_id': folderId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/folders/{folder_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNodeComment operation.
     * @callback module:api/NodesApi~updateNodeCommentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Comment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit node comment
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.10.0</h3>  ### Description: Edit the text of an existing comment for a specific node.  ### Precondition: User has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span> permissions on the node and is the creator of the comment.  ### Postcondition: Comments text gets changed.  ### Further Information: Maximum allowed text length: **65535** characters.
     * @param {Number} commentId Comment ID
     * @param {module:model/ChangeNodeCommentRequest} changeNodeCommentRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateNodeCommentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Comment}
     */
    updateNodeComment(commentId, changeNodeCommentRequest, opts, callback) {
      opts = opts || {};
      let postBody = changeNodeCommentRequest;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling updateNodeComment");
      }
      // verify the required parameter 'changeNodeCommentRequest' is set
      if (changeNodeCommentRequest === undefined || changeNodeCommentRequest === null) {
        throw new Error("Missing the required parameter 'changeNodeCommentRequest' when calling updateNodeComment");
      }

      let pathParams = {
        'comment_id': commentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Comment;
      return this.apiClient.callApi(
        '/v4/nodes/comments/{comment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoom operation.
     * @callback module:api/NodesApi~updateRoomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Node} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates room’s metadata
     * ### Description:   Updates room’s metadata.  ### Precondition: User is a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span> at superordinated level.  ### Postcondition: Room's metadata is changed.  ### Further Information: Notes are limited to **255** characters.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' `
     * @param {Number} roomId Room ID
     * @param {module:model/UpdateRoomRequest} updateRoomRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateRoomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Node}
     */
    updateRoom(roomId, updateRoomRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRoomRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateRoom");
      }
      // verify the required parameter 'updateRoomRequest' is set
      if (updateRoomRequest === undefined || updateRoomRequest === null) {
        throw new Error("Missing the required parameter 'updateRoomRequest' when calling updateRoom");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Node;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoomGroups operation.
     * @callback module:api/NodesApi~updateRoomGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or change room granted group(s)
     * ### Description: All existing group permissions will be overwritten.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.  ### Postcondition: Group's permissions are changed.  ### Further Information: Batch function.   
     * @param {Number} roomId Room ID
     * @param {module:model/RoomGroupsAddBatchRequest} roomGroupsAddBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateRoomGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoomGroups(roomId, roomGroupsAddBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomGroupsAddBatchRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateRoomGroups");
      }
      // verify the required parameter 'roomGroupsAddBatchRequest' is set
      if (roomGroupsAddBatchRequest === undefined || roomGroupsAddBatchRequest === null) {
        throw new Error("Missing the required parameter 'roomGroupsAddBatchRequest' when calling updateRoomGroups");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoomUsers operation.
     * @callback module:api/NodesApi~updateRoomUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or change room granted user(s)
     * ### Description: All existing user permissions will be overwritten.  ### Precondition: User needs to be a <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Room Administrator</span>. To add new members, the user needs the right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; non-members add</span>, which is included in any role.  ### Postcondition: User's permissions are changed.  ### Further Information: Batch function.
     * @param {Number} roomId Room ID
     * @param {module:model/RoomUsersAddBatchRequest} roomUsersAddBatchRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~updateRoomUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRoomUsers(roomId, roomUsersAddBatchRequest, opts, callback) {
      opts = opts || {};
      let postBody = roomUsersAddBatchRequest;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateRoomUsers");
      }
      // verify the required parameter 'roomUsersAddBatchRequest' is set
      if (roomUsersAddBatchRequest === undefined || roomUsersAddBatchRequest === null) {
        throw new Error("Missing the required parameter 'roomUsersAddBatchRequest' when calling updateRoomUsers");
      }

      let pathParams = {
        'room_id': roomId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/nodes/rooms/{room_id}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileAsMultipart operation.
     * @callback module:api/NodesApi~uploadFileAsMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.9.0</h3>  ### Use `uploads` API  ### Description:   Uploads a file or parts of it in an active upload channel.  ### Precondition: An upload channel has been created.  ### Postcondition: A file or parts of it are uploaded to a temporary location.  ### Further Information: This endpoints supports chunked upload.    Following `Content-Types` are supported by this API: * `multipart/form-data` * provided `Content-Type`     For both file upload types set the correct `Content-Type` header and body.    ### Examples:    * `multipart/form-data` ``` POST /api/v4/nodes/files/uploads/{upload_id} HTTP/1.1  Header: ... Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW ...  Body: ------WebKitFormBoundary7MA4YWxkTrZu0gW Content-Disposition: form-data; name=\"file\"; filename=\"file.txt\" Content-Type: text/plain  Content of file.txt ------WebKitFormBoundary7MA4YWxkTrZu0gW-- ```  * any other `Content-Type`   ``` POST /api/v4/nodes/files/uploads/{upload_id}  HTTP/1.1  Header: ... Content-Type: { ... } ...  Body: raw content ```
     * @param {String} uploadId Upload channel ID
     * @param {File} file File
     * @param {Object} opts Optional parameters
     * @param {String} [contentRange] Content-Range   e.g. `bytes 0-999/3980`
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/NodesApi~uploadFileAsMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkUploadResponse}
     */
    uploadFileAsMultipart(uploadId, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling uploadFileAsMultipart");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFileAsMultipart");
      }

      let pathParams = {
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Range': opts['contentRange'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
        'file': file
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ChunkUploadResponse;
      return this.apiClient.callApi(
        '/v4/nodes/files/uploads/{upload_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
