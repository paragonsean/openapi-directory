/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuditNodeInfoResponse from '../model/AuditNodeInfoResponse';
import AuditNodeResponse from '../model/AuditNodeResponse';
import ErrorResponse from '../model/ErrorResponse';
import LogEventList from '../model/LogEventList';
import LogOperationList from '../model/LogOperationList';

/**
* Eventlog service.
* @module api/EventlogApi
* @version 4.42.3
*/
export default class EventlogApi {

    /**
    * Constructs a new EventlogApi. 
    * @alias module:api/EventlogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the requestAuditNodeInfo operation.
     * @callback module:api/EventlogApi~requestAuditNodeInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuditNodeInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request nodes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.31.0</h3>  ### Description:  Retrieve a list of all nodes of type room under a certain parent.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.  ### Postcondition: List of rooms.  ### Further Information: For rooms on root level, use parent_id = 0.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `nodeName:cn:searchString_1|nodeIsEncrypted:eq:true`   Filter by node name containing `searchString_1` **AND** node is encrypted .  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` | | `nodeName` | Node name filter | `cn, eq, sw` | Node name contains / equals / starts with value. | `search String` | | `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` |  </details>   ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `nodeName:asc`   Sort by `nodeName` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `nodeId` | Node ID | | `nodeName` | Node name |  </details> 
     * @param {Object} opts Optional parameters
     * @param {Number} [parentId] Parent node ID.  Only rooms can be parents.  Parent ID `0` or empty is the root node.
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/EventlogApi~requestAuditNodeInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuditNodeInfoResponse}
     */
    requestAuditNodeInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'parent_id': opts['parentId'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AuditNodeInfoResponse;
      return this.apiClient.callApi(
        '/v4/eventlog/audits/node_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAuditNodeUserData operation.
     * @callback module:api/EventlogApi~requestAuditNodeUserDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AuditNodeResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request node assigned users with permissions
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.32.0</h3>  ### Description:  Retrieve a list of all nodes of type room, and the room assignment users with permissions.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read audit log</span> required.  ### Postcondition: List of rooms and their assigned users is returned.  ### Further Information:  Output is limited to **500** entries.   For more results please use filter criteria and the `limit` parameter.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Except for `userName`, `userFirstName` and  `userLastName` - these are connected via logical disjunction (**OR**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `userName:cn:searchString_1|userFirstName:cn:searchString_2|nodeId:eq:2`   Filter by user login containing `searchString_1` **OR** first name containing `searchString_2` **AND** node ID equals `2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `nodeId` | Node ID filter | `eq` | Node ID equals value. | `positive Integer` | | `nodeName` | Node name filter | `cn, eq` | Node name contains / equals value. | `search String` | | `nodeParentId` | Node parent ID filter | `eq` | Parent ID equals value. | `positive Integer`<br>Parent ID `0` is the root node. | | `userId` | User ID filter | `eq` | User ID equals value. | `positive Integer` | | `userName` | Username (login) filter | `cn, eq` | Username contains / equals value. | `search String` | | `userFirstName` | User first name filter | `cn, eq` | User first name contains / equals value. | `search String` | | `userLastName` | User last name filter | `cn, eq` | User last name contains / equals value. | `search String` | | `permissionsManage` | Filter the users that do (not) have `manage` permissions in this room | `eq` |  | `true or false` | | `nodeIsEncrypted` | Encrypted node filter | `eq` |  | `true or false` | | `nodeHasActivitiesLog` | Activities log filter | `eq` |  | `true or false` |  </details>  ### Deprecated filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | <del>`nodeHasRecycleBin`</del> | Recycle bin filter<br>**Filter has no effect!** | `eq` |  | `true or false` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `nodeName:asc`   Sort by `nodeName` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `nodeId` | Node ID | | `nodeName` | Node name | | `nodeParentId` | Node parent ID | | `nodeSize` | Node size | | `nodeQuota` | Node quota |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/EventlogApi~requestAuditNodeUserDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AuditNodeResponse>}
     */
    requestAuditNodeUserData(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AuditNodeResponse];
      return this.apiClient.callApi(
        '/v4/eventlog/audits/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLogEventsAsJson operation.
     * @callback module:api/EventlogApi~requestLogEventsAsJsonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogEventList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request system events
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description:  Retrieve eventlog (audit log) events.  ### Precondition: Role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.  ### Postcondition: List of audit log events is returned.  ### Further Information: Output is limited to **500** entries.   For more results please use filter criteria and paging (`offset` + `limit`).   Allowed `Accept-Header`: * `Accept: application/json` * `Accept: text/csv`    ---  Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `time:desc`   Sort by `time` descending (default sort option).  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `time` | Event timestamp |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [sort] Sort string
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [dateStart] Filter events from given date   e.g. `2015-12-31T23:59:00`
     * @param {String} [dateEnd] Filter events until given date   e.g. `2015-12-31T23:59:00`
     * @param {Number} [type] Operation ID   cf. `GET /eventlog/operations`
     * @param {Number} [userId] User ID
     * @param {module:model/String} [status] Operation status:  * `0` - Success  * `2` - Error
     * @param {String} [userClient] User client
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/EventlogApi~requestLogEventsAsJsonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogEventList}
     */
    requestLogEventsAsJson(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'type': opts['type'],
        'user_id': opts['userId'],
        'status': opts['status'],
        'user_client': opts['userClient']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogEventList;
      return this.apiClient.callApi(
        '/v4/eventlog/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestLogOperations operation.
     * @callback module:api/EventlogApi~requestLogOperationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogOperationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request allowed Log Operations
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description:  Retrieve eventlog (audit log) operation IDs and the associated log operation description.  ### Precondition: Role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Log Auditor</span> required.  ### Postcondition: List of available log operations is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isDeprecated] Show only deprecated operations
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/EventlogApi~requestLogOperationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogOperationList}
     */
    requestLogOperations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_deprecated': opts['isDeprecated']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogOperationList;
      return this.apiClient.callApi(
        '/v4/eventlog/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
