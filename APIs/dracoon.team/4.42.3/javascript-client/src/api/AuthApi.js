/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import LoginRequest from '../model/LoginRequest';
import LoginResponse from '../model/LoginResponse';
import RadiusChallengeResponse from '../model/RadiusChallengeResponse';
import RecoverUserNameRequest from '../model/RecoverUserNameRequest';
import ResetPassword400Response from '../model/ResetPassword400Response';
import ResetPasswordRequest from '../model/ResetPasswordRequest';
import ResetPasswordTokenValidateResponse from '../model/ResetPasswordTokenValidateResponse';
import ResetPasswordWithTokenRequest from '../model/ResetPasswordWithTokenRequest';

/**
* Auth service.
* @module api/AuthApi
* @version 4.42.3
*/
export default class AuthApi {

    /**
    * Constructs a new AuthApi. 
    * @alias module:api/AuthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the completeOpenIdLogin operation.
     * @callback module:api/AuthApi~completeOpenIdLoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete OpenID Connect authentication
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>  ### Description:   This is the second step of the OpenID Connect authentication.   The user hands over the authorization code and is logged in.  ### Precondition: Existing user with activated OpenID Connect authentication that is **NOT** locked.  ### Postcondition: User is logged in.  ### Further Information: None.
     * @param {String} code Authorization code
     * @param {String} state Authentication state
     * @param {Object} opts Optional parameters
     * @param {String} [idToken] Identity token
     * @param {module:api/AuthApi~completeOpenIdLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    completeOpenIdLogin(code, state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling completeOpenIdLogin");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling completeOpenIdLogin");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'id_token': opts['idToken'],
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/v4/auth/openid/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initiateOpenIdLogin operation.
     * @callback module:api/AuthApi~initiateOpenIdLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate OpenID Connect authentication
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.14.0</h3>  ### Description: This is the first step of the OpenID Connect authentication.   The user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.  ### Precondition: None.  ### Postcondition: User is redirected to OpenID Connect identity provider to authenticate himself.  ### Further Information: None.
     * @param {String} issuer Issuer identifier of the OpenID Connect identity provider
     * @param {String} redirectUri Redirect URI to complete the OpenID Connect authentication
     * @param {String} language Language ID or ISO 639-1 code
     * @param {Boolean} test Flag to test the authentication parameters.  If the request is valid, the API will respond with `204 No Content`.
     * @param {module:api/AuthApi~initiateOpenIdLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    initiateOpenIdLogin(issuer, redirectUri, language, test, callback) {
      let postBody = null;
      // verify the required parameter 'issuer' is set
      if (issuer === undefined || issuer === null) {
        throw new Error("Missing the required parameter 'issuer' when calling initiateOpenIdLogin");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling initiateOpenIdLogin");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling initiateOpenIdLogin");
      }
      // verify the required parameter 'test' is set
      if (test === undefined || test === null) {
        throw new Error("Missing the required parameter 'test' when calling initiateOpenIdLogin");
      }

      let pathParams = {
      };
      let queryParams = {
        'issuer': issuer,
        'redirect_uri': redirectUri,
        'language': language,
        'test': test
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/auth/openid/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/AuthApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authenticate user (Login)
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.13.0</h3>  ### Description: Authenticates user and provides an authentication token (`X-Sds-Auth-Token`) that is required for the most operations.  ### Precondition: Existing user that is **NOT** locked.  ### Postcondition: User is logged in.  ### Further Information: The provided token is valid for **two hours**, every usage resets this period to two full hours again.   Logging off invalidates the token.    ### Available authentication methods: <details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Authentication Method (`authType`) | Description | | :--- | :--- | | `basic` | Log in with credentials stored in the database <br>Formerly known as `sql`.| | `active_directory` | Log in with Active Directory credentials | | `radius` | Log in with RADIUS username, PIN and token password.<br>Token (request parameter) may be set, otherwise this parameter is ignored. If token is set, password is optional. | | `openid` | Please use `POST /auth/openid/login` API to login with OpenID Connect identity |  </details>
     * @param {module:model/LoginRequest} loginRequest 
     * @param {module:api/AuthApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    login(loginRequest, callback) {
      let postBody = loginRequest;
      // verify the required parameter 'loginRequest' is set
      if (loginRequest === undefined || loginRequest === null) {
        throw new Error("Missing the required parameter 'loginRequest' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/v4/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the ping operation.
     * @callback module:api/AuthApi~pingCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ping
     * ### Description: Test connection to DRACOON Core Service.  ### Precondition: None.  ### Postcondition: `200 OK` with current date string is returned if successful.  ### Further Information: None.
     * @param {module:api/AuthApi~pingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    ping(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v4/auth/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverUserName operation.
     * @callback module:api/AuthApi~recoverUserNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recover username
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.13.0</h3>  ### Description:   Request an email with the user names of all accounts connected to the email.  ### Precondition: Valid email address.  ### Postcondition: An email is sent to the provided address, with a list of account user names connected to it.  ### Further Information: None. 
     * @param {module:model/RecoverUserNameRequest} recoverUserNameRequest 
     * @param {module:api/AuthApi~recoverUserNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recoverUserName(recoverUserNameRequest, callback) {
      let postBody = recoverUserNameRequest;
      // verify the required parameter 'recoverUserNameRequest' is set
      if (recoverUserNameRequest === undefined || recoverUserNameRequest === null) {
        throw new Error("Missing the required parameter 'recoverUserNameRequest' when calling recoverUserName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/auth/recover_username', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPasswordReset operation.
     * @callback module:api/AuthApi~requestPasswordResetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request password reset
     * ### Description:   Request an email with a password reset token for a certain user to reset password.  ### Precondition: Registered user account.  ### Postcondition: Provided user receives email with password reset token.  ### Further Information: None.
     * @param {module:model/ResetPasswordRequest} resetPasswordRequest 
     * @param {module:api/AuthApi~requestPasswordResetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestPasswordReset(resetPasswordRequest, callback) {
      let postBody = resetPasswordRequest;
      // verify the required parameter 'resetPasswordRequest' is set
      if (resetPasswordRequest === undefined || resetPasswordRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordRequest' when calling requestPasswordReset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/auth/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/AuthApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset password
     * ### Description:   Resets user's password.  ### Precondition: User received a password reset token.  ### Postcondition: User's password is reset to the provided password.  ### Further Information: Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
     * @param {String} token Password reset token
     * @param {module:model/ResetPasswordWithTokenRequest} resetPasswordWithTokenRequest 
     * @param {module:api/AuthApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPassword(token, resetPasswordWithTokenRequest, callback) {
      let postBody = resetPasswordWithTokenRequest;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling resetPassword");
      }
      // verify the required parameter 'resetPasswordWithTokenRequest' is set
      if (resetPasswordWithTokenRequest === undefined || resetPasswordWithTokenRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordWithTokenRequest' when calling resetPassword");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/auth/reset_password/{token}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateResetPasswordToken operation.
     * @callback module:api/AuthApi~validateResetPasswordTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResetPasswordTokenValidateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate information for password reset
     * ### Description:   Request all information for a password change dialogue e.g. real name of user.  ### Precondition: User received a password reset token.  ### Postcondition: Context information is returned.  ### Further Information: None.
     * @param {String} token Password reset token
     * @param {module:api/AuthApi~validateResetPasswordTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResetPasswordTokenValidateResponse}
     */
    validateResetPasswordToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling validateResetPasswordToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResetPasswordTokenValidateResponse;
      return this.apiClient.callApi(
        '/v4/auth/reset_password/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
