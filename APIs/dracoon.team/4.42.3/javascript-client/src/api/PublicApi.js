/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveDirectoryAuthInfo from '../model/ActiveDirectoryAuthInfo';
import ChunkUploadResponse from '../model/ChunkUploadResponse';
import CompleteS3ShareUploadRequest from '../model/CompleteS3ShareUploadRequest';
import CreateShareUploadChannelRequest from '../model/CreateShareUploadChannelRequest';
import CreateShareUploadChannelResponse from '../model/CreateShareUploadChannelResponse';
import ErrorResponse from '../model/ErrorResponse';
import GeneratePresignedUrlsRequest from '../model/GeneratePresignedUrlsRequest';
import OpenIdAuthInfo from '../model/OpenIdAuthInfo';
import PresignedUrlList from '../model/PresignedUrlList';
import PublicDownloadShare from '../model/PublicDownloadShare';
import PublicDownloadTokenGenerateRequest from '../model/PublicDownloadTokenGenerateRequest';
import PublicDownloadTokenGenerateResponse from '../model/PublicDownloadTokenGenerateResponse';
import PublicUploadShare from '../model/PublicUploadShare';
import PublicUploadedFileData from '../model/PublicUploadedFileData';
import S3ShareUploadStatus from '../model/S3ShareUploadStatus';
import SdsServerTime from '../model/SdsServerTime';
import SoftwareVersionData from '../model/SoftwareVersionData';
import SystemInfo from '../model/SystemInfo';
import ThirdPartyDependenciesData from '../model/ThirdPartyDependenciesData';
import UserFileKeyList from '../model/UserFileKeyList';

/**
* Public service.
* @module api/PublicApi
* @version 4.42.3
*/
export default class PublicApi {

    /**
    * Constructs a new PublicApi. 
    * @alias module:api/PublicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelFileUploadViaShare operation.
     * @callback module:api/PublicApi~cancelFileUploadViaShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel file upload
     * ### Description: Abort (chunked) upload via Upload Share.  ### Precondition: Valid Upload ID.  ### Postcondition: Aborts upload and invalidates upload ID / token.  ### Further Information: None.
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {module:api/PublicApi~cancelFileUploadViaShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelFileUploadViaShare(accessKey, uploadId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling cancelFileUploadViaShare");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling cancelFileUploadViaShare");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkPublicDownloadSharePassword operation.
     * @callback module:api/PublicApi~checkPublicDownloadSharePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check public Download Share password
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.36.0</h3>  ### Description: Check password for a public Download Share  ### Precondition: None.  ### Postcondition: None.  ### Further Information: None.
     * @param {String} accessKey Access key
     * @param {Object} opts Optional parameters
     * @param {String} [password] Download share password
     * @param {module:api/PublicApi~checkPublicDownloadSharePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    checkPublicDownloadSharePassword(accessKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling checkPublicDownloadSharePassword");
      }

      let pathParams = {
        'access_key': accessKey
      };
      let queryParams = {
        'password': opts['password']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/public/shares/downloads/{access_key}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeFileUploadViaShare operation.
     * @callback module:api/PublicApi~completeFileUploadViaShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicUploadedFileData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete file upload
     * ### Description: Finalize (chunked) upload via Upload Share.  ### Precondition: Valid upload ID.   Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>  ### Postcondition: Finalizes upload.  ### Further Information: Chunked uploads (range requests) are supported.    Please ensure that all chunks have been transferred correctly before finishing the upload.   If file hash has been created in time a `201 Created` will be responded and hash will be part of response, otherwise it will be a `202 Accepted` without it. 
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:model/UserFileKeyList} [userFileKeyList] 
     * @param {module:api/PublicApi~completeFileUploadViaShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicUploadedFileData}
     */
    completeFileUploadViaShare(accessKey, uploadId, opts, callback) {
      opts = opts || {};
      let postBody = opts['userFileKeyList'];
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling completeFileUploadViaShare");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling completeFileUploadViaShare");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicUploadedFileData;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the completeS3FileUploadViaShare operation.
     * @callback module:api/PublicApi~completeS3FileUploadViaShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Finishes a S3 file upload and closes the corresponding upload channel.  ### Precondition: Valid upload ID.   Only returns users that owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>  ### Postcondition: Upload channel is closed. S3 multipart upload request is completed.  ### Further Information: None. 
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {module:model/CompleteS3ShareUploadRequest} completeS3ShareUploadRequest 
     * @param {module:api/PublicApi~completeS3FileUploadViaShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    completeS3FileUploadViaShare(accessKey, uploadId, completeS3ShareUploadRequest, callback) {
      let postBody = completeS3ShareUploadRequest;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling completeS3FileUploadViaShare");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling completeS3FileUploadViaShare");
      }
      // verify the required parameter 'completeS3ShareUploadRequest' is set
      if (completeS3ShareUploadRequest === undefined || completeS3ShareUploadRequest === null) {
        throw new Error("Missing the required parameter 'completeS3ShareUploadRequest' when calling completeS3FileUploadViaShare");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}/s3', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createShareUploadChannel operation.
     * @callback module:api/PublicApi~createShareUploadChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateShareUploadChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new file upload channel
     * ### Description:   Create a new upload channel.  ### Precondition: None.  ### Postcondition: Upload channel is created and corresponding upload URL, token & upload ID are returned.  ### Further Information: Use `uploadUrl` the upload `token` is deprecated.    Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {String} accessKey Access key
     * @param {module:model/CreateShareUploadChannelRequest} createShareUploadChannelRequest 
     * @param {module:api/PublicApi~createShareUploadChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateShareUploadChannelResponse}
     */
    createShareUploadChannel(accessKey, createShareUploadChannelRequest, callback) {
      let postBody = createShareUploadChannelRequest;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling createShareUploadChannel");
      }
      // verify the required parameter 'createShareUploadChannelRequest' is set
      if (createShareUploadChannelRequest === undefined || createShareUploadChannelRequest === null) {
        throw new Error("Missing the required parameter 'createShareUploadChannelRequest' when calling createShareUploadChannel");
      }

      let pathParams = {
        'access_key': accessKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateShareUploadChannelResponse;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileViaTokenPublic operation.
     * @callback module:api/PublicApi~downloadFileViaTokenPublicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file with token
     * ### Description:   Download a file (or zip archive if target is a folder or room).  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.   Range requests are illegal for zip archive download.
     * @param {String} accessKey Access key
     * @param {String} token Download token
     * @param {Object} opts Optional parameters
     * @param {String} [range] Range   e.g. `bytes=0-999`
     * @param {Boolean} [genericMimetype] Always return `application/octet-stream` instead of specific mimetype
     * @param {Boolean} [inline] Use Content-Disposition: `inline` instead of `attachment`
     * @param {module:api/PublicApi~downloadFileViaTokenPublicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadFileViaTokenPublic(accessKey, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling downloadFileViaTokenPublic");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling downloadFileViaTokenPublic");
      }

      let pathParams = {
        'access_key': accessKey,
        'token': token
      };
      let queryParams = {
        'generic_mimetype': opts['genericMimetype'],
        'inline': opts['inline']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/public/shares/downloads/{access_key}/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadFileViaTokenPublic1 operation.
     * @callback module:api/PublicApi~downloadFileViaTokenPublic1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file with token
     * ### Description:   Download a file (or zip archive if target is a folder or room).  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.   Range requests are illegal for zip archive download.
     * @param {String} accessKey Access key
     * @param {String} token Download token
     * @param {Object} opts Optional parameters
     * @param {String} [range] Range   e.g. `bytes=0-999`
     * @param {Boolean} [genericMimetype] Always return `application/octet-stream` instead of specific mimetype
     * @param {Boolean} [inline] Use Content-Disposition: `inline` instead of `attachment`
     * @param {module:api/PublicApi~downloadFileViaTokenPublic1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadFileViaTokenPublic1(accessKey, token, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling downloadFileViaTokenPublic1");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling downloadFileViaTokenPublic1");
      }

      let pathParams = {
        'access_key': accessKey,
        'token': token
      };
      let queryParams = {
        'generic_mimetype': opts['genericMimetype'],
        'inline': opts['inline']
      };
      let headerParams = {
        'Range': opts['range']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/public/shares/downloads/{access_key}/{token}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generateDownloadUrlPublic operation.
     * @callback module:api/PublicApi~generateDownloadUrlPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicDownloadTokenGenerateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate download URL
     * ### Description: Generate a download URL to retrieve a shared file.  ### Precondition: None.  ### Postcondition: Download URL and token are generated and returned.  ### Further Information: Use `downloadUrl` the download `token` is deprecated.
     * @param {String} accessKey Access key
     * @param {Object} opts Optional parameters
     * @param {module:model/PublicDownloadTokenGenerateRequest} [publicDownloadTokenGenerateRequest] 
     * @param {module:api/PublicApi~generateDownloadUrlPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicDownloadTokenGenerateResponse}
     */
    generateDownloadUrlPublic(accessKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['publicDownloadTokenGenerateRequest'];
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling generateDownloadUrlPublic");
      }

      let pathParams = {
        'access_key': accessKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PublicDownloadTokenGenerateResponse;
      return this.apiClient.callApi(
        '/v4/public/shares/downloads/{access_key}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the generatePresignedUrlsPublic operation.
     * @callback module:api/PublicApi~generatePresignedUrlsPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PresignedUrlList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate presigned URLs for S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Generate presigned URLs for S3 file upload.  ### Precondition: Valid upload ID  ### Postcondition: List of presigned URLs is returned.  ### Further Information: The size for each part must be >= 5 MB, except for the last part.   The part number of the first part in S3 is 1 (not 0).   Use HTTP method `PUT` for uploading bytes via presigned URL.
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {module:model/GeneratePresignedUrlsRequest} generatePresignedUrlsRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~generatePresignedUrlsPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PresignedUrlList}
     */
    generatePresignedUrlsPublic(accessKey, uploadId, generatePresignedUrlsRequest, opts, callback) {
      opts = opts || {};
      let postBody = generatePresignedUrlsRequest;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling generatePresignedUrlsPublic");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling generatePresignedUrlsPublic");
      }
      // verify the required parameter 'generatePresignedUrlsRequest' is set
      if (generatePresignedUrlsRequest === undefined || generatePresignedUrlsRequest === null) {
        throw new Error("Missing the required parameter 'generatePresignedUrlsRequest' when calling generatePresignedUrlsPublic");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PresignedUrlList;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestActiveDirectoryAuthInfo operation.
     * @callback module:api/PublicApi~requestActiveDirectoryAuthInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveDirectoryAuthInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Active Directory authentication information
     * ### Description:   Provides information about Active Directory authentication options.  ### Precondition: None.  ### Postcondition: Active Directory authentication options information is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isGlobalAvailable] Show only global available items
     * @param {module:api/PublicApi~requestActiveDirectoryAuthInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveDirectoryAuthInfo}
     */
    requestActiveDirectoryAuthInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_global_available': opts['isGlobalAvailable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveDirectoryAuthInfo;
      return this.apiClient.callApi(
        '/v4/public/system/info/auth/ad', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOpenIdAuthInfo operation.
     * @callback module:api/PublicApi~requestOpenIdAuthInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdAuthInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request OpenID Connect provider authentication information
     * ### Description:   Provides information about OpenID Connect authentication options.  ### Precondition: None.  ### Postcondition: OpenID Connect authentication options information is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isGlobalAvailable] Show only global available items
     * @param {module:api/PublicApi~requestOpenIdAuthInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdAuthInfo}
     */
    requestOpenIdAuthInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_global_available': opts['isGlobalAvailable']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenIdAuthInfo;
      return this.apiClient.callApi(
        '/v4/public/system/info/auth/openid', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPublicDownloadShareInfo operation.
     * @callback module:api/PublicApi~requestPublicDownloadShareInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicDownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request public Download Share information
     * ### Description:   Retrieve the public information of a Download Share.  ### Precondition: None.  ### Postcondition: Download Share information is returned.  ### Further Information: None.
     * @param {String} accessKey Access key
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~requestPublicDownloadShareInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicDownloadShare}
     */
    requestPublicDownloadShareInfo(accessKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling requestPublicDownloadShareInfo");
      }

      let pathParams = {
        'access_key': accessKey
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicDownloadShare;
      return this.apiClient.callApi(
        '/v4/public/shares/downloads/{access_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestPublicUploadShareInfo operation.
     * @callback module:api/PublicApi~requestPublicUploadShareInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicUploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request public Upload Share information
     * ### Description:   Provides information about the desired Upload Share.  ### Precondition: Only `userUserPublicKeyList` is returned to the users who owns one of the following permissions: <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage download share</span>, <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; manage upload share</span>  ### Postcondition: None.  ### Further Information: If no password is set, the returned information is reduced to the following attributes (if available):  * `name` * `createdAt` * `isProtected` * `isEncrypted` * `showUploadedFiles` * `userUserPublicKeyList` (if parent is end-to-end encrypted)  Only if the password is transmitted as `X-Sds-Share-Password` header, all values are returned. 
     * @param {String} accessKey Access key
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsSharePassword] Upload share password. Should be base64-encoded.  Plain X-Sds-Share-Passwords are *deprecated* and will be removed in the future
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~requestPublicUploadShareInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicUploadShare}
     */
    requestPublicUploadShareInfo(accessKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling requestPublicUploadShareInfo");
      }

      let pathParams = {
        'access_key': accessKey
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Share-Password': opts['xSdsSharePassword'],
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicUploadShare;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSoftwareVersion operation.
     * @callback module:api/PublicApi~requestSoftwareVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SoftwareVersionData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request software version information
     * ### Description:   Public software version information.  ### Precondition: None.  ### Postcondition: Sofware version information is returned.  ### Further Information: The version of DRACOON Server consists of two components: * **API** * **Core** (referred to as _\"Server\"_)  which are versioned individually.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~requestSoftwareVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SoftwareVersionData}
     */
    requestSoftwareVersion(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SoftwareVersionData;
      return this.apiClient.callApi(
        '/v4/public/software/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSystemInfo operation.
     * @callback module:api/PublicApi~requestSystemInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SystemInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request system information
     * ### Description:   Provides information about system.  ### Precondition: None.  ### Postcondition: System information is returned.  ### Further Information: Authentication methods are sorted by **priority** attribute.   Smaller values have higher priority.   Authentication method with highest priority is considered as default.  ### System information: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Setting | Description | Value | | :--- | :--- | :--- | | `languageDefault` | Defines which language should be default. | `ISO 639-1 code` | | `hideLoginInputFields` | Defines if login fields should be hidden. | `true or false` | | `s3Hosts` | List of available S3 hosts. | `String array` | | `s3EnforceDirectUpload` | Determines whether S3 direct upload is enforced or not. | `true or false` | | `useS3Storage` | Determines whether S3 Storage enabled and used. | `true or false` |  </details>  ### Authentication methods: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Authentication Method | Description | | :--- | :--- | | `basic` | **Basic** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their credentials stored in the database.<br>Formerly known as `sql`. | | `active_directory` | **Active Directory** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their Active Directory credentials. | | `radius` | **RADIUS** authentication globally allowed.<br>This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. | | `openid` | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. | | `hideLoginInputFields` | Determines whether input fields for login should be enabled | `true or false` |  </details>
     * @param {Object} opts Optional parameters
     * @param {Boolean} [isEnabled] Show only enabled authentication methods
     * @param {module:api/PublicApi~requestSystemInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SystemInfo}
     */
    requestSystemInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'is_enabled': opts['isEnabled']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SystemInfo;
      return this.apiClient.callApi(
        '/v4/public/system/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSystemTime operation.
     * @callback module:api/PublicApi~requestSystemTimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SdsServerTime} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request system time
     * ### Description:   Retrieve the actual server time.  ### Precondition: None.  ### Postcondition: Server time is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~requestSystemTimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SdsServerTime}
     */
    requestSystemTime(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SdsServerTime;
      return this.apiClient.callApi(
        '/v4/public/time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestThirdPartyDependencies operation.
     * @callback module:api/PublicApi~requestThirdPartyDependenciesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ThirdPartyDependenciesData>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request third-party software dependencies
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Provides information about used third-party software dependencies.  ### Precondition: None.  ### Postcondition: List of the third-party software dependencies used by **DRACOON Core** (referred to as _\"Server\"_) is returned.  ### Further Information: None.  
     * @param {module:api/PublicApi~requestThirdPartyDependenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ThirdPartyDependenciesData>}
     */
    requestThirdPartyDependencies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ThirdPartyDependenciesData];
      return this.apiClient.callApi(
        '/v4/public/software/third_party_dependencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUploadStatusPublic operation.
     * @callback module:api/PublicApi~requestUploadStatusPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3ShareUploadStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request status of S3 file upload
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.15.0</h3>  ### Description: Request status of a S3 file upload.  ### Precondition: An upload channel has been created and the user has <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; create</span> permissions in the parent container (room or folder).  ### Postcondition: Status of S3 multipart upload request is returned.  ### Further Information: None.  ### Possible errors: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Http Status | Error Code | Description | | :--- | :--- | :--- | | `400 Bad Request` | `-80000` | Mandatory fields cannot be empty | | `400 Bad Request` | `-80001` | Invalid positive number | | `400 Bad Request` | `-80002` | Invalid number | | `400 Bad Request` | `-40001` | (Target) room is not encrypted | | `400 Bad Request` | `-40755` | Bad file name | | `400 Bad Request` | `-40763` | File key must be set for an upload into encrypted room | | `400 Bad Request` | `-50506` | Exceeds the number of files for this Upload Share | | `403 Forbidden` |  | Access denied | | `404 Not Found` | `-20501` | Upload not found | | `404 Not Found` | `-40000` | Container not found | | `404 Not Found` | `-41000` | Node not found | | `404 Not Found` | `-70501` | User not found | | `409 Conflict` | `-40010` | Container cannot be overwritten | | `409 Conflict` |  | File cannot be overwritten | | `500 Internal Server Error` |  | System Error | | `502 Bad Gateway` |  | S3 Error | | `502 Insufficient Storage` | `-50504` | Exceeds the quota for this Upload Share | | `502 Insufficient Storage` | `-40200` | Exceeds the free node quota in room | | `502 Insufficient Storage` | `-90200` | Exceeds the free customer quota | | `502 Insufficient Storage` | `-90201` | Exceeds the free customer physical disk space |  </details>
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {module:api/PublicApi~requestUploadStatusPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3ShareUploadStatus}
     */
    requestUploadStatusPublic(accessKey, uploadId, callback) {
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling requestUploadStatusPublic");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling requestUploadStatusPublic");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3ShareUploadStatus;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFileAsMultipartPublic1 operation.
     * @callback module:api/PublicApi~uploadFileAsMultipartPublic1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChunkUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * ### Description:   Chunked upload of files via Upload Share.  ### Precondition: Valid upload ID.  ### Postcondition: Chunk of file is uploaded.  ### Further Information: Chunked uploads (range requests) are supported.  Following `Content-Types` are supported by this API: * `multipart/form-data` * provided `Content-Type`    For both file upload types set the correct `Content-Type` header and body.    ### Examples:    * `multipart/form-data` ``` POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1  Header: ... Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW ...  Body: ------WebKitFormBoundary7MA4YWxkTrZu0gW Content-Disposition: form-data; name=\"file\"; filename=\"file.txt\" Content-Type: text/plain  Content of file.txt ------WebKitFormBoundary7MA4YWxkTrZu0gW-- ```  * any other `Content-Type`   ``` POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1  Header: ... Content-Type: { ... } ...  Body: raw content ```
     * @param {String} accessKey Access key
     * @param {String} uploadId Upload channel ID
     * @param {File} file File
     * @param {Object} opts Optional parameters
     * @param {String} [contentRange] Content-Range   e.g. `bytes 0-999/3980`
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {module:api/PublicApi~uploadFileAsMultipartPublic1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChunkUploadResponse}
     */
    uploadFileAsMultipartPublic1(accessKey, uploadId, file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessKey' is set
      if (accessKey === undefined || accessKey === null) {
        throw new Error("Missing the required parameter 'accessKey' when calling uploadFileAsMultipartPublic1");
      }
      // verify the required parameter 'uploadId' is set
      if (uploadId === undefined || uploadId === null) {
        throw new Error("Missing the required parameter 'uploadId' when calling uploadFileAsMultipartPublic1");
      }
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadFileAsMultipartPublic1");
      }

      let pathParams = {
        'access_key': accessKey,
        'upload_id': uploadId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Range': opts['contentRange'],
        'X-Sds-Date-Format': opts['xSdsDateFormat']
      };
      let formParams = {
        'file': file
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ChunkUploadResponse;
      return this.apiClient.callApi(
        '/v4/public/shares/uploads/{access_key}/{upload_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
