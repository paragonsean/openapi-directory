/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Avatar from '../model/Avatar';
import ErrorResponse from '../model/ErrorResponse';
import NotificationScopeList from '../model/NotificationScopeList';

/**
* Resources service.
* @module api/ResourcesApi
* @version 4.42.3
*/
export default class ResourcesApi {

    /**
    * Constructs a new ResourcesApi. 
    * @alias module:api/ResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the requestSubscriptionScopes operation.
     * @callback module:api/ResourcesApi~requestSubscriptionScopesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationScopeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of subscription scopes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description: Retrieve a list of subscription scopes.  ### Precondition: Authenticated user.  ### Postcondition: List of scopes is returned.  ### Further Information: None.
     * @param {module:api/ResourcesApi~requestSubscriptionScopesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationScopeList}
     */
    requestSubscriptionScopes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationScopeList;
      return this.apiClient.callApi(
        '/v4/resources/user/notifications/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUserAvatar operation.
     * @callback module:api/ResourcesApi~requestUserAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user avatar
     * ### Description: Get user avatar.  ### Precondition: Valid user ID and avatar UUID  ### Postcondition: Avatar is returned.  ### Further Information: None.
     * @param {String} uuid UUID of the avatar
     * @param {Number} userId User ID
     * @param {module:api/ResourcesApi~requestUserAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    requestUserAvatar(uuid, userId, callback) {
      let postBody = null;
      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling requestUserAvatar");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling requestUserAvatar");
      }

      let pathParams = {
        'uuid': uuid,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/v4/resources/users/{user_id}/avatar/{uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
