/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import S3Config from '../model/S3Config';
import S3ConfigCreateRequest from '../model/S3ConfigCreateRequest';
import S3ConfigUpdateRequest from '../model/S3ConfigUpdateRequest';
import S3Tag from '../model/S3Tag';
import S3TagCreateRequest from '../model/S3TagCreateRequest';
import S3TagList from '../model/S3TagList';

/**
* SystemStorageConfig service.
* @module api/SystemStorageConfigApi
* @version 4.42.3
*/
export default class SystemStorageConfigApi {

    /**
    * Constructs a new SystemStorageConfigApi. 
    * @alias module:api/SystemStorageConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createS3Config operation.
     * @callback module:api/SystemStorageConfigApi~createS3ConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3Config} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create S3 storage configuration
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description:   Create new S3 configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: New S3 configuration is created.  ### Further Information: Forbidden characters in bucket names: [`.`]   `bucketName` and `endpointUrl` are deprecated, use `bucketUrl` instead.  ### Virtual hosted style access  Example: https://<span style=\"color:red;\">bucket-name</span>.s3.<span style=\"color:red;\">region</span>.amazonaws.com/<span style=\"color:red;\">key-name</span> 
     * @param {module:model/S3ConfigCreateRequest} s3ConfigCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~createS3ConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3Config}
     */
    createS3Config(s3ConfigCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = s3ConfigCreateRequest;
      // verify the required parameter 's3ConfigCreateRequest' is set
      if (s3ConfigCreateRequest === undefined || s3ConfigCreateRequest === null) {
        throw new Error("Missing the required parameter 's3ConfigCreateRequest' when calling createS3Config");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = S3Config;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createS3Tag operation.
     * @callback module:api/SystemStorageConfigApi~createS3TagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create S3 tag
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Create new S3 tag.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: New S3 tag is created.  ### Further Information: * Maximum key length: **128** characters.   * Maximum value length: **256** characters.   * Both S3 tag key and value are **case-sensitive** strings.   * Maximum of **20 mandatory S3 tags** is allowed.
     * @param {module:model/S3TagCreateRequest} s3TagCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~createS3TagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3Tag}
     */
    createS3Tag(s3TagCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = s3TagCreateRequest;
      // verify the required parameter 's3TagCreateRequest' is set
      if (s3TagCreateRequest === undefined || s3TagCreateRequest === null) {
        throw new Error("Missing the required parameter 's3TagCreateRequest' when calling createS3Tag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = S3Tag;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeS3Tag operation.
     * @callback module:api/SystemStorageConfigApi~removeS3TagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove S3 tag
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Delete S3 tag.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: S3 tag gets deleted.  ### Further Information: None.
     * @param {Number} id S3 tag ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~removeS3TagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeS3Tag(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeS3Tag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3/tags/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the request3Config operation.
     * @callback module:api/SystemStorageConfigApi~request3ConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3Config} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request S3 storage configuration
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description:   Retrieve S3 configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: S3 configuration is returned.  ### Further Information: None.  ### Virtual hosted style access  Example: https://<span style=\"color:red;\">bucket-name</span>.s3.<span style=\"color:red;\">region</span>.amazonaws.com/<span style=\"color:red;\">key-name</span> 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~request3ConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3Config}
     */
    request3Config(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3Config;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestS3Tag operation.
     * @callback module:api/SystemStorageConfigApi~requestS3TagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request S3 tag
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Retrieve single S3 tag.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: S3 tag is returned.  ### Further Information: None.
     * @param {Number} id S3 tag ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~requestS3TagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3Tag}
     */
    requestS3Tag(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling requestS3Tag");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3Tag;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3/tags/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestS3TagList operation.
     * @callback module:api/SystemStorageConfigApi~requestS3TagListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3TagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of configured S3 tags
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.9.0</h3>  ### Description:   Retrieve all configured S3 tags.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: S3 tags are returned.  ### Further Information: An empty list is returned if no S3 tags are found / configured.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~requestS3TagListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3TagList}
     */
    requestS3TagList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = S3TagList;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateS3Config operation.
     * @callback module:api/SystemStorageConfigApi~updateS3ConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/S3Config} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update S3 storage configuration
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.3.0</h3>  ### Description:   Update existing S3 configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: S3 configuration is updated.  ### Further Information: Forbidden characters in bucket names: [`.`]   `bucketName` and `endpointUrl` are deprecated, use `bucketUrl` instead.  ### Virtual hosted style access  Example: https://<span style=\"color:red;\">bucket-name</span>.s3.<span style=\"color:red;\">region</span>.amazonaws.com/<span style=\"color:red;\">key-name</span> 
     * @param {module:model/S3ConfigUpdateRequest} s3ConfigUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemStorageConfigApi~updateS3ConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/S3Config}
     */
    updateS3Config(s3ConfigUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = s3ConfigUpdateRequest;
      // verify the required parameter 's3ConfigUpdateRequest' is set
      if (s3ConfigUpdateRequest === undefined || s3ConfigUpdateRequest === null) {
        throw new Error("Missing the required parameter 's3ConfigUpdateRequest' when calling updateS3Config");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = S3Config;
      return this.apiClient.callApi(
        '/v4/system/config/storage/s3', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
