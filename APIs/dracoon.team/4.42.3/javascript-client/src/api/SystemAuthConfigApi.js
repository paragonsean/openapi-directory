/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActiveDirectoryConfig from '../model/ActiveDirectoryConfig';
import ActiveDirectoryConfigList from '../model/ActiveDirectoryConfigList';
import CreateActiveDirectoryConfigRequest from '../model/CreateActiveDirectoryConfigRequest';
import CreateOAuthClientRequest from '../model/CreateOAuthClientRequest';
import CreateOpenIdIdpConfigRequest from '../model/CreateOpenIdIdpConfigRequest';
import ErrorResponse from '../model/ErrorResponse';
import OAuthClient from '../model/OAuthClient';
import OpenIdIdpConfig from '../model/OpenIdIdpConfig';
import RadiusConfig from '../model/RadiusConfig';
import RadiusConfigCreateRequest from '../model/RadiusConfigCreateRequest';
import RadiusConfigUpdateRequest from '../model/RadiusConfigUpdateRequest';
import ResetPassword400Response from '../model/ResetPassword400Response';
import TestActiveDirectoryConfigRequest from '../model/TestActiveDirectoryConfigRequest';
import TestActiveDirectoryConfigResponse from '../model/TestActiveDirectoryConfigResponse';
import UpdateActiveDirectoryConfigRequest from '../model/UpdateActiveDirectoryConfigRequest';
import UpdateOAuthClientRequest from '../model/UpdateOAuthClientRequest';
import UpdateOpenIdIdpConfigRequest from '../model/UpdateOpenIdIdpConfigRequest';

/**
* SystemAuthConfig service.
* @module api/SystemAuthConfigApi
* @version 4.42.3
*/
export default class SystemAuthConfigApi {

    /**
    * Constructs a new SystemAuthConfigApi. 
    * @alias module:api/SystemAuthConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAdConfig operation.
     * @callback module:api/SystemAuthConfigApi~createAdConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveDirectoryConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Active Directory configuration
     * ### Description: Create a new Active Directory configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.  ### Postcondition: New Active Directory configuration created.  ### Further Information: None.
     * @param {module:model/CreateActiveDirectoryConfigRequest} createActiveDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~createAdConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveDirectoryConfig}
     */
    createAdConfig(createActiveDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createActiveDirectoryConfigRequest;
      // verify the required parameter 'createActiveDirectoryConfigRequest' is set
      if (createActiveDirectoryConfigRequest === undefined || createActiveDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'createActiveDirectoryConfigRequest' when calling createAdConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActiveDirectoryConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/ads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOAuthClient operation.
     * @callback module:api/SystemAuthConfigApi~createOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuthClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create OAuth client
     * ### Description: Create a new OAuth client.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: New OAuth client created.  ### Further Information:   Client secret **MUST** have:   * at least 12 characters, at most 32 characters   * only lower case characters, upper case characters and digits   * at least 1 lower case character, 1 upper case character and 1 digit    The client secret is optional and will be generated if it is left empty.    Valid grant types are:   * `authorization_code`   * `implicit`   * `password`   * `client_credentials`   * `refresh_token`    Grant type `client_credentials` is currently **NOT** permitted!  Allowed characters for client ID are: `[a-zA-Z0-9_-]`  If grant types `authorization_code` or `implicit` are used, a redirect URI **MUST** be provided!  Default access token validity: **8 hours**   Default refresh token validity: **30 days** Default approval validity: **Â½ year**
     * @param {module:model/CreateOAuthClientRequest} createOAuthClientRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~createOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthClient}
     */
    createOAuthClient(createOAuthClientRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOAuthClientRequest;
      // verify the required parameter 'createOAuthClientRequest' is set
      if (createOAuthClientRequest === undefined || createOAuthClientRequest === null) {
        throw new Error("Missing the required parameter 'createOAuthClientRequest' when calling createOAuthClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OAuthClient;
      return this.apiClient.callApi(
        '/v4/system/config/oauth/clients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createOpenIdIdpConfig operation.
     * @callback module:api/SystemAuthConfigApi~createOpenIdIdpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdIdpConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create OpenID Connect IDP configuration
     * ### Description: Create new OpenID Connect IDP configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: New OpenID Connect IDP configuration is created.  ### Further Information: None.
     * @param {module:model/CreateOpenIdIdpConfigRequest} createOpenIdIdpConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~createOpenIdIdpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdIdpConfig}
     */
    createOpenIdIdpConfig(createOpenIdIdpConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = createOpenIdIdpConfigRequest;
      // verify the required parameter 'createOpenIdIdpConfigRequest' is set
      if (createOpenIdIdpConfigRequest === undefined || createOpenIdIdpConfigRequest === null) {
        throw new Error("Missing the required parameter 'createOpenIdIdpConfigRequest' when calling createOpenIdIdpConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenIdIdpConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/openid/idps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRadiusConfig operation.
     * @callback module:api/SystemAuthConfigApi~createRadiusConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RadiusConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create RADIUS configuration
     * ### Description:   Create new RADIUS configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: New RADIUS configuration is created.  ### Further Information: None.
     * @param {module:model/RadiusConfigCreateRequest} radiusConfigCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~createRadiusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RadiusConfig}
     */
    createRadiusConfig(radiusConfigCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = radiusConfigCreateRequest;
      // verify the required parameter 'radiusConfigCreateRequest' is set
      if (radiusConfigCreateRequest === undefined || radiusConfigCreateRequest === null) {
        throw new Error("Missing the required parameter 'radiusConfigCreateRequest' when calling createRadiusConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RadiusConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/radius', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeAdConfig operation.
     * @callback module:api/SystemAuthConfigApi~removeAdConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove Active Directory configuration
     * ### Description: Delete an existing Active Directory configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.  ### Postcondition: Active Directory configuration is removed.  ### Further Information: None.
     * @param {Number} adId Active Directory ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~removeAdConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeAdConfig(adId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adId' is set
      if (adId === undefined || adId === null) {
        throw new Error("Missing the required parameter 'adId' when calling removeAdConfig");
      }

      let pathParams = {
        'ad_id': adId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/auth/ads/{ad_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOAuthClient operation.
     * @callback module:api/SystemAuthConfigApi~removeOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove OAuth client
     * ### Description: Delete an existing OAuth client.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OAuth client is removed.  ### Further Information: None.
     * @param {String} clientId OAuth client ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~removeOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeOAuthClient(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling removeOAuthClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/oauth/clients/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOpenIdIdpConfig operation.
     * @callback module:api/SystemAuthConfigApi~removeOpenIdIdpConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove OpenID Connect IDP configuration
     * ### Description: Delete an existing OpenID Connect IDP configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is removed.  ### Further Information: None.
     * @param {Number} idpId OpenID Connect IDP configuration ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~removeOpenIdIdpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeOpenIdIdpConfig(idpId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling removeOpenIdIdpConfig");
      }

      let pathParams = {
        'idp_id': idpId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/auth/openid/idps/{idp_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeRadiusConfig operation.
     * @callback module:api/SystemAuthConfigApi~removeRadiusConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove RADIUS configuration
     * ### Description:   Delete existing RADIUS configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: RADIUS configuration is deleted.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~removeRadiusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeRadiusConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/auth/radius', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAdConfig operation.
     * @callback module:api/SystemAuthConfigApi~requestAdConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveDirectoryConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Active Directory configuration
     * ### Description:   Retrieve the configuration of an Active Directory.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.  ### Postcondition: Active Directory configuration is returned.  ### Further Information: None.
     * @param {Number} adId Active Directory ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestAdConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveDirectoryConfig}
     */
    requestAdConfig(adId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'adId' is set
      if (adId === undefined || adId === null) {
        throw new Error("Missing the required parameter 'adId' when calling requestAdConfig");
      }

      let pathParams = {
        'ad_id': adId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveDirectoryConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/ads/{ad_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAdConfigs operation.
     * @callback module:api/SystemAuthConfigApi~requestAdConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveDirectoryConfigList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of Active Directory configurations
     * ### Description:   Retrieve a list of configured Active Directories.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.  ### Postcondition: List of Active Directory configurations is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestAdConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveDirectoryConfigList}
     */
    requestAdConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActiveDirectoryConfigList;
      return this.apiClient.callApi(
        '/v4/system/config/auth/ads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOAuthClient operation.
     * @callback module:api/SystemAuthConfigApi~requestOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuthClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request OAuth client
     * ### Description:   Retrieve the configuration of an OAuth client.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OAuth client is returned.  ### Further Information: None.
     * @param {String} clientId OAuth client ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthClient}
     */
    requestOAuthClient(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling requestOAuthClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OAuthClient;
      return this.apiClient.callApi(
        '/v4/system/config/oauth/clients/{client_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOAuthClients operation.
     * @callback module:api/SystemAuthConfigApi~requestOAuthClientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuthClient>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of OAuth clients
     * ### Description:   Retrieve a list of configured OAuth clients.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: List of OAuth clients is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isStandard:eq:true`   Get standard OAuth clients.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `isStandard` | Standard client filter | `eq` |  | `true or false` | | `isExternal` | External client filter | `eq` |  | `true or false` | | `isEnabled` | Enabled/disabled clients filter | `eq` |  | `true or false` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `clientName:desc|isStandard:asc`   Sort by `clientName` descending **AND** `isStandard` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `clientName` | Client name | | `isStandard` | Is a standard client | | `isExternal` | Is a external client | | `isEnabled` | Is a enabled client |  </details>
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestOAuthClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuthClient>}
     */
    requestOAuthClients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OAuthClient];
      return this.apiClient.callApi(
        '/v4/system/config/oauth/clients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOpenIdIdpConfig operation.
     * @callback module:api/SystemAuthConfigApi~requestOpenIdIdpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdIdpConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request OpenID Connect IDP configuration
     * ### Description:   Retrieve an OpenID Connect IDP configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is returned.  ### Further Information: None.
     * @param {Number} idpId OpenID Connect IDP configuration ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestOpenIdIdpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdIdpConfig}
     */
    requestOpenIdIdpConfig(idpId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling requestOpenIdIdpConfig");
      }

      let pathParams = {
        'idp_id': idpId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenIdIdpConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/openid/idps/{idp_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOpenIdIdpConfigs operation.
     * @callback module:api/SystemAuthConfigApi~requestOpenIdIdpConfigsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OpenIdIdpConfig>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of OpenID Connect IDP configurations
     * ### Description:   Retrieve a list of configured OpenID Connect IDPs.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: List of OpenID Connect IDP configurations is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestOpenIdIdpConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OpenIdIdpConfig>}
     */
    requestOpenIdIdpConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OpenIdIdpConfig];
      return this.apiClient.callApi(
        '/v4/system/config/auth/openid/idps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestRadiusConfig operation.
     * @callback module:api/SystemAuthConfigApi~requestRadiusConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RadiusConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request RADIUS configuration
     * ### Description:   Retrieve a RADIUS configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: RADIUS configuration is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~requestRadiusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RadiusConfig}
     */
    requestRadiusConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RadiusConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/radius', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testAdConfig operation.
     * @callback module:api/SystemAuthConfigApi~testAdConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestActiveDirectoryConfigResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test Active Directory configuration
     * ### Description:   Test Active Directory configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.  ### Postcondition: Active Directory configuration is returned if successful.  ### Further Information: DRACOON tries to establish a connection with the provided information.
     * @param {module:model/TestActiveDirectoryConfigRequest} testActiveDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~testAdConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestActiveDirectoryConfigResponse}
     */
    testAdConfig(testActiveDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = testActiveDirectoryConfigRequest;
      // verify the required parameter 'testActiveDirectoryConfigRequest' is set
      if (testActiveDirectoryConfigRequest === undefined || testActiveDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'testActiveDirectoryConfigRequest' when calling testAdConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestActiveDirectoryConfigResponse;
      return this.apiClient.callApi(
        '/v4/system/config/actions/test/ad', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testRadiusConfig operation.
     * @callback module:api/SystemAuthConfigApi~testRadiusConfigCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test RADIUS server availability
     * ### Description:   Test RADIUS configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read global config</span> of the Provider Customer required.  ### Postcondition: RADIUS configuration is returned if successful.  ### Further Information: DRACOON tries to establish a connection with the provided information.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~testRadiusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     */
    testRadiusConfig(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/system/config/actions/test/radius', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAdConfig operation.
     * @callback module:api/SystemAuthConfigApi~updateAdConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActiveDirectoryConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Active Directory configuration
     * ### Description:   Update an existing Active Directory configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> of the Provider Customer required.  ### Postcondition: Active Directory configuration updated.  ### Further Information: None.
     * @param {Number} adId Active Directory ID
     * @param {module:model/UpdateActiveDirectoryConfigRequest} updateActiveDirectoryConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~updateAdConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActiveDirectoryConfig}
     */
    updateAdConfig(adId, updateActiveDirectoryConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateActiveDirectoryConfigRequest;
      // verify the required parameter 'adId' is set
      if (adId === undefined || adId === null) {
        throw new Error("Missing the required parameter 'adId' when calling updateAdConfig");
      }
      // verify the required parameter 'updateActiveDirectoryConfigRequest' is set
      if (updateActiveDirectoryConfigRequest === undefined || updateActiveDirectoryConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateActiveDirectoryConfigRequest' when calling updateAdConfig");
      }

      let pathParams = {
        'ad_id': adId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActiveDirectoryConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/ads/{ad_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOAuthClient operation.
     * @callback module:api/SystemAuthConfigApi~updateOAuthClientCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OAuthClient} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update OAuth client
     * ### Description:   Update an existing OAuth client.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OAuth client updated.  ### Further Information:   Client secret **MUST** have:   * at least 12 characters, at most 32 characters   * only lower case characters, upper case characters and digits   * at least 1 lower case character, 1 upper case character and 1 digit    The client secret is optional and will be generated if it is left empty.    Valid grant types are:   * `authorization_code`   * `implicit`   * `password`   * `client_credentials`   * `refresh_token`    Grant type `client_credentials` is currently **NOT** permitted!  If grant types `authorization_code` or `implicit` are used, a redirect URI **MUST** be provided! 
     * @param {String} clientId OAuth client ID
     * @param {module:model/UpdateOAuthClientRequest} updateOAuthClientRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~updateOAuthClientCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OAuthClient}
     */
    updateOAuthClient(clientId, updateOAuthClientRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOAuthClientRequest;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling updateOAuthClient");
      }
      // verify the required parameter 'updateOAuthClientRequest' is set
      if (updateOAuthClientRequest === undefined || updateOAuthClientRequest === null) {
        throw new Error("Missing the required parameter 'updateOAuthClientRequest' when calling updateOAuthClient");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OAuthClient;
      return this.apiClient.callApi(
        '/v4/system/config/oauth/clients/{client_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateOpenIdIdpConfig operation.
     * @callback module:api/SystemAuthConfigApi~updateOpenIdIdpConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenIdIdpConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update OpenID Connect IDP configuration
     * ### Description:   Update an existing OpenID Connect IDP configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is updated.  ### Further Information: None.
     * @param {Number} idpId OpenID Connect IDP configuration ID
     * @param {module:model/UpdateOpenIdIdpConfigRequest} updateOpenIdIdpConfigRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~updateOpenIdIdpConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenIdIdpConfig}
     */
    updateOpenIdIdpConfig(idpId, updateOpenIdIdpConfigRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateOpenIdIdpConfigRequest;
      // verify the required parameter 'idpId' is set
      if (idpId === undefined || idpId === null) {
        throw new Error("Missing the required parameter 'idpId' when calling updateOpenIdIdpConfig");
      }
      // verify the required parameter 'updateOpenIdIdpConfigRequest' is set
      if (updateOpenIdIdpConfigRequest === undefined || updateOpenIdIdpConfigRequest === null) {
        throw new Error("Missing the required parameter 'updateOpenIdIdpConfigRequest' when calling updateOpenIdIdpConfig");
      }

      let pathParams = {
        'idp_id': idpId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OpenIdIdpConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/openid/idps/{idp_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRadiusConfig operation.
     * @callback module:api/SystemAuthConfigApi~updateRadiusConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RadiusConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update RADIUS configuration
     * ### Description:   Update existing RADIUS configuration.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> of the Provider Customer required.  ### Postcondition: RADIUS configuration is updated.  ### Further Information: None.
     * @param {module:model/RadiusConfigUpdateRequest} radiusConfigUpdateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SystemAuthConfigApi~updateRadiusConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RadiusConfig}
     */
    updateRadiusConfig(radiusConfigUpdateRequest, opts, callback) {
      opts = opts || {};
      let postBody = radiusConfigUpdateRequest;
      // verify the required parameter 'radiusConfigUpdateRequest' is set
      if (radiusConfigUpdateRequest === undefined || radiusConfigUpdateRequest === null) {
        throw new Error("Missing the required parameter 'radiusConfigUpdateRequest' when calling updateRadiusConfig");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RadiusConfig;
      return this.apiClient.callApi(
        '/v4/system/config/auth/radius', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
