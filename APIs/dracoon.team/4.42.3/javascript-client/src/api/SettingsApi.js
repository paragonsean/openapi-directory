/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateKeyPairRequest from '../model/CreateKeyPairRequest';
import CreateWebhookRequest from '../model/CreateWebhookRequest';
import CustomerSettingsRequest from '../model/CustomerSettingsRequest';
import CustomerSettingsResponse from '../model/CustomerSettingsResponse';
import ErrorResponse from '../model/ErrorResponse';
import EventTypeList from '../model/EventTypeList';
import NotificationChannelActivationRequest from '../model/NotificationChannelActivationRequest';
import NotificationChannelList from '../model/NotificationChannelList';
import UpdateWebhookRequest from '../model/UpdateWebhookRequest';
import UserKeyPairContainer from '../model/UserKeyPairContainer';
import Webhook from '../model/Webhook';
import WebhookList from '../model/WebhookList';

/**
* Settings service.
* @module api/SettingsApi
* @version 4.42.3
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAndPreserveKeyPair operation.
     * @callback module:api/SettingsApi~createAndPreserveKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create system rescue key pair and preserve copy of old private key
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Create system rescue key pair and preserve copy of old private key.  ### Precondition: * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> * Existence of own key pair  ### Postcondition: System rescue key pair is created.   Copy of old private key is preserved.  ### Further Information: You can submit your old private key, encrypted with your current password.   This allows migrating file keys encrypted with your old key pair to the new one. 
     * @param {module:model/CreateKeyPairRequest} createKeyPairRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~createAndPreserveKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAndPreserveKeyPair(createKeyPairRequest, opts, callback) {
      opts = opts || {};
      let postBody = createKeyPairRequest;
      // verify the required parameter 'createKeyPairRequest' is set
      if (createKeyPairRequest === undefined || createKeyPairRequest === null) {
        throw new Error("Missing the required parameter 'createKeyPairRequest' when calling createAndPreserveKeyPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/settings/keypairs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWebhook operation.
     * @callback module:api/SettingsApi~createWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Create a new webhook for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Webhook is created for given event types.  ### Further Information: URL must begin with the `HTTPS` scheme.   Webhook names are limited to 150 characters.  ### Available event types: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Name | Description | Scope | | :--- | :--- | :--- | | **`user.created`** | Triggered when a new user is created | Customer Admin Webhook | | **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook | | **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook | |  |  |  | | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook | |  |  |  | | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook | | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook | | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook | | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook | | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook | | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook | | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook | | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook | | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook | | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook | | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook | | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |  </details>
     * @param {module:model/CreateWebhookRequest} createWebhookRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~createWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    createWebhook(createWebhookRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWebhookRequest;
      // verify the required parameter 'createWebhookRequest' is set
      if (createWebhookRequest === undefined || createWebhookRequest === null) {
        throw new Error("Missing the required parameter 'createWebhookRequest' when calling createWebhook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/settings/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSystemRescueKeyPair operation.
     * @callback module:api/SettingsApi~removeSystemRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove system rescue key pair
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Remove the system rescue key pair.  ### Precondition: * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> * Existence of own key pair  ### Postcondition: Key pair is removed (cf. further information below).  ### Further Information: Please set a new system rescue key pair first and re-encrypt file keys with it.   If no version is set, deleted key pair with lowest preference value.   Although, `version` **SHOULD** be set. 
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~removeSystemRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeSystemRescueKeyPair(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/settings/keypair', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWebhook operation.
     * @callback module:api/SettingsApi~removeWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Delete a webhook for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Webhook is deleted.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~removeWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWebhook(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling removeWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/settings/webhooks/{webhook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAllSystemRescueKeyPairs operation.
     * @callback module:api/SettingsApi~requestAllSystemRescueKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserKeyPairContainer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request all system rescue key pairs
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Retrieve all system rescue key pairs to allow migrating system-rescue-key-encrypted file keys.  ### Precondition: * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> * Existence of own key pair  ### Postcondition: List of key pairs is returned.  ### Further Information: In the case of an algorithm migration of a system rescue key, one should create the new key pair before deleting the old one.   This allows re-encrypting file keys with the new key pair, using the old one.    This API allows to retrieve both key pairs, in contrast to `GET /settings/keypair`, which only delivers the preferred one. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestAllSystemRescueKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserKeyPairContainer>}
     */
    requestAllSystemRescueKeyPairs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserKeyPairContainer];
      return this.apiClient.callApi(
        '/v4/settings/keypairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfEventTypesForConfigManager operation.
     * @callback module:api/SettingsApi~requestListOfEventTypesForConfigManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventTypeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of event types
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a list of available (for <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span>) event types.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: List of available event types is returned.  ### Further Information: None. 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestListOfEventTypesForConfigManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventTypeList}
     */
    requestListOfEventTypesForConfigManager(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EventTypeList;
      return this.apiClient.callApi(
        '/v4/settings/webhooks/event_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfWebhooks operation.
     * @callback module:api/SettingsApi~requestListOfWebhooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhookList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of webhooks
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a list of webhooks for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: List of webhooks is returned.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:cn:goo|createdAt:ge:2015-01-01`   Get webhooks where name contains `goo` **AND** webhook creation date is **>=** `2015-01-01`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`id`** | Webhook id filter | `eq` | Webhook id equals value.<br>Multiple values are allowed and will be connected via logical disjunction (**OR**). |`positive number`| | **`name`** | Webhook type name| `cn, eq` | Webhook name contains / equals value. | `search String` | | **`isEnabled`** | Webhook isEnabled filter | `eq` |  | `true or false` | | **`createdAt`** | Creation date filter | `ge, le` | Creation date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `createdAt:ge:2016-12-31`&#124;`createdAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`updatedAt`** | Last modification date filter | `ge, le` | Last modification date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `updatedAt:ge:2016-12-31`&#124;`updatedAt:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`expiration`** | Expiration date filter | `ge, le, eq` | Expiration date is greater / less equals than value.<br>Multiple operator values are allowed and will be connected via logical conjunction (**AND**).<br>e.g. `expiration:ge:2016-12-31`&#124;`expiration:le:2018-01-01` | `Date (yyyy-MM-dd)` | | **`lastFailStatus`** | Failure status filter | `eq` | Last HTTP status code. Set when a webhook is auto-disabled due to repeated delivery failures |`positive number`|  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `name:desc|isEnabled:asc`   Sort by `name` descending and `isEnabled` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`id`** | Webhook id | | **`name`** | Webhook name | | **`isEnabled`** | Webhook isEnabled | | **`createdAt`** | Creation date | | **`updatedAt`** | Last modification date | | **`expiration`** | Expiration date |  </details> 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestListOfWebhooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhookList}
     */
    requestListOfWebhooks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WebhookList;
      return this.apiClient.callApi(
        '/v4/settings/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestNotificationChannels operation.
     * @callback module:api/SettingsApi~requestNotificationChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationChannelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of notification channels
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Retrieve a list of configured notification channels.  ### Precondition: Right _\"change config\"_ required.  ### Postcondition: List of notification channels is returned.  ### Further Information: None. 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestNotificationChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationChannelList}
     */
    requestNotificationChannels(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationChannelList;
      return this.apiClient.callApi(
        '/v4/settings/notifications/channels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSettings operation.
     * @callback module:api/SettingsApi~requestSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request customer settings
     * ### Description:   Retrieve customer related settings.   ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; read config</span> required.  ### Postcondition: List of available settings is returned.  ### Further Information: None.  ### Configurable customer settings: <details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Setting | Description                                                                                                                                                           | Value | | :--- |:----------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- | | `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`.                                                          | `String` | | `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`.                                           | `positive Long` | | `homeRoomsActive` | If set to `true`, every user with an Active Directory account or OpenID Connect account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |   </details>
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerSettingsResponse}
     */
    requestSettings(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerSettingsResponse;
      return this.apiClient.callApi(
        '/v4/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSystemRescueKeyPair operation.
     * @callback module:api/SettingsApi~requestSystemRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserKeyPairContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request system rescue key pair
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Retrieve the system rescue key pair.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span>  ### Postcondition: Key pair is returned.  ### Further Information: If more than one key pair exists the one with highest preference value is returned. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestSystemRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserKeyPairContainer}
     */
    requestSystemRescueKeyPair(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserKeyPairContainer;
      return this.apiClient.callApi(
        '/v4/settings/keypair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestWebhook operation.
     * @callback module:api/SettingsApi~requestWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Get a specific webhook for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Webhook is returned.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~requestWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    requestWebhook(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling requestWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/settings/webhooks/{webhook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetWebhookLifetime operation.
     * @callback module:api/SettingsApi~resetWebhookLifetimeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset webhook lifetime
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Reset the lifetime of a webhook for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Lifetime of the webhook is reset.  ### Further Information: None.
     * @param {Number} webhookId Webhook ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~resetWebhookLifetimeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    resetWebhookLifetime(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling resetWebhookLifetime");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/settings/webhooks/{webhook_id}/reset_lifetime', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSettings operation.
     * @callback module:api/SettingsApi~setSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set customer settings
     * ### Description:   Set customer related settings.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change global config</span> and role <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128100; Config Manager</span> required.  ### Postcondition: Provided settings are updated.  ### Further Information: None.  ### Configurable customer settings <details open style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Setting | Description                                                                                                                                                          | Value | | :--- |:---------------------------------------------------------------------------------------------------------------------------------------------------------------------| :--- | | `homeRoomParentName` | Name of the container in which all user's home rooms are located.<br>`null` if `homeRoomsActive` is `false`.                                                         | `String` | | `homeRoomQuota` | Refers to the quota of each single user's home room.<br>`0` represents no quota.<br>`null` if `homeRoomsActive` is `false`.                                          | `positive Long` | | `homeRoomsActive` | If set to `true`, every user with an Active Directory account or OpenID Connect account gets a personal homeroom.<br>Once activated, this **CANNOT** be deactivated. | `true or false` |  </details>  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   `'CON', 'PRN', 'AUX', 'NUL', 'COM1', 'COM2', 'COM3', 'COM4', 'COM5', 'COM6', 'COM7', 'COM8', 'COM9', 'LPT1', 'LPT2', 'LPT3', 'LPT4', 'LPT5', 'LPT6', 'LPT7', 'LPT8', 'LPT9', (and any of those with an extension)` * Illegal characters in names:   `'\\\\', '<','>', ':', '\\\"', '|', '?', '*', '/', leading '-', trailing '.' ` 
     * @param {module:model/CustomerSettingsRequest} customerSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~setSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerSettingsResponse}
     */
    setSettings(customerSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = customerSettingsRequest;
      // verify the required parameter 'customerSettingsRequest' is set
      if (customerSettingsRequest === undefined || customerSettingsRequest === null) {
        throw new Error("Missing the required parameter 'customerSettingsRequest' when calling setSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerSettingsResponse;
      return this.apiClient.callApi(
        '/v4/settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setSystemRescueKeyPair operation.
     * @callback module:api/SettingsApi~setSystemRescueKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate client-side encryption for customer
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Set the system rescue key pair and activate client-side encryption for according customer.  ### Precondition: * Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> * Existence of own key pair  ### Postcondition: System rescue key pair is set and client-side encryption is enabled.  ### Further Information: Sets the ability for this customer to encrypt rooms.   Once enabled on customer level, it **CANNOT** be unset.   On activation, a customer rescue key pair **MUST** be set. 
     * @param {module:model/UserKeyPairContainer} userKeyPairContainer 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~setSystemRescueKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setSystemRescueKeyPair(userKeyPairContainer, opts, callback) {
      opts = opts || {};
      let postBody = userKeyPairContainer;
      // verify the required parameter 'userKeyPairContainer' is set
      if (userKeyPairContainer === undefined || userKeyPairContainer === null) {
        throw new Error("Missing the required parameter 'userKeyPairContainer' when calling setSystemRescueKeyPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/settings/keypair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the toggleNotificationChannels operation.
     * @callback module:api/SettingsApi~toggleNotificationChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationChannelList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle notification channels
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Toggle configured notification channels.  ### Precondition: Right _\"change config\"_ required.  ### Postcondition: Channel status is switched.  ### Further Information: None. 
     * @param {module:model/NotificationChannelActivationRequest} notificationChannelActivationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~toggleNotificationChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationChannelList}
     */
    toggleNotificationChannels(notificationChannelActivationRequest, opts, callback) {
      opts = opts || {};
      let postBody = notificationChannelActivationRequest;
      // verify the required parameter 'notificationChannelActivationRequest' is set
      if (notificationChannelActivationRequest === undefined || notificationChannelActivationRequest === null) {
        throw new Error("Missing the required parameter 'notificationChannelActivationRequest' when calling toggleNotificationChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationChannelList;
      return this.apiClient.callApi(
        '/v4/settings/notifications/channels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebhook operation.
     * @callback module:api/SettingsApi~updateWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Webhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update webhook
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.19.0</h3>  ### Description:   Update an existing webhook for the customer scope.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Webhook is updated.  ### Further Information: URL must begin with the `HTTPS` scheme. Webhook names are limited to 150 characters. Webhook event types can not be changed from Customer Admin Webhook types to Node Webhook types and vice versa    ### Available event types: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | Name | Description | Scope | | :--- | :--- | :--- | | **`user.created`** | Triggered when a new user is created | Customer Admin Webhook | | **`user.deleted`** | Triggered when a user is deleted | Customer Admin Webhook | | **`user.locked`** | Triggered when a user gets locked | Customer Admin Webhook | |  |  |  | | **`webhook.expiring`** | Triggered 30/20/10/1 days before a webhook expires |  Customer Admin Webhook | |  |  |  | | **`downloadshare.created`** | Triggered when a new download share is created in affected room | Node Webhook | | **`downloadshare.deleted`** | Triggered when a download share is deleted in affected room | Node Webhook | | **`downloadshare.used`** | Triggered when a download share is utilized in affected room | Node Webhook | | **`uploadshare.created`** | Triggered when a new upload share is created in affected room | Node Webhook | | **`uploadshare.deleted`** | Triggered when a upload share is deleted in affected room | Node Webhook | | **`uploadshare.used`** | Triggered when a new file is uploaded via the upload share in affected room | Node Webhook | | **`file.created`** | Triggered when a new file is uploaded in affected room | Node Webhook | | **`folder.created`** | Triggered when a new folder is created in affected room | Node Webhook | | **`room.created`** | Triggered when a new room is created (in affected room) | Node Webhook | | **`file.deleted`** | Triggered when a file is deleted in affected room | Node Webhook | | **`folder.deleted`** | Triggered when a folder is deleted in affected room | Node Webhook | | **`room.deleted`** | Triggered when a room is deleted in affected room | Node Webhook |  </details>
     * @param {Number} webhookId Webhook ID
     * @param {module:model/UpdateWebhookRequest} updateWebhookRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/SettingsApi~updateWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Webhook}
     */
    updateWebhook(webhookId, updateWebhookRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWebhookRequest;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling updateWebhook");
      }
      // verify the required parameter 'updateWebhookRequest' is set
      if (updateWebhookRequest === undefined || updateWebhookRequest === null) {
        throw new Error("Missing the required parameter 'updateWebhookRequest' when calling updateWebhook");
      }

      let pathParams = {
        'webhook_id': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Webhook;
      return this.apiClient.callApi(
        '/v4/settings/webhooks/{webhook_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
