/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AttributesResponse from '../model/AttributesResponse';
import Avatar from '../model/Avatar';
import ChangeUserPasswordRequest from '../model/ChangeUserPasswordRequest';
import CreateKeyPairRequest from '../model/CreateKeyPairRequest';
import CustomerData from '../model/CustomerData';
import EnableCustomerEncryptionRequest from '../model/EnableCustomerEncryptionRequest';
import ErrorResponse from '../model/ErrorResponse';
import MfaTotpConfirmationRequest from '../model/MfaTotpConfirmationRequest';
import NotificationConfig from '../model/NotificationConfig';
import NotificationConfigChangeRequest from '../model/NotificationConfigChangeRequest';
import NotificationConfigList from '../model/NotificationConfigList';
import OAuthApproval from '../model/OAuthApproval';
import OAuthAuthorization from '../model/OAuthAuthorization';
import ProfileAttributes from '../model/ProfileAttributes';
import ProfileAttributesRequest from '../model/ProfileAttributesRequest';
import ResetPassword400Response from '../model/ResetPassword400Response';
import SubscribedDownloadShare from '../model/SubscribedDownloadShare';
import SubscribedDownloadShareList from '../model/SubscribedDownloadShareList';
import SubscribedNode from '../model/SubscribedNode';
import SubscribedNodeList from '../model/SubscribedNodeList';
import SubscribedUploadShare from '../model/SubscribedUploadShare';
import SubscribedUploadShareList from '../model/SubscribedUploadShareList';
import TotpSetupResponse from '../model/TotpSetupResponse';
import UpdateSubscriptionsBulkRequest from '../model/UpdateSubscriptionsBulkRequest';
import UpdateUserAccountRequest from '../model/UpdateUserAccountRequest';
import UserAccount from '../model/UserAccount';
import UserKeyPairContainer from '../model/UserKeyPairContainer';
import UserMfaStatusResponse from '../model/UserMfaStatusResponse';

/**
* User service.
* @module api/UserApi
* @version 4.42.3
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeUserPassword operation.
     * @callback module:api/UserApi~changeUserPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change user's password
     * ### Description: Change the user's password.  ### Precondition: Authenticated user.  ### Postcondition: User's password is changed.  ### Further Information: The password **MUST** comply to configured password policies.    Forbidden characters in passwords: [`&`, `'`, `<`, `>`]
     * @param {module:model/ChangeUserPasswordRequest} changeUserPasswordRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~changeUserPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeUserPassword(changeUserPasswordRequest, opts, callback) {
      opts = opts || {};
      let postBody = changeUserPasswordRequest;
      // verify the required parameter 'changeUserPasswordRequest' is set
      if (changeUserPasswordRequest === undefined || changeUserPasswordRequest === null) {
        throw new Error("Missing the required parameter 'changeUserPasswordRequest' when calling changeUserPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmTotpSetup operation.
     * @callback module:api/UserApi~confirmTotpSetupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm second factor TOTP setup with a generated OTP
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description: Confirm second factor TOTP setup with a generated OTP.  ### Precondition: Authenticated user    ### Postcondition: Second factor TOTP is enabled.  ### Further Information: None.
     * @param {module:model/MfaTotpConfirmationRequest} mfaTotpConfirmationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~confirmTotpSetupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    confirmTotpSetup(mfaTotpConfirmationRequest, opts, callback) {
      opts = opts || {};
      let postBody = mfaTotpConfirmationRequest;
      // verify the required parameter 'mfaTotpConfirmationRequest' is set
      if (mfaTotpConfirmationRequest === undefined || mfaTotpConfirmationRequest === null) {
        throw new Error("Missing the required parameter 'mfaTotpConfirmationRequest' when calling confirmTotpSetup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/mfa/totp', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAndPreserveUserKeyPair operation.
     * @callback module:api/UserApi~createAndPreserveUserKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create key pair and preserve copy of old private key
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Create user key pair and preserve copy of old private key.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is created.   Copy of old private key is preserved.  ### Further Information: You can submit your old private key, encrypted with your current password.   This allows migrating file keys encrypted with your old key pair to the new one.
     * @param {module:model/CreateKeyPairRequest} createKeyPairRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~createAndPreserveUserKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    createAndPreserveUserKeyPair(createKeyPairRequest, opts, callback) {
      opts = opts || {};
      let postBody = createKeyPairRequest;
      // verify the required parameter 'createKeyPairRequest' is set
      if (createKeyPairRequest === undefined || createKeyPairRequest === null) {
        throw new Error("Missing the required parameter 'createKeyPairRequest' when calling createAndPreserveUserKeyPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/keypairs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMfaTotpSetup operation.
     * @callback module:api/UserApi~deleteMfaTotpSetupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a MFA TOTP setup with generated OTP
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description:   Delete multi-factor authentication TOTP setup with a valid OTP code.  ### Precondition: Authenticated user   Multi-factor authentication is **NOT** enforced  ### Postcondition: Second factor TOTP is disabled.  ### Further Information: None.
     * @param {Number} id 
     * @param {String} validOtp 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~deleteMfaTotpSetupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteMfaTotpSetup(id, validOtp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMfaTotpSetup");
      }
      // verify the required parameter 'validOtp' is set
      if (validOtp === undefined || validOtp === null) {
        throw new Error("Missing the required parameter 'validOtp' when calling deleteMfaTotpSetup");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'valid_otp': validOtp
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/mfa/totp/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableCustomerEncryption operation.
     * @callback module:api/UserApi~enableCustomerEncryptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activate client-side encryption for customer
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>  ### Use `POST /settings/keypair` API  ### Description:   Activate client-side encryption for according customer.  ### Precondition: Right <span style='padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;'>&#128275; change config</span> required.  ### Postcondition: Client-side encryption is enabled.  ### Further Information: Sets the ability for this customer to encrypt rooms.   Once enabled on customer level, it **CANNOT** be unset.   On activation, a customer rescue key pair **MUST** be set.
     * @param {module:model/EnableCustomerEncryptionRequest} enableCustomerEncryptionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~enableCustomerEncryptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerData}
     */
    enableCustomerEncryption(enableCustomerEncryptionRequest, opts, callback) {
      opts = opts || {};
      let postBody = enableCustomerEncryptionRequest;
      // verify the required parameter 'enableCustomerEncryptionRequest' is set
      if (enableCustomerEncryptionRequest === undefined || enableCustomerEncryptionRequest === null) {
        throw new Error("Missing the required parameter 'enableCustomerEncryptionRequest' when calling enableCustomerEncryption");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerData;
      return this.apiClient.callApi(
        '/v4/user/account/customer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMfaStatusForUser operation.
     * @callback module:api/UserApi~getMfaStatusForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserMfaStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request information about the user's mfa status
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description: Request information about the user's mfa status  ### Precondition: Authenticated user.  ### Postcondition: None.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~getMfaStatusForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserMfaStatusResponse}
     */
    getMfaStatusForUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserMfaStatusResponse;
      return this.apiClient.callApi(
        '/v4/user/account/mfa', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTotpSetupInformation operation.
     * @callback module:api/UserApi~getTotpSetupInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TotpSetupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request information to setup TOTP as second authentication factor
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description:   Get setup information for multi-factor authentication (TOTP).  ### Precondition: Authenticated user.  ### Postcondition: None.   ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~getTotpSetupInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TotpSetupResponse}
     */
    getTotpSetupInformation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TotpSetupResponse;
      return this.apiClient.callApi(
        '/v4/user/account/mfa/totp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDownloadShareSubscriptions operation.
     * @callback module:api/UserApi~listDownloadShareSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedDownloadShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Download Share subscriptions
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Retrieve a list of subscribed Download Shares for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed Download Shares is returned.  ### Further Information: None.  ### Filtering All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `authParentId:eq:#`   Get download shares where `authParentId` equals `#`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`downloadShareId`** | Download Share ID filter | `eq` | Download Share ID equals value. | `long value` | | **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `downloadShareId:desc|authParentId:asc`   Sort by `downloadShareId` descending **AND** `authParentId` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`downloadShareId`** | Download Share ID | | **`authParentId`** | Auth parent ID |  </details>
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter string
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {Number} [offset] Range offset
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~listDownloadShareSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedDownloadShareList}
     */
    listDownloadShareSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedDownloadShareList;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/download_shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listNodeSubscriptions operation.
     * @callback module:api/UserApi~listNodeSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedNodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List node subscriptions
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Retrieve a list of subscribed nodes for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed nodes is returned.  ### Further Information: None.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `authParentId:eq:#`   Get nodes where `authParentId` equals `#`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`nodeId`** | Node ID filter | `eq` | Node ID equals value. | `long value` | | **`authParentId`** | Auth parent ID filter | `eq` | Auth parent ID equals value. | `long value` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `nodeId:desc|authParentId:asc`   Sort by `nodeId` descending **AND** `authParentId` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`nodeId`** | Node ID | | **`authParentId`** | Auth parent ID |  </details>
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter string
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {Number} [offset] Range offset
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~listNodeSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedNodeList}
     */
    listNodeSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedNodeList;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/nodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUploadShareSubscriptions operation.
     * @callback module:api/UserApi~listUploadShareSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedUploadShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Upload Share subscriptions
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Retrieve a list of subscribed Upload Shares for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed Upload Shares is returned.  ### Further Information: None.  ### Filtering All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `targetNodeId:eq:#`   Get upload shares where `targetNodeId` equals `#`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | **`uploadShareId`** | Upload Share ID filter | `eq` | Upload Share ID equals value. | `long value` | | **`targetNodeId`** | Target node ID filter | `eq` | Target node ID equals value. | `long value` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `uploadShareId:desc|targetNodeId:asc`   Sort by `uploadShareId` descending **AND** `targetNodeId` ascending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | **`uploadShareId`** | Upload Share ID | | **`targetNodeId`** | Target node ID |  </details>
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter string
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {Number} [offset] Range offset
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~listUploadShareSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedUploadShareList}
     */
    listUploadShareSubscriptions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedUploadShareList;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/upload_shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/UserApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invalidate authentication token
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>  ### Description:   Log out a user.  ### Precondition: Authenticated user.  ### Postcondition: * User is logged out   * Authentication token gets invalidated.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [everywhere] Invalidate all tokens
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'everywhere': opts['everywhere']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pingUser operation.
     * @callback module:api/UserApi~pingUserCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (authenticated) Ping
     * ### Description: Test connection to DRACOON Server (while authenticated).  ### Precondition: Authenticated user.  ### Postcondition: `200 OK` with principal information is returned if successful.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~pingUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pingUser(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v4/user/ping', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOAuthApproval operation.
     * @callback module:api/UserApi~removeOAuthApprovalCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove OAuth client approval
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>  ### Functional Description: Delete an OAuth client approval.  ### Precondition: Authenticated user and valid client ID  ### Postcondition: OAuth Client approval is revoked.  ### Further Information: None.
     * @param {String} clientId OAuth client ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~removeOAuthApprovalCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeOAuthApproval(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling removeOAuthApproval");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/oauth/approvals/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOAuthAuthorization operation.
     * @callback module:api/UserApi~removeOAuthAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a OAuth authorization
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.12.0</h3>  ### Description: Delete an authorization.  ### Precondition: Authenticated user and valid client ID, authorization ID  ### Postcondition: Authorization is revoked.  ### Further Information: None.
     * @param {String} clientId OAuth client ID
     * @param {Number} authorizationId OAuth authorization ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~removeOAuthAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeOAuthAuthorization(clientId, authorizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling removeOAuthAuthorization");
      }
      // verify the required parameter 'authorizationId' is set
      if (authorizationId === undefined || authorizationId === null) {
        throw new Error("Missing the required parameter 'authorizationId' when calling removeOAuthAuthorization");
      }

      let pathParams = {
        'client_id': clientId,
        'authorization_id': authorizationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/oauth/authorizations/{client_id}/{authorization_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeOAuthAuthorizations operation.
     * @callback module:api/UserApi~removeOAuthAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove all OAuth authorizations of a client
     * ### Description: Delete all authorizations of a client.  ### Precondition: Authenticated user and valid client ID  ### Postcondition: All authorizations for the client are revoked.  ### Further Information: None.
     * @param {String} clientId OAuth client ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~removeOAuthAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeOAuthAuthorizations(clientId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling removeOAuthAuthorizations");
      }

      let pathParams = {
        'client_id': clientId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/oauth/authorizations/{client_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeProfileAttribute operation.
     * @callback module:api/UserApi~removeProfileAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user profile attribute
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>  ### Description:   Delete custom user profile attribute.  ### Precondition: None.  ### Postcondition: Custom user profile attribute is deleted.  ### Further Information: Allowed characters for keys are: `[a-zA-Z0-9_-]`
     * @param {String} key Key
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~removeProfileAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeProfileAttribute(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling removeProfileAttribute");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/profileAttributes/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeUserKeyPair operation.
     * @callback module:api/UserApi~removeUserKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user's key pair
     * ### Description:   Delete user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is deleted.  ### Further Information: If parameter `version` is not set and two key versions exist, this API deletes version A.       If two keys with the same version are set, this API deletes the older one.  This will also remove all file keys that were encrypted with the user public key. If the user had exclusive access to some files, those are removed as well since decrypting them became impossible.
     * @param {Object} opts Optional parameters
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~removeUserKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeUserKeyPair(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/keypair', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestAvatar operation.
     * @callback module:api/UserApi~requestAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request avatar
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Get the avatar.  ### Precondition: Authenticated user.  ### Postcondition: Avatar is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    requestAvatar(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/v4/user/account/avatar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomerInfo operation.
     * @callback module:api/UserApi~requestCustomerInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request customer information for user
     * ### Description:   Use this API to get:  * customer name * used / free space * used / available * user account info  of the according customer.  ### Precondition: Authenticated user.  ### Postcondition: Customer information is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestCustomerInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CustomerData}
     */
    requestCustomerInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerData;
      return this.apiClient.callApi(
        '/v4/user/account/customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestCustomerKeyPair operation.
     * @callback module:api/UserApi~requestCustomerKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserKeyPairContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request customer's key pair
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.24.0</h3>  ### Use `GET /settings/keypair` API  ### Description:   Retrieve the customer rescue key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is returned.  ### Further Information: The private key is password-based encrypted with `AES256` / `PBKDF2`.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestCustomerKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserKeyPairContainer}
     */
    requestCustomerKeyPair(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserKeyPairContainer;
      return this.apiClient.callApi(
        '/v4/user/account/customer/keypair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestListOfNotificationConfigs operation.
     * @callback module:api/UserApi~requestListOfNotificationConfigsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationConfigList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of notification configurations
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Retrieve a list of notification configurations for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of available notification configurations is returned.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestListOfNotificationConfigsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationConfigList}
     */
    requestListOfNotificationConfigs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationConfigList;
      return this.apiClient.callApi(
        '/v4/user/notifications/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOAuthApprovals operation.
     * @callback module:api/UserApi~requestOAuthApprovalsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuthApproval>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of OAuth client approvals
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.22.0</h3>  ### Functional Description:   Retrieve information about all OAuth client approvals.  ### Precondition: Authenticated user.  ### Postcondition: None.  ### Further Information: None.  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `clientName:desc`   Sort by `clientName` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `clientName` | Client name |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestOAuthApprovalsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuthApproval>}
     */
    requestOAuthApprovals(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OAuthApproval];
      return this.apiClient.callApi(
        '/v4/user/oauth/approvals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestOAuthAuthorizations operation.
     * @callback module:api/UserApi~requestOAuthAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/OAuthAuthorization>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request list of OAuth client authorizations
     * ### Description:   Retrieve information about all OAuth client authorizations.  ### Precondition: Authenticated user.  ### Postcondition: List of OAuth client authorizations is returned.  ### Further Information:  ### Filtering: Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `isStandard:eq:true`   Get standard OAuth clients.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `isStandard` | Standard client filter | `eq` |  | `true or false` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `clientName:desc`   Sort by `clientName` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `clientName` | Client name |  </details>
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestOAuthAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/OAuthAuthorization>}
     */
    requestOAuthAuthorizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OAuthAuthorization];
      return this.apiClient.callApi(
        '/v4/user/oauth/authorizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestProfileAttributes operation.
     * @callback module:api/UserApi~requestProfileAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttributesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user profile attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>  ### Description:   Retrieve a list of user profile attributes.  ### Precondition: None.  ### Postcondition: List of attributes is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: `FIELD_NAME:OPERATOR:VALUE[:VALUE...]`    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `key:cn:searchString_1|value:cn:searchString_2`   Filter by attribute key contains `searchString_1` **AND** attribute value contains `searchString_2`.  </details>  ### Filtering options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Filter Description | `OPERATOR` | Operator Description | `VALUE` | | :--- | :--- | :--- | :--- | :--- | | `key` | User profile attribute key filter | `cn, eq, sw` | Attribute key contains / equals / starts with value. | `search String` | | `value` | User profile attribute value filter | `cn, eq, sw` | Attribute value contains / equals / starts with value. | `search String` |  </details>  ---  ### Sorting: Sort string syntax: `FIELD_NAME:ORDER`   `ORDER` can be `asc` or `desc`.   Multiple sort fields are supported.    <details style=\"padding-left: 10px\"> <summary style=\"cursor: pointer; outline: none\"><strong>Example</strong></summary>  `key:asc|value:desc`   Sort by `key` ascending **AND** by `value` descending.  </details>  ### Sorting options: <details style=\"padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\"> <summary style=\"cursor: pointer; outline: none\"><strong>Expand</strong></summary>  | `FIELD_NAME` | Description | | :--- | :--- | | `key` | User profile attribute key | | `value` | User profile attribute value |  </details>
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] Range offset
     * @param {Number} [limit] Range limit.  Maximum 500.   For more results please use paging (`offset` + `limit`).
     * @param {String} [filter] Filter string
     * @param {String} [sort] Sort string
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestProfileAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttributesResponse}
     */
    requestProfileAttributes(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'filter': opts['filter'],
        'sort': opts['sort']
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttributesResponse;
      return this.apiClient.callApi(
        '/v4/user/profileAttributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUserInfo operation.
     * @callback module:api/UserApi~requestUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user account information
     * ### Description:   Retrieves all information regarding the current user's account.  ### Precondition: Authenticated user.  ### Postcondition: User information is returned.  ### Further Information: Setting the query parameter `more_info` to `true`, causes the API to return more details e.g. the user's groups.    `customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {Boolean} [moreInfo] Get more info for this user  e.g. list of user groups
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccount}
     */
    requestUserInfo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'more_info': opts['moreInfo']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserAccount;
      return this.apiClient.callApi(
        '/v4/user/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUserKeyPair operation.
     * @callback module:api/UserApi~requestUserKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserKeyPairContainer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request user's key pair
     * ### Description:   Retrieve the user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is returned.   ### Further Information: The private key is password-based encrypted with `AES256` / `PBKDF2`.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [version] Version (NEW)
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestUserKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserKeyPairContainer}
     */
    requestUserKeyPair(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'version': opts['version']
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserKeyPairContainer;
      return this.apiClient.callApi(
        '/v4/user/account/keypair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestUserKeyPairs operation.
     * @callback module:api/UserApi~requestUserKeyPairsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserKeyPairContainer>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request all user key pairs
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Retrieve all user key pairs to allow re-encrypting file keys without need for a second distributor.  ### Precondition: Authenticated user.  ### Postcondition: List of key pairs is returned.   ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~requestUserKeyPairsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserKeyPairContainer>}
     */
    requestUserKeyPairs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserKeyPairContainer];
      return this.apiClient.callApi(
        '/v4/user/account/keypairs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAvatar operation.
     * @callback module:api/UserApi~resetAvatarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset avatar
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description:   Reset (custom) avatar to default avatar.  ### Precondition: Authenticated user.  ### Postcondition: * User's avatar gets deleted.   * Default avatar is set.  ### Further Information: None.
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~resetAvatarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    resetAvatar(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/v4/user/account/avatar', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setProfileAttributes operation.
     * @callback module:api/UserApi~setProfileAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileAttributes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set user profile attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128679; Deprecated since v4.12.0</h3>  ### Description:   Set custom user profile attributes.  ### Precondition: None.  ### Postcondition: Custom user profile attributes are set.  ### Further Information: Batch function.   All existing user profile attributes will be deleted.    * Allowed characters for keys are: `[a-zA-Z0-9_-]`   * Characters are **case-insensitive**   * Maximum key length is **255**   * Maximum value length is **4096**
     * @param {module:model/ProfileAttributesRequest} profileAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~setProfileAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileAttributes}
     */
    setProfileAttributes(profileAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = profileAttributesRequest;
      // verify the required parameter 'profileAttributesRequest' is set
      if (profileAttributesRequest === undefined || profileAttributesRequest === null) {
        throw new Error("Missing the required parameter 'profileAttributesRequest' when calling setProfileAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProfileAttributes;
      return this.apiClient.callApi(
        '/v4/user/profileAttributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserKeyPair operation.
     * @callback module:api/UserApi~setUserKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set user's key pair
     * ### Description:   Set the user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is set.  ### Further Information: Overwriting an existing key pair is **NOT** possible.   Please delete the existing key pair first.   The private key is password-based encrypted with `AES256` / `PBKDF2`.
     * @param {module:model/UserKeyPairContainer} userKeyPairContainer 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~setUserKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setUserKeyPair(userKeyPairContainer, opts, callback) {
      opts = opts || {};
      let postBody = userKeyPairContainer;
      // verify the required parameter 'userKeyPairContainer' is set
      if (userKeyPairContainer === undefined || userKeyPairContainer === null) {
        throw new Error("Missing the required parameter 'userKeyPairContainer' when calling setUserKeyPair");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/keypair', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeDownloadShare operation.
     * @callback module:api/UserApi~subscribeDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedDownloadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe Download Share for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Subscribe Download Share for notifications.  ### Precondition: User with _\"manage download share\"_ permissions on target node.  ### Postcondition: Download Share is subscribed.   Notifications for this Download Share will be triggered in the future.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~subscribeDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedDownloadShare}
     */
    subscribeDownloadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling subscribeDownloadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedDownloadShare;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/download_shares/{share_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeDownloadShares operation.
     * @callback module:api/UserApi~subscribeDownloadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe or Unsubscribe a List of Download Shares for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description:   Subscribe/Unsubscribe download shares for notifications.  ### Precondition: User with _\"manage download share\"_ permissions on target node.    ### Postcondition: Download shares are subscribed or unsubscribed. Notifications for these download shares will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     * @param {module:model/UpdateSubscriptionsBulkRequest} updateSubscriptionsBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~subscribeDownloadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeDownloadShares(updateSubscriptionsBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSubscriptionsBulkRequest;
      // verify the required parameter 'updateSubscriptionsBulkRequest' is set
      if (updateSubscriptionsBulkRequest === undefined || updateSubscriptionsBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionsBulkRequest' when calling subscribeDownloadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/download_shares', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeNode operation.
     * @callback module:api/UserApi~subscribeNodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe node for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description: Subscribe node for notifications.  ### Precondition: User has _\"read\"_ permissions in auth parent room.  ### Postcondition: Node is subscribed. Notifications for this node will be triggered in the future.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~subscribeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedNode}
     */
    subscribeNode(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling subscribeNode");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedNode;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/nodes/{node_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeUploadShare operation.
     * @callback module:api/UserApi~subscribeUploadShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SubscribedUploadShare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe Upload Share for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Subscribe Upload Share for notifications.  ### Precondition: User with _\"manage upload share\"_ permissions on target node.  ### Postcondition: Upload Share is subscribed.   Notifications for this Upload Share will be triggered in the future.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~subscribeUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SubscribedUploadShare}
     */
    subscribeUploadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling subscribeUploadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SubscribedUploadShare;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/upload_shares/{share_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the subscribeUploadShares operation.
     * @callback module:api/UserApi~subscribeUploadSharesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe or Unsubscribe a List of Upload Shares for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description:   Subscribe/Unsubscribe upload shares for notifications.  ### Precondition: User with _\"manage upload share\"_ permissions on target node.    ### Postcondition: Upload shares are subscribed or unsubscribed. Notifications for these upload shares will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     * @param {module:model/UpdateSubscriptionsBulkRequest} updateSubscriptionsBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~subscribeUploadSharesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    subscribeUploadShares(updateSubscriptionsBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSubscriptionsBulkRequest;
      // verify the required parameter 'updateSubscriptionsBulkRequest' is set
      if (updateSubscriptionsBulkRequest === undefined || updateSubscriptionsBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionsBulkRequest' when calling subscribeUploadShares");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/upload_shares', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeDownloadShare operation.
     * @callback module:api/UserApi~unsubscribeDownloadShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe Download Share from notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Unsubscribe Download Share from notifications.  ### Precondition: User with _\"manage download share\"_ permissions on target node.  ### Postcondition: Download Share is unsubscribed.   Notifications for this Download Share are disabled.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~unsubscribeDownloadShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeDownloadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling unsubscribeDownloadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/download_shares/{share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeNode operation.
     * @callback module:api/UserApi~unsubscribeNodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe node from notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Unsubscribe node from notifications.  ### Precondition: User has _\"read\"_ permissions in auth parent room.  ### Postcondition: Node is unsubscribed.   Notifications for this node are disabled.  ### Further Information: None.
     * @param {Number} nodeId Node ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~unsubscribeNodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeNode(nodeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'nodeId' is set
      if (nodeId === undefined || nodeId === null) {
        throw new Error("Missing the required parameter 'nodeId' when calling unsubscribeNode");
      }

      let pathParams = {
        'node_id': nodeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/nodes/{node_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unsubscribeUploadShare operation.
     * @callback module:api/UserApi~unsubscribeUploadShareCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe Upload Share from notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.24.0</h3>  ### Description:   Unsubscribe Upload Share from notifications.  ### Precondition: User with _\"manage upload share\"_ permissions on target node.  ### Postcondition: Upload Share is unsubscribed.   Notifications for this Upload Share are disabled.  ### Further Information: None.
     * @param {Number} shareId Share ID
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~unsubscribeUploadShareCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unsubscribeUploadShare(shareId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'shareId' is set
      if (shareId === undefined || shareId === null) {
        throw new Error("Missing the required parameter 'shareId' when calling unsubscribeUploadShare");
      }

      let pathParams = {
        'share_id': shareId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/upload_shares/{share_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNodeSubscriptions operation.
     * @callback module:api/UserApi~updateNodeSubscriptionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe or Unsubscribe a List of nodes for notifications
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.25.0</h3>  ### Description:   Subscribe/Unsubscribe nodes for notifications.  ### Precondition: User has _\"read\"_ permissions in auth parent room.  ### Postcondition: Nodes are subscribed or unsubscribed. Notifications for these nodes will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     * @param {module:model/UpdateSubscriptionsBulkRequest} updateSubscriptionsBulkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~updateNodeSubscriptionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateNodeSubscriptions(updateSubscriptionsBulkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSubscriptionsBulkRequest;
      // verify the required parameter 'updateSubscriptionsBulkRequest' is set
      if (updateSubscriptionsBulkRequest === undefined || updateSubscriptionsBulkRequest === null) {
        throw new Error("Missing the required parameter 'updateSubscriptionsBulkRequest' when calling updateNodeSubscriptions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/subscriptions/nodes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateNotificationConfig operation.
     * @callback module:api/UserApi~updateNotificationConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update notification configuration
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.20.0</h3>  ### Description:   Update notification configuration for current user.   ### Precondition: Authenticated user.  ### Postcondition: Notification configuration is updated.  ### Further Information: Leave `channelIds` empty to disable notifications.
     * @param {Number} id Unique identifier for a notification configuration
     * @param {module:model/NotificationConfigChangeRequest} notificationConfigChangeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~updateNotificationConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationConfig}
     */
    updateNotificationConfig(id, notificationConfigChangeRequest, opts, callback) {
      opts = opts || {};
      let postBody = notificationConfigChangeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateNotificationConfig");
      }
      // verify the required parameter 'notificationConfigChangeRequest' is set
      if (notificationConfigChangeRequest === undefined || notificationConfigChangeRequest === null) {
        throw new Error("Missing the required parameter 'notificationConfigChangeRequest' when calling updateNotificationConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationConfig;
      return this.apiClient.callApi(
        '/v4/user/notifications/config/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfileAttributes operation.
     * @callback module:api/UserApi~updateProfileAttributesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileAttributes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or edit user profile attributes
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.7.0</h3>  ### Description:   Add or edit custom user profile attributes. <br/><br/><span style=\"font-weight: bold; color: red;\"> &#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**</span><br/>  ### Precondition: None.  ### Postcondition: Custom user profile attributes are added or edited.  ### Further Information: Batch function.   If an entry existed before, it will be overwritten.   Range submodel is never returned.  * Allowed characters for keys are: `[a-zA-Z0-9_-]`   * Characters are **case-insensitive**   * Maximum key length is **255**   * Maximum value length is **4096**
     * @param {module:model/ProfileAttributesRequest} profileAttributesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~updateProfileAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileAttributes}
     */
    updateProfileAttributes(profileAttributesRequest, opts, callback) {
      opts = opts || {};
      let postBody = profileAttributesRequest;
      // verify the required parameter 'profileAttributesRequest' is set
      if (profileAttributesRequest === undefined || profileAttributesRequest === null) {
        throw new Error("Missing the required parameter 'profileAttributesRequest' when calling updateProfileAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProfileAttributes;
      return this.apiClient.callApi(
        '/v4/user/profileAttributes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserAccount operation.
     * @callback module:api/UserApi~updateUserAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserAccount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user account
     * ### Description:   Update current user's account.  ### Precondition: Authenticated user.  ### Postcondition: User's account is updated.  ### Further Information: * All input fields are limited to **150** characters.   * **All** characters are allowed.    `customer` (`CustomerData`) attribute in `UserAccount` response model is deprecated. Please use response from `GET /user/account/customer` instead.
     * @param {module:model/UpdateUserAccountRequest} updateUserAccountRequest 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xSdsDateFormat] Date time format (cf. [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) & [leettime.de](http://leettime.de/))
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~updateUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserAccount}
     */
    updateUserAccount(updateUserAccountRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateUserAccountRequest;
      // verify the required parameter 'updateUserAccountRequest' is set
      if (updateUserAccountRequest === undefined || updateUserAccountRequest === null) {
        throw new Error("Missing the required parameter 'updateUserAccountRequest' when calling updateUserAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Date-Format': opts['xSdsDateFormat'],
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserAccount;
      return this.apiClient.callApi(
        '/v4/user/account', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadAvatarAsMultipart operation.
     * @callback module:api/UserApi~uploadAvatarAsMultipartCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change avatar
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.11.0</h3>  ### Description: Change the avatar.  ### Precondition: Authenticated user.  ### Postcondition: Avatar is changed.  ### Further Information: * Media type **MUST** be `jpeg` or `png` * File size **MUST** bei less than `5 MB` * Dimensions **MUST** be `256x256 px`
     * @param {File} file File
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~uploadAvatarAsMultipartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    uploadAvatarAsMultipart(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadAvatarAsMultipart");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
        'file': file
      };

      let authNames = ['oauth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/v4/user/account/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the useEmergencyCode operation.
     * @callback module:api/UserApi~useEmergencyCodeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Using emergency-code
     * <h3 style='padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;'>&#128640; Since v4.37.0</h3>  ### Description: Using emergency code for login  ### Precondition: User has MFA enabled and is already logged in with account/pw (aka pre-Auth-Role)  ### Postcondition: All MFA-setups for the user are deleted.  ### Further Information:   
     * @param {String} emergencyCode 
     * @param {Object} opts Optional parameters
     * @param {String} [xSdsAuthToken] Authentication token
     * @param {module:api/UserApi~useEmergencyCodeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    useEmergencyCode(emergencyCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emergencyCode' is set
      if (emergencyCode === undefined || emergencyCode === null) {
        throw new Error("Missing the required parameter 'emergencyCode' when calling useEmergencyCode");
      }

      let pathParams = {
      };
      let queryParams = {
        'emergency_code': emergencyCode
      };
      let headerParams = {
        'X-Sds-Auth-Token': opts['xSdsAuthToken']
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v4/user/account/mfa', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
