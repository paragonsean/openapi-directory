/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LastAdminUserRoom model module.
 * @module model/LastAdminUserRoom
 * @version 4.42.3
 */
class LastAdminUserRoom {
    /**
     * Constructs a new <code>LastAdminUserRoom</code>.
     * Room information
     * @alias module:model/LastAdminUserRoom
     * @param id {Number} Room ID
     * @param lastAdminInGroup {Boolean} Determines whether user is last admin of a room due to being the last member of last admin group
     * @param name {String} Room name
     * @param parentPath {String} Parent node path  `/` if node is a root node (room)
     */
    constructor(id, lastAdminInGroup, name, parentPath) { 
        
        LastAdminUserRoom.initialize(this, id, lastAdminInGroup, name, parentPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, lastAdminInGroup, name, parentPath) { 
        obj['id'] = id;
        obj['lastAdminInGroup'] = lastAdminInGroup;
        obj['name'] = name;
        obj['parentPath'] = parentPath;
    }

    /**
     * Constructs a <code>LastAdminUserRoom</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LastAdminUserRoom} obj Optional instance to populate.
     * @return {module:model/LastAdminUserRoom} The populated <code>LastAdminUserRoom</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LastAdminUserRoom();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastAdminInGroup')) {
                obj['lastAdminInGroup'] = ApiClient.convertToType(data['lastAdminInGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('lastAdminInGroupId')) {
                obj['lastAdminInGroupId'] = ApiClient.convertToType(data['lastAdminInGroupId'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('parentPath')) {
                obj['parentPath'] = ApiClient.convertToType(data['parentPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LastAdminUserRoom</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LastAdminUserRoom</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LastAdminUserRoom.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentPath'] && !(typeof data['parentPath'] === 'string' || data['parentPath'] instanceof String)) {
            throw new Error("Expected the field `parentPath` to be a primitive type in the JSON string but got " + data['parentPath']);
        }

        return true;
    }


}

LastAdminUserRoom.RequiredProperties = ["id", "lastAdminInGroup", "name", "parentPath"];

/**
 * Room ID
 * @member {Number} id
 */
LastAdminUserRoom.prototype['id'] = undefined;

/**
 * Determines whether user is last admin of a room due to being the last member of last admin group
 * @member {Boolean} lastAdminInGroup
 */
LastAdminUserRoom.prototype['lastAdminInGroup'] = undefined;

/**
 * ID of the last admin group where the user is the only remaining member  (returned only if `lastAdminInGroup` is `true`)
 * @member {Number} lastAdminInGroupId
 */
LastAdminUserRoom.prototype['lastAdminInGroupId'] = undefined;

/**
 * Room name
 * @member {String} name
 */
LastAdminUserRoom.prototype['name'] = undefined;

/**
 * Parent room ID
 * @member {Number} parentId
 */
LastAdminUserRoom.prototype['parentId'] = undefined;

/**
 * Parent node path  `/` if node is a root node (room)
 * @member {String} parentPath
 */
LastAdminUserRoom.prototype['parentPath'] = undefined;






export default LastAdminUserRoom;

