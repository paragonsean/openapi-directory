/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigRoomRequest model module.
 * @module model/ConfigRoomRequest
 * @version 4.42.3
 */
class ConfigRoomRequest {
    /**
     * Constructs a new <code>ConfigRoomRequest</code>.
     * Request model for configuring a room
     * @alias module:model/ConfigRoomRequest
     */
    constructor() { 
        
        ConfigRoomRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['classification'] = ClassificationEnum.2;
        obj['hasActivitiesLog'] = true;
        obj['newGroupMemberAcceptance'] = 'autoallow';
    }

    /**
     * Constructs a <code>ConfigRoomRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigRoomRequest} obj Optional instance to populate.
     * @return {module:model/ConfigRoomRequest} The populated <code>ConfigRoomRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigRoomRequest();

            if (data.hasOwnProperty('adminGroupIds')) {
                obj['adminGroupIds'] = ApiClient.convertToType(data['adminGroupIds'], ['Number']);
            }
            if (data.hasOwnProperty('adminIds')) {
                obj['adminIds'] = ApiClient.convertToType(data['adminIds'], ['Number']);
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'Number');
            }
            if (data.hasOwnProperty('hasActivitiesLog')) {
                obj['hasActivitiesLog'] = ApiClient.convertToType(data['hasActivitiesLog'], 'Boolean');
            }
            if (data.hasOwnProperty('inheritPermissions')) {
                obj['inheritPermissions'] = ApiClient.convertToType(data['inheritPermissions'], 'Boolean');
            }
            if (data.hasOwnProperty('newGroupMemberAcceptance')) {
                obj['newGroupMemberAcceptance'] = ApiClient.convertToType(data['newGroupMemberAcceptance'], 'String');
            }
            if (data.hasOwnProperty('recycleBinRetentionPeriod')) {
                obj['recycleBinRetentionPeriod'] = ApiClient.convertToType(data['recycleBinRetentionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('takeOverPermissions')) {
                obj['takeOverPermissions'] = ApiClient.convertToType(data['takeOverPermissions'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigRoomRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigRoomRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['adminGroupIds'])) {
            throw new Error("Expected the field `adminGroupIds` to be an array in the JSON data but got " + data['adminGroupIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['adminIds'])) {
            throw new Error("Expected the field `adminIds` to be an array in the JSON data but got " + data['adminIds']);
        }
        // ensure the json data is a string
        if (data['newGroupMemberAcceptance'] && !(typeof data['newGroupMemberAcceptance'] === 'string' || data['newGroupMemberAcceptance'] instanceof String)) {
            throw new Error("Expected the field `newGroupMemberAcceptance` to be a primitive type in the JSON string but got " + data['newGroupMemberAcceptance']);
        }

        return true;
    }


}



/**
 * List of group ids  A room requires at least one admin (user or group)
 * @member {Array.<Number>} adminGroupIds
 */
ConfigRoomRequest.prototype['adminGroupIds'] = undefined;

/**
 * List of user ids  A room requires at least one admin (user or group)
 * @member {Array.<Number>} adminIds
 */
ConfigRoomRequest.prototype['adminIds'] = undefined;

/**
 * Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    Provided (or default) classification is taken from room  when file gets uploaded without any classification.
 * @member {module:model/ConfigRoomRequest.ClassificationEnum} classification
 * @default ClassificationEnum.2
 */
ConfigRoomRequest.prototype['classification'] = ClassificationEnum.2;

/**
 * Is activities log active (for rooms only)
 * @member {Boolean} hasActivitiesLog
 * @default true
 */
ConfigRoomRequest.prototype['hasActivitiesLog'] = true;

/**
 * Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)
 * @member {Boolean} inheritPermissions
 */
ConfigRoomRequest.prototype['inheritPermissions'] = undefined;

/**
 * Behaviour when new users are added to the group:  * `autoallow`  * `pending`    Only relevant if `adminGroupIds` has items.
 * @member {module:model/ConfigRoomRequest.NewGroupMemberAcceptanceEnum} newGroupMemberAcceptance
 * @default 'autoallow'
 */
ConfigRoomRequest.prototype['newGroupMemberAcceptance'] = 'autoallow';

/**
 * Retention period for deleted nodes in days
 * @member {Number} recycleBinRetentionPeriod
 */
ConfigRoomRequest.prototype['recycleBinRetentionPeriod'] = undefined;

/**
 * Take over existing permissions
 * @member {Boolean} takeOverPermissions
 */
ConfigRoomRequest.prototype['takeOverPermissions'] = undefined;





/**
 * Allowed values for the <code>classification</code> property.
 * @enum {Number}
 * @readonly
 */
ConfigRoomRequest['ClassificationEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4
};


/**
 * Allowed values for the <code>newGroupMemberAcceptance</code> property.
 * @enum {String}
 * @readonly
 */
ConfigRoomRequest['NewGroupMemberAcceptanceEnum'] = {

    /**
     * value: "autoallow"
     * @const
     */
    "autoallow": "autoallow",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};



export default ConfigRoomRequest;

