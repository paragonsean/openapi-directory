/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserAuthData model module.
 * @module model/UserAuthData
 * @version 4.42.3
 */
class UserAuthData {
    /**
     * Constructs a new <code>UserAuthData</code>.
     * User Authentication Data
     * @alias module:model/UserAuthData
     * @param method {String} Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`
     */
    constructor(method) { 
        
        UserAuthData.initialize(this, method);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method) { 
        obj['method'] = method;
    }

    /**
     * Constructs a <code>UserAuthData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserAuthData} obj Optional instance to populate.
     * @return {module:model/UserAuthData} The populated <code>UserAuthData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserAuthData();

            if (data.hasOwnProperty('adConfigId')) {
                obj['adConfigId'] = ApiClient.convertToType(data['adConfigId'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('mustChangePassword')) {
                obj['mustChangePassword'] = ApiClient.convertToType(data['mustChangePassword'], 'Boolean');
            }
            if (data.hasOwnProperty('oidConfigId')) {
                obj['oidConfigId'] = ApiClient.convertToType(data['oidConfigId'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserAuthData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAuthData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserAuthData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

UserAuthData.RequiredProperties = ["method"];

/**
 * ID of the user's Active Directory.
 * @member {Number} adConfigId
 */
UserAuthData.prototype['adConfigId'] = undefined;

/**
 * User login name
 * @member {String} login
 */
UserAuthData.prototype['login'] = undefined;

/**
 * Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`
 * @member {String} method
 */
UserAuthData.prototype['method'] = undefined;

/**
 * Determines whether user has to change his / her password  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types
 * @member {Boolean} mustChangePassword
 */
UserAuthData.prototype['mustChangePassword'] = undefined;

/**
 * ID of the user's OIDC provider.
 * @member {Number} oidConfigId
 */
UserAuthData.prototype['oidConfigId'] = undefined;

/**
 * Password (only relevant for `basic` authentication type)  *NOT* your Active Directory, OpenID or RADIUS password!
 * @member {String} password
 */
UserAuthData.prototype['password'] = undefined;






export default UserAuthData;

