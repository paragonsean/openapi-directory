/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestActiveDirectoryConfigResponse model module.
 * @module model/TestActiveDirectoryConfigResponse
 * @version 4.42.3
 */
class TestActiveDirectoryConfigResponse {
    /**
     * Constructs a new <code>TestActiveDirectoryConfigResponse</code>.
     * Response model for testing connection for Active Directory configuration
     * @alias module:model/TestActiveDirectoryConfigResponse
     * @param ldapUsersDomain {String} Search scope of Active Directory; only users below this node can log on.
     * @param serverAdminName {String} Distinguished Name (DN) of Active Directory administrative account
     * @param serverAdminPassword {String} Password of Active Directory administrative account
     * @param serverIp {String} IPv4 or IPv6 address or host name
     * @param serverPort {Number} Port
     * @param useLdaps {Boolean} Determines whether LDAPS should be used instead of plain LDAP.
     */
    constructor(ldapUsersDomain, serverAdminName, serverAdminPassword, serverIp, serverPort, useLdaps) { 
        
        TestActiveDirectoryConfigResponse.initialize(this, ldapUsersDomain, serverAdminName, serverAdminPassword, serverIp, serverPort, useLdaps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ldapUsersDomain, serverAdminName, serverAdminPassword, serverIp, serverPort, useLdaps) { 
        obj['ldapUsersDomain'] = ldapUsersDomain;
        obj['serverAdminName'] = serverAdminName;
        obj['serverAdminPassword'] = serverAdminPassword;
        obj['serverIp'] = serverIp;
        obj['serverPort'] = serverPort;
        obj['useLdaps'] = useLdaps;
    }

    /**
     * Constructs a <code>TestActiveDirectoryConfigResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestActiveDirectoryConfigResponse} obj Optional instance to populate.
     * @return {module:model/TestActiveDirectoryConfigResponse} The populated <code>TestActiveDirectoryConfigResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestActiveDirectoryConfigResponse();

            if (data.hasOwnProperty('ldapUsersDomain')) {
                obj['ldapUsersDomain'] = ApiClient.convertToType(data['ldapUsersDomain'], 'String');
            }
            if (data.hasOwnProperty('serverAdminName')) {
                obj['serverAdminName'] = ApiClient.convertToType(data['serverAdminName'], 'String');
            }
            if (data.hasOwnProperty('serverAdminPassword')) {
                obj['serverAdminPassword'] = ApiClient.convertToType(data['serverAdminPassword'], 'String');
            }
            if (data.hasOwnProperty('serverIp')) {
                obj['serverIp'] = ApiClient.convertToType(data['serverIp'], 'String');
            }
            if (data.hasOwnProperty('serverPort')) {
                obj['serverPort'] = ApiClient.convertToType(data['serverPort'], 'Number');
            }
            if (data.hasOwnProperty('sslFingerPrint')) {
                obj['sslFingerPrint'] = ApiClient.convertToType(data['sslFingerPrint'], 'String');
            }
            if (data.hasOwnProperty('useLdaps')) {
                obj['useLdaps'] = ApiClient.convertToType(data['useLdaps'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestActiveDirectoryConfigResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestActiveDirectoryConfigResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestActiveDirectoryConfigResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['ldapUsersDomain'] && !(typeof data['ldapUsersDomain'] === 'string' || data['ldapUsersDomain'] instanceof String)) {
            throw new Error("Expected the field `ldapUsersDomain` to be a primitive type in the JSON string but got " + data['ldapUsersDomain']);
        }
        // ensure the json data is a string
        if (data['serverAdminName'] && !(typeof data['serverAdminName'] === 'string' || data['serverAdminName'] instanceof String)) {
            throw new Error("Expected the field `serverAdminName` to be a primitive type in the JSON string but got " + data['serverAdminName']);
        }
        // ensure the json data is a string
        if (data['serverAdminPassword'] && !(typeof data['serverAdminPassword'] === 'string' || data['serverAdminPassword'] instanceof String)) {
            throw new Error("Expected the field `serverAdminPassword` to be a primitive type in the JSON string but got " + data['serverAdminPassword']);
        }
        // ensure the json data is a string
        if (data['serverIp'] && !(typeof data['serverIp'] === 'string' || data['serverIp'] instanceof String)) {
            throw new Error("Expected the field `serverIp` to be a primitive type in the JSON string but got " + data['serverIp']);
        }
        // ensure the json data is a string
        if (data['sslFingerPrint'] && !(typeof data['sslFingerPrint'] === 'string' || data['sslFingerPrint'] instanceof String)) {
            throw new Error("Expected the field `sslFingerPrint` to be a primitive type in the JSON string but got " + data['sslFingerPrint']);
        }

        return true;
    }


}

TestActiveDirectoryConfigResponse.RequiredProperties = ["ldapUsersDomain", "serverAdminName", "serverAdminPassword", "serverIp", "serverPort", "useLdaps"];

/**
 * Search scope of Active Directory; only users below this node can log on.
 * @member {String} ldapUsersDomain
 */
TestActiveDirectoryConfigResponse.prototype['ldapUsersDomain'] = undefined;

/**
 * Distinguished Name (DN) of Active Directory administrative account
 * @member {String} serverAdminName
 */
TestActiveDirectoryConfigResponse.prototype['serverAdminName'] = undefined;

/**
 * Password of Active Directory administrative account
 * @member {String} serverAdminPassword
 */
TestActiveDirectoryConfigResponse.prototype['serverAdminPassword'] = undefined;

/**
 * IPv4 or IPv6 address or host name
 * @member {String} serverIp
 */
TestActiveDirectoryConfigResponse.prototype['serverIp'] = undefined;

/**
 * Port
 * @member {Number} serverPort
 */
TestActiveDirectoryConfigResponse.prototype['serverPort'] = undefined;

/**
 * SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: `Algorithm/Fingerprint`
 * @member {String} sslFingerPrint
 */
TestActiveDirectoryConfigResponse.prototype['sslFingerPrint'] = undefined;

/**
 * Determines whether LDAPS should be used instead of plain LDAP.
 * @member {Boolean} useLdaps
 */
TestActiveDirectoryConfigResponse.prototype['useLdaps'] = undefined;






export default TestActiveDirectoryConfigResponse;

