/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EncryptionInfo from './EncryptionInfo';
import NodePermissions from './NodePermissions';
import UserInfo from './UserInfo';

/**
 * The Node model module.
 * @module model/Node
 * @version 4.42.3
 */
class Node {
    /**
     * Constructs a new <code>Node</code>.
     * Node information (Node can be a room, folder or file)
     * @alias module:model/Node
     * @param id {Number} Node ID
     * @param name {String} Name
     * @param type {module:model/Node.TypeEnum} Node type
     */
    constructor(id, name, type) { 
        
        Node.initialize(this, id, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, type) { 
        obj['hasActivitiesLog'] = true;
        obj['id'] = id;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Node</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Node} obj Optional instance to populate.
     * @return {module:model/Node} The populated <code>Node</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Node();

            if (data.hasOwnProperty('authParentId')) {
                obj['authParentId'] = ApiClient.convertToType(data['authParentId'], 'Number');
            }
            if (data.hasOwnProperty('branchVersion')) {
                obj['branchVersion'] = ApiClient.convertToType(data['branchVersion'], 'Number');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [Node]);
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'Number');
            }
            if (data.hasOwnProperty('cntChildren')) {
                obj['cntChildren'] = ApiClient.convertToType(data['cntChildren'], 'Number');
            }
            if (data.hasOwnProperty('cntComments')) {
                obj['cntComments'] = ApiClient.convertToType(data['cntComments'], 'Number');
            }
            if (data.hasOwnProperty('cntDeletedVersions')) {
                obj['cntDeletedVersions'] = ApiClient.convertToType(data['cntDeletedVersions'], 'Number');
            }
            if (data.hasOwnProperty('cntDownloadShares')) {
                obj['cntDownloadShares'] = ApiClient.convertToType(data['cntDownloadShares'], 'Number');
            }
            if (data.hasOwnProperty('cntFiles')) {
                obj['cntFiles'] = ApiClient.convertToType(data['cntFiles'], 'Number');
            }
            if (data.hasOwnProperty('cntFolders')) {
                obj['cntFolders'] = ApiClient.convertToType(data['cntFolders'], 'Number');
            }
            if (data.hasOwnProperty('cntRooms')) {
                obj['cntRooms'] = ApiClient.convertToType(data['cntRooms'], 'Number');
            }
            if (data.hasOwnProperty('cntUploadShares')) {
                obj['cntUploadShares'] = ApiClient.convertToType(data['cntUploadShares'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('encryptionInfo')) {
                obj['encryptionInfo'] = EncryptionInfo.constructFromObject(data['encryptionInfo']);
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('hasActivitiesLog')) {
                obj['hasActivitiesLog'] = ApiClient.convertToType(data['hasActivitiesLog'], 'Boolean');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('inheritPermissions')) {
                obj['inheritPermissions'] = ApiClient.convertToType(data['inheritPermissions'], 'Boolean');
            }
            if (data.hasOwnProperty('isBrowsable')) {
                obj['isBrowsable'] = ApiClient.convertToType(data['isBrowsable'], 'Boolean');
            }
            if (data.hasOwnProperty('isEncrypted')) {
                obj['isEncrypted'] = ApiClient.convertToType(data['isEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('isFavorite')) {
                obj['isFavorite'] = ApiClient.convertToType(data['isFavorite'], 'Boolean');
            }
            if (data.hasOwnProperty('mediaToken')) {
                obj['mediaToken'] = ApiClient.convertToType(data['mediaToken'], 'String');
            }
            if (data.hasOwnProperty('mediaType')) {
                obj['mediaType'] = ApiClient.convertToType(data['mediaType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('parentPath')) {
                obj['parentPath'] = ApiClient.convertToType(data['parentPath'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = NodePermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = ApiClient.convertToType(data['quota'], 'Number');
            }
            if (data.hasOwnProperty('recycleBinRetentionPeriod')) {
                obj['recycleBinRetentionPeriod'] = ApiClient.convertToType(data['recycleBinRetentionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('referenceId')) {
                obj['referenceId'] = ApiClient.convertToType(data['referenceId'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('timestampCreation')) {
                obj['timestampCreation'] = ApiClient.convertToType(data['timestampCreation'], 'Date');
            }
            if (data.hasOwnProperty('timestampModification')) {
                obj['timestampModification'] = ApiClient.convertToType(data['timestampModification'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = UserInfo.constructFromObject(data['updatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Node</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Node</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Node.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                Node.validateJSON(item);
            };
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserInfo.validateJSON(data['createdBy']);
        }
        // validate the optional field `encryptionInfo`
        if (data['encryptionInfo']) { // data not null
          EncryptionInfo.validateJSON(data['encryptionInfo']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['hash'] && !(typeof data['hash'] === 'string' || data['hash'] instanceof String)) {
            throw new Error("Expected the field `hash` to be a primitive type in the JSON string but got " + data['hash']);
        }
        // ensure the json data is a string
        if (data['mediaToken'] && !(typeof data['mediaToken'] === 'string' || data['mediaToken'] instanceof String)) {
            throw new Error("Expected the field `mediaToken` to be a primitive type in the JSON string but got " + data['mediaToken']);
        }
        // ensure the json data is a string
        if (data['mediaType'] && !(typeof data['mediaType'] === 'string' || data['mediaType'] instanceof String)) {
            throw new Error("Expected the field `mediaType` to be a primitive type in the JSON string but got " + data['mediaType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['parentPath'] && !(typeof data['parentPath'] === 'string' || data['parentPath'] instanceof String)) {
            throw new Error("Expected the field `parentPath` to be a primitive type in the JSON string but got " + data['parentPath']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          NodePermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          UserInfo.validateJSON(data['updatedBy']);
        }

        return true;
    }


}

Node.RequiredProperties = ["id", "name", "type"];

/**
 * &#128640; Since v4.15.0  Auth parent room ID
 * @member {Number} authParentId
 */
Node.prototype['authParentId'] = undefined;

/**
 * Version of last change in this node or a node further down the tree.
 * @member {Number} branchVersion
 */
Node.prototype['branchVersion'] = undefined;

/**
 * &#128679; Deprecated since v4.10.0  Child nodes list (if requested)  (for rooms / folders only)
 * @member {Array.<module:model/Node>} children
 */
Node.prototype['children'] = undefined;

/**
 * Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential
 * @member {module:model/Node.ClassificationEnum} classification
 */
Node.prototype['classification'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  Number of direct children  (no recursion; for rooms / folders only)
 * @member {Number} cntChildren
 */
Node.prototype['cntChildren'] = undefined;

/**
 * Returns the number of comments of this node.
 * @member {Number} cntComments
 */
Node.prototype['cntComments'] = undefined;

/**
 * Number of deleted versions of this file / folder  (for rooms / folders only)
 * @member {Number} cntDeletedVersions
 */
Node.prototype['cntDeletedVersions'] = undefined;

/**
 * Returns the number of Download Shares of this node.
 * @member {Number} cntDownloadShares
 */
Node.prototype['cntDownloadShares'] = undefined;

/**
 * &#128640; Since v4.11.0  Amount of direct child files where this node is the parent node  (no recursion; for rooms / folders only)
 * @member {Number} cntFiles
 */
Node.prototype['cntFiles'] = undefined;

/**
 * &#128640; Since v4.11.0  Amount of direct child folders where this node is the parent node  (no recursion; for rooms / folders only)
 * @member {Number} cntFolders
 */
Node.prototype['cntFolders'] = undefined;

/**
 * &#128640; Since v4.11.0  Amount of direct child rooms where this node is the parent node  (no recursion; for rooms only)
 * @member {Number} cntRooms
 */
Node.prototype['cntRooms'] = undefined;

/**
 * Returns the number of Upload Shares of this node.
 * @member {Number} cntUploadShares
 */
Node.prototype['cntUploadShares'] = undefined;

/**
 * Creation date
 * @member {Date} createdAt
 */
Node.prototype['createdAt'] = undefined;

/**
 * @member {module:model/UserInfo} createdBy
 */
Node.prototype['createdBy'] = undefined;

/**
 * @member {module:model/EncryptionInfo} encryptionInfo
 */
Node.prototype['encryptionInfo'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
Node.prototype['expireAt'] = undefined;

/**
 * File type / extension (for files only)
 * @member {String} fileType
 */
Node.prototype['fileType'] = undefined;

/**
 * Is activities log active (for rooms only)
 * @member {Boolean} hasActivitiesLog
 * @default true
 */
Node.prototype['hasActivitiesLog'] = true;

/**
 * MD5 hash of file
 * @member {String} hash
 */
Node.prototype['hash'] = undefined;

/**
 * Node ID
 * @member {Number} id
 */
Node.prototype['id'] = undefined;

/**
 * Inherit permissions from parent room  (default: `false` if `parentId` is `0`; otherwise: `true`)
 * @member {Boolean} inheritPermissions
 */
Node.prototype['inheritPermissions'] = undefined;

/**
 * &#128640; Since v4.11.0  Determines whether node is browsable by client (for rooms only)
 * @member {Boolean} isBrowsable
 */
Node.prototype['isBrowsable'] = undefined;

/**
 * Encryption state
 * @member {Boolean} isEncrypted
 */
Node.prototype['isEncrypted'] = undefined;

/**
 * Node is marked as favorite (for rooms / folders only)
 * @member {Boolean} isFavorite
 */
Node.prototype['isFavorite'] = undefined;

/**
 * Media server media token
 * @member {String} mediaToken
 */
Node.prototype['mediaToken'] = undefined;

/**
 * File media type (for files only)
 * @member {String} mediaType
 */
Node.prototype['mediaType'] = undefined;

/**
 * Name
 * @member {String} name
 */
Node.prototype['name'] = undefined;

/**
 * User notes
 * @member {String} notes
 */
Node.prototype['notes'] = undefined;

/**
 * Parent node ID (room or folder)
 * @member {Number} parentId
 */
Node.prototype['parentId'] = undefined;

/**
 * Parent node path  `/` if node is a root node (room)
 * @member {String} parentPath
 */
Node.prototype['parentPath'] = undefined;

/**
 * @member {module:model/NodePermissions} permissions
 */
Node.prototype['permissions'] = undefined;

/**
 * Quota in byte
 * @member {Number} quota
 */
Node.prototype['quota'] = undefined;

/**
 * Retention period for deleted nodes in days
 * @member {Number} recycleBinRetentionPeriod
 */
Node.prototype['recycleBinRetentionPeriod'] = undefined;

/**
 * &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
 * @member {Number} referenceId
 */
Node.prototype['referenceId'] = undefined;

/**
 * Node size in byte
 * @member {Number} size
 */
Node.prototype['size'] = undefined;

/**
 * &#128640; Since v4.22.0  Time the node was created on external file system
 * @member {Date} timestampCreation
 */
Node.prototype['timestampCreation'] = undefined;

/**
 * &#128640; Since v4.22.0  Time the content of a node was last modified on external file system
 * @member {Date} timestampModification
 */
Node.prototype['timestampModification'] = undefined;

/**
 * Node type
 * @member {module:model/Node.TypeEnum} type
 */
Node.prototype['type'] = undefined;

/**
 * Modification date
 * @member {Date} updatedAt
 */
Node.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} updatedBy
 */
Node.prototype['updatedBy'] = undefined;





/**
 * Allowed values for the <code>classification</code> property.
 * @enum {Number}
 * @readonly
 */
Node['ClassificationEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Node['TypeEnum'] = {

    /**
     * value: "room"
     * @const
     */
    "room": "room",

    /**
     * value: "folder"
     * @const
     */
    "folder": "folder",

    /**
     * value: "file"
     * @const
     */
    "file": "file"
};



export default Node;

