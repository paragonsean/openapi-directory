/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateWebhookRequest model module.
 * @module model/UpdateWebhookRequest
 * @version 4.42.3
 */
class UpdateWebhookRequest {
    /**
     * Constructs a new <code>UpdateWebhookRequest</code>.
     * Request model for updating a webhook
     * @alias module:model/UpdateWebhookRequest
     */
    constructor() { 
        
        UpdateWebhookRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateWebhookRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateWebhookRequest} obj Optional instance to populate.
     * @return {module:model/UpdateWebhookRequest} The populated <code>UpdateWebhookRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateWebhookRequest();

            if (data.hasOwnProperty('eventTypeNames')) {
                obj['eventTypeNames'] = ApiClient.convertToType(data['eventTypeNames'], ['String']);
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
            if (data.hasOwnProperty('triggerExampleEvent')) {
                obj['triggerExampleEvent'] = ApiClient.convertToType(data['triggerExampleEvent'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateWebhookRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateWebhookRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['eventTypeNames'])) {
            throw new Error("Expected the field `eventTypeNames` to be an array in the JSON data but got " + data['eventTypeNames']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * List of names of event types
 * @member {Array.<String>} eventTypeNames
 */
UpdateWebhookRequest.prototype['eventTypeNames'] = undefined;

/**
 * Is enabled
 * @member {Boolean} isEnabled
 */
UpdateWebhookRequest.prototype['isEnabled'] = undefined;

/**
 * Name
 * @member {String} name
 */
UpdateWebhookRequest.prototype['name'] = undefined;

/**
 * Secret; used for event message signatures
 * @member {String} secret
 */
UpdateWebhookRequest.prototype['secret'] = undefined;

/**
 * If set to true, an example event is being created
 * @member {Boolean} triggerExampleEvent
 */
UpdateWebhookRequest.prototype['triggerExampleEvent'] = undefined;

/**
 * URL (must begin with the `HTTPS` scheme)
 * @member {String} url
 */
UpdateWebhookRequest.prototype['url'] = undefined;






export default UpdateWebhookRequest;

