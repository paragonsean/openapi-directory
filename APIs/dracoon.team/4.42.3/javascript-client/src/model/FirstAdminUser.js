/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserAuthData from './UserAuthData';
import UserAuthMethod from './UserAuthMethod';

/**
 * The FirstAdminUser model module.
 * @module model/FirstAdminUser
 * @version 4.42.3
 */
class FirstAdminUser {
    /**
     * Constructs a new <code>FirstAdminUser</code>.
     * First administrator user
     * @alias module:model/FirstAdminUser
     * @param firstName {String} User first name
     * @param lastName {String} User last name
     */
    constructor(firstName, lastName) { 
        
        FirstAdminUser.initialize(this, firstName, lastName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstName, lastName) { 
        obj['firstName'] = firstName;
        obj['gender'] = 'n';
        obj['lastName'] = lastName;
        obj['needsToChangeUserName'] = false;
    }

    /**
     * Constructs a <code>FirstAdminUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FirstAdminUser} obj Optional instance to populate.
     * @return {module:model/FirstAdminUser} The populated <code>FirstAdminUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FirstAdminUser();

            if (data.hasOwnProperty('authData')) {
                obj['authData'] = UserAuthData.constructFromObject(data['authData']);
            }
            if (data.hasOwnProperty('authMethods')) {
                obj['authMethods'] = ApiClient.convertToType(data['authMethods'], [UserAuthMethod]);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('needsToChangePassword')) {
                obj['needsToChangePassword'] = ApiClient.convertToType(data['needsToChangePassword'], 'Boolean');
            }
            if (data.hasOwnProperty('needsToChangeUserName')) {
                obj['needsToChangeUserName'] = ApiClient.convertToType(data['needsToChangeUserName'], 'Boolean');
            }
            if (data.hasOwnProperty('notifyUser')) {
                obj['notifyUser'] = ApiClient.convertToType(data['notifyUser'], 'Boolean');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('receiverLanguage')) {
                obj['receiverLanguage'] = ApiClient.convertToType(data['receiverLanguage'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FirstAdminUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FirstAdminUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FirstAdminUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authData`
        if (data['authData']) { // data not null
          UserAuthData.validateJSON(data['authData']);
        }
        if (data['authMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authMethods'])) {
                throw new Error("Expected the field `authMethods` to be an array in the JSON data but got " + data['authMethods']);
            }
            // validate the optional field `authMethods` (array)
            for (const item of data['authMethods']) {
                UserAuthMethod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['receiverLanguage'] && !(typeof data['receiverLanguage'] === 'string' || data['receiverLanguage'] instanceof String)) {
            throw new Error("Expected the field `receiverLanguage` to be a primitive type in the JSON string but got " + data['receiverLanguage']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

FirstAdminUser.RequiredProperties = ["firstName", "lastName"];

/**
 * @member {module:model/UserAuthData} authData
 */
FirstAdminUser.prototype['authData'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `radius`  * `openid`  use `authData` instead
 * @member {Array.<module:model/UserAuthMethod>} authMethods
 */
FirstAdminUser.prototype['authMethods'] = undefined;

/**
 * Email 
 * @member {String} email
 */
FirstAdminUser.prototype['email'] = undefined;

/**
 * User first name
 * @member {String} firstName
 */
FirstAdminUser.prototype['firstName'] = undefined;

/**
 * &#128679; Deprecated since v4.12.0  Gender
 * @member {String} gender
 * @default 'n'
 */
FirstAdminUser.prototype['gender'] = 'n';

/**
 * &#128679; Deprecated since v4.7.0  Language ID or ISO 639-1 code
 * @member {String} language
 */
FirstAdminUser.prototype['language'] = undefined;

/**
 * User last name
 * @member {String} lastName
 */
FirstAdminUser.prototype['lastName'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  User login name
 * @member {String} login
 */
FirstAdminUser.prototype['login'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use `authDate.mustChangePassword` instead
 * @member {Boolean} needsToChangePassword
 */
FirstAdminUser.prototype['needsToChangePassword'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  If `true`, the user must change the `userName` at the first login.
 * @member {Boolean} needsToChangeUserName
 * @default false
 */
FirstAdminUser.prototype['needsToChangeUserName'] = false;

/**
 * Notify user about his new account  * default: `true` for `basic` auth type  * default: `false` for `active_directory`, `openid` and `radius` auth types
 * @member {Boolean} notifyUser
 */
FirstAdminUser.prototype['notifyUser'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  An initial password may be preset  use `authData` instead
 * @member {String} password
 */
FirstAdminUser.prototype['password'] = undefined;

/**
 * Phone number
 * @member {String} phone
 */
FirstAdminUser.prototype['phone'] = undefined;

/**
 * IETF language tag
 * @member {String} receiverLanguage
 */
FirstAdminUser.prototype['receiverLanguage'] = undefined;

/**
 * &#128679; Deprecated since v4.18.0  Job title
 * @member {String} title
 */
FirstAdminUser.prototype['title'] = undefined;

/**
 * &#128640; Since v4.13.0  Username
 * @member {String} userName
 */
FirstAdminUser.prototype['userName'] = undefined;






export default FirstAdminUser;

