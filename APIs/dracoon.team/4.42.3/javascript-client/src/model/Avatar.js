/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Avatar model module.
 * @module model/Avatar
 * @version 4.42.3
 */
class Avatar {
    /**
     * Constructs a new <code>Avatar</code>.
     * User avatar information
     * @alias module:model/Avatar
     * @param avatarUri {String} Avatar URI
     * @param avatarUuid {String} Avatar UUID
     * @param isCustomAvatar {Boolean} Determines whether user updated his / her avatar with own image
     */
    constructor(avatarUri, avatarUuid, isCustomAvatar) { 
        
        Avatar.initialize(this, avatarUri, avatarUuid, isCustomAvatar);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, avatarUri, avatarUuid, isCustomAvatar) { 
        obj['avatarUri'] = avatarUri;
        obj['avatarUuid'] = avatarUuid;
        obj['isCustomAvatar'] = isCustomAvatar;
    }

    /**
     * Constructs a <code>Avatar</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Avatar} obj Optional instance to populate.
     * @return {module:model/Avatar} The populated <code>Avatar</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Avatar();

            if (data.hasOwnProperty('avatarUri')) {
                obj['avatarUri'] = ApiClient.convertToType(data['avatarUri'], 'String');
            }
            if (data.hasOwnProperty('avatarUuid')) {
                obj['avatarUuid'] = ApiClient.convertToType(data['avatarUuid'], 'String');
            }
            if (data.hasOwnProperty('isCustomAvatar')) {
                obj['isCustomAvatar'] = ApiClient.convertToType(data['isCustomAvatar'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Avatar</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Avatar</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Avatar.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['avatarUri'] && !(typeof data['avatarUri'] === 'string' || data['avatarUri'] instanceof String)) {
            throw new Error("Expected the field `avatarUri` to be a primitive type in the JSON string but got " + data['avatarUri']);
        }
        // ensure the json data is a string
        if (data['avatarUuid'] && !(typeof data['avatarUuid'] === 'string' || data['avatarUuid'] instanceof String)) {
            throw new Error("Expected the field `avatarUuid` to be a primitive type in the JSON string but got " + data['avatarUuid']);
        }

        return true;
    }


}

Avatar.RequiredProperties = ["avatarUri", "avatarUuid", "isCustomAvatar"];

/**
 * Avatar URI
 * @member {String} avatarUri
 */
Avatar.prototype['avatarUri'] = undefined;

/**
 * Avatar UUID
 * @member {String} avatarUuid
 */
Avatar.prototype['avatarUuid'] = undefined;

/**
 * Determines whether user updated his / her avatar with own image
 * @member {Boolean} isCustomAvatar
 */
Avatar.prototype['isCustomAvatar'] = undefined;






export default Avatar;

