/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AlgorithmVersionInfo from './AlgorithmVersionInfo';

/**
 * The AlgorithmVersionInfoList model module.
 * @module model/AlgorithmVersionInfoList
 * @version 4.42.3
 */
class AlgorithmVersionInfoList {
    /**
     * Constructs a new <code>AlgorithmVersionInfoList</code>.
     * Information of all available algorithms
     * @alias module:model/AlgorithmVersionInfoList
     * @param fileKeyAlgorithms {Array.<module:model/AlgorithmVersionInfo>} List of file key algorithms
     * @param keyPairAlgorithms {Array.<module:model/AlgorithmVersionInfo>} List of key pair algorithms
     */
    constructor(fileKeyAlgorithms, keyPairAlgorithms) { 
        
        AlgorithmVersionInfoList.initialize(this, fileKeyAlgorithms, keyPairAlgorithms);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, fileKeyAlgorithms, keyPairAlgorithms) { 
        obj['fileKeyAlgorithms'] = fileKeyAlgorithms;
        obj['keyPairAlgorithms'] = keyPairAlgorithms;
    }

    /**
     * Constructs a <code>AlgorithmVersionInfoList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AlgorithmVersionInfoList} obj Optional instance to populate.
     * @return {module:model/AlgorithmVersionInfoList} The populated <code>AlgorithmVersionInfoList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AlgorithmVersionInfoList();

            if (data.hasOwnProperty('fileKeyAlgorithms')) {
                obj['fileKeyAlgorithms'] = ApiClient.convertToType(data['fileKeyAlgorithms'], [AlgorithmVersionInfo]);
            }
            if (data.hasOwnProperty('keyPairAlgorithms')) {
                obj['keyPairAlgorithms'] = ApiClient.convertToType(data['keyPairAlgorithms'], [AlgorithmVersionInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AlgorithmVersionInfoList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AlgorithmVersionInfoList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AlgorithmVersionInfoList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['fileKeyAlgorithms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fileKeyAlgorithms'])) {
                throw new Error("Expected the field `fileKeyAlgorithms` to be an array in the JSON data but got " + data['fileKeyAlgorithms']);
            }
            // validate the optional field `fileKeyAlgorithms` (array)
            for (const item of data['fileKeyAlgorithms']) {
                AlgorithmVersionInfo.validateJSON(item);
            };
        }
        if (data['keyPairAlgorithms']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['keyPairAlgorithms'])) {
                throw new Error("Expected the field `keyPairAlgorithms` to be an array in the JSON data but got " + data['keyPairAlgorithms']);
            }
            // validate the optional field `keyPairAlgorithms` (array)
            for (const item of data['keyPairAlgorithms']) {
                AlgorithmVersionInfo.validateJSON(item);
            };
        }

        return true;
    }


}

AlgorithmVersionInfoList.RequiredProperties = ["fileKeyAlgorithms", "keyPairAlgorithms"];

/**
 * List of file key algorithms
 * @member {Array.<module:model/AlgorithmVersionInfo>} fileKeyAlgorithms
 */
AlgorithmVersionInfoList.prototype['fileKeyAlgorithms'] = undefined;

/**
 * List of key pair algorithms
 * @member {Array.<module:model/AlgorithmVersionInfo>} keyPairAlgorithms
 */
AlgorithmVersionInfoList.prototype['keyPairAlgorithms'] = undefined;






export default AlgorithmVersionInfoList;

