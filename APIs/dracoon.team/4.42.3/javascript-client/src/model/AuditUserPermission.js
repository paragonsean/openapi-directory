/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodePermissions from './NodePermissions';

/**
 * The AuditUserPermission model module.
 * @module model/AuditUserPermission
 * @version 4.42.3
 */
class AuditUserPermission {
    /**
     * Constructs a new <code>AuditUserPermission</code>.
     * Audit user permissions report
     * @alias module:model/AuditUserPermission
     * @param permissions {module:model/NodePermissions} 
     * @param userFirstName {String} User first name
     * @param userId {Number} Unique identifier for the user
     * @param userLastName {String} User last name
     * @param userLogin {String} User login name
     */
    constructor(permissions, userFirstName, userId, userLastName, userLogin) { 
        
        AuditUserPermission.initialize(this, permissions, userFirstName, userId, userLastName, userLogin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, permissions, userFirstName, userId, userLastName, userLogin) { 
        obj['permissions'] = permissions;
        obj['userFirstName'] = userFirstName;
        obj['userId'] = userId;
        obj['userLastName'] = userLastName;
        obj['userLogin'] = userLogin;
    }

    /**
     * Constructs a <code>AuditUserPermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditUserPermission} obj Optional instance to populate.
     * @return {module:model/AuditUserPermission} The populated <code>AuditUserPermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditUserPermission();

            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = NodePermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('userFirstName')) {
                obj['userFirstName'] = ApiClient.convertToType(data['userFirstName'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('userLastName')) {
                obj['userLastName'] = ApiClient.convertToType(data['userLastName'], 'String');
            }
            if (data.hasOwnProperty('userLogin')) {
                obj['userLogin'] = ApiClient.convertToType(data['userLogin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditUserPermission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditUserPermission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuditUserPermission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          NodePermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['userFirstName'] && !(typeof data['userFirstName'] === 'string' || data['userFirstName'] instanceof String)) {
            throw new Error("Expected the field `userFirstName` to be a primitive type in the JSON string but got " + data['userFirstName']);
        }
        // ensure the json data is a string
        if (data['userLastName'] && !(typeof data['userLastName'] === 'string' || data['userLastName'] instanceof String)) {
            throw new Error("Expected the field `userLastName` to be a primitive type in the JSON string but got " + data['userLastName']);
        }
        // ensure the json data is a string
        if (data['userLogin'] && !(typeof data['userLogin'] === 'string' || data['userLogin'] instanceof String)) {
            throw new Error("Expected the field `userLogin` to be a primitive type in the JSON string but got " + data['userLogin']);
        }

        return true;
    }


}

AuditUserPermission.RequiredProperties = ["permissions", "userFirstName", "userId", "userLastName", "userLogin"];

/**
 * @member {module:model/NodePermissions} permissions
 */
AuditUserPermission.prototype['permissions'] = undefined;

/**
 * User first name
 * @member {String} userFirstName
 */
AuditUserPermission.prototype['userFirstName'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} userId
 */
AuditUserPermission.prototype['userId'] = undefined;

/**
 * User last name
 * @member {String} userLastName
 */
AuditUserPermission.prototype['userLastName'] = undefined;

/**
 * User login name
 * @member {String} userLogin
 */
AuditUserPermission.prototype['userLogin'] = undefined;






export default AuditUserPermission;

