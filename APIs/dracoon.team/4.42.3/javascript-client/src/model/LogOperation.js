/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogOperation model module.
 * @module model/LogOperation
 * @version 4.42.3
 */
class LogOperation {
    /**
     * Constructs a new <code>LogOperation</code>.
     * Log operation
     * @alias module:model/LogOperation
     * @param id {Number} Operation type ID
     * @param isDeprecated {Boolean} Determines whether log operation is deprecated or not
     * @param name {String} Operation name
     */
    constructor(id, isDeprecated, name) { 
        
        LogOperation.initialize(this, id, isDeprecated, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, isDeprecated, name) { 
        obj['id'] = id;
        obj['isDeprecated'] = isDeprecated;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>LogOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogOperation} obj Optional instance to populate.
     * @return {module:model/LogOperation} The populated <code>LogOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogOperation();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isDeprecated')) {
                obj['isDeprecated'] = ApiClient.convertToType(data['isDeprecated'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogOperation</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogOperation.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

LogOperation.RequiredProperties = ["id", "isDeprecated", "name"];

/**
 * Operation type ID
 * @member {Number} id
 */
LogOperation.prototype['id'] = undefined;

/**
 * Determines whether log operation is deprecated or not
 * @member {Boolean} isDeprecated
 */
LogOperation.prototype['isDeprecated'] = undefined;

/**
 * Operation name
 * @member {String} name
 */
LogOperation.prototype['name'] = undefined;






export default LogOperation;

