/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorResponse from './ErrorResponse';
import Node from './Node';

/**
 * The S3FileUploadStatus model module.
 * @module model/S3FileUploadStatus
 * @version 4.42.3
 */
class S3FileUploadStatus {
    /**
     * Constructs a new <code>S3FileUploadStatus</code>.
     * S3 file upload status information
     * @alias module:model/S3FileUploadStatus
     * @param status {String} S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload
     */
    constructor(status) { 
        
        S3FileUploadStatus.initialize(this, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, status) { 
        obj['status'] = status;
    }

    /**
     * Constructs a <code>S3FileUploadStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3FileUploadStatus} obj Optional instance to populate.
     * @return {module:model/S3FileUploadStatus} The populated <code>S3FileUploadStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3FileUploadStatus();

            if (data.hasOwnProperty('errorDetails')) {
                obj['errorDetails'] = ErrorResponse.constructFromObject(data['errorDetails']);
            }
            if (data.hasOwnProperty('node')) {
                obj['node'] = Node.constructFromObject(data['node']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3FileUploadStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3FileUploadStatus</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3FileUploadStatus.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `errorDetails`
        if (data['errorDetails']) { // data not null
          ErrorResponse.validateJSON(data['errorDetails']);
        }
        // validate the optional field `node`
        if (data['node']) { // data not null
          Node.validateJSON(data['node']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

S3FileUploadStatus.RequiredProperties = ["status"];

/**
 * @member {module:model/ErrorResponse} errorDetails
 */
S3FileUploadStatus.prototype['errorDetails'] = undefined;

/**
 * @member {module:model/Node} node
 */
S3FileUploadStatus.prototype['node'] = undefined;

/**
 * S3 file upload status:  * `transfer` - upload in progress  * `finishing` - completing file upload  * `done` - file upload successully done  * `error` - an error occurred while file upload
 * @member {String} status
 */
S3FileUploadStatus.prototype['status'] = undefined;






export default S3FileUploadStatus;

