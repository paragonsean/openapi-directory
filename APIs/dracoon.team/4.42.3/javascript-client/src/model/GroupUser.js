/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfo from './UserInfo';

/**
 * The GroupUser model module.
 * @module model/GroupUser
 * @version 4.42.3
 */
class GroupUser {
    /**
     * Constructs a new <code>GroupUser</code>.
     * User information
     * @alias module:model/GroupUser
     * @param displayName {String} &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name
     * @param email {String} &#128679; Deprecated since v4.11.0  Email   use `email` from `UserInfo` instead
     * @param id {Number} &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead
     * @param isMember {Boolean} Determines whether user is a member of the group or not
     * @param login {String} &#128679; Deprecated since v4.11.0  User login name
     * @param userInfo {module:model/UserInfo} 
     */
    constructor(displayName, email, id, isMember, login, userInfo) { 
        
        GroupUser.initialize(this, displayName, email, id, isMember, login, userInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, email, id, isMember, login, userInfo) { 
        obj['displayName'] = displayName;
        obj['email'] = email;
        obj['id'] = id;
        obj['isMember'] = isMember;
        obj['login'] = login;
        obj['userInfo'] = userInfo;
    }

    /**
     * Constructs a <code>GroupUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GroupUser} obj Optional instance to populate.
     * @return {module:model/GroupUser} The populated <code>GroupUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GroupUser();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isMember')) {
                obj['isMember'] = ApiClient.convertToType(data['isMember'], 'Boolean');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('userInfo')) {
                obj['userInfo'] = UserInfo.constructFromObject(data['userInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GroupUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GroupUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GroupUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // validate the optional field `userInfo`
        if (data['userInfo']) { // data not null
          UserInfo.validateJSON(data['userInfo']);
        }

        return true;
    }


}

GroupUser.RequiredProperties = ["displayName", "email", "id", "isMember", "login", "userInfo"];

/**
 * &#128679; Deprecated since v4.11.0  Display name  use information from `UserInfo` instead to combine a display name
 * @member {String} displayName
 */
GroupUser.prototype['displayName'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  Email   use `email` from `UserInfo` instead
 * @member {String} email
 */
GroupUser.prototype['email'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  Unique identifier for the user  use `id` from `UserInfo` instead
 * @member {Number} id
 */
GroupUser.prototype['id'] = undefined;

/**
 * Determines whether user is a member of the group or not
 * @member {Boolean} isMember
 */
GroupUser.prototype['isMember'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  User login name
 * @member {String} login
 */
GroupUser.prototype['login'] = undefined;

/**
 * @member {module:model/UserInfo} userInfo
 */
GroupUser.prototype['userInfo'] = undefined;






export default GroupUser;

