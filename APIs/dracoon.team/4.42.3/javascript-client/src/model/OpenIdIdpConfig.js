/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OpenIdIdpConfig model module.
 * @module model/OpenIdIdpConfig
 * @version 4.42.3
 */
class OpenIdIdpConfig {
    /**
     * Constructs a new <code>OpenIdIdpConfig</code>.
     * OpenID Connect IDP configuration
     * @alias module:model/OpenIdIdpConfig
     * @param id {Number} ID
     */
    constructor(id) { 
        
        OpenIdIdpConfig.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
        obj['pkceEnabled'] = false;
        obj['userImportEnabled'] = false;
        obj['userUpdateEnabled'] = false;
    }

    /**
     * Constructs a <code>OpenIdIdpConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenIdIdpConfig} obj Optional instance to populate.
     * @return {module:model/OpenIdIdpConfig} The populated <code>OpenIdIdpConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenIdIdpConfig();

            if (data.hasOwnProperty('authorizationEndPointUrl')) {
                obj['authorizationEndPointUrl'] = ApiClient.convertToType(data['authorizationEndPointUrl'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('fallbackMappingClaim')) {
                obj['fallbackMappingClaim'] = ApiClient.convertToType(data['fallbackMappingClaim'], 'String');
            }
            if (data.hasOwnProperty('flow')) {
                obj['flow'] = ApiClient.convertToType(data['flow'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('jwksEndPointUrl')) {
                obj['jwksEndPointUrl'] = ApiClient.convertToType(data['jwksEndPointUrl'], 'String');
            }
            if (data.hasOwnProperty('mappingClaim')) {
                obj['mappingClaim'] = ApiClient.convertToType(data['mappingClaim'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pkceChallengeMethod')) {
                obj['pkceChallengeMethod'] = ApiClient.convertToType(data['pkceChallengeMethod'], 'String');
            }
            if (data.hasOwnProperty('pkceEnabled')) {
                obj['pkceEnabled'] = ApiClient.convertToType(data['pkceEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('redirectUris')) {
                obj['redirectUris'] = ApiClient.convertToType(data['redirectUris'], ['String']);
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('tokenEndPointUrl')) {
                obj['tokenEndPointUrl'] = ApiClient.convertToType(data['tokenEndPointUrl'], 'String');
            }
            if (data.hasOwnProperty('userImportEnabled')) {
                obj['userImportEnabled'] = ApiClient.convertToType(data['userImportEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('userImportGroup')) {
                obj['userImportGroup'] = ApiClient.convertToType(data['userImportGroup'], 'Number');
            }
            if (data.hasOwnProperty('userInfoEndPointUrl')) {
                obj['userInfoEndPointUrl'] = ApiClient.convertToType(data['userInfoEndPointUrl'], 'String');
            }
            if (data.hasOwnProperty('userInfoSource')) {
                obj['userInfoSource'] = ApiClient.convertToType(data['userInfoSource'], 'String');
            }
            if (data.hasOwnProperty('userManagementUrl')) {
                obj['userManagementUrl'] = ApiClient.convertToType(data['userManagementUrl'], 'String');
            }
            if (data.hasOwnProperty('userUpdateEnabled')) {
                obj['userUpdateEnabled'] = ApiClient.convertToType(data['userUpdateEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenIdIdpConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenIdIdpConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenIdIdpConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationEndPointUrl'] && !(typeof data['authorizationEndPointUrl'] === 'string' || data['authorizationEndPointUrl'] instanceof String)) {
            throw new Error("Expected the field `authorizationEndPointUrl` to be a primitive type in the JSON string but got " + data['authorizationEndPointUrl']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['fallbackMappingClaim'] && !(typeof data['fallbackMappingClaim'] === 'string' || data['fallbackMappingClaim'] instanceof String)) {
            throw new Error("Expected the field `fallbackMappingClaim` to be a primitive type in the JSON string but got " + data['fallbackMappingClaim']);
        }
        // ensure the json data is a string
        if (data['flow'] && !(typeof data['flow'] === 'string' || data['flow'] instanceof String)) {
            throw new Error("Expected the field `flow` to be a primitive type in the JSON string but got " + data['flow']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['jwksEndPointUrl'] && !(typeof data['jwksEndPointUrl'] === 'string' || data['jwksEndPointUrl'] instanceof String)) {
            throw new Error("Expected the field `jwksEndPointUrl` to be a primitive type in the JSON string but got " + data['jwksEndPointUrl']);
        }
        // ensure the json data is a string
        if (data['mappingClaim'] && !(typeof data['mappingClaim'] === 'string' || data['mappingClaim'] instanceof String)) {
            throw new Error("Expected the field `mappingClaim` to be a primitive type in the JSON string but got " + data['mappingClaim']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pkceChallengeMethod'] && !(typeof data['pkceChallengeMethod'] === 'string' || data['pkceChallengeMethod'] instanceof String)) {
            throw new Error("Expected the field `pkceChallengeMethod` to be a primitive type in the JSON string but got " + data['pkceChallengeMethod']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['redirectUris'])) {
            throw new Error("Expected the field `redirectUris` to be an array in the JSON data but got " + data['redirectUris']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['tokenEndPointUrl'] && !(typeof data['tokenEndPointUrl'] === 'string' || data['tokenEndPointUrl'] instanceof String)) {
            throw new Error("Expected the field `tokenEndPointUrl` to be a primitive type in the JSON string but got " + data['tokenEndPointUrl']);
        }
        // ensure the json data is a string
        if (data['userInfoEndPointUrl'] && !(typeof data['userInfoEndPointUrl'] === 'string' || data['userInfoEndPointUrl'] instanceof String)) {
            throw new Error("Expected the field `userInfoEndPointUrl` to be a primitive type in the JSON string but got " + data['userInfoEndPointUrl']);
        }
        // ensure the json data is a string
        if (data['userInfoSource'] && !(typeof data['userInfoSource'] === 'string' || data['userInfoSource'] instanceof String)) {
            throw new Error("Expected the field `userInfoSource` to be a primitive type in the JSON string but got " + data['userInfoSource']);
        }
        // ensure the json data is a string
        if (data['userManagementUrl'] && !(typeof data['userManagementUrl'] === 'string' || data['userManagementUrl'] instanceof String)) {
            throw new Error("Expected the field `userManagementUrl` to be a primitive type in the JSON string but got " + data['userManagementUrl']);
        }

        return true;
    }


}

OpenIdIdpConfig.RequiredProperties = ["id"];

/**
 * URL of the authorization endpoint
 * @member {String} authorizationEndPointUrl
 */
OpenIdIdpConfig.prototype['authorizationEndPointUrl'] = undefined;

/**
 * ID of the OpenID client
 * @member {String} clientId
 */
OpenIdIdpConfig.prototype['clientId'] = undefined;

/**
 * Secret, which client uses at authentication.
 * @member {String} clientSecret
 */
OpenIdIdpConfig.prototype['clientSecret'] = undefined;

/**
 * Name of the claim which is used for the user mapping fallback.
 * @member {String} fallbackMappingClaim
 */
OpenIdIdpConfig.prototype['fallbackMappingClaim'] = undefined;

/**
 * &#128640; Since v4.11.0  Flow, which is used at authentication
 * @member {module:model/OpenIdIdpConfig.FlowEnum} flow
 */
OpenIdIdpConfig.prototype['flow'] = undefined;

/**
 * ID
 * @member {Number} id
 */
OpenIdIdpConfig.prototype['id'] = undefined;

/**
 * Issuer identifier of the IDP  The value is a case sensitive URL.
 * @member {String} issuer
 */
OpenIdIdpConfig.prototype['issuer'] = undefined;

/**
 * URL of the JWKS endpoint
 * @member {String} jwksEndPointUrl
 */
OpenIdIdpConfig.prototype['jwksEndPointUrl'] = undefined;

/**
 * Name of the claim which is used for the user mapping.
 * @member {String} mappingClaim
 */
OpenIdIdpConfig.prototype['mappingClaim'] = undefined;

/**
 * Name of the IDP
 * @member {String} name
 */
OpenIdIdpConfig.prototype['name'] = undefined;

/**
 * PKCE code challenge method.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
 * @member {String} pkceChallengeMethod
 */
OpenIdIdpConfig.prototype['pkceChallengeMethod'] = undefined;

/**
 * Determines whether PKCE is enabled.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
 * @member {Boolean} pkceEnabled
 * @default false
 */
OpenIdIdpConfig.prototype['pkceEnabled'] = false;

/**
 * URIs, to which a user is redirected after authorization.
 * @member {Array.<String>} redirectUris
 */
OpenIdIdpConfig.prototype['redirectUris'] = undefined;

/**
 * List of requested scopes  Usually `openid` and the names of the requested claims.
 * @member {Array.<String>} scopes
 */
OpenIdIdpConfig.prototype['scopes'] = undefined;

/**
 * URL of the token endpoint
 * @member {String} tokenEndPointUrl
 */
OpenIdIdpConfig.prototype['tokenEndPointUrl'] = undefined;

/**
 * Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
 * @member {Boolean} userImportEnabled
 * @default false
 */
OpenIdIdpConfig.prototype['userImportEnabled'] = false;

/**
 * User group that is assigned to users who are created by automatic import.  Reset with `0`
 * @member {Number} userImportGroup
 */
OpenIdIdpConfig.prototype['userImportGroup'] = undefined;

/**
 * URL of the user info endpoint
 * @member {String} userInfoEndPointUrl
 */
OpenIdIdpConfig.prototype['userInfoEndPointUrl'] = undefined;

/**
 * &#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.
 * @member {module:model/OpenIdIdpConfig.UserInfoSourceEnum} userInfoSource
 */
OpenIdIdpConfig.prototype['userInfoSource'] = undefined;

/**
 * URL of the user management UI.  Use empty string to remove.
 * @member {String} userManagementUrl
 */
OpenIdIdpConfig.prototype['userManagementUrl'] = undefined;

/**
 * Determines if the DRACOON account is updated with data from AD / IDP.  For OpenID Connect, the scopes `email` and `profile` are needed.
 * @member {Boolean} userUpdateEnabled
 * @default false
 */
OpenIdIdpConfig.prototype['userUpdateEnabled'] = false;





/**
 * Allowed values for the <code>flow</code> property.
 * @enum {String}
 * @readonly
 */
OpenIdIdpConfig['FlowEnum'] = {

    /**
     * value: "authorization_code"
     * @const
     */
    "authorization_code": "authorization_code",

    /**
     * value: "hybrid"
     * @const
     */
    "hybrid": "hybrid"
};


/**
 * Allowed values for the <code>userInfoSource</code> property.
 * @enum {String}
 * @readonly
 */
OpenIdIdpConfig['UserInfoSourceEnum'] = {

    /**
     * value: "user_info_endpoint"
     * @const
     */
    "user_info_endpoint": "user_info_endpoint",

    /**
     * value: "id_token"
     * @const
     */
    "id_token": "id_token"
};



export default OpenIdIdpConfig;

