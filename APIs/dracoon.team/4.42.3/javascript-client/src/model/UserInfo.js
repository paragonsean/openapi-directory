/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserInfo model module.
 * @module model/UserInfo
 * @version 4.42.3
 */
class UserInfo {
    /**
     * Constructs a new <code>UserInfo</code>.
     * User information
     * @alias module:model/UserInfo
     * @param avatarUuid {String} &#128640; Since v4.11.0  Avatar UUID
     * @param firstName {String} &#128640; Since v4.11.0  User first name (mandatory if `userType` is `internal`)
     * @param id {Number} Unique identifier for the user
     * @param lastName {String} &#128640; Since v4.11.0  User last name (mandatory if `userType` is `internal`)
     * @param userName {String} &#128640; Since v4.13.0  Username (only returned for `internal` users)
     * @param userType {module:model/UserInfo.UserTypeEnum} &#128640; Since v4.11.0  User type:  * `internal` - ordinary DRACOON user  * `external` - external user without DRACOON account  * `system` - system user (non human &#128125;)  * `deleted` - deleted DRACOON user
     */
    constructor(avatarUuid, firstName, id, lastName, userName, userType) { 
        
        UserInfo.initialize(this, avatarUuid, firstName, id, lastName, userName, userType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, avatarUuid, firstName, id, lastName, userName, userType) { 
        obj['avatarUuid'] = avatarUuid;
        obj['firstName'] = firstName;
        obj['id'] = id;
        obj['lastName'] = lastName;
        obj['userName'] = userName;
        obj['userType'] = userType;
    }

    /**
     * Constructs a <code>UserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserInfo} obj Optional instance to populate.
     * @return {module:model/UserInfo} The populated <code>UserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserInfo();

            if (data.hasOwnProperty('avatarUuid')) {
                obj['avatarUuid'] = ApiClient.convertToType(data['avatarUuid'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['avatarUuid'] && !(typeof data['avatarUuid'] === 'string' || data['avatarUuid'] instanceof String)) {
            throw new Error("Expected the field `avatarUuid` to be a primitive type in the JSON string but got " + data['avatarUuid']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }
        // ensure the json data is a string
        if (data['userType'] && !(typeof data['userType'] === 'string' || data['userType'] instanceof String)) {
            throw new Error("Expected the field `userType` to be a primitive type in the JSON string but got " + data['userType']);
        }

        return true;
    }


}

UserInfo.RequiredProperties = ["avatarUuid", "firstName", "id", "lastName", "userName", "userType"];

/**
 * &#128640; Since v4.11.0  Avatar UUID
 * @member {String} avatarUuid
 */
UserInfo.prototype['avatarUuid'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  Display name  use other fields from `UserInfo` instead to combine a display name
 * @member {String} displayName
 */
UserInfo.prototype['displayName'] = undefined;

/**
 * &#128640; Since v4.11.0  Email 
 * @member {String} email
 */
UserInfo.prototype['email'] = undefined;

/**
 * &#128640; Since v4.11.0  User first name (mandatory if `userType` is `internal`)
 * @member {String} firstName
 */
UserInfo.prototype['firstName'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} id
 */
UserInfo.prototype['id'] = undefined;

/**
 * &#128640; Since v4.11.0  User last name (mandatory if `userType` is `internal`)
 * @member {String} lastName
 */
UserInfo.prototype['lastName'] = undefined;

/**
 * &#128679; Deprecated since v4.18.0  Job title
 * @member {String} title
 */
UserInfo.prototype['title'] = undefined;

/**
 * &#128640; Since v4.13.0  Username (only returned for `internal` users)
 * @member {String} userName
 */
UserInfo.prototype['userName'] = undefined;

/**
 * &#128640; Since v4.11.0  User type:  * `internal` - ordinary DRACOON user  * `external` - external user without DRACOON account  * `system` - system user (non human &#128125;)  * `deleted` - deleted DRACOON user
 * @member {module:model/UserInfo.UserTypeEnum} userType
 */
UserInfo.prototype['userType'] = undefined;





/**
 * Allowed values for the <code>userType</code> property.
 * @enum {String}
 * @readonly
 */
UserInfo['UserTypeEnum'] = {

    /**
     * value: "system"
     * @const
     */
    "system": "system",

    /**
     * value: "internal"
     * @const
     */
    "internal": "internal",

    /**
     * value: "external"
     * @const
     */
    "external": "external",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default UserInfo;

