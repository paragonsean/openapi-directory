/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PendingUserData model module.
 * @module model/PendingUserData
 * @version 4.42.3
 */
class PendingUserData {
    /**
     * Constructs a new <code>PendingUserData</code>.
     * Pending user information
     * @alias module:model/PendingUserData
     * @param displayName {String} Display name  use information from `UserInfo` instead to combine a display name
     * @param email {String} Email   use `email` from `UserInfo` instead
     * @param id {Number} Unique identifier for the user
     * @param login {String} User login name
     */
    constructor(displayName, email, id, login) { 
        
        PendingUserData.initialize(this, displayName, email, id, login);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, email, id, login) { 
        obj['displayName'] = displayName;
        obj['email'] = email;
        obj['id'] = id;
        obj['login'] = login;
    }

    /**
     * Constructs a <code>PendingUserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingUserData} obj Optional instance to populate.
     * @return {module:model/PendingUserData} The populated <code>PendingUserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingUserData();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PendingUserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PendingUserData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PendingUserData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }

        return true;
    }


}

PendingUserData.RequiredProperties = ["displayName", "email", "id", "login"];

/**
 * Display name  use information from `UserInfo` instead to combine a display name
 * @member {String} displayName
 */
PendingUserData.prototype['displayName'] = undefined;

/**
 * Email   use `email` from `UserInfo` instead
 * @member {String} email
 */
PendingUserData.prototype['email'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} id
 */
PendingUserData.prototype['id'] = undefined;

/**
 * User login name
 * @member {String} login
 */
PendingUserData.prototype['login'] = undefined;






export default PendingUserData;

