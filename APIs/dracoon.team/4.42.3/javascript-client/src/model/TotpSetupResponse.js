/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TotpSetupResponse model module.
 * @module model/TotpSetupResponse
 * @version 4.42.3
 */
class TotpSetupResponse {
    /**
     * Constructs a new <code>TotpSetupResponse</code>.
     * Contains QR code URL and OTP URI for TOTP setup
     * @alias module:model/TotpSetupResponse
     * @param id {Number} ID
     * @param otpUri {String} URI containing secret key, issuer and account information
     * @param qrCode {String} TOTP data URL (QR Code)
     * @param secret {String} Secret key used for setup of TOTP authentication
     */
    constructor(id, otpUri, qrCode, secret) { 
        
        TotpSetupResponse.initialize(this, id, otpUri, qrCode, secret);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, otpUri, qrCode, secret) { 
        obj['id'] = id;
        obj['otpUri'] = otpUri;
        obj['qrCode'] = qrCode;
        obj['secret'] = secret;
    }

    /**
     * Constructs a <code>TotpSetupResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TotpSetupResponse} obj Optional instance to populate.
     * @return {module:model/TotpSetupResponse} The populated <code>TotpSetupResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TotpSetupResponse();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('otpUri')) {
                obj['otpUri'] = ApiClient.convertToType(data['otpUri'], 'String');
            }
            if (data.hasOwnProperty('qrCode')) {
                obj['qrCode'] = ApiClient.convertToType(data['qrCode'], 'String');
            }
            if (data.hasOwnProperty('secret')) {
                obj['secret'] = ApiClient.convertToType(data['secret'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TotpSetupResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TotpSetupResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TotpSetupResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['otpUri'] && !(typeof data['otpUri'] === 'string' || data['otpUri'] instanceof String)) {
            throw new Error("Expected the field `otpUri` to be a primitive type in the JSON string but got " + data['otpUri']);
        }
        // ensure the json data is a string
        if (data['qrCode'] && !(typeof data['qrCode'] === 'string' || data['qrCode'] instanceof String)) {
            throw new Error("Expected the field `qrCode` to be a primitive type in the JSON string but got " + data['qrCode']);
        }
        // ensure the json data is a string
        if (data['secret'] && !(typeof data['secret'] === 'string' || data['secret'] instanceof String)) {
            throw new Error("Expected the field `secret` to be a primitive type in the JSON string but got " + data['secret']);
        }

        return true;
    }


}

TotpSetupResponse.RequiredProperties = ["id", "otpUri", "qrCode", "secret"];

/**
 * ID
 * @member {Number} id
 */
TotpSetupResponse.prototype['id'] = undefined;

/**
 * URI containing secret key, issuer and account information
 * @member {String} otpUri
 */
TotpSetupResponse.prototype['otpUri'] = undefined;

/**
 * TOTP data URL (QR Code)
 * @member {String} qrCode
 */
TotpSetupResponse.prototype['qrCode'] = undefined;

/**
 * Secret key used for setup of TOTP authentication
 * @member {String} secret
 */
TotpSetupResponse.prototype['secret'] = undefined;






export default TotpSetupResponse;

