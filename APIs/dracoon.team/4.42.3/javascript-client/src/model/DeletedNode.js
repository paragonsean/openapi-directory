/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfo from './UserInfo';

/**
 * The DeletedNode model module.
 * @module model/DeletedNode
 * @version 4.42.3
 */
class DeletedNode {
    /**
     * Constructs a new <code>DeletedNode</code>.
     * Deleted node information (Deleted node can be a folder or file)
     * @alias module:model/DeletedNode
     * @param name {String} Node name
     * @param parentId {Number} Parent node ID (room or folder)
     * @param parentPath {String} Parent node path  `/` if node is a root node (room)
     * @param type {module:model/DeletedNode.TypeEnum} Node type
     */
    constructor(name, parentId, parentPath, type) { 
        
        DeletedNode.initialize(this, name, parentId, parentPath, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, parentId, parentPath, type) { 
        obj['name'] = name;
        obj['parentId'] = parentId;
        obj['parentPath'] = parentPath;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>DeletedNode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeletedNode} obj Optional instance to populate.
     * @return {module:model/DeletedNode} The populated <code>DeletedNode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeletedNode();

            if (data.hasOwnProperty('accessedAt')) {
                obj['accessedAt'] = ApiClient.convertToType(data['accessedAt'], 'Date');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ApiClient.convertToType(data['classification'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('deletedAt')) {
                obj['deletedAt'] = ApiClient.convertToType(data['deletedAt'], 'Date');
            }
            if (data.hasOwnProperty('deletedBy')) {
                obj['deletedBy'] = UserInfo.constructFromObject(data['deletedBy']);
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isEncrypted')) {
                obj['isEncrypted'] = ApiClient.convertToType(data['isEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('parentPath')) {
                obj['parentPath'] = ApiClient.convertToType(data['parentPath'], 'String');
            }
            if (data.hasOwnProperty('referenceId')) {
                obj['referenceId'] = ApiClient.convertToType(data['referenceId'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = UserInfo.constructFromObject(data['updatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeletedNode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeletedNode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeletedNode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserInfo.validateJSON(data['createdBy']);
        }
        // validate the optional field `deletedBy`
        if (data['deletedBy']) { // data not null
          UserInfo.validateJSON(data['deletedBy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['parentPath'] && !(typeof data['parentPath'] === 'string' || data['parentPath'] instanceof String)) {
            throw new Error("Expected the field `parentPath` to be a primitive type in the JSON string but got " + data['parentPath']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          UserInfo.validateJSON(data['updatedBy']);
        }

        return true;
    }


}

DeletedNode.RequiredProperties = ["name", "parentId", "parentPath", "type"];

/**
 * Last access date
 * @member {Date} accessedAt
 */
DeletedNode.prototype['accessedAt'] = undefined;

/**
 * Classification ID:  * `1` - public  * `2` - internal  * `3` - confidential  * `4` - strictly confidential    (default: classification from parent room)
 * @member {module:model/DeletedNode.ClassificationEnum} classification
 */
DeletedNode.prototype['classification'] = undefined;

/**
 * Creation date
 * @member {Date} createdAt
 */
DeletedNode.prototype['createdAt'] = undefined;

/**
 * @member {module:model/UserInfo} createdBy
 */
DeletedNode.prototype['createdBy'] = undefined;

/**
 * Deletion date
 * @member {Date} deletedAt
 */
DeletedNode.prototype['deletedAt'] = undefined;

/**
 * @member {module:model/UserInfo} deletedBy
 */
DeletedNode.prototype['deletedBy'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
DeletedNode.prototype['expireAt'] = undefined;

/**
 * Node ID
 * @member {Number} id
 */
DeletedNode.prototype['id'] = undefined;

/**
 * Encryption state
 * @member {Boolean} isEncrypted
 */
DeletedNode.prototype['isEncrypted'] = undefined;

/**
 * Node name
 * @member {String} name
 */
DeletedNode.prototype['name'] = undefined;

/**
 * User notes
 * @member {String} notes
 */
DeletedNode.prototype['notes'] = undefined;

/**
 * Parent node ID (room or folder)
 * @member {Number} parentId
 */
DeletedNode.prototype['parentId'] = undefined;

/**
 * Parent node path  `/` if node is a root node (room)
 * @member {String} parentPath
 */
DeletedNode.prototype['parentPath'] = undefined;

/**
 * &#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
 * @member {Number} referenceId
 */
DeletedNode.prototype['referenceId'] = undefined;

/**
 * Node size in byte
 * @member {Number} size
 */
DeletedNode.prototype['size'] = undefined;

/**
 * Node type
 * @member {module:model/DeletedNode.TypeEnum} type
 */
DeletedNode.prototype['type'] = undefined;

/**
 * Modification date
 * @member {Date} updatedAt
 */
DeletedNode.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} updatedBy
 */
DeletedNode.prototype['updatedBy'] = undefined;





/**
 * Allowed values for the <code>classification</code> property.
 * @enum {Number}
 * @readonly
 */
DeletedNode['ClassificationEnum'] = {

    /**
     * value: 1
     * @const
     */
    "1": 1,

    /**
     * value: 2
     * @const
     */
    "2": 2,

    /**
     * value: 3
     * @const
     */
    "3": 3,

    /**
     * value: 4
     * @const
     */
    "4": 4
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
DeletedNode['TypeEnum'] = {

    /**
     * value: "folder"
     * @const
     */
    "folder": "folder",

    /**
     * value: "file"
     * @const
     */
    "file": "file"
};



export default DeletedNode;

