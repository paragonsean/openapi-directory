/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ThirdPartyDependenciesData model module.
 * @module model/ThirdPartyDependenciesData
 * @version 4.42.3
 */
class ThirdPartyDependenciesData {
    /**
     * Constructs a new <code>ThirdPartyDependenciesData</code>.
     * Third-party dependency information
     * @alias module:model/ThirdPartyDependenciesData
     * @param artifactId {String} Third party dependencies artifactId
     * @param description {String} Third party dependencies description
     * @param groupId {String} Third party dependencies groupId
     * @param id {String} Third party dependencies id
     * @param licenses {Array.<String>} Third party dependencies licenses type
     * @param name {String} Third party dependencies name
     * @param type {String} Third party dependencies type
     * @param url {String} Third party dependencies url
     * @param version {String} Third party dependencies version
     */
    constructor(artifactId, description, groupId, id, licenses, name, type, url, version) { 
        
        ThirdPartyDependenciesData.initialize(this, artifactId, description, groupId, id, licenses, name, type, url, version);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, artifactId, description, groupId, id, licenses, name, type, url, version) { 
        obj['artifactId'] = artifactId;
        obj['description'] = description;
        obj['groupId'] = groupId;
        obj['id'] = id;
        obj['licenses'] = licenses;
        obj['name'] = name;
        obj['type'] = type;
        obj['url'] = url;
        obj['version'] = version;
    }

    /**
     * Constructs a <code>ThirdPartyDependenciesData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThirdPartyDependenciesData} obj Optional instance to populate.
     * @return {module:model/ThirdPartyDependenciesData} The populated <code>ThirdPartyDependenciesData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThirdPartyDependenciesData();

            if (data.hasOwnProperty('artifactId')) {
                obj['artifactId'] = ApiClient.convertToType(data['artifactId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('licenses')) {
                obj['licenses'] = ApiClient.convertToType(data['licenses'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThirdPartyDependenciesData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThirdPartyDependenciesData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ThirdPartyDependenciesData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['artifactId'] && !(typeof data['artifactId'] === 'string' || data['artifactId'] instanceof String)) {
            throw new Error("Expected the field `artifactId` to be a primitive type in the JSON string but got " + data['artifactId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['groupId'] && !(typeof data['groupId'] === 'string' || data['groupId'] instanceof String)) {
            throw new Error("Expected the field `groupId` to be a primitive type in the JSON string but got " + data['groupId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['licenses'])) {
            throw new Error("Expected the field `licenses` to be an array in the JSON data but got " + data['licenses']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

ThirdPartyDependenciesData.RequiredProperties = ["artifactId", "description", "groupId", "id", "licenses", "name", "type", "url", "version"];

/**
 * Third party dependencies artifactId
 * @member {String} artifactId
 */
ThirdPartyDependenciesData.prototype['artifactId'] = undefined;

/**
 * Third party dependencies description
 * @member {String} description
 */
ThirdPartyDependenciesData.prototype['description'] = undefined;

/**
 * Third party dependencies groupId
 * @member {String} groupId
 */
ThirdPartyDependenciesData.prototype['groupId'] = undefined;

/**
 * Third party dependencies id
 * @member {String} id
 */
ThirdPartyDependenciesData.prototype['id'] = undefined;

/**
 * Third party dependencies licenses type
 * @member {Array.<String>} licenses
 */
ThirdPartyDependenciesData.prototype['licenses'] = undefined;

/**
 * Third party dependencies name
 * @member {String} name
 */
ThirdPartyDependenciesData.prototype['name'] = undefined;

/**
 * Third party dependencies type
 * @member {String} type
 */
ThirdPartyDependenciesData.prototype['type'] = undefined;

/**
 * Third party dependencies url
 * @member {String} url
 */
ThirdPartyDependenciesData.prototype['url'] = undefined;

/**
 * Third party dependencies version
 * @member {String} version
 */
ThirdPartyDependenciesData.prototype['version'] = undefined;






export default ThirdPartyDependenciesData;

