/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OAuthAuthorization model module.
 * @module model/OAuthAuthorization
 * @version 4.42.3
 */
class OAuthAuthorization {
    /**
     * Constructs a new <code>OAuthAuthorization</code>.
     * OAuth authorization
     * @alias module:model/OAuthAuthorization
     * @param clientId {String} ID of the OAuth client
     * @param clientName {String} Name, which is shown at the client configuration and authorization.
     * @param userAgentCategory {module:model/OAuthAuthorization.UserAgentCategoryEnum} &#128640; Since v4.12.0  User agent category.
     */
    constructor(clientId, clientName, userAgentCategory) { 
        
        OAuthAuthorization.initialize(this, clientId, clientName, userAgentCategory);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, clientName, userAgentCategory) { 
        obj['clientId'] = clientId;
        obj['clientName'] = clientName;
        obj['userAgentCategory'] = userAgentCategory;
    }

    /**
     * Constructs a <code>OAuthAuthorization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OAuthAuthorization} obj Optional instance to populate.
     * @return {module:model/OAuthAuthorization} The populated <code>OAuthAuthorization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OAuthAuthorization();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientName')) {
                obj['clientName'] = ApiClient.convertToType(data['clientName'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isCurrentAuthorization')) {
                obj['isCurrentAuthorization'] = ApiClient.convertToType(data['isCurrentAuthorization'], 'Boolean');
            }
            if (data.hasOwnProperty('isStandard')) {
                obj['isStandard'] = ApiClient.convertToType(data['isStandard'], 'Boolean');
            }
            if (data.hasOwnProperty('usedAt')) {
                obj['usedAt'] = ApiClient.convertToType(data['usedAt'], 'Date');
            }
            if (data.hasOwnProperty('userAgentCategory')) {
                obj['userAgentCategory'] = ApiClient.convertToType(data['userAgentCategory'], 'String');
            }
            if (data.hasOwnProperty('userAgentInfo')) {
                obj['userAgentInfo'] = ApiClient.convertToType(data['userAgentInfo'], 'String');
            }
            if (data.hasOwnProperty('userAgentOs')) {
                obj['userAgentOs'] = ApiClient.convertToType(data['userAgentOs'], 'String');
            }
            if (data.hasOwnProperty('userAgentType')) {
                obj['userAgentType'] = ApiClient.convertToType(data['userAgentType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OAuthAuthorization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OAuthAuthorization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OAuthAuthorization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientName'] && !(typeof data['clientName'] === 'string' || data['clientName'] instanceof String)) {
            throw new Error("Expected the field `clientName` to be a primitive type in the JSON string but got " + data['clientName']);
        }
        // ensure the json data is a string
        if (data['userAgentCategory'] && !(typeof data['userAgentCategory'] === 'string' || data['userAgentCategory'] instanceof String)) {
            throw new Error("Expected the field `userAgentCategory` to be a primitive type in the JSON string but got " + data['userAgentCategory']);
        }
        // ensure the json data is a string
        if (data['userAgentInfo'] && !(typeof data['userAgentInfo'] === 'string' || data['userAgentInfo'] instanceof String)) {
            throw new Error("Expected the field `userAgentInfo` to be a primitive type in the JSON string but got " + data['userAgentInfo']);
        }
        // ensure the json data is a string
        if (data['userAgentOs'] && !(typeof data['userAgentOs'] === 'string' || data['userAgentOs'] instanceof String)) {
            throw new Error("Expected the field `userAgentOs` to be a primitive type in the JSON string but got " + data['userAgentOs']);
        }
        // ensure the json data is a string
        if (data['userAgentType'] && !(typeof data['userAgentType'] === 'string' || data['userAgentType'] instanceof String)) {
            throw new Error("Expected the field `userAgentType` to be a primitive type in the JSON string but got " + data['userAgentType']);
        }

        return true;
    }


}

OAuthAuthorization.RequiredProperties = ["clientId", "clientName", "userAgentCategory"];

/**
 * ID of the OAuth client
 * @member {String} clientId
 */
OAuthAuthorization.prototype['clientId'] = undefined;

/**
 * Name, which is shown at the client configuration and authorization.
 * @member {String} clientName
 */
OAuthAuthorization.prototype['clientName'] = undefined;

/**
 * &#128640; Since v4.13.0  Creation date of the authorization
 * @member {Date} createdAt
 */
OAuthAuthorization.prototype['createdAt'] = undefined;

/**
 * Expiration date of the authorization
 * @member {Date} expiresAt
 */
OAuthAuthorization.prototype['expiresAt'] = undefined;

/**
 * &#128640; Since v4.12.0  ID of the OAuth authorization
 * @member {Number} id
 */
OAuthAuthorization.prototype['id'] = undefined;

/**
 * &#128640; Since v4.25.0  Determines whether authorization matches the one from Authorization Header
 * @member {Boolean} isCurrentAuthorization
 */
OAuthAuthorization.prototype['isCurrentAuthorization'] = undefined;

/**
 * &#128640; Since v4.12.0  Determines whether client is a standard client.
 * @member {Boolean} isStandard
 */
OAuthAuthorization.prototype['isStandard'] = undefined;

/**
 * &#128640; Since v4.13.0  Usage date of the authorization  (Time of last usage.)
 * @member {Date} usedAt
 */
OAuthAuthorization.prototype['usedAt'] = undefined;

/**
 * &#128640; Since v4.12.0  User agent category.
 * @member {module:model/OAuthAuthorization.UserAgentCategoryEnum} userAgentCategory
 */
OAuthAuthorization.prototype['userAgentCategory'] = undefined;

/**
 * &#128640; Since v4.12.0  User agent info.
 * @member {String} userAgentInfo
 */
OAuthAuthorization.prototype['userAgentInfo'] = undefined;

/**
 * &#128640; Since v4.12.0  User agent OS.
 * @member {String} userAgentOs
 */
OAuthAuthorization.prototype['userAgentOs'] = undefined;

/**
 * &#128640; Since v4.12.0  User agent type.
 * @member {String} userAgentType
 */
OAuthAuthorization.prototype['userAgentType'] = undefined;





/**
 * Allowed values for the <code>userAgentCategory</code> property.
 * @enum {String}
 * @readonly
 */
OAuthAuthorization['UserAgentCategoryEnum'] = {

    /**
     * value: "browser"
     * @const
     */
    "browser": "browser",

    /**
     * value: "native"
     * @const
     */
    "native": "native",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default OAuthAuthorization;

