/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotificationChannel model module.
 * @module model/NotificationChannel
 * @version 4.42.3
 */
class NotificationChannel {
    /**
     * Constructs a new <code>NotificationChannel</code>.
     * Notification channel information
     * @alias module:model/NotificationChannel
     * @param frequency {Number} Channel frequency (aggregation window size in minutes)
     * @param id {Number} Channel ID
     * @param isEnabled {Boolean} Determines whether channel is enabled
     * @param name {String} Name
     * @param type {String} Channel type (only `EMAIL` available at the moment)
     */
    constructor(frequency, id, isEnabled, name, type) { 
        
        NotificationChannel.initialize(this, frequency, id, isEnabled, name, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, frequency, id, isEnabled, name, type) { 
        obj['frequency'] = frequency;
        obj['id'] = id;
        obj['isEnabled'] = isEnabled;
        obj['name'] = name;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>NotificationChannel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationChannel} obj Optional instance to populate.
     * @return {module:model/NotificationChannel} The populated <code>NotificationChannel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationChannel();

            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationChannel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationChannel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationChannel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

NotificationChannel.RequiredProperties = ["frequency", "id", "isEnabled", "name", "type"];

/**
 * Channel frequency (aggregation window size in minutes)
 * @member {Number} frequency
 */
NotificationChannel.prototype['frequency'] = undefined;

/**
 * Channel ID
 * @member {Number} id
 */
NotificationChannel.prototype['id'] = undefined;

/**
 * Determines whether channel is enabled
 * @member {Boolean} isEnabled
 */
NotificationChannel.prototype['isEnabled'] = undefined;

/**
 * Name
 * @member {String} name
 */
NotificationChannel.prototype['name'] = undefined;

/**
 * Channel type (only `EMAIL` available at the moment)
 * @member {String} type
 */
NotificationChannel.prototype['type'] = undefined;






export default NotificationChannel;

