/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicKeyContainer from './PublicKeyContainer';
import RoleList from './RoleList';
import UserAttributes from './UserAttributes';
import UserAuthData from './UserAuthData';
import UserAuthMethod from './UserAuthMethod';

/**
 * The UserData model module.
 * @module model/UserData
 * @version 4.42.3
 */
class UserData {
    /**
     * Constructs a new <code>UserData</code>.
     * User information
     * @alias module:model/UserData
     * @param authData {module:model/UserAuthData} 
     * @param avatarUuid {String} &#128640; Since v4.11.0  Avatar UUID
     * @param firstName {String} User first name
     * @param id {Number} Unique identifier for the user
     * @param isLocked {Boolean} User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.
     * @param lastName {String} User last name
     * @param lockStatus {Number} &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.
     * @param userName {String} &#128640; Since v4.13.0  Username
     */
    constructor(authData, avatarUuid, firstName, id, isLocked, lastName, lockStatus, userName) { 
        
        UserData.initialize(this, authData, avatarUuid, firstName, id, isLocked, lastName, lockStatus, userName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authData, avatarUuid, firstName, id, isLocked, lastName, lockStatus, userName) { 
        obj['authData'] = authData;
        obj['avatarUuid'] = avatarUuid;
        obj['firstName'] = firstName;
        obj['gender'] = 'n';
        obj['id'] = id;
        obj['isLocked'] = isLocked || false;
        obj['lastName'] = lastName;
        obj['lockStatus'] = lockStatus;
        obj['userName'] = userName;
    }

    /**
     * Constructs a <code>UserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserData} obj Optional instance to populate.
     * @return {module:model/UserData} The populated <code>UserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserData();

            if (data.hasOwnProperty('authData')) {
                obj['authData'] = UserAuthData.constructFromObject(data['authData']);
            }
            if (data.hasOwnProperty('authMethods')) {
                obj['authMethods'] = ApiClient.convertToType(data['authMethods'], [UserAuthMethod]);
            }
            if (data.hasOwnProperty('avatarUuid')) {
                obj['avatarUuid'] = ApiClient.convertToType(data['avatarUuid'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('hasManageableRooms')) {
                obj['hasManageableRooms'] = ApiClient.convertToType(data['hasManageableRooms'], 'Boolean');
            }
            if (data.hasOwnProperty('homeRoomId')) {
                obj['homeRoomId'] = ApiClient.convertToType(data['homeRoomId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isEncryptionEnabled')) {
                obj['isEncryptionEnabled'] = ApiClient.convertToType(data['isEncryptionEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isLocked')) {
                obj['isLocked'] = ApiClient.convertToType(data['isLocked'], 'Boolean');
            }
            if (data.hasOwnProperty('isMfaEnabled')) {
                obj['isMfaEnabled'] = ApiClient.convertToType(data['isMfaEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isMfaEnforced')) {
                obj['isMfaEnforced'] = ApiClient.convertToType(data['isMfaEnforced'], 'Boolean');
            }
            if (data.hasOwnProperty('lastLoginSuccessAt')) {
                obj['lastLoginSuccessAt'] = ApiClient.convertToType(data['lastLoginSuccessAt'], 'Date');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('lockStatus')) {
                obj['lockStatus'] = ApiClient.convertToType(data['lockStatus'], 'Number');
            }
            if (data.hasOwnProperty('login')) {
                obj['login'] = ApiClient.convertToType(data['login'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('publicKeyContainer')) {
                obj['publicKeyContainer'] = PublicKeyContainer.constructFromObject(data['publicKeyContainer']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('userAttributes')) {
                obj['userAttributes'] = UserAttributes.constructFromObject(data['userAttributes']);
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
            if (data.hasOwnProperty('userRoles')) {
                obj['userRoles'] = RoleList.constructFromObject(data['userRoles']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authData`
        if (data['authData']) { // data not null
          UserAuthData.validateJSON(data['authData']);
        }
        if (data['authMethods']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authMethods'])) {
                throw new Error("Expected the field `authMethods` to be an array in the JSON data but got " + data['authMethods']);
            }
            // validate the optional field `authMethods` (array)
            for (const item of data['authMethods']) {
                UserAuthMethod.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['avatarUuid'] && !(typeof data['avatarUuid'] === 'string' || data['avatarUuid'] instanceof String)) {
            throw new Error("Expected the field `avatarUuid` to be a primitive type in the JSON string but got " + data['avatarUuid']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['login'] && !(typeof data['login'] === 'string' || data['login'] instanceof String)) {
            throw new Error("Expected the field `login` to be a primitive type in the JSON string but got " + data['login']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `publicKeyContainer`
        if (data['publicKeyContainer']) { // data not null
          PublicKeyContainer.validateJSON(data['publicKeyContainer']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `userAttributes`
        if (data['userAttributes']) { // data not null
          UserAttributes.validateJSON(data['userAttributes']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }
        // validate the optional field `userRoles`
        if (data['userRoles']) { // data not null
          RoleList.validateJSON(data['userRoles']);
        }

        return true;
    }


}

UserData.RequiredProperties = ["authData", "avatarUuid", "firstName", "id", "isLocked", "lastName", "lockStatus", "userName"];

/**
 * @member {module:model/UserAuthData} authData
 */
UserData.prototype['authData'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  Authentication methods:  * `sql`  * `active_directory`  * `radius`  * `openid`  use `authData` instead
 * @member {Array.<module:model/UserAuthMethod>} authMethods
 */
UserData.prototype['authMethods'] = undefined;

/**
 * &#128640; Since v4.11.0  Avatar UUID
 * @member {String} avatarUuid
 */
UserData.prototype['avatarUuid'] = undefined;

/**
 * Email 
 * @member {String} email
 */
UserData.prototype['email'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
UserData.prototype['expireAt'] = undefined;

/**
 * User first name
 * @member {String} firstName
 */
UserData.prototype['firstName'] = undefined;

/**
 * &#128679; Deprecated since v4.12.0  Gender
 * @member {String} gender
 * @default 'n'
 */
UserData.prototype['gender'] = 'n';

/**
 * User has manageable rooms
 * @member {Boolean} hasManageableRooms
 */
UserData.prototype['hasManageableRooms'] = undefined;

/**
 * Homeroom ID
 * @member {Number} homeRoomId
 */
UserData.prototype['homeRoomId'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} id
 */
UserData.prototype['id'] = undefined;

/**
 * User has generated private key.  Possible if client-side encryption is active for this customer
 * @member {Boolean} isEncryptionEnabled
 */
UserData.prototype['isEncryptionEnabled'] = undefined;

/**
 * User is locked:  * `false` - unlocked  * `true` - locked    User is locked and can not login anymore.
 * @member {Boolean} isLocked
 * @default false
 */
UserData.prototype['isLocked'] = false;

/**
 * Determines whether multi-factor authentication is enabled
 * @member {Boolean} isMfaEnabled
 */
UserData.prototype['isMfaEnabled'] = undefined;

/**
 * Determines whether multi-factor authentication is enforced
 * @member {Boolean} isMfaEnforced
 */
UserData.prototype['isMfaEnforced'] = undefined;

/**
 * Last successful logon date
 * @member {Date} lastLoginSuccessAt
 */
UserData.prototype['lastLoginSuccessAt'] = undefined;

/**
 * User last name
 * @member {String} lastName
 */
UserData.prototype['lastName'] = undefined;

/**
 * &#128679; Deprecated since v4.7.0  User lock status:  * `0` - locked  * `1` - Web access allowed  * `2` - Web and mobile access allowed    Please use `isLocked` instead.
 * @member {Number} lockStatus
 */
UserData.prototype['lockStatus'] = undefined;

/**
 * &#128679; Deprecated since v4.13.0  User login name
 * @member {String} login
 */
UserData.prototype['login'] = undefined;

/**
 * Phone number
 * @member {String} phone
 */
UserData.prototype['phone'] = undefined;

/**
 * @member {module:model/PublicKeyContainer} publicKeyContainer
 */
UserData.prototype['publicKeyContainer'] = undefined;

/**
 * &#128679; Deprecated since v4.18.0  Job title
 * @member {String} title
 */
UserData.prototype['title'] = undefined;

/**
 * @member {module:model/UserAttributes} userAttributes
 */
UserData.prototype['userAttributes'] = undefined;

/**
 * &#128640; Since v4.13.0  Username
 * @member {String} userName
 */
UserData.prototype['userName'] = undefined;

/**
 * @member {module:model/RoleList} userRoles
 */
UserData.prototype['userRoles'] = undefined;






export default UserData;

