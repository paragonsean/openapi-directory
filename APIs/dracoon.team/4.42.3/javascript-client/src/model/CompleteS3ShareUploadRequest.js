/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3FileUploadPart from './S3FileUploadPart';
import UserFileKey from './UserFileKey';

/**
 * The CompleteS3ShareUploadRequest model module.
 * @module model/CompleteS3ShareUploadRequest
 * @version 4.42.3
 */
class CompleteS3ShareUploadRequest {
    /**
     * Constructs a new <code>CompleteS3ShareUploadRequest</code>.
     * Request model for completing a S3 file upload
     * @alias module:model/CompleteS3ShareUploadRequest
     * @param parts {Array.<module:model/S3FileUploadPart>} List of S3 file upload parts
     */
    constructor(parts) { 
        
        CompleteS3ShareUploadRequest.initialize(this, parts);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, parts) { 
        obj['parts'] = parts;
    }

    /**
     * Constructs a <code>CompleteS3ShareUploadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CompleteS3ShareUploadRequest} obj Optional instance to populate.
     * @return {module:model/CompleteS3ShareUploadRequest} The populated <code>CompleteS3ShareUploadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CompleteS3ShareUploadRequest();

            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], [S3FileUploadPart]);
            }
            if (data.hasOwnProperty('userFileKeyList')) {
                obj['userFileKeyList'] = ApiClient.convertToType(data['userFileKeyList'], [UserFileKey]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CompleteS3ShareUploadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CompleteS3ShareUploadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CompleteS3ShareUploadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['parts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parts'])) {
                throw new Error("Expected the field `parts` to be an array in the JSON data but got " + data['parts']);
            }
            // validate the optional field `parts` (array)
            for (const item of data['parts']) {
                S3FileUploadPart.validateJSON(item);
            };
        }
        if (data['userFileKeyList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userFileKeyList'])) {
                throw new Error("Expected the field `userFileKeyList` to be an array in the JSON data but got " + data['userFileKeyList']);
            }
            // validate the optional field `userFileKeyList` (array)
            for (const item of data['userFileKeyList']) {
                UserFileKey.validateJSON(item);
            };
        }

        return true;
    }


}

CompleteS3ShareUploadRequest.RequiredProperties = ["parts"];

/**
 * List of S3 file upload parts
 * @member {Array.<module:model/S3FileUploadPart>} parts
 */
CompleteS3ShareUploadRequest.prototype['parts'] = undefined;

/**
 * List of user file keys
 * @member {Array.<module:model/UserFileKey>} userFileKeyList
 */
CompleteS3ShareUploadRequest.prototype['userFileKeyList'] = undefined;






export default CompleteS3ShareUploadRequest;

