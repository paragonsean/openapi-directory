/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateShareUploadChannelRequest model module.
 * @module model/CreateShareUploadChannelRequest
 * @version 4.42.3
 */
class CreateShareUploadChannelRequest {
    /**
     * Constructs a new <code>CreateShareUploadChannelRequest</code>.
     * Request model for creating an upload channel
     * @alias module:model/CreateShareUploadChannelRequest
     * @param name {String} File name
     */
    constructor(name) { 
        
        CreateShareUploadChannelRequest.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['directS3Upload'] = false;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>CreateShareUploadChannelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateShareUploadChannelRequest} obj Optional instance to populate.
     * @return {module:model/CreateShareUploadChannelRequest} The populated <code>CreateShareUploadChannelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateShareUploadChannelRequest();

            if (data.hasOwnProperty('directS3Upload')) {
                obj['directS3Upload'] = ApiClient.convertToType(data['directS3Upload'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('timestampCreation')) {
                obj['timestampCreation'] = ApiClient.convertToType(data['timestampCreation'], 'Date');
            }
            if (data.hasOwnProperty('timestampModification')) {
                obj['timestampModification'] = ApiClient.convertToType(data['timestampModification'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateShareUploadChannelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateShareUploadChannelRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateShareUploadChannelRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }

        return true;
    }


}

CreateShareUploadChannelRequest.RequiredProperties = ["name"];

/**
 * &#128640; Since v4.15.0  Upload direct to S3
 * @member {Boolean} directS3Upload
 * @default false
 */
CreateShareUploadChannelRequest.prototype['directS3Upload'] = false;

/**
 * File name
 * @member {String} name
 */
CreateShareUploadChannelRequest.prototype['name'] = undefined;

/**
 * Password
 * @member {String} password
 */
CreateShareUploadChannelRequest.prototype['password'] = undefined;

/**
 * File size in byte
 * @member {Number} size
 */
CreateShareUploadChannelRequest.prototype['size'] = undefined;

/**
 * &#128640; Since v4.22.0  Time the node was created on external file system  (default: current server datetime in UTC format)
 * @member {Date} timestampCreation
 */
CreateShareUploadChannelRequest.prototype['timestampCreation'] = undefined;

/**
 * &#128640; Since v4.22.0  Time the content of a node was last modified on external file system  (default: current server datetime in UTC format)
 * @member {Date} timestampModification
 */
CreateShareUploadChannelRequest.prototype['timestampModification'] = undefined;






export default CreateShareUploadChannelRequest;

