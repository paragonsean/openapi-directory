/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateFileUploadResponse model module.
 * @module model/CreateFileUploadResponse
 * @version 4.42.3
 */
class CreateFileUploadResponse {
    /**
     * Constructs a new <code>CreateFileUploadResponse</code>.
     * Upload channel information
     * @alias module:model/CreateFileUploadResponse
     * @param token {String} Upload token
     * @param uploadId {String} Upload (channel) ID
     * @param uploadUrl {String} (public) Upload URL
     */
    constructor(token, uploadId, uploadUrl) { 
        
        CreateFileUploadResponse.initialize(this, token, uploadId, uploadUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token, uploadId, uploadUrl) { 
        obj['token'] = token;
        obj['uploadId'] = uploadId;
        obj['uploadUrl'] = uploadUrl;
    }

    /**
     * Constructs a <code>CreateFileUploadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateFileUploadResponse} obj Optional instance to populate.
     * @return {module:model/CreateFileUploadResponse} The populated <code>CreateFileUploadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateFileUploadResponse();

            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('uploadId')) {
                obj['uploadId'] = ApiClient.convertToType(data['uploadId'], 'String');
            }
            if (data.hasOwnProperty('uploadUrl')) {
                obj['uploadUrl'] = ApiClient.convertToType(data['uploadUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateFileUploadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateFileUploadResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateFileUploadResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['uploadId'] && !(typeof data['uploadId'] === 'string' || data['uploadId'] instanceof String)) {
            throw new Error("Expected the field `uploadId` to be a primitive type in the JSON string but got " + data['uploadId']);
        }
        // ensure the json data is a string
        if (data['uploadUrl'] && !(typeof data['uploadUrl'] === 'string' || data['uploadUrl'] instanceof String)) {
            throw new Error("Expected the field `uploadUrl` to be a primitive type in the JSON string but got " + data['uploadUrl']);
        }

        return true;
    }


}

CreateFileUploadResponse.RequiredProperties = ["token", "uploadId", "uploadUrl"];

/**
 * Upload token
 * @member {String} token
 */
CreateFileUploadResponse.prototype['token'] = undefined;

/**
 * Upload (channel) ID
 * @member {String} uploadId
 */
CreateFileUploadResponse.prototype['uploadId'] = undefined;

/**
 * (public) Upload URL
 * @member {String} uploadUrl
 */
CreateFileUploadResponse.prototype['uploadUrl'] = undefined;






export default CreateFileUploadResponse;

