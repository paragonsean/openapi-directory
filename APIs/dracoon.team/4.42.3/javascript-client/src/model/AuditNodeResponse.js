/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditUserPermission from './AuditUserPermission';
import UserInfo from './UserInfo';

/**
 * The AuditNodeResponse model module.
 * @module model/AuditNodeResponse
 * @version 4.42.3
 */
class AuditNodeResponse {
    /**
     * Constructs a new <code>AuditNodeResponse</code>.
     * Audit node report
     * @alias module:model/AuditNodeResponse
     * @param auditUserPermissionList {Array.<module:model/AuditUserPermission>} List of assigned users with permissions
     * @param nodeCntChildren {Number} Number of direct children  (no recursion; for rooms only)
     * @param nodeId {Number} Node ID
     * @param nodeName {String} Node name
     * @param nodeParentPath {String} Parent node path  `/` if node is a root node (room)
     */
    constructor(auditUserPermissionList, nodeCntChildren, nodeId, nodeName, nodeParentPath) { 
        
        AuditNodeResponse.initialize(this, auditUserPermissionList, nodeCntChildren, nodeId, nodeName, nodeParentPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, auditUserPermissionList, nodeCntChildren, nodeId, nodeName, nodeParentPath) { 
        obj['auditUserPermissionList'] = auditUserPermissionList;
        obj['nodeCntChildren'] = nodeCntChildren;
        obj['nodeHasActivitiesLog'] = true;
        obj['nodeId'] = nodeId;
        obj['nodeName'] = nodeName;
        obj['nodeParentPath'] = nodeParentPath;
    }

    /**
     * Constructs a <code>AuditNodeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditNodeResponse} obj Optional instance to populate.
     * @return {module:model/AuditNodeResponse} The populated <code>AuditNodeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditNodeResponse();

            if (data.hasOwnProperty('auditUserPermissionList')) {
                obj['auditUserPermissionList'] = ApiClient.convertToType(data['auditUserPermissionList'], [AuditUserPermission]);
            }
            if (data.hasOwnProperty('nodeCntChildren')) {
                obj['nodeCntChildren'] = ApiClient.convertToType(data['nodeCntChildren'], 'Number');
            }
            if (data.hasOwnProperty('nodeCreatedAt')) {
                obj['nodeCreatedAt'] = ApiClient.convertToType(data['nodeCreatedAt'], 'Date');
            }
            if (data.hasOwnProperty('nodeCreatedBy')) {
                obj['nodeCreatedBy'] = UserInfo.constructFromObject(data['nodeCreatedBy']);
            }
            if (data.hasOwnProperty('nodeHasActivitiesLog')) {
                obj['nodeHasActivitiesLog'] = ApiClient.convertToType(data['nodeHasActivitiesLog'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeHasRecycleBin')) {
                obj['nodeHasRecycleBin'] = ApiClient.convertToType(data['nodeHasRecycleBin'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'Number');
            }
            if (data.hasOwnProperty('nodeIsEncrypted')) {
                obj['nodeIsEncrypted'] = ApiClient.convertToType(data['nodeIsEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeName')) {
                obj['nodeName'] = ApiClient.convertToType(data['nodeName'], 'String');
            }
            if (data.hasOwnProperty('nodeParentId')) {
                obj['nodeParentId'] = ApiClient.convertToType(data['nodeParentId'], 'Number');
            }
            if (data.hasOwnProperty('nodeParentPath')) {
                obj['nodeParentPath'] = ApiClient.convertToType(data['nodeParentPath'], 'String');
            }
            if (data.hasOwnProperty('nodeQuota')) {
                obj['nodeQuota'] = ApiClient.convertToType(data['nodeQuota'], 'Number');
            }
            if (data.hasOwnProperty('nodeRecycleBinRetentionPeriod')) {
                obj['nodeRecycleBinRetentionPeriod'] = ApiClient.convertToType(data['nodeRecycleBinRetentionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('nodeSize')) {
                obj['nodeSize'] = ApiClient.convertToType(data['nodeSize'], 'Number');
            }
            if (data.hasOwnProperty('nodeUpdatedAt')) {
                obj['nodeUpdatedAt'] = ApiClient.convertToType(data['nodeUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('nodeUpdatedBy')) {
                obj['nodeUpdatedBy'] = UserInfo.constructFromObject(data['nodeUpdatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditNodeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditNodeResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuditNodeResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['auditUserPermissionList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auditUserPermissionList'])) {
                throw new Error("Expected the field `auditUserPermissionList` to be an array in the JSON data but got " + data['auditUserPermissionList']);
            }
            // validate the optional field `auditUserPermissionList` (array)
            for (const item of data['auditUserPermissionList']) {
                AuditUserPermission.validateJSON(item);
            };
        }
        // validate the optional field `nodeCreatedBy`
        if (data['nodeCreatedBy']) { // data not null
          UserInfo.validateJSON(data['nodeCreatedBy']);
        }
        // ensure the json data is a string
        if (data['nodeName'] && !(typeof data['nodeName'] === 'string' || data['nodeName'] instanceof String)) {
            throw new Error("Expected the field `nodeName` to be a primitive type in the JSON string but got " + data['nodeName']);
        }
        // ensure the json data is a string
        if (data['nodeParentPath'] && !(typeof data['nodeParentPath'] === 'string' || data['nodeParentPath'] instanceof String)) {
            throw new Error("Expected the field `nodeParentPath` to be a primitive type in the JSON string but got " + data['nodeParentPath']);
        }
        // validate the optional field `nodeUpdatedBy`
        if (data['nodeUpdatedBy']) { // data not null
          UserInfo.validateJSON(data['nodeUpdatedBy']);
        }

        return true;
    }


}

AuditNodeResponse.RequiredProperties = ["auditUserPermissionList", "nodeCntChildren", "nodeId", "nodeName", "nodeParentPath"];

/**
 * List of assigned users with permissions
 * @member {Array.<module:model/AuditUserPermission>} auditUserPermissionList
 */
AuditNodeResponse.prototype['auditUserPermissionList'] = undefined;

/**
 * Number of direct children  (no recursion; for rooms only)
 * @member {Number} nodeCntChildren
 */
AuditNodeResponse.prototype['nodeCntChildren'] = undefined;

/**
 * Creation date
 * @member {Date} nodeCreatedAt
 */
AuditNodeResponse.prototype['nodeCreatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} nodeCreatedBy
 */
AuditNodeResponse.prototype['nodeCreatedBy'] = undefined;

/**
 * Is activities log active (for rooms only)
 * @member {Boolean} nodeHasActivitiesLog
 * @default true
 */
AuditNodeResponse.prototype['nodeHasActivitiesLog'] = true;

/**
 * &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
 * @member {Boolean} nodeHasRecycleBin
 */
AuditNodeResponse.prototype['nodeHasRecycleBin'] = undefined;

/**
 * Node ID
 * @member {Number} nodeId
 */
AuditNodeResponse.prototype['nodeId'] = undefined;

/**
 * Encryption state
 * @member {Boolean} nodeIsEncrypted
 */
AuditNodeResponse.prototype['nodeIsEncrypted'] = undefined;

/**
 * Node name
 * @member {String} nodeName
 */
AuditNodeResponse.prototype['nodeName'] = undefined;

/**
 * Parent node ID (room or folder)
 * @member {Number} nodeParentId
 */
AuditNodeResponse.prototype['nodeParentId'] = undefined;

/**
 * Parent node path  `/` if node is a root node (room)
 * @member {String} nodeParentPath
 */
AuditNodeResponse.prototype['nodeParentPath'] = undefined;

/**
 * Quota in byte
 * @member {Number} nodeQuota
 */
AuditNodeResponse.prototype['nodeQuota'] = undefined;

/**
 * Retention period for deleted nodes in days
 * @member {Number} nodeRecycleBinRetentionPeriod
 */
AuditNodeResponse.prototype['nodeRecycleBinRetentionPeriod'] = undefined;

/**
 * Node size in byte
 * @member {Number} nodeSize
 */
AuditNodeResponse.prototype['nodeSize'] = undefined;

/**
 * Modification date
 * @member {Date} nodeUpdatedAt
 */
AuditNodeResponse.prototype['nodeUpdatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} nodeUpdatedBy
 */
AuditNodeResponse.prototype['nodeUpdatedBy'] = undefined;






export default AuditNodeResponse;

