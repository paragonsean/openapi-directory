/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';
import FeaturedOAuthClient from './FeaturedOAuthClient';

/**
 * The ProductPackageResponse model module.
 * @module model/ProductPackageResponse
 * @version 4.42.3
 */
class ProductPackageResponse {
    /**
     * Constructs a new <code>ProductPackageResponse</code>.
     * ProductPackageResponse
     * @alias module:model/ProductPackageResponse
     * @param clients {Array.<module:model/FeaturedOAuthClient>} OAuth Client Information
     * @param features {Array.<module:model/Feature>} Features
     * @param productPackageId {Number} ID
     * @param productPackageName {String} Name
     */
    constructor(clients, features, productPackageId, productPackageName) { 
        
        ProductPackageResponse.initialize(this, clients, features, productPackageId, productPackageName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clients, features, productPackageId, productPackageName) { 
        obj['clients'] = clients;
        obj['features'] = features;
        obj['productPackageId'] = productPackageId;
        obj['productPackageName'] = productPackageName;
    }

    /**
     * Constructs a <code>ProductPackageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductPackageResponse} obj Optional instance to populate.
     * @return {module:model/ProductPackageResponse} The populated <code>ProductPackageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductPackageResponse();

            if (data.hasOwnProperty('clients')) {
                obj['clients'] = ApiClient.convertToType(data['clients'], [FeaturedOAuthClient]);
            }
            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [Feature]);
            }
            if (data.hasOwnProperty('productPackageId')) {
                obj['productPackageId'] = ApiClient.convertToType(data['productPackageId'], 'Number');
            }
            if (data.hasOwnProperty('productPackageName')) {
                obj['productPackageName'] = ApiClient.convertToType(data['productPackageName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductPackageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductPackageResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductPackageResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['clients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clients'])) {
                throw new Error("Expected the field `clients` to be an array in the JSON data but got " + data['clients']);
            }
            // validate the optional field `clients` (array)
            for (const item of data['clients']) {
                FeaturedOAuthClient.validateJSON(item);
            };
        }
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                Feature.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['productPackageName'] && !(typeof data['productPackageName'] === 'string' || data['productPackageName'] instanceof String)) {
            throw new Error("Expected the field `productPackageName` to be a primitive type in the JSON string but got " + data['productPackageName']);
        }

        return true;
    }


}

ProductPackageResponse.RequiredProperties = ["clients", "features", "productPackageId", "productPackageName"];

/**
 * OAuth Client Information
 * @member {Array.<module:model/FeaturedOAuthClient>} clients
 */
ProductPackageResponse.prototype['clients'] = undefined;

/**
 * Features
 * @member {Array.<module:model/Feature>} features
 */
ProductPackageResponse.prototype['features'] = undefined;

/**
 * ID
 * @member {Number} productPackageId
 */
ProductPackageResponse.prototype['productPackageId'] = undefined;

/**
 * Name
 * @member {String} productPackageName
 */
ProductPackageResponse.prototype['productPackageName'] = undefined;






export default ProductPackageResponse;

