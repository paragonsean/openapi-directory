/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NodePermissions from './NodePermissions';
import UserInfo from './UserInfo';

/**
 * The RoomData model module.
 * @module model/RoomData
 * @version 4.42.3
 */
class RoomData {
    /**
     * Constructs a new <code>RoomData</code>.
     * Room information
     * @alias module:model/RoomData
     * @param hasRecycleBin {Boolean} &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
     * @param id {Number} Room ID
     * @param isEncrypted {Boolean} Encryption state
     * @param isGranted {Boolean} Is user granted room permissions
     * @param name {String} Name
     * @param recycleBinRetentionPeriod {Number} Retention period for deleted nodes in days
     */
    constructor(hasRecycleBin, id, isEncrypted, isGranted, name, recycleBinRetentionPeriod) { 
        
        RoomData.initialize(this, hasRecycleBin, id, isEncrypted, isGranted, name, recycleBinRetentionPeriod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hasRecycleBin, id, isEncrypted, isGranted, name, recycleBinRetentionPeriod) { 
        obj['hasRecycleBin'] = hasRecycleBin;
        obj['id'] = id;
        obj['isEncrypted'] = isEncrypted;
        obj['isGranted'] = isGranted;
        obj['name'] = name;
        obj['recycleBinRetentionPeriod'] = recycleBinRetentionPeriod;
    }

    /**
     * Constructs a <code>RoomData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RoomData} obj Optional instance to populate.
     * @return {module:model/RoomData} The populated <code>RoomData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RoomData();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [RoomData]);
            }
            if (data.hasOwnProperty('cntDownloadShares')) {
                obj['cntDownloadShares'] = ApiClient.convertToType(data['cntDownloadShares'], 'Number');
            }
            if (data.hasOwnProperty('cntUploadShares')) {
                obj['cntUploadShares'] = ApiClient.convertToType(data['cntUploadShares'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('hasRecycleBin')) {
                obj['hasRecycleBin'] = ApiClient.convertToType(data['hasRecycleBin'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isEncrypted')) {
                obj['isEncrypted'] = ApiClient.convertToType(data['isEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('isFavorite')) {
                obj['isFavorite'] = ApiClient.convertToType(data['isFavorite'], 'Boolean');
            }
            if (data.hasOwnProperty('isGranted')) {
                obj['isGranted'] = ApiClient.convertToType(data['isGranted'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'Number');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = NodePermissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('quota')) {
                obj['quota'] = ApiClient.convertToType(data['quota'], 'Number');
            }
            if (data.hasOwnProperty('recycleBinRetentionPeriod')) {
                obj['recycleBinRetentionPeriod'] = ApiClient.convertToType(data['recycleBinRetentionPeriod'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = UserInfo.constructFromObject(data['updatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RoomData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoomData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RoomData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                RoomData.validateJSON(item);
            };
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserInfo.validateJSON(data['createdBy']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `permissions`
        if (data['permissions']) { // data not null
          NodePermissions.validateJSON(data['permissions']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          UserInfo.validateJSON(data['updatedBy']);
        }

        return true;
    }


}

RoomData.RequiredProperties = ["hasRecycleBin", "id", "isEncrypted", "isGranted", "name", "recycleBinRetentionPeriod"];

/**
 * &#128679; Deprecated since v4.10.0  List of rooms, where this room is a parent (if exist)
 * @member {Array.<module:model/RoomData>} children
 */
RoomData.prototype['children'] = undefined;

/**
 * Returns the number of Download Shares of this node.
 * @member {Number} cntDownloadShares
 */
RoomData.prototype['cntDownloadShares'] = undefined;

/**
 * Returns the number of Upload Shares of this node.
 * @member {Number} cntUploadShares
 */
RoomData.prototype['cntUploadShares'] = undefined;

/**
 * Expiration date
 * @member {Date} createdAt
 */
RoomData.prototype['createdAt'] = undefined;

/**
 * @member {module:model/UserInfo} createdBy
 */
RoomData.prototype['createdBy'] = undefined;

/**
 * &#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
 * @member {Boolean} hasRecycleBin
 */
RoomData.prototype['hasRecycleBin'] = undefined;

/**
 * Room ID
 * @member {Number} id
 */
RoomData.prototype['id'] = undefined;

/**
 * Encryption state
 * @member {Boolean} isEncrypted
 */
RoomData.prototype['isEncrypted'] = undefined;

/**
 * Node is marked as favorite (for rooms / folders only)
 * @member {Boolean} isFavorite
 */
RoomData.prototype['isFavorite'] = undefined;

/**
 * Is user granted room permissions
 * @member {Boolean} isGranted
 */
RoomData.prototype['isGranted'] = undefined;

/**
 * Name
 * @member {String} name
 */
RoomData.prototype['name'] = undefined;

/**
 * Parent node ID (room or folder)
 * @member {Number} parentId
 */
RoomData.prototype['parentId'] = undefined;

/**
 * @member {module:model/NodePermissions} permissions
 */
RoomData.prototype['permissions'] = undefined;

/**
 * Quota in byte
 * @member {Number} quota
 */
RoomData.prototype['quota'] = undefined;

/**
 * Retention period for deleted nodes in days
 * @member {Number} recycleBinRetentionPeriod
 */
RoomData.prototype['recycleBinRetentionPeriod'] = undefined;

/**
 * Room size
 * @member {Number} size
 */
RoomData.prototype['size'] = undefined;

/**
 * Node type
 * @member {module:model/RoomData.TypeEnum} type
 */
RoomData.prototype['type'] = undefined;

/**
 * Modification date
 * @member {Date} updatedAt
 */
RoomData.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} updatedBy
 */
RoomData.prototype['updatedBy'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RoomData['TypeEnum'] = {

    /**
     * value: "room"
     * @const
     */
    "room": "room"
};



export default RoomData;

