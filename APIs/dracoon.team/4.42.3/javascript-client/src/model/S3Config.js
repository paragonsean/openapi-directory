/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The S3Config model module.
 * @module model/S3Config
 * @version 4.42.3
 */
class S3Config {
    /**
     * Constructs a new <code>S3Config</code>.
     * S3 configuration
     * @alias module:model/S3Config
     * @param accessKeyDefined {Boolean} Determines whether Access Key ID is defined
     * @param bucketUrl {String} S3 object storage bucket URL
     * @param secretKeyDefined {Boolean} Determines whether Access Secret Key is defined
     */
    constructor(accessKeyDefined, bucketUrl, secretKeyDefined) { 
        
        S3Config.initialize(this, accessKeyDefined, bucketUrl, secretKeyDefined);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessKeyDefined, bucketUrl, secretKeyDefined) { 
        obj['accessKeyDefined'] = accessKeyDefined;
        obj['bucketUrl'] = bucketUrl;
        obj['secretKeyDefined'] = secretKeyDefined;
    }

    /**
     * Constructs a <code>S3Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/S3Config} obj Optional instance to populate.
     * @return {module:model/S3Config} The populated <code>S3Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new S3Config();

            if (data.hasOwnProperty('accessKeyDefined')) {
                obj['accessKeyDefined'] = ApiClient.convertToType(data['accessKeyDefined'], 'Boolean');
            }
            if (data.hasOwnProperty('bucketName')) {
                obj['bucketName'] = ApiClient.convertToType(data['bucketName'], 'String');
            }
            if (data.hasOwnProperty('bucketUrl')) {
                obj['bucketUrl'] = ApiClient.convertToType(data['bucketUrl'], 'String');
            }
            if (data.hasOwnProperty('endpointUrl')) {
                obj['endpointUrl'] = ApiClient.convertToType(data['endpointUrl'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('secretKeyDefined')) {
                obj['secretKeyDefined'] = ApiClient.convertToType(data['secretKeyDefined'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>S3Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>S3Config</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of S3Config.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['bucketName'] && !(typeof data['bucketName'] === 'string' || data['bucketName'] instanceof String)) {
            throw new Error("Expected the field `bucketName` to be a primitive type in the JSON string but got " + data['bucketName']);
        }
        // ensure the json data is a string
        if (data['bucketUrl'] && !(typeof data['bucketUrl'] === 'string' || data['bucketUrl'] instanceof String)) {
            throw new Error("Expected the field `bucketUrl` to be a primitive type in the JSON string but got " + data['bucketUrl']);
        }
        // ensure the json data is a string
        if (data['endpointUrl'] && !(typeof data['endpointUrl'] === 'string' || data['endpointUrl'] instanceof String)) {
            throw new Error("Expected the field `endpointUrl` to be a primitive type in the JSON string but got " + data['endpointUrl']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }

        return true;
    }


}

S3Config.RequiredProperties = ["accessKeyDefined", "bucketUrl", "secretKeyDefined"];

/**
 * Determines whether Access Key ID is defined
 * @member {Boolean} accessKeyDefined
 */
S3Config.prototype['accessKeyDefined'] = undefined;

/**
 * &#128679; Deprecated since v4.24.0  S3 bucket name  use `bucketUrl` instead
 * @member {String} bucketName
 */
S3Config.prototype['bucketName'] = undefined;

/**
 * S3 object storage bucket URL
 * @member {String} bucketUrl
 */
S3Config.prototype['bucketUrl'] = undefined;

/**
 * &#128679; Deprecated since v4.24.0  S3 object storage endpoint URL  use `bucketUrl` instead
 * @member {String} endpointUrl
 */
S3Config.prototype['endpointUrl'] = undefined;

/**
 * S3 region
 * @member {String} region
 */
S3Config.prototype['region'] = undefined;

/**
 * Determines whether Access Secret Key is defined
 * @member {Boolean} secretKeyDefined
 */
S3Config.prototype['secretKeyDefined'] = undefined;






export default S3Config;

