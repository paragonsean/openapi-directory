/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CharacterRules model module.
 * @module model/CharacterRules
 * @version 4.42.3
 */
class CharacterRules {
    /**
     * Constructs a new <code>CharacterRules</code>.
     * Password character rules
     * @alias module:model/CharacterRules
     * @param mustContainCharacters {Array.<module:model/CharacterRules.MustContainCharactersEnum>} Characters which a password must contain:  * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)  * `uppercase` - at least one uppercase character  * `lowercase` - at least one lowercase character  * `numeric` - at least one numeric character  * `special` - at least one special character (letters and digits excluded)  * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)  * `none` - none of the above
     * @param numberOfCharacteristicsToEnforce {Number} Number of characteristics to enforce  e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`  all 4 character sets can be enforced; but also only 2 of them
     */
    constructor(mustContainCharacters, numberOfCharacteristicsToEnforce) { 
        
        CharacterRules.initialize(this, mustContainCharacters, numberOfCharacteristicsToEnforce);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, mustContainCharacters, numberOfCharacteristicsToEnforce) { 
        obj['mustContainCharacters'] = mustContainCharacters;
        obj['numberOfCharacteristicsToEnforce'] = numberOfCharacteristicsToEnforce;
    }

    /**
     * Constructs a <code>CharacterRules</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CharacterRules} obj Optional instance to populate.
     * @return {module:model/CharacterRules} The populated <code>CharacterRules</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CharacterRules();

            if (data.hasOwnProperty('mustContainCharacters')) {
                obj['mustContainCharacters'] = ApiClient.convertToType(data['mustContainCharacters'], ['String']);
            }
            if (data.hasOwnProperty('numberOfCharacteristicsToEnforce')) {
                obj['numberOfCharacteristicsToEnforce'] = ApiClient.convertToType(data['numberOfCharacteristicsToEnforce'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CharacterRules</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CharacterRules</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CharacterRules.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mustContainCharacters'])) {
            throw new Error("Expected the field `mustContainCharacters` to be an array in the JSON data but got " + data['mustContainCharacters']);
        }

        return true;
    }


}

CharacterRules.RequiredProperties = ["mustContainCharacters", "numberOfCharacteristicsToEnforce"];

/**
 * Characters which a password must contain:  * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`)  * `uppercase` - at least one uppercase character  * `lowercase` - at least one lowercase character  * `numeric` - at least one numeric character  * `special` - at least one special character (letters and digits excluded)  * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special` (available only in request models)  * `none` - none of the above
 * @member {Array.<module:model/CharacterRules.MustContainCharactersEnum>} mustContainCharacters
 */
CharacterRules.prototype['mustContainCharacters'] = undefined;

/**
 * Number of characteristics to enforce  e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]`  all 4 character sets can be enforced; but also only 2 of them
 * @member {Number} numberOfCharacteristicsToEnforce
 */
CharacterRules.prototype['numberOfCharacteristicsToEnforce'] = undefined;





/**
 * Allowed values for the <code>mustContainCharacters</code> property.
 * @enum {String}
 * @readonly
 */
CharacterRules['MustContainCharactersEnum'] = {

    /**
     * value: "alpha"
     * @const
     */
    "alpha": "alpha",

    /**
     * value: "uppercase"
     * @const
     */
    "uppercase": "uppercase",

    /**
     * value: "lowercase"
     * @const
     */
    "lowercase": "lowercase",

    /**
     * value: "numeric"
     * @const
     */
    "numeric": "numeric",

    /**
     * value: "special"
     * @const
     */
    "special": "special",

    /**
     * value: "all"
     * @const
     */
    "all": "all",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};



export default CharacterRules;

