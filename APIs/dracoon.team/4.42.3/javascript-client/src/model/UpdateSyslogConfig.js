/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSyslogConfig model module.
 * @module model/UpdateSyslogConfig
 * @version 4.42.3
 */
class UpdateSyslogConfig {
    /**
     * Constructs a new <code>UpdateSyslogConfig</code>.
     * Request model for updating syslog settings
     * @alias module:model/UpdateSyslogConfig
     */
    constructor() { 
        
        UpdateSyslogConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateSyslogConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSyslogConfig} obj Optional instance to populate.
     * @return {module:model/UpdateSyslogConfig} The populated <code>UpdateSyslogConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSyslogConfig();

            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('logIpEnabled')) {
                obj['logIpEnabled'] = ApiClient.convertToType(data['logIpEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSyslogConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSyslogConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }

        return true;
    }


}



/**
 * Is syslog enabled?
 * @member {Boolean} enabled
 */
UpdateSyslogConfig.prototype['enabled'] = undefined;

/**
 * Syslog server (IP or FQDN)
 * @member {String} host
 */
UpdateSyslogConfig.prototype['host'] = undefined;

/**
 * Determines whether userâ€™s IP address is logged.
 * @member {Boolean} logIpEnabled
 */
UpdateSyslogConfig.prototype['logIpEnabled'] = undefined;

/**
 * Syslog server port
 * @member {Number} port
 */
UpdateSyslogConfig.prototype['port'] = undefined;

/**
 * Protocol to connect to syslog server
 * @member {module:model/UpdateSyslogConfig.ProtocolEnum} protocol
 */
UpdateSyslogConfig.prototype['protocol'] = undefined;





/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
UpdateSyslogConfig['ProtocolEnum'] = {

    /**
     * value: "TCP"
     * @const
     */
    "TCP": "TCP",

    /**
     * value: "UDP"
     * @const
     */
    "UDP": "UDP"
};



export default UpdateSyslogConfig;

