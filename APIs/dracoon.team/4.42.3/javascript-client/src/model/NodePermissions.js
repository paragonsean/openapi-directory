/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NodePermissions model module.
 * @module model/NodePermissions
 * @version 4.42.3
 */
class NodePermissions {
    /**
     * Constructs a new <code>NodePermissions</code>.
     * Node permissions
     * @alias module:model/NodePermissions
     * @param change {Boolean} User / Group may update metadata of nodes: rename files and folders, change classification, etc.
     * @param create {Boolean} User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.
     * @param _delete {Boolean} User / Group may overwrite and remove files / folders, move files from this room.
     * @param deleteRecycleBin {Boolean} User / Group may permanently remove files / folders from the recycle bin.
     * @param manage {Boolean} User / Group may grant all of the above permissions to other users and groups independently,  may update room metadata and create / update / delete subordinary rooms, has all permissions.
     * @param manageDownloadShare {Boolean} User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
     * @param manageUploadShare {Boolean} User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.
     * @param read {Boolean} User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.
     * @param readRecycleBin {Boolean} User / Group may look up files / folders in the recycle bin.
     * @param restoreRecycleBin {Boolean} User / Group may restore files / folders from recycle bin - room permissions required.
     */
    constructor(change, create, _delete, deleteRecycleBin, manage, manageDownloadShare, manageUploadShare, read, readRecycleBin, restoreRecycleBin) { 
        
        NodePermissions.initialize(this, change, create, _delete, deleteRecycleBin, manage, manageDownloadShare, manageUploadShare, read, readRecycleBin, restoreRecycleBin);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, change, create, _delete, deleteRecycleBin, manage, manageDownloadShare, manageUploadShare, read, readRecycleBin, restoreRecycleBin) { 
        obj['change'] = change;
        obj['create'] = create;
        obj['delete'] = _delete;
        obj['deleteRecycleBin'] = deleteRecycleBin;
        obj['manage'] = manage;
        obj['manageDownloadShare'] = manageDownloadShare;
        obj['manageUploadShare'] = manageUploadShare;
        obj['read'] = read;
        obj['readRecycleBin'] = readRecycleBin;
        obj['restoreRecycleBin'] = restoreRecycleBin;
    }

    /**
     * Constructs a <code>NodePermissions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NodePermissions} obj Optional instance to populate.
     * @return {module:model/NodePermissions} The populated <code>NodePermissions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NodePermissions();

            if (data.hasOwnProperty('change')) {
                obj['change'] = ApiClient.convertToType(data['change'], 'Boolean');
            }
            if (data.hasOwnProperty('create')) {
                obj['create'] = ApiClient.convertToType(data['create'], 'Boolean');
            }
            if (data.hasOwnProperty('delete')) {
                obj['delete'] = ApiClient.convertToType(data['delete'], 'Boolean');
            }
            if (data.hasOwnProperty('deleteRecycleBin')) {
                obj['deleteRecycleBin'] = ApiClient.convertToType(data['deleteRecycleBin'], 'Boolean');
            }
            if (data.hasOwnProperty('manage')) {
                obj['manage'] = ApiClient.convertToType(data['manage'], 'Boolean');
            }
            if (data.hasOwnProperty('manageDownloadShare')) {
                obj['manageDownloadShare'] = ApiClient.convertToType(data['manageDownloadShare'], 'Boolean');
            }
            if (data.hasOwnProperty('manageUploadShare')) {
                obj['manageUploadShare'] = ApiClient.convertToType(data['manageUploadShare'], 'Boolean');
            }
            if (data.hasOwnProperty('read')) {
                obj['read'] = ApiClient.convertToType(data['read'], 'Boolean');
            }
            if (data.hasOwnProperty('readRecycleBin')) {
                obj['readRecycleBin'] = ApiClient.convertToType(data['readRecycleBin'], 'Boolean');
            }
            if (data.hasOwnProperty('restoreRecycleBin')) {
                obj['restoreRecycleBin'] = ApiClient.convertToType(data['restoreRecycleBin'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NodePermissions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NodePermissions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NodePermissions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

NodePermissions.RequiredProperties = ["change", "create", "delete", "deleteRecycleBin", "manage", "manageDownloadShare", "manageUploadShare", "read", "readRecycleBin", "restoreRecycleBin"];

/**
 * User / Group may update metadata of nodes: rename files and folders, change classification, etc.
 * @member {Boolean} change
 */
NodePermissions.prototype['change'] = undefined;

/**
 * User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.
 * @member {Boolean} create
 */
NodePermissions.prototype['create'] = undefined;

/**
 * User / Group may overwrite and remove files / folders, move files from this room.
 * @member {Boolean} delete
 */
NodePermissions.prototype['delete'] = undefined;

/**
 * User / Group may permanently remove files / folders from the recycle bin.
 * @member {Boolean} deleteRecycleBin
 */
NodePermissions.prototype['deleteRecycleBin'] = undefined;

/**
 * User / Group may grant all of the above permissions to other users and groups independently,  may update room metadata and create / update / delete subordinary rooms, has all permissions.
 * @member {Boolean} manage
 */
NodePermissions.prototype['manage'] = undefined;

/**
 * User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
 * @member {Boolean} manageDownloadShare
 */
NodePermissions.prototype['manageDownloadShare'] = undefined;

/**
 * User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.
 * @member {Boolean} manageUploadShare
 */
NodePermissions.prototype['manageUploadShare'] = undefined;

/**
 * User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.
 * @member {Boolean} read
 */
NodePermissions.prototype['read'] = undefined;

/**
 * User / Group may look up files / folders in the recycle bin.
 * @member {Boolean} readRecycleBin
 */
NodePermissions.prototype['readRecycleBin'] = undefined;

/**
 * User / Group may restore files / folders from recycle bin - room permissions required.
 * @member {Boolean} restoreRecycleBin
 */
NodePermissions.prototype['restoreRecycleBin'] = undefined;






export default NodePermissions;

