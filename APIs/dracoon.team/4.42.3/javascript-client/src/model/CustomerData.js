/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerData model module.
 * @module model/CustomerData
 * @version 4.42.3
 */
class CustomerData {
    /**
     * Constructs a new <code>CustomerData</code>.
     * Customer information
     * @alias module:model/CustomerData
     * @param accountsLimit {Number} User accounts limit
     * @param accountsUsed {Number} User accounts used
     * @param cntGuestUser {Number} Number of guest user accounts
     * @param cntInternalUser {Number} Number of internal user accounts
     * @param customerEncryptionEnabled {Boolean} Clientside encryption for customer enabled
     * @param id {Number} Unique identifier for the customer
     * @param isProviderCustomer {Boolean} Customer is Provider Customer
     * @param name {String} Customer name
     * @param spaceLimit {Number} Space limit (in bytes). -1 for unlimited
     * @param spaceUsed {Number} Space used (in bytes)
     */
    constructor(accountsLimit, accountsUsed, cntGuestUser, cntInternalUser, customerEncryptionEnabled, id, isProviderCustomer, name, spaceLimit, spaceUsed) { 
        
        CustomerData.initialize(this, accountsLimit, accountsUsed, cntGuestUser, cntInternalUser, customerEncryptionEnabled, id, isProviderCustomer, name, spaceLimit, spaceUsed);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountsLimit, accountsUsed, cntGuestUser, cntInternalUser, customerEncryptionEnabled, id, isProviderCustomer, name, spaceLimit, spaceUsed) { 
        obj['accountsLimit'] = accountsLimit;
        obj['accountsUsed'] = accountsUsed;
        obj['cntGuestUser'] = cntGuestUser;
        obj['cntInternalUser'] = cntInternalUser;
        obj['customerEncryptionEnabled'] = customerEncryptionEnabled;
        obj['id'] = id;
        obj['isProviderCustomer'] = isProviderCustomer;
        obj['name'] = name;
        obj['spaceLimit'] = spaceLimit;
        obj['spaceUsed'] = spaceUsed;
    }

    /**
     * Constructs a <code>CustomerData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerData} obj Optional instance to populate.
     * @return {module:model/CustomerData} The populated <code>CustomerData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerData();

            if (data.hasOwnProperty('accountsLimit')) {
                obj['accountsLimit'] = ApiClient.convertToType(data['accountsLimit'], 'Number');
            }
            if (data.hasOwnProperty('accountsUsed')) {
                obj['accountsUsed'] = ApiClient.convertToType(data['accountsUsed'], 'Number');
            }
            if (data.hasOwnProperty('cntGuestUser')) {
                obj['cntGuestUser'] = ApiClient.convertToType(data['cntGuestUser'], 'Number');
            }
            if (data.hasOwnProperty('cntInternalUser')) {
                obj['cntInternalUser'] = ApiClient.convertToType(data['cntInternalUser'], 'Number');
            }
            if (data.hasOwnProperty('customerEncryptionEnabled')) {
                obj['customerEncryptionEnabled'] = ApiClient.convertToType(data['customerEncryptionEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isProviderCustomer')) {
                obj['isProviderCustomer'] = ApiClient.convertToType(data['isProviderCustomer'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('spaceLimit')) {
                obj['spaceLimit'] = ApiClient.convertToType(data['spaceLimit'], 'Number');
            }
            if (data.hasOwnProperty('spaceUsed')) {
                obj['spaceUsed'] = ApiClient.convertToType(data['spaceUsed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

CustomerData.RequiredProperties = ["accountsLimit", "accountsUsed", "cntGuestUser", "cntInternalUser", "customerEncryptionEnabled", "id", "isProviderCustomer", "name", "spaceLimit", "spaceUsed"];

/**
 * User accounts limit
 * @member {Number} accountsLimit
 */
CustomerData.prototype['accountsLimit'] = undefined;

/**
 * User accounts used
 * @member {Number} accountsUsed
 */
CustomerData.prototype['accountsUsed'] = undefined;

/**
 * Number of guest user accounts
 * @member {Number} cntGuestUser
 */
CustomerData.prototype['cntGuestUser'] = undefined;

/**
 * Number of internal user accounts
 * @member {Number} cntInternalUser
 */
CustomerData.prototype['cntInternalUser'] = undefined;

/**
 * Clientside encryption for customer enabled
 * @member {Boolean} customerEncryptionEnabled
 */
CustomerData.prototype['customerEncryptionEnabled'] = undefined;

/**
 * Unique identifier for the customer
 * @member {Number} id
 */
CustomerData.prototype['id'] = undefined;

/**
 * Customer is Provider Customer
 * @member {Boolean} isProviderCustomer
 */
CustomerData.prototype['isProviderCustomer'] = undefined;

/**
 * Customer name
 * @member {String} name
 */
CustomerData.prototype['name'] = undefined;

/**
 * Space limit (in bytes). -1 for unlimited
 * @member {Number} spaceLimit
 */
CustomerData.prototype['spaceLimit'] = undefined;

/**
 * Space used (in bytes)
 * @member {Number} spaceUsed
 */
CustomerData.prototype['spaceUsed'] = undefined;






export default CustomerData;

