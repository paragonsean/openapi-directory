/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserInfo from './UserInfo';

/**
 * The UploadShare model module.
 * @module model/UploadShare
 * @version 4.42.3
 */
class UploadShare {
    /**
     * Constructs a new <code>UploadShare</code>.
     * Upload Share information
     * @alias module:model/UploadShare
     * @param accessKey {String} Share access key to generate secure link
     * @param createdAt {Date} Creation date
     * @param createdBy {module:model/UserInfo} 
     * @param id {Number} Share ID
     * @param isProtected {Boolean} Is share protected by password
     * @param name {String} Alias name
     * @param notifyCreator {Boolean} &#128679; Deprecated since v4.20.0  Notify creator on every upload.
     * @param targetId {Number} Target room or folder ID
     */
    constructor(accessKey, createdAt, createdBy, id, isProtected, name, notifyCreator, targetId) { 
        
        UploadShare.initialize(this, accessKey, createdAt, createdBy, id, isProtected, name, notifyCreator, targetId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessKey, createdAt, createdBy, id, isProtected, name, notifyCreator, targetId) { 
        obj['accessKey'] = accessKey;
        obj['createdAt'] = createdAt;
        obj['createdBy'] = createdBy;
        obj['id'] = id;
        obj['isProtected'] = isProtected;
        obj['name'] = name;
        obj['notifyCreator'] = notifyCreator;
        obj['targetId'] = targetId;
    }

    /**
     * Constructs a <code>UploadShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UploadShare} obj Optional instance to populate.
     * @return {module:model/UploadShare} The populated <code>UploadShare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UploadShare();

            if (data.hasOwnProperty('accessKey')) {
                obj['accessKey'] = ApiClient.convertToType(data['accessKey'], 'String');
            }
            if (data.hasOwnProperty('cntFiles')) {
                obj['cntFiles'] = ApiClient.convertToType(data['cntFiles'], 'Number');
            }
            if (data.hasOwnProperty('cntUploads')) {
                obj['cntUploads'] = ApiClient.convertToType(data['cntUploads'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('dataUrl')) {
                obj['dataUrl'] = ApiClient.convertToType(data['dataUrl'], 'String');
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('filesExpiryPeriod')) {
                obj['filesExpiryPeriod'] = ApiClient.convertToType(data['filesExpiryPeriod'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('internalNotes')) {
                obj['internalNotes'] = ApiClient.convertToType(data['internalNotes'], 'String');
            }
            if (data.hasOwnProperty('isEncrypted')) {
                obj['isEncrypted'] = ApiClient.convertToType(data['isEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('isProtected')) {
                obj['isProtected'] = ApiClient.convertToType(data['isProtected'], 'Boolean');
            }
            if (data.hasOwnProperty('maxSize')) {
                obj['maxSize'] = ApiClient.convertToType(data['maxSize'], 'Number');
            }
            if (data.hasOwnProperty('maxSlots')) {
                obj['maxSlots'] = ApiClient.convertToType(data['maxSlots'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('notifyCreator')) {
                obj['notifyCreator'] = ApiClient.convertToType(data['notifyCreator'], 'Boolean');
            }
            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], 'String');
            }
            if (data.hasOwnProperty('showCreatorName')) {
                obj['showCreatorName'] = ApiClient.convertToType(data['showCreatorName'], 'Boolean');
            }
            if (data.hasOwnProperty('showCreatorUsername')) {
                obj['showCreatorUsername'] = ApiClient.convertToType(data['showCreatorUsername'], 'Boolean');
            }
            if (data.hasOwnProperty('showUploadedFiles')) {
                obj['showUploadedFiles'] = ApiClient.convertToType(data['showUploadedFiles'], 'Boolean');
            }
            if (data.hasOwnProperty('smsRecipients')) {
                obj['smsRecipients'] = ApiClient.convertToType(data['smsRecipients'], 'String');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'Number');
            }
            if (data.hasOwnProperty('targetPath')) {
                obj['targetPath'] = ApiClient.convertToType(data['targetPath'], 'String');
            }
            if (data.hasOwnProperty('targetType')) {
                obj['targetType'] = ApiClient.convertToType(data['targetType'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = UserInfo.constructFromObject(data['updatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UploadShare</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UploadShare</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UploadShare.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accessKey'] && !(typeof data['accessKey'] === 'string' || data['accessKey'] instanceof String)) {
            throw new Error("Expected the field `accessKey` to be a primitive type in the JSON string but got " + data['accessKey']);
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserInfo.validateJSON(data['createdBy']);
        }
        // ensure the json data is a string
        if (data['dataUrl'] && !(typeof data['dataUrl'] === 'string' || data['dataUrl'] instanceof String)) {
            throw new Error("Expected the field `dataUrl` to be a primitive type in the JSON string but got " + data['dataUrl']);
        }
        // ensure the json data is a string
        if (data['internalNotes'] && !(typeof data['internalNotes'] === 'string' || data['internalNotes'] instanceof String)) {
            throw new Error("Expected the field `internalNotes` to be a primitive type in the JSON string but got " + data['internalNotes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        // ensure the json data is a string
        if (data['recipients'] && !(typeof data['recipients'] === 'string' || data['recipients'] instanceof String)) {
            throw new Error("Expected the field `recipients` to be a primitive type in the JSON string but got " + data['recipients']);
        }
        // ensure the json data is a string
        if (data['smsRecipients'] && !(typeof data['smsRecipients'] === 'string' || data['smsRecipients'] instanceof String)) {
            throw new Error("Expected the field `smsRecipients` to be a primitive type in the JSON string but got " + data['smsRecipients']);
        }
        // ensure the json data is a string
        if (data['targetPath'] && !(typeof data['targetPath'] === 'string' || data['targetPath'] instanceof String)) {
            throw new Error("Expected the field `targetPath` to be a primitive type in the JSON string but got " + data['targetPath']);
        }
        // ensure the json data is a string
        if (data['targetType'] && !(typeof data['targetType'] === 'string' || data['targetType'] instanceof String)) {
            throw new Error("Expected the field `targetType` to be a primitive type in the JSON string but got " + data['targetType']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          UserInfo.validateJSON(data['updatedBy']);
        }

        return true;
    }


}

UploadShare.RequiredProperties = ["accessKey", "createdAt", "createdBy", "id", "isProtected", "name", "notifyCreator", "targetId"];

/**
 * Share access key to generate secure link
 * @member {String} accessKey
 */
UploadShare.prototype['accessKey'] = undefined;

/**
 * Total amount of existing files uploaded with this share.
 * @member {Number} cntFiles
 */
UploadShare.prototype['cntFiles'] = undefined;

/**
 * Total amount of uploads conducted with this share.
 * @member {Number} cntUploads
 */
UploadShare.prototype['cntUploads'] = undefined;

/**
 * Creation date
 * @member {Date} createdAt
 */
UploadShare.prototype['createdAt'] = undefined;

/**
 * @member {module:model/UserInfo} createdBy
 */
UploadShare.prototype['createdBy'] = undefined;

/**
 * Upload Share URL
 * @member {String} dataUrl
 */
UploadShare.prototype['dataUrl'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
UploadShare.prototype['expireAt'] = undefined;

/**
 * Number of days after which uploaded files expire
 * @member {Number} filesExpiryPeriod
 */
UploadShare.prototype['filesExpiryPeriod'] = undefined;

/**
 * Share ID
 * @member {Number} id
 */
UploadShare.prototype['id'] = undefined;

/**
 * &#128640; Since v4.11.0  Internal notes
 * @member {String} internalNotes
 */
UploadShare.prototype['internalNotes'] = undefined;

/**
 * Encryption state
 * @member {Boolean} isEncrypted
 */
UploadShare.prototype['isEncrypted'] = undefined;

/**
 * Is share protected by password
 * @member {Boolean} isProtected
 */
UploadShare.prototype['isProtected'] = undefined;

/**
 * Maximal total size of uploaded files (in bytes)
 * @member {Number} maxSize
 */
UploadShare.prototype['maxSize'] = undefined;

/**
 * Maximal amount of files to upload
 * @member {Number} maxSlots
 */
UploadShare.prototype['maxSlots'] = undefined;

/**
 * Alias name
 * @member {String} name
 */
UploadShare.prototype['name'] = undefined;

/**
 * User notes
 * @member {String} notes
 */
UploadShare.prototype['notes'] = undefined;

/**
 * &#128679; Deprecated since v4.20.0  Notify creator on every upload.
 * @member {Boolean} notifyCreator
 */
UploadShare.prototype['notifyCreator'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  CSV string of recipient email addresses
 * @member {String} recipients
 */
UploadShare.prototype['recipients'] = undefined;

/**
 * &#128640; Since v4.11.0  Show creator first and last name.
 * @member {Boolean} showCreatorName
 */
UploadShare.prototype['showCreatorName'] = undefined;

/**
 * &#128640; Since v4.11.0  Show creator email address.
 * @member {Boolean} showCreatorUsername
 */
UploadShare.prototype['showCreatorUsername'] = undefined;

/**
 * Allow display of already uploaded files
 * @member {Boolean} showUploadedFiles
 */
UploadShare.prototype['showUploadedFiles'] = undefined;

/**
 * &#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs
 * @member {String} smsRecipients
 */
UploadShare.prototype['smsRecipients'] = undefined;

/**
 * Target room or folder ID
 * @member {Number} targetId
 */
UploadShare.prototype['targetId'] = undefined;

/**
 * Path to shared upload node
 * @member {String} targetPath
 */
UploadShare.prototype['targetPath'] = undefined;

/**
 * Node type
 * @member {String} targetType
 */
UploadShare.prototype['targetType'] = undefined;

/**
 * Modification date
 * @member {Date} updatedAt
 */
UploadShare.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} updatedBy
 */
UploadShare.prototype['updatedBy'] = undefined;






export default UploadShare;

