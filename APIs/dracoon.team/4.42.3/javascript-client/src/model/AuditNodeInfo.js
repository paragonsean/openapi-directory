/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuditNodeInfo model module.
 * @module model/AuditNodeInfo
 * @version 4.42.3
 */
class AuditNodeInfo {
    /**
     * Constructs a new <code>AuditNodeInfo</code>.
     * Audit node info
     * @alias module:model/AuditNodeInfo
     * @param nodeId {Number} Node ID
     * @param nodeName {String} Node name
     * @param nodeParentPath {String} Parent node path  `/` if node is a root node (room)
     */
    constructor(nodeId, nodeName, nodeParentPath) { 
        
        AuditNodeInfo.initialize(this, nodeId, nodeName, nodeParentPath);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, nodeId, nodeName, nodeParentPath) { 
        obj['nodeId'] = nodeId;
        obj['nodeName'] = nodeName;
        obj['nodeParentPath'] = nodeParentPath;
    }

    /**
     * Constructs a <code>AuditNodeInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditNodeInfo} obj Optional instance to populate.
     * @return {module:model/AuditNodeInfo} The populated <code>AuditNodeInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditNodeInfo();

            if (data.hasOwnProperty('countChildren')) {
                obj['countChildren'] = ApiClient.convertToType(data['countChildren'], 'Number');
            }
            if (data.hasOwnProperty('nodeId')) {
                obj['nodeId'] = ApiClient.convertToType(data['nodeId'], 'Number');
            }
            if (data.hasOwnProperty('nodeIsEncrypted')) {
                obj['nodeIsEncrypted'] = ApiClient.convertToType(data['nodeIsEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('nodeName')) {
                obj['nodeName'] = ApiClient.convertToType(data['nodeName'], 'String');
            }
            if (data.hasOwnProperty('nodeParentId')) {
                obj['nodeParentId'] = ApiClient.convertToType(data['nodeParentId'], 'Number');
            }
            if (data.hasOwnProperty('nodeParentPath')) {
                obj['nodeParentPath'] = ApiClient.convertToType(data['nodeParentPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditNodeInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditNodeInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuditNodeInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['nodeName'] && !(typeof data['nodeName'] === 'string' || data['nodeName'] instanceof String)) {
            throw new Error("Expected the field `nodeName` to be a primitive type in the JSON string but got " + data['nodeName']);
        }
        // ensure the json data is a string
        if (data['nodeParentPath'] && !(typeof data['nodeParentPath'] === 'string' || data['nodeParentPath'] instanceof String)) {
            throw new Error("Expected the field `nodeParentPath` to be a primitive type in the JSON string but got " + data['nodeParentPath']);
        }

        return true;
    }


}

AuditNodeInfo.RequiredProperties = ["nodeId", "nodeName", "nodeParentPath"];

/**
 * Number of direct children  (no recursion; for rooms only)
 * @member {Number} countChildren
 */
AuditNodeInfo.prototype['countChildren'] = undefined;

/**
 * Node ID
 * @member {Number} nodeId
 */
AuditNodeInfo.prototype['nodeId'] = undefined;

/**
 * Encryption state
 * @member {Boolean} nodeIsEncrypted
 */
AuditNodeInfo.prototype['nodeIsEncrypted'] = undefined;

/**
 * Node name
 * @member {String} nodeName
 */
AuditNodeInfo.prototype['nodeName'] = undefined;

/**
 * Parent room ID
 * @member {Number} nodeParentId
 */
AuditNodeInfo.prototype['nodeParentId'] = undefined;

/**
 * Parent node path  `/` if node is a root node (room)
 * @member {String} nodeParentPath
 */
AuditNodeInfo.prototype['nodeParentPath'] = undefined;






export default AuditNodeInfo;

