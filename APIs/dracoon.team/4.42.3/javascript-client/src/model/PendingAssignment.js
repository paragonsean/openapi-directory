/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PendingAssignment model module.
 * @module model/PendingAssignment
 * @version 4.42.3
 */
class PendingAssignment {
    /**
     * Constructs a new <code>PendingAssignment</code>.
     * Pending assignment information
     * @alias module:model/PendingAssignment
     * @param groupId {Number} Unique identifier for the group
     * @param roomId {Number} Room ID
     * @param roomName {String} Room name
     * @param state {module:model/PendingAssignment.StateEnum} Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
     * @param userId {Number} Unique identifier for the user
     */
    constructor(groupId, roomId, roomName, state, userId) { 
        
        PendingAssignment.initialize(this, groupId, roomId, roomName, state, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupId, roomId, roomName, state, userId) { 
        obj['groupId'] = groupId;
        obj['roomId'] = roomId;
        obj['roomName'] = roomName;
        obj['state'] = state;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>PendingAssignment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingAssignment} obj Optional instance to populate.
     * @return {module:model/PendingAssignment} The populated <code>PendingAssignment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingAssignment();

            if (data.hasOwnProperty('groupId')) {
                obj['groupId'] = ApiClient.convertToType(data['groupId'], 'Number');
            }
            if (data.hasOwnProperty('roomId')) {
                obj['roomId'] = ApiClient.convertToType(data['roomId'], 'Number');
            }
            if (data.hasOwnProperty('roomName')) {
                obj['roomName'] = ApiClient.convertToType(data['roomName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PendingAssignment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PendingAssignment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PendingAssignment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['roomName'] && !(typeof data['roomName'] === 'string' || data['roomName'] instanceof String)) {
            throw new Error("Expected the field `roomName` to be a primitive type in the JSON string but got " + data['roomName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

PendingAssignment.RequiredProperties = ["groupId", "roomId", "roomName", "state", "userId"];

/**
 * Unique identifier for the group
 * @member {Number} groupId
 */
PendingAssignment.prototype['groupId'] = undefined;

/**
 * Room ID
 * @member {Number} roomId
 */
PendingAssignment.prototype['roomId'] = undefined;

/**
 * Room name
 * @member {String} roomName
 */
PendingAssignment.prototype['roomName'] = undefined;

/**
 * Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
 * @member {module:model/PendingAssignment.StateEnum} state
 */
PendingAssignment.prototype['state'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} userId
 */
PendingAssignment.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PendingAssignment['StateEnum'] = {

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED",

    /**
     * value: "WAITING"
     * @const
     */
    "WAITING": "WAITING"
};



export default PendingAssignment;

