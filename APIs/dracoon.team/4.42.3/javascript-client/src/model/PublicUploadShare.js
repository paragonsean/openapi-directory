/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PublicUploadedFileData from './PublicUploadedFileData';
import UserUserPublicKeyList from './UserUserPublicKeyList';

/**
 * The PublicUploadShare model module.
 * @module model/PublicUploadShare
 * @version 4.42.3
 */
class PublicUploadShare {
    /**
     * Constructs a new <code>PublicUploadShare</code>.
     * Upload Share information
     * @alias module:model/PublicUploadShare
     * @param createdAt {Date} Creation date
     * @param creatorName {String} &#128640; Since v4.11.0  Creator name
     * @param isProtected {Boolean} Is share protected by password
     */
    constructor(createdAt, creatorName, isProtected) { 
        
        PublicUploadShare.initialize(this, createdAt, creatorName, isProtected);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, creatorName, isProtected) { 
        obj['createdAt'] = createdAt;
        obj['creatorName'] = creatorName;
        obj['isProtected'] = isProtected;
    }

    /**
     * Constructs a <code>PublicUploadShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicUploadShare} obj Optional instance to populate.
     * @return {module:model/PublicUploadShare} The populated <code>PublicUploadShare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicUploadShare();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('creatorName')) {
                obj['creatorName'] = ApiClient.convertToType(data['creatorName'], 'String');
            }
            if (data.hasOwnProperty('creatorUsername')) {
                obj['creatorUsername'] = ApiClient.convertToType(data['creatorUsername'], 'String');
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('isEncrypted')) {
                obj['isEncrypted'] = ApiClient.convertToType(data['isEncrypted'], 'Boolean');
            }
            if (data.hasOwnProperty('isProtected')) {
                obj['isProtected'] = ApiClient.convertToType(data['isProtected'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('notes')) {
                obj['notes'] = ApiClient.convertToType(data['notes'], 'String');
            }
            if (data.hasOwnProperty('remainingSize')) {
                obj['remainingSize'] = ApiClient.convertToType(data['remainingSize'], 'Number');
            }
            if (data.hasOwnProperty('remainingSlots')) {
                obj['remainingSlots'] = ApiClient.convertToType(data['remainingSlots'], 'Number');
            }
            if (data.hasOwnProperty('showUploadedFiles')) {
                obj['showUploadedFiles'] = ApiClient.convertToType(data['showUploadedFiles'], 'Boolean');
            }
            if (data.hasOwnProperty('uploadedFiles')) {
                obj['uploadedFiles'] = ApiClient.convertToType(data['uploadedFiles'], [PublicUploadedFileData]);
            }
            if (data.hasOwnProperty('userUserPublicKeyList')) {
                obj['userUserPublicKeyList'] = UserUserPublicKeyList.constructFromObject(data['userUserPublicKeyList']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicUploadShare</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicUploadShare</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicUploadShare.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['creatorName'] && !(typeof data['creatorName'] === 'string' || data['creatorName'] instanceof String)) {
            throw new Error("Expected the field `creatorName` to be a primitive type in the JSON string but got " + data['creatorName']);
        }
        // ensure the json data is a string
        if (data['creatorUsername'] && !(typeof data['creatorUsername'] === 'string' || data['creatorUsername'] instanceof String)) {
            throw new Error("Expected the field `creatorUsername` to be a primitive type in the JSON string but got " + data['creatorUsername']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['notes'] && !(typeof data['notes'] === 'string' || data['notes'] instanceof String)) {
            throw new Error("Expected the field `notes` to be a primitive type in the JSON string but got " + data['notes']);
        }
        if (data['uploadedFiles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['uploadedFiles'])) {
                throw new Error("Expected the field `uploadedFiles` to be an array in the JSON data but got " + data['uploadedFiles']);
            }
            // validate the optional field `uploadedFiles` (array)
            for (const item of data['uploadedFiles']) {
                PublicUploadedFileData.validateJSON(item);
            };
        }
        // validate the optional field `userUserPublicKeyList`
        if (data['userUserPublicKeyList']) { // data not null
          UserUserPublicKeyList.validateJSON(data['userUserPublicKeyList']);
        }

        return true;
    }


}

PublicUploadShare.RequiredProperties = ["createdAt", "creatorName", "isProtected"];

/**
 * Creation date
 * @member {Date} createdAt
 */
PublicUploadShare.prototype['createdAt'] = undefined;

/**
 * &#128640; Since v4.11.0  Creator name
 * @member {String} creatorName
 */
PublicUploadShare.prototype['creatorName'] = undefined;

/**
 * &#128640; Since v4.11.0  Creator username
 * @member {String} creatorUsername
 */
PublicUploadShare.prototype['creatorUsername'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
PublicUploadShare.prototype['expireAt'] = undefined;

/**
 * Encryption state
 * @member {Boolean} isEncrypted
 */
PublicUploadShare.prototype['isEncrypted'] = undefined;

/**
 * Is share protected by password
 * @member {Boolean} isProtected
 */
PublicUploadShare.prototype['isProtected'] = undefined;

/**
 * Share display name (alias name)
 * @member {String} name
 */
PublicUploadShare.prototype['name'] = undefined;

/**
 * User notes
 * @member {String} notes
 */
PublicUploadShare.prototype['notes'] = undefined;

/**
 * Remaining size
 * @member {Number} remainingSize
 */
PublicUploadShare.prototype['remainingSize'] = undefined;

/**
 * Remaining slots
 * @member {Number} remainingSlots
 */
PublicUploadShare.prototype['remainingSlots'] = undefined;

/**
 * Allow display of already uploaded files
 * @member {Boolean} showUploadedFiles
 */
PublicUploadShare.prototype['showUploadedFiles'] = undefined;

/**
 * List of (public) uploaded files
 * @member {Array.<module:model/PublicUploadedFileData>} uploadedFiles
 */
PublicUploadShare.prototype['uploadedFiles'] = undefined;

/**
 * @member {module:model/UserUserPublicKeyList} userUserPublicKeyList
 */
PublicUploadShare.prototype['userUserPublicKeyList'] = undefined;






export default PublicUploadShare;

