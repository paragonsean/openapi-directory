/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupInfo from './GroupInfo';
import PendingGroupData from './PendingGroupData';
import PendingUserData from './PendingUserData';
import UserInfo from './UserInfo';

/**
 * The PendingAssignmentData model module.
 * @module model/PendingAssignmentData
 * @version 4.42.3
 */
class PendingAssignmentData {
    /**
     * Constructs a new <code>PendingAssignmentData</code>.
     * Pending assignment information
     * @alias module:model/PendingAssignmentData
     * @param groupInfo {module:model/GroupInfo} 
     * @param pendingGroupData {module:model/PendingGroupData} 
     * @param pendingUserData {module:model/PendingUserData} 
     * @param roomId {Number} Room ID
     * @param roomName {String} Room name
     * @param state {module:model/PendingAssignmentData.StateEnum} Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
     * @param userInfo {module:model/UserInfo} 
     */
    constructor(groupInfo, pendingGroupData, pendingUserData, roomId, roomName, state, userInfo) { 
        
        PendingAssignmentData.initialize(this, groupInfo, pendingGroupData, pendingUserData, roomId, roomName, state, userInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, groupInfo, pendingGroupData, pendingUserData, roomId, roomName, state, userInfo) { 
        obj['groupInfo'] = groupInfo;
        obj['pendingGroupData'] = pendingGroupData;
        obj['pendingUserData'] = pendingUserData;
        obj['roomId'] = roomId;
        obj['roomName'] = roomName;
        obj['state'] = state;
        obj['userInfo'] = userInfo;
    }

    /**
     * Constructs a <code>PendingAssignmentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PendingAssignmentData} obj Optional instance to populate.
     * @return {module:model/PendingAssignmentData} The populated <code>PendingAssignmentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PendingAssignmentData();

            if (data.hasOwnProperty('groupInfo')) {
                obj['groupInfo'] = GroupInfo.constructFromObject(data['groupInfo']);
            }
            if (data.hasOwnProperty('pendingGroupData')) {
                obj['pendingGroupData'] = PendingGroupData.constructFromObject(data['pendingGroupData']);
            }
            if (data.hasOwnProperty('pendingUserData')) {
                obj['pendingUserData'] = PendingUserData.constructFromObject(data['pendingUserData']);
            }
            if (data.hasOwnProperty('roomId')) {
                obj['roomId'] = ApiClient.convertToType(data['roomId'], 'Number');
            }
            if (data.hasOwnProperty('roomName')) {
                obj['roomName'] = ApiClient.convertToType(data['roomName'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('userInfo')) {
                obj['userInfo'] = UserInfo.constructFromObject(data['userInfo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PendingAssignmentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PendingAssignmentData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PendingAssignmentData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `groupInfo`
        if (data['groupInfo']) { // data not null
          GroupInfo.validateJSON(data['groupInfo']);
        }
        // validate the optional field `pendingGroupData`
        if (data['pendingGroupData']) { // data not null
          PendingGroupData.validateJSON(data['pendingGroupData']);
        }
        // validate the optional field `pendingUserData`
        if (data['pendingUserData']) { // data not null
          PendingUserData.validateJSON(data['pendingUserData']);
        }
        // ensure the json data is a string
        if (data['roomName'] && !(typeof data['roomName'] === 'string' || data['roomName'] instanceof String)) {
            throw new Error("Expected the field `roomName` to be a primitive type in the JSON string but got " + data['roomName']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `userInfo`
        if (data['userInfo']) { // data not null
          UserInfo.validateJSON(data['userInfo']);
        }

        return true;
    }


}

PendingAssignmentData.RequiredProperties = ["groupInfo", "pendingGroupData", "pendingUserData", "roomId", "roomName", "state", "userInfo"];

/**
 * @member {module:model/GroupInfo} groupInfo
 */
PendingAssignmentData.prototype['groupInfo'] = undefined;

/**
 * @member {module:model/PendingGroupData} pendingGroupData
 */
PendingAssignmentData.prototype['pendingGroupData'] = undefined;

/**
 * @member {module:model/PendingUserData} pendingUserData
 */
PendingAssignmentData.prototype['pendingUserData'] = undefined;

/**
 * Room ID
 * @member {Number} roomId
 */
PendingAssignmentData.prototype['roomId'] = undefined;

/**
 * Room name
 * @member {String} roomName
 */
PendingAssignmentData.prototype['roomName'] = undefined;

/**
 * Acceptance state:  * `ACCEPTED`  * `WAITING`  * `DENIED`
 * @member {module:model/PendingAssignmentData.StateEnum} state
 */
PendingAssignmentData.prototype['state'] = undefined;

/**
 * @member {module:model/UserInfo} userInfo
 */
PendingAssignmentData.prototype['userInfo'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PendingAssignmentData['StateEnum'] = {

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "DENIED"
     * @const
     */
    "DENIED": "DENIED",

    /**
     * value: "WAITING"
     * @const
     */
    "WAITING": "WAITING"
};



export default PendingAssignmentData;

