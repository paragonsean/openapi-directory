/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogEvent model module.
 * @module model/LogEvent
 * @version 4.42.3
 */
class LogEvent {
    /**
     * Constructs a new <code>LogEvent</code>.
     * Log event information
     * @alias module:model/LogEvent
     * @param id {Number} Event ID
     * @param message {String} Event description
     * @param time {Date} Event timestamp
     * @param userId {Number} Unique identifier for the user
     */
    constructor(id, message, time, userId) { 
        
        LogEvent.initialize(this, id, message, time, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, message, time, userId) { 
        obj['id'] = id;
        obj['message'] = message;
        obj['time'] = time;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>LogEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogEvent} obj Optional instance to populate.
     * @return {module:model/LogEvent} The populated <code>LogEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogEvent();

            if (data.hasOwnProperty('attribute1')) {
                obj['attribute1'] = ApiClient.convertToType(data['attribute1'], 'String');
            }
            if (data.hasOwnProperty('attribute2')) {
                obj['attribute2'] = ApiClient.convertToType(data['attribute2'], 'String');
            }
            if (data.hasOwnProperty('attribute3')) {
                obj['attribute3'] = ApiClient.convertToType(data['attribute3'], 'String');
            }
            if (data.hasOwnProperty('authParentSource')) {
                obj['authParentSource'] = ApiClient.convertToType(data['authParentSource'], 'String');
            }
            if (data.hasOwnProperty('authParentTarget')) {
                obj['authParentTarget'] = ApiClient.convertToType(data['authParentTarget'], 'String');
            }
            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('objectId1')) {
                obj['objectId1'] = ApiClient.convertToType(data['objectId1'], 'Number');
            }
            if (data.hasOwnProperty('objectId2')) {
                obj['objectId2'] = ApiClient.convertToType(data['objectId2'], 'Number');
            }
            if (data.hasOwnProperty('objectName1')) {
                obj['objectName1'] = ApiClient.convertToType(data['objectName1'], 'String');
            }
            if (data.hasOwnProperty('objectName2')) {
                obj['objectName2'] = ApiClient.convertToType(data['objectName2'], 'String');
            }
            if (data.hasOwnProperty('objectType1')) {
                obj['objectType1'] = ApiClient.convertToType(data['objectType1'], 'Number');
            }
            if (data.hasOwnProperty('objectType2')) {
                obj['objectType2'] = ApiClient.convertToType(data['objectType2'], 'Number');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'Number');
            }
            if (data.hasOwnProperty('operationName')) {
                obj['operationName'] = ApiClient.convertToType(data['operationName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Date');
            }
            if (data.hasOwnProperty('userClient')) {
                obj['userClient'] = ApiClient.convertToType(data['userClient'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('userIp')) {
                obj['userIp'] = ApiClient.convertToType(data['userIp'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LogEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribute1'] && !(typeof data['attribute1'] === 'string' || data['attribute1'] instanceof String)) {
            throw new Error("Expected the field `attribute1` to be a primitive type in the JSON string but got " + data['attribute1']);
        }
        // ensure the json data is a string
        if (data['attribute2'] && !(typeof data['attribute2'] === 'string' || data['attribute2'] instanceof String)) {
            throw new Error("Expected the field `attribute2` to be a primitive type in the JSON string but got " + data['attribute2']);
        }
        // ensure the json data is a string
        if (data['attribute3'] && !(typeof data['attribute3'] === 'string' || data['attribute3'] instanceof String)) {
            throw new Error("Expected the field `attribute3` to be a primitive type in the JSON string but got " + data['attribute3']);
        }
        // ensure the json data is a string
        if (data['authParentSource'] && !(typeof data['authParentSource'] === 'string' || data['authParentSource'] instanceof String)) {
            throw new Error("Expected the field `authParentSource` to be a primitive type in the JSON string but got " + data['authParentSource']);
        }
        // ensure the json data is a string
        if (data['authParentTarget'] && !(typeof data['authParentTarget'] === 'string' || data['authParentTarget'] instanceof String)) {
            throw new Error("Expected the field `authParentTarget` to be a primitive type in the JSON string but got " + data['authParentTarget']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['objectName1'] && !(typeof data['objectName1'] === 'string' || data['objectName1'] instanceof String)) {
            throw new Error("Expected the field `objectName1` to be a primitive type in the JSON string but got " + data['objectName1']);
        }
        // ensure the json data is a string
        if (data['objectName2'] && !(typeof data['objectName2'] === 'string' || data['objectName2'] instanceof String)) {
            throw new Error("Expected the field `objectName2` to be a primitive type in the JSON string but got " + data['objectName2']);
        }
        // ensure the json data is a string
        if (data['operationName'] && !(typeof data['operationName'] === 'string' || data['operationName'] instanceof String)) {
            throw new Error("Expected the field `operationName` to be a primitive type in the JSON string but got " + data['operationName']);
        }
        // ensure the json data is a string
        if (data['userClient'] && !(typeof data['userClient'] === 'string' || data['userClient'] instanceof String)) {
            throw new Error("Expected the field `userClient` to be a primitive type in the JSON string but got " + data['userClient']);
        }
        // ensure the json data is a string
        if (data['userIp'] && !(typeof data['userIp'] === 'string' || data['userIp'] instanceof String)) {
            throw new Error("Expected the field `userIp` to be a primitive type in the JSON string but got " + data['userIp']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

LogEvent.RequiredProperties = ["id", "message", "time", "userId"];

/**
 * Attribute 1
 * @member {String} attribute1
 */
LogEvent.prototype['attribute1'] = undefined;

/**
 * Attribute 2
 * @member {String} attribute2
 */
LogEvent.prototype['attribute2'] = undefined;

/**
 * Attribute 3
 * @member {String} attribute3
 */
LogEvent.prototype['attribute3'] = undefined;

/**
 * Auth parent source ID
 * @member {String} authParentSource
 */
LogEvent.prototype['authParentSource'] = undefined;

/**
 * Auth parent target ID
 * @member {String} authParentTarget
 */
LogEvent.prototype['authParentTarget'] = undefined;

/**
 * Unique identifier for the customer
 * @member {Number} customerId
 */
LogEvent.prototype['customerId'] = undefined;

/**
 * Event ID
 * @member {Number} id
 */
LogEvent.prototype['id'] = undefined;

/**
 * Event description
 * @member {String} message
 */
LogEvent.prototype['message'] = undefined;

/**
 * Object ID 1
 * @member {Number} objectId1
 */
LogEvent.prototype['objectId1'] = undefined;

/**
 * Object ID 2
 * @member {Number} objectId2
 */
LogEvent.prototype['objectId2'] = undefined;

/**
 * Object name 1
 * @member {String} objectName1
 */
LogEvent.prototype['objectName1'] = undefined;

/**
 * Object name 2
 * @member {String} objectName2
 */
LogEvent.prototype['objectName2'] = undefined;

/**
 * Object type 1
 * @member {Number} objectType1
 */
LogEvent.prototype['objectType1'] = undefined;

/**
 * Object type 2
 * @member {Number} objectType2
 */
LogEvent.prototype['objectType2'] = undefined;

/**
 * Operation type ID
 * @member {Number} operationId
 */
LogEvent.prototype['operationId'] = undefined;

/**
 * Operation name
 * @member {String} operationName
 */
LogEvent.prototype['operationName'] = undefined;

/**
 * Operation status:  * `0` - Success  * `2` - Error
 * @member {module:model/LogEvent.StatusEnum} status
 */
LogEvent.prototype['status'] = undefined;

/**
 * Event timestamp
 * @member {Date} time
 */
LogEvent.prototype['time'] = undefined;

/**
 * Client
 * @member {String} userClient
 */
LogEvent.prototype['userClient'] = undefined;

/**
 * Unique identifier for the user
 * @member {Number} userId
 */
LogEvent.prototype['userId'] = undefined;

/**
 * User IP
 * @member {String} userIp
 */
LogEvent.prototype['userIp'] = undefined;

/**
 * Username
 * @member {String} userName
 */
LogEvent.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {Number}
 * @readonly
 */
LogEvent['StatusEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 2
     * @const
     */
    "2": 2
};



export default LogEvent;

