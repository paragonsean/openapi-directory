/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyValueEntry from './KeyValueEntry';

/**
 * The UserAuthMethod model module.
 * @module model/UserAuthMethod
 * @version 4.42.3
 */
class UserAuthMethod {
    /**
     * Constructs a new <code>UserAuthMethod</code>.
     * Authentication method
     * @alias module:model/UserAuthMethod
     * @param authId {String} Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`
     * @param isEnabled {Boolean} Is enabled
     */
    constructor(authId, isEnabled) { 
        
        UserAuthMethod.initialize(this, authId, isEnabled);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authId, isEnabled) { 
        obj['authId'] = authId;
        obj['isEnabled'] = isEnabled;
    }

    /**
     * Constructs a <code>UserAuthMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserAuthMethod} obj Optional instance to populate.
     * @return {module:model/UserAuthMethod} The populated <code>UserAuthMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserAuthMethod();

            if (data.hasOwnProperty('authId')) {
                obj['authId'] = ApiClient.convertToType(data['authId'], 'String');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [KeyValueEntry]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserAuthMethod</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAuthMethod</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserAuthMethod.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authId'] && !(typeof data['authId'] === 'string' || data['authId'] instanceof String)) {
            throw new Error("Expected the field `authId` to be a primitive type in the JSON string but got " + data['authId']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                KeyValueEntry.validateJSON(item);
            };
        }

        return true;
    }


}

UserAuthMethod.RequiredProperties = ["authId", "isEnabled"];

/**
 * Authentication method    Authentication methods:  * `basic`  * `active_directory`  * `radius`  * `openid`
 * @member {String} authId
 */
UserAuthMethod.prototype['authId'] = undefined;

/**
 * Is enabled
 * @member {Boolean} isEnabled
 */
UserAuthMethod.prototype['isEnabled'] = undefined;

/**
 * Authentication method options
 * @member {Array.<module:model/KeyValueEntry>} options
 */
UserAuthMethod.prototype['options'] = undefined;






export default UserAuthMethod;

