/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoleList from './RoleList';
import UserInfo from './UserInfo';

/**
 * The Group model module.
 * @module model/Group
 * @version 4.42.3
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * Group information
     * @alias module:model/Group
     * @param cntUsers {Number} Amount of users
     * @param createdAt {Date} Creation date
     * @param createdBy {module:model/UserInfo} 
     * @param id {Number} Unique identifier for the group
     * @param name {String} Group name
     */
    constructor(cntUsers, createdAt, createdBy, id, name) { 
        
        Group.initialize(this, cntUsers, createdAt, createdBy, id, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cntUsers, createdAt, createdBy, id, name) { 
        obj['cntUsers'] = cntUsers;
        obj['createdAt'] = createdAt;
        obj['createdBy'] = createdBy;
        obj['id'] = id;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('cntUsers')) {
                obj['cntUsers'] = ApiClient.convertToType(data['cntUsers'], 'Number');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = UserInfo.constructFromObject(data['createdBy']);
            }
            if (data.hasOwnProperty('expireAt')) {
                obj['expireAt'] = ApiClient.convertToType(data['expireAt'], 'Date');
            }
            if (data.hasOwnProperty('groupRoles')) {
                obj['groupRoles'] = RoleList.constructFromObject(data['groupRoles']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedBy')) {
                obj['updatedBy'] = UserInfo.constructFromObject(data['updatedBy']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Group.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `createdBy`
        if (data['createdBy']) { // data not null
          UserInfo.validateJSON(data['createdBy']);
        }
        // validate the optional field `groupRoles`
        if (data['groupRoles']) { // data not null
          RoleList.validateJSON(data['groupRoles']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `updatedBy`
        if (data['updatedBy']) { // data not null
          UserInfo.validateJSON(data['updatedBy']);
        }

        return true;
    }


}

Group.RequiredProperties = ["cntUsers", "createdAt", "createdBy", "id", "name"];

/**
 * Amount of users
 * @member {Number} cntUsers
 */
Group.prototype['cntUsers'] = undefined;

/**
 * Creation date
 * @member {Date} createdAt
 */
Group.prototype['createdAt'] = undefined;

/**
 * @member {module:model/UserInfo} createdBy
 */
Group.prototype['createdBy'] = undefined;

/**
 * Expiration date
 * @member {Date} expireAt
 */
Group.prototype['expireAt'] = undefined;

/**
 * @member {module:model/RoleList} groupRoles
 */
Group.prototype['groupRoles'] = undefined;

/**
 * Unique identifier for the group
 * @member {Number} id
 */
Group.prototype['id'] = undefined;

/**
 * Group name
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * Modification date
 * @member {Date} updatedAt
 */
Group.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/UserInfo} updatedBy
 */
Group.prototype['updatedBy'] = undefined;






export default Group;

