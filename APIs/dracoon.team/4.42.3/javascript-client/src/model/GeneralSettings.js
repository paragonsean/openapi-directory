/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthTokenRestrictions from './AuthTokenRestrictions';

/**
 * The GeneralSettings model module.
 * @module model/GeneralSettings
 * @version 4.42.3
 */
class GeneralSettings {
    /**
     * Constructs a new <code>GeneralSettings</code>.
     * General settings
     * @alias module:model/GeneralSettings
     */
    constructor() { 
        
        GeneralSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeneralSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeneralSettings} obj Optional instance to populate.
     * @return {module:model/GeneralSettings} The populated <code>GeneralSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeneralSettings();

            if (data.hasOwnProperty('authTokenRestrictions')) {
                obj['authTokenRestrictions'] = AuthTokenRestrictions.constructFromObject(data['authTokenRestrictions']);
            }
            if (data.hasOwnProperty('cryptoEnabled')) {
                obj['cryptoEnabled'] = ApiClient.convertToType(data['cryptoEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('emailNotificationButtonEnabled')) {
                obj['emailNotificationButtonEnabled'] = ApiClient.convertToType(data['emailNotificationButtonEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('eulaEnabled')) {
                obj['eulaEnabled'] = ApiClient.convertToType(data['eulaEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('hideLoginInputFields')) {
                obj['hideLoginInputFields'] = ApiClient.convertToType(data['hideLoginInputFields'], 'Boolean');
            }
            if (data.hasOwnProperty('mediaServerEnabled')) {
                obj['mediaServerEnabled'] = ApiClient.convertToType(data['mediaServerEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('s3TagsEnabled')) {
                obj['s3TagsEnabled'] = ApiClient.convertToType(data['s3TagsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('sharePasswordSmsEnabled')) {
                obj['sharePasswordSmsEnabled'] = ApiClient.convertToType(data['sharePasswordSmsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('useS3Storage')) {
                obj['useS3Storage'] = ApiClient.convertToType(data['useS3Storage'], 'Boolean');
            }
            if (data.hasOwnProperty('weakPasswordEnabled')) {
                obj['weakPasswordEnabled'] = ApiClient.convertToType(data['weakPasswordEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeneralSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeneralSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `authTokenRestrictions`
        if (data['authTokenRestrictions']) { // data not null
          AuthTokenRestrictions.validateJSON(data['authTokenRestrictions']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuthTokenRestrictions} authTokenRestrictions
 */
GeneralSettings.prototype['authTokenRestrictions'] = undefined;

/**
 * Activation status of client-side encryption.  Can only be enabled once; disabling is not possible.
 * @member {Boolean} cryptoEnabled
 */
GeneralSettings.prototype['cryptoEnabled'] = undefined;

/**
 * Enable email notification button
 * @member {Boolean} emailNotificationButtonEnabled
 */
GeneralSettings.prototype['emailNotificationButtonEnabled'] = undefined;

/**
 * Each user has to confirm the EULA at first login.
 * @member {Boolean} eulaEnabled
 */
GeneralSettings.prototype['eulaEnabled'] = undefined;

/**
 * &#128679; Deprecated since v4.42.0  Defines if login fields should be hidden
 * @member {Boolean} hideLoginInputFields
 */
GeneralSettings.prototype['hideLoginInputFields'] = undefined;

/**
 * &#128679; Deprecated since v4.12.0  Determines if the media server is enabled
 * @member {Boolean} mediaServerEnabled
 */
GeneralSettings.prototype['mediaServerEnabled'] = undefined;

/**
 * &#128640; Since v4.9.0  Defines if S3 tags are enabled
 * @member {Boolean} s3TagsEnabled
 */
GeneralSettings.prototype['s3TagsEnabled'] = undefined;

/**
 * Allow sending of share passwords via SMS
 * @member {Boolean} sharePasswordSmsEnabled
 */
GeneralSettings.prototype['sharePasswordSmsEnabled'] = undefined;

/**
 * Defines if S3 is used as storage backend
 * @member {Boolean} useS3Storage
 */
GeneralSettings.prototype['useS3Storage'] = undefined;

/**
 * &#128679; Deprecated since v4.14.0  Allow weak password  * A weak password has to fulfill the following criteria:     * is at least 8 characters long     * contains letters and numbers  * A strong password has to fulfill the following criteria in addition:     * contains at least one special character     * contains upper and lower case characters  Please use `GET /system/config/policies/passwords` API to get configured password policies.
 * @member {Boolean} weakPasswordEnabled
 */
GeneralSettings.prototype['weakPasswordEnabled'] = undefined;






export default GeneralSettings;

