/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Infrastructure properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfrastructureProperties {
  public static final String SERIALIZED_NAME_IS_DRACOON_CLOUD = "isDracoonCloud";
  @SerializedName(SERIALIZED_NAME_IS_DRACOON_CLOUD)
  private Boolean isDracoonCloud;

  public static final String SERIALIZED_NAME_MEDIA_SERVER_CONFIG_ENABLED = "mediaServerConfigEnabled";
  @SerializedName(SERIALIZED_NAME_MEDIA_SERVER_CONFIG_ENABLED)
  private Boolean mediaServerConfigEnabled;

  public static final String SERIALIZED_NAME_S3_DEFAULT_REGION = "s3DefaultRegion";
  @SerializedName(SERIALIZED_NAME_S3_DEFAULT_REGION)
  private String s3DefaultRegion;

  public static final String SERIALIZED_NAME_S3_ENFORCE_DIRECT_UPLOAD = "s3EnforceDirectUpload";
  @SerializedName(SERIALIZED_NAME_S3_ENFORCE_DIRECT_UPLOAD)
  private Boolean s3EnforceDirectUpload;

  public static final String SERIALIZED_NAME_SMS_CONFIG_ENABLED = "smsConfigEnabled";
  @SerializedName(SERIALIZED_NAME_SMS_CONFIG_ENABLED)
  private Boolean smsConfigEnabled;

  public static final String SERIALIZED_NAME_TENANT_UUID = "tenantUuid";
  @SerializedName(SERIALIZED_NAME_TENANT_UUID)
  private String tenantUuid;

  public InfrastructureProperties() {
  }

  public InfrastructureProperties isDracoonCloud(Boolean isDracoonCloud) {
    this.isDracoonCloud = isDracoonCloud;
    return this;
  }

  /**
   * &amp;#128640; Since v4.21.0  Determines if the DRACOON Core is deployed in the cloud environment
   * @return isDracoonCloud
   */
  @javax.annotation.Nullable
  public Boolean getIsDracoonCloud() {
    return isDracoonCloud;
  }

  public void setIsDracoonCloud(Boolean isDracoonCloud) {
    this.isDracoonCloud = isDracoonCloud;
  }


  public InfrastructureProperties mediaServerConfigEnabled(Boolean mediaServerConfigEnabled) {
    this.mediaServerConfigEnabled = mediaServerConfigEnabled;
    return this;
  }

  /**
   * Determines if the media server is enabled
   * @return mediaServerConfigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMediaServerConfigEnabled() {
    return mediaServerConfigEnabled;
  }

  public void setMediaServerConfigEnabled(Boolean mediaServerConfigEnabled) {
    this.mediaServerConfigEnabled = mediaServerConfigEnabled;
  }


  public InfrastructureProperties s3DefaultRegion(String s3DefaultRegion) {
    this.s3DefaultRegion = s3DefaultRegion;
    return this;
  }

  /**
   * Suggested S3 Region
   * @return s3DefaultRegion
   */
  @javax.annotation.Nullable
  public String getS3DefaultRegion() {
    return s3DefaultRegion;
  }

  public void setS3DefaultRegion(String s3DefaultRegion) {
    this.s3DefaultRegion = s3DefaultRegion;
  }


  public InfrastructureProperties s3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
    return this;
  }

  /**
   * &amp;#128640; Since v4.15.0  Enforce direct upload to S3
   * @return s3EnforceDirectUpload
   */
  @javax.annotation.Nullable
  public Boolean getS3EnforceDirectUpload() {
    return s3EnforceDirectUpload;
  }

  public void setS3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
  }


  public InfrastructureProperties smsConfigEnabled(Boolean smsConfigEnabled) {
    this.smsConfigEnabled = smsConfigEnabled;
    return this;
  }

  /**
   * Allow sending of share passwords via SMS
   * @return smsConfigEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSmsConfigEnabled() {
    return smsConfigEnabled;
  }

  public void setSmsConfigEnabled(Boolean smsConfigEnabled) {
    this.smsConfigEnabled = smsConfigEnabled;
  }


  public InfrastructureProperties tenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
    return this;
  }

  /**
   * &amp;#128640; Since v4.21.0  Current tenant UUID
   * @return tenantUuid
   */
  @javax.annotation.Nullable
  public String getTenantUuid() {
    return tenantUuid;
  }

  public void setTenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfrastructureProperties infrastructureProperties = (InfrastructureProperties) o;
    return Objects.equals(this.isDracoonCloud, infrastructureProperties.isDracoonCloud) &&
        Objects.equals(this.mediaServerConfigEnabled, infrastructureProperties.mediaServerConfigEnabled) &&
        Objects.equals(this.s3DefaultRegion, infrastructureProperties.s3DefaultRegion) &&
        Objects.equals(this.s3EnforceDirectUpload, infrastructureProperties.s3EnforceDirectUpload) &&
        Objects.equals(this.smsConfigEnabled, infrastructureProperties.smsConfigEnabled) &&
        Objects.equals(this.tenantUuid, infrastructureProperties.tenantUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isDracoonCloud, mediaServerConfigEnabled, s3DefaultRegion, s3EnforceDirectUpload, smsConfigEnabled, tenantUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfrastructureProperties {\n");
    sb.append("    isDracoonCloud: ").append(toIndentedString(isDracoonCloud)).append("\n");
    sb.append("    mediaServerConfigEnabled: ").append(toIndentedString(mediaServerConfigEnabled)).append("\n");
    sb.append("    s3DefaultRegion: ").append(toIndentedString(s3DefaultRegion)).append("\n");
    sb.append("    s3EnforceDirectUpload: ").append(toIndentedString(s3EnforceDirectUpload)).append("\n");
    sb.append("    smsConfigEnabled: ").append(toIndentedString(smsConfigEnabled)).append("\n");
    sb.append("    tenantUuid: ").append(toIndentedString(tenantUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isDracoonCloud");
    openapiFields.add("mediaServerConfigEnabled");
    openapiFields.add("s3DefaultRegion");
    openapiFields.add("s3EnforceDirectUpload");
    openapiFields.add("smsConfigEnabled");
    openapiFields.add("tenantUuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfrastructureProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfrastructureProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfrastructureProperties is not found in the empty JSON string", InfrastructureProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfrastructureProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfrastructureProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("s3DefaultRegion") != null && !jsonObj.get("s3DefaultRegion").isJsonNull()) && !jsonObj.get("s3DefaultRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3DefaultRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3DefaultRegion").toString()));
      }
      if ((jsonObj.get("tenantUuid") != null && !jsonObj.get("tenantUuid").isJsonNull()) && !jsonObj.get("tenantUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantUuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfrastructureProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfrastructureProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfrastructureProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfrastructureProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<InfrastructureProperties>() {
           @Override
           public void write(JsonWriter out, InfrastructureProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfrastructureProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfrastructureProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfrastructureProperties
   * @throws IOException if the JSON string is invalid with respect to InfrastructureProperties
   */
  public static InfrastructureProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfrastructureProperties.class);
  }

  /**
   * Convert an instance of InfrastructureProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

