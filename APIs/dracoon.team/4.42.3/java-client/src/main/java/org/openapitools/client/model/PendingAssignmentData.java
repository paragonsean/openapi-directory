/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GroupInfo;
import org.openapitools.client.model.PendingGroupData;
import org.openapitools.client.model.PendingUserData;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pending assignment information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PendingAssignmentData {
  public static final String SERIALIZED_NAME_GROUP_INFO = "groupInfo";
  @SerializedName(SERIALIZED_NAME_GROUP_INFO)
  private GroupInfo groupInfo;

  public static final String SERIALIZED_NAME_PENDING_GROUP_DATA = "pendingGroupData";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PENDING_GROUP_DATA)
  private PendingGroupData pendingGroupData;

  public static final String SERIALIZED_NAME_PENDING_USER_DATA = "pendingUserData";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PENDING_USER_DATA)
  private PendingUserData pendingUserData;

  public static final String SERIALIZED_NAME_ROOM_ID = "roomId";
  @SerializedName(SERIALIZED_NAME_ROOM_ID)
  private Long roomId;

  public static final String SERIALIZED_NAME_ROOM_NAME = "roomName";
  @SerializedName(SERIALIZED_NAME_ROOM_NAME)
  private String roomName;

  /**
   * Acceptance state:  * &#x60;ACCEPTED&#x60;  * &#x60;WAITING&#x60;  * &#x60;DENIED&#x60;
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACCEPTED("ACCEPTED"),
    
    DENIED("DENIED"),
    
    WAITING("WAITING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_USER_INFO = "userInfo";
  @SerializedName(SERIALIZED_NAME_USER_INFO)
  private UserInfo userInfo;

  public PendingAssignmentData() {
  }

  public PendingAssignmentData groupInfo(GroupInfo groupInfo) {
    this.groupInfo = groupInfo;
    return this;
  }

  /**
   * Get groupInfo
   * @return groupInfo
   */
  @javax.annotation.Nonnull
  public GroupInfo getGroupInfo() {
    return groupInfo;
  }

  public void setGroupInfo(GroupInfo groupInfo) {
    this.groupInfo = groupInfo;
  }


  @Deprecated
  public PendingAssignmentData pendingGroupData(PendingGroupData pendingGroupData) {
    this.pendingGroupData = pendingGroupData;
    return this;
  }

  /**
   * Get pendingGroupData
   * @return pendingGroupData
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public PendingGroupData getPendingGroupData() {
    return pendingGroupData;
  }

  @Deprecated
  public void setPendingGroupData(PendingGroupData pendingGroupData) {
    this.pendingGroupData = pendingGroupData;
  }


  @Deprecated
  public PendingAssignmentData pendingUserData(PendingUserData pendingUserData) {
    this.pendingUserData = pendingUserData;
    return this;
  }

  /**
   * Get pendingUserData
   * @return pendingUserData
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public PendingUserData getPendingUserData() {
    return pendingUserData;
  }

  @Deprecated
  public void setPendingUserData(PendingUserData pendingUserData) {
    this.pendingUserData = pendingUserData;
  }


  public PendingAssignmentData roomId(Long roomId) {
    this.roomId = roomId;
    return this;
  }

  /**
   * Room ID
   * @return roomId
   */
  @javax.annotation.Nonnull
  public Long getRoomId() {
    return roomId;
  }

  public void setRoomId(Long roomId) {
    this.roomId = roomId;
  }


  public PendingAssignmentData roomName(String roomName) {
    this.roomName = roomName;
    return this;
  }

  /**
   * Room name
   * @return roomName
   */
  @javax.annotation.Nonnull
  public String getRoomName() {
    return roomName;
  }

  public void setRoomName(String roomName) {
    this.roomName = roomName;
  }


  public PendingAssignmentData state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Acceptance state:  * &#x60;ACCEPTED&#x60;  * &#x60;WAITING&#x60;  * &#x60;DENIED&#x60;
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public PendingAssignmentData userInfo(UserInfo userInfo) {
    this.userInfo = userInfo;
    return this;
  }

  /**
   * Get userInfo
   * @return userInfo
   */
  @javax.annotation.Nonnull
  public UserInfo getUserInfo() {
    return userInfo;
  }

  public void setUserInfo(UserInfo userInfo) {
    this.userInfo = userInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PendingAssignmentData pendingAssignmentData = (PendingAssignmentData) o;
    return Objects.equals(this.groupInfo, pendingAssignmentData.groupInfo) &&
        Objects.equals(this.pendingGroupData, pendingAssignmentData.pendingGroupData) &&
        Objects.equals(this.pendingUserData, pendingAssignmentData.pendingUserData) &&
        Objects.equals(this.roomId, pendingAssignmentData.roomId) &&
        Objects.equals(this.roomName, pendingAssignmentData.roomName) &&
        Objects.equals(this.state, pendingAssignmentData.state) &&
        Objects.equals(this.userInfo, pendingAssignmentData.userInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(groupInfo, pendingGroupData, pendingUserData, roomId, roomName, state, userInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PendingAssignmentData {\n");
    sb.append("    groupInfo: ").append(toIndentedString(groupInfo)).append("\n");
    sb.append("    pendingGroupData: ").append(toIndentedString(pendingGroupData)).append("\n");
    sb.append("    pendingUserData: ").append(toIndentedString(pendingUserData)).append("\n");
    sb.append("    roomId: ").append(toIndentedString(roomId)).append("\n");
    sb.append("    roomName: ").append(toIndentedString(roomName)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userInfo: ").append(toIndentedString(userInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("groupInfo");
    openapiFields.add("pendingGroupData");
    openapiFields.add("pendingUserData");
    openapiFields.add("roomId");
    openapiFields.add("roomName");
    openapiFields.add("state");
    openapiFields.add("userInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("groupInfo");
    openapiRequiredFields.add("pendingGroupData");
    openapiRequiredFields.add("pendingUserData");
    openapiRequiredFields.add("roomId");
    openapiRequiredFields.add("roomName");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("userInfo");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PendingAssignmentData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PendingAssignmentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PendingAssignmentData is not found in the empty JSON string", PendingAssignmentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PendingAssignmentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PendingAssignmentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PendingAssignmentData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `groupInfo`
      GroupInfo.validateJsonElement(jsonObj.get("groupInfo"));
      // validate the required field `pendingGroupData`
      PendingGroupData.validateJsonElement(jsonObj.get("pendingGroupData"));
      // validate the required field `pendingUserData`
      PendingUserData.validateJsonElement(jsonObj.get("pendingUserData"));
      if (!jsonObj.get("roomName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `roomName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("roomName").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      // validate the required field `userInfo`
      UserInfo.validateJsonElement(jsonObj.get("userInfo"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PendingAssignmentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PendingAssignmentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PendingAssignmentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PendingAssignmentData.class));

       return (TypeAdapter<T>) new TypeAdapter<PendingAssignmentData>() {
           @Override
           public void write(JsonWriter out, PendingAssignmentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PendingAssignmentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PendingAssignmentData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PendingAssignmentData
   * @throws IOException if the JSON string is invalid with respect to PendingAssignmentData
   */
  public static PendingAssignmentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PendingAssignmentData.class);
  }

  /**
   * Convert an instance of PendingAssignmentData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

