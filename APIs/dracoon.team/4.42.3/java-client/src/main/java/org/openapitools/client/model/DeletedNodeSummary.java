/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deleted node information (Deleted node can be a folder or file)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeletedNodeSummary {
  public static final String SERIALIZED_NAME_CNT_VERSIONS = "cntVersions";
  @SerializedName(SERIALIZED_NAME_CNT_VERSIONS)
  private Integer cntVersions;

  public static final String SERIALIZED_NAME_FIRST_DELETED_AT = "firstDeletedAt";
  @SerializedName(SERIALIZED_NAME_FIRST_DELETED_AT)
  private OffsetDateTime firstDeletedAt;

  public static final String SERIALIZED_NAME_LAST_DELETED_AT = "lastDeletedAt";
  @SerializedName(SERIALIZED_NAME_LAST_DELETED_AT)
  private OffsetDateTime lastDeletedAt;

  public static final String SERIALIZED_NAME_LAST_DELETED_NODE_ID = "lastDeletedNodeId";
  @SerializedName(SERIALIZED_NAME_LAST_DELETED_NODE_ID)
  private Long lastDeletedNodeId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Long parentId;

  public static final String SERIALIZED_NAME_PARENT_PATH = "parentPath";
  @SerializedName(SERIALIZED_NAME_PARENT_PATH)
  private String parentPath;

  public static final String SERIALIZED_NAME_REFERENCE_ID = "referenceId";
  @SerializedName(SERIALIZED_NAME_REFERENCE_ID)
  private Long referenceId;

  public static final String SERIALIZED_NAME_TIMESTAMP_CREATION = "timestampCreation";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_CREATION)
  private OffsetDateTime timestampCreation;

  public static final String SERIALIZED_NAME_TIMESTAMP_MODIFICATION = "timestampModification";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MODIFICATION)
  private OffsetDateTime timestampModification;

  /**
   * Node type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FOLDER("folder"),
    
    FILE("file");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DeletedNodeSummary() {
  }

  public DeletedNodeSummary cntVersions(Integer cntVersions) {
    this.cntVersions = cntVersions;
    return this;
  }

  /**
   * Number of deleted versions of this file
   * @return cntVersions
   */
  @javax.annotation.Nonnull
  public Integer getCntVersions() {
    return cntVersions;
  }

  public void setCntVersions(Integer cntVersions) {
    this.cntVersions = cntVersions;
  }


  public DeletedNodeSummary firstDeletedAt(OffsetDateTime firstDeletedAt) {
    this.firstDeletedAt = firstDeletedAt;
    return this;
  }

  /**
   * First deleted version
   * @return firstDeletedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFirstDeletedAt() {
    return firstDeletedAt;
  }

  public void setFirstDeletedAt(OffsetDateTime firstDeletedAt) {
    this.firstDeletedAt = firstDeletedAt;
  }


  public DeletedNodeSummary lastDeletedAt(OffsetDateTime lastDeletedAt) {
    this.lastDeletedAt = lastDeletedAt;
    return this;
  }

  /**
   * Last deleted version
   * @return lastDeletedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastDeletedAt() {
    return lastDeletedAt;
  }

  public void setLastDeletedAt(OffsetDateTime lastDeletedAt) {
    this.lastDeletedAt = lastDeletedAt;
  }


  public DeletedNodeSummary lastDeletedNodeId(Long lastDeletedNodeId) {
    this.lastDeletedNodeId = lastDeletedNodeId;
    return this;
  }

  /**
   * Node ID of last deleted version
   * @return lastDeletedNodeId
   */
  @javax.annotation.Nonnull
  public Long getLastDeletedNodeId() {
    return lastDeletedNodeId;
  }

  public void setLastDeletedNodeId(Long lastDeletedNodeId) {
    this.lastDeletedNodeId = lastDeletedNodeId;
  }


  public DeletedNodeSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Node name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DeletedNodeSummary parentId(Long parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent node ID (room or folder)
   * @return parentId
   */
  @javax.annotation.Nonnull
  public Long getParentId() {
    return parentId;
  }

  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }


  public DeletedNodeSummary parentPath(String parentPath) {
    this.parentPath = parentPath;
    return this;
  }

  /**
   * Parent node path  &#x60;/&#x60; if node is a root node (room)
   * @return parentPath
   */
  @javax.annotation.Nonnull
  public String getParentPath() {
    return parentPath;
  }

  public void setParentPath(String parentPath) {
    this.parentPath = parentPath;
  }


  public DeletedNodeSummary referenceId(Long referenceId) {
    this.referenceId = referenceId;
    return this;
  }

  /**
   * &amp;#128640; Since v4.37.0  Reference ID. Identical across all versions of a file
   * @return referenceId
   */
  @javax.annotation.Nullable
  public Long getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(Long referenceId) {
    this.referenceId = referenceId;
  }


  public DeletedNodeSummary timestampCreation(OffsetDateTime timestampCreation) {
    this.timestampCreation = timestampCreation;
    return this;
  }

  /**
   * &amp;#128640; Since v4.22.0  Time the node was created on external file system
   * @return timestampCreation
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestampCreation() {
    return timestampCreation;
  }

  public void setTimestampCreation(OffsetDateTime timestampCreation) {
    this.timestampCreation = timestampCreation;
  }


  public DeletedNodeSummary timestampModification(OffsetDateTime timestampModification) {
    this.timestampModification = timestampModification;
    return this;
  }

  /**
   * &amp;#128640; Since v4.22.0  Time the content of a node was last modified on external file system
   * @return timestampModification
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestampModification() {
    return timestampModification;
  }

  public void setTimestampModification(OffsetDateTime timestampModification) {
    this.timestampModification = timestampModification;
  }


  public DeletedNodeSummary type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Node type
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeletedNodeSummary deletedNodeSummary = (DeletedNodeSummary) o;
    return Objects.equals(this.cntVersions, deletedNodeSummary.cntVersions) &&
        Objects.equals(this.firstDeletedAt, deletedNodeSummary.firstDeletedAt) &&
        Objects.equals(this.lastDeletedAt, deletedNodeSummary.lastDeletedAt) &&
        Objects.equals(this.lastDeletedNodeId, deletedNodeSummary.lastDeletedNodeId) &&
        Objects.equals(this.name, deletedNodeSummary.name) &&
        Objects.equals(this.parentId, deletedNodeSummary.parentId) &&
        Objects.equals(this.parentPath, deletedNodeSummary.parentPath) &&
        Objects.equals(this.referenceId, deletedNodeSummary.referenceId) &&
        Objects.equals(this.timestampCreation, deletedNodeSummary.timestampCreation) &&
        Objects.equals(this.timestampModification, deletedNodeSummary.timestampModification) &&
        Objects.equals(this.type, deletedNodeSummary.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cntVersions, firstDeletedAt, lastDeletedAt, lastDeletedNodeId, name, parentId, parentPath, referenceId, timestampCreation, timestampModification, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeletedNodeSummary {\n");
    sb.append("    cntVersions: ").append(toIndentedString(cntVersions)).append("\n");
    sb.append("    firstDeletedAt: ").append(toIndentedString(firstDeletedAt)).append("\n");
    sb.append("    lastDeletedAt: ").append(toIndentedString(lastDeletedAt)).append("\n");
    sb.append("    lastDeletedNodeId: ").append(toIndentedString(lastDeletedNodeId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    parentPath: ").append(toIndentedString(parentPath)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    timestampCreation: ").append(toIndentedString(timestampCreation)).append("\n");
    sb.append("    timestampModification: ").append(toIndentedString(timestampModification)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cntVersions");
    openapiFields.add("firstDeletedAt");
    openapiFields.add("lastDeletedAt");
    openapiFields.add("lastDeletedNodeId");
    openapiFields.add("name");
    openapiFields.add("parentId");
    openapiFields.add("parentPath");
    openapiFields.add("referenceId");
    openapiFields.add("timestampCreation");
    openapiFields.add("timestampModification");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cntVersions");
    openapiRequiredFields.add("firstDeletedAt");
    openapiRequiredFields.add("lastDeletedAt");
    openapiRequiredFields.add("lastDeletedNodeId");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parentId");
    openapiRequiredFields.add("parentPath");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeletedNodeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeletedNodeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeletedNodeSummary is not found in the empty JSON string", DeletedNodeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeletedNodeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeletedNodeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeletedNodeSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("parentPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentPath").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeletedNodeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeletedNodeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeletedNodeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeletedNodeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<DeletedNodeSummary>() {
           @Override
           public void write(JsonWriter out, DeletedNodeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeletedNodeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeletedNodeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeletedNodeSummary
   * @throws IOException if the JSON string is invalid with respect to DeletedNodeSummary
   */
  public static DeletedNodeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeletedNodeSummary.class);
  }

  /**
   * Convert an instance of DeletedNodeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

