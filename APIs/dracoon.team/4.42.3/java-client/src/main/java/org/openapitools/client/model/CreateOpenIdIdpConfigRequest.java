/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for creating an OpenID Connect IDP configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateOpenIdIdpConfigRequest {
  public static final String SERIALIZED_NAME_AUTHORIZATION_END_POINT_URL = "authorizationEndPointUrl";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_END_POINT_URL)
  private String authorizationEndPointUrl;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_FALLBACK_MAPPING_CLAIM = "fallbackMappingClaim";
  @SerializedName(SERIALIZED_NAME_FALLBACK_MAPPING_CLAIM)
  private String fallbackMappingClaim;

  /**
   * &amp;#128640; Since v4.11.0  Flow, which is used at authentication
   */
  @JsonAdapter(FlowEnum.Adapter.class)
  public enum FlowEnum {
    AUTHORIZATION_CODE("authorization_code"),
    
    HYBRID("hybrid");

    private String value;

    FlowEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlowEnum fromValue(String value) {
      for (FlowEnum b : FlowEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlowEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlowEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlowEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlowEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FlowEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FLOW = "flow";
  @SerializedName(SERIALIZED_NAME_FLOW)
  private FlowEnum flow;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_END_POINT_URL = "jwksEndPointUrl";
  @SerializedName(SERIALIZED_NAME_JWKS_END_POINT_URL)
  private String jwksEndPointUrl;

  public static final String SERIALIZED_NAME_MAPPING_CLAIM = "mappingClaim";
  @SerializedName(SERIALIZED_NAME_MAPPING_CLAIM)
  private String mappingClaim;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PKCE_CHALLENGE_METHOD = "pkceChallengeMethod";
  @SerializedName(SERIALIZED_NAME_PKCE_CHALLENGE_METHOD)
  private String pkceChallengeMethod = "plain";

  public static final String SERIALIZED_NAME_PKCE_ENABLED = "pkceEnabled";
  @SerializedName(SERIALIZED_NAME_PKCE_ENABLED)
  private Boolean pkceEnabled = false;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOKEN_END_POINT_URL = "tokenEndPointUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_END_POINT_URL)
  private String tokenEndPointUrl;

  public static final String SERIALIZED_NAME_USER_IMPORT_ENABLED = "userImportEnabled";
  @SerializedName(SERIALIZED_NAME_USER_IMPORT_ENABLED)
  private Boolean userImportEnabled = false;

  public static final String SERIALIZED_NAME_USER_IMPORT_GROUP = "userImportGroup";
  @SerializedName(SERIALIZED_NAME_USER_IMPORT_GROUP)
  private Long userImportGroup;

  public static final String SERIALIZED_NAME_USER_INFO_END_POINT_URL = "userInfoEndPointUrl";
  @SerializedName(SERIALIZED_NAME_USER_INFO_END_POINT_URL)
  private String userInfoEndPointUrl;

  /**
   * &amp;#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.
   */
  @JsonAdapter(UserInfoSourceEnum.Adapter.class)
  public enum UserInfoSourceEnum {
    USER_INFO_ENDPOINT("user_info_endpoint"),
    
    ID_TOKEN("id_token");

    private String value;

    UserInfoSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserInfoSourceEnum fromValue(String value) {
      for (UserInfoSourceEnum b : UserInfoSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserInfoSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserInfoSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserInfoSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserInfoSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserInfoSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_INFO_SOURCE = "userInfoSource";
  @SerializedName(SERIALIZED_NAME_USER_INFO_SOURCE)
  private UserInfoSourceEnum userInfoSource;

  public static final String SERIALIZED_NAME_USER_MANAGEMENT_URL = "userManagementUrl";
  @SerializedName(SERIALIZED_NAME_USER_MANAGEMENT_URL)
  private String userManagementUrl;

  public static final String SERIALIZED_NAME_USER_UPDATE_ENABLED = "userUpdateEnabled";
  @SerializedName(SERIALIZED_NAME_USER_UPDATE_ENABLED)
  private Boolean userUpdateEnabled = false;

  public CreateOpenIdIdpConfigRequest() {
  }

  public CreateOpenIdIdpConfigRequest authorizationEndPointUrl(String authorizationEndPointUrl) {
    this.authorizationEndPointUrl = authorizationEndPointUrl;
    return this;
  }

  /**
   * URL of the authorization endpoint
   * @return authorizationEndPointUrl
   */
  @javax.annotation.Nonnull
  public String getAuthorizationEndPointUrl() {
    return authorizationEndPointUrl;
  }

  public void setAuthorizationEndPointUrl(String authorizationEndPointUrl) {
    this.authorizationEndPointUrl = authorizationEndPointUrl;
  }


  public CreateOpenIdIdpConfigRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * ID of the OpenID client
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public CreateOpenIdIdpConfigRequest clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Secret, which client uses at authentication.
   * @return clientSecret
   */
  @javax.annotation.Nonnull
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public CreateOpenIdIdpConfigRequest fallbackMappingClaim(String fallbackMappingClaim) {
    this.fallbackMappingClaim = fallbackMappingClaim;
    return this;
  }

  /**
   * Name of the claim which is used for the user mapping fallback.
   * @return fallbackMappingClaim
   */
  @javax.annotation.Nullable
  public String getFallbackMappingClaim() {
    return fallbackMappingClaim;
  }

  public void setFallbackMappingClaim(String fallbackMappingClaim) {
    this.fallbackMappingClaim = fallbackMappingClaim;
  }


  public CreateOpenIdIdpConfigRequest flow(FlowEnum flow) {
    this.flow = flow;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Flow, which is used at authentication
   * @return flow
   */
  @javax.annotation.Nullable
  public FlowEnum getFlow() {
    return flow;
  }

  public void setFlow(FlowEnum flow) {
    this.flow = flow;
  }


  public CreateOpenIdIdpConfigRequest issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Issuer identifier of the IDP  The value is a case sensitive URL.
   * @return issuer
   */
  @javax.annotation.Nonnull
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public CreateOpenIdIdpConfigRequest jwksEndPointUrl(String jwksEndPointUrl) {
    this.jwksEndPointUrl = jwksEndPointUrl;
    return this;
  }

  /**
   * URL of the JWKS endpoint
   * @return jwksEndPointUrl
   */
  @javax.annotation.Nonnull
  public String getJwksEndPointUrl() {
    return jwksEndPointUrl;
  }

  public void setJwksEndPointUrl(String jwksEndPointUrl) {
    this.jwksEndPointUrl = jwksEndPointUrl;
  }


  public CreateOpenIdIdpConfigRequest mappingClaim(String mappingClaim) {
    this.mappingClaim = mappingClaim;
    return this;
  }

  /**
   * Name of the claim which is used for the user mapping.
   * @return mappingClaim
   */
  @javax.annotation.Nonnull
  public String getMappingClaim() {
    return mappingClaim;
  }

  public void setMappingClaim(String mappingClaim) {
    this.mappingClaim = mappingClaim;
  }


  public CreateOpenIdIdpConfigRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the IDP
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateOpenIdIdpConfigRequest pkceChallengeMethod(String pkceChallengeMethod) {
    this.pkceChallengeMethod = pkceChallengeMethod;
    return this;
  }

  /**
   * PKCE code challenge method.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
   * @return pkceChallengeMethod
   */
  @javax.annotation.Nullable
  public String getPkceChallengeMethod() {
    return pkceChallengeMethod;
  }

  public void setPkceChallengeMethod(String pkceChallengeMethod) {
    this.pkceChallengeMethod = pkceChallengeMethod;
  }


  public CreateOpenIdIdpConfigRequest pkceEnabled(Boolean pkceEnabled) {
    this.pkceEnabled = pkceEnabled;
    return this;
  }

  /**
   * Determines whether PKCE is enabled.  cf. [RFC 7636](https://tools.ietf.org/html/rfc7636)
   * @return pkceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPkceEnabled() {
    return pkceEnabled;
  }

  public void setPkceEnabled(Boolean pkceEnabled) {
    this.pkceEnabled = pkceEnabled;
  }


  public CreateOpenIdIdpConfigRequest redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public CreateOpenIdIdpConfigRequest addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * URIs, to which a user is redirected after authorization.
   * @return redirectUris
   */
  @javax.annotation.Nonnull
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public CreateOpenIdIdpConfigRequest scopes(List<String> scopes) {
    this.scopes = scopes;
    return this;
  }

  public CreateOpenIdIdpConfigRequest addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

  /**
   * List of requested scopes
   * @return scopes
   */
  @javax.annotation.Nonnull
  public List<String> getScopes() {
    return scopes;
  }

  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public CreateOpenIdIdpConfigRequest tokenEndPointUrl(String tokenEndPointUrl) {
    this.tokenEndPointUrl = tokenEndPointUrl;
    return this;
  }

  /**
   * URL of the token endpoint
   * @return tokenEndPointUrl
   */
  @javax.annotation.Nonnull
  public String getTokenEndPointUrl() {
    return tokenEndPointUrl;
  }

  public void setTokenEndPointUrl(String tokenEndPointUrl) {
    this.tokenEndPointUrl = tokenEndPointUrl;
  }


  public CreateOpenIdIdpConfigRequest userImportEnabled(Boolean userImportEnabled) {
    this.userImportEnabled = userImportEnabled;
    return this;
  }

  /**
   * Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
   * @return userImportEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUserImportEnabled() {
    return userImportEnabled;
  }

  public void setUserImportEnabled(Boolean userImportEnabled) {
    this.userImportEnabled = userImportEnabled;
  }


  public CreateOpenIdIdpConfigRequest userImportGroup(Long userImportGroup) {
    this.userImportGroup = userImportGroup;
    return this;
  }

  /**
   * User group that is assigned to users who are created by automatic import.  Reset with &#x60;0&#x60;
   * @return userImportGroup
   */
  @javax.annotation.Nullable
  public Long getUserImportGroup() {
    return userImportGroup;
  }

  public void setUserImportGroup(Long userImportGroup) {
    this.userImportGroup = userImportGroup;
  }


  public CreateOpenIdIdpConfigRequest userInfoEndPointUrl(String userInfoEndPointUrl) {
    this.userInfoEndPointUrl = userInfoEndPointUrl;
    return this;
  }

  /**
   * URL of the user info endpoint
   * @return userInfoEndPointUrl
   */
  @javax.annotation.Nonnull
  public String getUserInfoEndPointUrl() {
    return userInfoEndPointUrl;
  }

  public void setUserInfoEndPointUrl(String userInfoEndPointUrl) {
    this.userInfoEndPointUrl = userInfoEndPointUrl;
  }


  public CreateOpenIdIdpConfigRequest userInfoSource(UserInfoSourceEnum userInfoSource) {
    this.userInfoSource = userInfoSource;
    return this;
  }

  /**
   * &amp;#128640; Since v4.23.0  Source, which is used to get user information at the import or update of a user.
   * @return userInfoSource
   */
  @javax.annotation.Nullable
  public UserInfoSourceEnum getUserInfoSource() {
    return userInfoSource;
  }

  public void setUserInfoSource(UserInfoSourceEnum userInfoSource) {
    this.userInfoSource = userInfoSource;
  }


  public CreateOpenIdIdpConfigRequest userManagementUrl(String userManagementUrl) {
    this.userManagementUrl = userManagementUrl;
    return this;
  }

  /**
   * URL of the user management UI.  Use empty string to remove.
   * @return userManagementUrl
   */
  @javax.annotation.Nullable
  public String getUserManagementUrl() {
    return userManagementUrl;
  }

  public void setUserManagementUrl(String userManagementUrl) {
    this.userManagementUrl = userManagementUrl;
  }


  public CreateOpenIdIdpConfigRequest userUpdateEnabled(Boolean userUpdateEnabled) {
    this.userUpdateEnabled = userUpdateEnabled;
    return this;
  }

  /**
   * Determines if the DRACOON account is updated with data from AD / IDP.  For OpenID Connect, the scopes &#x60;email&#x60; and &#x60;profile&#x60; are needed.
   * @return userUpdateEnabled
   */
  @javax.annotation.Nullable
  public Boolean getUserUpdateEnabled() {
    return userUpdateEnabled;
  }

  public void setUserUpdateEnabled(Boolean userUpdateEnabled) {
    this.userUpdateEnabled = userUpdateEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateOpenIdIdpConfigRequest createOpenIdIdpConfigRequest = (CreateOpenIdIdpConfigRequest) o;
    return Objects.equals(this.authorizationEndPointUrl, createOpenIdIdpConfigRequest.authorizationEndPointUrl) &&
        Objects.equals(this.clientId, createOpenIdIdpConfigRequest.clientId) &&
        Objects.equals(this.clientSecret, createOpenIdIdpConfigRequest.clientSecret) &&
        Objects.equals(this.fallbackMappingClaim, createOpenIdIdpConfigRequest.fallbackMappingClaim) &&
        Objects.equals(this.flow, createOpenIdIdpConfigRequest.flow) &&
        Objects.equals(this.issuer, createOpenIdIdpConfigRequest.issuer) &&
        Objects.equals(this.jwksEndPointUrl, createOpenIdIdpConfigRequest.jwksEndPointUrl) &&
        Objects.equals(this.mappingClaim, createOpenIdIdpConfigRequest.mappingClaim) &&
        Objects.equals(this.name, createOpenIdIdpConfigRequest.name) &&
        Objects.equals(this.pkceChallengeMethod, createOpenIdIdpConfigRequest.pkceChallengeMethod) &&
        Objects.equals(this.pkceEnabled, createOpenIdIdpConfigRequest.pkceEnabled) &&
        Objects.equals(this.redirectUris, createOpenIdIdpConfigRequest.redirectUris) &&
        Objects.equals(this.scopes, createOpenIdIdpConfigRequest.scopes) &&
        Objects.equals(this.tokenEndPointUrl, createOpenIdIdpConfigRequest.tokenEndPointUrl) &&
        Objects.equals(this.userImportEnabled, createOpenIdIdpConfigRequest.userImportEnabled) &&
        Objects.equals(this.userImportGroup, createOpenIdIdpConfigRequest.userImportGroup) &&
        Objects.equals(this.userInfoEndPointUrl, createOpenIdIdpConfigRequest.userInfoEndPointUrl) &&
        Objects.equals(this.userInfoSource, createOpenIdIdpConfigRequest.userInfoSource) &&
        Objects.equals(this.userManagementUrl, createOpenIdIdpConfigRequest.userManagementUrl) &&
        Objects.equals(this.userUpdateEnabled, createOpenIdIdpConfigRequest.userUpdateEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizationEndPointUrl, clientId, clientSecret, fallbackMappingClaim, flow, issuer, jwksEndPointUrl, mappingClaim, name, pkceChallengeMethod, pkceEnabled, redirectUris, scopes, tokenEndPointUrl, userImportEnabled, userImportGroup, userInfoEndPointUrl, userInfoSource, userManagementUrl, userUpdateEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateOpenIdIdpConfigRequest {\n");
    sb.append("    authorizationEndPointUrl: ").append(toIndentedString(authorizationEndPointUrl)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    fallbackMappingClaim: ").append(toIndentedString(fallbackMappingClaim)).append("\n");
    sb.append("    flow: ").append(toIndentedString(flow)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksEndPointUrl: ").append(toIndentedString(jwksEndPointUrl)).append("\n");
    sb.append("    mappingClaim: ").append(toIndentedString(mappingClaim)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pkceChallengeMethod: ").append(toIndentedString(pkceChallengeMethod)).append("\n");
    sb.append("    pkceEnabled: ").append(toIndentedString(pkceEnabled)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    tokenEndPointUrl: ").append(toIndentedString(tokenEndPointUrl)).append("\n");
    sb.append("    userImportEnabled: ").append(toIndentedString(userImportEnabled)).append("\n");
    sb.append("    userImportGroup: ").append(toIndentedString(userImportGroup)).append("\n");
    sb.append("    userInfoEndPointUrl: ").append(toIndentedString(userInfoEndPointUrl)).append("\n");
    sb.append("    userInfoSource: ").append(toIndentedString(userInfoSource)).append("\n");
    sb.append("    userManagementUrl: ").append(toIndentedString(userManagementUrl)).append("\n");
    sb.append("    userUpdateEnabled: ").append(toIndentedString(userUpdateEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizationEndPointUrl");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("fallbackMappingClaim");
    openapiFields.add("flow");
    openapiFields.add("issuer");
    openapiFields.add("jwksEndPointUrl");
    openapiFields.add("mappingClaim");
    openapiFields.add("name");
    openapiFields.add("pkceChallengeMethod");
    openapiFields.add("pkceEnabled");
    openapiFields.add("redirectUris");
    openapiFields.add("scopes");
    openapiFields.add("tokenEndPointUrl");
    openapiFields.add("userImportEnabled");
    openapiFields.add("userImportGroup");
    openapiFields.add("userInfoEndPointUrl");
    openapiFields.add("userInfoSource");
    openapiFields.add("userManagementUrl");
    openapiFields.add("userUpdateEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizationEndPointUrl");
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("clientSecret");
    openapiRequiredFields.add("issuer");
    openapiRequiredFields.add("jwksEndPointUrl");
    openapiRequiredFields.add("mappingClaim");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("redirectUris");
    openapiRequiredFields.add("scopes");
    openapiRequiredFields.add("tokenEndPointUrl");
    openapiRequiredFields.add("userInfoEndPointUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateOpenIdIdpConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateOpenIdIdpConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateOpenIdIdpConfigRequest is not found in the empty JSON string", CreateOpenIdIdpConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateOpenIdIdpConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateOpenIdIdpConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateOpenIdIdpConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("authorizationEndPointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationEndPointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationEndPointUrl").toString()));
      }
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if (!jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("fallbackMappingClaim") != null && !jsonObj.get("fallbackMappingClaim").isJsonNull()) && !jsonObj.get("fallbackMappingClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallbackMappingClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallbackMappingClaim").toString()));
      }
      if ((jsonObj.get("flow") != null && !jsonObj.get("flow").isJsonNull()) && !jsonObj.get("flow").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flow` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flow").toString()));
      }
      // validate the optional field `flow`
      if (jsonObj.get("flow") != null && !jsonObj.get("flow").isJsonNull()) {
        FlowEnum.validateJsonElement(jsonObj.get("flow"));
      }
      if (!jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if (!jsonObj.get("jwksEndPointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwksEndPointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwksEndPointUrl").toString()));
      }
      if (!jsonObj.get("mappingClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mappingClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mappingClaim").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pkceChallengeMethod") != null && !jsonObj.get("pkceChallengeMethod").isJsonNull()) && !jsonObj.get("pkceChallengeMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pkceChallengeMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pkceChallengeMethod").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("redirectUris") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("scopes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("scopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be an array in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if (!jsonObj.get("tokenEndPointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenEndPointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenEndPointUrl").toString()));
      }
      if (!jsonObj.get("userInfoEndPointUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfoEndPointUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfoEndPointUrl").toString()));
      }
      if ((jsonObj.get("userInfoSource") != null && !jsonObj.get("userInfoSource").isJsonNull()) && !jsonObj.get("userInfoSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userInfoSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userInfoSource").toString()));
      }
      // validate the optional field `userInfoSource`
      if (jsonObj.get("userInfoSource") != null && !jsonObj.get("userInfoSource").isJsonNull()) {
        UserInfoSourceEnum.validateJsonElement(jsonObj.get("userInfoSource"));
      }
      if ((jsonObj.get("userManagementUrl") != null && !jsonObj.get("userManagementUrl").isJsonNull()) && !jsonObj.get("userManagementUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userManagementUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userManagementUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateOpenIdIdpConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateOpenIdIdpConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateOpenIdIdpConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateOpenIdIdpConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateOpenIdIdpConfigRequest>() {
           @Override
           public void write(JsonWriter out, CreateOpenIdIdpConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateOpenIdIdpConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateOpenIdIdpConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateOpenIdIdpConfigRequest
   * @throws IOException if the JSON string is invalid with respect to CreateOpenIdIdpConfigRequest
   */
  public static CreateOpenIdIdpConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateOpenIdIdpConfigRequest.class);
  }

  /**
   * Convert an instance of CreateOpenIdIdpConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

