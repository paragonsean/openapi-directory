/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Password character rules
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CharacterRules {
  /**
   * Characters which a password must contain:  * &#x60;alpha&#x60; - at least one alphabetical character (&#x60;uppercase&#x60; OR &#x60;lowercase&#x60;)  * &#x60;uppercase&#x60; - at least one uppercase character  * &#x60;lowercase&#x60; - at least one lowercase character  * &#x60;numeric&#x60; - at least one numeric character  * &#x60;special&#x60; - at least one special character (letters and digits excluded)  * &#x60;all&#x60; - combination of &#x60;uppercase&#x60;, &#x60;lowercase&#x60;, &#x60;numeric&#x60; and &#x60;special&#x60; (available only in request models)  * &#x60;none&#x60; - none of the above
   */
  @JsonAdapter(MustContainCharactersEnum.Adapter.class)
  public enum MustContainCharactersEnum {
    ALPHA("alpha"),
    
    UPPERCASE("uppercase"),
    
    LOWERCASE("lowercase"),
    
    NUMERIC("numeric"),
    
    SPECIAL("special"),
    
    ALL("all"),
    
    NONE("none");

    private String value;

    MustContainCharactersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MustContainCharactersEnum fromValue(String value) {
      for (MustContainCharactersEnum b : MustContainCharactersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MustContainCharactersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MustContainCharactersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MustContainCharactersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MustContainCharactersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MustContainCharactersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MUST_CONTAIN_CHARACTERS = "mustContainCharacters";
  @SerializedName(SERIALIZED_NAME_MUST_CONTAIN_CHARACTERS)
  private MustContainCharactersEnum mustContainCharacters = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_CHARACTERISTICS_TO_ENFORCE = "numberOfCharacteristicsToEnforce";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CHARACTERISTICS_TO_ENFORCE)
  private Integer numberOfCharacteristicsToEnforce;

  public CharacterRules() {
  }

  public CharacterRules mustContainCharacters(MustContainCharactersEnum mustContainCharacters) {
    this.mustContainCharacters = mustContainCharacters;
    return this;
  }

  public CharacterRules addMustContainCharactersItem(MustContainCharactersEnum mustContainCharactersItem) {
    if (this.mustContainCharacters == null) {
      this.mustContainCharacters = new ArrayList<>();
    }
    this.mustContainCharacters.add(mustContainCharactersItem);
    return this;
  }

  /**
   * Characters which a password must contain:  * &#x60;alpha&#x60; - at least one alphabetical character (&#x60;uppercase&#x60; OR &#x60;lowercase&#x60;)  * &#x60;uppercase&#x60; - at least one uppercase character  * &#x60;lowercase&#x60; - at least one lowercase character  * &#x60;numeric&#x60; - at least one numeric character  * &#x60;special&#x60; - at least one special character (letters and digits excluded)  * &#x60;all&#x60; - combination of &#x60;uppercase&#x60;, &#x60;lowercase&#x60;, &#x60;numeric&#x60; and &#x60;special&#x60; (available only in request models)  * &#x60;none&#x60; - none of the above
   * @return mustContainCharacters
   */
  @javax.annotation.Nonnull
  public MustContainCharactersEnum getMustContainCharacters() {
    return mustContainCharacters;
  }

  public void setMustContainCharacters(MustContainCharactersEnum mustContainCharacters) {
    this.mustContainCharacters = mustContainCharacters;
  }


  public CharacterRules numberOfCharacteristicsToEnforce(Integer numberOfCharacteristicsToEnforce) {
    this.numberOfCharacteristicsToEnforce = numberOfCharacteristicsToEnforce;
    return this;
  }

  /**
   * Number of characteristics to enforce  e.g. from &#x60;[\&quot;uppercase\&quot;, \&quot;lowercase\&quot;, \&quot;numeric\&quot;, \&quot;special\&quot;]&#x60;  all 4 character sets can be enforced; but also only 2 of them
   * minimum: 0
   * maximum: 4
   * @return numberOfCharacteristicsToEnforce
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfCharacteristicsToEnforce() {
    return numberOfCharacteristicsToEnforce;
  }

  public void setNumberOfCharacteristicsToEnforce(Integer numberOfCharacteristicsToEnforce) {
    this.numberOfCharacteristicsToEnforce = numberOfCharacteristicsToEnforce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CharacterRules characterRules = (CharacterRules) o;
    return Objects.equals(this.mustContainCharacters, characterRules.mustContainCharacters) &&
        Objects.equals(this.numberOfCharacteristicsToEnforce, characterRules.numberOfCharacteristicsToEnforce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mustContainCharacters, numberOfCharacteristicsToEnforce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CharacterRules {\n");
    sb.append("    mustContainCharacters: ").append(toIndentedString(mustContainCharacters)).append("\n");
    sb.append("    numberOfCharacteristicsToEnforce: ").append(toIndentedString(numberOfCharacteristicsToEnforce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mustContainCharacters");
    openapiFields.add("numberOfCharacteristicsToEnforce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mustContainCharacters");
    openapiRequiredFields.add("numberOfCharacteristicsToEnforce");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CharacterRules
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CharacterRules.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CharacterRules is not found in the empty JSON string", CharacterRules.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CharacterRules.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CharacterRules` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CharacterRules.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("mustContainCharacters") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mustContainCharacters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mustContainCharacters` to be an array in the JSON string but got `%s`", jsonObj.get("mustContainCharacters").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CharacterRules.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CharacterRules' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CharacterRules> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CharacterRules.class));

       return (TypeAdapter<T>) new TypeAdapter<CharacterRules>() {
           @Override
           public void write(JsonWriter out, CharacterRules value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CharacterRules read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CharacterRules given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CharacterRules
   * @throws IOException if the JSON string is invalid with respect to CharacterRules
   */
  public static CharacterRules fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CharacterRules.class);
  }

  /**
   * Convert an instance of CharacterRules to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

