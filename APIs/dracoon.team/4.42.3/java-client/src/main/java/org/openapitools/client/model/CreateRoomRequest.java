/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for creating a room
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRoomRequest {
  public static final String SERIALIZED_NAME_ADMIN_GROUP_IDS = "adminGroupIds";
  @SerializedName(SERIALIZED_NAME_ADMIN_GROUP_IDS)
  private List<Long> adminGroupIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADMIN_IDS = "adminIds";
  @SerializedName(SERIALIZED_NAME_ADMIN_IDS)
  private List<Long> adminIds = new ArrayList<>();

  /**
   * Classification ID:  * &#x60;1&#x60; - public  * &#x60;2&#x60; - internal  * &#x60;3&#x60; - confidential  * &#x60;4&#x60; - strictly confidential    Provided (or default) classification is taken from room  when file gets uploaded without any classification.
   */
  @JsonAdapter(ClassificationEnum.Adapter.class)
  public enum ClassificationEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    ClassificationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationEnum fromValue(Integer value) {
      for (ClassificationEnum b : ClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ClassificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ClassificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private ClassificationEnum classification = ClassificationEnum.NUMBER_2;

  public static final String SERIALIZED_NAME_HAS_ACTIVITIES_LOG = "hasActivitiesLog";
  @SerializedName(SERIALIZED_NAME_HAS_ACTIVITIES_LOG)
  private Boolean hasActivitiesLog = true;

  public static final String SERIALIZED_NAME_HAS_RECYCLE_BIN = "hasRecycleBin";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_RECYCLE_BIN)
  private Boolean hasRecycleBin;

  public static final String SERIALIZED_NAME_INHERIT_PERMISSIONS = "inheritPermissions";
  @SerializedName(SERIALIZED_NAME_INHERIT_PERMISSIONS)
  private Boolean inheritPermissions;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Behaviour when new users are added to the group:  * &#x60;autoallow&#x60;  * &#x60;pending&#x60;    Only relevant if &#x60;adminGroupIds&#x60; has items.
   */
  @JsonAdapter(NewGroupMemberAcceptanceEnum.Adapter.class)
  public enum NewGroupMemberAcceptanceEnum {
    AUTOALLOW("autoallow"),
    
    PENDING("pending");

    private String value;

    NewGroupMemberAcceptanceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NewGroupMemberAcceptanceEnum fromValue(String value) {
      for (NewGroupMemberAcceptanceEnum b : NewGroupMemberAcceptanceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NewGroupMemberAcceptanceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NewGroupMemberAcceptanceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NewGroupMemberAcceptanceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NewGroupMemberAcceptanceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NewGroupMemberAcceptanceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEW_GROUP_MEMBER_ACCEPTANCE = "newGroupMemberAcceptance";
  @SerializedName(SERIALIZED_NAME_NEW_GROUP_MEMBER_ACCEPTANCE)
  private NewGroupMemberAcceptanceEnum newGroupMemberAcceptance = NewGroupMemberAcceptanceEnum.AUTOALLOW;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Long parentId;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Long quota;

  public static final String SERIALIZED_NAME_RECYCLE_BIN_RETENTION_PERIOD = "recycleBinRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_RECYCLE_BIN_RETENTION_PERIOD)
  private Integer recycleBinRetentionPeriod;

  public static final String SERIALIZED_NAME_TIMESTAMP_CREATION = "timestampCreation";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_CREATION)
  private OffsetDateTime timestampCreation;

  public static final String SERIALIZED_NAME_TIMESTAMP_MODIFICATION = "timestampModification";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_MODIFICATION)
  private OffsetDateTime timestampModification;

  public CreateRoomRequest() {
  }

  public CreateRoomRequest adminGroupIds(List<Long> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
    return this;
  }

  public CreateRoomRequest addAdminGroupIdsItem(Long adminGroupIdsItem) {
    if (this.adminGroupIds == null) {
      this.adminGroupIds = new ArrayList<>();
    }
    this.adminGroupIds.add(adminGroupIdsItem);
    return this;
  }

  /**
   * List of group ids  A room requires at least one admin (user or group)
   * @return adminGroupIds
   */
  @javax.annotation.Nullable
  public List<Long> getAdminGroupIds() {
    return adminGroupIds;
  }

  public void setAdminGroupIds(List<Long> adminGroupIds) {
    this.adminGroupIds = adminGroupIds;
  }


  public CreateRoomRequest adminIds(List<Long> adminIds) {
    this.adminIds = adminIds;
    return this;
  }

  public CreateRoomRequest addAdminIdsItem(Long adminIdsItem) {
    if (this.adminIds == null) {
      this.adminIds = new ArrayList<>();
    }
    this.adminIds.add(adminIdsItem);
    return this;
  }

  /**
   * List of user ids  A room requires at least one admin (user or group)
   * @return adminIds
   */
  @javax.annotation.Nullable
  public List<Long> getAdminIds() {
    return adminIds;
  }

  public void setAdminIds(List<Long> adminIds) {
    this.adminIds = adminIds;
  }


  public CreateRoomRequest classification(ClassificationEnum classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Classification ID:  * &#x60;1&#x60; - public  * &#x60;2&#x60; - internal  * &#x60;3&#x60; - confidential  * &#x60;4&#x60; - strictly confidential    Provided (or default) classification is taken from room  when file gets uploaded without any classification.
   * @return classification
   */
  @javax.annotation.Nullable
  public ClassificationEnum getClassification() {
    return classification;
  }

  public void setClassification(ClassificationEnum classification) {
    this.classification = classification;
  }


  public CreateRoomRequest hasActivitiesLog(Boolean hasActivitiesLog) {
    this.hasActivitiesLog = hasActivitiesLog;
    return this;
  }

  /**
   * Is activities log active (for rooms only)
   * @return hasActivitiesLog
   */
  @javax.annotation.Nullable
  public Boolean getHasActivitiesLog() {
    return hasActivitiesLog;
  }

  public void setHasActivitiesLog(Boolean hasActivitiesLog) {
    this.hasActivitiesLog = hasActivitiesLog;
  }


  @Deprecated
  public CreateRoomRequest hasRecycleBin(Boolean hasRecycleBin) {
    this.hasRecycleBin = hasRecycleBin;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
   * @return hasRecycleBin
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHasRecycleBin() {
    return hasRecycleBin;
  }

  @Deprecated
  public void setHasRecycleBin(Boolean hasRecycleBin) {
    this.hasRecycleBin = hasRecycleBin;
  }


  public CreateRoomRequest inheritPermissions(Boolean inheritPermissions) {
    this.inheritPermissions = inheritPermissions;
    return this;
  }

  /**
   * Inherit permissions from parent room  (default: &#x60;false&#x60; if &#x60;parentId&#x60; is &#x60;0&#x60;; otherwise: &#x60;true&#x60;)
   * @return inheritPermissions
   */
  @javax.annotation.Nullable
  public Boolean getInheritPermissions() {
    return inheritPermissions;
  }

  public void setInheritPermissions(Boolean inheritPermissions) {
    this.inheritPermissions = inheritPermissions;
  }


  public CreateRoomRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateRoomRequest newGroupMemberAcceptance(NewGroupMemberAcceptanceEnum newGroupMemberAcceptance) {
    this.newGroupMemberAcceptance = newGroupMemberAcceptance;
    return this;
  }

  /**
   * Behaviour when new users are added to the group:  * &#x60;autoallow&#x60;  * &#x60;pending&#x60;    Only relevant if &#x60;adminGroupIds&#x60; has items.
   * @return newGroupMemberAcceptance
   */
  @javax.annotation.Nullable
  public NewGroupMemberAcceptanceEnum getNewGroupMemberAcceptance() {
    return newGroupMemberAcceptance;
  }

  public void setNewGroupMemberAcceptance(NewGroupMemberAcceptanceEnum newGroupMemberAcceptance) {
    this.newGroupMemberAcceptance = newGroupMemberAcceptance;
  }


  public CreateRoomRequest notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes  Use empty string to remove.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public CreateRoomRequest parentId(Long parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * Parent room ID or &#x60;null&#x60; (not 0) to create a top level room
   * @return parentId
   */
  @javax.annotation.Nullable
  public Long getParentId() {
    return parentId;
  }

  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }


  public CreateRoomRequest quota(Long quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Quota in byte
   * @return quota
   */
  @javax.annotation.Nullable
  public Long getQuota() {
    return quota;
  }

  public void setQuota(Long quota) {
    this.quota = quota;
  }


  public CreateRoomRequest recycleBinRetentionPeriod(Integer recycleBinRetentionPeriod) {
    this.recycleBinRetentionPeriod = recycleBinRetentionPeriod;
    return this;
  }

  /**
   * Retention period for deleted nodes in days
   * minimum: 0
   * maximum: 9999
   * @return recycleBinRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getRecycleBinRetentionPeriod() {
    return recycleBinRetentionPeriod;
  }

  public void setRecycleBinRetentionPeriod(Integer recycleBinRetentionPeriod) {
    this.recycleBinRetentionPeriod = recycleBinRetentionPeriod;
  }


  public CreateRoomRequest timestampCreation(OffsetDateTime timestampCreation) {
    this.timestampCreation = timestampCreation;
    return this;
  }

  /**
   * &amp;#128640; Since v4.22.0  Time the node was created on external file system  (default: current server datetime in UTC format)
   * @return timestampCreation
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestampCreation() {
    return timestampCreation;
  }

  public void setTimestampCreation(OffsetDateTime timestampCreation) {
    this.timestampCreation = timestampCreation;
  }


  public CreateRoomRequest timestampModification(OffsetDateTime timestampModification) {
    this.timestampModification = timestampModification;
    return this;
  }

  /**
   * &amp;#128640; Since v4.22.0  Time the content of a node was last modified on external file system  (default: current server datetime in UTC format)
   * @return timestampModification
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestampModification() {
    return timestampModification;
  }

  public void setTimestampModification(OffsetDateTime timestampModification) {
    this.timestampModification = timestampModification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRoomRequest createRoomRequest = (CreateRoomRequest) o;
    return Objects.equals(this.adminGroupIds, createRoomRequest.adminGroupIds) &&
        Objects.equals(this.adminIds, createRoomRequest.adminIds) &&
        Objects.equals(this.classification, createRoomRequest.classification) &&
        Objects.equals(this.hasActivitiesLog, createRoomRequest.hasActivitiesLog) &&
        Objects.equals(this.hasRecycleBin, createRoomRequest.hasRecycleBin) &&
        Objects.equals(this.inheritPermissions, createRoomRequest.inheritPermissions) &&
        Objects.equals(this.name, createRoomRequest.name) &&
        Objects.equals(this.newGroupMemberAcceptance, createRoomRequest.newGroupMemberAcceptance) &&
        Objects.equals(this.notes, createRoomRequest.notes) &&
        Objects.equals(this.parentId, createRoomRequest.parentId) &&
        Objects.equals(this.quota, createRoomRequest.quota) &&
        Objects.equals(this.recycleBinRetentionPeriod, createRoomRequest.recycleBinRetentionPeriod) &&
        Objects.equals(this.timestampCreation, createRoomRequest.timestampCreation) &&
        Objects.equals(this.timestampModification, createRoomRequest.timestampModification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminGroupIds, adminIds, classification, hasActivitiesLog, hasRecycleBin, inheritPermissions, name, newGroupMemberAcceptance, notes, parentId, quota, recycleBinRetentionPeriod, timestampCreation, timestampModification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRoomRequest {\n");
    sb.append("    adminGroupIds: ").append(toIndentedString(adminGroupIds)).append("\n");
    sb.append("    adminIds: ").append(toIndentedString(adminIds)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    hasActivitiesLog: ").append(toIndentedString(hasActivitiesLog)).append("\n");
    sb.append("    hasRecycleBin: ").append(toIndentedString(hasRecycleBin)).append("\n");
    sb.append("    inheritPermissions: ").append(toIndentedString(inheritPermissions)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newGroupMemberAcceptance: ").append(toIndentedString(newGroupMemberAcceptance)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    recycleBinRetentionPeriod: ").append(toIndentedString(recycleBinRetentionPeriod)).append("\n");
    sb.append("    timestampCreation: ").append(toIndentedString(timestampCreation)).append("\n");
    sb.append("    timestampModification: ").append(toIndentedString(timestampModification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminGroupIds");
    openapiFields.add("adminIds");
    openapiFields.add("classification");
    openapiFields.add("hasActivitiesLog");
    openapiFields.add("hasRecycleBin");
    openapiFields.add("inheritPermissions");
    openapiFields.add("name");
    openapiFields.add("newGroupMemberAcceptance");
    openapiFields.add("notes");
    openapiFields.add("parentId");
    openapiFields.add("quota");
    openapiFields.add("recycleBinRetentionPeriod");
    openapiFields.add("timestampCreation");
    openapiFields.add("timestampModification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRoomRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRoomRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRoomRequest is not found in the empty JSON string", CreateRoomRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRoomRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRoomRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateRoomRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("adminGroupIds") != null && !jsonObj.get("adminGroupIds").isJsonNull() && !jsonObj.get("adminGroupIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminGroupIds` to be an array in the JSON string but got `%s`", jsonObj.get("adminGroupIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("adminIds") != null && !jsonObj.get("adminIds").isJsonNull() && !jsonObj.get("adminIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminIds` to be an array in the JSON string but got `%s`", jsonObj.get("adminIds").toString()));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        ClassificationEnum.validateJsonElement(jsonObj.get("classification"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("newGroupMemberAcceptance") != null && !jsonObj.get("newGroupMemberAcceptance").isJsonNull()) && !jsonObj.get("newGroupMemberAcceptance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newGroupMemberAcceptance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newGroupMemberAcceptance").toString()));
      }
      // validate the optional field `newGroupMemberAcceptance`
      if (jsonObj.get("newGroupMemberAcceptance") != null && !jsonObj.get("newGroupMemberAcceptance").isJsonNull()) {
        NewGroupMemberAcceptanceEnum.validateJsonElement(jsonObj.get("newGroupMemberAcceptance"));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRoomRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRoomRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRoomRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRoomRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRoomRequest>() {
           @Override
           public void write(JsonWriter out, CreateRoomRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRoomRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRoomRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRoomRequest
   * @throws IOException if the JSON string is invalid with respect to CreateRoomRequest
   */
  public static CreateRoomRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRoomRequest.class);
  }

  /**
   * Convert an instance of CreateRoomRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

