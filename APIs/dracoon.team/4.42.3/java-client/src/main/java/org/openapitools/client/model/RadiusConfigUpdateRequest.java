/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FailoverServer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for updating a RADIUS configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RadiusConfigUpdateRequest {
  public static final String SERIALIZED_NAME_FAILOVER_SERVER = "failoverServer";
  @SerializedName(SERIALIZED_NAME_FAILOVER_SERVER)
  private FailoverServer failoverServer;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_OTP_PIN_FIRST = "otpPinFirst";
  @SerializedName(SERIALIZED_NAME_OTP_PIN_FIRST)
  private Boolean otpPinFirst = true;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public static final String SERIALIZED_NAME_SHARED_SECRET = "sharedSecret";
  @SerializedName(SERIALIZED_NAME_SHARED_SECRET)
  private String sharedSecret;

  public RadiusConfigUpdateRequest() {
  }

  public RadiusConfigUpdateRequest failoverServer(FailoverServer failoverServer) {
    this.failoverServer = failoverServer;
    return this;
  }

  /**
   * Get failoverServer
   * @return failoverServer
   */
  @javax.annotation.Nullable
  public FailoverServer getFailoverServer() {
    return failoverServer;
  }

  public void setFailoverServer(FailoverServer failoverServer) {
    this.failoverServer = failoverServer;
  }


  public RadiusConfigUpdateRequest ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * RADIUS Server IP Address
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public RadiusConfigUpdateRequest otpPinFirst(Boolean otpPinFirst) {
    this.otpPinFirst = otpPinFirst;
    return this;
  }

  /**
   * Sequence order of concatenated PIN and one-time token
   * @return otpPinFirst
   */
  @javax.annotation.Nullable
  public Boolean getOtpPinFirst() {
    return otpPinFirst;
  }

  public void setOtpPinFirst(Boolean otpPinFirst) {
    this.otpPinFirst = otpPinFirst;
  }


  public RadiusConfigUpdateRequest port(Integer port) {
    this.port = port;
    return this;
  }

  /**
   * RADIUS Server Port
   * @return port
   */
  @javax.annotation.Nullable
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }


  public RadiusConfigUpdateRequest sharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
    return this;
  }

  /**
   * Shared Secret to access the RADIUS server
   * @return sharedSecret
   */
  @javax.annotation.Nullable
  public String getSharedSecret() {
    return sharedSecret;
  }

  public void setSharedSecret(String sharedSecret) {
    this.sharedSecret = sharedSecret;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RadiusConfigUpdateRequest radiusConfigUpdateRequest = (RadiusConfigUpdateRequest) o;
    return Objects.equals(this.failoverServer, radiusConfigUpdateRequest.failoverServer) &&
        Objects.equals(this.ipAddress, radiusConfigUpdateRequest.ipAddress) &&
        Objects.equals(this.otpPinFirst, radiusConfigUpdateRequest.otpPinFirst) &&
        Objects.equals(this.port, radiusConfigUpdateRequest.port) &&
        Objects.equals(this.sharedSecret, radiusConfigUpdateRequest.sharedSecret);
  }

  @Override
  public int hashCode() {
    return Objects.hash(failoverServer, ipAddress, otpPinFirst, port, sharedSecret);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RadiusConfigUpdateRequest {\n");
    sb.append("    failoverServer: ").append(toIndentedString(failoverServer)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    otpPinFirst: ").append(toIndentedString(otpPinFirst)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    sharedSecret: ").append(toIndentedString(sharedSecret)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("failoverServer");
    openapiFields.add("ipAddress");
    openapiFields.add("otpPinFirst");
    openapiFields.add("port");
    openapiFields.add("sharedSecret");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RadiusConfigUpdateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RadiusConfigUpdateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RadiusConfigUpdateRequest is not found in the empty JSON string", RadiusConfigUpdateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RadiusConfigUpdateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RadiusConfigUpdateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `failoverServer`
      if (jsonObj.get("failoverServer") != null && !jsonObj.get("failoverServer").isJsonNull()) {
        FailoverServer.validateJsonElement(jsonObj.get("failoverServer"));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("sharedSecret") != null && !jsonObj.get("sharedSecret").isJsonNull()) && !jsonObj.get("sharedSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sharedSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sharedSecret").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RadiusConfigUpdateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RadiusConfigUpdateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RadiusConfigUpdateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RadiusConfigUpdateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RadiusConfigUpdateRequest>() {
           @Override
           public void write(JsonWriter out, RadiusConfigUpdateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RadiusConfigUpdateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RadiusConfigUpdateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RadiusConfigUpdateRequest
   * @throws IOException if the JSON string is invalid with respect to RadiusConfigUpdateRequest
   */
  public static RadiusConfigUpdateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RadiusConfigUpdateRequest.class);
  }

  /**
   * Convert an instance of RadiusConfigUpdateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

