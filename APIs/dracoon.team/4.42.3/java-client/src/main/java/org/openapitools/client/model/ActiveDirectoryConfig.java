/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Active Directory configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActiveDirectoryConfig {
  public static final String SERIALIZED_NAME_AD_EXPORT_GROUP = "adExportGroup";
  @SerializedName(SERIALIZED_NAME_AD_EXPORT_GROUP)
  private String adExportGroup;

  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_CREATE_HOME_FOLDER = "createHomeFolder";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CREATE_HOME_FOLDER)
  private Boolean createHomeFolder = false;

  public static final String SERIALIZED_NAME_HOME_FOLDER_PARENT = "homeFolderParent";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HOME_FOLDER_PARENT)
  private Long homeFolderParent;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_LDAP_USERS_DOMAIN = "ldapUsersDomain";
  @SerializedName(SERIALIZED_NAME_LDAP_USERS_DOMAIN)
  private String ldapUsersDomain;

  public static final String SERIALIZED_NAME_SDS_IMPORT_GROUP = "sdsImportGroup";
  @SerializedName(SERIALIZED_NAME_SDS_IMPORT_GROUP)
  private Long sdsImportGroup;

  public static final String SERIALIZED_NAME_SERVER_ADMIN_NAME = "serverAdminName";
  @SerializedName(SERIALIZED_NAME_SERVER_ADMIN_NAME)
  private String serverAdminName;

  public static final String SERIALIZED_NAME_SERVER_IP = "serverIp";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_SSL_FINGER_PRINT = "sslFingerPrint";
  @SerializedName(SERIALIZED_NAME_SSL_FINGER_PRINT)
  private String sslFingerPrint;

  public static final String SERIALIZED_NAME_USE_LDAPS = "useLdaps";
  @SerializedName(SERIALIZED_NAME_USE_LDAPS)
  private Boolean useLdaps;

  public static final String SERIALIZED_NAME_USER_FILTER = "userFilter";
  @SerializedName(SERIALIZED_NAME_USER_FILTER)
  private String userFilter;

  public static final String SERIALIZED_NAME_USER_IMPORT = "userImport";
  @SerializedName(SERIALIZED_NAME_USER_IMPORT)
  private Boolean userImport;

  public ActiveDirectoryConfig() {
  }

  public ActiveDirectoryConfig adExportGroup(String adExportGroup) {
    this.adExportGroup = adExportGroup;
    return this;
  }

  /**
   * If &#x60;userImport&#x60; is set to &#x60;true&#x60;,  the user must be member of this Active Directory group to receive a newly created DRACOON account.
   * @return adExportGroup
   */
  @javax.annotation.Nonnull
  public String getAdExportGroup() {
    return adExportGroup;
  }

  public void setAdExportGroup(String adExportGroup) {
    this.adExportGroup = adExportGroup;
  }


  public ActiveDirectoryConfig alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * Unique name for an Active Directory configuration
   * @return alias
   */
  @javax.annotation.Nonnull
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  @Deprecated
  public ActiveDirectoryConfig createHomeFolder(Boolean createHomeFolder) {
    this.createHomeFolder = createHomeFolder;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  Determines whether a room is created for each user that is created by automatic import (like a home folder).  Room&#39;s name will equal the user&#39;s login name.
   * @return createHomeFolder
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCreateHomeFolder() {
    return createHomeFolder;
  }

  @Deprecated
  public void setCreateHomeFolder(Boolean createHomeFolder) {
    this.createHomeFolder = createHomeFolder;
  }


  @Deprecated
  public ActiveDirectoryConfig homeFolderParent(Long homeFolderParent) {
    this.homeFolderParent = homeFolderParent;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.10.0  DEPRECATED, will be ignored  ID of the room in which the individual rooms for users will be created.
   * @return homeFolderParent
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Long getHomeFolderParent() {
    return homeFolderParent;
  }

  @Deprecated
  public void setHomeFolderParent(Long homeFolderParent) {
    this.homeFolderParent = homeFolderParent;
  }


  public ActiveDirectoryConfig id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * ID
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ActiveDirectoryConfig ldapUsersDomain(String ldapUsersDomain) {
    this.ldapUsersDomain = ldapUsersDomain;
    return this;
  }

  /**
   * Search scope of Active Directory; only users below this node can log on.
   * @return ldapUsersDomain
   */
  @javax.annotation.Nonnull
  public String getLdapUsersDomain() {
    return ldapUsersDomain;
  }

  public void setLdapUsersDomain(String ldapUsersDomain) {
    this.ldapUsersDomain = ldapUsersDomain;
  }


  public ActiveDirectoryConfig sdsImportGroup(Long sdsImportGroup) {
    this.sdsImportGroup = sdsImportGroup;
    return this;
  }

  /**
   * User group that is assigned to users who are created by automatic import.  Reset with &#x60;0&#x60;
   * @return sdsImportGroup
   */
  @javax.annotation.Nullable
  public Long getSdsImportGroup() {
    return sdsImportGroup;
  }

  public void setSdsImportGroup(Long sdsImportGroup) {
    this.sdsImportGroup = sdsImportGroup;
  }


  public ActiveDirectoryConfig serverAdminName(String serverAdminName) {
    this.serverAdminName = serverAdminName;
    return this;
  }

  /**
   * Distinguished Name (DN) of Active Directory administrative account
   * @return serverAdminName
   */
  @javax.annotation.Nonnull
  public String getServerAdminName() {
    return serverAdminName;
  }

  public void setServerAdminName(String serverAdminName) {
    this.serverAdminName = serverAdminName;
  }


  public ActiveDirectoryConfig serverIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  /**
   * IPv4 or IPv6 address or host name
   * @return serverIp
   */
  @javax.annotation.Nonnull
  public String getServerIp() {
    return serverIp;
  }

  public void setServerIp(String serverIp) {
    this.serverIp = serverIp;
  }


  public ActiveDirectoryConfig serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Port
   * minimum: 0
   * maximum: 65535
   * @return serverPort
   */
  @javax.annotation.Nonnull
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public ActiveDirectoryConfig sslFingerPrint(String sslFingerPrint) {
    this.sslFingerPrint = sslFingerPrint;
    return this;
  }

  /**
   * SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: &#x60;Algorithm/Fingerprint&#x60;
   * @return sslFingerPrint
   */
  @javax.annotation.Nullable
  public String getSslFingerPrint() {
    return sslFingerPrint;
  }

  public void setSslFingerPrint(String sslFingerPrint) {
    this.sslFingerPrint = sslFingerPrint;
  }


  public ActiveDirectoryConfig useLdaps(Boolean useLdaps) {
    this.useLdaps = useLdaps;
    return this;
  }

  /**
   * Determines whether LDAPS should be used instead of plain LDAP.
   * @return useLdaps
   */
  @javax.annotation.Nonnull
  public Boolean getUseLdaps() {
    return useLdaps;
  }

  public void setUseLdaps(Boolean useLdaps) {
    this.useLdaps = useLdaps;
  }


  public ActiveDirectoryConfig userFilter(String userFilter) {
    this.userFilter = userFilter;
    return this;
  }

  /**
   * Name of Active Directory attribute that is used as login name.
   * @return userFilter
   */
  @javax.annotation.Nonnull
  public String getUserFilter() {
    return userFilter;
  }

  public void setUserFilter(String userFilter) {
    this.userFilter = userFilter;
  }


  public ActiveDirectoryConfig userImport(Boolean userImport) {
    this.userImport = userImport;
    return this;
  }

  /**
   * Determines if a DRACOON account is automatically created for a new user  who successfully logs on with his / her AD / IDP account.
   * @return userImport
   */
  @javax.annotation.Nonnull
  public Boolean getUserImport() {
    return userImport;
  }

  public void setUserImport(Boolean userImport) {
    this.userImport = userImport;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActiveDirectoryConfig activeDirectoryConfig = (ActiveDirectoryConfig) o;
    return Objects.equals(this.adExportGroup, activeDirectoryConfig.adExportGroup) &&
        Objects.equals(this.alias, activeDirectoryConfig.alias) &&
        Objects.equals(this.createHomeFolder, activeDirectoryConfig.createHomeFolder) &&
        Objects.equals(this.homeFolderParent, activeDirectoryConfig.homeFolderParent) &&
        Objects.equals(this.id, activeDirectoryConfig.id) &&
        Objects.equals(this.ldapUsersDomain, activeDirectoryConfig.ldapUsersDomain) &&
        Objects.equals(this.sdsImportGroup, activeDirectoryConfig.sdsImportGroup) &&
        Objects.equals(this.serverAdminName, activeDirectoryConfig.serverAdminName) &&
        Objects.equals(this.serverIp, activeDirectoryConfig.serverIp) &&
        Objects.equals(this.serverPort, activeDirectoryConfig.serverPort) &&
        Objects.equals(this.sslFingerPrint, activeDirectoryConfig.sslFingerPrint) &&
        Objects.equals(this.useLdaps, activeDirectoryConfig.useLdaps) &&
        Objects.equals(this.userFilter, activeDirectoryConfig.userFilter) &&
        Objects.equals(this.userImport, activeDirectoryConfig.userImport);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adExportGroup, alias, createHomeFolder, homeFolderParent, id, ldapUsersDomain, sdsImportGroup, serverAdminName, serverIp, serverPort, sslFingerPrint, useLdaps, userFilter, userImport);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActiveDirectoryConfig {\n");
    sb.append("    adExportGroup: ").append(toIndentedString(adExportGroup)).append("\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    createHomeFolder: ").append(toIndentedString(createHomeFolder)).append("\n");
    sb.append("    homeFolderParent: ").append(toIndentedString(homeFolderParent)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ldapUsersDomain: ").append(toIndentedString(ldapUsersDomain)).append("\n");
    sb.append("    sdsImportGroup: ").append(toIndentedString(sdsImportGroup)).append("\n");
    sb.append("    serverAdminName: ").append(toIndentedString(serverAdminName)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    sslFingerPrint: ").append(toIndentedString(sslFingerPrint)).append("\n");
    sb.append("    useLdaps: ").append(toIndentedString(useLdaps)).append("\n");
    sb.append("    userFilter: ").append(toIndentedString(userFilter)).append("\n");
    sb.append("    userImport: ").append(toIndentedString(userImport)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adExportGroup");
    openapiFields.add("alias");
    openapiFields.add("createHomeFolder");
    openapiFields.add("homeFolderParent");
    openapiFields.add("id");
    openapiFields.add("ldapUsersDomain");
    openapiFields.add("sdsImportGroup");
    openapiFields.add("serverAdminName");
    openapiFields.add("serverIp");
    openapiFields.add("serverPort");
    openapiFields.add("sslFingerPrint");
    openapiFields.add("useLdaps");
    openapiFields.add("userFilter");
    openapiFields.add("userImport");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("adExportGroup");
    openapiRequiredFields.add("alias");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("ldapUsersDomain");
    openapiRequiredFields.add("serverAdminName");
    openapiRequiredFields.add("serverIp");
    openapiRequiredFields.add("serverPort");
    openapiRequiredFields.add("useLdaps");
    openapiRequiredFields.add("userFilter");
    openapiRequiredFields.add("userImport");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActiveDirectoryConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActiveDirectoryConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActiveDirectoryConfig is not found in the empty JSON string", ActiveDirectoryConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActiveDirectoryConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActiveDirectoryConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ActiveDirectoryConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("adExportGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adExportGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adExportGroup").toString()));
      }
      if (!jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      if (!jsonObj.get("ldapUsersDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapUsersDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapUsersDomain").toString()));
      }
      if (!jsonObj.get("serverAdminName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverAdminName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverAdminName").toString()));
      }
      if (!jsonObj.get("serverIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverIp").toString()));
      }
      if ((jsonObj.get("sslFingerPrint") != null && !jsonObj.get("sslFingerPrint").isJsonNull()) && !jsonObj.get("sslFingerPrint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslFingerPrint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslFingerPrint").toString()));
      }
      if (!jsonObj.get("userFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActiveDirectoryConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActiveDirectoryConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActiveDirectoryConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActiveDirectoryConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ActiveDirectoryConfig>() {
           @Override
           public void write(JsonWriter out, ActiveDirectoryConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActiveDirectoryConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActiveDirectoryConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActiveDirectoryConfig
   * @throws IOException if the JSON string is invalid with respect to ActiveDirectoryConfig
   */
  public static ActiveDirectoryConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActiveDirectoryConfig.class);
  }

  /**
   * Convert an instance of ActiveDirectoryConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

