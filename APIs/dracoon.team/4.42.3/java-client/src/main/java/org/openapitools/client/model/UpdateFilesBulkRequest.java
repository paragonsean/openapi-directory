/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObjectExpiration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for updating files
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateFilesBulkRequest {
  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private Integer classification;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private ObjectExpiration expiration;

  public static final String SERIALIZED_NAME_OBJECT_IDS = "objectIds";
  @SerializedName(SERIALIZED_NAME_OBJECT_IDS)
  private List<Long> objectIds = new ArrayList<>();

  public UpdateFilesBulkRequest() {
  }

  public UpdateFilesBulkRequest classification(Integer classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Classification ID:  * &#x60;1&#x60; - public  * &#x60;2&#x60; - internal  * &#x60;3&#x60; - confidential  * &#x60;4&#x60; - strictly confidential
   * @return classification
   */
  @javax.annotation.Nullable
  public Integer getClassification() {
    return classification;
  }

  public void setClassification(Integer classification) {
    this.classification = classification;
  }


  public UpdateFilesBulkRequest expiration(ObjectExpiration expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public ObjectExpiration getExpiration() {
    return expiration;
  }

  public void setExpiration(ObjectExpiration expiration) {
    this.expiration = expiration;
  }


  public UpdateFilesBulkRequest objectIds(List<Long> objectIds) {
    this.objectIds = objectIds;
    return this;
  }

  public UpdateFilesBulkRequest addObjectIdsItem(Long objectIdsItem) {
    if (this.objectIds == null) {
      this.objectIds = new ArrayList<>();
    }
    this.objectIds.add(objectIdsItem);
    return this;
  }

  /**
   * List of ids
   * @return objectIds
   */
  @javax.annotation.Nonnull
  public List<Long> getObjectIds() {
    return objectIds;
  }

  public void setObjectIds(List<Long> objectIds) {
    this.objectIds = objectIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateFilesBulkRequest updateFilesBulkRequest = (UpdateFilesBulkRequest) o;
    return Objects.equals(this.classification, updateFilesBulkRequest.classification) &&
        Objects.equals(this.expiration, updateFilesBulkRequest.expiration) &&
        Objects.equals(this.objectIds, updateFilesBulkRequest.objectIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classification, expiration, objectIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateFilesBulkRequest {\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    objectIds: ").append(toIndentedString(objectIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification");
    openapiFields.add("expiration");
    openapiFields.add("objectIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("objectIds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateFilesBulkRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateFilesBulkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateFilesBulkRequest is not found in the empty JSON string", UpdateFilesBulkRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateFilesBulkRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateFilesBulkRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateFilesBulkRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `expiration`
      if (jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) {
        ObjectExpiration.validateJsonElement(jsonObj.get("expiration"));
      }
      // ensure the required json array is present
      if (jsonObj.get("objectIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("objectIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectIds` to be an array in the JSON string but got `%s`", jsonObj.get("objectIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateFilesBulkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateFilesBulkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateFilesBulkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateFilesBulkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateFilesBulkRequest>() {
           @Override
           public void write(JsonWriter out, UpdateFilesBulkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateFilesBulkRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateFilesBulkRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateFilesBulkRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateFilesBulkRequest
   */
  public static UpdateFilesBulkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateFilesBulkRequest.class);
  }

  /**
   * Convert an instance of UpdateFilesBulkRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

