/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CharacterRules;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for updating shares password policies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSharesPasswordPolicies {
  public static final String SERIALIZED_NAME_CHARACTER_RULES = "characterRules";
  @SerializedName(SERIALIZED_NAME_CHARACTER_RULES)
  private CharacterRules characterRules;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_REJECT_DICTIONARY_WORDS = "rejectDictionaryWords";
  @SerializedName(SERIALIZED_NAME_REJECT_DICTIONARY_WORDS)
  private Boolean rejectDictionaryWords;

  public static final String SERIALIZED_NAME_REJECT_KEYBOARD_PATTERNS = "rejectKeyboardPatterns";
  @SerializedName(SERIALIZED_NAME_REJECT_KEYBOARD_PATTERNS)
  private Boolean rejectKeyboardPatterns;

  public static final String SERIALIZED_NAME_REJECT_USER_INFO = "rejectUserInfo";
  @SerializedName(SERIALIZED_NAME_REJECT_USER_INFO)
  private Boolean rejectUserInfo;

  public UpdateSharesPasswordPolicies() {
  }

  public UpdateSharesPasswordPolicies characterRules(CharacterRules characterRules) {
    this.characterRules = characterRules;
    return this;
  }

  /**
   * Get characterRules
   * @return characterRules
   */
  @javax.annotation.Nullable
  public CharacterRules getCharacterRules() {
    return characterRules;
  }

  public void setCharacterRules(CharacterRules characterRules) {
    this.characterRules = characterRules;
  }


  public UpdateSharesPasswordPolicies minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Minimum number of characters a password must contain
   * minimum: 1
   * maximum: 1024
   * @return minLength
   */
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public UpdateSharesPasswordPolicies rejectDictionaryWords(Boolean rejectDictionaryWords) {
    this.rejectDictionaryWords = rejectDictionaryWords;
    return this;
  }

  /**
   * Determines whether a password must NOT contain word(s) from a dictionary
   * @return rejectDictionaryWords
   */
  @javax.annotation.Nullable
  public Boolean getRejectDictionaryWords() {
    return rejectDictionaryWords;
  }

  public void setRejectDictionaryWords(Boolean rejectDictionaryWords) {
    this.rejectDictionaryWords = rejectDictionaryWords;
  }


  public UpdateSharesPasswordPolicies rejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
    this.rejectKeyboardPatterns = rejectKeyboardPatterns;
    return this;
  }

  /**
   * Determines whether a password must NOT contain keyboard patterns (e.g. &#x60;qwertz&#x60;, &#x60;asdf&#x60;)  (min. 4 character pattern)
   * @return rejectKeyboardPatterns
   */
  @javax.annotation.Nullable
  public Boolean getRejectKeyboardPatterns() {
    return rejectKeyboardPatterns;
  }

  public void setRejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
    this.rejectKeyboardPatterns = rejectKeyboardPatterns;
  }


  public UpdateSharesPasswordPolicies rejectUserInfo(Boolean rejectUserInfo) {
    this.rejectUserInfo = rejectUserInfo;
    return this;
  }

  /**
   * Determines whether a password must NOT contain user info (first name, last name, email, user name)
   * @return rejectUserInfo
   */
  @javax.annotation.Nullable
  public Boolean getRejectUserInfo() {
    return rejectUserInfo;
  }

  public void setRejectUserInfo(Boolean rejectUserInfo) {
    this.rejectUserInfo = rejectUserInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSharesPasswordPolicies updateSharesPasswordPolicies = (UpdateSharesPasswordPolicies) o;
    return Objects.equals(this.characterRules, updateSharesPasswordPolicies.characterRules) &&
        Objects.equals(this.minLength, updateSharesPasswordPolicies.minLength) &&
        Objects.equals(this.rejectDictionaryWords, updateSharesPasswordPolicies.rejectDictionaryWords) &&
        Objects.equals(this.rejectKeyboardPatterns, updateSharesPasswordPolicies.rejectKeyboardPatterns) &&
        Objects.equals(this.rejectUserInfo, updateSharesPasswordPolicies.rejectUserInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterRules, minLength, rejectDictionaryWords, rejectKeyboardPatterns, rejectUserInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSharesPasswordPolicies {\n");
    sb.append("    characterRules: ").append(toIndentedString(characterRules)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    rejectDictionaryWords: ").append(toIndentedString(rejectDictionaryWords)).append("\n");
    sb.append("    rejectKeyboardPatterns: ").append(toIndentedString(rejectKeyboardPatterns)).append("\n");
    sb.append("    rejectUserInfo: ").append(toIndentedString(rejectUserInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterRules");
    openapiFields.add("minLength");
    openapiFields.add("rejectDictionaryWords");
    openapiFields.add("rejectKeyboardPatterns");
    openapiFields.add("rejectUserInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSharesPasswordPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSharesPasswordPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSharesPasswordPolicies is not found in the empty JSON string", UpdateSharesPasswordPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSharesPasswordPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSharesPasswordPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `characterRules`
      if (jsonObj.get("characterRules") != null && !jsonObj.get("characterRules").isJsonNull()) {
        CharacterRules.validateJsonElement(jsonObj.get("characterRules"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSharesPasswordPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSharesPasswordPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSharesPasswordPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSharesPasswordPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSharesPasswordPolicies>() {
           @Override
           public void write(JsonWriter out, UpdateSharesPasswordPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSharesPasswordPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSharesPasswordPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSharesPasswordPolicies
   * @throws IOException if the JSON string is invalid with respect to UpdateSharesPasswordPolicies
   */
  public static UpdateSharesPasswordPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSharesPasswordPolicies.class);
  }

  /**
   * Convert an instance of UpdateSharesPasswordPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

