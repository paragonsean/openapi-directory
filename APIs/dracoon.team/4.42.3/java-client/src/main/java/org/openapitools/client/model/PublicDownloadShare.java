/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FileKey;
import org.openapitools.client.model.PrivateKeyContainer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Download Share information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicDownloadShare {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR_NAME = "creatorName";
  @SerializedName(SERIALIZED_NAME_CREATOR_NAME)
  private String creatorName;

  public static final String SERIALIZED_NAME_CREATOR_USERNAME = "creatorUsername";
  @SerializedName(SERIALIZED_NAME_CREATOR_USERNAME)
  private String creatorUsername;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_FILE_KEY = "fileKey";
  @SerializedName(SERIALIZED_NAME_FILE_KEY)
  private FileKey fileKey;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_HAS_DOWNLOAD_LIMIT = "hasDownloadLimit";
  @SerializedName(SERIALIZED_NAME_HAS_DOWNLOAD_LIMIT)
  private Boolean hasDownloadLimit;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "isEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted;

  public static final String SERIALIZED_NAME_IS_PROTECTED = "isProtected";
  @SerializedName(SERIALIZED_NAME_IS_PROTECTED)
  private Boolean isProtected;

  public static final String SERIALIZED_NAME_LIMIT_REACHED = "limitReached";
  @SerializedName(SERIALIZED_NAME_LIMIT_REACHED)
  private Boolean limitReached;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "mediaType";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_PRIVATE_KEY_CONTAINER = "privateKeyContainer";
  @SerializedName(SERIALIZED_NAME_PRIVATE_KEY_CONTAINER)
  private PrivateKeyContainer privateKeyContainer;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Long size;

  public PublicDownloadShare() {
  }

  public PublicDownloadShare createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PublicDownloadShare creatorName(String creatorName) {
    this.creatorName = creatorName;
    return this;
  }

  /**
   * Creator name
   * @return creatorName
   */
  @javax.annotation.Nonnull
  public String getCreatorName() {
    return creatorName;
  }

  public void setCreatorName(String creatorName) {
    this.creatorName = creatorName;
  }


  public PublicDownloadShare creatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
    return this;
  }

  /**
   * Creator username
   * @return creatorUsername
   */
  @javax.annotation.Nullable
  public String getCreatorUsername() {
    return creatorUsername;
  }

  public void setCreatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
  }


  public PublicDownloadShare expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration date
   * @return expireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public PublicDownloadShare fileKey(FileKey fileKey) {
    this.fileKey = fileKey;
    return this;
  }

  /**
   * Get fileKey
   * @return fileKey
   */
  @javax.annotation.Nullable
  public FileKey getFileKey() {
    return fileKey;
  }

  public void setFileKey(FileKey fileKey) {
    this.fileKey = fileKey;
  }


  public PublicDownloadShare fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * File name
   * @return fileName
   */
  @javax.annotation.Nonnull
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public PublicDownloadShare hasDownloadLimit(Boolean hasDownloadLimit) {
    this.hasDownloadLimit = hasDownloadLimit;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Determines whether Download Share has a limit for amount of downloads
   * @return hasDownloadLimit
   */
  @javax.annotation.Nonnull
  public Boolean getHasDownloadLimit() {
    return hasDownloadLimit;
  }

  public void setHasDownloadLimit(Boolean hasDownloadLimit) {
    this.hasDownloadLimit = hasDownloadLimit;
  }


  public PublicDownloadShare isEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
    return this;
  }

  /**
   * Encryption state
   * @return isEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsEncrypted() {
    return isEncrypted;
  }

  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public PublicDownloadShare isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

  /**
   * Is share protected by password
   * @return isProtected
   */
  @javax.annotation.Nonnull
  public Boolean getIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }


  public PublicDownloadShare limitReached(Boolean limitReached) {
    this.limitReached = limitReached;
    return this;
  }

  /**
   * Downloads limit reached
   * @return limitReached
   */
  @javax.annotation.Nonnull
  public Boolean getLimitReached() {
    return limitReached;
  }

  public void setLimitReached(Boolean limitReached) {
    this.limitReached = limitReached;
  }


  public PublicDownloadShare mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  * &#x60;application/zip&#x60; (for folders and rooms)  * actual file media type (for files only)
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public PublicDownloadShare name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Share display name (alias name)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PublicDownloadShare notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public PublicDownloadShare privateKeyContainer(PrivateKeyContainer privateKeyContainer) {
    this.privateKeyContainer = privateKeyContainer;
    return this;
  }

  /**
   * Get privateKeyContainer
   * @return privateKeyContainer
   */
  @javax.annotation.Nullable
  public PrivateKeyContainer getPrivateKeyContainer() {
    return privateKeyContainer;
  }

  public void setPrivateKeyContainer(PrivateKeyContainer privateKeyContainer) {
    this.privateKeyContainer = privateKeyContainer;
  }


  public PublicDownloadShare size(Long size) {
    this.size = size;
    return this;
  }

  /**
   * File size or container size not compressed (in bytes)
   * @return size
   */
  @javax.annotation.Nonnull
  public Long getSize() {
    return size;
  }

  public void setSize(Long size) {
    this.size = size;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicDownloadShare publicDownloadShare = (PublicDownloadShare) o;
    return Objects.equals(this.createdAt, publicDownloadShare.createdAt) &&
        Objects.equals(this.creatorName, publicDownloadShare.creatorName) &&
        Objects.equals(this.creatorUsername, publicDownloadShare.creatorUsername) &&
        Objects.equals(this.expireAt, publicDownloadShare.expireAt) &&
        Objects.equals(this.fileKey, publicDownloadShare.fileKey) &&
        Objects.equals(this.fileName, publicDownloadShare.fileName) &&
        Objects.equals(this.hasDownloadLimit, publicDownloadShare.hasDownloadLimit) &&
        Objects.equals(this.isEncrypted, publicDownloadShare.isEncrypted) &&
        Objects.equals(this.isProtected, publicDownloadShare.isProtected) &&
        Objects.equals(this.limitReached, publicDownloadShare.limitReached) &&
        Objects.equals(this.mediaType, publicDownloadShare.mediaType) &&
        Objects.equals(this.name, publicDownloadShare.name) &&
        Objects.equals(this.notes, publicDownloadShare.notes) &&
        Objects.equals(this.privateKeyContainer, publicDownloadShare.privateKeyContainer) &&
        Objects.equals(this.size, publicDownloadShare.size);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, creatorName, creatorUsername, expireAt, fileKey, fileName, hasDownloadLimit, isEncrypted, isProtected, limitReached, mediaType, name, notes, privateKeyContainer, size);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicDownloadShare {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorName: ").append(toIndentedString(creatorName)).append("\n");
    sb.append("    creatorUsername: ").append(toIndentedString(creatorUsername)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    fileKey: ").append(toIndentedString(fileKey)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    hasDownloadLimit: ").append(toIndentedString(hasDownloadLimit)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    limitReached: ").append(toIndentedString(limitReached)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    privateKeyContainer: ").append(toIndentedString(privateKeyContainer)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("creatorName");
    openapiFields.add("creatorUsername");
    openapiFields.add("expireAt");
    openapiFields.add("fileKey");
    openapiFields.add("fileName");
    openapiFields.add("hasDownloadLimit");
    openapiFields.add("isEncrypted");
    openapiFields.add("isProtected");
    openapiFields.add("limitReached");
    openapiFields.add("mediaType");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("privateKeyContainer");
    openapiFields.add("size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("creatorName");
    openapiRequiredFields.add("fileName");
    openapiRequiredFields.add("hasDownloadLimit");
    openapiRequiredFields.add("isProtected");
    openapiRequiredFields.add("limitReached");
    openapiRequiredFields.add("mediaType");
    openapiRequiredFields.add("size");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicDownloadShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicDownloadShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicDownloadShare is not found in the empty JSON string", PublicDownloadShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicDownloadShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicDownloadShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicDownloadShare.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("creatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorName").toString()));
      }
      if ((jsonObj.get("creatorUsername") != null && !jsonObj.get("creatorUsername").isJsonNull()) && !jsonObj.get("creatorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUsername").toString()));
      }
      // validate the optional field `fileKey`
      if (jsonObj.get("fileKey") != null && !jsonObj.get("fileKey").isJsonNull()) {
        FileKey.validateJsonElement(jsonObj.get("fileKey"));
      }
      if (!jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if (!jsonObj.get("mediaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mediaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mediaType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      // validate the optional field `privateKeyContainer`
      if (jsonObj.get("privateKeyContainer") != null && !jsonObj.get("privateKeyContainer").isJsonNull()) {
        PrivateKeyContainer.validateJsonElement(jsonObj.get("privateKeyContainer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicDownloadShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicDownloadShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicDownloadShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicDownloadShare.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicDownloadShare>() {
           @Override
           public void write(JsonWriter out, PublicDownloadShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicDownloadShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicDownloadShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicDownloadShare
   * @throws IOException if the JSON string is invalid with respect to PublicDownloadShare
   */
  public static PublicDownloadShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicDownloadShare.class);
  }

  /**
   * Convert an instance of PublicDownloadShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

