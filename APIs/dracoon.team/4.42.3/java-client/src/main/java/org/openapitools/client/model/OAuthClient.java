/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OAuth client information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OAuthClient {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY = "accessTokenValidity";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN_VALIDITY)
  private Integer accessTokenValidity;

  public static final String SERIALIZED_NAME_APPROVAL_VALIDITY = "approvalValidity";
  @SerializedName(SERIALIZED_NAME_APPROVAL_VALIDITY)
  private Integer approvalValidity;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  /**
   * Determines whether client is a confidential or public client.
   */
  @JsonAdapter(ClientTypeEnum.Adapter.class)
  public enum ClientTypeEnum {
    CONFIDENTIAL("confidential"),
    
    PUBLIC("public");

    private String value;

    ClientTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClientTypeEnum fromValue(String value) {
      for (ClientTypeEnum b : ClientTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClientTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClientTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClientTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ClientTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ClientTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "clientType";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private ClientTypeEnum clientType;

  /**
   * Authorized grant types  * &#x60;authorization_code&#x60;  * &#x60;implicit&#x60;  * &#x60;password&#x60;  * &#x60;client_credentials&#x60;  * &#x60;refresh_token&#x60;    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
   */
  @JsonAdapter(GrantTypesEnum.Adapter.class)
  public enum GrantTypesEnum {
    AUTHORIZATION_CODE("authorization_code"),
    
    CLIENT_CREDENTIALS("client_credentials"),
    
    IMPLICIT("implicit"),
    
    PASSWORD("password"),
    
    REFRESH_TOKEN("refresh_token");

    private String value;

    GrantTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GrantTypesEnum fromValue(String value) {
      for (GrantTypesEnum b : GrantTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GrantTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GrantTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GrantTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GrantTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GrantTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANT_TYPES = "grantTypes";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPES)
  private GrantTypesEnum grantTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_ENABLED = "isEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENABLED)
  private Boolean isEnabled;

  public static final String SERIALIZED_NAME_IS_EXTERNAL = "isExternal";
  @SerializedName(SERIALIZED_NAME_IS_EXTERNAL)
  private Boolean isExternal;

  public static final String SERIALIZED_NAME_IS_STANDARD = "isStandard";
  @SerializedName(SERIALIZED_NAME_IS_STANDARD)
  private Boolean isStandard;

  public static final String SERIALIZED_NAME_REDIRECT_URIS = "redirectUris";
  @SerializedName(SERIALIZED_NAME_REDIRECT_URIS)
  private List<String> redirectUris = new ArrayList<>();

  public static final String SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY = "refreshTokenValidity";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN_VALIDITY)
  private Integer refreshTokenValidity;

  public OAuthClient() {
  }

  public OAuthClient accessTokenValidity(Integer accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
    return this;
  }

  /**
   * Validity of the access token in seconds.
   * @return accessTokenValidity
   */
  @javax.annotation.Nullable
  public Integer getAccessTokenValidity() {
    return accessTokenValidity;
  }

  public void setAccessTokenValidity(Integer accessTokenValidity) {
    this.accessTokenValidity = accessTokenValidity;
  }


  public OAuthClient approvalValidity(Integer approvalValidity) {
    this.approvalValidity = approvalValidity;
    return this;
  }

  /**
   * &amp;#128640; Since v4.22.0  Validity of the approval interval in seconds.
   * @return approvalValidity
   */
  @javax.annotation.Nullable
  public Integer getApprovalValidity() {
    return approvalValidity;
  }

  public void setApprovalValidity(Integer approvalValidity) {
    this.approvalValidity = approvalValidity;
  }


  public OAuthClient clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * ID of the OAuth client
   * @return clientId
   */
  @javax.annotation.Nonnull
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public OAuthClient clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Name, which is shown at the client configuration and authorization.
   * @return clientName
   */
  @javax.annotation.Nullable
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public OAuthClient clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Secret, which client uses at authentication.
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public OAuthClient clientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * Determines whether client is a confidential or public client.
   * @return clientType
   */
  @javax.annotation.Nullable
  public ClientTypeEnum getClientType() {
    return clientType;
  }

  public void setClientType(ClientTypeEnum clientType) {
    this.clientType = clientType;
  }


  public OAuthClient grantTypes(GrantTypesEnum grantTypes) {
    this.grantTypes = grantTypes;
    return this;
  }

  public OAuthClient addGrantTypesItem(GrantTypesEnum grantTypesItem) {
    if (this.grantTypes == null) {
      this.grantTypes = new ArrayList<>();
    }
    this.grantTypes.add(grantTypesItem);
    return this;
  }

  /**
   * Authorized grant types  * &#x60;authorization_code&#x60;  * &#x60;implicit&#x60;  * &#x60;password&#x60;  * &#x60;client_credentials&#x60;  * &#x60;refresh_token&#x60;    cf. [RFC 6749](https://tools.ietf.org/html/rfc6749)
   * @return grantTypes
   */
  @javax.annotation.Nonnull
  public GrantTypesEnum getGrantTypes() {
    return grantTypes;
  }

  public void setGrantTypes(GrantTypesEnum grantTypes) {
    this.grantTypes = grantTypes;
  }


  public OAuthClient isEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
    return this;
  }

  /**
   * Determines whether client is enabled.
   * @return isEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEnabled() {
    return isEnabled;
  }

  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public OAuthClient isExternal(Boolean isExternal) {
    this.isExternal = isExternal;
    return this;
  }

  /**
   * Determines whether client is an external client.
   * @return isExternal
   */
  @javax.annotation.Nullable
  public Boolean getIsExternal() {
    return isExternal;
  }

  public void setIsExternal(Boolean isExternal) {
    this.isExternal = isExternal;
  }


  public OAuthClient isStandard(Boolean isStandard) {
    this.isStandard = isStandard;
    return this;
  }

  /**
   * Determines whether client is a standard client.
   * @return isStandard
   */
  @javax.annotation.Nullable
  public Boolean getIsStandard() {
    return isStandard;
  }

  public void setIsStandard(Boolean isStandard) {
    this.isStandard = isStandard;
  }


  public OAuthClient redirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
    return this;
  }

  public OAuthClient addRedirectUrisItem(String redirectUrisItem) {
    if (this.redirectUris == null) {
      this.redirectUris = new ArrayList<>();
    }
    this.redirectUris.add(redirectUrisItem);
    return this;
  }

  /**
   * URIs, to which a user is redirected after authorization.
   * @return redirectUris
   */
  @javax.annotation.Nullable
  public List<String> getRedirectUris() {
    return redirectUris;
  }

  public void setRedirectUris(List<String> redirectUris) {
    this.redirectUris = redirectUris;
  }


  public OAuthClient refreshTokenValidity(Integer refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
    return this;
  }

  /**
   * Validity of the refresh token in seconds.
   * @return refreshTokenValidity
   */
  @javax.annotation.Nullable
  public Integer getRefreshTokenValidity() {
    return refreshTokenValidity;
  }

  public void setRefreshTokenValidity(Integer refreshTokenValidity) {
    this.refreshTokenValidity = refreshTokenValidity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OAuthClient oauthClient = (OAuthClient) o;
    return Objects.equals(this.accessTokenValidity, oauthClient.accessTokenValidity) &&
        Objects.equals(this.approvalValidity, oauthClient.approvalValidity) &&
        Objects.equals(this.clientId, oauthClient.clientId) &&
        Objects.equals(this.clientName, oauthClient.clientName) &&
        Objects.equals(this.clientSecret, oauthClient.clientSecret) &&
        Objects.equals(this.clientType, oauthClient.clientType) &&
        Objects.equals(this.grantTypes, oauthClient.grantTypes) &&
        Objects.equals(this.isEnabled, oauthClient.isEnabled) &&
        Objects.equals(this.isExternal, oauthClient.isExternal) &&
        Objects.equals(this.isStandard, oauthClient.isStandard) &&
        Objects.equals(this.redirectUris, oauthClient.redirectUris) &&
        Objects.equals(this.refreshTokenValidity, oauthClient.refreshTokenValidity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessTokenValidity, approvalValidity, clientId, clientName, clientSecret, clientType, grantTypes, isEnabled, isExternal, isStandard, redirectUris, refreshTokenValidity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OAuthClient {\n");
    sb.append("    accessTokenValidity: ").append(toIndentedString(accessTokenValidity)).append("\n");
    sb.append("    approvalValidity: ").append(toIndentedString(approvalValidity)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    grantTypes: ").append(toIndentedString(grantTypes)).append("\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    isExternal: ").append(toIndentedString(isExternal)).append("\n");
    sb.append("    isStandard: ").append(toIndentedString(isStandard)).append("\n");
    sb.append("    redirectUris: ").append(toIndentedString(redirectUris)).append("\n");
    sb.append("    refreshTokenValidity: ").append(toIndentedString(refreshTokenValidity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessTokenValidity");
    openapiFields.add("approvalValidity");
    openapiFields.add("clientId");
    openapiFields.add("clientName");
    openapiFields.add("clientSecret");
    openapiFields.add("clientType");
    openapiFields.add("grantTypes");
    openapiFields.add("isEnabled");
    openapiFields.add("isExternal");
    openapiFields.add("isStandard");
    openapiFields.add("redirectUris");
    openapiFields.add("refreshTokenValidity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientId");
    openapiRequiredFields.add("grantTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OAuthClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OAuthClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OAuthClient is not found in the empty JSON string", OAuthClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OAuthClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OAuthClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OAuthClient.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientName") != null && !jsonObj.get("clientName").isJsonNull()) && !jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("clientType") != null && !jsonObj.get("clientType").isJsonNull()) && !jsonObj.get("clientType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientType").toString()));
      }
      // validate the optional field `clientType`
      if (jsonObj.get("clientType") != null && !jsonObj.get("clientType").isJsonNull()) {
        ClientTypeEnum.validateJsonElement(jsonObj.get("clientType"));
      }
      // ensure the required json array is present
      if (jsonObj.get("grantTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("grantTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantTypes` to be an array in the JSON string but got `%s`", jsonObj.get("grantTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("redirectUris") != null && !jsonObj.get("redirectUris").isJsonNull() && !jsonObj.get("redirectUris").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectUris` to be an array in the JSON string but got `%s`", jsonObj.get("redirectUris").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OAuthClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OAuthClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OAuthClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OAuthClient.class));

       return (TypeAdapter<T>) new TypeAdapter<OAuthClient>() {
           @Override
           public void write(JsonWriter out, OAuthClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OAuthClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OAuthClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OAuthClient
   * @throws IOException if the JSON string is invalid with respect to OAuthClient
   */
  public static OAuthClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OAuthClient.class);
  }

  /**
   * Convert an instance of OAuthClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

