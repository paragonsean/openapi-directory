/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CharacterRules;
import org.openapitools.client.model.PasswordExpiration;
import org.openapitools.client.model.UserInfo;
import org.openapitools.client.model.UserLockout;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Login password policies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoginPasswordPolicies {
  public static final String SERIALIZED_NAME_CHARACTER_RULES = "characterRules";
  @SerializedName(SERIALIZED_NAME_CHARACTER_RULES)
  private CharacterRules characterRules;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_NUMBER_OF_ARCHIVED_PASSWORDS = "numberOfArchivedPasswords";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ARCHIVED_PASSWORDS)
  private Integer numberOfArchivedPasswords;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRATION = "passwordExpiration";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRATION)
  private PasswordExpiration passwordExpiration;

  public static final String SERIALIZED_NAME_REJECT_DICTIONARY_WORDS = "rejectDictionaryWords";
  @SerializedName(SERIALIZED_NAME_REJECT_DICTIONARY_WORDS)
  private Boolean rejectDictionaryWords;

  public static final String SERIALIZED_NAME_REJECT_KEYBOARD_PATTERNS = "rejectKeyboardPatterns";
  @SerializedName(SERIALIZED_NAME_REJECT_KEYBOARD_PATTERNS)
  private Boolean rejectKeyboardPatterns;

  public static final String SERIALIZED_NAME_REJECT_USER_INFO = "rejectUserInfo";
  @SerializedName(SERIALIZED_NAME_REJECT_USER_INFO)
  private Boolean rejectUserInfo;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private UserInfo updatedBy;

  public static final String SERIALIZED_NAME_USER_LOCKOUT = "userLockout";
  @SerializedName(SERIALIZED_NAME_USER_LOCKOUT)
  private UserLockout userLockout;

  public LoginPasswordPolicies() {
  }

  public LoginPasswordPolicies characterRules(CharacterRules characterRules) {
    this.characterRules = characterRules;
    return this;
  }

  /**
   * Get characterRules
   * @return characterRules
   */
  @javax.annotation.Nonnull
  public CharacterRules getCharacterRules() {
    return characterRules;
  }

  public void setCharacterRules(CharacterRules characterRules) {
    this.characterRules = characterRules;
  }


  public LoginPasswordPolicies minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Minimum number of characters a password must contain
   * minimum: 1
   * maximum: 1024
   * @return minLength
   */
  @javax.annotation.Nonnull
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public LoginPasswordPolicies numberOfArchivedPasswords(Integer numberOfArchivedPasswords) {
    this.numberOfArchivedPasswords = numberOfArchivedPasswords;
    return this;
  }

  /**
   * Number of passwords to archive  (must be between &#x60;0&#x60; and &#x60;10&#x60;; &#x60;0&#x60; means that password history is disabled)
   * minimum: 1
   * maximum: 10
   * @return numberOfArchivedPasswords
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfArchivedPasswords() {
    return numberOfArchivedPasswords;
  }

  public void setNumberOfArchivedPasswords(Integer numberOfArchivedPasswords) {
    this.numberOfArchivedPasswords = numberOfArchivedPasswords;
  }


  public LoginPasswordPolicies passwordExpiration(PasswordExpiration passwordExpiration) {
    this.passwordExpiration = passwordExpiration;
    return this;
  }

  /**
   * Get passwordExpiration
   * @return passwordExpiration
   */
  @javax.annotation.Nonnull
  public PasswordExpiration getPasswordExpiration() {
    return passwordExpiration;
  }

  public void setPasswordExpiration(PasswordExpiration passwordExpiration) {
    this.passwordExpiration = passwordExpiration;
  }


  public LoginPasswordPolicies rejectDictionaryWords(Boolean rejectDictionaryWords) {
    this.rejectDictionaryWords = rejectDictionaryWords;
    return this;
  }

  /**
   * Determines whether a password must NOT contain word(s) from a dictionary
   * @return rejectDictionaryWords
   */
  @javax.annotation.Nonnull
  public Boolean getRejectDictionaryWords() {
    return rejectDictionaryWords;
  }

  public void setRejectDictionaryWords(Boolean rejectDictionaryWords) {
    this.rejectDictionaryWords = rejectDictionaryWords;
  }


  public LoginPasswordPolicies rejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
    this.rejectKeyboardPatterns = rejectKeyboardPatterns;
    return this;
  }

  /**
   * Determines whether a password must NOT contain keyboard patterns (e.g. &#x60;qwertz&#x60;, &#x60;asdf&#x60;)  (min. 4 character pattern)
   * @return rejectKeyboardPatterns
   */
  @javax.annotation.Nonnull
  public Boolean getRejectKeyboardPatterns() {
    return rejectKeyboardPatterns;
  }

  public void setRejectKeyboardPatterns(Boolean rejectKeyboardPatterns) {
    this.rejectKeyboardPatterns = rejectKeyboardPatterns;
  }


  public LoginPasswordPolicies rejectUserInfo(Boolean rejectUserInfo) {
    this.rejectUserInfo = rejectUserInfo;
    return this;
  }

  /**
   * Determines whether a password must NOT contain user info (first name, last name, email, user name)
   * @return rejectUserInfo
   */
  @javax.annotation.Nonnull
  public Boolean getRejectUserInfo() {
    return rejectUserInfo;
  }

  public void setRejectUserInfo(Boolean rejectUserInfo) {
    this.rejectUserInfo = rejectUserInfo;
  }


  public LoginPasswordPolicies updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Modification date
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public LoginPasswordPolicies updatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nonnull
  public UserInfo getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
  }


  public LoginPasswordPolicies userLockout(UserLockout userLockout) {
    this.userLockout = userLockout;
    return this;
  }

  /**
   * Get userLockout
   * @return userLockout
   */
  @javax.annotation.Nonnull
  public UserLockout getUserLockout() {
    return userLockout;
  }

  public void setUserLockout(UserLockout userLockout) {
    this.userLockout = userLockout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginPasswordPolicies loginPasswordPolicies = (LoginPasswordPolicies) o;
    return Objects.equals(this.characterRules, loginPasswordPolicies.characterRules) &&
        Objects.equals(this.minLength, loginPasswordPolicies.minLength) &&
        Objects.equals(this.numberOfArchivedPasswords, loginPasswordPolicies.numberOfArchivedPasswords) &&
        Objects.equals(this.passwordExpiration, loginPasswordPolicies.passwordExpiration) &&
        Objects.equals(this.rejectDictionaryWords, loginPasswordPolicies.rejectDictionaryWords) &&
        Objects.equals(this.rejectKeyboardPatterns, loginPasswordPolicies.rejectKeyboardPatterns) &&
        Objects.equals(this.rejectUserInfo, loginPasswordPolicies.rejectUserInfo) &&
        Objects.equals(this.updatedAt, loginPasswordPolicies.updatedAt) &&
        Objects.equals(this.updatedBy, loginPasswordPolicies.updatedBy) &&
        Objects.equals(this.userLockout, loginPasswordPolicies.userLockout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterRules, minLength, numberOfArchivedPasswords, passwordExpiration, rejectDictionaryWords, rejectKeyboardPatterns, rejectUserInfo, updatedAt, updatedBy, userLockout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginPasswordPolicies {\n");
    sb.append("    characterRules: ").append(toIndentedString(characterRules)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    numberOfArchivedPasswords: ").append(toIndentedString(numberOfArchivedPasswords)).append("\n");
    sb.append("    passwordExpiration: ").append(toIndentedString(passwordExpiration)).append("\n");
    sb.append("    rejectDictionaryWords: ").append(toIndentedString(rejectDictionaryWords)).append("\n");
    sb.append("    rejectKeyboardPatterns: ").append(toIndentedString(rejectKeyboardPatterns)).append("\n");
    sb.append("    rejectUserInfo: ").append(toIndentedString(rejectUserInfo)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("    userLockout: ").append(toIndentedString(userLockout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterRules");
    openapiFields.add("minLength");
    openapiFields.add("numberOfArchivedPasswords");
    openapiFields.add("passwordExpiration");
    openapiFields.add("rejectDictionaryWords");
    openapiFields.add("rejectKeyboardPatterns");
    openapiFields.add("rejectUserInfo");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");
    openapiFields.add("userLockout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("characterRules");
    openapiRequiredFields.add("minLength");
    openapiRequiredFields.add("numberOfArchivedPasswords");
    openapiRequiredFields.add("passwordExpiration");
    openapiRequiredFields.add("rejectDictionaryWords");
    openapiRequiredFields.add("rejectKeyboardPatterns");
    openapiRequiredFields.add("rejectUserInfo");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("updatedBy");
    openapiRequiredFields.add("userLockout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginPasswordPolicies
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginPasswordPolicies.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginPasswordPolicies is not found in the empty JSON string", LoginPasswordPolicies.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginPasswordPolicies.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginPasswordPolicies` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoginPasswordPolicies.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `characterRules`
      CharacterRules.validateJsonElement(jsonObj.get("characterRules"));
      // validate the required field `passwordExpiration`
      PasswordExpiration.validateJsonElement(jsonObj.get("passwordExpiration"));
      // validate the required field `updatedBy`
      UserInfo.validateJsonElement(jsonObj.get("updatedBy"));
      // validate the required field `userLockout`
      UserLockout.validateJsonElement(jsonObj.get("userLockout"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginPasswordPolicies.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginPasswordPolicies' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginPasswordPolicies> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginPasswordPolicies.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginPasswordPolicies>() {
           @Override
           public void write(JsonWriter out, LoginPasswordPolicies value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginPasswordPolicies read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginPasswordPolicies given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginPasswordPolicies
   * @throws IOException if the JSON string is invalid with respect to LoginPasswordPolicies
   */
  public static LoginPasswordPolicies fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginPasswordPolicies.class);
  }

  /**
   * Convert an instance of LoginPasswordPolicies to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

