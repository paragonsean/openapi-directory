/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Download Share information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadShare {
  public static final String SERIALIZED_NAME_ACCESS_KEY = "accessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  /**
   * &amp;#128679; Deprecated since v4.11.0  Classification ID:  * &#x60;1&#x60; - public  * &#x60;2&#x60; - internal  * &#x60;3&#x60; - confidential  * &#x60;4&#x60; - strictly confidential    (default: classification from parent room)
   */
  @JsonAdapter(ClassificationEnum.Adapter.class)
  public enum ClassificationEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    ClassificationEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ClassificationEnum fromValue(Integer value) {
      for (ClassificationEnum b : ClassificationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ClassificationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ClassificationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ClassificationEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return ClassificationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      ClassificationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CLASSIFICATION = "classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private ClassificationEnum classification;

  public static final String SERIALIZED_NAME_CNT_DOWNLOADS = "cntDownloads";
  @SerializedName(SERIALIZED_NAME_CNT_DOWNLOADS)
  private Integer cntDownloads;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserInfo createdBy;

  public static final String SERIALIZED_NAME_DATA_URL = "dataUrl";
  @SerializedName(SERIALIZED_NAME_DATA_URL)
  private String dataUrl;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INTERNAL_NOTES = "internalNotes";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NOTES)
  private String internalNotes;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "isEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted;

  public static final String SERIALIZED_NAME_IS_PROTECTED = "isProtected";
  @SerializedName(SERIALIZED_NAME_IS_PROTECTED)
  private Boolean isProtected;

  public static final String SERIALIZED_NAME_MAX_DOWNLOADS = "maxDownloads";
  @SerializedName(SERIALIZED_NAME_MAX_DOWNLOADS)
  private Integer maxDownloads;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private Long nodeId;

  public static final String SERIALIZED_NAME_NODE_PATH = "nodePath";
  @SerializedName(SERIALIZED_NAME_NODE_PATH)
  private String nodePath;

  public static final String SERIALIZED_NAME_NODE_TYPE = "nodeType";
  @SerializedName(SERIALIZED_NAME_NODE_TYPE)
  private String nodeType;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NOTIFY_CREATOR = "notifyCreator";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NOTIFY_CREATOR)
  private Boolean notifyCreator;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private String recipients;

  public static final String SERIALIZED_NAME_SHOW_CREATOR_NAME = "showCreatorName";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATOR_NAME)
  private Boolean showCreatorName;

  public static final String SERIALIZED_NAME_SHOW_CREATOR_USERNAME = "showCreatorUsername";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATOR_USERNAME)
  private Boolean showCreatorUsername;

  public static final String SERIALIZED_NAME_SMS_RECIPIENTS = "smsRecipients";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SMS_RECIPIENTS)
  private String smsRecipients;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private UserInfo updatedBy;

  public DownloadShare() {
  }

  public DownloadShare accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Share access key to generate secure link
   * @return accessKey
   */
  @javax.annotation.Nonnull
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public DownloadShare classification(ClassificationEnum classification) {
    this.classification = classification;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.11.0  Classification ID:  * &#x60;1&#x60; - public  * &#x60;2&#x60; - internal  * &#x60;3&#x60; - confidential  * &#x60;4&#x60; - strictly confidential    (default: classification from parent room)
   * @return classification
   */
  @javax.annotation.Nullable
  public ClassificationEnum getClassification() {
    return classification;
  }

  public void setClassification(ClassificationEnum classification) {
    this.classification = classification;
  }


  public DownloadShare cntDownloads(Integer cntDownloads) {
    this.cntDownloads = cntDownloads;
    return this;
  }

  /**
   * Downloads counter (incremented on each download)
   * @return cntDownloads
   */
  @javax.annotation.Nonnull
  public Integer getCntDownloads() {
    return cntDownloads;
  }

  public void setCntDownloads(Integer cntDownloads) {
    this.cntDownloads = cntDownloads;
  }


  public DownloadShare createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DownloadShare createdBy(UserInfo createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public UserInfo getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserInfo createdBy) {
    this.createdBy = createdBy;
  }


  public DownloadShare dataUrl(String dataUrl) {
    this.dataUrl = dataUrl;
    return this;
  }

  /**
   * Path to shared download node
   * @return dataUrl
   */
  @javax.annotation.Nullable
  public String getDataUrl() {
    return dataUrl;
  }

  public void setDataUrl(String dataUrl) {
    this.dataUrl = dataUrl;
  }


  public DownloadShare expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration date
   * @return expireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public DownloadShare id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Share ID
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public DownloadShare internalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Internal notes
   * @return internalNotes
   */
  @javax.annotation.Nullable
  public String getInternalNotes() {
    return internalNotes;
  }

  public void setInternalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
  }


  public DownloadShare isEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
    return this;
  }

  /**
   * Encrypted share  (this only applies to shared files, not folders)
   * @return isEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsEncrypted() {
    return isEncrypted;
  }

  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public DownloadShare isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

  /**
   * Is share protected by password
   * @return isProtected
   */
  @javax.annotation.Nullable
  public Boolean getIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }


  public DownloadShare maxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
    return this;
  }

  /**
   * Max allowed downloads
   * @return maxDownloads
   */
  @javax.annotation.Nullable
  public Integer getMaxDownloads() {
    return maxDownloads;
  }

  public void setMaxDownloads(Integer maxDownloads) {
    this.maxDownloads = maxDownloads;
  }


  public DownloadShare name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Alias name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DownloadShare nodeId(Long nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Source node ID
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public Long getNodeId() {
    return nodeId;
  }

  public void setNodeId(Long nodeId) {
    this.nodeId = nodeId;
  }


  public DownloadShare nodePath(String nodePath) {
    this.nodePath = nodePath;
    return this;
  }

  /**
   * Path to shared download node
   * @return nodePath
   */
  @javax.annotation.Nullable
  public String getNodePath() {
    return nodePath;
  }

  public void setNodePath(String nodePath) {
    this.nodePath = nodePath;
  }


  public DownloadShare nodeType(String nodeType) {
    this.nodeType = nodeType;
    return this;
  }

  /**
   * Node type
   * @return nodeType
   */
  @javax.annotation.Nullable
  public String getNodeType() {
    return nodeType;
  }

  public void setNodeType(String nodeType) {
    this.nodeType = nodeType;
  }


  public DownloadShare notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  @Deprecated
  public DownloadShare notifyCreator(Boolean notifyCreator) {
    this.notifyCreator = notifyCreator;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.20.0  Notify creator on every download.
   * @return notifyCreator
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getNotifyCreator() {
    return notifyCreator;
  }

  @Deprecated
  public void setNotifyCreator(Boolean notifyCreator) {
    this.notifyCreator = notifyCreator;
  }


  @Deprecated
  public DownloadShare recipients(String recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.11.0  CSV string of recipient email addresses
   * @return recipients
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getRecipients() {
    return recipients;
  }

  @Deprecated
  public void setRecipients(String recipients) {
    this.recipients = recipients;
  }


  public DownloadShare showCreatorName(Boolean showCreatorName) {
    this.showCreatorName = showCreatorName;
    return this;
  }

  /**
   * Show creator first and last name.
   * @return showCreatorName
   */
  @javax.annotation.Nullable
  public Boolean getShowCreatorName() {
    return showCreatorName;
  }

  public void setShowCreatorName(Boolean showCreatorName) {
    this.showCreatorName = showCreatorName;
  }


  public DownloadShare showCreatorUsername(Boolean showCreatorUsername) {
    this.showCreatorUsername = showCreatorUsername;
    return this;
  }

  /**
   * Show creator email address.
   * @return showCreatorUsername
   */
  @javax.annotation.Nullable
  public Boolean getShowCreatorUsername() {
    return showCreatorUsername;
  }

  public void setShowCreatorUsername(Boolean showCreatorUsername) {
    this.showCreatorUsername = showCreatorUsername;
  }


  @Deprecated
  public DownloadShare smsRecipients(String smsRecipients) {
    this.smsRecipients = smsRecipients;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs
   * @return smsRecipients
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSmsRecipients() {
    return smsRecipients;
  }

  @Deprecated
  public void setSmsRecipients(String smsRecipients) {
    this.smsRecipients = smsRecipients;
  }


  public DownloadShare updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Modification date
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DownloadShare updatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public UserInfo getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadShare downloadShare = (DownloadShare) o;
    return Objects.equals(this.accessKey, downloadShare.accessKey) &&
        Objects.equals(this.classification, downloadShare.classification) &&
        Objects.equals(this.cntDownloads, downloadShare.cntDownloads) &&
        Objects.equals(this.createdAt, downloadShare.createdAt) &&
        Objects.equals(this.createdBy, downloadShare.createdBy) &&
        Objects.equals(this.dataUrl, downloadShare.dataUrl) &&
        Objects.equals(this.expireAt, downloadShare.expireAt) &&
        Objects.equals(this.id, downloadShare.id) &&
        Objects.equals(this.internalNotes, downloadShare.internalNotes) &&
        Objects.equals(this.isEncrypted, downloadShare.isEncrypted) &&
        Objects.equals(this.isProtected, downloadShare.isProtected) &&
        Objects.equals(this.maxDownloads, downloadShare.maxDownloads) &&
        Objects.equals(this.name, downloadShare.name) &&
        Objects.equals(this.nodeId, downloadShare.nodeId) &&
        Objects.equals(this.nodePath, downloadShare.nodePath) &&
        Objects.equals(this.nodeType, downloadShare.nodeType) &&
        Objects.equals(this.notes, downloadShare.notes) &&
        Objects.equals(this.notifyCreator, downloadShare.notifyCreator) &&
        Objects.equals(this.recipients, downloadShare.recipients) &&
        Objects.equals(this.showCreatorName, downloadShare.showCreatorName) &&
        Objects.equals(this.showCreatorUsername, downloadShare.showCreatorUsername) &&
        Objects.equals(this.smsRecipients, downloadShare.smsRecipients) &&
        Objects.equals(this.updatedAt, downloadShare.updatedAt) &&
        Objects.equals(this.updatedBy, downloadShare.updatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKey, classification, cntDownloads, createdAt, createdBy, dataUrl, expireAt, id, internalNotes, isEncrypted, isProtected, maxDownloads, name, nodeId, nodePath, nodeType, notes, notifyCreator, recipients, showCreatorName, showCreatorUsername, smsRecipients, updatedAt, updatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadShare {\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    cntDownloads: ").append(toIndentedString(cntDownloads)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dataUrl: ").append(toIndentedString(dataUrl)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalNotes: ").append(toIndentedString(internalNotes)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    maxDownloads: ").append(toIndentedString(maxDownloads)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodePath: ").append(toIndentedString(nodePath)).append("\n");
    sb.append("    nodeType: ").append(toIndentedString(nodeType)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    notifyCreator: ").append(toIndentedString(notifyCreator)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    showCreatorName: ").append(toIndentedString(showCreatorName)).append("\n");
    sb.append("    showCreatorUsername: ").append(toIndentedString(showCreatorUsername)).append("\n");
    sb.append("    smsRecipients: ").append(toIndentedString(smsRecipients)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessKey");
    openapiFields.add("classification");
    openapiFields.add("cntDownloads");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("dataUrl");
    openapiFields.add("expireAt");
    openapiFields.add("id");
    openapiFields.add("internalNotes");
    openapiFields.add("isEncrypted");
    openapiFields.add("isProtected");
    openapiFields.add("maxDownloads");
    openapiFields.add("name");
    openapiFields.add("nodeId");
    openapiFields.add("nodePath");
    openapiFields.add("nodeType");
    openapiFields.add("notes");
    openapiFields.add("notifyCreator");
    openapiFields.add("recipients");
    openapiFields.add("showCreatorName");
    openapiFields.add("showCreatorUsername");
    openapiFields.add("smsRecipients");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessKey");
    openapiRequiredFields.add("cntDownloads");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nodeId");
    openapiRequiredFields.add("notifyCreator");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadShare is not found in the empty JSON string", DownloadShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DownloadShare.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessKey").toString()));
      }
      // validate the optional field `classification`
      if (jsonObj.get("classification") != null && !jsonObj.get("classification").isJsonNull()) {
        ClassificationEnum.validateJsonElement(jsonObj.get("classification"));
      }
      // validate the required field `createdBy`
      UserInfo.validateJsonElement(jsonObj.get("createdBy"));
      if ((jsonObj.get("dataUrl") != null && !jsonObj.get("dataUrl").isJsonNull()) && !jsonObj.get("dataUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataUrl").toString()));
      }
      if ((jsonObj.get("internalNotes") != null && !jsonObj.get("internalNotes").isJsonNull()) && !jsonObj.get("internalNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalNotes").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nodePath") != null && !jsonObj.get("nodePath").isJsonNull()) && !jsonObj.get("nodePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodePath").toString()));
      }
      if ((jsonObj.get("nodeType") != null && !jsonObj.get("nodeType").isJsonNull()) && !jsonObj.get("nodeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeType").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) && !jsonObj.get("recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("smsRecipients") != null && !jsonObj.get("smsRecipients").isJsonNull()) && !jsonObj.get("smsRecipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsRecipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsRecipients").toString()));
      }
      // validate the optional field `updatedBy`
      if (jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) {
        UserInfo.validateJsonElement(jsonObj.get("updatedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadShare.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadShare>() {
           @Override
           public void write(JsonWriter out, DownloadShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadShare
   * @throws IOException if the JSON string is invalid with respect to DownloadShare
   */
  public static DownloadShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadShare.class);
  }

  /**
   * Convert an instance of DownloadShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

