/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NodePermissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audit user permissions report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditUserPermission {
  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private NodePermissions permissions;

  public static final String SERIALIZED_NAME_USER_FIRST_NAME = "userFirstName";
  @SerializedName(SERIALIZED_NAME_USER_FIRST_NAME)
  private String userFirstName;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_USER_LAST_NAME = "userLastName";
  @SerializedName(SERIALIZED_NAME_USER_LAST_NAME)
  private String userLastName;

  public static final String SERIALIZED_NAME_USER_LOGIN = "userLogin";
  @SerializedName(SERIALIZED_NAME_USER_LOGIN)
  private String userLogin;

  public AuditUserPermission() {
  }

  public AuditUserPermission permissions(NodePermissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nonnull
  public NodePermissions getPermissions() {
    return permissions;
  }

  public void setPermissions(NodePermissions permissions) {
    this.permissions = permissions;
  }


  public AuditUserPermission userFirstName(String userFirstName) {
    this.userFirstName = userFirstName;
    return this;
  }

  /**
   * User first name
   * @return userFirstName
   */
  @javax.annotation.Nonnull
  public String getUserFirstName() {
    return userFirstName;
  }

  public void setUserFirstName(String userFirstName) {
    this.userFirstName = userFirstName;
  }


  public AuditUserPermission userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier for the user
   * @return userId
   */
  @javax.annotation.Nonnull
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public AuditUserPermission userLastName(String userLastName) {
    this.userLastName = userLastName;
    return this;
  }

  /**
   * User last name
   * @return userLastName
   */
  @javax.annotation.Nonnull
  public String getUserLastName() {
    return userLastName;
  }

  public void setUserLastName(String userLastName) {
    this.userLastName = userLastName;
  }


  public AuditUserPermission userLogin(String userLogin) {
    this.userLogin = userLogin;
    return this;
  }

  /**
   * User login name
   * @return userLogin
   */
  @javax.annotation.Nonnull
  public String getUserLogin() {
    return userLogin;
  }

  public void setUserLogin(String userLogin) {
    this.userLogin = userLogin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditUserPermission auditUserPermission = (AuditUserPermission) o;
    return Objects.equals(this.permissions, auditUserPermission.permissions) &&
        Objects.equals(this.userFirstName, auditUserPermission.userFirstName) &&
        Objects.equals(this.userId, auditUserPermission.userId) &&
        Objects.equals(this.userLastName, auditUserPermission.userLastName) &&
        Objects.equals(this.userLogin, auditUserPermission.userLogin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissions, userFirstName, userId, userLastName, userLogin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditUserPermission {\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    userFirstName: ").append(toIndentedString(userFirstName)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userLastName: ").append(toIndentedString(userLastName)).append("\n");
    sb.append("    userLogin: ").append(toIndentedString(userLogin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permissions");
    openapiFields.add("userFirstName");
    openapiFields.add("userId");
    openapiFields.add("userLastName");
    openapiFields.add("userLogin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("userFirstName");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("userLastName");
    openapiRequiredFields.add("userLogin");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditUserPermission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditUserPermission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditUserPermission is not found in the empty JSON string", AuditUserPermission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditUserPermission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditUserPermission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuditUserPermission.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `permissions`
      NodePermissions.validateJsonElement(jsonObj.get("permissions"));
      if (!jsonObj.get("userFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userFirstName").toString()));
      }
      if (!jsonObj.get("userLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLastName").toString()));
      }
      if (!jsonObj.get("userLogin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userLogin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userLogin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditUserPermission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditUserPermission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditUserPermission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditUserPermission.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditUserPermission>() {
           @Override
           public void write(JsonWriter out, AuditUserPermission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditUserPermission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditUserPermission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditUserPermission
   * @throws IOException if the JSON string is invalid with respect to AuditUserPermission
   */
  public static AuditUserPermission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditUserPermission.class);
  }

  /**
   * Convert an instance of AuditUserPermission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

