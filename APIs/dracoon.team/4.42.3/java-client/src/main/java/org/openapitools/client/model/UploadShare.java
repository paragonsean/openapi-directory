/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Upload Share information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UploadShare {
  public static final String SERIALIZED_NAME_ACCESS_KEY = "accessKey";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY)
  private String accessKey;

  public static final String SERIALIZED_NAME_CNT_FILES = "cntFiles";
  @SerializedName(SERIALIZED_NAME_CNT_FILES)
  private Integer cntFiles;

  public static final String SERIALIZED_NAME_CNT_UPLOADS = "cntUploads";
  @SerializedName(SERIALIZED_NAME_CNT_UPLOADS)
  private Integer cntUploads;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserInfo createdBy;

  public static final String SERIALIZED_NAME_DATA_URL = "dataUrl";
  @SerializedName(SERIALIZED_NAME_DATA_URL)
  private String dataUrl;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_FILES_EXPIRY_PERIOD = "filesExpiryPeriod";
  @SerializedName(SERIALIZED_NAME_FILES_EXPIRY_PERIOD)
  private Integer filesExpiryPeriod;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_INTERNAL_NOTES = "internalNotes";
  @SerializedName(SERIALIZED_NAME_INTERNAL_NOTES)
  private String internalNotes;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "isEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted;

  public static final String SERIALIZED_NAME_IS_PROTECTED = "isProtected";
  @SerializedName(SERIALIZED_NAME_IS_PROTECTED)
  private Boolean isProtected;

  public static final String SERIALIZED_NAME_MAX_SIZE = "maxSize";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE)
  private Long maxSize;

  public static final String SERIALIZED_NAME_MAX_SLOTS = "maxSlots";
  @SerializedName(SERIALIZED_NAME_MAX_SLOTS)
  private Integer maxSlots;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_NOTIFY_CREATOR = "notifyCreator";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NOTIFY_CREATOR)
  private Boolean notifyCreator;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private String recipients;

  public static final String SERIALIZED_NAME_SHOW_CREATOR_NAME = "showCreatorName";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATOR_NAME)
  private Boolean showCreatorName;

  public static final String SERIALIZED_NAME_SHOW_CREATOR_USERNAME = "showCreatorUsername";
  @SerializedName(SERIALIZED_NAME_SHOW_CREATOR_USERNAME)
  private Boolean showCreatorUsername;

  public static final String SERIALIZED_NAME_SHOW_UPLOADED_FILES = "showUploadedFiles";
  @SerializedName(SERIALIZED_NAME_SHOW_UPLOADED_FILES)
  private Boolean showUploadedFiles;

  public static final String SERIALIZED_NAME_SMS_RECIPIENTS = "smsRecipients";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SMS_RECIPIENTS)
  private String smsRecipients;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private Long targetId;

  public static final String SERIALIZED_NAME_TARGET_PATH = "targetPath";
  @SerializedName(SERIALIZED_NAME_TARGET_PATH)
  private String targetPath;

  public static final String SERIALIZED_NAME_TARGET_TYPE = "targetType";
  @SerializedName(SERIALIZED_NAME_TARGET_TYPE)
  private String targetType;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPDATED_BY = "updatedBy";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY)
  private UserInfo updatedBy;

  public UploadShare() {
  }

  public UploadShare accessKey(String accessKey) {
    this.accessKey = accessKey;
    return this;
  }

  /**
   * Share access key to generate secure link
   * @return accessKey
   */
  @javax.annotation.Nonnull
  public String getAccessKey() {
    return accessKey;
  }

  public void setAccessKey(String accessKey) {
    this.accessKey = accessKey;
  }


  public UploadShare cntFiles(Integer cntFiles) {
    this.cntFiles = cntFiles;
    return this;
  }

  /**
   * Total amount of existing files uploaded with this share.
   * @return cntFiles
   */
  @javax.annotation.Nullable
  public Integer getCntFiles() {
    return cntFiles;
  }

  public void setCntFiles(Integer cntFiles) {
    this.cntFiles = cntFiles;
  }


  public UploadShare cntUploads(Integer cntUploads) {
    this.cntUploads = cntUploads;
    return this;
  }

  /**
   * Total amount of uploads conducted with this share.
   * @return cntUploads
   */
  @javax.annotation.Nullable
  public Integer getCntUploads() {
    return cntUploads;
  }

  public void setCntUploads(Integer cntUploads) {
    this.cntUploads = cntUploads;
  }


  public UploadShare createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UploadShare createdBy(UserInfo createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nonnull
  public UserInfo getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserInfo createdBy) {
    this.createdBy = createdBy;
  }


  public UploadShare dataUrl(String dataUrl) {
    this.dataUrl = dataUrl;
    return this;
  }

  /**
   * Upload Share URL
   * @return dataUrl
   */
  @javax.annotation.Nullable
  public String getDataUrl() {
    return dataUrl;
  }

  public void setDataUrl(String dataUrl) {
    this.dataUrl = dataUrl;
  }


  public UploadShare expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration date
   * @return expireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public UploadShare filesExpiryPeriod(Integer filesExpiryPeriod) {
    this.filesExpiryPeriod = filesExpiryPeriod;
    return this;
  }

  /**
   * Number of days after which uploaded files expire
   * @return filesExpiryPeriod
   */
  @javax.annotation.Nullable
  public Integer getFilesExpiryPeriod() {
    return filesExpiryPeriod;
  }

  public void setFilesExpiryPeriod(Integer filesExpiryPeriod) {
    this.filesExpiryPeriod = filesExpiryPeriod;
  }


  public UploadShare id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Share ID
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public UploadShare internalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Internal notes
   * @return internalNotes
   */
  @javax.annotation.Nullable
  public String getInternalNotes() {
    return internalNotes;
  }

  public void setInternalNotes(String internalNotes) {
    this.internalNotes = internalNotes;
  }


  public UploadShare isEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
    return this;
  }

  /**
   * Encryption state
   * @return isEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsEncrypted() {
    return isEncrypted;
  }

  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public UploadShare isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

  /**
   * Is share protected by password
   * @return isProtected
   */
  @javax.annotation.Nonnull
  public Boolean getIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }


  public UploadShare maxSize(Long maxSize) {
    this.maxSize = maxSize;
    return this;
  }

  /**
   * Maximal total size of uploaded files (in bytes)
   * @return maxSize
   */
  @javax.annotation.Nullable
  public Long getMaxSize() {
    return maxSize;
  }

  public void setMaxSize(Long maxSize) {
    this.maxSize = maxSize;
  }


  public UploadShare maxSlots(Integer maxSlots) {
    this.maxSlots = maxSlots;
    return this;
  }

  /**
   * Maximal amount of files to upload
   * @return maxSlots
   */
  @javax.annotation.Nullable
  public Integer getMaxSlots() {
    return maxSlots;
  }

  public void setMaxSlots(Integer maxSlots) {
    this.maxSlots = maxSlots;
  }


  public UploadShare name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Alias name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UploadShare notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  @Deprecated
  public UploadShare notifyCreator(Boolean notifyCreator) {
    this.notifyCreator = notifyCreator;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.20.0  Notify creator on every upload.
   * @return notifyCreator
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getNotifyCreator() {
    return notifyCreator;
  }

  @Deprecated
  public void setNotifyCreator(Boolean notifyCreator) {
    this.notifyCreator = notifyCreator;
  }


  @Deprecated
  public UploadShare recipients(String recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.11.0  CSV string of recipient email addresses
   * @return recipients
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getRecipients() {
    return recipients;
  }

  @Deprecated
  public void setRecipients(String recipients) {
    this.recipients = recipients;
  }


  public UploadShare showCreatorName(Boolean showCreatorName) {
    this.showCreatorName = showCreatorName;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Show creator first and last name.
   * @return showCreatorName
   */
  @javax.annotation.Nullable
  public Boolean getShowCreatorName() {
    return showCreatorName;
  }

  public void setShowCreatorName(Boolean showCreatorName) {
    this.showCreatorName = showCreatorName;
  }


  public UploadShare showCreatorUsername(Boolean showCreatorUsername) {
    this.showCreatorUsername = showCreatorUsername;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Show creator email address.
   * @return showCreatorUsername
   */
  @javax.annotation.Nullable
  public Boolean getShowCreatorUsername() {
    return showCreatorUsername;
  }

  public void setShowCreatorUsername(Boolean showCreatorUsername) {
    this.showCreatorUsername = showCreatorUsername;
  }


  public UploadShare showUploadedFiles(Boolean showUploadedFiles) {
    this.showUploadedFiles = showUploadedFiles;
    return this;
  }

  /**
   * Allow display of already uploaded files
   * @return showUploadedFiles
   */
  @javax.annotation.Nullable
  public Boolean getShowUploadedFiles() {
    return showUploadedFiles;
  }

  public void setShowUploadedFiles(Boolean showUploadedFiles) {
    this.showUploadedFiles = showUploadedFiles;
  }


  @Deprecated
  public UploadShare smsRecipients(String smsRecipients) {
    this.smsRecipients = smsRecipients;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.11.0  CSV string of recipient MSISDNs
   * @return smsRecipients
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getSmsRecipients() {
    return smsRecipients;
  }

  @Deprecated
  public void setSmsRecipients(String smsRecipients) {
    this.smsRecipients = smsRecipients;
  }


  public UploadShare targetId(Long targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Target room or folder ID
   * @return targetId
   */
  @javax.annotation.Nonnull
  public Long getTargetId() {
    return targetId;
  }

  public void setTargetId(Long targetId) {
    this.targetId = targetId;
  }


  public UploadShare targetPath(String targetPath) {
    this.targetPath = targetPath;
    return this;
  }

  /**
   * Path to shared upload node
   * @return targetPath
   */
  @javax.annotation.Nullable
  public String getTargetPath() {
    return targetPath;
  }

  public void setTargetPath(String targetPath) {
    this.targetPath = targetPath;
  }


  public UploadShare targetType(String targetType) {
    this.targetType = targetType;
    return this;
  }

  /**
   * Node type
   * @return targetType
   */
  @javax.annotation.Nullable
  public String getTargetType() {
    return targetType;
  }

  public void setTargetType(String targetType) {
    this.targetType = targetType;
  }


  public UploadShare updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Modification date
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UploadShare updatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
    return this;
  }

  /**
   * Get updatedBy
   * @return updatedBy
   */
  @javax.annotation.Nullable
  public UserInfo getUpdatedBy() {
    return updatedBy;
  }

  public void setUpdatedBy(UserInfo updatedBy) {
    this.updatedBy = updatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadShare uploadShare = (UploadShare) o;
    return Objects.equals(this.accessKey, uploadShare.accessKey) &&
        Objects.equals(this.cntFiles, uploadShare.cntFiles) &&
        Objects.equals(this.cntUploads, uploadShare.cntUploads) &&
        Objects.equals(this.createdAt, uploadShare.createdAt) &&
        Objects.equals(this.createdBy, uploadShare.createdBy) &&
        Objects.equals(this.dataUrl, uploadShare.dataUrl) &&
        Objects.equals(this.expireAt, uploadShare.expireAt) &&
        Objects.equals(this.filesExpiryPeriod, uploadShare.filesExpiryPeriod) &&
        Objects.equals(this.id, uploadShare.id) &&
        Objects.equals(this.internalNotes, uploadShare.internalNotes) &&
        Objects.equals(this.isEncrypted, uploadShare.isEncrypted) &&
        Objects.equals(this.isProtected, uploadShare.isProtected) &&
        Objects.equals(this.maxSize, uploadShare.maxSize) &&
        Objects.equals(this.maxSlots, uploadShare.maxSlots) &&
        Objects.equals(this.name, uploadShare.name) &&
        Objects.equals(this.notes, uploadShare.notes) &&
        Objects.equals(this.notifyCreator, uploadShare.notifyCreator) &&
        Objects.equals(this.recipients, uploadShare.recipients) &&
        Objects.equals(this.showCreatorName, uploadShare.showCreatorName) &&
        Objects.equals(this.showCreatorUsername, uploadShare.showCreatorUsername) &&
        Objects.equals(this.showUploadedFiles, uploadShare.showUploadedFiles) &&
        Objects.equals(this.smsRecipients, uploadShare.smsRecipients) &&
        Objects.equals(this.targetId, uploadShare.targetId) &&
        Objects.equals(this.targetPath, uploadShare.targetPath) &&
        Objects.equals(this.targetType, uploadShare.targetType) &&
        Objects.equals(this.updatedAt, uploadShare.updatedAt) &&
        Objects.equals(this.updatedBy, uploadShare.updatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKey, cntFiles, cntUploads, createdAt, createdBy, dataUrl, expireAt, filesExpiryPeriod, id, internalNotes, isEncrypted, isProtected, maxSize, maxSlots, name, notes, notifyCreator, recipients, showCreatorName, showCreatorUsername, showUploadedFiles, smsRecipients, targetId, targetPath, targetType, updatedAt, updatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadShare {\n");
    sb.append("    accessKey: ").append(toIndentedString(accessKey)).append("\n");
    sb.append("    cntFiles: ").append(toIndentedString(cntFiles)).append("\n");
    sb.append("    cntUploads: ").append(toIndentedString(cntUploads)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    dataUrl: ").append(toIndentedString(dataUrl)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    filesExpiryPeriod: ").append(toIndentedString(filesExpiryPeriod)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    internalNotes: ").append(toIndentedString(internalNotes)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    maxSize: ").append(toIndentedString(maxSize)).append("\n");
    sb.append("    maxSlots: ").append(toIndentedString(maxSlots)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    notifyCreator: ").append(toIndentedString(notifyCreator)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    showCreatorName: ").append(toIndentedString(showCreatorName)).append("\n");
    sb.append("    showCreatorUsername: ").append(toIndentedString(showCreatorUsername)).append("\n");
    sb.append("    showUploadedFiles: ").append(toIndentedString(showUploadedFiles)).append("\n");
    sb.append("    smsRecipients: ").append(toIndentedString(smsRecipients)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetPath: ").append(toIndentedString(targetPath)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    updatedBy: ").append(toIndentedString(updatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessKey");
    openapiFields.add("cntFiles");
    openapiFields.add("cntUploads");
    openapiFields.add("createdAt");
    openapiFields.add("createdBy");
    openapiFields.add("dataUrl");
    openapiFields.add("expireAt");
    openapiFields.add("filesExpiryPeriod");
    openapiFields.add("id");
    openapiFields.add("internalNotes");
    openapiFields.add("isEncrypted");
    openapiFields.add("isProtected");
    openapiFields.add("maxSize");
    openapiFields.add("maxSlots");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("notifyCreator");
    openapiFields.add("recipients");
    openapiFields.add("showCreatorName");
    openapiFields.add("showCreatorUsername");
    openapiFields.add("showUploadedFiles");
    openapiFields.add("smsRecipients");
    openapiFields.add("targetId");
    openapiFields.add("targetPath");
    openapiFields.add("targetType");
    openapiFields.add("updatedAt");
    openapiFields.add("updatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessKey");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("createdBy");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isProtected");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("notifyCreator");
    openapiRequiredFields.add("targetId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UploadShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UploadShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadShare is not found in the empty JSON string", UploadShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UploadShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadShare.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accessKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessKey").toString()));
      }
      // validate the required field `createdBy`
      UserInfo.validateJsonElement(jsonObj.get("createdBy"));
      if ((jsonObj.get("dataUrl") != null && !jsonObj.get("dataUrl").isJsonNull()) && !jsonObj.get("dataUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataUrl").toString()));
      }
      if ((jsonObj.get("internalNotes") != null && !jsonObj.get("internalNotes").isJsonNull()) && !jsonObj.get("internalNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `internalNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("internalNotes").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) && !jsonObj.get("recipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("smsRecipients") != null && !jsonObj.get("smsRecipients").isJsonNull()) && !jsonObj.get("smsRecipients").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsRecipients` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsRecipients").toString()));
      }
      if ((jsonObj.get("targetPath") != null && !jsonObj.get("targetPath").isJsonNull()) && !jsonObj.get("targetPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPath").toString()));
      }
      if ((jsonObj.get("targetType") != null && !jsonObj.get("targetType").isJsonNull()) && !jsonObj.get("targetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetType").toString()));
      }
      // validate the optional field `updatedBy`
      if (jsonObj.get("updatedBy") != null && !jsonObj.get("updatedBy").isJsonNull()) {
        UserInfo.validateJsonElement(jsonObj.get("updatedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadShare.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadShare>() {
           @Override
           public void write(JsonWriter out, UploadShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UploadShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UploadShare
   * @throws IOException if the JSON string is invalid with respect to UploadShare
   */
  public static UploadShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadShare.class);
  }

  /**
   * Convert an instance of UploadShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

