/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerData {
  public static final String SERIALIZED_NAME_ACCOUNTS_LIMIT = "accountsLimit";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_LIMIT)
  private Integer accountsLimit;

  public static final String SERIALIZED_NAME_ACCOUNTS_USED = "accountsUsed";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS_USED)
  private Integer accountsUsed;

  public static final String SERIALIZED_NAME_CNT_GUEST_USER = "cntGuestUser";
  @SerializedName(SERIALIZED_NAME_CNT_GUEST_USER)
  private Integer cntGuestUser;

  public static final String SERIALIZED_NAME_CNT_INTERNAL_USER = "cntInternalUser";
  @SerializedName(SERIALIZED_NAME_CNT_INTERNAL_USER)
  private Integer cntInternalUser;

  public static final String SERIALIZED_NAME_CUSTOMER_ENCRYPTION_ENABLED = "customerEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ENCRYPTION_ENABLED)
  private Boolean customerEncryptionEnabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_PROVIDER_CUSTOMER = "isProviderCustomer";
  @SerializedName(SERIALIZED_NAME_IS_PROVIDER_CUSTOMER)
  private Boolean isProviderCustomer;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SPACE_LIMIT = "spaceLimit";
  @SerializedName(SERIALIZED_NAME_SPACE_LIMIT)
  private Long spaceLimit;

  public static final String SERIALIZED_NAME_SPACE_USED = "spaceUsed";
  @SerializedName(SERIALIZED_NAME_SPACE_USED)
  private Long spaceUsed;

  public CustomerData() {
  }

  public CustomerData accountsLimit(Integer accountsLimit) {
    this.accountsLimit = accountsLimit;
    return this;
  }

  /**
   * User accounts limit
   * @return accountsLimit
   */
  @javax.annotation.Nonnull
  public Integer getAccountsLimit() {
    return accountsLimit;
  }

  public void setAccountsLimit(Integer accountsLimit) {
    this.accountsLimit = accountsLimit;
  }


  public CustomerData accountsUsed(Integer accountsUsed) {
    this.accountsUsed = accountsUsed;
    return this;
  }

  /**
   * User accounts used
   * @return accountsUsed
   */
  @javax.annotation.Nonnull
  public Integer getAccountsUsed() {
    return accountsUsed;
  }

  public void setAccountsUsed(Integer accountsUsed) {
    this.accountsUsed = accountsUsed;
  }


  public CustomerData cntGuestUser(Integer cntGuestUser) {
    this.cntGuestUser = cntGuestUser;
    return this;
  }

  /**
   * Number of guest user accounts
   * @return cntGuestUser
   */
  @javax.annotation.Nonnull
  public Integer getCntGuestUser() {
    return cntGuestUser;
  }

  public void setCntGuestUser(Integer cntGuestUser) {
    this.cntGuestUser = cntGuestUser;
  }


  public CustomerData cntInternalUser(Integer cntInternalUser) {
    this.cntInternalUser = cntInternalUser;
    return this;
  }

  /**
   * Number of internal user accounts
   * @return cntInternalUser
   */
  @javax.annotation.Nonnull
  public Integer getCntInternalUser() {
    return cntInternalUser;
  }

  public void setCntInternalUser(Integer cntInternalUser) {
    this.cntInternalUser = cntInternalUser;
  }


  public CustomerData customerEncryptionEnabled(Boolean customerEncryptionEnabled) {
    this.customerEncryptionEnabled = customerEncryptionEnabled;
    return this;
  }

  /**
   * Clientside encryption for customer enabled
   * @return customerEncryptionEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getCustomerEncryptionEnabled() {
    return customerEncryptionEnabled;
  }

  public void setCustomerEncryptionEnabled(Boolean customerEncryptionEnabled) {
    this.customerEncryptionEnabled = customerEncryptionEnabled;
  }


  public CustomerData id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the customer
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public CustomerData isProviderCustomer(Boolean isProviderCustomer) {
    this.isProviderCustomer = isProviderCustomer;
    return this;
  }

  /**
   * Customer is Provider Customer
   * @return isProviderCustomer
   */
  @javax.annotation.Nonnull
  public Boolean getIsProviderCustomer() {
    return isProviderCustomer;
  }

  public void setIsProviderCustomer(Boolean isProviderCustomer) {
    this.isProviderCustomer = isProviderCustomer;
  }


  public CustomerData name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Customer name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CustomerData spaceLimit(Long spaceLimit) {
    this.spaceLimit = spaceLimit;
    return this;
  }

  /**
   * Space limit (in bytes). -1 for unlimited
   * @return spaceLimit
   */
  @javax.annotation.Nonnull
  public Long getSpaceLimit() {
    return spaceLimit;
  }

  public void setSpaceLimit(Long spaceLimit) {
    this.spaceLimit = spaceLimit;
  }


  public CustomerData spaceUsed(Long spaceUsed) {
    this.spaceUsed = spaceUsed;
    return this;
  }

  /**
   * Space used (in bytes)
   * @return spaceUsed
   */
  @javax.annotation.Nonnull
  public Long getSpaceUsed() {
    return spaceUsed;
  }

  public void setSpaceUsed(Long spaceUsed) {
    this.spaceUsed = spaceUsed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerData customerData = (CustomerData) o;
    return Objects.equals(this.accountsLimit, customerData.accountsLimit) &&
        Objects.equals(this.accountsUsed, customerData.accountsUsed) &&
        Objects.equals(this.cntGuestUser, customerData.cntGuestUser) &&
        Objects.equals(this.cntInternalUser, customerData.cntInternalUser) &&
        Objects.equals(this.customerEncryptionEnabled, customerData.customerEncryptionEnabled) &&
        Objects.equals(this.id, customerData.id) &&
        Objects.equals(this.isProviderCustomer, customerData.isProviderCustomer) &&
        Objects.equals(this.name, customerData.name) &&
        Objects.equals(this.spaceLimit, customerData.spaceLimit) &&
        Objects.equals(this.spaceUsed, customerData.spaceUsed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountsLimit, accountsUsed, cntGuestUser, cntInternalUser, customerEncryptionEnabled, id, isProviderCustomer, name, spaceLimit, spaceUsed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerData {\n");
    sb.append("    accountsLimit: ").append(toIndentedString(accountsLimit)).append("\n");
    sb.append("    accountsUsed: ").append(toIndentedString(accountsUsed)).append("\n");
    sb.append("    cntGuestUser: ").append(toIndentedString(cntGuestUser)).append("\n");
    sb.append("    cntInternalUser: ").append(toIndentedString(cntInternalUser)).append("\n");
    sb.append("    customerEncryptionEnabled: ").append(toIndentedString(customerEncryptionEnabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isProviderCustomer: ").append(toIndentedString(isProviderCustomer)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    spaceLimit: ").append(toIndentedString(spaceLimit)).append("\n");
    sb.append("    spaceUsed: ").append(toIndentedString(spaceUsed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountsLimit");
    openapiFields.add("accountsUsed");
    openapiFields.add("cntGuestUser");
    openapiFields.add("cntInternalUser");
    openapiFields.add("customerEncryptionEnabled");
    openapiFields.add("id");
    openapiFields.add("isProviderCustomer");
    openapiFields.add("name");
    openapiFields.add("spaceLimit");
    openapiFields.add("spaceUsed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountsLimit");
    openapiRequiredFields.add("accountsUsed");
    openapiRequiredFields.add("cntGuestUser");
    openapiRequiredFields.add("cntInternalUser");
    openapiRequiredFields.add("customerEncryptionEnabled");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isProviderCustomer");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("spaceLimit");
    openapiRequiredFields.add("spaceUsed");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerData is not found in the empty JSON string", CustomerData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerData.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerData>() {
           @Override
           public void write(JsonWriter out, CustomerData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerData
   * @throws IOException if the JSON string is invalid with respect to CustomerData
   */
  public static CustomerData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerData.class);
  }

  /**
   * Convert an instance of CustomerData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

