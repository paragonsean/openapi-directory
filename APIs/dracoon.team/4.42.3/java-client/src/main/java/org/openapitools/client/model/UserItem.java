/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.RoleList;
import org.openapitools.client.model.UserAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserItem {
  public static final String SERIALIZED_NAME_AVATAR_UUID = "avatarUuid";
  @SerializedName(SERIALIZED_NAME_AVATAR_UUID)
  private String avatarUuid;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender = "n";

  public static final String SERIALIZED_NAME_HAS_MANAGEABLE_ROOMS = "hasManageableRooms";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HAS_MANAGEABLE_ROOMS)
  private Boolean hasManageableRooms;

  public static final String SERIALIZED_NAME_HOME_ROOM_ID = "homeRoomId";
  @SerializedName(SERIALIZED_NAME_HOME_ROOM_ID)
  private Long homeRoomId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_IS_ENCRYPTION_ENABLED = "isEncryptionEnabled";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTION_ENABLED)
  private Boolean isEncryptionEnabled;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked = false;

  public static final String SERIALIZED_NAME_LAST_LOGIN_SUCCESS_AT = "lastLoginSuccessAt";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN_SUCCESS_AT)
  private OffsetDateTime lastLoginSuccessAt;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOCK_STATUS = "lockStatus";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LOCK_STATUS)
  private Integer lockStatus;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_ATTRIBUTES = "userAttributes";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_USER_ATTRIBUTES)
  private UserAttributes userAttributes;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public static final String SERIALIZED_NAME_USER_ROLES = "userRoles";
  @SerializedName(SERIALIZED_NAME_USER_ROLES)
  private RoleList userRoles;

  public UserItem() {
  }

  public UserItem avatarUuid(String avatarUuid) {
    this.avatarUuid = avatarUuid;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Avatar UUID
   * @return avatarUuid
   */
  @javax.annotation.Nonnull
  public String getAvatarUuid() {
    return avatarUuid;
  }

  public void setAvatarUuid(String avatarUuid) {
    this.avatarUuid = avatarUuid;
  }


  public UserItem createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UserItem email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email 
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserItem expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration date
   * @return expireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public UserItem firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * User first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  @Deprecated
  public UserItem gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.12.0  Gender
   * @return gender
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  @Deprecated
  public void setGender(String gender) {
    this.gender = gender;
  }


  @Deprecated
  public UserItem hasManageableRooms(Boolean hasManageableRooms) {
    this.hasManageableRooms = hasManageableRooms;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.27.0  User has manageable rooms
   * @return hasManageableRooms
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getHasManageableRooms() {
    return hasManageableRooms;
  }

  @Deprecated
  public void setHasManageableRooms(Boolean hasManageableRooms) {
    this.hasManageableRooms = hasManageableRooms;
  }


  public UserItem homeRoomId(Long homeRoomId) {
    this.homeRoomId = homeRoomId;
    return this;
  }

  /**
   * Homeroom ID
   * @return homeRoomId
   */
  @javax.annotation.Nullable
  public Long getHomeRoomId() {
    return homeRoomId;
  }

  public void setHomeRoomId(Long homeRoomId) {
    this.homeRoomId = homeRoomId;
  }


  public UserItem id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the user
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public UserItem isEncryptionEnabled(Boolean isEncryptionEnabled) {
    this.isEncryptionEnabled = isEncryptionEnabled;
    return this;
  }

  /**
   * User has generated private key.  Possible if client-side encryption is active for this customer
   * @return isEncryptionEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsEncryptionEnabled() {
    return isEncryptionEnabled;
  }

  public void setIsEncryptionEnabled(Boolean isEncryptionEnabled) {
    this.isEncryptionEnabled = isEncryptionEnabled;
  }


  public UserItem isLocked(Boolean isLocked) {
    this.isLocked = isLocked;
    return this;
  }

  /**
   * User is locked:  * &#x60;false&#x60; - unlocked  * &#x60;true&#x60; - locked    User is locked and can not login anymore.
   * @return isLocked
   */
  @javax.annotation.Nonnull
  public Boolean getIsLocked() {
    return isLocked;
  }

  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public UserItem lastLoginSuccessAt(OffsetDateTime lastLoginSuccessAt) {
    this.lastLoginSuccessAt = lastLoginSuccessAt;
    return this;
  }

  /**
   * Last successful logon date
   * @return lastLoginSuccessAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastLoginSuccessAt() {
    return lastLoginSuccessAt;
  }

  public void setLastLoginSuccessAt(OffsetDateTime lastLoginSuccessAt) {
    this.lastLoginSuccessAt = lastLoginSuccessAt;
  }


  public UserItem lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * User last name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  @Deprecated
  public UserItem lockStatus(Integer lockStatus) {
    this.lockStatus = lockStatus;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.7.0  User lock status:  * &#x60;0&#x60; - locked  * &#x60;1&#x60; - Web access allowed  * &#x60;2&#x60; - Web and mobile access allowed    Please use &#x60;isLocked&#x60; instead.
   * @return lockStatus
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Integer getLockStatus() {
    return lockStatus;
  }

  @Deprecated
  public void setLockStatus(Integer lockStatus) {
    this.lockStatus = lockStatus;
  }


  @Deprecated
  public UserItem login(String login) {
    this.login = login;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  User login name
   * @return login
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public String getLogin() {
    return login;
  }

  @Deprecated
  public void setLogin(String login) {
    this.login = login;
  }


  public UserItem phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  @Deprecated
  public UserItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.18.0  Job title
   * @return title
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  @Deprecated
  public void setTitle(String title) {
    this.title = title;
  }


  @Deprecated
  public UserItem userAttributes(UserAttributes userAttributes) {
    this.userAttributes = userAttributes;
    return this;
  }

  /**
   * Get userAttributes
   * @return userAttributes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public UserAttributes getUserAttributes() {
    return userAttributes;
  }

  @Deprecated
  public void setUserAttributes(UserAttributes userAttributes) {
    this.userAttributes = userAttributes;
  }


  public UserItem userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * &amp;#128640; Since v4.13.0  Username
   * @return userName
   */
  @javax.annotation.Nonnull
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }


  public UserItem userRoles(RoleList userRoles) {
    this.userRoles = userRoles;
    return this;
  }

  /**
   * Get userRoles
   * @return userRoles
   */
  @javax.annotation.Nullable
  public RoleList getUserRoles() {
    return userRoles;
  }

  public void setUserRoles(RoleList userRoles) {
    this.userRoles = userRoles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserItem userItem = (UserItem) o;
    return Objects.equals(this.avatarUuid, userItem.avatarUuid) &&
        Objects.equals(this.createdAt, userItem.createdAt) &&
        Objects.equals(this.email, userItem.email) &&
        Objects.equals(this.expireAt, userItem.expireAt) &&
        Objects.equals(this.firstName, userItem.firstName) &&
        Objects.equals(this.gender, userItem.gender) &&
        Objects.equals(this.hasManageableRooms, userItem.hasManageableRooms) &&
        Objects.equals(this.homeRoomId, userItem.homeRoomId) &&
        Objects.equals(this.id, userItem.id) &&
        Objects.equals(this.isEncryptionEnabled, userItem.isEncryptionEnabled) &&
        Objects.equals(this.isLocked, userItem.isLocked) &&
        Objects.equals(this.lastLoginSuccessAt, userItem.lastLoginSuccessAt) &&
        Objects.equals(this.lastName, userItem.lastName) &&
        Objects.equals(this.lockStatus, userItem.lockStatus) &&
        Objects.equals(this.login, userItem.login) &&
        Objects.equals(this.phone, userItem.phone) &&
        Objects.equals(this.title, userItem.title) &&
        Objects.equals(this.userAttributes, userItem.userAttributes) &&
        Objects.equals(this.userName, userItem.userName) &&
        Objects.equals(this.userRoles, userItem.userRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUuid, createdAt, email, expireAt, firstName, gender, hasManageableRooms, homeRoomId, id, isEncryptionEnabled, isLocked, lastLoginSuccessAt, lastName, lockStatus, login, phone, title, userAttributes, userName, userRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserItem {\n");
    sb.append("    avatarUuid: ").append(toIndentedString(avatarUuid)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    hasManageableRooms: ").append(toIndentedString(hasManageableRooms)).append("\n");
    sb.append("    homeRoomId: ").append(toIndentedString(homeRoomId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEncryptionEnabled: ").append(toIndentedString(isEncryptionEnabled)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    lastLoginSuccessAt: ").append(toIndentedString(lastLoginSuccessAt)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    lockStatus: ").append(toIndentedString(lockStatus)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userAttributes: ").append(toIndentedString(userAttributes)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("    userRoles: ").append(toIndentedString(userRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatarUuid");
    openapiFields.add("createdAt");
    openapiFields.add("email");
    openapiFields.add("expireAt");
    openapiFields.add("firstName");
    openapiFields.add("gender");
    openapiFields.add("hasManageableRooms");
    openapiFields.add("homeRoomId");
    openapiFields.add("id");
    openapiFields.add("isEncryptionEnabled");
    openapiFields.add("isLocked");
    openapiFields.add("lastLoginSuccessAt");
    openapiFields.add("lastName");
    openapiFields.add("lockStatus");
    openapiFields.add("login");
    openapiFields.add("phone");
    openapiFields.add("title");
    openapiFields.add("userAttributes");
    openapiFields.add("userName");
    openapiFields.add("userRoles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("avatarUuid");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("isLocked");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("lockStatus");
    openapiRequiredFields.add("login");
    openapiRequiredFields.add("userName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserItem is not found in the empty JSON string", UserItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("avatarUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarUuid").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `userAttributes`
      if (jsonObj.get("userAttributes") != null && !jsonObj.get("userAttributes").isJsonNull()) {
        UserAttributes.validateJsonElement(jsonObj.get("userAttributes"));
      }
      if (!jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
      // validate the optional field `userRoles`
      if (jsonObj.get("userRoles") != null && !jsonObj.get("userRoles").isJsonNull()) {
        RoleList.validateJsonElement(jsonObj.get("userRoles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserItem.class));

       return (TypeAdapter<T>) new TypeAdapter<UserItem>() {
           @Override
           public void write(JsonWriter out, UserItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserItem
   * @throws IOException if the JSON string is invalid with respect to UserItem
   */
  public static UserItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserItem.class);
  }

  /**
   * Convert an instance of UserItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

