/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Log event information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogEvent {
  public static final String SERIALIZED_NAME_ATTRIBUTE1 = "attribute1";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE1)
  private String attribute1;

  public static final String SERIALIZED_NAME_ATTRIBUTE2 = "attribute2";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE2)
  private String attribute2;

  public static final String SERIALIZED_NAME_ATTRIBUTE3 = "attribute3";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTE3)
  private String attribute3;

  public static final String SERIALIZED_NAME_AUTH_PARENT_SOURCE = "authParentSource";
  @SerializedName(SERIALIZED_NAME_AUTH_PARENT_SOURCE)
  private String authParentSource;

  public static final String SERIALIZED_NAME_AUTH_PARENT_TARGET = "authParentTarget";
  @SerializedName(SERIALIZED_NAME_AUTH_PARENT_TARGET)
  private String authParentTarget;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customerId";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private Long customerId;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_OBJECT_ID1 = "objectId1";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID1)
  private Long objectId1;

  public static final String SERIALIZED_NAME_OBJECT_ID2 = "objectId2";
  @SerializedName(SERIALIZED_NAME_OBJECT_ID2)
  private Long objectId2;

  public static final String SERIALIZED_NAME_OBJECT_NAME1 = "objectName1";
  @SerializedName(SERIALIZED_NAME_OBJECT_NAME1)
  private String objectName1;

  public static final String SERIALIZED_NAME_OBJECT_NAME2 = "objectName2";
  @SerializedName(SERIALIZED_NAME_OBJECT_NAME2)
  private String objectName2;

  public static final String SERIALIZED_NAME_OBJECT_TYPE1 = "objectType1";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE1)
  private Integer objectType1;

  public static final String SERIALIZED_NAME_OBJECT_TYPE2 = "objectType2";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE2)
  private Integer objectType2;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private Integer operationId;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  /**
   * Operation status:  * &#x60;0&#x60; - Success  * &#x60;2&#x60; - Error
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    NUMBER_0(0),
    
    NUMBER_2(2);

    private Integer value;

    StatusEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(Integer value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_USER_CLIENT = "userClient";
  @SerializedName(SERIALIZED_NAME_USER_CLIENT)
  private String userClient;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_USER_IP = "userIp";
  @SerializedName(SERIALIZED_NAME_USER_IP)
  private String userIp;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public LogEvent() {
  }

  public LogEvent attribute1(String attribute1) {
    this.attribute1 = attribute1;
    return this;
  }

  /**
   * Attribute 1
   * @return attribute1
   */
  @javax.annotation.Nullable
  public String getAttribute1() {
    return attribute1;
  }

  public void setAttribute1(String attribute1) {
    this.attribute1 = attribute1;
  }


  public LogEvent attribute2(String attribute2) {
    this.attribute2 = attribute2;
    return this;
  }

  /**
   * Attribute 2
   * @return attribute2
   */
  @javax.annotation.Nullable
  public String getAttribute2() {
    return attribute2;
  }

  public void setAttribute2(String attribute2) {
    this.attribute2 = attribute2;
  }


  public LogEvent attribute3(String attribute3) {
    this.attribute3 = attribute3;
    return this;
  }

  /**
   * Attribute 3
   * @return attribute3
   */
  @javax.annotation.Nullable
  public String getAttribute3() {
    return attribute3;
  }

  public void setAttribute3(String attribute3) {
    this.attribute3 = attribute3;
  }


  public LogEvent authParentSource(String authParentSource) {
    this.authParentSource = authParentSource;
    return this;
  }

  /**
   * Auth parent source ID
   * @return authParentSource
   */
  @javax.annotation.Nullable
  public String getAuthParentSource() {
    return authParentSource;
  }

  public void setAuthParentSource(String authParentSource) {
    this.authParentSource = authParentSource;
  }


  public LogEvent authParentTarget(String authParentTarget) {
    this.authParentTarget = authParentTarget;
    return this;
  }

  /**
   * Auth parent target ID
   * @return authParentTarget
   */
  @javax.annotation.Nullable
  public String getAuthParentTarget() {
    return authParentTarget;
  }

  public void setAuthParentTarget(String authParentTarget) {
    this.authParentTarget = authParentTarget;
  }


  public LogEvent customerId(Long customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Unique identifier for the customer
   * @return customerId
   */
  @javax.annotation.Nullable
  public Long getCustomerId() {
    return customerId;
  }

  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public LogEvent id(Long id) {
    this.id = id;
    return this;
  }

  /**
   * Event ID
   * @return id
   */
  @javax.annotation.Nonnull
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }


  public LogEvent message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Event description
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public LogEvent objectId1(Long objectId1) {
    this.objectId1 = objectId1;
    return this;
  }

  /**
   * Object ID 1
   * @return objectId1
   */
  @javax.annotation.Nullable
  public Long getObjectId1() {
    return objectId1;
  }

  public void setObjectId1(Long objectId1) {
    this.objectId1 = objectId1;
  }


  public LogEvent objectId2(Long objectId2) {
    this.objectId2 = objectId2;
    return this;
  }

  /**
   * Object ID 2
   * @return objectId2
   */
  @javax.annotation.Nullable
  public Long getObjectId2() {
    return objectId2;
  }

  public void setObjectId2(Long objectId2) {
    this.objectId2 = objectId2;
  }


  public LogEvent objectName1(String objectName1) {
    this.objectName1 = objectName1;
    return this;
  }

  /**
   * Object name 1
   * @return objectName1
   */
  @javax.annotation.Nullable
  public String getObjectName1() {
    return objectName1;
  }

  public void setObjectName1(String objectName1) {
    this.objectName1 = objectName1;
  }


  public LogEvent objectName2(String objectName2) {
    this.objectName2 = objectName2;
    return this;
  }

  /**
   * Object name 2
   * @return objectName2
   */
  @javax.annotation.Nullable
  public String getObjectName2() {
    return objectName2;
  }

  public void setObjectName2(String objectName2) {
    this.objectName2 = objectName2;
  }


  public LogEvent objectType1(Integer objectType1) {
    this.objectType1 = objectType1;
    return this;
  }

  /**
   * Object type 1
   * @return objectType1
   */
  @javax.annotation.Nullable
  public Integer getObjectType1() {
    return objectType1;
  }

  public void setObjectType1(Integer objectType1) {
    this.objectType1 = objectType1;
  }


  public LogEvent objectType2(Integer objectType2) {
    this.objectType2 = objectType2;
    return this;
  }

  /**
   * Object type 2
   * @return objectType2
   */
  @javax.annotation.Nullable
  public Integer getObjectType2() {
    return objectType2;
  }

  public void setObjectType2(Integer objectType2) {
    this.objectType2 = objectType2;
  }


  public LogEvent operationId(Integer operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Operation type ID
   * @return operationId
   */
  @javax.annotation.Nullable
  public Integer getOperationId() {
    return operationId;
  }

  public void setOperationId(Integer operationId) {
    this.operationId = operationId;
  }


  public LogEvent operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Operation name
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public LogEvent status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Operation status:  * &#x60;0&#x60; - Success  * &#x60;2&#x60; - Error
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public LogEvent time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

  /**
   * Event timestamp
   * @return time
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }


  public LogEvent userClient(String userClient) {
    this.userClient = userClient;
    return this;
  }

  /**
   * Client
   * @return userClient
   */
  @javax.annotation.Nullable
  public String getUserClient() {
    return userClient;
  }

  public void setUserClient(String userClient) {
    this.userClient = userClient;
  }


  public LogEvent userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Unique identifier for the user
   * @return userId
   */
  @javax.annotation.Nonnull
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public LogEvent userIp(String userIp) {
    this.userIp = userIp;
    return this;
  }

  /**
   * User IP
   * @return userIp
   */
  @javax.annotation.Nullable
  public String getUserIp() {
    return userIp;
  }

  public void setUserIp(String userIp) {
    this.userIp = userIp;
  }


  public LogEvent userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * Username
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogEvent logEvent = (LogEvent) o;
    return Objects.equals(this.attribute1, logEvent.attribute1) &&
        Objects.equals(this.attribute2, logEvent.attribute2) &&
        Objects.equals(this.attribute3, logEvent.attribute3) &&
        Objects.equals(this.authParentSource, logEvent.authParentSource) &&
        Objects.equals(this.authParentTarget, logEvent.authParentTarget) &&
        Objects.equals(this.customerId, logEvent.customerId) &&
        Objects.equals(this.id, logEvent.id) &&
        Objects.equals(this.message, logEvent.message) &&
        Objects.equals(this.objectId1, logEvent.objectId1) &&
        Objects.equals(this.objectId2, logEvent.objectId2) &&
        Objects.equals(this.objectName1, logEvent.objectName1) &&
        Objects.equals(this.objectName2, logEvent.objectName2) &&
        Objects.equals(this.objectType1, logEvent.objectType1) &&
        Objects.equals(this.objectType2, logEvent.objectType2) &&
        Objects.equals(this.operationId, logEvent.operationId) &&
        Objects.equals(this.operationName, logEvent.operationName) &&
        Objects.equals(this.status, logEvent.status) &&
        Objects.equals(this.time, logEvent.time) &&
        Objects.equals(this.userClient, logEvent.userClient) &&
        Objects.equals(this.userId, logEvent.userId) &&
        Objects.equals(this.userIp, logEvent.userIp) &&
        Objects.equals(this.userName, logEvent.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribute1, attribute2, attribute3, authParentSource, authParentTarget, customerId, id, message, objectId1, objectId2, objectName1, objectName2, objectType1, objectType2, operationId, operationName, status, time, userClient, userId, userIp, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogEvent {\n");
    sb.append("    attribute1: ").append(toIndentedString(attribute1)).append("\n");
    sb.append("    attribute2: ").append(toIndentedString(attribute2)).append("\n");
    sb.append("    attribute3: ").append(toIndentedString(attribute3)).append("\n");
    sb.append("    authParentSource: ").append(toIndentedString(authParentSource)).append("\n");
    sb.append("    authParentTarget: ").append(toIndentedString(authParentTarget)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    objectId1: ").append(toIndentedString(objectId1)).append("\n");
    sb.append("    objectId2: ").append(toIndentedString(objectId2)).append("\n");
    sb.append("    objectName1: ").append(toIndentedString(objectName1)).append("\n");
    sb.append("    objectName2: ").append(toIndentedString(objectName2)).append("\n");
    sb.append("    objectType1: ").append(toIndentedString(objectType1)).append("\n");
    sb.append("    objectType2: ").append(toIndentedString(objectType2)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    userClient: ").append(toIndentedString(userClient)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userIp: ").append(toIndentedString(userIp)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribute1");
    openapiFields.add("attribute2");
    openapiFields.add("attribute3");
    openapiFields.add("authParentSource");
    openapiFields.add("authParentTarget");
    openapiFields.add("customerId");
    openapiFields.add("id");
    openapiFields.add("message");
    openapiFields.add("objectId1");
    openapiFields.add("objectId2");
    openapiFields.add("objectName1");
    openapiFields.add("objectName2");
    openapiFields.add("objectType1");
    openapiFields.add("objectType2");
    openapiFields.add("operationId");
    openapiFields.add("operationName");
    openapiFields.add("status");
    openapiFields.add("time");
    openapiFields.add("userClient");
    openapiFields.add("userId");
    openapiFields.add("userIp");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("time");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogEvent is not found in the empty JSON string", LogEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LogEvent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attribute1") != null && !jsonObj.get("attribute1").isJsonNull()) && !jsonObj.get("attribute1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute1").toString()));
      }
      if ((jsonObj.get("attribute2") != null && !jsonObj.get("attribute2").isJsonNull()) && !jsonObj.get("attribute2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute2").toString()));
      }
      if ((jsonObj.get("attribute3") != null && !jsonObj.get("attribute3").isJsonNull()) && !jsonObj.get("attribute3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribute3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribute3").toString()));
      }
      if ((jsonObj.get("authParentSource") != null && !jsonObj.get("authParentSource").isJsonNull()) && !jsonObj.get("authParentSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authParentSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authParentSource").toString()));
      }
      if ((jsonObj.get("authParentTarget") != null && !jsonObj.get("authParentTarget").isJsonNull()) && !jsonObj.get("authParentTarget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authParentTarget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authParentTarget").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("objectName1") != null && !jsonObj.get("objectName1").isJsonNull()) && !jsonObj.get("objectName1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectName1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectName1").toString()));
      }
      if ((jsonObj.get("objectName2") != null && !jsonObj.get("objectName2").isJsonNull()) && !jsonObj.get("objectName2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `objectName2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("objectName2").toString()));
      }
      if ((jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) && !jsonObj.get("operationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationName").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("userClient") != null && !jsonObj.get("userClient").isJsonNull()) && !jsonObj.get("userClient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userClient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userClient").toString()));
      }
      if ((jsonObj.get("userIp") != null && !jsonObj.get("userIp").isJsonNull()) && !jsonObj.get("userIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userIp").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<LogEvent>() {
           @Override
           public void write(JsonWriter out, LogEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogEvent
   * @throws IOException if the JSON string is invalid with respect to LogEvent
   */
  public static LogEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogEvent.class);
  }

  /**
   * Convert an instance of LogEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

