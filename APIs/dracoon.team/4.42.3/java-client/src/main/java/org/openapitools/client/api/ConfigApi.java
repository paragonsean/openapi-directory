/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AlgorithmVersionInfoList;
import org.openapitools.client.model.ClassificationPoliciesConfig;
import org.openapitools.client.model.ConfigOptionList;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GeneralSettingsInfo;
import org.openapitools.client.model.GuestUsersPoliciesConfig;
import org.openapitools.client.model.InfrastructureProperties;
import org.openapitools.client.model.NotificationChannelList;
import org.openapitools.client.model.PasswordPoliciesConfig;
import org.openapitools.client.model.ProductPackageResponseList;
import org.openapitools.client.model.S3TagList;
import org.openapitools.client.model.SystemDefaults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for requestAlgorithms
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAlgorithmsCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/policies/algorithms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestAlgorithmsValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestAlgorithmsCall(xSdsAuthToken, _callback);

    }

    /**
     * Request algorithms
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description: Retrieve a list of available algorithms used for encryption.  ### Precondition: Authenticated user.  ### Postcondition: List of available algorithms is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return AlgorithmVersionInfoList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public AlgorithmVersionInfoList requestAlgorithms(String xSdsAuthToken) throws ApiException {
        ApiResponse<AlgorithmVersionInfoList> localVarResp = requestAlgorithmsWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request algorithms
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description: Retrieve a list of available algorithms used for encryption.  ### Precondition: Authenticated user.  ### Postcondition: List of available algorithms is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;AlgorithmVersionInfoList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlgorithmVersionInfoList> requestAlgorithmsWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestAlgorithmsValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<AlgorithmVersionInfoList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request algorithms (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description: Retrieve a list of available algorithms used for encryption.  ### Precondition: Authenticated user.  ### Postcondition: List of available algorithms is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestAlgorithmsAsync(String xSdsAuthToken, final ApiCallback<AlgorithmVersionInfoList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestAlgorithmsValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<AlgorithmVersionInfoList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestClassificationPoliciesConfigInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestClassificationPoliciesConfigInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/policies/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestClassificationPoliciesConfigInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestClassificationPoliciesConfigInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request classification policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;  ### Description: Retrieve a list of classification policies: * &#x60;shareClassificationPolicies&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured classification policies is returned.  ### Further Information: &#x60;classificationRequiresSharePassword&#x60;: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. &#x60;0&#x60; means no password will be enforced. 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ClassificationPoliciesConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ClassificationPoliciesConfig requestClassificationPoliciesConfigInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<ClassificationPoliciesConfig> localVarResp = requestClassificationPoliciesConfigInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request classification policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;  ### Description: Retrieve a list of classification policies: * &#x60;shareClassificationPolicies&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured classification policies is returned.  ### Further Information: &#x60;classificationRequiresSharePassword&#x60;: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. &#x60;0&#x60; means no password will be enforced. 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;ClassificationPoliciesConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClassificationPoliciesConfig> requestClassificationPoliciesConfigInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestClassificationPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<ClassificationPoliciesConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request classification policies (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.30.0&lt;/h3&gt;  ### Description: Retrieve a list of classification policies: * &#x60;shareClassificationPolicies&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured classification policies is returned.  ### Further Information: &#x60;classificationRequiresSharePassword&#x60;: When a node has this classification or higher, it cannot be shared without a password. If the node is an encrypted file this policy has no effect. &#x60;0&#x60; means no password will be enforced. 
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestClassificationPoliciesConfigInfoAsync(String xSdsAuthToken, final ApiCallback<ClassificationPoliciesConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestClassificationPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<ClassificationPoliciesConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestCurrentProductPackages
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestCurrentProductPackagesCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/product_packages/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestCurrentProductPackagesValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestCurrentProductPackagesCall(xSdsAuthToken, _callback);

    }

    /**
     * Request list of currently enabled product packages
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of currently enabled product packages.  ### Precondition: Authenticated user  ### Postcondition: List of currently enabled Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ProductPackageResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProductPackageResponseList requestCurrentProductPackages(String xSdsAuthToken) throws ApiException {
        ApiResponse<ProductPackageResponseList> localVarResp = requestCurrentProductPackagesWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request list of currently enabled product packages
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of currently enabled product packages.  ### Precondition: Authenticated user  ### Postcondition: List of currently enabled Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;ProductPackageResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPackageResponseList> requestCurrentProductPackagesWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestCurrentProductPackagesValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<ProductPackageResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request list of currently enabled product packages (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of currently enabled product packages.  ### Precondition: Authenticated user  ### Postcondition: List of currently enabled Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestCurrentProductPackagesAsync(String xSdsAuthToken, final ApiCallback<ProductPackageResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestCurrentProductPackagesValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<ProductPackageResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestGeneralSettingsInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestGeneralSettingsInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/general";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestGeneralSettingsInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestGeneralSettingsInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request general settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description: Returns a list of configurable general settings.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable general settings is returned.  ### Further Information: None.  ### Configurable general settings: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;sharePasswordSmsEnabled&#x60; | Determines whether sending of share passwords via SMS is allowed. | &#x60;true or false&#x60; | | &#x60;cryptoEnabled&#x60; | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;emailNotificationButtonEnabled&#x60; | Determines whether email notification button is enabled. | &#x60;true or false&#x60; | | &#x60;eulaEnabled&#x60; | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | &#x60;true or false&#x60; | | &#x60;useS3Storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;s3TagsEnabled&#x60; | Determines whether S3 tags are enabled | &#x60;true or false&#x60; | | &#x60;homeRoomsActive&#x60; | Determines whether each AD user has a personal home room | &#x60;true or false&#x60; | | &#x60;homeRoomParentId&#x60; | Defines a node under which all personal home rooms are located. **NULL** if &#x60;homeRoomsActive&#x60; is &#x60;false&#x60; | &#x60;Long&#x60; | | &#x60;subscriptionPlan&#x60; | Subscription Plan. &lt;br&gt; 0 &#x3D; Pro, 1 &#x3D; Premium, 2 &#x3D; Basic | &#x60;Integer&#x60; |  &lt;/details&gt;  ### Deprecated general settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;mediaServerEnabled&#x60;&lt;/del&gt; | Determines whether media server is enabled.&lt;br&gt;Returns boolean value dependent on conjunction of &#x60;mediaServerConfigEnabled&#x60; AND &#x60;mediaServerEnabled&#x60; | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;weakPasswordEnabled&#x60;&lt;/del&gt; | Determines whether weak password is allowed.&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return GeneralSettingsInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public GeneralSettingsInfo requestGeneralSettingsInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<GeneralSettingsInfo> localVarResp = requestGeneralSettingsInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request general settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description: Returns a list of configurable general settings.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable general settings is returned.  ### Further Information: None.  ### Configurable general settings: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;sharePasswordSmsEnabled&#x60; | Determines whether sending of share passwords via SMS is allowed. | &#x60;true or false&#x60; | | &#x60;cryptoEnabled&#x60; | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;emailNotificationButtonEnabled&#x60; | Determines whether email notification button is enabled. | &#x60;true or false&#x60; | | &#x60;eulaEnabled&#x60; | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | &#x60;true or false&#x60; | | &#x60;useS3Storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;s3TagsEnabled&#x60; | Determines whether S3 tags are enabled | &#x60;true or false&#x60; | | &#x60;homeRoomsActive&#x60; | Determines whether each AD user has a personal home room | &#x60;true or false&#x60; | | &#x60;homeRoomParentId&#x60; | Defines a node under which all personal home rooms are located. **NULL** if &#x60;homeRoomsActive&#x60; is &#x60;false&#x60; | &#x60;Long&#x60; | | &#x60;subscriptionPlan&#x60; | Subscription Plan. &lt;br&gt; 0 &#x3D; Pro, 1 &#x3D; Premium, 2 &#x3D; Basic | &#x60;Integer&#x60; |  &lt;/details&gt;  ### Deprecated general settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;mediaServerEnabled&#x60;&lt;/del&gt; | Determines whether media server is enabled.&lt;br&gt;Returns boolean value dependent on conjunction of &#x60;mediaServerConfigEnabled&#x60; AND &#x60;mediaServerEnabled&#x60; | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;weakPasswordEnabled&#x60;&lt;/del&gt; | Determines whether weak password is allowed.&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;GeneralSettingsInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeneralSettingsInfo> requestGeneralSettingsInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestGeneralSettingsInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<GeneralSettingsInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request general settings (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description: Returns a list of configurable general settings.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable general settings is returned.  ### Further Information: None.  ### Configurable general settings: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;sharePasswordSmsEnabled&#x60; | Determines whether sending of share passwords via SMS is allowed. | &#x60;true or false&#x60; | | &#x60;cryptoEnabled&#x60; | Determines whether client-side encryption is enabled.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;emailNotificationButtonEnabled&#x60; | Determines whether email notification button is enabled. | &#x60;true or false&#x60; | | &#x60;eulaEnabled&#x60; | Determines whether EULA is enabled.&lt;br&gt;Each user has to confirm the EULA at first login. | &#x60;true or false&#x60; | | &#x60;useS3Storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible. | &#x60;true or false&#x60; | | &#x60;s3TagsEnabled&#x60; | Determines whether S3 tags are enabled | &#x60;true or false&#x60; | | &#x60;homeRoomsActive&#x60; | Determines whether each AD user has a personal home room | &#x60;true or false&#x60; | | &#x60;homeRoomParentId&#x60; | Defines a node under which all personal home rooms are located. **NULL** if &#x60;homeRoomsActive&#x60; is &#x60;false&#x60; | &#x60;Long&#x60; | | &#x60;subscriptionPlan&#x60; | Subscription Plan. &lt;br&gt; 0 &#x3D; Pro, 1 &#x3D; Premium, 2 &#x3D; Basic | &#x60;Integer&#x60; |  &lt;/details&gt;  ### Deprecated general settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;mediaServerEnabled&#x60;&lt;/del&gt; | Determines whether media server is enabled.&lt;br&gt;Returns boolean value dependent on conjunction of &#x60;mediaServerConfigEnabled&#x60; AND &#x60;mediaServerEnabled&#x60; | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;weakPasswordEnabled&#x60;&lt;/del&gt; | Determines whether weak password is allowed.&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestGeneralSettingsInfoAsync(String xSdsAuthToken, final ApiCallback<GeneralSettingsInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestGeneralSettingsInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<GeneralSettingsInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestGuestUsersPoliciesConfigInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestGuestUsersPoliciesConfigInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/policies/guest_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestGuestUsersPoliciesConfigInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestGuestUsersPoliciesConfigInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request guest users policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;  ### Description: Retrieve a list of guest users policies.  ### Precondition: Authenticated user.  ### Postcondition: List of configured guest users policies is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return GuestUsersPoliciesConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public GuestUsersPoliciesConfig requestGuestUsersPoliciesConfigInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<GuestUsersPoliciesConfig> localVarResp = requestGuestUsersPoliciesConfigInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request guest users policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;  ### Description: Retrieve a list of guest users policies.  ### Precondition: Authenticated user.  ### Postcondition: List of configured guest users policies is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;GuestUsersPoliciesConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GuestUsersPoliciesConfig> requestGuestUsersPoliciesConfigInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestGuestUsersPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<GuestUsersPoliciesConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request guest users policies (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.40.0&lt;/h3&gt;  ### Description: Retrieve a list of guest users policies.  ### Precondition: Authenticated user.  ### Postcondition: List of configured guest users policies is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestGuestUsersPoliciesConfigInfoAsync(String xSdsAuthToken, final ApiCallback<GuestUsersPoliciesConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestGuestUsersPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<GuestUsersPoliciesConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestInfrastructurePropertiesInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestInfrastructurePropertiesInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/infrastructure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestInfrastructurePropertiesInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestInfrastructurePropertiesInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request infrastructure properties
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of read-only infrastructure properties.    ### Precondition: Authenticated user.  ### Postcondition: List of infrastructure properties is returned.  ### Further Information: Source: &#x60;core-service.properties&#x60;  ### Read-only infrastructure properties: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;smsConfigEnabled&#x60; | Determines whether sending of share passwords via SMS is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;mediaServerConfigEnabled&#x60; | Determines whether media server is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;s3DefaultRegion&#x60; | Suggested S3 region | &#x60;Region name&#x60; | | &#x60;s3EnforceDirectUpload&#x60; | Enforce direct upload to S3 | &#x60;true or false&#x60; | | &#x60;isDracoonCloud&#x60; | Determines if the **DRACOON Core** is deployed in the cloud environment | &#x60;true or false&#x60; | | &#x60;tenantUuid&#x60; | Current tenant UUID | &#x60;UUID&#x60; |  &lt;/details&gt; 
     * @param xSdsAuthToken Authentication token (optional)
     * @return InfrastructureProperties
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public InfrastructureProperties requestInfrastructurePropertiesInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<InfrastructureProperties> localVarResp = requestInfrastructurePropertiesInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request infrastructure properties
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of read-only infrastructure properties.    ### Precondition: Authenticated user.  ### Postcondition: List of infrastructure properties is returned.  ### Further Information: Source: &#x60;core-service.properties&#x60;  ### Read-only infrastructure properties: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;smsConfigEnabled&#x60; | Determines whether sending of share passwords via SMS is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;mediaServerConfigEnabled&#x60; | Determines whether media server is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;s3DefaultRegion&#x60; | Suggested S3 region | &#x60;Region name&#x60; | | &#x60;s3EnforceDirectUpload&#x60; | Enforce direct upload to S3 | &#x60;true or false&#x60; | | &#x60;isDracoonCloud&#x60; | Determines if the **DRACOON Core** is deployed in the cloud environment | &#x60;true or false&#x60; | | &#x60;tenantUuid&#x60; | Current tenant UUID | &#x60;UUID&#x60; |  &lt;/details&gt; 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;InfrastructureProperties&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InfrastructureProperties> requestInfrastructurePropertiesInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestInfrastructurePropertiesInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<InfrastructureProperties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request infrastructure properties (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of read-only infrastructure properties.    ### Precondition: Authenticated user.  ### Postcondition: List of infrastructure properties is returned.  ### Further Information: Source: &#x60;core-service.properties&#x60;  ### Read-only infrastructure properties: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;smsConfigEnabled&#x60; | Determines whether sending of share passwords via SMS is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;mediaServerConfigEnabled&#x60; | Determines whether media server is **system-wide** enabled. | &#x60;true or false&#x60; | | &#x60;s3DefaultRegion&#x60; | Suggested S3 region | &#x60;Region name&#x60; | | &#x60;s3EnforceDirectUpload&#x60; | Enforce direct upload to S3 | &#x60;true or false&#x60; | | &#x60;isDracoonCloud&#x60; | Determines if the **DRACOON Core** is deployed in the cloud environment | &#x60;true or false&#x60; | | &#x60;tenantUuid&#x60; | Current tenant UUID | &#x60;UUID&#x60; |  &lt;/details&gt; 
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestInfrastructurePropertiesInfoAsync(String xSdsAuthToken, final ApiCallback<InfrastructureProperties> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestInfrastructurePropertiesInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<InfrastructureProperties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestNotificationChannelsInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestNotificationChannelsInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/notifications/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestNotificationChannelsInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestNotificationChannelsInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request list of notification channels
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description: Retrieve a list of configured notification channels.  ### Precondition: Authenticated user.  ### Postcondition: List of notification channels is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return NotificationChannelList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public NotificationChannelList requestNotificationChannelsInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<NotificationChannelList> localVarResp = requestNotificationChannelsInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request list of notification channels
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description: Retrieve a list of configured notification channels.  ### Precondition: Authenticated user.  ### Postcondition: List of notification channels is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;NotificationChannelList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationChannelList> requestNotificationChannelsInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestNotificationChannelsInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<NotificationChannelList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request list of notification channels (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description: Retrieve a list of configured notification channels.  ### Precondition: Authenticated user.  ### Postcondition: List of notification channels is returned.  ### Further Information: None.
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestNotificationChannelsInfoAsync(String xSdsAuthToken, final ApiCallback<NotificationChannelList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestNotificationChannelsInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<NotificationChannelList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestPasswordPoliciesConfigInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestPasswordPoliciesConfigInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/policies/passwords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestPasswordPoliciesConfigInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestPasswordPoliciesConfigInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request password policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;  ### Description:   Retrieve a list of configured password policies for all password types:   * &#x60;login&#x60; * &#x60;shares&#x60; * &#x60;encryption&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured password policies is returned.  ### Further Information: None.  ### Available password policies: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Name | Description | Value | Password Type | | :--- | :--- | :--- | :--- | | &#x60;mustContainCharacters&#x60; | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60; - at least one alphabetical character (&#x60;uppercase&#x60; **OR** &#x60;lowercase&#x60;)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60; - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60; - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60; - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60; - at least one special character (letters and digits excluded)&lt;pre&gt;! \&quot; # $ % ( ) * + , - . / : ; &#x3D; ? @ [ \\ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60; - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60;&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfCharacteristicsToEnforce&#x60; | Number of characteristics to enforce.&lt;br&gt;e.g. from &#x60;[\&quot;uppercase\&quot;, \&quot;lowercase\&quot;, \&quot;numeric\&quot;, \&quot;special\&quot;]&#x60;&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | &#x60;Integer between 0 and 4&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;minLength&#x60; | Minimum number of characters a password must contain. | &#x60;Integer between 1 and 1024&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectDictionaryWords&#x60; | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In &#x60;core-service.properties&#x60; a path to directory with dictionary files (&#x60;*.txt&#x60;) can be defined&lt;br&gt;cf. &#x60;policies.passwords.dictionary.directory&#x60;.&lt;br&gt;&lt;br&gt;If this rule gets enabled &#x60;policies.passwords.dictionary.directory&#x60; must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectUserInfo&#x60; | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user&#39;s **first name**, **last name**, **email** and **user name**. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectKeyboardPatterns&#x60; | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. &#x60;qwertz&#x60;, &#x60;asdf&#x60; (min. 4 character pattern) | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfArchivedPasswords&#x60; | Number of passwords to archive.&lt;br&gt;Value &#x60;0&#x60; means that password history is disabled. | &#x60;Integer between 0 and 10&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;passwordExpiration.enabled&#x60; | Determines whether password expiration is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxPasswordAge&#x60; | Maximum allowed password age (in **days**) | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;userLockout.enabled&#x60; | Determines whether user lockout is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxNumberOfLoginFailures&#x60; | Maximum allowed number of failed login attempts. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;lockoutPeriod&#x60; | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after &#x60;maxNumberOfLoginFailures&#x60; has been exceeded. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return PasswordPoliciesConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public PasswordPoliciesConfig requestPasswordPoliciesConfigInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<PasswordPoliciesConfig> localVarResp = requestPasswordPoliciesConfigInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request password policies
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;  ### Description:   Retrieve a list of configured password policies for all password types:   * &#x60;login&#x60; * &#x60;shares&#x60; * &#x60;encryption&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured password policies is returned.  ### Further Information: None.  ### Available password policies: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Name | Description | Value | Password Type | | :--- | :--- | :--- | :--- | | &#x60;mustContainCharacters&#x60; | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60; - at least one alphabetical character (&#x60;uppercase&#x60; **OR** &#x60;lowercase&#x60;)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60; - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60; - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60; - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60; - at least one special character (letters and digits excluded)&lt;pre&gt;! \&quot; # $ % ( ) * + , - . / : ; &#x3D; ? @ [ \\ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60; - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60;&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfCharacteristicsToEnforce&#x60; | Number of characteristics to enforce.&lt;br&gt;e.g. from &#x60;[\&quot;uppercase\&quot;, \&quot;lowercase\&quot;, \&quot;numeric\&quot;, \&quot;special\&quot;]&#x60;&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | &#x60;Integer between 0 and 4&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;minLength&#x60; | Minimum number of characters a password must contain. | &#x60;Integer between 1 and 1024&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectDictionaryWords&#x60; | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In &#x60;core-service.properties&#x60; a path to directory with dictionary files (&#x60;*.txt&#x60;) can be defined&lt;br&gt;cf. &#x60;policies.passwords.dictionary.directory&#x60;.&lt;br&gt;&lt;br&gt;If this rule gets enabled &#x60;policies.passwords.dictionary.directory&#x60; must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectUserInfo&#x60; | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user&#39;s **first name**, **last name**, **email** and **user name**. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectKeyboardPatterns&#x60; | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. &#x60;qwertz&#x60;, &#x60;asdf&#x60; (min. 4 character pattern) | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfArchivedPasswords&#x60; | Number of passwords to archive.&lt;br&gt;Value &#x60;0&#x60; means that password history is disabled. | &#x60;Integer between 0 and 10&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;passwordExpiration.enabled&#x60; | Determines whether password expiration is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxPasswordAge&#x60; | Maximum allowed password age (in **days**) | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;userLockout.enabled&#x60; | Determines whether user lockout is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxNumberOfLoginFailures&#x60; | Maximum allowed number of failed login attempts. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;lockoutPeriod&#x60; | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after &#x60;maxNumberOfLoginFailures&#x60; has been exceeded. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;PasswordPoliciesConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PasswordPoliciesConfig> requestPasswordPoliciesConfigInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestPasswordPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<PasswordPoliciesConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request password policies (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.14.0&lt;/h3&gt;  ### Description:   Retrieve a list of configured password policies for all password types:   * &#x60;login&#x60; * &#x60;shares&#x60; * &#x60;encryption&#x60;  ### Precondition: Authenticated user.  ### Postcondition: List of configured password policies is returned.  ### Further Information: None.  ### Available password policies: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Name | Description | Value | Password Type | | :--- | :--- | :--- | :--- | | &#x60;mustContainCharacters&#x60; | Characters which a password must contain:&lt;br&gt;&lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60; - at least one alphabetical character (&#x60;uppercase&#x60; **OR** &#x60;lowercase&#x60;)&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;br&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60; - at least one uppercase character&lt;pre&gt;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60; - at least one lowercase character&lt;pre&gt;a b c d e f g h i j k l m n o p q r s t u v w x y z&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60; - at least one numeric character&lt;pre&gt;0 1 2 3 4 5 6 7 8 9&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60; - at least one special character (letters and digits excluded)&lt;pre&gt;! \&quot; # $ % ( ) * + , - . / : ; &#x3D; ? @ [ \\ ] ^ _ { &amp;#124; } ~&lt;/pre&gt;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60; - none of the above&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;alpha&#x60;&lt;/li&gt;&lt;li&gt;&#x60;uppercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;lowercase&#x60;&lt;/li&gt;&lt;li&gt;&#x60;numeric&#x60;&lt;/li&gt;&lt;li&gt;&#x60;special&#x60;&lt;/li&gt;&lt;li&gt;&#x60;none&#x60;&lt;/li&gt;&lt;/ul&gt; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfCharacteristicsToEnforce&#x60; | Number of characteristics to enforce.&lt;br&gt;e.g. from &#x60;[\&quot;uppercase\&quot;, \&quot;lowercase\&quot;, \&quot;numeric\&quot;, \&quot;special\&quot;]&#x60;&lt;br&gt;all 4 character sets can be enforced; but also only 2 of them | &#x60;Integer between 0 and 4&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;minLength&#x60; | Minimum number of characters a password must contain. | &#x60;Integer between 1 and 1024&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectDictionaryWords&#x60; | Determines whether a password must **NOT** contain word(s) from a dictionary.&lt;br&gt;In &#x60;core-service.properties&#x60; a path to directory with dictionary files (&#x60;*.txt&#x60;) can be defined&lt;br&gt;cf. &#x60;policies.passwords.dictionary.directory&#x60;.&lt;br&gt;&lt;br&gt;If this rule gets enabled &#x60;policies.passwords.dictionary.directory&#x60; must be defined and contain dictionary files.&lt;br&gt;Otherwise, the rule will not have any effect on password validation process. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectUserInfo&#x60; | Determines whether a password must **NOT** contain user info.&lt;br&gt;Affects user&#39;s **first name**, **last name**, **email** and **user name**. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;rejectKeyboardPatterns&#x60; | Determines whether a password must **NOT** contain keyboard patterns.&lt;br&gt;e.g. &#x60;qwertz&#x60;, &#x60;asdf&#x60; (min. 4 character pattern) | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;li&gt;&#x60;shares&#x60;&lt;/li&gt;&lt;li&gt;&#x60;encryption&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;numberOfArchivedPasswords&#x60; | Number of passwords to archive.&lt;br&gt;Value &#x60;0&#x60; means that password history is disabled. | &#x60;Integer between 0 and 10&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;passwordExpiration.enabled&#x60; | Determines whether password expiration is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxPasswordAge&#x60; | Maximum allowed password age (in **days**) | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;userLockout.enabled&#x60; | Determines whether user lockout is enabled. | &#x60;true or false&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;maxNumberOfLoginFailures&#x60; | Maximum allowed number of failed login attempts. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; | | &#x60;lockoutPeriod&#x60; | Amount of **minutes** a user has to wait to make another login attempt&lt;br&gt;after &#x60;maxNumberOfLoginFailures&#x60; has been exceeded. | &#x60;positive Integer&#x60; | &lt;ul&gt;&lt;li&gt;&#x60;login&#x60;&lt;/li&gt;&lt;/ul&gt; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestPasswordPoliciesConfigInfoAsync(String xSdsAuthToken, final ApiCallback<PasswordPoliciesConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestPasswordPoliciesConfigInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<PasswordPoliciesConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestProductPackages
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestProductPackagesCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/product_packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestProductPackagesValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestProductPackagesCall(xSdsAuthToken, _callback);

    }

    /**
     * Request list of product packages
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of product packages.  ### Precondition: Authenticated user  ### Postcondition: List of Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ProductPackageResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ProductPackageResponseList requestProductPackages(String xSdsAuthToken) throws ApiException {
        ApiResponse<ProductPackageResponseList> localVarResp = requestProductPackagesWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request list of product packages
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of product packages.  ### Precondition: Authenticated user  ### Postcondition: List of Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;ProductPackageResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPackageResponseList> requestProductPackagesWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestProductPackagesValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<ProductPackageResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request list of product packages (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.38.0&lt;/h3&gt;  ### Description:   Returns a list of product packages.  ### Precondition: Authenticated user  ### Postcondition: List of Product Packages is returned.  ### Further Information: 
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestProductPackagesAsync(String xSdsAuthToken, final ApiCallback<ProductPackageResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestProductPackagesValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<ProductPackageResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestS3TagsInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestS3TagsInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/s3_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestS3TagsInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestS3TagsInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request list of configured S3 tags
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;  ### Description: Retrieve all configured S3 tags.  ### Precondition: Authenticated user.  ### Postcondition: List of configured S3 tags is returned.  ### Further Information: An empty list is returned if no S3 tags are found / configured.
     * @param xSdsAuthToken Authentication token (optional)
     * @return S3TagList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public S3TagList requestS3TagsInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<S3TagList> localVarResp = requestS3TagsInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request list of configured S3 tags
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;  ### Description: Retrieve all configured S3 tags.  ### Precondition: Authenticated user.  ### Postcondition: List of configured S3 tags is returned.  ### Further Information: An empty list is returned if no S3 tags are found / configured.
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;S3TagList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<S3TagList> requestS3TagsInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestS3TagsInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<S3TagList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request list of configured S3 tags (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;  ### Description: Retrieve all configured S3 tags.  ### Precondition: Authenticated user.  ### Postcondition: List of configured S3 tags is returned.  ### Further Information: An empty list is returned if no S3 tags are found / configured.
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestS3TagsInfoAsync(String xSdsAuthToken, final ApiCallback<S3TagList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestS3TagsInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<S3TagList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSystemDefaultsInfo
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * Tags for Identifying Languages
     * @see <a href="https://tools.ietf.org/html/rfc5646">Request default values Documentation</a>
     */
    public okhttp3.Call requestSystemDefaultsInfoCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/info/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSystemDefaultsInfoValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestSystemDefaultsInfoCall(xSdsAuthToken, _callback);

    }

    /**
     * Request default values
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system default values.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable default settings is returned.  ### Further Information: None.  ### Configurable default values: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;languageDefault&#x60; | Defines which language should be default. | &#x60;ISO 639-1 code&#x60; | | &#x60;downloadShareDefaultExpirationPeriod&#x60; | Default expiration period for Download Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;uploadShareDefaultExpirationPeriod&#x60; | Default expiration period for Upload Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;fileDefaultExpirationPeriod&#x60; | Default expiration period for all uploaded files in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;nonmemberViewerDefault&#x60; | Defines if new users get the role _Non Member Viewer_ by default | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return SystemDefaults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * Tags for Identifying Languages
     * @see <a href="https://tools.ietf.org/html/rfc5646">Request default values Documentation</a>
     */
    public SystemDefaults requestSystemDefaultsInfo(String xSdsAuthToken) throws ApiException {
        ApiResponse<SystemDefaults> localVarResp = requestSystemDefaultsInfoWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request default values
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system default values.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable default settings is returned.  ### Further Information: None.  ### Configurable default values: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;languageDefault&#x60; | Defines which language should be default. | &#x60;ISO 639-1 code&#x60; | | &#x60;downloadShareDefaultExpirationPeriod&#x60; | Default expiration period for Download Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;uploadShareDefaultExpirationPeriod&#x60; | Default expiration period for Upload Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;fileDefaultExpirationPeriod&#x60; | Default expiration period for all uploaded files in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;nonmemberViewerDefault&#x60; | Defines if new users get the role _Non Member Viewer_ by default | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;SystemDefaults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * Tags for Identifying Languages
     * @see <a href="https://tools.ietf.org/html/rfc5646">Request default values Documentation</a>
     */
    public ApiResponse<SystemDefaults> requestSystemDefaultsInfoWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestSystemDefaultsInfoValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<SystemDefaults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request default values (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system default values.  ### Precondition: Authenticated user.  ### Postcondition: List of configurable default settings is returned.  ### Further Information: None.  ### Configurable default values: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;languageDefault&#x60; | Defines which language should be default. | &#x60;ISO 639-1 code&#x60; | | &#x60;downloadShareDefaultExpirationPeriod&#x60; | Default expiration period for Download Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;uploadShareDefaultExpirationPeriod&#x60; | Default expiration period for Upload Shares in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;fileDefaultExpirationPeriod&#x60; | Default expiration period for all uploaded files in _days_. | &#x60;Integer between 0 and 9999&#x60; | | &#x60;nonmemberViewerDefault&#x60; | Defines if new users get the role _Non Member Viewer_ by default | &#x60;true or false&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * Tags for Identifying Languages
     * @see <a href="https://tools.ietf.org/html/rfc5646">Request default values Documentation</a>
     */
    public okhttp3.Call requestSystemDefaultsInfoAsync(String xSdsAuthToken, final ApiCallback<SystemDefaults> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSystemDefaultsInfoValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<SystemDefaults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSystemSettings
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call requestSystemSettingsCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v4/config/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSystemSettingsValidateBeforeCall(String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        return requestSystemSettingsCall(xSdsAuthToken, _callback);

    }

    /**
     * Request system settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; required.  ### Postcondition: List of configurable settings is returned.  ### Further Information: Check for every settings key new corresponding API and key below.  If &#x60;eula_active&#x60; is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned: * &#x60;allow_system_global_weak_password&#x60; * &#x60;eula_active&#x60;  ### Configurable settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | **Password is no longer returned.**&lt;br&gt;Check &#x60;mailserver_password_set&#x60; to determine whether password is set. |  | | &#x60;mailserver_password_set&#x60; | Indicates if a password is set for the mailserver (because &#x60;mailserver_password&#x60; is always returned empty).&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.passwordDefined&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | User ame for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;globally_allow_share_password_sms&#x60; | Allow sending of share passwords via SMS **system-wide** (read-only).&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.smsConfigEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;use_s3_storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.useS3Storage&#x60; | &#x60;true or false&#x60; | | &#x60;s3_default_region&#x60; |Suggested S3 region (read-only)&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.s3DefaultRegion&#x60; | &#x60;Region name&#x60; |  &lt;/details&gt;  ### Deprecated settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return ConfigOptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ConfigOptionList requestSystemSettings(String xSdsAuthToken) throws ApiException {
        ApiResponse<ConfigOptionList> localVarResp = requestSystemSettingsWithHttpInfo(xSdsAuthToken);
        return localVarResp.getData();
    }

    /**
     * Request system settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; required.  ### Postcondition: List of configurable settings is returned.  ### Further Information: Check for every settings key new corresponding API and key below.  If &#x60;eula_active&#x60; is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned: * &#x60;allow_system_global_weak_password&#x60; * &#x60;eula_active&#x60;  ### Configurable settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | **Password is no longer returned.**&lt;br&gt;Check &#x60;mailserver_password_set&#x60; to determine whether password is set. |  | | &#x60;mailserver_password_set&#x60; | Indicates if a password is set for the mailserver (because &#x60;mailserver_password&#x60; is always returned empty).&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.passwordDefined&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | User ame for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;globally_allow_share_password_sms&#x60; | Allow sending of share passwords via SMS **system-wide** (read-only).&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.smsConfigEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;use_s3_storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.useS3Storage&#x60; | &#x60;true or false&#x60; | | &#x60;s3_default_region&#x60; |Suggested S3 region (read-only)&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.s3DefaultRegion&#x60; | &#x60;Region name&#x60; |  &lt;/details&gt;  ### Deprecated settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;ConfigOptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ConfigOptionList> requestSystemSettingsWithHttpInfo(String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = requestSystemSettingsValidateBeforeCall(xSdsAuthToken, null);
        Type localVarReturnType = new TypeToken<ConfigOptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request system settings (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description:   Returns a list of configurable system settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; required.  ### Postcondition: List of configurable settings is returned.  ### Further Information: Check for every settings key new corresponding API and key below.  If &#x60;eula_active&#x60; is true, but **NOT** accepted yet, or password **MUST** be changed, only the following two values are returned: * &#x60;allow_system_global_weak_password&#x60; * &#x60;eula_active&#x60;  ### Configurable settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;GET /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60; | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | **Password is no longer returned.**&lt;br&gt;Check &#x60;mailserver_password_set&#x60; to determine whether password is set. |  | | &#x60;mailserver_password_set&#x60; | Indicates if a password is set for the mailserver (because &#x60;mailserver_password&#x60; is always returned empty).&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.passwordDefined&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | User ame for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;GET /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;GET /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;globally_allow_share_password_sms&#x60; | Allow sending of share passwords via SMS **system-wide** (read-only).&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.smsConfigEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;use_s3_storage&#x60; | Defines if S3 is used as storage backend.&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.useS3Storage&#x60; | &#x60;true or false&#x60; | | &#x60;s3_default_region&#x60; |Suggested S3 region (read-only)&lt;br&gt;cf. &#x60;GET /system/config/settings/infrastructure&#x60; &#x60;InfrastructureProperties.s3DefaultRegion&#x60; | &#x60;Region name&#x60; |  &lt;/details&gt;  ### Deprecated settings &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;GET /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;GET /system/config/policies/passwords&#x60; API to get configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call requestSystemSettingsAsync(String xSdsAuthToken, final ApiCallback<ConfigOptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSystemSettingsValidateBeforeCall(xSdsAuthToken, _callback);
        Type localVarReturnType = new TypeToken<ConfigOptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSystemSettings
     * @param configOptionList  (required)
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSystemSettingsCall(ConfigOptionList configOptionList, String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = configOptionList;

        // create path and map variables
        String localVarPath = "/v4/config/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xSdsAuthToken != null) {
            localVarHeaderParams.put("X-Sds-Auth-Token", localVarApiClient.parameterToString(xSdsAuthToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSystemSettingsValidateBeforeCall(ConfigOptionList configOptionList, String xSdsAuthToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'configOptionList' is set
        if (configOptionList == null) {
            throw new ApiException("Missing the required parameter 'configOptionList' when calling updateSystemSettings(Async)");
        }

        return updateSystemSettingsCall(configOptionList, xSdsAuthToken, _callback);

    }

    /**
     * Update system settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description: Update configurable settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: One or more global settings gets changed.  ### Further Information: This API is deprecated and will be removed in the future.   Check for every settings key new corresponding API and key below.  ### Configurable settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | Password for email server&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.password&#x60; | &#x60;Password for authentication&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | Username for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; |  &lt;/details&gt;  ### Deprecated settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;PUT /system/config/policies/passwords&#x60; API to change configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param configOptionList  (required)
     * @param xSdsAuthToken Authentication token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void updateSystemSettings(ConfigOptionList configOptionList, String xSdsAuthToken) throws ApiException {
        updateSystemSettingsWithHttpInfo(configOptionList, xSdsAuthToken);
    }

    /**
     * Update system settings
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description: Update configurable settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: One or more global settings gets changed.  ### Further Information: This API is deprecated and will be removed in the future.   Check for every settings key new corresponding API and key below.  ### Configurable settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | Password for email server&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.password&#x60; | &#x60;Password for authentication&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | Username for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; |  &lt;/details&gt;  ### Deprecated settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;PUT /system/config/policies/passwords&#x60; API to change configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param configOptionList  (required)
     * @param xSdsAuthToken Authentication token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> updateSystemSettingsWithHttpInfo(ConfigOptionList configOptionList, String xSdsAuthToken) throws ApiException {
        okhttp3.Call localVarCall = updateSystemSettingsValidateBeforeCall(configOptionList, xSdsAuthToken, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update system settings (asynchronously)
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.6.0&lt;/h3&gt;  ### Description: Update configurable settings.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: One or more global settings gets changed.  ### Further Information: This API is deprecated and will be removed in the future.   Check for every settings key new corresponding API and key below.  ### Configurable settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;branding_server_branding_id&#x60; | The branding UUID, which corresponds to _BRANDING-QUALIFIER_ in the new branding server.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingQualifier&#x60; | &#x60;String&#x60; | | &#x60;branding_portal_url&#x60; | Access URL to to the Branding Portal&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/branding&#x60; &#x60;BrandingConfig.brandingProviderUrl&#x60; | &#x60;String&#x60; | | &#x60;dblog&#x60; | Write logs to local database.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;default_downloadshare_expiration_period&#x60; | Default expiration period for Download Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.downloadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_file_upload_expiration_date&#x60; | Default expiration period for all uploaded files in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.fileDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;default_language&#x60; | Define which language should be default.&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.languageDefault&#x60; | cf. &#x60;GET /public/system/info&#x60; - &#x60;SystemInfo.languageDefault&#x60; | | &#x60;default_uploadshare_expiration_period&#x60; | Default expiration period for Upload Shares in days&lt;br&gt;cf. &#x60;PUT /system/config/settings/defaults&#x60; &#x60;SystemDefaults.uploadShareDefaultExpirationPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;Set &#x60;0&#x60; to disable. | | &#x60;enable_client_side_crypto&#x60; | Activation status of client-side encryption&lt;br&gt;Can only be enabled once; disabling is **NOT** possible.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.cryptoEnabled&#x60; | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;false&#x60; | | &#x60;eula_active&#x60; | Each user has to confirm the EULA at first login.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.eulaEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;eventlog_retention_period&#x60; | Retention period (in days) of event log entries&lt;br&gt;After that period, all entries are deleted.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.retentionPeriod&#x60; | &#x60;Integer between 0 and 9999&#x60;&lt;br&gt;If set to &#x60;0&#x60;: no logs are deleted&lt;br&gt;Recommended value: &#x60;7&#x60; | | &#x60;ip_address_logging&#x60; | Determines whether a user&#39;s IP address is logged.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/eventlog&#x60; &#x60;EventlogConfig.logIpEnabled&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.logIpEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver&#x60; | Email server to send emails.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.host&#x60; | &#x60;DNS name or IPv4 of an email server&#x60; | | &#x60;mailserver_authentication_necessary&#x60; | Set to &#x60;true&#x60; if the email server requires authentication.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.authenticationEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_password&#x60; | Password for email server&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.password&#x60; | &#x60;Password for authentication&#x60; | | &#x60;mailserver_port&#x60; | Email server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;mailserver_username&#x60; | Username for email server&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;Username for authentication&#x60; | | &#x60;mailserver_use_ssl&#x60; | Email server requires SSL connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_starttls&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.username&#x60; | &#x60;true or false&#x60; | | &#x60;mailserver_use_starttls&#x60; | Email server requires StartTLS connection?&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;Requires &#x60;mailserver_use_ssl&#x60; to be &#x60;false&#x60;&lt;br&gt;cf. &#x60;PUT /system/config/settings/mail_server&#x60; &#x60;MailServerConfig.starttlsEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog&#x60; | Write logs to a syslog interface.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.enabled&#x60; | &#x60;true or false&#x60; | | &#x60;syslog_host&#x60; | Syslog server (IP or FQDN)&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.host&#x60; | &#x60;DNS name or IPv4 of a syslog server&#x60; | | &#x60;syslog_port&#x60; | Syslog server port&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.port&#x60; | &#x60;Valid port number&#x60; | | &#x60;syslog_protocol&#x60; | Protocol to connect to syslog server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;cf. &#x60;PUT /system/config/settings/syslog&#x60; &#x60;SyslogConfig.protocol&#x60; | &#x60;TCP or UDP&#x60; | | &#x60;enable_email_notification_button&#x60; | Enable mail notification button.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.emailNotificationButtonEnabled&#x60; | &#x60;true or false&#x60; | | &#x60;allow_share_password_sms&#x60; | Allow sending of share passwords via SMS.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.sharePasswordSmsEnabled&#x60; | &#x60;true or false&#x60; |  &lt;/details&gt;  ### Deprecated settings: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &lt;del&gt;&#x60;allow_system_global_weak_password&#x60;&lt;/del&gt; | Determines whether weak password (cf. _Password Policy_ below) is allowed.&lt;br&gt;cf. &#x60;PUT /system/config/settings/general&#x60; &#x60;GeneralSettings.weakPasswordEnabled&#x60;&lt;br&gt;Use &#x60;PUT /system/config/policies/passwords&#x60; API to change configured password policies. | &#x60;true or false&#x60; | | &lt;del&gt;&#x60;branding_server_customer&#x60;&lt;/del&gt; | The UUID of the branding server customer, which corresponds to customer key in the branding server. | &#x60;String&#x60; | | &lt;del&gt;&#x60;branding_server_url&#x60;&lt;/del&gt; | Access URL to to the Branding Server.&lt;br&gt;Only visible for _Config Manager_ of Provider Customer. | &#x60;String&#x60; | | &lt;del&gt;&#x60;email_from&#x60;&lt;/del&gt; | Sender of system-generated emails&lt;br&gt;Only visible for _Config Manager_ of Provider Customer.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_sales&#x60;&lt;/del&gt; | Contact email address for customers to request more user licenses or data volume.&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;email_to_support&#x60;&lt;/del&gt; | Support email address for users&lt;br&gt;**Moved to branding** | &#x60;Valid email address&#x60; | | &lt;del&gt;&#x60;file_size_js&#x60;&lt;/del&gt; | Maximum file size (in bytes) for downloads of encrypted files with JavaScript.&lt;br&gt;Bigger files will require a JavaApplet. | &#x60;Integer&#x60;&lt;br&gt;Recommended value: &#x60;10485760&#x60; (&#x3D;&#x60;10MB&#x60;) | | &lt;del&gt;&#x60;system_name&#x60;&lt;/del&gt; | System name&lt;br&gt;**Moved to branding** use &#x60;product.title&#x60; | &#x60;Display name of the DRACOON&#x60; |  &lt;/details&gt;
     * @param configOptionList  (required)
     * @param xSdsAuthToken Authentication token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSystemSettingsAsync(ConfigOptionList configOptionList, String xSdsAuthToken, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSystemSettingsValidateBeforeCall(configOptionList, xSdsAuthToken, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
