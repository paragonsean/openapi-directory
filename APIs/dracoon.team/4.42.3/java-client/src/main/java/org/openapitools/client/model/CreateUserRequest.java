/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MfaConfig;
import org.openapitools.client.model.ObjectExpiration;
import org.openapitools.client.model.UserAuthData;
import org.openapitools.client.model.UserAuthMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for creating an user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUserRequest {
  public static final String SERIALIZED_NAME_AUTH_DATA = "authData";
  @SerializedName(SERIALIZED_NAME_AUTH_DATA)
  private UserAuthData authData;

  public static final String SERIALIZED_NAME_AUTH_METHODS = "authMethods";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS)
  private List<UserAuthMethod> authMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXPIRATION = "expiration";
  @SerializedName(SERIALIZED_NAME_EXPIRATION)
  private ObjectExpiration expiration;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender = "n";

  public static final String SERIALIZED_NAME_IS_NONMEMBER_VIEWER = "isNonmemberViewer";
  @SerializedName(SERIALIZED_NAME_IS_NONMEMBER_VIEWER)
  private Boolean isNonmemberViewer;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOGIN = "login";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LOGIN)
  private String login;

  public static final String SERIALIZED_NAME_MFA_CONFIG = "mfaConfig";
  @SerializedName(SERIALIZED_NAME_MFA_CONFIG)
  private MfaConfig mfaConfig;

  public static final String SERIALIZED_NAME_NEEDS_TO_CHANGE_PASSWORD = "needsToChangePassword";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NEEDS_TO_CHANGE_PASSWORD)
  private Boolean needsToChangePassword;

  public static final String SERIALIZED_NAME_NOTIFY_USER = "notifyUser";
  @SerializedName(SERIALIZED_NAME_NOTIFY_USER)
  private Boolean notifyUser;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_RECEIVER_LANGUAGE = "receiverLanguage";
  @SerializedName(SERIALIZED_NAME_RECEIVER_LANGUAGE)
  private String receiverLanguage;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public CreateUserRequest() {
  }

  public CreateUserRequest authData(UserAuthData authData) {
    this.authData = authData;
    return this;
  }

  /**
   * Get authData
   * @return authData
   */
  @javax.annotation.Nullable
  public UserAuthData getAuthData() {
    return authData;
  }

  public void setAuthData(UserAuthData authData) {
    this.authData = authData;
  }


  @Deprecated
  public CreateUserRequest authMethods(List<UserAuthMethod> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public CreateUserRequest addAuthMethodsItem(UserAuthMethod authMethodsItem) {
    if (this.authMethods == null) {
      this.authMethods = new ArrayList<>();
    }
    this.authMethods.add(authMethodsItem);
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  Authentication methods:  * &#x60;sql&#x60;  * &#x60;active_directory&#x60;  * &#x60;radius&#x60;  * &#x60;openid&#x60;  use &#x60;authData&#x60; instead
   * @return authMethods
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<UserAuthMethod> getAuthMethods() {
    return authMethods;
  }

  @Deprecated
  public void setAuthMethods(List<UserAuthMethod> authMethods) {
    this.authMethods = authMethods;
  }


  public CreateUserRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email 
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public CreateUserRequest expiration(ObjectExpiration expiration) {
    this.expiration = expiration;
    return this;
  }

  /**
   * Get expiration
   * @return expiration
   */
  @javax.annotation.Nullable
  public ObjectExpiration getExpiration() {
    return expiration;
  }

  public void setExpiration(ObjectExpiration expiration) {
    this.expiration = expiration;
  }


  public CreateUserRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * User first name
   * @return firstName
   */
  @javax.annotation.Nonnull
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  @Deprecated
  public CreateUserRequest gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.12.0  Gender  Do NOT use &#x60;gender&#x60;! It will be ignored.
   * @return gender
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  @Deprecated
  public void setGender(String gender) {
    this.gender = gender;
  }


  public CreateUserRequest isNonmemberViewer(Boolean isNonmemberViewer) {
    this.isNonmemberViewer = isNonmemberViewer;
    return this;
  }

  /**
   * &amp;#128640; Since v4.12.0  Determines whether user has the role NONMEMBER_VIEWER
   * @return isNonmemberViewer
   */
  @javax.annotation.Nullable
  public Boolean getIsNonmemberViewer() {
    return isNonmemberViewer;
  }

  public void setIsNonmemberViewer(Boolean isNonmemberViewer) {
    this.isNonmemberViewer = isNonmemberViewer;
  }


  public CreateUserRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * User last name
   * @return lastName
   */
  @javax.annotation.Nonnull
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  @Deprecated
  public CreateUserRequest login(String login) {
    this.login = login;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  User login name
   * @return login
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getLogin() {
    return login;
  }

  @Deprecated
  public void setLogin(String login) {
    this.login = login;
  }


  public CreateUserRequest mfaConfig(MfaConfig mfaConfig) {
    this.mfaConfig = mfaConfig;
    return this;
  }

  /**
   * Get mfaConfig
   * @return mfaConfig
   */
  @javax.annotation.Nullable
  public MfaConfig getMfaConfig() {
    return mfaConfig;
  }

  public void setMfaConfig(MfaConfig mfaConfig) {
    this.mfaConfig = mfaConfig;
  }


  @Deprecated
  public CreateUserRequest needsToChangePassword(Boolean needsToChangePassword) {
    this.needsToChangePassword = needsToChangePassword;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  Determines whether user has to change his / her initial password.  use &#x60;authDate.mustChangePassword&#x60; instead
   * @return needsToChangePassword
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getNeedsToChangePassword() {
    return needsToChangePassword;
  }

  @Deprecated
  public void setNeedsToChangePassword(Boolean needsToChangePassword) {
    this.needsToChangePassword = needsToChangePassword;
  }


  public CreateUserRequest notifyUser(Boolean notifyUser) {
    this.notifyUser = notifyUser;
    return this;
  }

  /**
   * &amp;#128640; Since v4.9.0  Notify user about his new account  * default: &#x60;true&#x60; for &#x60;basic&#x60; auth type  * default: &#x60;false&#x60; for &#x60;active_directory&#x60;, &#x60;openid&#x60; and &#x60;radius&#x60; auth types
   * @return notifyUser
   */
  @javax.annotation.Nullable
  public Boolean getNotifyUser() {
    return notifyUser;
  }

  public void setNotifyUser(Boolean notifyUser) {
    this.notifyUser = notifyUser;
  }


  @Deprecated
  public CreateUserRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  An initial password may be preset  use &#x60;authData&#x60; instead
   * @return password
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  @Deprecated
  public void setPassword(String password) {
    this.password = password;
  }


  public CreateUserRequest phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * Phone number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public CreateUserRequest receiverLanguage(String receiverLanguage) {
    this.receiverLanguage = receiverLanguage;
    return this;
  }

  /**
   * IETF language tag
   * @return receiverLanguage
   */
  @javax.annotation.Nullable
  public String getReceiverLanguage() {
    return receiverLanguage;
  }

  public void setReceiverLanguage(String receiverLanguage) {
    this.receiverLanguage = receiverLanguage;
  }


  @Deprecated
  public CreateUserRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.18.0  Job title
   * @return title
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  @Deprecated
  public void setTitle(String title) {
    this.title = title;
  }


  public CreateUserRequest userName(String userName) {
    this.userName = userName;
    return this;
  }

  /**
   * &amp;#128640; Since v4.13.0  Username
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }

  public void setUserName(String userName) {
    this.userName = userName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUserRequest createUserRequest = (CreateUserRequest) o;
    return Objects.equals(this.authData, createUserRequest.authData) &&
        Objects.equals(this.authMethods, createUserRequest.authMethods) &&
        Objects.equals(this.email, createUserRequest.email) &&
        Objects.equals(this.expiration, createUserRequest.expiration) &&
        Objects.equals(this.firstName, createUserRequest.firstName) &&
        Objects.equals(this.gender, createUserRequest.gender) &&
        Objects.equals(this.isNonmemberViewer, createUserRequest.isNonmemberViewer) &&
        Objects.equals(this.lastName, createUserRequest.lastName) &&
        Objects.equals(this.login, createUserRequest.login) &&
        Objects.equals(this.mfaConfig, createUserRequest.mfaConfig) &&
        Objects.equals(this.needsToChangePassword, createUserRequest.needsToChangePassword) &&
        Objects.equals(this.notifyUser, createUserRequest.notifyUser) &&
        Objects.equals(this.password, createUserRequest.password) &&
        Objects.equals(this.phone, createUserRequest.phone) &&
        Objects.equals(this.receiverLanguage, createUserRequest.receiverLanguage) &&
        Objects.equals(this.title, createUserRequest.title) &&
        Objects.equals(this.userName, createUserRequest.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authData, authMethods, email, expiration, firstName, gender, isNonmemberViewer, lastName, login, mfaConfig, needsToChangePassword, notifyUser, password, phone, receiverLanguage, title, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUserRequest {\n");
    sb.append("    authData: ").append(toIndentedString(authData)).append("\n");
    sb.append("    authMethods: ").append(toIndentedString(authMethods)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    isNonmemberViewer: ").append(toIndentedString(isNonmemberViewer)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    login: ").append(toIndentedString(login)).append("\n");
    sb.append("    mfaConfig: ").append(toIndentedString(mfaConfig)).append("\n");
    sb.append("    needsToChangePassword: ").append(toIndentedString(needsToChangePassword)).append("\n");
    sb.append("    notifyUser: ").append(toIndentedString(notifyUser)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    receiverLanguage: ").append(toIndentedString(receiverLanguage)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authData");
    openapiFields.add("authMethods");
    openapiFields.add("email");
    openapiFields.add("expiration");
    openapiFields.add("firstName");
    openapiFields.add("gender");
    openapiFields.add("isNonmemberViewer");
    openapiFields.add("lastName");
    openapiFields.add("login");
    openapiFields.add("mfaConfig");
    openapiFields.add("needsToChangePassword");
    openapiFields.add("notifyUser");
    openapiFields.add("password");
    openapiFields.add("phone");
    openapiFields.add("receiverLanguage");
    openapiFields.add("title");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUserRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUserRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUserRequest is not found in the empty JSON string", CreateUserRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUserRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUserRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUserRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authData`
      if (jsonObj.get("authData") != null && !jsonObj.get("authData").isJsonNull()) {
        UserAuthData.validateJsonElement(jsonObj.get("authData"));
      }
      if (jsonObj.get("authMethods") != null && !jsonObj.get("authMethods").isJsonNull()) {
        JsonArray jsonArrayauthMethods = jsonObj.getAsJsonArray("authMethods");
        if (jsonArrayauthMethods != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authMethods").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authMethods").toString()));
          }

          // validate the optional field `authMethods` (array)
          for (int i = 0; i < jsonArrayauthMethods.size(); i++) {
            UserAuthMethod.validateJsonElement(jsonArrayauthMethods.get(i));
          };
        }
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      // validate the optional field `expiration`
      if (jsonObj.get("expiration") != null && !jsonObj.get("expiration").isJsonNull()) {
        ObjectExpiration.validateJsonElement(jsonObj.get("expiration"));
      }
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("login") != null && !jsonObj.get("login").isJsonNull()) && !jsonObj.get("login").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login").toString()));
      }
      // validate the optional field `mfaConfig`
      if (jsonObj.get("mfaConfig") != null && !jsonObj.get("mfaConfig").isJsonNull()) {
        MfaConfig.validateJsonElement(jsonObj.get("mfaConfig"));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("receiverLanguage") != null && !jsonObj.get("receiverLanguage").isJsonNull()) && !jsonObj.get("receiverLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverLanguage").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUserRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUserRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUserRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUserRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUserRequest>() {
           @Override
           public void write(JsonWriter out, CreateUserRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUserRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUserRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUserRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUserRequest
   */
  public static CreateUserRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUserRequest.class);
  }

  /**
   * Convert an instance of CreateUserRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

