/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * System information (default language and authentication methods)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SystemInfo {
  public static final String SERIALIZED_NAME_AUTH_METHODS = "authMethods";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AUTH_METHODS)
  private List<AuthMethod> authMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE_LOGIN_INPUT_FIELDS = "hideLoginInputFields";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HIDE_LOGIN_INPUT_FIELDS)
  private Boolean hideLoginInputFields;

  public static final String SERIALIZED_NAME_LANGUAGE_DEFAULT = "languageDefault";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DEFAULT)
  private String languageDefault;

  public static final String SERIALIZED_NAME_S3_ENFORCE_DIRECT_UPLOAD = "s3EnforceDirectUpload";
  @SerializedName(SERIALIZED_NAME_S3_ENFORCE_DIRECT_UPLOAD)
  private Boolean s3EnforceDirectUpload;

  public static final String SERIALIZED_NAME_S3_HOSTS = "s3Hosts";
  @SerializedName(SERIALIZED_NAME_S3_HOSTS)
  private List<String> s3Hosts = new ArrayList<>();

  public static final String SERIALIZED_NAME_USE_S3_STORAGE = "useS3Storage";
  @SerializedName(SERIALIZED_NAME_USE_S3_STORAGE)
  private Boolean useS3Storage;

  public SystemInfo() {
  }

  @Deprecated
  public SystemInfo authMethods(List<AuthMethod> authMethods) {
    this.authMethods = authMethods;
    return this;
  }

  public SystemInfo addAuthMethodsItem(AuthMethod authMethodsItem) {
    if (this.authMethods == null) {
      this.authMethods = new ArrayList<>();
    }
    this.authMethods.add(authMethodsItem);
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.13.0  Authentication methods:  * &#x60;sql&#x60;  * &#x60;active_directory&#x60;  * &#x60;radius&#x60;  * &#x60;openid&#x60;  use &#x60;authData&#x60; instead
   * @return authMethods
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public List<AuthMethod> getAuthMethods() {
    return authMethods;
  }

  @Deprecated
  public void setAuthMethods(List<AuthMethod> authMethods) {
    this.authMethods = authMethods;
  }


  @Deprecated
  public SystemInfo hideLoginInputFields(Boolean hideLoginInputFields) {
    this.hideLoginInputFields = hideLoginInputFields;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.42.0  Defines if login fields should be hidden
   * @return hideLoginInputFields
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nonnull
  public Boolean getHideLoginInputFields() {
    return hideLoginInputFields;
  }

  @Deprecated
  public void setHideLoginInputFields(Boolean hideLoginInputFields) {
    this.hideLoginInputFields = hideLoginInputFields;
  }


  public SystemInfo languageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
    return this;
  }

  /**
   * System default language  cf. [RFC 5646](https://tools.ietf.org/html/rfc5646)
   * @return languageDefault
   */
  @javax.annotation.Nonnull
  public String getLanguageDefault() {
    return languageDefault;
  }

  public void setLanguageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
  }


  public SystemInfo s3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
    return this;
  }

  /**
   * &amp;#128640; Since v4.15.0  Determines whether S3 direct upload is enforced or not
   * @return s3EnforceDirectUpload
   */
  @javax.annotation.Nonnull
  public Boolean getS3EnforceDirectUpload() {
    return s3EnforceDirectUpload;
  }

  public void setS3EnforceDirectUpload(Boolean s3EnforceDirectUpload) {
    this.s3EnforceDirectUpload = s3EnforceDirectUpload;
  }


  public SystemInfo s3Hosts(List<String> s3Hosts) {
    this.s3Hosts = s3Hosts;
    return this;
  }

  public SystemInfo addS3HostsItem(String s3HostsItem) {
    if (this.s3Hosts == null) {
      this.s3Hosts = new ArrayList<>();
    }
    this.s3Hosts.add(s3HostsItem);
    return this;
  }

  /**
   * &amp;#128640; Since v4.14.0  List of S3 Hosts for CSP header
   * @return s3Hosts
   */
  @javax.annotation.Nonnull
  public List<String> getS3Hosts() {
    return s3Hosts;
  }

  public void setS3Hosts(List<String> s3Hosts) {
    this.s3Hosts = s3Hosts;
  }


  public SystemInfo useS3Storage(Boolean useS3Storage) {
    this.useS3Storage = useS3Storage;
    return this;
  }

  /**
   * &amp;#128640; Since v4.21.0  Defines if S3 is used as storage backend
   * @return useS3Storage
   */
  @javax.annotation.Nonnull
  public Boolean getUseS3Storage() {
    return useS3Storage;
  }

  public void setUseS3Storage(Boolean useS3Storage) {
    this.useS3Storage = useS3Storage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemInfo systemInfo = (SystemInfo) o;
    return Objects.equals(this.authMethods, systemInfo.authMethods) &&
        Objects.equals(this.hideLoginInputFields, systemInfo.hideLoginInputFields) &&
        Objects.equals(this.languageDefault, systemInfo.languageDefault) &&
        Objects.equals(this.s3EnforceDirectUpload, systemInfo.s3EnforceDirectUpload) &&
        Objects.equals(this.s3Hosts, systemInfo.s3Hosts) &&
        Objects.equals(this.useS3Storage, systemInfo.useS3Storage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMethods, hideLoginInputFields, languageDefault, s3EnforceDirectUpload, s3Hosts, useS3Storage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemInfo {\n");
    sb.append("    authMethods: ").append(toIndentedString(authMethods)).append("\n");
    sb.append("    hideLoginInputFields: ").append(toIndentedString(hideLoginInputFields)).append("\n");
    sb.append("    languageDefault: ").append(toIndentedString(languageDefault)).append("\n");
    sb.append("    s3EnforceDirectUpload: ").append(toIndentedString(s3EnforceDirectUpload)).append("\n");
    sb.append("    s3Hosts: ").append(toIndentedString(s3Hosts)).append("\n");
    sb.append("    useS3Storage: ").append(toIndentedString(useS3Storage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authMethods");
    openapiFields.add("hideLoginInputFields");
    openapiFields.add("languageDefault");
    openapiFields.add("s3EnforceDirectUpload");
    openapiFields.add("s3Hosts");
    openapiFields.add("useS3Storage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authMethods");
    openapiRequiredFields.add("hideLoginInputFields");
    openapiRequiredFields.add("languageDefault");
    openapiRequiredFields.add("s3EnforceDirectUpload");
    openapiRequiredFields.add("s3Hosts");
    openapiRequiredFields.add("useS3Storage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SystemInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SystemInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SystemInfo is not found in the empty JSON string", SystemInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SystemInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SystemInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SystemInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("authMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authMethods` to be an array in the JSON string but got `%s`", jsonObj.get("authMethods").toString()));
      }

      JsonArray jsonArrayauthMethods = jsonObj.getAsJsonArray("authMethods");
      // validate the required field `authMethods` (array)
      for (int i = 0; i < jsonArrayauthMethods.size(); i++) {
        AuthMethod.validateJsonElement(jsonArrayauthMethods.get(i));
      };
      if (!jsonObj.get("languageDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageDefault").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("s3Hosts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("s3Hosts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Hosts` to be an array in the JSON string but got `%s`", jsonObj.get("s3Hosts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SystemInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SystemInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SystemInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SystemInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SystemInfo>() {
           @Override
           public void write(JsonWriter out, SystemInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SystemInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SystemInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SystemInfo
   * @throws IOException if the JSON string is invalid with respect to SystemInfo
   */
  public static SystemInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SystemInfo.class);
  }

  /**
   * Convert an instance of SystemInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

