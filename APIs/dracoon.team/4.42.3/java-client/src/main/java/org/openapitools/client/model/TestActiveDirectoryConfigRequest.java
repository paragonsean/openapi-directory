/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for testing connection for Active Directory configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestActiveDirectoryConfigRequest {
  public static final String SERIALIZED_NAME_LDAP_USERS_DOMAIN = "ldapUsersDomain";
  @SerializedName(SERIALIZED_NAME_LDAP_USERS_DOMAIN)
  private String ldapUsersDomain;

  public static final String SERIALIZED_NAME_SERVER_ADMIN_NAME = "serverAdminName";
  @SerializedName(SERIALIZED_NAME_SERVER_ADMIN_NAME)
  private String serverAdminName;

  public static final String SERIALIZED_NAME_SERVER_ADMIN_PASSWORD = "serverAdminPassword";
  @SerializedName(SERIALIZED_NAME_SERVER_ADMIN_PASSWORD)
  private String serverAdminPassword;

  public static final String SERIALIZED_NAME_SERVER_IP = "serverIp";
  @SerializedName(SERIALIZED_NAME_SERVER_IP)
  private String serverIp;

  public static final String SERIALIZED_NAME_SERVER_PORT = "serverPort";
  @SerializedName(SERIALIZED_NAME_SERVER_PORT)
  private Integer serverPort;

  public static final String SERIALIZED_NAME_SSL_FINGER_PRINT = "sslFingerPrint";
  @SerializedName(SERIALIZED_NAME_SSL_FINGER_PRINT)
  private String sslFingerPrint;

  public static final String SERIALIZED_NAME_USE_LDAPS = "useLdaps";
  @SerializedName(SERIALIZED_NAME_USE_LDAPS)
  private Boolean useLdaps = false;

  public TestActiveDirectoryConfigRequest() {
  }

  public TestActiveDirectoryConfigRequest ldapUsersDomain(String ldapUsersDomain) {
    this.ldapUsersDomain = ldapUsersDomain;
    return this;
  }

  /**
   * Search scope of Active Directory; only users below this node can log on.
   * @return ldapUsersDomain
   */
  @javax.annotation.Nonnull
  public String getLdapUsersDomain() {
    return ldapUsersDomain;
  }

  public void setLdapUsersDomain(String ldapUsersDomain) {
    this.ldapUsersDomain = ldapUsersDomain;
  }


  public TestActiveDirectoryConfigRequest serverAdminName(String serverAdminName) {
    this.serverAdminName = serverAdminName;
    return this;
  }

  /**
   * Distinguished Name (DN) of Active Directory administrative account
   * @return serverAdminName
   */
  @javax.annotation.Nonnull
  public String getServerAdminName() {
    return serverAdminName;
  }

  public void setServerAdminName(String serverAdminName) {
    this.serverAdminName = serverAdminName;
  }


  public TestActiveDirectoryConfigRequest serverAdminPassword(String serverAdminPassword) {
    this.serverAdminPassword = serverAdminPassword;
    return this;
  }

  /**
   * Password of Active Directory administrative account
   * @return serverAdminPassword
   */
  @javax.annotation.Nonnull
  public String getServerAdminPassword() {
    return serverAdminPassword;
  }

  public void setServerAdminPassword(String serverAdminPassword) {
    this.serverAdminPassword = serverAdminPassword;
  }


  public TestActiveDirectoryConfigRequest serverIp(String serverIp) {
    this.serverIp = serverIp;
    return this;
  }

  /**
   * IPv4 or IPv6 address or host name
   * @return serverIp
   */
  @javax.annotation.Nonnull
  public String getServerIp() {
    return serverIp;
  }

  public void setServerIp(String serverIp) {
    this.serverIp = serverIp;
  }


  public TestActiveDirectoryConfigRequest serverPort(Integer serverPort) {
    this.serverPort = serverPort;
    return this;
  }

  /**
   * Port
   * @return serverPort
   */
  @javax.annotation.Nonnull
  public Integer getServerPort() {
    return serverPort;
  }

  public void setServerPort(Integer serverPort) {
    this.serverPort = serverPort;
  }


  public TestActiveDirectoryConfigRequest sslFingerPrint(String sslFingerPrint) {
    this.sslFingerPrint = sslFingerPrint;
    return this;
  }

  /**
   * SSL finger print of Active Directory server.  Mandatory for LDAPS connections.  Format: &#x60;Algorithm/Fingerprint&#x60;
   * @return sslFingerPrint
   */
  @javax.annotation.Nullable
  public String getSslFingerPrint() {
    return sslFingerPrint;
  }

  public void setSslFingerPrint(String sslFingerPrint) {
    this.sslFingerPrint = sslFingerPrint;
  }


  public TestActiveDirectoryConfigRequest useLdaps(Boolean useLdaps) {
    this.useLdaps = useLdaps;
    return this;
  }

  /**
   * Determines whether LDAPS should be used instead of plain LDAP.
   * @return useLdaps
   */
  @javax.annotation.Nullable
  public Boolean getUseLdaps() {
    return useLdaps;
  }

  public void setUseLdaps(Boolean useLdaps) {
    this.useLdaps = useLdaps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestActiveDirectoryConfigRequest testActiveDirectoryConfigRequest = (TestActiveDirectoryConfigRequest) o;
    return Objects.equals(this.ldapUsersDomain, testActiveDirectoryConfigRequest.ldapUsersDomain) &&
        Objects.equals(this.serverAdminName, testActiveDirectoryConfigRequest.serverAdminName) &&
        Objects.equals(this.serverAdminPassword, testActiveDirectoryConfigRequest.serverAdminPassword) &&
        Objects.equals(this.serverIp, testActiveDirectoryConfigRequest.serverIp) &&
        Objects.equals(this.serverPort, testActiveDirectoryConfigRequest.serverPort) &&
        Objects.equals(this.sslFingerPrint, testActiveDirectoryConfigRequest.sslFingerPrint) &&
        Objects.equals(this.useLdaps, testActiveDirectoryConfigRequest.useLdaps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ldapUsersDomain, serverAdminName, serverAdminPassword, serverIp, serverPort, sslFingerPrint, useLdaps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestActiveDirectoryConfigRequest {\n");
    sb.append("    ldapUsersDomain: ").append(toIndentedString(ldapUsersDomain)).append("\n");
    sb.append("    serverAdminName: ").append(toIndentedString(serverAdminName)).append("\n");
    sb.append("    serverAdminPassword: ").append(toIndentedString(serverAdminPassword)).append("\n");
    sb.append("    serverIp: ").append(toIndentedString(serverIp)).append("\n");
    sb.append("    serverPort: ").append(toIndentedString(serverPort)).append("\n");
    sb.append("    sslFingerPrint: ").append(toIndentedString(sslFingerPrint)).append("\n");
    sb.append("    useLdaps: ").append(toIndentedString(useLdaps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ldapUsersDomain");
    openapiFields.add("serverAdminName");
    openapiFields.add("serverAdminPassword");
    openapiFields.add("serverIp");
    openapiFields.add("serverPort");
    openapiFields.add("sslFingerPrint");
    openapiFields.add("useLdaps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ldapUsersDomain");
    openapiRequiredFields.add("serverAdminName");
    openapiRequiredFields.add("serverAdminPassword");
    openapiRequiredFields.add("serverIp");
    openapiRequiredFields.add("serverPort");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestActiveDirectoryConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestActiveDirectoryConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestActiveDirectoryConfigRequest is not found in the empty JSON string", TestActiveDirectoryConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestActiveDirectoryConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestActiveDirectoryConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestActiveDirectoryConfigRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ldapUsersDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ldapUsersDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ldapUsersDomain").toString()));
      }
      if (!jsonObj.get("serverAdminName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverAdminName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverAdminName").toString()));
      }
      if (!jsonObj.get("serverAdminPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverAdminPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverAdminPassword").toString()));
      }
      if (!jsonObj.get("serverIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverIp").toString()));
      }
      if ((jsonObj.get("sslFingerPrint") != null && !jsonObj.get("sslFingerPrint").isJsonNull()) && !jsonObj.get("sslFingerPrint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslFingerPrint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslFingerPrint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestActiveDirectoryConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestActiveDirectoryConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestActiveDirectoryConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestActiveDirectoryConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TestActiveDirectoryConfigRequest>() {
           @Override
           public void write(JsonWriter out, TestActiveDirectoryConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestActiveDirectoryConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestActiveDirectoryConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestActiveDirectoryConfigRequest
   * @throws IOException if the JSON string is invalid with respect to TestActiveDirectoryConfigRequest
   */
  public static TestActiveDirectoryConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestActiveDirectoryConfigRequest.class);
  }

  /**
   * Convert an instance of TestActiveDirectoryConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

