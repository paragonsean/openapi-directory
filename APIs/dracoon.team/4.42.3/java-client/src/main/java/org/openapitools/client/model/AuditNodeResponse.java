/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuditUserPermission;
import org.openapitools.client.model.UserInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Audit node report
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditNodeResponse {
  public static final String SERIALIZED_NAME_AUDIT_USER_PERMISSION_LIST = "auditUserPermissionList";
  @SerializedName(SERIALIZED_NAME_AUDIT_USER_PERMISSION_LIST)
  private List<AuditUserPermission> auditUserPermissionList = new ArrayList<>();

  public static final String SERIALIZED_NAME_NODE_CNT_CHILDREN = "nodeCntChildren";
  @SerializedName(SERIALIZED_NAME_NODE_CNT_CHILDREN)
  private Integer nodeCntChildren;

  public static final String SERIALIZED_NAME_NODE_CREATED_AT = "nodeCreatedAt";
  @SerializedName(SERIALIZED_NAME_NODE_CREATED_AT)
  private OffsetDateTime nodeCreatedAt;

  public static final String SERIALIZED_NAME_NODE_CREATED_BY = "nodeCreatedBy";
  @SerializedName(SERIALIZED_NAME_NODE_CREATED_BY)
  private UserInfo nodeCreatedBy;

  public static final String SERIALIZED_NAME_NODE_HAS_ACTIVITIES_LOG = "nodeHasActivitiesLog";
  @SerializedName(SERIALIZED_NAME_NODE_HAS_ACTIVITIES_LOG)
  private Boolean nodeHasActivitiesLog = true;

  public static final String SERIALIZED_NAME_NODE_HAS_RECYCLE_BIN = "nodeHasRecycleBin";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NODE_HAS_RECYCLE_BIN)
  private Boolean nodeHasRecycleBin;

  public static final String SERIALIZED_NAME_NODE_ID = "nodeId";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  private Long nodeId;

  public static final String SERIALIZED_NAME_NODE_IS_ENCRYPTED = "nodeIsEncrypted";
  @SerializedName(SERIALIZED_NAME_NODE_IS_ENCRYPTED)
  private Boolean nodeIsEncrypted;

  public static final String SERIALIZED_NAME_NODE_NAME = "nodeName";
  @SerializedName(SERIALIZED_NAME_NODE_NAME)
  private String nodeName;

  public static final String SERIALIZED_NAME_NODE_PARENT_ID = "nodeParentId";
  @SerializedName(SERIALIZED_NAME_NODE_PARENT_ID)
  private Long nodeParentId;

  public static final String SERIALIZED_NAME_NODE_PARENT_PATH = "nodeParentPath";
  @SerializedName(SERIALIZED_NAME_NODE_PARENT_PATH)
  private String nodeParentPath;

  public static final String SERIALIZED_NAME_NODE_QUOTA = "nodeQuota";
  @SerializedName(SERIALIZED_NAME_NODE_QUOTA)
  private Long nodeQuota;

  public static final String SERIALIZED_NAME_NODE_RECYCLE_BIN_RETENTION_PERIOD = "nodeRecycleBinRetentionPeriod";
  @SerializedName(SERIALIZED_NAME_NODE_RECYCLE_BIN_RETENTION_PERIOD)
  private Integer nodeRecycleBinRetentionPeriod;

  public static final String SERIALIZED_NAME_NODE_SIZE = "nodeSize";
  @SerializedName(SERIALIZED_NAME_NODE_SIZE)
  private Long nodeSize;

  public static final String SERIALIZED_NAME_NODE_UPDATED_AT = "nodeUpdatedAt";
  @SerializedName(SERIALIZED_NAME_NODE_UPDATED_AT)
  private OffsetDateTime nodeUpdatedAt;

  public static final String SERIALIZED_NAME_NODE_UPDATED_BY = "nodeUpdatedBy";
  @SerializedName(SERIALIZED_NAME_NODE_UPDATED_BY)
  private UserInfo nodeUpdatedBy;

  public AuditNodeResponse() {
  }

  public AuditNodeResponse auditUserPermissionList(List<AuditUserPermission> auditUserPermissionList) {
    this.auditUserPermissionList = auditUserPermissionList;
    return this;
  }

  public AuditNodeResponse addAuditUserPermissionListItem(AuditUserPermission auditUserPermissionListItem) {
    if (this.auditUserPermissionList == null) {
      this.auditUserPermissionList = new ArrayList<>();
    }
    this.auditUserPermissionList.add(auditUserPermissionListItem);
    return this;
  }

  /**
   * List of assigned users with permissions
   * @return auditUserPermissionList
   */
  @javax.annotation.Nonnull
  public List<AuditUserPermission> getAuditUserPermissionList() {
    return auditUserPermissionList;
  }

  public void setAuditUserPermissionList(List<AuditUserPermission> auditUserPermissionList) {
    this.auditUserPermissionList = auditUserPermissionList;
  }


  public AuditNodeResponse nodeCntChildren(Integer nodeCntChildren) {
    this.nodeCntChildren = nodeCntChildren;
    return this;
  }

  /**
   * Number of direct children  (no recursion; for rooms only)
   * @return nodeCntChildren
   */
  @javax.annotation.Nonnull
  public Integer getNodeCntChildren() {
    return nodeCntChildren;
  }

  public void setNodeCntChildren(Integer nodeCntChildren) {
    this.nodeCntChildren = nodeCntChildren;
  }


  public AuditNodeResponse nodeCreatedAt(OffsetDateTime nodeCreatedAt) {
    this.nodeCreatedAt = nodeCreatedAt;
    return this;
  }

  /**
   * Creation date
   * @return nodeCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNodeCreatedAt() {
    return nodeCreatedAt;
  }

  public void setNodeCreatedAt(OffsetDateTime nodeCreatedAt) {
    this.nodeCreatedAt = nodeCreatedAt;
  }


  public AuditNodeResponse nodeCreatedBy(UserInfo nodeCreatedBy) {
    this.nodeCreatedBy = nodeCreatedBy;
    return this;
  }

  /**
   * Get nodeCreatedBy
   * @return nodeCreatedBy
   */
  @javax.annotation.Nullable
  public UserInfo getNodeCreatedBy() {
    return nodeCreatedBy;
  }

  public void setNodeCreatedBy(UserInfo nodeCreatedBy) {
    this.nodeCreatedBy = nodeCreatedBy;
  }


  public AuditNodeResponse nodeHasActivitiesLog(Boolean nodeHasActivitiesLog) {
    this.nodeHasActivitiesLog = nodeHasActivitiesLog;
    return this;
  }

  /**
   * Is activities log active (for rooms only)
   * @return nodeHasActivitiesLog
   */
  @javax.annotation.Nullable
  public Boolean getNodeHasActivitiesLog() {
    return nodeHasActivitiesLog;
  }

  public void setNodeHasActivitiesLog(Boolean nodeHasActivitiesLog) {
    this.nodeHasActivitiesLog = nodeHasActivitiesLog;
  }


  @Deprecated
  public AuditNodeResponse nodeHasRecycleBin(Boolean nodeHasRecycleBin) {
    this.nodeHasRecycleBin = nodeHasRecycleBin;
    return this;
  }

  /**
   * &amp;#128679; Deprecated since v4.10.0  Is recycle bin active (for rooms only)  Recycle bin is always on (disabling is not possible).
   * @return nodeHasRecycleBin
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getNodeHasRecycleBin() {
    return nodeHasRecycleBin;
  }

  @Deprecated
  public void setNodeHasRecycleBin(Boolean nodeHasRecycleBin) {
    this.nodeHasRecycleBin = nodeHasRecycleBin;
  }


  public AuditNodeResponse nodeId(Long nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Node ID
   * @return nodeId
   */
  @javax.annotation.Nonnull
  public Long getNodeId() {
    return nodeId;
  }

  public void setNodeId(Long nodeId) {
    this.nodeId = nodeId;
  }


  public AuditNodeResponse nodeIsEncrypted(Boolean nodeIsEncrypted) {
    this.nodeIsEncrypted = nodeIsEncrypted;
    return this;
  }

  /**
   * Encryption state
   * @return nodeIsEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getNodeIsEncrypted() {
    return nodeIsEncrypted;
  }

  public void setNodeIsEncrypted(Boolean nodeIsEncrypted) {
    this.nodeIsEncrypted = nodeIsEncrypted;
  }


  public AuditNodeResponse nodeName(String nodeName) {
    this.nodeName = nodeName;
    return this;
  }

  /**
   * Node name
   * @return nodeName
   */
  @javax.annotation.Nonnull
  public String getNodeName() {
    return nodeName;
  }

  public void setNodeName(String nodeName) {
    this.nodeName = nodeName;
  }


  public AuditNodeResponse nodeParentId(Long nodeParentId) {
    this.nodeParentId = nodeParentId;
    return this;
  }

  /**
   * Parent node ID (room or folder)
   * @return nodeParentId
   */
  @javax.annotation.Nullable
  public Long getNodeParentId() {
    return nodeParentId;
  }

  public void setNodeParentId(Long nodeParentId) {
    this.nodeParentId = nodeParentId;
  }


  public AuditNodeResponse nodeParentPath(String nodeParentPath) {
    this.nodeParentPath = nodeParentPath;
    return this;
  }

  /**
   * Parent node path  &#x60;/&#x60; if node is a root node (room)
   * @return nodeParentPath
   */
  @javax.annotation.Nonnull
  public String getNodeParentPath() {
    return nodeParentPath;
  }

  public void setNodeParentPath(String nodeParentPath) {
    this.nodeParentPath = nodeParentPath;
  }


  public AuditNodeResponse nodeQuota(Long nodeQuota) {
    this.nodeQuota = nodeQuota;
    return this;
  }

  /**
   * Quota in byte
   * @return nodeQuota
   */
  @javax.annotation.Nullable
  public Long getNodeQuota() {
    return nodeQuota;
  }

  public void setNodeQuota(Long nodeQuota) {
    this.nodeQuota = nodeQuota;
  }


  public AuditNodeResponse nodeRecycleBinRetentionPeriod(Integer nodeRecycleBinRetentionPeriod) {
    this.nodeRecycleBinRetentionPeriod = nodeRecycleBinRetentionPeriod;
    return this;
  }

  /**
   * Retention period for deleted nodes in days
   * minimum: 0
   * maximum: 9999
   * @return nodeRecycleBinRetentionPeriod
   */
  @javax.annotation.Nullable
  public Integer getNodeRecycleBinRetentionPeriod() {
    return nodeRecycleBinRetentionPeriod;
  }

  public void setNodeRecycleBinRetentionPeriod(Integer nodeRecycleBinRetentionPeriod) {
    this.nodeRecycleBinRetentionPeriod = nodeRecycleBinRetentionPeriod;
  }


  public AuditNodeResponse nodeSize(Long nodeSize) {
    this.nodeSize = nodeSize;
    return this;
  }

  /**
   * Node size in byte
   * @return nodeSize
   */
  @javax.annotation.Nullable
  public Long getNodeSize() {
    return nodeSize;
  }

  public void setNodeSize(Long nodeSize) {
    this.nodeSize = nodeSize;
  }


  public AuditNodeResponse nodeUpdatedAt(OffsetDateTime nodeUpdatedAt) {
    this.nodeUpdatedAt = nodeUpdatedAt;
    return this;
  }

  /**
   * Modification date
   * @return nodeUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNodeUpdatedAt() {
    return nodeUpdatedAt;
  }

  public void setNodeUpdatedAt(OffsetDateTime nodeUpdatedAt) {
    this.nodeUpdatedAt = nodeUpdatedAt;
  }


  public AuditNodeResponse nodeUpdatedBy(UserInfo nodeUpdatedBy) {
    this.nodeUpdatedBy = nodeUpdatedBy;
    return this;
  }

  /**
   * Get nodeUpdatedBy
   * @return nodeUpdatedBy
   */
  @javax.annotation.Nullable
  public UserInfo getNodeUpdatedBy() {
    return nodeUpdatedBy;
  }

  public void setNodeUpdatedBy(UserInfo nodeUpdatedBy) {
    this.nodeUpdatedBy = nodeUpdatedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditNodeResponse auditNodeResponse = (AuditNodeResponse) o;
    return Objects.equals(this.auditUserPermissionList, auditNodeResponse.auditUserPermissionList) &&
        Objects.equals(this.nodeCntChildren, auditNodeResponse.nodeCntChildren) &&
        Objects.equals(this.nodeCreatedAt, auditNodeResponse.nodeCreatedAt) &&
        Objects.equals(this.nodeCreatedBy, auditNodeResponse.nodeCreatedBy) &&
        Objects.equals(this.nodeHasActivitiesLog, auditNodeResponse.nodeHasActivitiesLog) &&
        Objects.equals(this.nodeHasRecycleBin, auditNodeResponse.nodeHasRecycleBin) &&
        Objects.equals(this.nodeId, auditNodeResponse.nodeId) &&
        Objects.equals(this.nodeIsEncrypted, auditNodeResponse.nodeIsEncrypted) &&
        Objects.equals(this.nodeName, auditNodeResponse.nodeName) &&
        Objects.equals(this.nodeParentId, auditNodeResponse.nodeParentId) &&
        Objects.equals(this.nodeParentPath, auditNodeResponse.nodeParentPath) &&
        Objects.equals(this.nodeQuota, auditNodeResponse.nodeQuota) &&
        Objects.equals(this.nodeRecycleBinRetentionPeriod, auditNodeResponse.nodeRecycleBinRetentionPeriod) &&
        Objects.equals(this.nodeSize, auditNodeResponse.nodeSize) &&
        Objects.equals(this.nodeUpdatedAt, auditNodeResponse.nodeUpdatedAt) &&
        Objects.equals(this.nodeUpdatedBy, auditNodeResponse.nodeUpdatedBy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditUserPermissionList, nodeCntChildren, nodeCreatedAt, nodeCreatedBy, nodeHasActivitiesLog, nodeHasRecycleBin, nodeId, nodeIsEncrypted, nodeName, nodeParentId, nodeParentPath, nodeQuota, nodeRecycleBinRetentionPeriod, nodeSize, nodeUpdatedAt, nodeUpdatedBy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditNodeResponse {\n");
    sb.append("    auditUserPermissionList: ").append(toIndentedString(auditUserPermissionList)).append("\n");
    sb.append("    nodeCntChildren: ").append(toIndentedString(nodeCntChildren)).append("\n");
    sb.append("    nodeCreatedAt: ").append(toIndentedString(nodeCreatedAt)).append("\n");
    sb.append("    nodeCreatedBy: ").append(toIndentedString(nodeCreatedBy)).append("\n");
    sb.append("    nodeHasActivitiesLog: ").append(toIndentedString(nodeHasActivitiesLog)).append("\n");
    sb.append("    nodeHasRecycleBin: ").append(toIndentedString(nodeHasRecycleBin)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeIsEncrypted: ").append(toIndentedString(nodeIsEncrypted)).append("\n");
    sb.append("    nodeName: ").append(toIndentedString(nodeName)).append("\n");
    sb.append("    nodeParentId: ").append(toIndentedString(nodeParentId)).append("\n");
    sb.append("    nodeParentPath: ").append(toIndentedString(nodeParentPath)).append("\n");
    sb.append("    nodeQuota: ").append(toIndentedString(nodeQuota)).append("\n");
    sb.append("    nodeRecycleBinRetentionPeriod: ").append(toIndentedString(nodeRecycleBinRetentionPeriod)).append("\n");
    sb.append("    nodeSize: ").append(toIndentedString(nodeSize)).append("\n");
    sb.append("    nodeUpdatedAt: ").append(toIndentedString(nodeUpdatedAt)).append("\n");
    sb.append("    nodeUpdatedBy: ").append(toIndentedString(nodeUpdatedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditUserPermissionList");
    openapiFields.add("nodeCntChildren");
    openapiFields.add("nodeCreatedAt");
    openapiFields.add("nodeCreatedBy");
    openapiFields.add("nodeHasActivitiesLog");
    openapiFields.add("nodeHasRecycleBin");
    openapiFields.add("nodeId");
    openapiFields.add("nodeIsEncrypted");
    openapiFields.add("nodeName");
    openapiFields.add("nodeParentId");
    openapiFields.add("nodeParentPath");
    openapiFields.add("nodeQuota");
    openapiFields.add("nodeRecycleBinRetentionPeriod");
    openapiFields.add("nodeSize");
    openapiFields.add("nodeUpdatedAt");
    openapiFields.add("nodeUpdatedBy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auditUserPermissionList");
    openapiRequiredFields.add("nodeCntChildren");
    openapiRequiredFields.add("nodeId");
    openapiRequiredFields.add("nodeName");
    openapiRequiredFields.add("nodeParentPath");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditNodeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditNodeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditNodeResponse is not found in the empty JSON string", AuditNodeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditNodeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditNodeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AuditNodeResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("auditUserPermissionList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditUserPermissionList` to be an array in the JSON string but got `%s`", jsonObj.get("auditUserPermissionList").toString()));
      }

      JsonArray jsonArrayauditUserPermissionList = jsonObj.getAsJsonArray("auditUserPermissionList");
      // validate the required field `auditUserPermissionList` (array)
      for (int i = 0; i < jsonArrayauditUserPermissionList.size(); i++) {
        AuditUserPermission.validateJsonElement(jsonArrayauditUserPermissionList.get(i));
      };
      // validate the optional field `nodeCreatedBy`
      if (jsonObj.get("nodeCreatedBy") != null && !jsonObj.get("nodeCreatedBy").isJsonNull()) {
        UserInfo.validateJsonElement(jsonObj.get("nodeCreatedBy"));
      }
      if (!jsonObj.get("nodeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeName").toString()));
      }
      if (!jsonObj.get("nodeParentPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeParentPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeParentPath").toString()));
      }
      // validate the optional field `nodeUpdatedBy`
      if (jsonObj.get("nodeUpdatedBy") != null && !jsonObj.get("nodeUpdatedBy").isJsonNull()) {
        UserInfo.validateJsonElement(jsonObj.get("nodeUpdatedBy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditNodeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditNodeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditNodeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditNodeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditNodeResponse>() {
           @Override
           public void write(JsonWriter out, AuditNodeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditNodeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditNodeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditNodeResponse
   * @throws IOException if the JSON string is invalid with respect to AuditNodeResponse
   */
  public static AuditNodeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditNodeResponse.class);
  }

  /**
   * Convert an instance of AuditNodeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

