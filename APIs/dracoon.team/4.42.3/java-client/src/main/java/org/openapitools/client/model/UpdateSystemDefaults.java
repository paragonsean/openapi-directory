/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for updating system defaults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateSystemDefaults {
  public static final String SERIALIZED_NAME_DOWNLOAD_SHARE_DEFAULT_EXPIRATION_PERIOD = "downloadShareDefaultExpirationPeriod";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_SHARE_DEFAULT_EXPIRATION_PERIOD)
  private Integer downloadShareDefaultExpirationPeriod;

  public static final String SERIALIZED_NAME_FILE_DEFAULT_EXPIRATION_PERIOD = "fileDefaultExpirationPeriod";
  @SerializedName(SERIALIZED_NAME_FILE_DEFAULT_EXPIRATION_PERIOD)
  private Integer fileDefaultExpirationPeriod;

  public static final String SERIALIZED_NAME_LANGUAGE_DEFAULT = "languageDefault";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_DEFAULT)
  private String languageDefault;

  public static final String SERIALIZED_NAME_NONMEMBER_VIEWER_DEFAULT = "nonmemberViewerDefault";
  @SerializedName(SERIALIZED_NAME_NONMEMBER_VIEWER_DEFAULT)
  private Boolean nonmemberViewerDefault;

  public static final String SERIALIZED_NAME_UPLOAD_SHARE_DEFAULT_EXPIRATION_PERIOD = "uploadShareDefaultExpirationPeriod";
  @SerializedName(SERIALIZED_NAME_UPLOAD_SHARE_DEFAULT_EXPIRATION_PERIOD)
  private Integer uploadShareDefaultExpirationPeriod;

  public UpdateSystemDefaults() {
  }

  public UpdateSystemDefaults downloadShareDefaultExpirationPeriod(Integer downloadShareDefaultExpirationPeriod) {
    this.downloadShareDefaultExpirationPeriod = downloadShareDefaultExpirationPeriod;
    return this;
  }

  /**
   * Default expiration period for Download Shares in days.
   * @return downloadShareDefaultExpirationPeriod
   */
  @javax.annotation.Nullable
  public Integer getDownloadShareDefaultExpirationPeriod() {
    return downloadShareDefaultExpirationPeriod;
  }

  public void setDownloadShareDefaultExpirationPeriod(Integer downloadShareDefaultExpirationPeriod) {
    this.downloadShareDefaultExpirationPeriod = downloadShareDefaultExpirationPeriod;
  }


  public UpdateSystemDefaults fileDefaultExpirationPeriod(Integer fileDefaultExpirationPeriod) {
    this.fileDefaultExpirationPeriod = fileDefaultExpirationPeriod;
    return this;
  }

  /**
   * Default expiration period for all uploaded files in days.
   * @return fileDefaultExpirationPeriod
   */
  @javax.annotation.Nullable
  public Integer getFileDefaultExpirationPeriod() {
    return fileDefaultExpirationPeriod;
  }

  public void setFileDefaultExpirationPeriod(Integer fileDefaultExpirationPeriod) {
    this.fileDefaultExpirationPeriod = fileDefaultExpirationPeriod;
  }


  public UpdateSystemDefaults languageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
    return this;
  }

  /**
   * Define which language should be default.
   * @return languageDefault
   */
  @javax.annotation.Nullable
  public String getLanguageDefault() {
    return languageDefault;
  }

  public void setLanguageDefault(String languageDefault) {
    this.languageDefault = languageDefault;
  }


  public UpdateSystemDefaults nonmemberViewerDefault(Boolean nonmemberViewerDefault) {
    this.nonmemberViewerDefault = nonmemberViewerDefault;
    return this;
  }

  /**
   * &amp;#128640; Since v4.12.0  Defines if new users get the role Non Member Viewer by default
   * @return nonmemberViewerDefault
   */
  @javax.annotation.Nullable
  public Boolean getNonmemberViewerDefault() {
    return nonmemberViewerDefault;
  }

  public void setNonmemberViewerDefault(Boolean nonmemberViewerDefault) {
    this.nonmemberViewerDefault = nonmemberViewerDefault;
  }


  public UpdateSystemDefaults uploadShareDefaultExpirationPeriod(Integer uploadShareDefaultExpirationPeriod) {
    this.uploadShareDefaultExpirationPeriod = uploadShareDefaultExpirationPeriod;
    return this;
  }

  /**
   * Default expiration period for Upload Shares in days.
   * @return uploadShareDefaultExpirationPeriod
   */
  @javax.annotation.Nullable
  public Integer getUploadShareDefaultExpirationPeriod() {
    return uploadShareDefaultExpirationPeriod;
  }

  public void setUploadShareDefaultExpirationPeriod(Integer uploadShareDefaultExpirationPeriod) {
    this.uploadShareDefaultExpirationPeriod = uploadShareDefaultExpirationPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateSystemDefaults updateSystemDefaults = (UpdateSystemDefaults) o;
    return Objects.equals(this.downloadShareDefaultExpirationPeriod, updateSystemDefaults.downloadShareDefaultExpirationPeriod) &&
        Objects.equals(this.fileDefaultExpirationPeriod, updateSystemDefaults.fileDefaultExpirationPeriod) &&
        Objects.equals(this.languageDefault, updateSystemDefaults.languageDefault) &&
        Objects.equals(this.nonmemberViewerDefault, updateSystemDefaults.nonmemberViewerDefault) &&
        Objects.equals(this.uploadShareDefaultExpirationPeriod, updateSystemDefaults.uploadShareDefaultExpirationPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadShareDefaultExpirationPeriod, fileDefaultExpirationPeriod, languageDefault, nonmemberViewerDefault, uploadShareDefaultExpirationPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateSystemDefaults {\n");
    sb.append("    downloadShareDefaultExpirationPeriod: ").append(toIndentedString(downloadShareDefaultExpirationPeriod)).append("\n");
    sb.append("    fileDefaultExpirationPeriod: ").append(toIndentedString(fileDefaultExpirationPeriod)).append("\n");
    sb.append("    languageDefault: ").append(toIndentedString(languageDefault)).append("\n");
    sb.append("    nonmemberViewerDefault: ").append(toIndentedString(nonmemberViewerDefault)).append("\n");
    sb.append("    uploadShareDefaultExpirationPeriod: ").append(toIndentedString(uploadShareDefaultExpirationPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadShareDefaultExpirationPeriod");
    openapiFields.add("fileDefaultExpirationPeriod");
    openapiFields.add("languageDefault");
    openapiFields.add("nonmemberViewerDefault");
    openapiFields.add("uploadShareDefaultExpirationPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateSystemDefaults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateSystemDefaults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateSystemDefaults is not found in the empty JSON string", UpdateSystemDefaults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateSystemDefaults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateSystemDefaults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("languageDefault") != null && !jsonObj.get("languageDefault").isJsonNull()) && !jsonObj.get("languageDefault").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageDefault` to be a primitive type in the JSON string but got `%s`", jsonObj.get("languageDefault").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateSystemDefaults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateSystemDefaults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateSystemDefaults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateSystemDefaults.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateSystemDefaults>() {
           @Override
           public void write(JsonWriter out, UpdateSystemDefaults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateSystemDefaults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateSystemDefaults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateSystemDefaults
   * @throws IOException if the JSON string is invalid with respect to UpdateSystemDefaults
   */
  public static UpdateSystemDefaults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateSystemDefaults.class);
  }

  /**
   * Convert an instance of UpdateSystemDefaults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

