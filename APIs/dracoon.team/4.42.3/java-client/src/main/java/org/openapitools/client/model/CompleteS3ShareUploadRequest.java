/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.S3FileUploadPart;
import org.openapitools.client.model.UserFileKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request model for completing a S3 file upload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CompleteS3ShareUploadRequest {
  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private List<S3FileUploadPart> parts = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_FILE_KEY_LIST = "userFileKeyList";
  @SerializedName(SERIALIZED_NAME_USER_FILE_KEY_LIST)
  private List<UserFileKey> userFileKeyList = new ArrayList<>();

  public CompleteS3ShareUploadRequest() {
  }

  public CompleteS3ShareUploadRequest parts(List<S3FileUploadPart> parts) {
    this.parts = parts;
    return this;
  }

  public CompleteS3ShareUploadRequest addPartsItem(S3FileUploadPart partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

  /**
   * List of S3 file upload parts
   * @return parts
   */
  @javax.annotation.Nonnull
  public List<S3FileUploadPart> getParts() {
    return parts;
  }

  public void setParts(List<S3FileUploadPart> parts) {
    this.parts = parts;
  }


  public CompleteS3ShareUploadRequest userFileKeyList(List<UserFileKey> userFileKeyList) {
    this.userFileKeyList = userFileKeyList;
    return this;
  }

  public CompleteS3ShareUploadRequest addUserFileKeyListItem(UserFileKey userFileKeyListItem) {
    if (this.userFileKeyList == null) {
      this.userFileKeyList = new ArrayList<>();
    }
    this.userFileKeyList.add(userFileKeyListItem);
    return this;
  }

  /**
   * List of user file keys
   * @return userFileKeyList
   */
  @javax.annotation.Nullable
  public List<UserFileKey> getUserFileKeyList() {
    return userFileKeyList;
  }

  public void setUserFileKeyList(List<UserFileKey> userFileKeyList) {
    this.userFileKeyList = userFileKeyList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompleteS3ShareUploadRequest completeS3ShareUploadRequest = (CompleteS3ShareUploadRequest) o;
    return Objects.equals(this.parts, completeS3ShareUploadRequest.parts) &&
        Objects.equals(this.userFileKeyList, completeS3ShareUploadRequest.userFileKeyList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parts, userFileKeyList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompleteS3ShareUploadRequest {\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    userFileKeyList: ").append(toIndentedString(userFileKeyList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parts");
    openapiFields.add("userFileKeyList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("parts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CompleteS3ShareUploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CompleteS3ShareUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompleteS3ShareUploadRequest is not found in the empty JSON string", CompleteS3ShareUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CompleteS3ShareUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CompleteS3ShareUploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CompleteS3ShareUploadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("parts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parts` to be an array in the JSON string but got `%s`", jsonObj.get("parts").toString()));
      }

      JsonArray jsonArrayparts = jsonObj.getAsJsonArray("parts");
      // validate the required field `parts` (array)
      for (int i = 0; i < jsonArrayparts.size(); i++) {
        S3FileUploadPart.validateJsonElement(jsonArrayparts.get(i));
      };
      if (jsonObj.get("userFileKeyList") != null && !jsonObj.get("userFileKeyList").isJsonNull()) {
        JsonArray jsonArrayuserFileKeyList = jsonObj.getAsJsonArray("userFileKeyList");
        if (jsonArrayuserFileKeyList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userFileKeyList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userFileKeyList` to be an array in the JSON string but got `%s`", jsonObj.get("userFileKeyList").toString()));
          }

          // validate the optional field `userFileKeyList` (array)
          for (int i = 0; i < jsonArrayuserFileKeyList.size(); i++) {
            UserFileKey.validateJsonElement(jsonArrayuserFileKeyList.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompleteS3ShareUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompleteS3ShareUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompleteS3ShareUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompleteS3ShareUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CompleteS3ShareUploadRequest>() {
           @Override
           public void write(JsonWriter out, CompleteS3ShareUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CompleteS3ShareUploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CompleteS3ShareUploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CompleteS3ShareUploadRequest
   * @throws IOException if the JSON string is invalid with respect to CompleteS3ShareUploadRequest
   */
  public static CompleteS3ShareUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompleteS3ShareUploadRequest.class);
  }

  /**
   * Convert an instance of CompleteS3ShareUploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

