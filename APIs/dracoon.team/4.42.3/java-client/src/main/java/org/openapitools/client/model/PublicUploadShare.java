/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublicUploadedFileData;
import org.openapitools.client.model.UserUserPublicKeyList;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Upload Share information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublicUploadShare {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATOR_NAME = "creatorName";
  @SerializedName(SERIALIZED_NAME_CREATOR_NAME)
  private String creatorName;

  public static final String SERIALIZED_NAME_CREATOR_USERNAME = "creatorUsername";
  @SerializedName(SERIALIZED_NAME_CREATOR_USERNAME)
  private String creatorUsername;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private OffsetDateTime expireAt;

  public static final String SERIALIZED_NAME_IS_ENCRYPTED = "isEncrypted";
  @SerializedName(SERIALIZED_NAME_IS_ENCRYPTED)
  private Boolean isEncrypted;

  public static final String SERIALIZED_NAME_IS_PROTECTED = "isProtected";
  @SerializedName(SERIALIZED_NAME_IS_PROTECTED)
  private Boolean isProtected;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_REMAINING_SIZE = "remainingSize";
  @SerializedName(SERIALIZED_NAME_REMAINING_SIZE)
  private Long remainingSize;

  public static final String SERIALIZED_NAME_REMAINING_SLOTS = "remainingSlots";
  @SerializedName(SERIALIZED_NAME_REMAINING_SLOTS)
  private Integer remainingSlots;

  public static final String SERIALIZED_NAME_SHOW_UPLOADED_FILES = "showUploadedFiles";
  @SerializedName(SERIALIZED_NAME_SHOW_UPLOADED_FILES)
  private Boolean showUploadedFiles;

  public static final String SERIALIZED_NAME_UPLOADED_FILES = "uploadedFiles";
  @SerializedName(SERIALIZED_NAME_UPLOADED_FILES)
  private List<PublicUploadedFileData> uploadedFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_USER_PUBLIC_KEY_LIST = "userUserPublicKeyList";
  @SerializedName(SERIALIZED_NAME_USER_USER_PUBLIC_KEY_LIST)
  private UserUserPublicKeyList userUserPublicKeyList;

  public PublicUploadShare() {
  }

  public PublicUploadShare createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Creation date
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PublicUploadShare creatorName(String creatorName) {
    this.creatorName = creatorName;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Creator name
   * @return creatorName
   */
  @javax.annotation.Nonnull
  public String getCreatorName() {
    return creatorName;
  }

  public void setCreatorName(String creatorName) {
    this.creatorName = creatorName;
  }


  public PublicUploadShare creatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
    return this;
  }

  /**
   * &amp;#128640; Since v4.11.0  Creator username
   * @return creatorUsername
   */
  @javax.annotation.Nullable
  public String getCreatorUsername() {
    return creatorUsername;
  }

  public void setCreatorUsername(String creatorUsername) {
    this.creatorUsername = creatorUsername;
  }


  public PublicUploadShare expireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
    return this;
  }

  /**
   * Expiration date
   * @return expireAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpireAt() {
    return expireAt;
  }

  public void setExpireAt(OffsetDateTime expireAt) {
    this.expireAt = expireAt;
  }


  public PublicUploadShare isEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
    return this;
  }

  /**
   * Encryption state
   * @return isEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getIsEncrypted() {
    return isEncrypted;
  }

  public void setIsEncrypted(Boolean isEncrypted) {
    this.isEncrypted = isEncrypted;
  }


  public PublicUploadShare isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

  /**
   * Is share protected by password
   * @return isProtected
   */
  @javax.annotation.Nonnull
  public Boolean getIsProtected() {
    return isProtected;
  }

  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }


  public PublicUploadShare name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Share display name (alias name)
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PublicUploadShare notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * User notes
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public PublicUploadShare remainingSize(Long remainingSize) {
    this.remainingSize = remainingSize;
    return this;
  }

  /**
   * Remaining size
   * @return remainingSize
   */
  @javax.annotation.Nullable
  public Long getRemainingSize() {
    return remainingSize;
  }

  public void setRemainingSize(Long remainingSize) {
    this.remainingSize = remainingSize;
  }


  public PublicUploadShare remainingSlots(Integer remainingSlots) {
    this.remainingSlots = remainingSlots;
    return this;
  }

  /**
   * Remaining slots
   * @return remainingSlots
   */
  @javax.annotation.Nullable
  public Integer getRemainingSlots() {
    return remainingSlots;
  }

  public void setRemainingSlots(Integer remainingSlots) {
    this.remainingSlots = remainingSlots;
  }


  public PublicUploadShare showUploadedFiles(Boolean showUploadedFiles) {
    this.showUploadedFiles = showUploadedFiles;
    return this;
  }

  /**
   * Allow display of already uploaded files
   * @return showUploadedFiles
   */
  @javax.annotation.Nullable
  public Boolean getShowUploadedFiles() {
    return showUploadedFiles;
  }

  public void setShowUploadedFiles(Boolean showUploadedFiles) {
    this.showUploadedFiles = showUploadedFiles;
  }


  public PublicUploadShare uploadedFiles(List<PublicUploadedFileData> uploadedFiles) {
    this.uploadedFiles = uploadedFiles;
    return this;
  }

  public PublicUploadShare addUploadedFilesItem(PublicUploadedFileData uploadedFilesItem) {
    if (this.uploadedFiles == null) {
      this.uploadedFiles = new ArrayList<>();
    }
    this.uploadedFiles.add(uploadedFilesItem);
    return this;
  }

  /**
   * List of (public) uploaded files
   * @return uploadedFiles
   */
  @javax.annotation.Nullable
  public List<PublicUploadedFileData> getUploadedFiles() {
    return uploadedFiles;
  }

  public void setUploadedFiles(List<PublicUploadedFileData> uploadedFiles) {
    this.uploadedFiles = uploadedFiles;
  }


  public PublicUploadShare userUserPublicKeyList(UserUserPublicKeyList userUserPublicKeyList) {
    this.userUserPublicKeyList = userUserPublicKeyList;
    return this;
  }

  /**
   * Get userUserPublicKeyList
   * @return userUserPublicKeyList
   */
  @javax.annotation.Nullable
  public UserUserPublicKeyList getUserUserPublicKeyList() {
    return userUserPublicKeyList;
  }

  public void setUserUserPublicKeyList(UserUserPublicKeyList userUserPublicKeyList) {
    this.userUserPublicKeyList = userUserPublicKeyList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublicUploadShare publicUploadShare = (PublicUploadShare) o;
    return Objects.equals(this.createdAt, publicUploadShare.createdAt) &&
        Objects.equals(this.creatorName, publicUploadShare.creatorName) &&
        Objects.equals(this.creatorUsername, publicUploadShare.creatorUsername) &&
        Objects.equals(this.expireAt, publicUploadShare.expireAt) &&
        Objects.equals(this.isEncrypted, publicUploadShare.isEncrypted) &&
        Objects.equals(this.isProtected, publicUploadShare.isProtected) &&
        Objects.equals(this.name, publicUploadShare.name) &&
        Objects.equals(this.notes, publicUploadShare.notes) &&
        Objects.equals(this.remainingSize, publicUploadShare.remainingSize) &&
        Objects.equals(this.remainingSlots, publicUploadShare.remainingSlots) &&
        Objects.equals(this.showUploadedFiles, publicUploadShare.showUploadedFiles) &&
        Objects.equals(this.uploadedFiles, publicUploadShare.uploadedFiles) &&
        Objects.equals(this.userUserPublicKeyList, publicUploadShare.userUserPublicKeyList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, creatorName, creatorUsername, expireAt, isEncrypted, isProtected, name, notes, remainingSize, remainingSlots, showUploadedFiles, uploadedFiles, userUserPublicKeyList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublicUploadShare {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorName: ").append(toIndentedString(creatorName)).append("\n");
    sb.append("    creatorUsername: ").append(toIndentedString(creatorUsername)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    isEncrypted: ").append(toIndentedString(isEncrypted)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    remainingSize: ").append(toIndentedString(remainingSize)).append("\n");
    sb.append("    remainingSlots: ").append(toIndentedString(remainingSlots)).append("\n");
    sb.append("    showUploadedFiles: ").append(toIndentedString(showUploadedFiles)).append("\n");
    sb.append("    uploadedFiles: ").append(toIndentedString(uploadedFiles)).append("\n");
    sb.append("    userUserPublicKeyList: ").append(toIndentedString(userUserPublicKeyList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("creatorName");
    openapiFields.add("creatorUsername");
    openapiFields.add("expireAt");
    openapiFields.add("isEncrypted");
    openapiFields.add("isProtected");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("remainingSize");
    openapiFields.add("remainingSlots");
    openapiFields.add("showUploadedFiles");
    openapiFields.add("uploadedFiles");
    openapiFields.add("userUserPublicKeyList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("creatorName");
    openapiRequiredFields.add("isProtected");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublicUploadShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublicUploadShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublicUploadShare is not found in the empty JSON string", PublicUploadShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublicUploadShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublicUploadShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PublicUploadShare.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("creatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorName").toString()));
      }
      if ((jsonObj.get("creatorUsername") != null && !jsonObj.get("creatorUsername").isJsonNull()) && !jsonObj.get("creatorUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUsername").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if (jsonObj.get("uploadedFiles") != null && !jsonObj.get("uploadedFiles").isJsonNull()) {
        JsonArray jsonArrayuploadedFiles = jsonObj.getAsJsonArray("uploadedFiles");
        if (jsonArrayuploadedFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uploadedFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uploadedFiles` to be an array in the JSON string but got `%s`", jsonObj.get("uploadedFiles").toString()));
          }

          // validate the optional field `uploadedFiles` (array)
          for (int i = 0; i < jsonArrayuploadedFiles.size(); i++) {
            PublicUploadedFileData.validateJsonElement(jsonArrayuploadedFiles.get(i));
          };
        }
      }
      // validate the optional field `userUserPublicKeyList`
      if (jsonObj.get("userUserPublicKeyList") != null && !jsonObj.get("userUserPublicKeyList").isJsonNull()) {
        UserUserPublicKeyList.validateJsonElement(jsonObj.get("userUserPublicKeyList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublicUploadShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublicUploadShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublicUploadShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublicUploadShare.class));

       return (TypeAdapter<T>) new TypeAdapter<PublicUploadShare>() {
           @Override
           public void write(JsonWriter out, PublicUploadShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublicUploadShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublicUploadShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublicUploadShare
   * @throws IOException if the JSON string is invalid with respect to PublicUploadShare
   */
  public static PublicUploadShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublicUploadShare.class);
  }

  /**
   * Convert an instance of PublicUploadShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

