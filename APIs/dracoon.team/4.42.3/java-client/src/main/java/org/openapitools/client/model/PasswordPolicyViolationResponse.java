/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ViolatedPasswordPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * List of violated password policies
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:27.439567-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PasswordPolicyViolationResponse {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private Integer code;

  public static final String SERIALIZED_NAME_DEBUG_INFO = "debugInfo";
  @SerializedName(SERIALIZED_NAME_DEBUG_INFO)
  private String debugInfo;

  public static final String SERIALIZED_NAME_ERROR_CODE = "errorCode";
  @SerializedName(SERIALIZED_NAME_ERROR_CODE)
  private Integer errorCode;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_VIOLATED_PASSWORD_POLICIES = "violatedPasswordPolicies";
  @SerializedName(SERIALIZED_NAME_VIOLATED_PASSWORD_POLICIES)
  private List<ViolatedPasswordPolicy> violatedPasswordPolicies = new ArrayList<>();

  public PasswordPolicyViolationResponse() {
  }

  public PasswordPolicyViolationResponse code(Integer code) {
    this.code = code;
    return this;
  }

  /**
   * HTTP status code
   * @return code
   */
  @javax.annotation.Nonnull
  public Integer getCode() {
    return code;
  }

  public void setCode(Integer code) {
    this.code = code;
  }


  public PasswordPolicyViolationResponse debugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
    return this;
  }

  /**
   * Debug information
   * @return debugInfo
   */
  @javax.annotation.Nullable
  public String getDebugInfo() {
    return debugInfo;
  }

  public void setDebugInfo(String debugInfo) {
    this.debugInfo = debugInfo;
  }


  public PasswordPolicyViolationResponse errorCode(Integer errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  /**
   * Internal error code
   * @return errorCode
   */
  @javax.annotation.Nullable
  public Integer getErrorCode() {
    return errorCode;
  }

  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public PasswordPolicyViolationResponse message(String message) {
    this.message = message;
    return this;
  }

  /**
   * HTTP status code description
   * @return message
   */
  @javax.annotation.Nonnull
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public PasswordPolicyViolationResponse violatedPasswordPolicies(List<ViolatedPasswordPolicy> violatedPasswordPolicies) {
    this.violatedPasswordPolicies = violatedPasswordPolicies;
    return this;
  }

  public PasswordPolicyViolationResponse addViolatedPasswordPoliciesItem(ViolatedPasswordPolicy violatedPasswordPoliciesItem) {
    if (this.violatedPasswordPolicies == null) {
      this.violatedPasswordPolicies = new ArrayList<>();
    }
    this.violatedPasswordPolicies.add(violatedPasswordPoliciesItem);
    return this;
  }

  /**
   * List of violated password policies
   * @return violatedPasswordPolicies
   */
  @javax.annotation.Nullable
  public List<ViolatedPasswordPolicy> getViolatedPasswordPolicies() {
    return violatedPasswordPolicies;
  }

  public void setViolatedPasswordPolicies(List<ViolatedPasswordPolicy> violatedPasswordPolicies) {
    this.violatedPasswordPolicies = violatedPasswordPolicies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordPolicyViolationResponse passwordPolicyViolationResponse = (PasswordPolicyViolationResponse) o;
    return Objects.equals(this.code, passwordPolicyViolationResponse.code) &&
        Objects.equals(this.debugInfo, passwordPolicyViolationResponse.debugInfo) &&
        Objects.equals(this.errorCode, passwordPolicyViolationResponse.errorCode) &&
        Objects.equals(this.message, passwordPolicyViolationResponse.message) &&
        Objects.equals(this.violatedPasswordPolicies, passwordPolicyViolationResponse.violatedPasswordPolicies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, debugInfo, errorCode, message, violatedPasswordPolicies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordPolicyViolationResponse {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    debugInfo: ").append(toIndentedString(debugInfo)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    violatedPasswordPolicies: ").append(toIndentedString(violatedPasswordPolicies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("debugInfo");
    openapiFields.add("errorCode");
    openapiFields.add("message");
    openapiFields.add("violatedPasswordPolicies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordPolicyViolationResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordPolicyViolationResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordPolicyViolationResponse is not found in the empty JSON string", PasswordPolicyViolationResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordPolicyViolationResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordPolicyViolationResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PasswordPolicyViolationResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("debugInfo") != null && !jsonObj.get("debugInfo").isJsonNull()) && !jsonObj.get("debugInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `debugInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("debugInfo").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("violatedPasswordPolicies") != null && !jsonObj.get("violatedPasswordPolicies").isJsonNull()) {
        JsonArray jsonArrayviolatedPasswordPolicies = jsonObj.getAsJsonArray("violatedPasswordPolicies");
        if (jsonArrayviolatedPasswordPolicies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("violatedPasswordPolicies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `violatedPasswordPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("violatedPasswordPolicies").toString()));
          }

          // validate the optional field `violatedPasswordPolicies` (array)
          for (int i = 0; i < jsonArrayviolatedPasswordPolicies.size(); i++) {
            ViolatedPasswordPolicy.validateJsonElement(jsonArrayviolatedPasswordPolicies.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordPolicyViolationResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordPolicyViolationResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordPolicyViolationResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordPolicyViolationResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordPolicyViolationResponse>() {
           @Override
           public void write(JsonWriter out, PasswordPolicyViolationResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordPolicyViolationResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordPolicyViolationResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordPolicyViolationResponse
   * @throws IOException if the JSON string is invalid with respect to PasswordPolicyViolationResponse
   */
  public static PasswordPolicyViolationResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordPolicyViolationResponse.class);
  }

  /**
   * Convert an instance of PasswordPolicyViolationResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

