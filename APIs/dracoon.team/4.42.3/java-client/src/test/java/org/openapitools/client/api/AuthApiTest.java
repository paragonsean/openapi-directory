/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.RadiusChallengeResponse;
import org.openapitools.client.model.RecoverUserNameRequest;
import org.openapitools.client.model.ResetPassword400Response;
import org.openapitools.client.model.ResetPasswordRequest;
import org.openapitools.client.model.ResetPasswordTokenValidateResponse;
import org.openapitools.client.model.ResetPasswordWithTokenRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Disabled
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    /**
     * Complete OpenID Connect authentication
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.14.0&lt;/h3&gt;  ### Description:   This is the second step of the OpenID Connect authentication.   The user hands over the authorization code and is logged in.  ### Precondition: Existing user with activated OpenID Connect authentication that is **NOT** locked.  ### Postcondition: User is logged in.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeOpenIdLoginTest() throws ApiException {
        String code = null;
        String state = null;
        String idToken = null;
        LoginResponse response = api.completeOpenIdLogin(code, state, idToken);
        // TODO: test validations
    }

    /**
     * Initiate OpenID Connect authentication
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.14.0&lt;/h3&gt;  ### Description: This is the first step of the OpenID Connect authentication.   The user is send to the OpenID Connect identity provider to authenticate himself and retrieve an authorization code.  ### Precondition: None.  ### Postcondition: User is redirected to OpenID Connect identity provider to authenticate himself.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initiateOpenIdLoginTest() throws ApiException {
        String issuer = null;
        String redirectUri = null;
        String language = null;
        Boolean test = null;
        api.initiateOpenIdLogin(issuer, redirectUri, language, test);
        // TODO: test validations
    }

    /**
     * Authenticate user (Login)
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.13.0&lt;/h3&gt;  ### Description: Authenticates user and provides an authentication token (&#x60;X-Sds-Auth-Token&#x60;) that is required for the most operations.  ### Precondition: Existing user that is **NOT** locked.  ### Postcondition: User is logged in.  ### Further Information: The provided token is valid for **two hours**, every usage resets this period to two full hours again.   Logging off invalidates the token.    ### Available authentication methods: &lt;details open style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Authentication Method (&#x60;authType&#x60;) | Description | | :--- | :--- | | &#x60;basic&#x60; | Log in with credentials stored in the database &lt;br&gt;Formerly known as &#x60;sql&#x60;.| | &#x60;active_directory&#x60; | Log in with Active Directory credentials | | &#x60;radius&#x60; | Log in with RADIUS username, PIN and token password.&lt;br&gt;Token (request parameter) may be set, otherwise this parameter is ignored. If token is set, password is optional. | | &#x60;openid&#x60; | Please use &#x60;POST /auth/openid/login&#x60; API to login with OpenID Connect identity |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        LoginRequest loginRequest = null;
        LoginResponse response = api.login(loginRequest);
        // TODO: test validations
    }

    /**
     * Ping
     *
     * ### Description: Test connection to DRACOON Core Service.  ### Precondition: None.  ### Postcondition: &#x60;200 OK&#x60; with current date string is returned if successful.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingTest() throws ApiException {
        String response = api.ping();
        // TODO: test validations
    }

    /**
     * Recover username
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.13.0&lt;/h3&gt;  ### Description:   Request an email with the user names of all accounts connected to the email.  ### Precondition: Valid email address.  ### Postcondition: An email is sent to the provided address, with a list of account user names connected to it.  ### Further Information: None. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recoverUserNameTest() throws ApiException {
        RecoverUserNameRequest recoverUserNameRequest = null;
        api.recoverUserName(recoverUserNameRequest);
        // TODO: test validations
    }

    /**
     * Request password reset
     *
     * ### Description:   Request an email with a password reset token for a certain user to reset password.  ### Precondition: Registered user account.  ### Postcondition: Provided user receives email with password reset token.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPasswordResetTest() throws ApiException {
        ResetPasswordRequest resetPasswordRequest = null;
        api.requestPasswordReset(resetPasswordRequest);
        // TODO: test validations
    }

    /**
     * Reset password
     *
     * ### Description:   Resets user&#39;s password.  ### Precondition: User received a password reset token.  ### Postcondition: User&#39;s password is reset to the provided password.  ### Further Information: Forbidden characters in passwords: [&#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;&lt;&#x60;, &#x60;&gt;&#x60;]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetPasswordTest() throws ApiException {
        String token = null;
        ResetPasswordWithTokenRequest resetPasswordWithTokenRequest = null;
        api.resetPassword(token, resetPasswordWithTokenRequest);
        // TODO: test validations
    }

    /**
     * Validate information for password reset
     *
     * ### Description:   Request all information for a password change dialogue e.g. real name of user.  ### Precondition: User received a password reset token.  ### Postcondition: Context information is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateResetPasswordTokenTest() throws ApiException {
        String token = null;
        ResetPasswordTokenValidateResponse response = api.validateResetPasswordToken(token);
        // TODO: test validations
    }

}
