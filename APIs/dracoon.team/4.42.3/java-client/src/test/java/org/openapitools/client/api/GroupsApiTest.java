/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ChangeGroupMembersRequest;
import org.openapitools.client.model.CreateGroupRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupList;
import org.openapitools.client.model.GroupUserList;
import org.openapitools.client.model.LastAdminGroupRoomList;
import org.openapitools.client.model.RoleList;
import org.openapitools.client.model.RoomTreeDataList;
import org.openapitools.client.model.UpdateGroupRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupsApi
 */
@Disabled
public class GroupsApiTest {

    private final GroupsApi api = new GroupsApi();

    /**
     * Add group members
     *
     * ### Description: Add members to a group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change groups&lt;/span&gt; required.  ### Postcondition:  New members are added to the group.  ### Further Information: Batch function.   The newly provided members will be added to the existing ones.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupMembersTest() throws ApiException {
        Long groupId = null;
        ChangeGroupMembersRequest changeGroupMembersRequest = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        Group response = api.addGroupMembers(groupId, changeGroupMembersRequest, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Create new user group
     *
     * ### Description: Create a new user group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change groups&lt;/span&gt; required.  ### Postcondition:  A new user group is created.  ### Further Information: * If a group should **NOT** expire, leave &#x60;expireAt&#x60; empty. * Group names are limited to **150** characters * Forbidden characters in group name: [&#x60;&lt;&#x60;, &#x60;&gt;&#x60;] 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        CreateGroupRequest createGroupRequest = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        Group response = api.createGroup(createGroupRequest, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove user group
     *
     * ### Description: Delete a user group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; delete groups&lt;/span&gt; required.  ### Postcondition:  User group is deleted.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupTest() throws ApiException {
        Long groupId = null;
        String xSdsAuthToken = null;
        api.removeGroup(groupId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove group members
     *
     * ### Description:   Remove group members.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change groups&lt;/span&gt; required.  ### Postcondition:  Provided users are removed from the user group.  ### Further Information: Batch function.   The provided users are removed from the user group. Maximum number of users to remove in one request is 200.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupMembersTest() throws ApiException {
        Long groupId = null;
        ChangeGroupMembersRequest changeGroupMembersRequest = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        Group response = api.removeGroupMembers(groupId, changeGroupMembersRequest, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request user group
     *
     * ### Description:   Retrieve detailed information about a user group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read groups&lt;/span&gt; required.  ### Postcondition:  User group is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestGroupTest() throws ApiException {
        Long groupId = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        Group response = api.requestGroup(groupId, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request group member users or / and users who can become a member
     *
     * ### Description:   Retrieve a list of group member users or / and users who can become a member.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read groups&lt;/span&gt; required.  ### Postcondition:  List of users is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;isMember:eq:false|user:cn:searchString&#x60;   Get all users that are **NOT** in this group **AND** whose (&#x60;firstName&#x60; **OR** &#x60;lastName&#x60; **OR** &#x60;email&#x60; **OR** &#x60;username&#x60;) is like &#x60;searchString&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;user&#x60; | User filter | &#x60;cn&#x60; | User contains value (&#x60;firstName&#x60; **OR** &#x60;lastName&#x60; **OR** &#x60;email&#x60; **OR** &#x60;username&#x60;). | &#x60;search String&#x60; | | &#x60;isMember&#x60; | Filter group members | &#x60;eq&#x60; |  | &lt;ul&gt;&lt;li&gt;&#x60;true&#x60;&lt;/li&gt;&lt;li&gt;&#x60;false&#x60;&lt;/li&gt;&lt;li&gt;&#x60;any&#x60;&lt;/li&gt;&lt;/ul&gt;default: &#x60;true&#x60; |  &lt;/details&gt;  ### Deprecated filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &lt;del&gt;&#x60;displayName&#x60;&lt;/del&gt; | User display name filter (use &#x60;user&#x60; filter) | &#x60;cn&#x60; | User display name contains value (&#x60;firstName&#x60; **OR** &#x60;lastName&#x60; **OR** &#x60;email&#x60;). | &#x60;search String&#x60; |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestGroupMembersTest() throws ApiException {
        Long groupId = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String xSdsAuthToken = null;
        GroupUserList response = api.requestGroupMembers(groupId, offset, limit, filter, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of roles assigned to the group
     *
     * ### Description:   Retrieve a list of all roles granted to a group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read groups&lt;/span&gt; required.  ### Postcondition:  List of granted roles is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestGroupRolesTest() throws ApiException {
        Long groupId = null;
        String xSdsAuthToken = null;
        RoleList response = api.requestGroupRoles(groupId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request rooms granted to the group or / and rooms that can be granted
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.10.0&lt;/h3&gt;  ### Description:   Retrieves a list of rooms granted to the group and / or that can be granted.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read groups&lt;/span&gt; required.  ### Postcondition:  List of rooms is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;isGranted:eq:false|name:cn:searchString&#x60;   Get all rooms where the group is **NOT** granted **AND** whose name is like &#x60;searchString&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;name&#x60; | Room name filter | &#x60;cn&#x60; | Room name contains value. | &#x60;search String&#x60; | | &#x60;isGranted&#x60; | Filter rooms which the group is (not) granted | &#x60;eq&#x60; |  | &lt;ul&gt;&lt;li&gt;&#x60;true&#x60;&lt;/li&gt;&lt;li&gt;&#x60;false&#x60;&lt;/li&gt;&lt;li&gt;&#x60;any&#x60;&lt;/li&gt;&lt;/ul&gt;default: &#x60;true&#x60; | | &#x60;effectivePerm&#x60; | Filter rooms with DIRECT or DIRECT **AND** EFFECTIVE permissions&lt;ul&gt;&lt;li&gt;&#x60;false&#x60;: DIRECT permissions&lt;/li&gt;&lt;li&gt;&#x60;true&#x60;:  DIRECT **AND** EFFECTIVE permissions&lt;/li&gt;&lt;/ul&gt;DIRECT means: e.g. room administrator grants &#x60;read&#x60; permissions to group of users **directly** on desired room.&lt;br&gt;EFFECTIVE means: e.g. group of users gets &#x60;read&#x60; permissions on desired room through **inheritance**. | &#x60;eq&#x60; |  | &#x60;true or false&#x60;&lt;br&gt;default: &#x60;true&#x60; |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestGroupRoomsTest() throws ApiException {
        Long groupId = null;
        String xSdsDateFormat = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String xSdsAuthToken = null;
        RoomTreeDataList response = api.requestGroupRooms(groupId, xSdsDateFormat, offset, limit, filter, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of user groups
     *
     * ### Description:   Returns a list of user groups.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read groups&lt;/span&gt; required.  ### Postcondition:  List of user groups is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;name:cn:searchString&#x60;   Filter by group name containing &#x60;searchString&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;name&#x60; | Group name filter | &#x60;cn&#x60; | Group name contains value. | &#x60;search String&#x60; | | &#x60;hasRole&#x60; | (**&#x60;NEW&#x60;**) Group role filter&lt;br&gt;For more information about roles check **&#x60;GET /roles&#x60;** API | &#x60;eq&#x60; | Group role equals value. | &lt;ul&gt;&lt;li&gt;&#x60;CONFIG_MANAGER&#x60; - Manages global configuration&lt;/li&gt;&lt;li&gt;&#x60;USER_MANAGER&#x60; - Manages users&lt;/li&gt;&lt;li&gt;&#x60;GROUP_MANAGER&#x60; - Manages user groups&lt;/li&gt;&lt;li&gt;&#x60;ROOM_MANAGER&#x60; - Manages top level rooms&lt;/li&gt;&lt;li&gt;&#x60;LOG_AUDITOR&#x60; - Reads audit logs&lt;/li&gt;&lt;li&gt;&#x60;NONMEMBER_VIEWER&#x60; - Views users and groups when having room _\&quot;manage\&quot;_ permission&lt;/li&gt;&lt;/ul&gt; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort fields are supported.    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;name:asc|expireAt:desc&#x60;   Sort by &#x60;name&#x60; ascending **AND** by &#x60;expireAt&#x60; descending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | &#x60;name&#x60; | Group name | | &#x60;createdAt&#x60; | Creation date | | &#x60;expireAt&#x60; | Expiration date | | &#x60;cntUsers&#x60; | Amount of users |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestGroupsTest() throws ApiException {
        String xSdsDateFormat = null;
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String sort = null;
        String xSdsAuthToken = null;
        GroupList response = api.requestGroups(xSdsDateFormat, offset, limit, filter, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request rooms where the group is defined as last admin group
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.10.0&lt;/h3&gt;  ### Description:   Retrieve a list of all rooms where the group is defined as last admin group.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change groups&lt;/span&gt; required.  ### Postcondition:  List of rooms is returned.   ### Further Information: An empty list is returned if no rooms were found where the group is defined as last admin group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestLastAdminRoomsGroupsTest() throws ApiException {
        Long groupId = null;
        String xSdsAuthToken = null;
        LastAdminGroupRoomList response = api.requestLastAdminRoomsGroups(groupId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update user group&#39;s metadata
     *
     * ### Description:   Update user group&#39;s metadata .  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change groups&lt;/span&gt; required.  ### Postcondition:  User group&#39;s metadata is changed.  ### Further Information: * If a group should **NOT** expire, leave &#x60;expireAt&#x60; empty. * Group names are limited to **150** characters * **All** characters are allowed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateGroupTest() throws ApiException {
        Long groupId = null;
        UpdateGroupRequest updateGroupRequest = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        Group response = api.updateGroup(groupId, updateGroupRequest, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

}
