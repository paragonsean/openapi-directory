/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActiveDirectoryAuthInfo;
import org.openapitools.client.model.ChunkUploadResponse;
import org.openapitools.client.model.CompleteS3ShareUploadRequest;
import org.openapitools.client.model.CreateShareUploadChannelRequest;
import org.openapitools.client.model.CreateShareUploadChannelResponse;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.GeneratePresignedUrlsRequest;
import org.openapitools.client.model.OpenIdAuthInfo;
import org.openapitools.client.model.PresignedUrlList;
import org.openapitools.client.model.PublicDownloadShare;
import org.openapitools.client.model.PublicDownloadTokenGenerateRequest;
import org.openapitools.client.model.PublicDownloadTokenGenerateResponse;
import org.openapitools.client.model.PublicUploadShare;
import org.openapitools.client.model.PublicUploadedFileData;
import org.openapitools.client.model.S3ShareUploadStatus;
import org.openapitools.client.model.SdsServerTime;
import org.openapitools.client.model.SoftwareVersionData;
import org.openapitools.client.model.SystemInfo;
import org.openapitools.client.model.ThirdPartyDependenciesData;
import org.openapitools.client.model.UserFileKeyList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PublicApi
 */
@Disabled
public class PublicApiTest {

    private final PublicApi api = new PublicApi();

    /**
     * Cancel file upload
     *
     * ### Description: Abort (chunked) upload via Upload Share.  ### Precondition: Valid Upload ID.  ### Postcondition: Aborts upload and invalidates upload ID / token.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelFileUploadViaShareTest() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        api.cancelFileUploadViaShare(accessKey, uploadId);
        // TODO: test validations
    }

    /**
     * Check public Download Share password
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.36.0&lt;/h3&gt;  ### Description: Check password for a public Download Share  ### Precondition: None.  ### Postcondition: None.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkPublicDownloadSharePasswordTest() throws ApiException {
        String accessKey = null;
        String password = null;
        api.checkPublicDownloadSharePassword(accessKey, password);
        // TODO: test validations
    }

    /**
     * Complete file upload
     *
     * ### Description: Finalize (chunked) upload via Upload Share.  ### Precondition: Valid upload ID.   Only returns users that owns one of the following permissions: &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage upload share&lt;/span&gt;  ### Postcondition: Finalizes upload.  ### Further Information: Chunked uploads (range requests) are supported.    Please ensure that all chunks have been transferred correctly before finishing the upload.   If file hash has been created in time a &#x60;201 Created&#x60; will be responded and hash will be part of response, otherwise it will be a &#x60;202 Accepted&#x60; without it. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeFileUploadViaShareTest() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        String xSdsDateFormat = null;
        UserFileKeyList userFileKeyList = null;
        PublicUploadedFileData response = api.completeFileUploadViaShare(accessKey, uploadId, xSdsDateFormat, userFileKeyList);
        // TODO: test validations
    }

    /**
     * Complete S3 file upload
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;  ### Description: Finishes a S3 file upload and closes the corresponding upload channel.  ### Precondition: Valid upload ID.   Only returns users that owns one of the following permissions: &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage upload share&lt;/span&gt;  ### Postcondition: Upload channel is closed. S3 multipart upload request is completed.  ### Further Information: None. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void completeS3FileUploadViaShareTest() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        CompleteS3ShareUploadRequest completeS3ShareUploadRequest = null;
        api.completeS3FileUploadViaShare(accessKey, uploadId, completeS3ShareUploadRequest);
        // TODO: test validations
    }

    /**
     * Create new file upload channel
     *
     * ### Description:   Create a new upload channel.  ### Precondition: None.  ### Postcondition: Upload channel is created and corresponding upload URL, token &amp; upload ID are returned.  ### Further Information: Use &#x60;uploadUrl&#x60; the upload &#x60;token&#x60; is deprecated.    Please provide the size of the intended upload so that the quota can be checked in advanced and no data is transferred unnecessarily.  ### Node naming convention: * Node (room, folder, file) names are limited to **150** characters. * Illegal names:   &#x60;&#39;CON&#39;, &#39;PRN&#39;, &#39;AUX&#39;, &#39;NUL&#39;, &#39;COM1&#39;, &#39;COM2&#39;, &#39;COM3&#39;, &#39;COM4&#39;, &#39;COM5&#39;, &#39;COM6&#39;, &#39;COM7&#39;, &#39;COM8&#39;, &#39;COM9&#39;, &#39;LPT1&#39;, &#39;LPT2&#39;, &#39;LPT3&#39;, &#39;LPT4&#39;, &#39;LPT5&#39;, &#39;LPT6&#39;, &#39;LPT7&#39;, &#39;LPT8&#39;, &#39;LPT9&#39;, (and any of those with an extension)&#x60; * Illegal characters in names:   &#x60;&#39;\\\\&#39;, &#39;&lt;&#39;,&#39;&gt;&#39;, &#39;:&#39;, &#39;\\\&quot;&#39;, &#39;|&#39;, &#39;?&#39;, &#39;*&#39;, &#39;/&#39;, leading &#39;-&#39;, trailing &#39;.&#39; &#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShareUploadChannelTest() throws ApiException {
        String accessKey = null;
        CreateShareUploadChannelRequest createShareUploadChannelRequest = null;
        CreateShareUploadChannelResponse response = api.createShareUploadChannel(accessKey, createShareUploadChannelRequest);
        // TODO: test validations
    }

    /**
     * Download file with token
     *
     * ### Description:   Download a file (or zip archive if target is a folder or room).  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.   Range requests are illegal for zip archive download.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadFileViaTokenPublicTest() throws ApiException {
        String accessKey = null;
        String token = null;
        String range = null;
        Boolean genericMimetype = null;
        Boolean inline = null;
        api.downloadFileViaTokenPublic(accessKey, token, range, genericMimetype, inline);
        // TODO: test validations
    }

    /**
     * Download file with token
     *
     * ### Description:   Download a file (or zip archive if target is a folder or room).  ### Precondition: Valid download token.  ### Postcondition: Stream is returned.  ### Further Information: Range requests are supported.   Range requests are illegal for zip archive download.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadFileViaTokenPublic1Test() throws ApiException {
        String accessKey = null;
        String token = null;
        String range = null;
        Boolean genericMimetype = null;
        Boolean inline = null;
        api.downloadFileViaTokenPublic1(accessKey, token, range, genericMimetype, inline);
        // TODO: test validations
    }

    /**
     * Generate download URL
     *
     * ### Description: Generate a download URL to retrieve a shared file.  ### Precondition: None.  ### Postcondition: Download URL and token are generated and returned.  ### Further Information: Use &#x60;downloadUrl&#x60; the download &#x60;token&#x60; is deprecated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateDownloadUrlPublicTest() throws ApiException {
        String accessKey = null;
        PublicDownloadTokenGenerateRequest publicDownloadTokenGenerateRequest = null;
        PublicDownloadTokenGenerateResponse response = api.generateDownloadUrlPublic(accessKey, publicDownloadTokenGenerateRequest);
        // TODO: test validations
    }

    /**
     * Generate presigned URLs for S3 file upload
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;  ### Description: Generate presigned URLs for S3 file upload.  ### Precondition: Valid upload ID  ### Postcondition: List of presigned URLs is returned.  ### Further Information: The size for each part must be &gt;&#x3D; 5 MB, except for the last part.   The part number of the first part in S3 is 1 (not 0).   Use HTTP method &#x60;PUT&#x60; for uploading bytes via presigned URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generatePresignedUrlsPublicTest() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        GeneratePresignedUrlsRequest generatePresignedUrlsRequest = null;
        String xSdsDateFormat = null;
        PresignedUrlList response = api.generatePresignedUrlsPublic(accessKey, uploadId, generatePresignedUrlsRequest, xSdsDateFormat);
        // TODO: test validations
    }

    /**
     * Request Active Directory authentication information
     *
     * ### Description:   Provides information about Active Directory authentication options.  ### Precondition: None.  ### Postcondition: Active Directory authentication options information is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestActiveDirectoryAuthInfoTest() throws ApiException {
        Boolean isGlobalAvailable = null;
        ActiveDirectoryAuthInfo response = api.requestActiveDirectoryAuthInfo(isGlobalAvailable);
        // TODO: test validations
    }

    /**
     * Request OpenID Connect provider authentication information
     *
     * ### Description:   Provides information about OpenID Connect authentication options.  ### Precondition: None.  ### Postcondition: OpenID Connect authentication options information is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOpenIdAuthInfoTest() throws ApiException {
        Boolean isGlobalAvailable = null;
        OpenIdAuthInfo response = api.requestOpenIdAuthInfo(isGlobalAvailable);
        // TODO: test validations
    }

    /**
     * Request public Download Share information
     *
     * ### Description:   Retrieve the public information of a Download Share.  ### Precondition: None.  ### Postcondition: Download Share information is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPublicDownloadShareInfoTest() throws ApiException {
        String accessKey = null;
        String xSdsDateFormat = null;
        PublicDownloadShare response = api.requestPublicDownloadShareInfo(accessKey, xSdsDateFormat);
        // TODO: test validations
    }

    /**
     * Request public Upload Share information
     *
     * ### Description:   Provides information about the desired Upload Share.  ### Precondition: Only &#x60;userUserPublicKeyList&#x60; is returned to the users who owns one of the following permissions: &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage download share&lt;/span&gt;, &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; manage upload share&lt;/span&gt;  ### Postcondition: None.  ### Further Information: If no password is set, the returned information is reduced to the following attributes (if available):  * &#x60;name&#x60; * &#x60;createdAt&#x60; * &#x60;isProtected&#x60; * &#x60;isEncrypted&#x60; * &#x60;showUploadedFiles&#x60; * &#x60;userUserPublicKeyList&#x60; (if parent is end-to-end encrypted)  Only if the password is transmitted as &#x60;X-Sds-Share-Password&#x60; header, all values are returned. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestPublicUploadShareInfoTest() throws ApiException {
        String accessKey = null;
        String xSdsSharePassword = null;
        String xSdsDateFormat = null;
        PublicUploadShare response = api.requestPublicUploadShareInfo(accessKey, xSdsSharePassword, xSdsDateFormat);
        // TODO: test validations
    }

    /**
     * Request software version information
     *
     * ### Description:   Public software version information.  ### Precondition: None.  ### Postcondition: Sofware version information is returned.  ### Further Information: The version of DRACOON Server consists of two components: * **API** * **Core** (referred to as _\&quot;Server\&quot;_)  which are versioned individually.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSoftwareVersionTest() throws ApiException {
        String xSdsDateFormat = null;
        SoftwareVersionData response = api.requestSoftwareVersion(xSdsDateFormat);
        // TODO: test validations
    }

    /**
     * Request system information
     *
     * ### Description:   Provides information about system.  ### Precondition: None.  ### Postcondition: System information is returned.  ### Further Information: Authentication methods are sorted by **priority** attribute.   Smaller values have higher priority.   Authentication method with highest priority is considered as default.  ### System information: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Setting | Description | Value | | :--- | :--- | :--- | | &#x60;languageDefault&#x60; | Defines which language should be default. | &#x60;ISO 639-1 code&#x60; | | &#x60;hideLoginInputFields&#x60; | Defines if login fields should be hidden. | &#x60;true or false&#x60; | | &#x60;s3Hosts&#x60; | List of available S3 hosts. | &#x60;String array&#x60; | | &#x60;s3EnforceDirectUpload&#x60; | Determines whether S3 direct upload is enforced or not. | &#x60;true or false&#x60; | | &#x60;useS3Storage&#x60; | Determines whether S3 Storage enabled and used. | &#x60;true or false&#x60; |  &lt;/details&gt;  ### Authentication methods: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Authentication Method | Description | | :--- | :--- | | &#x60;basic&#x60; | **Basic** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their credentials stored in the database.&lt;br&gt;Formerly known as &#x60;sql&#x60;. | | &#x60;active_directory&#x60; | **Active Directory** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their Active Directory credentials. | | &#x60;radius&#x60; | **RADIUS** authentication globally allowed.&lt;br&gt;This option **MUST** be activated to allow users to log in with their RADIUS username, their PIN and a token password. | | &#x60;openid&#x60; | **OpenID Connect** authentication globally allowed.This option **MUST** be activated to allow users to log in with their OpenID Connect identity. | | &#x60;hideLoginInputFields&#x60; | Determines whether input fields for login should be enabled | &#x60;true or false&#x60; |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSystemInfoTest() throws ApiException {
        Boolean isEnabled = null;
        SystemInfo response = api.requestSystemInfo(isEnabled);
        // TODO: test validations
    }

    /**
     * Request system time
     *
     * ### Description:   Retrieve the actual server time.  ### Precondition: None.  ### Postcondition: Server time is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSystemTimeTest() throws ApiException {
        String xSdsDateFormat = null;
        SdsServerTime response = api.requestSystemTime(xSdsDateFormat);
        // TODO: test validations
    }

    /**
     * Request third-party software dependencies
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.9.0&lt;/h3&gt;  ### Description:   Provides information about used third-party software dependencies.  ### Precondition: None.  ### Postcondition: List of the third-party software dependencies used by **DRACOON Core** (referred to as _\&quot;Server\&quot;_) is returned.  ### Further Information: None.  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestThirdPartyDependenciesTest() throws ApiException {
        List<ThirdPartyDependenciesData> response = api.requestThirdPartyDependencies();
        // TODO: test validations
    }

    /**
     * Request status of S3 file upload
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.15.0&lt;/h3&gt;  ### Description: Request status of a S3 file upload.  ### Precondition: An upload channel has been created and the user has &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; create&lt;/span&gt; permissions in the parent container (room or folder).  ### Postcondition: Status of S3 multipart upload request is returned.  ### Further Information: None.  ### Possible errors: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | Http Status | Error Code | Description | | :--- | :--- | :--- | | &#x60;400 Bad Request&#x60; | &#x60;-80000&#x60; | Mandatory fields cannot be empty | | &#x60;400 Bad Request&#x60; | &#x60;-80001&#x60; | Invalid positive number | | &#x60;400 Bad Request&#x60; | &#x60;-80002&#x60; | Invalid number | | &#x60;400 Bad Request&#x60; | &#x60;-40001&#x60; | (Target) room is not encrypted | | &#x60;400 Bad Request&#x60; | &#x60;-40755&#x60; | Bad file name | | &#x60;400 Bad Request&#x60; | &#x60;-40763&#x60; | File key must be set for an upload into encrypted room | | &#x60;400 Bad Request&#x60; | &#x60;-50506&#x60; | Exceeds the number of files for this Upload Share | | &#x60;403 Forbidden&#x60; |  | Access denied | | &#x60;404 Not Found&#x60; | &#x60;-20501&#x60; | Upload not found | | &#x60;404 Not Found&#x60; | &#x60;-40000&#x60; | Container not found | | &#x60;404 Not Found&#x60; | &#x60;-41000&#x60; | Node not found | | &#x60;404 Not Found&#x60; | &#x60;-70501&#x60; | User not found | | &#x60;409 Conflict&#x60; | &#x60;-40010&#x60; | Container cannot be overwritten | | &#x60;409 Conflict&#x60; |  | File cannot be overwritten | | &#x60;500 Internal Server Error&#x60; |  | System Error | | &#x60;502 Bad Gateway&#x60; |  | S3 Error | | &#x60;502 Insufficient Storage&#x60; | &#x60;-50504&#x60; | Exceeds the quota for this Upload Share | | &#x60;502 Insufficient Storage&#x60; | &#x60;-40200&#x60; | Exceeds the free node quota in room | | &#x60;502 Insufficient Storage&#x60; | &#x60;-90200&#x60; | Exceeds the free customer quota | | &#x60;502 Insufficient Storage&#x60; | &#x60;-90201&#x60; | Exceeds the free customer physical disk space |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestUploadStatusPublicTest() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        S3ShareUploadStatus response = api.requestUploadStatusPublic(accessKey, uploadId);
        // TODO: test validations
    }

    /**
     * Upload file
     *
     * ### Description:   Chunked upload of files via Upload Share.  ### Precondition: Valid upload ID.  ### Postcondition: Chunk of file is uploaded.  ### Further Information: Chunked uploads (range requests) are supported.  Following &#x60;Content-Types&#x60; are supported by this API: * &#x60;multipart/form-data&#x60; * provided &#x60;Content-Type&#x60;    For both file upload types set the correct &#x60;Content-Type&#x60; header and body.    ### Examples:    * &#x60;multipart/form-data&#x60; &#x60;&#x60;&#x60; POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1  Header: ... Content-Type: multipart/form-data; boundary&#x3D;----WebKitFormBoundary7MA4YWxkTrZu0gW ...  Body: ------WebKitFormBoundary7MA4YWxkTrZu0gW Content-Disposition: form-data; name&#x3D;\&quot;file\&quot;; filename&#x3D;\&quot;file.txt\&quot; Content-Type: text/plain  Content of file.txt ------WebKitFormBoundary7MA4YWxkTrZu0gW-- &#x60;&#x60;&#x60;  * any other &#x60;Content-Type&#x60;   &#x60;&#x60;&#x60; POST /api/v4/public/shares/uploads/{access_key}{upload_id} HTTP/1.1  Header: ... Content-Type: { ... } ...  Body: raw content &#x60;&#x60;&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileAsMultipartPublic1Test() throws ApiException {
        String accessKey = null;
        String uploadId = null;
        File _file = null;
        String contentRange = null;
        String xSdsDateFormat = null;
        ChunkUploadResponse response = api.uploadFileAsMultipartPublic1(accessKey, uploadId, _file, contentRange, xSdsDateFormat);
        // TODO: test validations
    }

}
