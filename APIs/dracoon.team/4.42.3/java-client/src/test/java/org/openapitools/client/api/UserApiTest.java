/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AttributesResponse;
import org.openapitools.client.model.Avatar;
import org.openapitools.client.model.ChangeUserPasswordRequest;
import org.openapitools.client.model.CreateKeyPairRequest;
import org.openapitools.client.model.CustomerData;
import org.openapitools.client.model.EnableCustomerEncryptionRequest;
import org.openapitools.client.model.ErrorResponse;
import java.io.File;
import org.openapitools.client.model.MfaTotpConfirmationRequest;
import org.openapitools.client.model.NotificationConfig;
import org.openapitools.client.model.NotificationConfigChangeRequest;
import org.openapitools.client.model.NotificationConfigList;
import org.openapitools.client.model.OAuthApproval;
import org.openapitools.client.model.OAuthAuthorization;
import org.openapitools.client.model.ProfileAttributes;
import org.openapitools.client.model.ProfileAttributesRequest;
import org.openapitools.client.model.ResetPassword400Response;
import org.openapitools.client.model.SubscribedDownloadShare;
import org.openapitools.client.model.SubscribedDownloadShareList;
import org.openapitools.client.model.SubscribedNode;
import org.openapitools.client.model.SubscribedNodeList;
import org.openapitools.client.model.SubscribedUploadShare;
import org.openapitools.client.model.SubscribedUploadShareList;
import org.openapitools.client.model.TotpSetupResponse;
import org.openapitools.client.model.UpdateSubscriptionsBulkRequest;
import org.openapitools.client.model.UpdateUserAccountRequest;
import org.openapitools.client.model.UserAccount;
import org.openapitools.client.model.UserKeyPairContainer;
import org.openapitools.client.model.UserMfaStatusResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Disabled
public class UserApiTest {

    private final UserApi api = new UserApi();

    /**
     * Change user&#39;s password
     *
     * ### Description: Change the user&#39;s password.  ### Precondition: Authenticated user.  ### Postcondition: User&#39;s password is changed.  ### Further Information: The password **MUST** comply to configured password policies.    Forbidden characters in passwords: [&#x60;&amp;&#x60;, &#x60;&#39;&#x60;, &#x60;&lt;&#x60;, &#x60;&gt;&#x60;]
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeUserPasswordTest() throws ApiException {
        ChangeUserPasswordRequest changeUserPasswordRequest = null;
        String xSdsAuthToken = null;
        api.changeUserPassword(changeUserPasswordRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Confirm second factor TOTP setup with a generated OTP
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;  ### Description: Confirm second factor TOTP setup with a generated OTP.  ### Precondition: Authenticated user    ### Postcondition: Second factor TOTP is enabled.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmTotpSetupTest() throws ApiException {
        MfaTotpConfirmationRequest mfaTotpConfirmationRequest = null;
        String xSdsAuthToken = null;
        api.confirmTotpSetup(mfaTotpConfirmationRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Create key pair and preserve copy of old private key
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description:   Create user key pair and preserve copy of old private key.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is created.   Copy of old private key is preserved.  ### Further Information: You can submit your old private key, encrypted with your current password.   This allows migrating file keys encrypted with your old key pair to the new one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAndPreserveUserKeyPairTest() throws ApiException {
        CreateKeyPairRequest createKeyPairRequest = null;
        String xSdsAuthToken = null;
        api.createAndPreserveUserKeyPair(createKeyPairRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Disable a MFA TOTP setup with generated OTP
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;  ### Description:   Delete multi-factor authentication TOTP setup with a valid OTP code.  ### Precondition: Authenticated user   Multi-factor authentication is **NOT** enforced  ### Postcondition: Second factor TOTP is disabled.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMfaTotpSetupTest() throws ApiException {
        Long id = null;
        String validOtp = null;
        String xSdsAuthToken = null;
        api.deleteMfaTotpSetup(id, validOtp, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Activate client-side encryption for customer
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.24.0&lt;/h3&gt;  ### Use &#x60;POST /settings/keypair&#x60; API  ### Description:   Activate client-side encryption for according customer.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change config&lt;/span&gt; required.  ### Postcondition: Client-side encryption is enabled.  ### Further Information: Sets the ability for this customer to encrypt rooms.   Once enabled on customer level, it **CANNOT** be unset.   On activation, a customer rescue key pair **MUST** be set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableCustomerEncryptionTest() throws ApiException {
        EnableCustomerEncryptionRequest enableCustomerEncryptionRequest = null;
        String xSdsAuthToken = null;
        CustomerData response = api.enableCustomerEncryption(enableCustomerEncryptionRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request information about the user&#39;s mfa status
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;  ### Description: Request information about the user&#39;s mfa status  ### Precondition: Authenticated user.  ### Postcondition: None.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMfaStatusForUserTest() throws ApiException {
        String xSdsAuthToken = null;
        UserMfaStatusResponse response = api.getMfaStatusForUser(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request information to setup TOTP as second authentication factor
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;  ### Description:   Get setup information for multi-factor authentication (TOTP).  ### Precondition: Authenticated user.  ### Postcondition: None.   ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTotpSetupInformationTest() throws ApiException {
        String xSdsAuthToken = null;
        TotpSetupResponse response = api.getTotpSetupInformation(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * List Download Share subscriptions
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Retrieve a list of subscribed Download Shares for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed Download Shares is returned.  ### Further Information: None.  ### Filtering All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;authParentId:eq:#&#x60;   Get download shares where &#x60;authParentId&#x60; equals &#x60;#&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | **&#x60;downloadShareId&#x60;** | Download Share ID filter | &#x60;eq&#x60; | Download Share ID equals value. | &#x60;long value&#x60; | | **&#x60;authParentId&#x60;** | Auth parent ID filter | &#x60;eq&#x60; | Auth parent ID equals value. | &#x60;long value&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;downloadShareId:desc|authParentId:asc&#x60;   Sort by &#x60;downloadShareId&#x60; descending **AND** &#x60;authParentId&#x60; ascending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | **&#x60;downloadShareId&#x60;** | Download Share ID | | **&#x60;authParentId&#x60;** | Auth parent ID |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDownloadShareSubscriptionsTest() throws ApiException {
        String filter = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String xSdsAuthToken = null;
        SubscribedDownloadShareList response = api.listDownloadShareSubscriptions(filter, limit, offset, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * List node subscriptions
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Retrieve a list of subscribed nodes for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed nodes is returned.  ### Further Information: None.  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;authParentId:eq:#&#x60;   Get nodes where &#x60;authParentId&#x60; equals &#x60;#&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | **&#x60;nodeId&#x60;** | Node ID filter | &#x60;eq&#x60; | Node ID equals value. | &#x60;long value&#x60; | | **&#x60;authParentId&#x60;** | Auth parent ID filter | &#x60;eq&#x60; | Auth parent ID equals value. | &#x60;long value&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;nodeId:desc|authParentId:asc&#x60;   Sort by &#x60;nodeId&#x60; descending **AND** &#x60;authParentId&#x60; ascending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | **&#x60;nodeId&#x60;** | Node ID | | **&#x60;authParentId&#x60;** | Auth parent ID |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listNodeSubscriptionsTest() throws ApiException {
        String filter = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String xSdsAuthToken = null;
        SubscribedNodeList response = api.listNodeSubscriptions(filter, limit, offset, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * List Upload Share subscriptions
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description:   Retrieve a list of subscribed Upload Shares for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of subscribed Upload Shares is returned.  ### Further Information: None.  ### Filtering All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;targetNodeId:eq:#&#x60;   Get upload shares where &#x60;targetNodeId&#x60; equals &#x60;#&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | **&#x60;uploadShareId&#x60;** | Upload Share ID filter | &#x60;eq&#x60; | Upload Share ID equals value. | &#x60;long value&#x60; | | **&#x60;targetNodeId&#x60;** | Target node ID filter | &#x60;eq&#x60; | Target node ID equals value. | &#x60;long value&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;uploadShareId:desc|targetNodeId:asc&#x60;   Sort by &#x60;uploadShareId&#x60; descending **AND** &#x60;targetNodeId&#x60; ascending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | **&#x60;uploadShareId&#x60;** | Upload Share ID | | **&#x60;targetNodeId&#x60;** | Target node ID |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUploadShareSubscriptionsTest() throws ApiException {
        String filter = null;
        Integer limit = null;
        Integer offset = null;
        String sort = null;
        String xSdsAuthToken = null;
        SubscribedUploadShareList response = api.listUploadShareSubscriptions(filter, limit, offset, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Invalidate authentication token
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.12.0&lt;/h3&gt;  ### Description:   Log out a user.  ### Precondition: Authenticated user.  ### Postcondition: * User is logged out   * Authentication token gets invalidated.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        Boolean everywhere = null;
        String xSdsAuthToken = null;
        api.logout(everywhere, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * (authenticated) Ping
     *
     * ### Description: Test connection to DRACOON Server (while authenticated).  ### Precondition: Authenticated user.  ### Postcondition: &#x60;200 OK&#x60; with principal information is returned if successful.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pingUserTest() throws ApiException {
        String xSdsAuthToken = null;
        String response = api.pingUser(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove OAuth client approval
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.22.0&lt;/h3&gt;  ### Functional Description: Delete an OAuth client approval.  ### Precondition: Authenticated user and valid client ID  ### Postcondition: OAuth Client approval is revoked.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOAuthApprovalTest() throws ApiException {
        String clientId = null;
        String xSdsAuthToken = null;
        api.removeOAuthApproval(clientId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove a OAuth authorization
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.12.0&lt;/h3&gt;  ### Description: Delete an authorization.  ### Precondition: Authenticated user and valid client ID, authorization ID  ### Postcondition: Authorization is revoked.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOAuthAuthorizationTest() throws ApiException {
        String clientId = null;
        Long authorizationId = null;
        String xSdsAuthToken = null;
        api.removeOAuthAuthorization(clientId, authorizationId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove all OAuth authorizations of a client
     *
     * ### Description: Delete all authorizations of a client.  ### Precondition: Authenticated user and valid client ID  ### Postcondition: All authorizations for the client are revoked.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOAuthAuthorizationsTest() throws ApiException {
        String clientId = null;
        String xSdsAuthToken = null;
        api.removeOAuthAuthorizations(clientId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove user profile attribute
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.7.0&lt;/h3&gt;  ### Description:   Delete custom user profile attribute.  ### Precondition: None.  ### Postcondition: Custom user profile attribute is deleted.  ### Further Information: Allowed characters for keys are: &#x60;[a-zA-Z0-9_-]&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeProfileAttributeTest() throws ApiException {
        String key = null;
        String xSdsAuthToken = null;
        api.removeProfileAttribute(key, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove user&#39;s key pair
     *
     * ### Description:   Delete user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is deleted.  ### Further Information: If parameter &#x60;version&#x60; is not set and two key versions exist, this API deletes version A.       If two keys with the same version are set, this API deletes the older one.  This will also remove all file keys that were encrypted with the user public key. If the user had exclusive access to some files, those are removed as well since decrypting them became impossible.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserKeyPairTest() throws ApiException {
        String version = null;
        String xSdsAuthToken = null;
        api.removeUserKeyPair(version, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request avatar
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.11.0&lt;/h3&gt;  ### Description: Get the avatar.  ### Precondition: Authenticated user.  ### Postcondition: Avatar is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAvatarTest() throws ApiException {
        String xSdsAuthToken = null;
        Avatar response = api.requestAvatar(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request customer information for user
     *
     * ### Description:   Use this API to get:  * customer name * used / free space * used / available * user account info  of the according customer.  ### Precondition: Authenticated user.  ### Postcondition: Customer information is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestCustomerInfoTest() throws ApiException {
        String xSdsAuthToken = null;
        CustomerData response = api.requestCustomerInfo(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request customer&#39;s key pair
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.24.0&lt;/h3&gt;  ### Use &#x60;GET /settings/keypair&#x60; API  ### Description:   Retrieve the customer rescue key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is returned.  ### Further Information: The private key is password-based encrypted with &#x60;AES256&#x60; / &#x60;PBKDF2&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestCustomerKeyPairTest() throws ApiException {
        String xSdsAuthToken = null;
        UserKeyPairContainer response = api.requestCustomerKeyPair(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of notification configurations
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Retrieve a list of notification configurations for current user.   ### Precondition: Authenticated user.  ### Postcondition: List of available notification configurations is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestListOfNotificationConfigsTest() throws ApiException {
        String xSdsAuthToken = null;
        NotificationConfigList response = api.requestListOfNotificationConfigs(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of OAuth client approvals
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.22.0&lt;/h3&gt;  ### Functional Description:   Retrieve information about all OAuth client approvals.  ### Precondition: Authenticated user.  ### Postcondition: None.  ### Further Information: None.  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;clientName:desc&#x60;   Sort by &#x60;clientName&#x60; descending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | &#x60;clientName&#x60; | Client name |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOAuthApprovalsTest() throws ApiException {
        String xSdsDateFormat = null;
        String sort = null;
        String xSdsAuthToken = null;
        List<OAuthApproval> response = api.requestOAuthApprovals(xSdsDateFormat, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of OAuth client authorizations
     *
     * ### Description:   Retrieve information about all OAuth client authorizations.  ### Precondition: Authenticated user.  ### Postcondition: List of OAuth client authorizations is returned.  ### Further Information:  ### Filtering: Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;isStandard:eq:true&#x60;   Get standard OAuth clients.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;isStandard&#x60; | Standard client filter | &#x60;eq&#x60; |  | &#x60;true or false&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;clientName:desc&#x60;   Sort by &#x60;clientName&#x60; descending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | &#x60;clientName&#x60; | Client name |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOAuthAuthorizationsTest() throws ApiException {
        String xSdsDateFormat = null;
        String filter = null;
        String sort = null;
        String xSdsAuthToken = null;
        List<OAuthAuthorization> response = api.requestOAuthAuthorizations(xSdsDateFormat, filter, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request user profile attributes
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.7.0&lt;/h3&gt;  ### Description:   Retrieve a list of user profile attributes.  ### Precondition: None.  ### Postcondition: List of attributes is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;key:cn:searchString_1|value:cn:searchString_2&#x60;   Filter by attribute key contains &#x60;searchString_1&#x60; **AND** attribute value contains &#x60;searchString_2&#x60;.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;key&#x60; | User profile attribute key filter | &#x60;cn, eq, sw&#x60; | Attribute key contains / equals / starts with value. | &#x60;search String&#x60; | | &#x60;value&#x60; | User profile attribute value filter | &#x60;cn, eq, sw&#x60; | Attribute value contains / equals / starts with value. | &#x60;search String&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort fields are supported.    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;key:asc|value:desc&#x60;   Sort by &#x60;key&#x60; ascending **AND** by &#x60;value&#x60; descending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | &#x60;key&#x60; | User profile attribute key | | &#x60;value&#x60; | User profile attribute value |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestProfileAttributesTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String filter = null;
        String sort = null;
        String xSdsAuthToken = null;
        AttributesResponse response = api.requestProfileAttributes(offset, limit, filter, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request user account information
     *
     * ### Description:   Retrieves all information regarding the current user&#39;s account.  ### Precondition: Authenticated user.  ### Postcondition: User information is returned.  ### Further Information: Setting the query parameter &#x60;more_info&#x60; to &#x60;true&#x60;, causes the API to return more details e.g. the user&#39;s groups.    &#x60;customer&#x60; (&#x60;CustomerData&#x60;) attribute in &#x60;UserAccount&#x60; response model is deprecated. Please use response from &#x60;GET /user/account/customer&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestUserInfoTest() throws ApiException {
        String xSdsDateFormat = null;
        Boolean moreInfo = null;
        String xSdsAuthToken = null;
        UserAccount response = api.requestUserInfo(xSdsDateFormat, moreInfo, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request user&#39;s key pair
     *
     * ### Description:   Retrieve the user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is returned.   ### Further Information: The private key is password-based encrypted with &#x60;AES256&#x60; / &#x60;PBKDF2&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestUserKeyPairTest() throws ApiException {
        String xSdsDateFormat = null;
        String version = null;
        String xSdsAuthToken = null;
        UserKeyPairContainer response = api.requestUserKeyPair(xSdsDateFormat, version, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request all user key pairs
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description:   Retrieve all user key pairs to allow re-encrypting file keys without need for a second distributor.  ### Precondition: Authenticated user.  ### Postcondition: List of key pairs is returned.   ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestUserKeyPairsTest() throws ApiException {
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        List<UserKeyPairContainer> response = api.requestUserKeyPairs(xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Reset avatar
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.11.0&lt;/h3&gt;  ### Description:   Reset (custom) avatar to default avatar.  ### Precondition: Authenticated user.  ### Postcondition: * User&#39;s avatar gets deleted.   * Default avatar is set.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetAvatarTest() throws ApiException {
        String xSdsAuthToken = null;
        Avatar response = api.resetAvatar(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Set user profile attributes
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128679; Deprecated since v4.12.0&lt;/h3&gt;  ### Description:   Set custom user profile attributes.  ### Precondition: None.  ### Postcondition: Custom user profile attributes are set.  ### Further Information: Batch function.   All existing user profile attributes will be deleted.    * Allowed characters for keys are: &#x60;[a-zA-Z0-9_-]&#x60;   * Characters are **case-insensitive**   * Maximum key length is **255**   * Maximum value length is **4096**
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setProfileAttributesTest() throws ApiException {
        ProfileAttributesRequest profileAttributesRequest = null;
        String xSdsAuthToken = null;
        ProfileAttributes response = api.setProfileAttributes(profileAttributesRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Set user&#39;s key pair
     *
     * ### Description:   Set the user key pair.  ### Precondition: Authenticated user.  ### Postcondition: Key pair is set.  ### Further Information: Overwriting an existing key pair is **NOT** possible.   Please delete the existing key pair first.   The private key is password-based encrypted with &#x60;AES256&#x60; / &#x60;PBKDF2&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserKeyPairTest() throws ApiException {
        UserKeyPairContainer userKeyPairContainer = null;
        String xSdsAuthToken = null;
        api.setUserKeyPair(userKeyPairContainer, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe Download Share for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Subscribe Download Share for notifications.  ### Precondition: User with _\&quot;manage download share\&quot;_ permissions on target node.  ### Postcondition: Download Share is subscribed.   Notifications for this Download Share will be triggered in the future.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeDownloadShareTest() throws ApiException {
        Long shareId = null;
        String xSdsAuthToken = null;
        SubscribedDownloadShare response = api.subscribeDownloadShare(shareId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe or Unsubscribe a List of Download Shares for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.25.0&lt;/h3&gt;  ### Description:   Subscribe/Unsubscribe download shares for notifications.  ### Precondition: User with _\&quot;manage download share\&quot;_ permissions on target node.    ### Postcondition: Download shares are subscribed or unsubscribed. Notifications for these download shares will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeDownloadSharesTest() throws ApiException {
        UpdateSubscriptionsBulkRequest updateSubscriptionsBulkRequest = null;
        String xSdsAuthToken = null;
        api.subscribeDownloadShares(updateSubscriptionsBulkRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe node for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description: Subscribe node for notifications.  ### Precondition: User has _\&quot;read\&quot;_ permissions in auth parent room.  ### Postcondition: Node is subscribed. Notifications for this node will be triggered in the future.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeNodeTest() throws ApiException {
        Long nodeId = null;
        String xSdsAuthToken = null;
        SubscribedNode response = api.subscribeNode(nodeId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe Upload Share for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description:   Subscribe Upload Share for notifications.  ### Precondition: User with _\&quot;manage upload share\&quot;_ permissions on target node.  ### Postcondition: Upload Share is subscribed.   Notifications for this Upload Share will be triggered in the future.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeUploadShareTest() throws ApiException {
        Long shareId = null;
        String xSdsAuthToken = null;
        SubscribedUploadShare response = api.subscribeUploadShare(shareId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe or Unsubscribe a List of Upload Shares for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.25.0&lt;/h3&gt;  ### Description:   Subscribe/Unsubscribe upload shares for notifications.  ### Precondition: User with _\&quot;manage upload share\&quot;_ permissions on target node.    ### Postcondition: Upload shares are subscribed or unsubscribed. Notifications for these upload shares will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeUploadSharesTest() throws ApiException {
        UpdateSubscriptionsBulkRequest updateSubscriptionsBulkRequest = null;
        String xSdsAuthToken = null;
        api.subscribeUploadShares(updateSubscriptionsBulkRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Unsubscribe Download Share from notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Unsubscribe Download Share from notifications.  ### Precondition: User with _\&quot;manage download share\&quot;_ permissions on target node.  ### Postcondition: Download Share is unsubscribed.   Notifications for this Download Share are disabled.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeDownloadShareTest() throws ApiException {
        Long shareId = null;
        String xSdsAuthToken = null;
        api.unsubscribeDownloadShare(shareId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Unsubscribe node from notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Unsubscribe node from notifications.  ### Precondition: User has _\&quot;read\&quot;_ permissions in auth parent room.  ### Postcondition: Node is unsubscribed.   Notifications for this node are disabled.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeNodeTest() throws ApiException {
        Long nodeId = null;
        String xSdsAuthToken = null;
        api.unsubscribeNode(nodeId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Unsubscribe Upload Share from notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.24.0&lt;/h3&gt;  ### Description:   Unsubscribe Upload Share from notifications.  ### Precondition: User with _\&quot;manage upload share\&quot;_ permissions on target node.  ### Postcondition: Upload Share is unsubscribed.   Notifications for this Upload Share are disabled.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unsubscribeUploadShareTest() throws ApiException {
        Long shareId = null;
        String xSdsAuthToken = null;
        api.unsubscribeUploadShare(shareId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Subscribe or Unsubscribe a List of nodes for notifications
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.25.0&lt;/h3&gt;  ### Description:   Subscribe/Unsubscribe nodes for notifications.  ### Precondition: User has _\&quot;read\&quot;_ permissions in auth parent room.  ### Postcondition: Nodes are subscribed or unsubscribed. Notifications for these nodes will be triggered in the future.  ### Further Information: Maximum number of subscriptions is 200.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNodeSubscriptionsTest() throws ApiException {
        UpdateSubscriptionsBulkRequest updateSubscriptionsBulkRequest = null;
        String xSdsAuthToken = null;
        api.updateNodeSubscriptions(updateSubscriptionsBulkRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update notification configuration
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.20.0&lt;/h3&gt;  ### Description:   Update notification configuration for current user.   ### Precondition: Authenticated user.  ### Postcondition: Notification configuration is updated.  ### Further Information: Leave &#x60;channelIds&#x60; empty to disable notifications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateNotificationConfigTest() throws ApiException {
        Long id = null;
        NotificationConfigChangeRequest notificationConfigChangeRequest = null;
        String xSdsAuthToken = null;
        NotificationConfig response = api.updateNotificationConfig(id, notificationConfigChangeRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Add or edit user profile attributes
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.7.0&lt;/h3&gt;  ### Description:   Add or edit custom user profile attributes. &lt;br/&gt;&lt;br/&gt;&lt;span style&#x3D;\&quot;font-weight: bold; color: red;\&quot;&gt; &amp;#128679; **Warning: Please note that the response with HTTP status code 200 (OK) is deprecated and will be replaced with HTTP status code 204 (No content)!**&lt;/span&gt;&lt;br/&gt;  ### Precondition: None.  ### Postcondition: Custom user profile attributes are added or edited.  ### Further Information: Batch function.   If an entry existed before, it will be overwritten.   Range submodel is never returned.  * Allowed characters for keys are: &#x60;[a-zA-Z0-9_-]&#x60;   * Characters are **case-insensitive**   * Maximum key length is **255**   * Maximum value length is **4096**
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileAttributesTest() throws ApiException {
        ProfileAttributesRequest profileAttributesRequest = null;
        String xSdsAuthToken = null;
        ProfileAttributes response = api.updateProfileAttributes(profileAttributesRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update user account
     *
     * ### Description:   Update current user&#39;s account.  ### Precondition: Authenticated user.  ### Postcondition: User&#39;s account is updated.  ### Further Information: * All input fields are limited to **150** characters.   * **All** characters are allowed.    &#x60;customer&#x60; (&#x60;CustomerData&#x60;) attribute in &#x60;UserAccount&#x60; response model is deprecated. Please use response from &#x60;GET /user/account/customer&#x60; instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserAccountTest() throws ApiException {
        UpdateUserAccountRequest updateUserAccountRequest = null;
        String xSdsDateFormat = null;
        String xSdsAuthToken = null;
        UserAccount response = api.updateUserAccount(updateUserAccountRequest, xSdsDateFormat, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Change avatar
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.11.0&lt;/h3&gt;  ### Description: Change the avatar.  ### Precondition: Authenticated user.  ### Postcondition: Avatar is changed.  ### Further Information: * Media type **MUST** be &#x60;jpeg&#x60; or &#x60;png&#x60; * File size **MUST** bei less than &#x60;5 MB&#x60; * Dimensions **MUST** be &#x60;256x256 px&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadAvatarAsMultipartTest() throws ApiException {
        File _file = null;
        String xSdsAuthToken = null;
        Avatar response = api.uploadAvatarAsMultipart(_file, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Using emergency-code
     *
     * &lt;h3 style&#x3D;&#39;padding: 5px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px; display: table-cell;&#39;&gt;&amp;#128640; Since v4.37.0&lt;/h3&gt;  ### Description: Using emergency code for login  ### Precondition: User has MFA enabled and is already logged in with account/pw (aka pre-Auth-Role)  ### Postcondition: All MFA-setups for the user are deleted.  ### Further Information:   
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void useEmergencyCodeTest() throws ApiException {
        String emergencyCode = null;
        String xSdsAuthToken = null;
        api.useEmergencyCode(emergencyCode, xSdsAuthToken);
        // TODO: test validations
    }

}
