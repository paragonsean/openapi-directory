/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActiveDirectoryConfig;
import org.openapitools.client.model.ActiveDirectoryConfigList;
import org.openapitools.client.model.CreateActiveDirectoryConfigRequest;
import org.openapitools.client.model.CreateOAuthClientRequest;
import org.openapitools.client.model.CreateOpenIdIdpConfigRequest;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OAuthClient;
import org.openapitools.client.model.OpenIdIdpConfig;
import org.openapitools.client.model.RadiusConfig;
import org.openapitools.client.model.RadiusConfigCreateRequest;
import org.openapitools.client.model.RadiusConfigUpdateRequest;
import org.openapitools.client.model.ResetPassword400Response;
import org.openapitools.client.model.TestActiveDirectoryConfigRequest;
import org.openapitools.client.model.TestActiveDirectoryConfigResponse;
import org.openapitools.client.model.UpdateActiveDirectoryConfigRequest;
import org.openapitools.client.model.UpdateOAuthClientRequest;
import org.openapitools.client.model.UpdateOpenIdIdpConfigRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemAuthConfigApi
 */
@Disabled
public class SystemAuthConfigApiTest {

    private final SystemAuthConfigApi api = new SystemAuthConfigApi();

    /**
     * Create Active Directory configuration
     *
     * ### Description: Create a new Active Directory configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: New Active Directory configuration created.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAdConfigTest() throws ApiException {
        CreateActiveDirectoryConfigRequest createActiveDirectoryConfigRequest = null;
        String xSdsAuthToken = null;
        ActiveDirectoryConfig response = api.createAdConfig(createActiveDirectoryConfigRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Create OAuth client
     *
     * ### Description: Create a new OAuth client.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: New OAuth client created.  ### Further Information:   Client secret **MUST** have:   * at least 12 characters, at most 32 characters   * only lower case characters, upper case characters and digits   * at least 1 lower case character, 1 upper case character and 1 digit    The client secret is optional and will be generated if it is left empty.    Valid grant types are:   * &#x60;authorization_code&#x60;   * &#x60;implicit&#x60;   * &#x60;password&#x60;   * &#x60;client_credentials&#x60;   * &#x60;refresh_token&#x60;    Grant type &#x60;client_credentials&#x60; is currently **NOT** permitted!  Allowed characters for client ID are: &#x60;[a-zA-Z0-9_-]&#x60;  If grant types &#x60;authorization_code&#x60; or &#x60;implicit&#x60; are used, a redirect URI **MUST** be provided!  Default access token validity: **8 hours**   Default refresh token validity: **30 days** Default approval validity: **Â½ year**
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOAuthClientTest() throws ApiException {
        CreateOAuthClientRequest createOAuthClientRequest = null;
        String xSdsAuthToken = null;
        OAuthClient response = api.createOAuthClient(createOAuthClientRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Create OpenID Connect IDP configuration
     *
     * ### Description: Create new OpenID Connect IDP configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: New OpenID Connect IDP configuration is created.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createOpenIdIdpConfigTest() throws ApiException {
        CreateOpenIdIdpConfigRequest createOpenIdIdpConfigRequest = null;
        String xSdsAuthToken = null;
        OpenIdIdpConfig response = api.createOpenIdIdpConfig(createOpenIdIdpConfigRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Create RADIUS configuration
     *
     * ### Description:   Create new RADIUS configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: New RADIUS configuration is created.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRadiusConfigTest() throws ApiException {
        RadiusConfigCreateRequest radiusConfigCreateRequest = null;
        String xSdsAuthToken = null;
        RadiusConfig response = api.createRadiusConfig(radiusConfigCreateRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove Active Directory configuration
     *
     * ### Description: Delete an existing Active Directory configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: Active Directory configuration is removed.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAdConfigTest() throws ApiException {
        Integer adId = null;
        String xSdsAuthToken = null;
        api.removeAdConfig(adId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove OAuth client
     *
     * ### Description: Delete an existing OAuth client.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OAuth client is removed.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOAuthClientTest() throws ApiException {
        String clientId = null;
        String xSdsAuthToken = null;
        api.removeOAuthClient(clientId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove OpenID Connect IDP configuration
     *
     * ### Description: Delete an existing OpenID Connect IDP configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is removed.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeOpenIdIdpConfigTest() throws ApiException {
        Integer idpId = null;
        String xSdsAuthToken = null;
        api.removeOpenIdIdpConfig(idpId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Remove RADIUS configuration
     *
     * ### Description:   Delete existing RADIUS configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: RADIUS configuration is deleted.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        api.removeRadiusConfig(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request Active Directory configuration
     *
     * ### Description:   Retrieve the configuration of an Active Directory.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: Active Directory configuration is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAdConfigTest() throws ApiException {
        Integer adId = null;
        String xSdsAuthToken = null;
        ActiveDirectoryConfig response = api.requestAdConfig(adId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of Active Directory configurations
     *
     * ### Description:   Retrieve a list of configured Active Directories.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: List of Active Directory configurations is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestAdConfigsTest() throws ApiException {
        String xSdsAuthToken = null;
        ActiveDirectoryConfigList response = api.requestAdConfigs(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request OAuth client
     *
     * ### Description:   Retrieve the configuration of an OAuth client.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OAuth client is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOAuthClientTest() throws ApiException {
        String clientId = null;
        String xSdsAuthToken = null;
        OAuthClient response = api.requestOAuthClient(clientId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of OAuth clients
     *
     * ### Description:   Retrieve a list of configured OAuth clients.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: List of OAuth clients is returned.  ### Further Information:  ### Filtering: All filter fields are connected via logical conjunction (**AND**)   Filter string syntax: &#x60;FIELD_NAME:OPERATOR:VALUE[:VALUE...]&#x60;    &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;isStandard:eq:true&#x60;   Get standard OAuth clients.  &lt;/details&gt;  ### Filtering options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Filter Description | &#x60;OPERATOR&#x60; | Operator Description | &#x60;VALUE&#x60; | | :--- | :--- | :--- | :--- | :--- | | &#x60;isStandard&#x60; | Standard client filter | &#x60;eq&#x60; |  | &#x60;true or false&#x60; | | &#x60;isExternal&#x60; | External client filter | &#x60;eq&#x60; |  | &#x60;true or false&#x60; | | &#x60;isEnabled&#x60; | Enabled/disabled clients filter | &#x60;eq&#x60; |  | &#x60;true or false&#x60; |  &lt;/details&gt;  ---  ### Sorting: Sort string syntax: &#x60;FIELD_NAME:ORDER&#x60;   &#x60;ORDER&#x60; can be &#x60;asc&#x60; or &#x60;desc&#x60;.   Multiple sort criteria are possible.   Fields are connected via logical conjunction **AND**.  &lt;details style&#x3D;\&quot;padding-left: 10px\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/summary&gt;  &#x60;clientName:desc|isStandard:asc&#x60;   Sort by &#x60;clientName&#x60; descending **AND** &#x60;isStandard&#x60; ascending.  &lt;/details&gt;  ### Sorting options: &lt;details style&#x3D;\&quot;padding: 10px; background-color: #F6F7F8; border: 1px solid #AAA; border-radius: 5px;\&quot;&gt; &lt;summary style&#x3D;\&quot;cursor: pointer; outline: none\&quot;&gt;&lt;strong&gt;Expand&lt;/strong&gt;&lt;/summary&gt;  | &#x60;FIELD_NAME&#x60; | Description | | :--- | :--- | | &#x60;clientName&#x60; | Client name | | &#x60;isStandard&#x60; | Is a standard client | | &#x60;isExternal&#x60; | Is a external client | | &#x60;isEnabled&#x60; | Is a enabled client |  &lt;/details&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOAuthClientsTest() throws ApiException {
        String filter = null;
        String sort = null;
        String xSdsAuthToken = null;
        List<OAuthClient> response = api.requestOAuthClients(filter, sort, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request OpenID Connect IDP configuration
     *
     * ### Description:   Retrieve an OpenID Connect IDP configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOpenIdIdpConfigTest() throws ApiException {
        Integer idpId = null;
        String xSdsAuthToken = null;
        OpenIdIdpConfig response = api.requestOpenIdIdpConfig(idpId, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request list of OpenID Connect IDP configurations
     *
     * ### Description:   Retrieve a list of configured OpenID Connect IDPs.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: List of OpenID Connect IDP configurations is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestOpenIdIdpConfigsTest() throws ApiException {
        String xSdsAuthToken = null;
        List<OpenIdIdpConfig> response = api.requestOpenIdIdpConfigs(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Request RADIUS configuration
     *
     * ### Description:   Retrieve a RADIUS configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: RADIUS configuration is returned.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        RadiusConfig response = api.requestRadiusConfig(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Test Active Directory configuration
     *
     * ### Description:   Test Active Directory configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: Active Directory configuration is returned if successful.  ### Further Information: DRACOON tries to establish a connection with the provided information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testAdConfigTest() throws ApiException {
        TestActiveDirectoryConfigRequest testActiveDirectoryConfigRequest = null;
        String xSdsAuthToken = null;
        TestActiveDirectoryConfigResponse response = api.testAdConfig(testActiveDirectoryConfigRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Test RADIUS server availability
     *
     * ### Description:   Test RADIUS configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; read global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: RADIUS configuration is returned if successful.  ### Further Information: DRACOON tries to establish a connection with the provided information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testRadiusConfigTest() throws ApiException {
        String xSdsAuthToken = null;
        api.testRadiusConfig(xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update Active Directory configuration
     *
     * ### Description:   Update an existing Active Directory configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; of the Provider Customer required.  ### Postcondition: Active Directory configuration updated.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAdConfigTest() throws ApiException {
        Integer adId = null;
        UpdateActiveDirectoryConfigRequest updateActiveDirectoryConfigRequest = null;
        String xSdsAuthToken = null;
        ActiveDirectoryConfig response = api.updateAdConfig(adId, updateActiveDirectoryConfigRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update OAuth client
     *
     * ### Description:   Update an existing OAuth client.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OAuth client updated.  ### Further Information:   Client secret **MUST** have:   * at least 12 characters, at most 32 characters   * only lower case characters, upper case characters and digits   * at least 1 lower case character, 1 upper case character and 1 digit    The client secret is optional and will be generated if it is left empty.    Valid grant types are:   * &#x60;authorization_code&#x60;   * &#x60;implicit&#x60;   * &#x60;password&#x60;   * &#x60;client_credentials&#x60;   * &#x60;refresh_token&#x60;    Grant type &#x60;client_credentials&#x60; is currently **NOT** permitted!  If grant types &#x60;authorization_code&#x60; or &#x60;implicit&#x60; are used, a redirect URI **MUST** be provided! 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOAuthClientTest() throws ApiException {
        String clientId = null;
        UpdateOAuthClientRequest updateOAuthClientRequest = null;
        String xSdsAuthToken = null;
        OAuthClient response = api.updateOAuthClient(clientId, updateOAuthClientRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update OpenID Connect IDP configuration
     *
     * ### Description:   Update an existing OpenID Connect IDP configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: OpenID Connect IDP configuration is updated.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateOpenIdIdpConfigTest() throws ApiException {
        Integer idpId = null;
        UpdateOpenIdIdpConfigRequest updateOpenIdIdpConfigRequest = null;
        String xSdsAuthToken = null;
        OpenIdIdpConfig response = api.updateOpenIdIdpConfig(idpId, updateOpenIdIdpConfigRequest, xSdsAuthToken);
        // TODO: test validations
    }

    /**
     * Update RADIUS configuration
     *
     * ### Description:   Update existing RADIUS configuration.  ### Precondition: Right &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128275; change global config&lt;/span&gt; and role &lt;span style&#x3D;&#39;padding: 3px; background-color: #F6F7F8; border: 1px solid #000; border-radius: 5px; display: inline;&#39;&gt;&amp;#128100; Config Manager&lt;/span&gt; of the Provider Customer required.  ### Postcondition: RADIUS configuration is updated.  ### Further Information: None.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRadiusConfigTest() throws ApiException {
        RadiusConfigUpdateRequest radiusConfigUpdateRequest = null;
        String xSdsAuthToken = null;
        RadiusConfig response = api.updateRadiusConfig(radiusConfigUpdateRequest, xSdsAuthToken);
        // TODO: test validations
    }

}
