/*
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UpdateOpenIdIdpConfigRequest
 */
public class UpdateOpenIdIdpConfigRequestTest {
    private final UpdateOpenIdIdpConfigRequest model = new UpdateOpenIdIdpConfigRequest();

    /**
     * Model tests for UpdateOpenIdIdpConfigRequest
     */
    @Test
    public void testUpdateOpenIdIdpConfigRequest() {
        // TODO: test UpdateOpenIdIdpConfigRequest
    }

    /**
     * Test the property 'authorizationEndPointUrl'
     */
    @Test
    public void authorizationEndPointUrlTest() {
        // TODO: test authorizationEndPointUrl
    }

    /**
     * Test the property 'clientId'
     */
    @Test
    public void clientIdTest() {
        // TODO: test clientId
    }

    /**
     * Test the property 'clientSecret'
     */
    @Test
    public void clientSecretTest() {
        // TODO: test clientSecret
    }

    /**
     * Test the property 'fallbackMappingClaim'
     */
    @Test
    public void fallbackMappingClaimTest() {
        // TODO: test fallbackMappingClaim
    }

    /**
     * Test the property 'flow'
     */
    @Test
    public void flowTest() {
        // TODO: test flow
    }

    /**
     * Test the property 'issuer'
     */
    @Test
    public void issuerTest() {
        // TODO: test issuer
    }

    /**
     * Test the property 'jwksEndPointUrl'
     */
    @Test
    public void jwksEndPointUrlTest() {
        // TODO: test jwksEndPointUrl
    }

    /**
     * Test the property 'mappingClaim'
     */
    @Test
    public void mappingClaimTest() {
        // TODO: test mappingClaim
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'pkceChallengeMethod'
     */
    @Test
    public void pkceChallengeMethodTest() {
        // TODO: test pkceChallengeMethod
    }

    /**
     * Test the property 'pkceEnabled'
     */
    @Test
    public void pkceEnabledTest() {
        // TODO: test pkceEnabled
    }

    /**
     * Test the property 'redirectUris'
     */
    @Test
    public void redirectUrisTest() {
        // TODO: test redirectUris
    }

    /**
     * Test the property 'resetFallbackMappingClaim'
     */
    @Test
    public void resetFallbackMappingClaimTest() {
        // TODO: test resetFallbackMappingClaim
    }

    /**
     * Test the property 'scopes'
     */
    @Test
    public void scopesTest() {
        // TODO: test scopes
    }

    /**
     * Test the property 'tokenEndPointUrl'
     */
    @Test
    public void tokenEndPointUrlTest() {
        // TODO: test tokenEndPointUrl
    }

    /**
     * Test the property 'userImportEnabled'
     */
    @Test
    public void userImportEnabledTest() {
        // TODO: test userImportEnabled
    }

    /**
     * Test the property 'userImportGroup'
     */
    @Test
    public void userImportGroupTest() {
        // TODO: test userImportGroup
    }

    /**
     * Test the property 'userInfoEndPointUrl'
     */
    @Test
    public void userInfoEndPointUrlTest() {
        // TODO: test userInfoEndPointUrl
    }

    /**
     * Test the property 'userInfoSource'
     */
    @Test
    public void userInfoSourceTest() {
        // TODO: test userInfoSource
    }

    /**
     * Test the property 'userManagementUrl'
     */
    @Test
    public void userManagementUrlTest() {
        // TODO: test userManagementUrl
    }

    /**
     * Test the property 'userUpdateEnabled'
     */
    @Test
    public void userUpdateEnabledTest() {
        // TODO: test userUpdateEnabled
    }

}
