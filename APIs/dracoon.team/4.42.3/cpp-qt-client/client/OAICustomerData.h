/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICustomerData.h
 *
 * Customer information
 */

#ifndef OAICustomerData_H
#define OAICustomerData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICustomerData : public OAIObject {
public:
    OAICustomerData();
    OAICustomerData(QString json);
    ~OAICustomerData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountsLimit() const;
    void setAccountsLimit(const qint32 &accounts_limit);
    bool is_accounts_limit_Set() const;
    bool is_accounts_limit_Valid() const;

    qint32 getAccountsUsed() const;
    void setAccountsUsed(const qint32 &accounts_used);
    bool is_accounts_used_Set() const;
    bool is_accounts_used_Valid() const;

    qint32 getCntGuestUser() const;
    void setCntGuestUser(const qint32 &cnt_guest_user);
    bool is_cnt_guest_user_Set() const;
    bool is_cnt_guest_user_Valid() const;

    qint32 getCntInternalUser() const;
    void setCntInternalUser(const qint32 &cnt_internal_user);
    bool is_cnt_internal_user_Set() const;
    bool is_cnt_internal_user_Valid() const;

    bool isCustomerEncryptionEnabled() const;
    void setCustomerEncryptionEnabled(const bool &customer_encryption_enabled);
    bool is_customer_encryption_enabled_Set() const;
    bool is_customer_encryption_enabled_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsProviderCustomer() const;
    void setIsProviderCustomer(const bool &is_provider_customer);
    bool is_is_provider_customer_Set() const;
    bool is_is_provider_customer_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getSpaceLimit() const;
    void setSpaceLimit(const qint64 &space_limit);
    bool is_space_limit_Set() const;
    bool is_space_limit_Valid() const;

    qint64 getSpaceUsed() const;
    void setSpaceUsed(const qint64 &space_used);
    bool is_space_used_Set() const;
    bool is_space_used_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_accounts_limit;
    bool m_accounts_limit_isSet;
    bool m_accounts_limit_isValid;

    qint32 m_accounts_used;
    bool m_accounts_used_isSet;
    bool m_accounts_used_isValid;

    qint32 m_cnt_guest_user;
    bool m_cnt_guest_user_isSet;
    bool m_cnt_guest_user_isValid;

    qint32 m_cnt_internal_user;
    bool m_cnt_internal_user_isSet;
    bool m_cnt_internal_user_isValid;

    bool m_customer_encryption_enabled;
    bool m_customer_encryption_enabled_isSet;
    bool m_customer_encryption_enabled_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_provider_customer;
    bool m_is_provider_customer_isSet;
    bool m_is_provider_customer_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_space_limit;
    bool m_space_limit_isSet;
    bool m_space_limit_isValid;

    qint64 m_space_used;
    bool m_space_used_isSet;
    bool m_space_used_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICustomerData)

#endif // OAICustomerData_H
