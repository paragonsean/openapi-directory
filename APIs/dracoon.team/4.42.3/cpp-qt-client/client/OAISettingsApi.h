/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsApi_H
#define OAI_OAISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateKeyPairRequest.h"
#include "OAICreateWebhookRequest.h"
#include "OAICustomerSettingsRequest.h"
#include "OAICustomerSettingsResponse.h"
#include "OAIErrorResponse.h"
#include "OAIEventTypeList.h"
#include "OAINotificationChannelActivationRequest.h"
#include "OAINotificationChannelList.h"
#include "OAIUpdateWebhookRequest.h"
#include "OAIUserKeyPairContainer.h"
#include "OAIWebhook.h"
#include "OAIWebhookList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsApi : public QObject {
    Q_OBJECT

public:
    OAISettingsApi(const int timeOut = 0);
    ~OAISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_key_pair_request OAICreateKeyPairRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createAndPreserveKeyPair(const OAICreateKeyPairRequest &oai_create_key_pair_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_webhook_request OAICreateWebhookRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createWebhook(const OAICreateWebhookRequest &oai_create_webhook_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeSystemRescueKeyPair(const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeWebhook(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAllSystemRescueKeyPairs(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestListOfEventTypesForConfigManager(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestListOfWebhooks(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNotificationChannels(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestSettings(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestSystemRescueKeyPair(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestWebhook(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void resetWebhookLifetime(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_customer_settings_request OAICustomerSettingsRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setSettings(const OAICustomerSettingsRequest &oai_customer_settings_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_user_key_pair_container OAIUserKeyPairContainer [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setSystemRescueKeyPair(const OAIUserKeyPairContainer &oai_user_key_pair_container, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_notification_channel_activation_request OAINotificationChannelActivationRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void toggleNotificationChannels(const OAINotificationChannelActivationRequest &oai_notification_channel_activation_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  oai_update_webhook_request OAIUpdateWebhookRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateWebhook(const qint64 &webhook_id, const OAIUpdateWebhookRequest &oai_update_webhook_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAndPreserveKeyPairCallback(OAIHttpRequestWorker *worker);
    void createWebhookCallback(OAIHttpRequestWorker *worker);
    void removeSystemRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void removeWebhookCallback(OAIHttpRequestWorker *worker);
    void requestAllSystemRescueKeyPairsCallback(OAIHttpRequestWorker *worker);
    void requestListOfEventTypesForConfigManagerCallback(OAIHttpRequestWorker *worker);
    void requestListOfWebhooksCallback(OAIHttpRequestWorker *worker);
    void requestNotificationChannelsCallback(OAIHttpRequestWorker *worker);
    void requestSettingsCallback(OAIHttpRequestWorker *worker);
    void requestSystemRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestWebhookCallback(OAIHttpRequestWorker *worker);
    void resetWebhookLifetimeCallback(OAIHttpRequestWorker *worker);
    void setSettingsCallback(OAIHttpRequestWorker *worker);
    void setSystemRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void toggleNotificationChannelsCallback(OAIHttpRequestWorker *worker);
    void updateWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAndPreserveKeyPairSignal();
    void createWebhookSignal(OAIWebhook summary);
    void removeSystemRescueKeyPairSignal();
    void removeWebhookSignal();
    void requestAllSystemRescueKeyPairsSignal(QList<OAIUserKeyPairContainer> summary);
    void requestListOfEventTypesForConfigManagerSignal(OAIEventTypeList summary);
    void requestListOfWebhooksSignal(OAIWebhookList summary);
    void requestNotificationChannelsSignal(OAINotificationChannelList summary);
    void requestSettingsSignal(OAICustomerSettingsResponse summary);
    void requestSystemRescueKeyPairSignal(OAIUserKeyPairContainer summary);
    void requestWebhookSignal(OAIWebhook summary);
    void resetWebhookLifetimeSignal(OAIWebhook summary);
    void setSettingsSignal(OAICustomerSettingsResponse summary);
    void setSystemRescueKeyPairSignal();
    void toggleNotificationChannelsSignal(OAINotificationChannelList summary);
    void updateWebhookSignal(OAIWebhook summary);


    void createAndPreserveKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void createWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void removeSystemRescueKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void removeWebhookSignalFull(OAIHttpRequestWorker *worker);
    void requestAllSystemRescueKeyPairsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserKeyPairContainer> summary);
    void requestListOfEventTypesForConfigManagerSignalFull(OAIHttpRequestWorker *worker, OAIEventTypeList summary);
    void requestListOfWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhookList summary);
    void requestNotificationChannelsSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannelList summary);
    void requestSettingsSignalFull(OAIHttpRequestWorker *worker, OAICustomerSettingsResponse summary);
    void requestSystemRescueKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIUserKeyPairContainer summary);
    void requestWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void resetWebhookLifetimeSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void setSettingsSignalFull(OAIHttpRequestWorker *worker, OAICustomerSettingsResponse summary);
    void setSystemRescueKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void toggleNotificationChannelsSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannelList summary);
    void updateWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);

    Q_DECL_DEPRECATED_X("Use createAndPreserveKeyPairSignalError() instead")
    void createAndPreserveKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebhookSignalError() instead")
    void createWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSystemRescueKeyPairSignalError() instead")
    void removeSystemRescueKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeSystemRescueKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebhookSignalError() instead")
    void removeWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAllSystemRescueKeyPairsSignalError() instead")
    void requestAllSystemRescueKeyPairsSignalE(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAllSystemRescueKeyPairsSignalError(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfEventTypesForConfigManagerSignalError() instead")
    void requestListOfEventTypesForConfigManagerSignalE(OAIEventTypeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfEventTypesForConfigManagerSignalError(OAIEventTypeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfWebhooksSignalError() instead")
    void requestListOfWebhooksSignalE(OAIWebhookList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfWebhooksSignalError(OAIWebhookList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNotificationChannelsSignalError() instead")
    void requestNotificationChannelsSignalE(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNotificationChannelsSignalError(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSettingsSignalError() instead")
    void requestSettingsSignalE(OAICustomerSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSettingsSignalError(OAICustomerSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemRescueKeyPairSignalError() instead")
    void requestSystemRescueKeyPairSignalE(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemRescueKeyPairSignalError(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestWebhookSignalError() instead")
    void requestWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetWebhookLifetimeSignalError() instead")
    void resetWebhookLifetimeSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetWebhookLifetimeSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSettingsSignalError() instead")
    void setSettingsSignalE(OAICustomerSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setSettingsSignalError(OAICustomerSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSystemRescueKeyPairSignalError() instead")
    void setSystemRescueKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setSystemRescueKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleNotificationChannelsSignalError() instead")
    void toggleNotificationChannelsSignalE(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleNotificationChannelsSignalError(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalError() instead")
    void updateWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAndPreserveKeyPairSignalErrorFull() instead")
    void createAndPreserveKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createWebhookSignalErrorFull() instead")
    void createWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeSystemRescueKeyPairSignalErrorFull() instead")
    void removeSystemRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeSystemRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebhookSignalErrorFull() instead")
    void removeWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAllSystemRescueKeyPairsSignalErrorFull() instead")
    void requestAllSystemRescueKeyPairsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAllSystemRescueKeyPairsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfEventTypesForConfigManagerSignalErrorFull() instead")
    void requestListOfEventTypesForConfigManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfEventTypesForConfigManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfWebhooksSignalErrorFull() instead")
    void requestListOfWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNotificationChannelsSignalErrorFull() instead")
    void requestNotificationChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNotificationChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSettingsSignalErrorFull() instead")
    void requestSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemRescueKeyPairSignalErrorFull() instead")
    void requestSystemRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestWebhookSignalErrorFull() instead")
    void requestWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetWebhookLifetimeSignalErrorFull() instead")
    void resetWebhookLifetimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetWebhookLifetimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSettingsSignalErrorFull() instead")
    void setSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSystemRescueKeyPairSignalErrorFull() instead")
    void setSystemRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSystemRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use toggleNotificationChannelsSignalErrorFull() instead")
    void toggleNotificationChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void toggleNotificationChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebhookSignalErrorFull() instead")
    void updateWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
