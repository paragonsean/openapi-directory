/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGroupsApi_H
#define OAI_OAIGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangeGroupMembersRequest.h"
#include "OAICreateGroupRequest.h"
#include "OAIErrorResponse.h"
#include "OAIGroup.h"
#include "OAIGroupList.h"
#include "OAIGroupUserList.h"
#include "OAILastAdminGroupRoomList.h"
#include "OAIRoleList.h"
#include "OAIRoomTreeDataList.h"
#include "OAIUpdateGroupRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIGroupsApi(const int timeOut = 0);
    ~OAIGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  oai_change_group_members_request OAIChangeGroupMembersRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void addGroupMembers(const qint64 &group_id, const OAIChangeGroupMembersRequest &oai_change_group_members_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_group_request OAICreateGroupRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createGroup(const OAICreateGroupRequest &oai_create_group_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeGroup(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  oai_change_group_members_request OAIChangeGroupMembersRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeGroupMembers(const qint64 &group_id, const OAIChangeGroupMembersRequest &oai_change_group_members_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGroup(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGroupMembers(const qint64 &group_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGroupRoles(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestGroupRooms(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGroups(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestLastAdminRoomsGroups(const qint64 &group_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id qint64 [required]
    * @param[in]  oai_update_group_request OAIUpdateGroupRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateGroup(const qint64 &group_id, const OAIUpdateGroupRequest &oai_update_group_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addGroupMembersCallback(OAIHttpRequestWorker *worker);
    void createGroupCallback(OAIHttpRequestWorker *worker);
    void removeGroupCallback(OAIHttpRequestWorker *worker);
    void removeGroupMembersCallback(OAIHttpRequestWorker *worker);
    void requestGroupCallback(OAIHttpRequestWorker *worker);
    void requestGroupMembersCallback(OAIHttpRequestWorker *worker);
    void requestGroupRolesCallback(OAIHttpRequestWorker *worker);
    void requestGroupRoomsCallback(OAIHttpRequestWorker *worker);
    void requestGroupsCallback(OAIHttpRequestWorker *worker);
    void requestLastAdminRoomsGroupsCallback(OAIHttpRequestWorker *worker);
    void updateGroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addGroupMembersSignal(OAIGroup summary);
    void createGroupSignal(OAIGroup summary);
    void removeGroupSignal();
    void removeGroupMembersSignal(OAIGroup summary);
    void requestGroupSignal(OAIGroup summary);
    void requestGroupMembersSignal(OAIGroupUserList summary);
    void requestGroupRolesSignal(OAIRoleList summary);
    void requestGroupRoomsSignal(OAIRoomTreeDataList summary);
    void requestGroupsSignal(OAIGroupList summary);
    void requestLastAdminRoomsGroupsSignal(OAILastAdminGroupRoomList summary);
    void updateGroupSignal(OAIGroup summary);


    void addGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void createGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void removeGroupSignalFull(OAIHttpRequestWorker *worker);
    void removeGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void requestGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);
    void requestGroupMembersSignalFull(OAIHttpRequestWorker *worker, OAIGroupUserList summary);
    void requestGroupRolesSignalFull(OAIHttpRequestWorker *worker, OAIRoleList summary);
    void requestGroupRoomsSignalFull(OAIHttpRequestWorker *worker, OAIRoomTreeDataList summary);
    void requestGroupsSignalFull(OAIHttpRequestWorker *worker, OAIGroupList summary);
    void requestLastAdminRoomsGroupsSignalFull(OAIHttpRequestWorker *worker, OAILastAdminGroupRoomList summary);
    void updateGroupSignalFull(OAIHttpRequestWorker *worker, OAIGroup summary);

    Q_DECL_DEPRECATED_X("Use addGroupMembersSignalError() instead")
    void addGroupMembersSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupMembersSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalError() instead")
    void createGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalError() instead")
    void removeGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupMembersSignalError() instead")
    void removeGroupMembersSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupMembersSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupSignalError() instead")
    void requestGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupMembersSignalError() instead")
    void requestGroupMembersSignalE(OAIGroupUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupMembersSignalError(OAIGroupUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupRolesSignalError() instead")
    void requestGroupRolesSignalE(OAIRoleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupRolesSignalError(OAIRoleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupRoomsSignalError() instead")
    void requestGroupRoomsSignalE(OAIRoomTreeDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupRoomsSignalError(OAIRoomTreeDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupsSignalError() instead")
    void requestGroupsSignalE(OAIGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupsSignalError(OAIGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestLastAdminRoomsGroupsSignalError() instead")
    void requestLastAdminRoomsGroupsSignalE(OAILastAdminGroupRoomList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestLastAdminRoomsGroupsSignalError(OAILastAdminGroupRoomList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalError() instead")
    void updateGroupSignalE(OAIGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalError(OAIGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addGroupMembersSignalErrorFull() instead")
    void addGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupSignalErrorFull() instead")
    void createGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupSignalErrorFull() instead")
    void removeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupMembersSignalErrorFull() instead")
    void removeGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupSignalErrorFull() instead")
    void requestGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupMembersSignalErrorFull() instead")
    void requestGroupMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupRolesSignalErrorFull() instead")
    void requestGroupRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupRoomsSignalErrorFull() instead")
    void requestGroupRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGroupsSignalErrorFull() instead")
    void requestGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestLastAdminRoomsGroupsSignalErrorFull() instead")
    void requestLastAdminRoomsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestLastAdminRoomsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGroupSignalErrorFull() instead")
    void updateGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
