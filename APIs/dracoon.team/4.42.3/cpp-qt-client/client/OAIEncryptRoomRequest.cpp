/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEncryptRoomRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEncryptRoomRequest::OAIEncryptRoomRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEncryptRoomRequest::OAIEncryptRoomRequest() {
    this->initializeModel();
}

OAIEncryptRoomRequest::~OAIEncryptRoomRequest() {}

void OAIEncryptRoomRequest::initializeModel() {

    m_data_room_rescue_key_isSet = false;
    m_data_room_rescue_key_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_use_data_space_rescue_key_isSet = false;
    m_use_data_space_rescue_key_isValid = false;
}

void OAIEncryptRoomRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEncryptRoomRequest::fromJsonObject(QJsonObject json) {

    m_data_room_rescue_key_isValid = ::OpenAPI::fromJsonValue(m_data_room_rescue_key, json[QString("dataRoomRescueKey")]);
    m_data_room_rescue_key_isSet = !json[QString("dataRoomRescueKey")].isNull() && m_data_room_rescue_key_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_use_data_space_rescue_key_isValid = ::OpenAPI::fromJsonValue(m_use_data_space_rescue_key, json[QString("useDataSpaceRescueKey")]);
    m_use_data_space_rescue_key_isSet = !json[QString("useDataSpaceRescueKey")].isNull() && m_use_data_space_rescue_key_isValid;
}

QString OAIEncryptRoomRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEncryptRoomRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data_room_rescue_key.isSet()) {
        obj.insert(QString("dataRoomRescueKey"), ::OpenAPI::toJsonValue(m_data_room_rescue_key));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_use_data_space_rescue_key_isSet) {
        obj.insert(QString("useDataSpaceRescueKey"), ::OpenAPI::toJsonValue(m_use_data_space_rescue_key));
    }
    return obj;
}

OAIUserKeyPairContainer OAIEncryptRoomRequest::getDataRoomRescueKey() const {
    return m_data_room_rescue_key;
}
void OAIEncryptRoomRequest::setDataRoomRescueKey(const OAIUserKeyPairContainer &data_room_rescue_key) {
    m_data_room_rescue_key = data_room_rescue_key;
    m_data_room_rescue_key_isSet = true;
}

bool OAIEncryptRoomRequest::is_data_room_rescue_key_Set() const{
    return m_data_room_rescue_key_isSet;
}

bool OAIEncryptRoomRequest::is_data_room_rescue_key_Valid() const{
    return m_data_room_rescue_key_isValid;
}

bool OAIEncryptRoomRequest::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIEncryptRoomRequest::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIEncryptRoomRequest::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIEncryptRoomRequest::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAIEncryptRoomRequest::isUseDataSpaceRescueKey() const {
    return m_use_data_space_rescue_key;
}
void OAIEncryptRoomRequest::setUseDataSpaceRescueKey(const bool &use_data_space_rescue_key) {
    m_use_data_space_rescue_key = use_data_space_rescue_key;
    m_use_data_space_rescue_key_isSet = true;
}

bool OAIEncryptRoomRequest::is_use_data_space_rescue_key_Set() const{
    return m_use_data_space_rescue_key_isSet;
}

bool OAIEncryptRoomRequest::is_use_data_space_rescue_key_Valid() const{
    return m_use_data_space_rescue_key_isValid;
}

bool OAIEncryptRoomRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_room_rescue_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_data_space_rescue_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEncryptRoomRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_encrypted_isValid && true;
}

} // namespace OpenAPI
