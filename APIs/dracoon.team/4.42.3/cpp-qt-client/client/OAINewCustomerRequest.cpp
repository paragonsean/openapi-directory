/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewCustomerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewCustomerRequest::OAINewCustomerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewCustomerRequest::OAINewCustomerRequest() {
    this->initializeModel();
}

OAINewCustomerRequest::~OAINewCustomerRequest() {}

void OAINewCustomerRequest::initializeModel() {

    m_activation_code_isSet = false;
    m_activation_code_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_customer_attributes_isSet = false;
    m_customer_attributes_isValid = false;

    m_customer_contract_type_isSet = false;
    m_customer_contract_type_isValid = false;

    m_first_admin_user_isSet = false;
    m_first_admin_user_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_provider_customer_id_isSet = false;
    m_provider_customer_id_isValid = false;

    m_quota_max_isSet = false;
    m_quota_max_isValid = false;

    m_trial_days_isSet = false;
    m_trial_days_isValid = false;

    m_user_max_isSet = false;
    m_user_max_isValid = false;

    m_webhooks_max_isSet = false;
    m_webhooks_max_isValid = false;
}

void OAINewCustomerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewCustomerRequest::fromJsonObject(QJsonObject json) {

    m_activation_code_isValid = ::OpenAPI::fromJsonValue(m_activation_code, json[QString("activationCode")]);
    m_activation_code_isSet = !json[QString("activationCode")].isNull() && m_activation_code_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_customer_attributes_isValid = ::OpenAPI::fromJsonValue(m_customer_attributes, json[QString("customerAttributes")]);
    m_customer_attributes_isSet = !json[QString("customerAttributes")].isNull() && m_customer_attributes_isValid;

    m_customer_contract_type_isValid = ::OpenAPI::fromJsonValue(m_customer_contract_type, json[QString("customerContractType")]);
    m_customer_contract_type_isSet = !json[QString("customerContractType")].isNull() && m_customer_contract_type_isValid;

    m_first_admin_user_isValid = ::OpenAPI::fromJsonValue(m_first_admin_user, json[QString("firstAdminUser")]);
    m_first_admin_user_isSet = !json[QString("firstAdminUser")].isNull() && m_first_admin_user_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_provider_customer_id_isValid = ::OpenAPI::fromJsonValue(m_provider_customer_id, json[QString("providerCustomerId")]);
    m_provider_customer_id_isSet = !json[QString("providerCustomerId")].isNull() && m_provider_customer_id_isValid;

    m_quota_max_isValid = ::OpenAPI::fromJsonValue(m_quota_max, json[QString("quotaMax")]);
    m_quota_max_isSet = !json[QString("quotaMax")].isNull() && m_quota_max_isValid;

    m_trial_days_isValid = ::OpenAPI::fromJsonValue(m_trial_days, json[QString("trialDays")]);
    m_trial_days_isSet = !json[QString("trialDays")].isNull() && m_trial_days_isValid;

    m_user_max_isValid = ::OpenAPI::fromJsonValue(m_user_max, json[QString("userMax")]);
    m_user_max_isSet = !json[QString("userMax")].isNull() && m_user_max_isValid;

    m_webhooks_max_isValid = ::OpenAPI::fromJsonValue(m_webhooks_max, json[QString("webhooksMax")]);
    m_webhooks_max_isSet = !json[QString("webhooksMax")].isNull() && m_webhooks_max_isValid;
}

QString OAINewCustomerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewCustomerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_code_isSet) {
        obj.insert(QString("activationCode"), ::OpenAPI::toJsonValue(m_activation_code));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_customer_attributes.isSet()) {
        obj.insert(QString("customerAttributes"), ::OpenAPI::toJsonValue(m_customer_attributes));
    }
    if (m_customer_contract_type_isSet) {
        obj.insert(QString("customerContractType"), ::OpenAPI::toJsonValue(m_customer_contract_type));
    }
    if (m_first_admin_user.isSet()) {
        obj.insert(QString("firstAdminUser"), ::OpenAPI::toJsonValue(m_first_admin_user));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_provider_customer_id_isSet) {
        obj.insert(QString("providerCustomerId"), ::OpenAPI::toJsonValue(m_provider_customer_id));
    }
    if (m_quota_max_isSet) {
        obj.insert(QString("quotaMax"), ::OpenAPI::toJsonValue(m_quota_max));
    }
    if (m_trial_days_isSet) {
        obj.insert(QString("trialDays"), ::OpenAPI::toJsonValue(m_trial_days));
    }
    if (m_user_max_isSet) {
        obj.insert(QString("userMax"), ::OpenAPI::toJsonValue(m_user_max));
    }
    if (m_webhooks_max_isSet) {
        obj.insert(QString("webhooksMax"), ::OpenAPI::toJsonValue(m_webhooks_max));
    }
    return obj;
}

QString OAINewCustomerRequest::getActivationCode() const {
    return m_activation_code;
}
void OAINewCustomerRequest::setActivationCode(const QString &activation_code) {
    m_activation_code = activation_code;
    m_activation_code_isSet = true;
}

bool OAINewCustomerRequest::is_activation_code_Set() const{
    return m_activation_code_isSet;
}

bool OAINewCustomerRequest::is_activation_code_Valid() const{
    return m_activation_code_isValid;
}

QString OAINewCustomerRequest::getCompanyName() const {
    return m_company_name;
}
void OAINewCustomerRequest::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAINewCustomerRequest::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAINewCustomerRequest::is_company_name_Valid() const{
    return m_company_name_isValid;
}

OAICustomerAttributes OAINewCustomerRequest::getCustomerAttributes() const {
    return m_customer_attributes;
}
void OAINewCustomerRequest::setCustomerAttributes(const OAICustomerAttributes &customer_attributes) {
    m_customer_attributes = customer_attributes;
    m_customer_attributes_isSet = true;
}

bool OAINewCustomerRequest::is_customer_attributes_Set() const{
    return m_customer_attributes_isSet;
}

bool OAINewCustomerRequest::is_customer_attributes_Valid() const{
    return m_customer_attributes_isValid;
}

QString OAINewCustomerRequest::getCustomerContractType() const {
    return m_customer_contract_type;
}
void OAINewCustomerRequest::setCustomerContractType(const QString &customer_contract_type) {
    m_customer_contract_type = customer_contract_type;
    m_customer_contract_type_isSet = true;
}

bool OAINewCustomerRequest::is_customer_contract_type_Set() const{
    return m_customer_contract_type_isSet;
}

bool OAINewCustomerRequest::is_customer_contract_type_Valid() const{
    return m_customer_contract_type_isValid;
}

OAIFirstAdminUser OAINewCustomerRequest::getFirstAdminUser() const {
    return m_first_admin_user;
}
void OAINewCustomerRequest::setFirstAdminUser(const OAIFirstAdminUser &first_admin_user) {
    m_first_admin_user = first_admin_user;
    m_first_admin_user_isSet = true;
}

bool OAINewCustomerRequest::is_first_admin_user_Set() const{
    return m_first_admin_user_isSet;
}

bool OAINewCustomerRequest::is_first_admin_user_Valid() const{
    return m_first_admin_user_isValid;
}

bool OAINewCustomerRequest::isIsLocked() const {
    return m_is_locked;
}
void OAINewCustomerRequest::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAINewCustomerRequest::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAINewCustomerRequest::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

bool OAINewCustomerRequest::isLockStatus() const {
    return m_lock_status;
}
void OAINewCustomerRequest::setLockStatus(const bool &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAINewCustomerRequest::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAINewCustomerRequest::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

QString OAINewCustomerRequest::getProviderCustomerId() const {
    return m_provider_customer_id;
}
void OAINewCustomerRequest::setProviderCustomerId(const QString &provider_customer_id) {
    m_provider_customer_id = provider_customer_id;
    m_provider_customer_id_isSet = true;
}

bool OAINewCustomerRequest::is_provider_customer_id_Set() const{
    return m_provider_customer_id_isSet;
}

bool OAINewCustomerRequest::is_provider_customer_id_Valid() const{
    return m_provider_customer_id_isValid;
}

qint64 OAINewCustomerRequest::getQuotaMax() const {
    return m_quota_max;
}
void OAINewCustomerRequest::setQuotaMax(const qint64 &quota_max) {
    m_quota_max = quota_max;
    m_quota_max_isSet = true;
}

bool OAINewCustomerRequest::is_quota_max_Set() const{
    return m_quota_max_isSet;
}

bool OAINewCustomerRequest::is_quota_max_Valid() const{
    return m_quota_max_isValid;
}

qint32 OAINewCustomerRequest::getTrialDays() const {
    return m_trial_days;
}
void OAINewCustomerRequest::setTrialDays(const qint32 &trial_days) {
    m_trial_days = trial_days;
    m_trial_days_isSet = true;
}

bool OAINewCustomerRequest::is_trial_days_Set() const{
    return m_trial_days_isSet;
}

bool OAINewCustomerRequest::is_trial_days_Valid() const{
    return m_trial_days_isValid;
}

qint32 OAINewCustomerRequest::getUserMax() const {
    return m_user_max;
}
void OAINewCustomerRequest::setUserMax(const qint32 &user_max) {
    m_user_max = user_max;
    m_user_max_isSet = true;
}

bool OAINewCustomerRequest::is_user_max_Set() const{
    return m_user_max_isSet;
}

bool OAINewCustomerRequest::is_user_max_Valid() const{
    return m_user_max_isValid;
}

qint64 OAINewCustomerRequest::getWebhooksMax() const {
    return m_webhooks_max;
}
void OAINewCustomerRequest::setWebhooksMax(const qint64 &webhooks_max) {
    m_webhooks_max = webhooks_max;
    m_webhooks_max_isSet = true;
}

bool OAINewCustomerRequest::is_webhooks_max_Set() const{
    return m_webhooks_max_isSet;
}

bool OAINewCustomerRequest::is_webhooks_max_Valid() const{
    return m_webhooks_max_isValid;
}

bool OAINewCustomerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_contract_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_admin_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trial_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks_max_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewCustomerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_customer_contract_type_isValid && m_first_admin_user_isValid && m_quota_max_isValid && m_user_max_isValid && true;
}

} // namespace OpenAPI
