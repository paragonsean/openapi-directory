/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActiveDirectoryConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActiveDirectoryConfig::OAIActiveDirectoryConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActiveDirectoryConfig::OAIActiveDirectoryConfig() {
    this->initializeModel();
}

OAIActiveDirectoryConfig::~OAIActiveDirectoryConfig() {}

void OAIActiveDirectoryConfig::initializeModel() {

    m_ad_export_group_isSet = false;
    m_ad_export_group_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_create_home_folder_isSet = false;
    m_create_home_folder_isValid = false;

    m_home_folder_parent_isSet = false;
    m_home_folder_parent_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ldap_users_domain_isSet = false;
    m_ldap_users_domain_isValid = false;

    m_sds_import_group_isSet = false;
    m_sds_import_group_isValid = false;

    m_server_admin_name_isSet = false;
    m_server_admin_name_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_ssl_finger_print_isSet = false;
    m_ssl_finger_print_isValid = false;

    m_use_ldaps_isSet = false;
    m_use_ldaps_isValid = false;

    m_user_filter_isSet = false;
    m_user_filter_isValid = false;

    m_user_import_isSet = false;
    m_user_import_isValid = false;
}

void OAIActiveDirectoryConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActiveDirectoryConfig::fromJsonObject(QJsonObject json) {

    m_ad_export_group_isValid = ::OpenAPI::fromJsonValue(m_ad_export_group, json[QString("adExportGroup")]);
    m_ad_export_group_isSet = !json[QString("adExportGroup")].isNull() && m_ad_export_group_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_create_home_folder_isValid = ::OpenAPI::fromJsonValue(m_create_home_folder, json[QString("createHomeFolder")]);
    m_create_home_folder_isSet = !json[QString("createHomeFolder")].isNull() && m_create_home_folder_isValid;

    m_home_folder_parent_isValid = ::OpenAPI::fromJsonValue(m_home_folder_parent, json[QString("homeFolderParent")]);
    m_home_folder_parent_isSet = !json[QString("homeFolderParent")].isNull() && m_home_folder_parent_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ldap_users_domain_isValid = ::OpenAPI::fromJsonValue(m_ldap_users_domain, json[QString("ldapUsersDomain")]);
    m_ldap_users_domain_isSet = !json[QString("ldapUsersDomain")].isNull() && m_ldap_users_domain_isValid;

    m_sds_import_group_isValid = ::OpenAPI::fromJsonValue(m_sds_import_group, json[QString("sdsImportGroup")]);
    m_sds_import_group_isSet = !json[QString("sdsImportGroup")].isNull() && m_sds_import_group_isValid;

    m_server_admin_name_isValid = ::OpenAPI::fromJsonValue(m_server_admin_name, json[QString("serverAdminName")]);
    m_server_admin_name_isSet = !json[QString("serverAdminName")].isNull() && m_server_admin_name_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("serverIp")]);
    m_server_ip_isSet = !json[QString("serverIp")].isNull() && m_server_ip_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("serverPort")]);
    m_server_port_isSet = !json[QString("serverPort")].isNull() && m_server_port_isValid;

    m_ssl_finger_print_isValid = ::OpenAPI::fromJsonValue(m_ssl_finger_print, json[QString("sslFingerPrint")]);
    m_ssl_finger_print_isSet = !json[QString("sslFingerPrint")].isNull() && m_ssl_finger_print_isValid;

    m_use_ldaps_isValid = ::OpenAPI::fromJsonValue(m_use_ldaps, json[QString("useLdaps")]);
    m_use_ldaps_isSet = !json[QString("useLdaps")].isNull() && m_use_ldaps_isValid;

    m_user_filter_isValid = ::OpenAPI::fromJsonValue(m_user_filter, json[QString("userFilter")]);
    m_user_filter_isSet = !json[QString("userFilter")].isNull() && m_user_filter_isValid;

    m_user_import_isValid = ::OpenAPI::fromJsonValue(m_user_import, json[QString("userImport")]);
    m_user_import_isSet = !json[QString("userImport")].isNull() && m_user_import_isValid;
}

QString OAIActiveDirectoryConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActiveDirectoryConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_export_group_isSet) {
        obj.insert(QString("adExportGroup"), ::OpenAPI::toJsonValue(m_ad_export_group));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_create_home_folder_isSet) {
        obj.insert(QString("createHomeFolder"), ::OpenAPI::toJsonValue(m_create_home_folder));
    }
    if (m_home_folder_parent_isSet) {
        obj.insert(QString("homeFolderParent"), ::OpenAPI::toJsonValue(m_home_folder_parent));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ldap_users_domain_isSet) {
        obj.insert(QString("ldapUsersDomain"), ::OpenAPI::toJsonValue(m_ldap_users_domain));
    }
    if (m_sds_import_group_isSet) {
        obj.insert(QString("sdsImportGroup"), ::OpenAPI::toJsonValue(m_sds_import_group));
    }
    if (m_server_admin_name_isSet) {
        obj.insert(QString("serverAdminName"), ::OpenAPI::toJsonValue(m_server_admin_name));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("serverIp"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("serverPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_ssl_finger_print_isSet) {
        obj.insert(QString("sslFingerPrint"), ::OpenAPI::toJsonValue(m_ssl_finger_print));
    }
    if (m_use_ldaps_isSet) {
        obj.insert(QString("useLdaps"), ::OpenAPI::toJsonValue(m_use_ldaps));
    }
    if (m_user_filter_isSet) {
        obj.insert(QString("userFilter"), ::OpenAPI::toJsonValue(m_user_filter));
    }
    if (m_user_import_isSet) {
        obj.insert(QString("userImport"), ::OpenAPI::toJsonValue(m_user_import));
    }
    return obj;
}

QString OAIActiveDirectoryConfig::getAdExportGroup() const {
    return m_ad_export_group;
}
void OAIActiveDirectoryConfig::setAdExportGroup(const QString &ad_export_group) {
    m_ad_export_group = ad_export_group;
    m_ad_export_group_isSet = true;
}

bool OAIActiveDirectoryConfig::is_ad_export_group_Set() const{
    return m_ad_export_group_isSet;
}

bool OAIActiveDirectoryConfig::is_ad_export_group_Valid() const{
    return m_ad_export_group_isValid;
}

QString OAIActiveDirectoryConfig::getAlias() const {
    return m_alias;
}
void OAIActiveDirectoryConfig::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIActiveDirectoryConfig::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIActiveDirectoryConfig::is_alias_Valid() const{
    return m_alias_isValid;
}

bool OAIActiveDirectoryConfig::isCreateHomeFolder() const {
    return m_create_home_folder;
}
void OAIActiveDirectoryConfig::setCreateHomeFolder(const bool &create_home_folder) {
    m_create_home_folder = create_home_folder;
    m_create_home_folder_isSet = true;
}

bool OAIActiveDirectoryConfig::is_create_home_folder_Set() const{
    return m_create_home_folder_isSet;
}

bool OAIActiveDirectoryConfig::is_create_home_folder_Valid() const{
    return m_create_home_folder_isValid;
}

qint64 OAIActiveDirectoryConfig::getHomeFolderParent() const {
    return m_home_folder_parent;
}
void OAIActiveDirectoryConfig::setHomeFolderParent(const qint64 &home_folder_parent) {
    m_home_folder_parent = home_folder_parent;
    m_home_folder_parent_isSet = true;
}

bool OAIActiveDirectoryConfig::is_home_folder_parent_Set() const{
    return m_home_folder_parent_isSet;
}

bool OAIActiveDirectoryConfig::is_home_folder_parent_Valid() const{
    return m_home_folder_parent_isValid;
}

qint32 OAIActiveDirectoryConfig::getId() const {
    return m_id;
}
void OAIActiveDirectoryConfig::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIActiveDirectoryConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIActiveDirectoryConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIActiveDirectoryConfig::getLdapUsersDomain() const {
    return m_ldap_users_domain;
}
void OAIActiveDirectoryConfig::setLdapUsersDomain(const QString &ldap_users_domain) {
    m_ldap_users_domain = ldap_users_domain;
    m_ldap_users_domain_isSet = true;
}

bool OAIActiveDirectoryConfig::is_ldap_users_domain_Set() const{
    return m_ldap_users_domain_isSet;
}

bool OAIActiveDirectoryConfig::is_ldap_users_domain_Valid() const{
    return m_ldap_users_domain_isValid;
}

qint64 OAIActiveDirectoryConfig::getSdsImportGroup() const {
    return m_sds_import_group;
}
void OAIActiveDirectoryConfig::setSdsImportGroup(const qint64 &sds_import_group) {
    m_sds_import_group = sds_import_group;
    m_sds_import_group_isSet = true;
}

bool OAIActiveDirectoryConfig::is_sds_import_group_Set() const{
    return m_sds_import_group_isSet;
}

bool OAIActiveDirectoryConfig::is_sds_import_group_Valid() const{
    return m_sds_import_group_isValid;
}

QString OAIActiveDirectoryConfig::getServerAdminName() const {
    return m_server_admin_name;
}
void OAIActiveDirectoryConfig::setServerAdminName(const QString &server_admin_name) {
    m_server_admin_name = server_admin_name;
    m_server_admin_name_isSet = true;
}

bool OAIActiveDirectoryConfig::is_server_admin_name_Set() const{
    return m_server_admin_name_isSet;
}

bool OAIActiveDirectoryConfig::is_server_admin_name_Valid() const{
    return m_server_admin_name_isValid;
}

QString OAIActiveDirectoryConfig::getServerIp() const {
    return m_server_ip;
}
void OAIActiveDirectoryConfig::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAIActiveDirectoryConfig::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAIActiveDirectoryConfig::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

qint32 OAIActiveDirectoryConfig::getServerPort() const {
    return m_server_port;
}
void OAIActiveDirectoryConfig::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAIActiveDirectoryConfig::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAIActiveDirectoryConfig::is_server_port_Valid() const{
    return m_server_port_isValid;
}

QString OAIActiveDirectoryConfig::getSslFingerPrint() const {
    return m_ssl_finger_print;
}
void OAIActiveDirectoryConfig::setSslFingerPrint(const QString &ssl_finger_print) {
    m_ssl_finger_print = ssl_finger_print;
    m_ssl_finger_print_isSet = true;
}

bool OAIActiveDirectoryConfig::is_ssl_finger_print_Set() const{
    return m_ssl_finger_print_isSet;
}

bool OAIActiveDirectoryConfig::is_ssl_finger_print_Valid() const{
    return m_ssl_finger_print_isValid;
}

bool OAIActiveDirectoryConfig::isUseLdaps() const {
    return m_use_ldaps;
}
void OAIActiveDirectoryConfig::setUseLdaps(const bool &use_ldaps) {
    m_use_ldaps = use_ldaps;
    m_use_ldaps_isSet = true;
}

bool OAIActiveDirectoryConfig::is_use_ldaps_Set() const{
    return m_use_ldaps_isSet;
}

bool OAIActiveDirectoryConfig::is_use_ldaps_Valid() const{
    return m_use_ldaps_isValid;
}

QString OAIActiveDirectoryConfig::getUserFilter() const {
    return m_user_filter;
}
void OAIActiveDirectoryConfig::setUserFilter(const QString &user_filter) {
    m_user_filter = user_filter;
    m_user_filter_isSet = true;
}

bool OAIActiveDirectoryConfig::is_user_filter_Set() const{
    return m_user_filter_isSet;
}

bool OAIActiveDirectoryConfig::is_user_filter_Valid() const{
    return m_user_filter_isValid;
}

bool OAIActiveDirectoryConfig::isUserImport() const {
    return m_user_import;
}
void OAIActiveDirectoryConfig::setUserImport(const bool &user_import) {
    m_user_import = user_import;
    m_user_import_isSet = true;
}

bool OAIActiveDirectoryConfig::is_user_import_Set() const{
    return m_user_import_isSet;
}

bool OAIActiveDirectoryConfig::is_user_import_Valid() const{
    return m_user_import_isValid;
}

bool OAIActiveDirectoryConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_export_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_home_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_folder_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ldap_users_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sds_import_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_admin_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_finger_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ldaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_import_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActiveDirectoryConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ad_export_group_isValid && m_alias_isValid && m_id_isValid && m_ldap_users_domain_isValid && m_server_admin_name_isValid && m_server_ip_isValid && m_server_port_isValid && m_use_ldaps_isValid && m_user_filter_isValid && m_user_import_isValid && true;
}

} // namespace OpenAPI
