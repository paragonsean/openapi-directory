/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditNodeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditNodeResponse::OAIAuditNodeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditNodeResponse::OAIAuditNodeResponse() {
    this->initializeModel();
}

OAIAuditNodeResponse::~OAIAuditNodeResponse() {}

void OAIAuditNodeResponse::initializeModel() {

    m_audit_user_permission_list_isSet = false;
    m_audit_user_permission_list_isValid = false;

    m_node_cnt_children_isSet = false;
    m_node_cnt_children_isValid = false;

    m_node_created_at_isSet = false;
    m_node_created_at_isValid = false;

    m_node_created_by_isSet = false;
    m_node_created_by_isValid = false;

    m_node_has_activities_log_isSet = false;
    m_node_has_activities_log_isValid = false;

    m_node_has_recycle_bin_isSet = false;
    m_node_has_recycle_bin_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_is_encrypted_isSet = false;
    m_node_is_encrypted_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_node_parent_id_isSet = false;
    m_node_parent_id_isValid = false;

    m_node_parent_path_isSet = false;
    m_node_parent_path_isValid = false;

    m_node_quota_isSet = false;
    m_node_quota_isValid = false;

    m_node_recycle_bin_retention_period_isSet = false;
    m_node_recycle_bin_retention_period_isValid = false;

    m_node_size_isSet = false;
    m_node_size_isValid = false;

    m_node_updated_at_isSet = false;
    m_node_updated_at_isValid = false;

    m_node_updated_by_isSet = false;
    m_node_updated_by_isValid = false;
}

void OAIAuditNodeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditNodeResponse::fromJsonObject(QJsonObject json) {

    m_audit_user_permission_list_isValid = ::OpenAPI::fromJsonValue(m_audit_user_permission_list, json[QString("auditUserPermissionList")]);
    m_audit_user_permission_list_isSet = !json[QString("auditUserPermissionList")].isNull() && m_audit_user_permission_list_isValid;

    m_node_cnt_children_isValid = ::OpenAPI::fromJsonValue(m_node_cnt_children, json[QString("nodeCntChildren")]);
    m_node_cnt_children_isSet = !json[QString("nodeCntChildren")].isNull() && m_node_cnt_children_isValid;

    m_node_created_at_isValid = ::OpenAPI::fromJsonValue(m_node_created_at, json[QString("nodeCreatedAt")]);
    m_node_created_at_isSet = !json[QString("nodeCreatedAt")].isNull() && m_node_created_at_isValid;

    m_node_created_by_isValid = ::OpenAPI::fromJsonValue(m_node_created_by, json[QString("nodeCreatedBy")]);
    m_node_created_by_isSet = !json[QString("nodeCreatedBy")].isNull() && m_node_created_by_isValid;

    m_node_has_activities_log_isValid = ::OpenAPI::fromJsonValue(m_node_has_activities_log, json[QString("nodeHasActivitiesLog")]);
    m_node_has_activities_log_isSet = !json[QString("nodeHasActivitiesLog")].isNull() && m_node_has_activities_log_isValid;

    m_node_has_recycle_bin_isValid = ::OpenAPI::fromJsonValue(m_node_has_recycle_bin, json[QString("nodeHasRecycleBin")]);
    m_node_has_recycle_bin_isSet = !json[QString("nodeHasRecycleBin")].isNull() && m_node_has_recycle_bin_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_node_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_node_is_encrypted, json[QString("nodeIsEncrypted")]);
    m_node_is_encrypted_isSet = !json[QString("nodeIsEncrypted")].isNull() && m_node_is_encrypted_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("nodeName")]);
    m_node_name_isSet = !json[QString("nodeName")].isNull() && m_node_name_isValid;

    m_node_parent_id_isValid = ::OpenAPI::fromJsonValue(m_node_parent_id, json[QString("nodeParentId")]);
    m_node_parent_id_isSet = !json[QString("nodeParentId")].isNull() && m_node_parent_id_isValid;

    m_node_parent_path_isValid = ::OpenAPI::fromJsonValue(m_node_parent_path, json[QString("nodeParentPath")]);
    m_node_parent_path_isSet = !json[QString("nodeParentPath")].isNull() && m_node_parent_path_isValid;

    m_node_quota_isValid = ::OpenAPI::fromJsonValue(m_node_quota, json[QString("nodeQuota")]);
    m_node_quota_isSet = !json[QString("nodeQuota")].isNull() && m_node_quota_isValid;

    m_node_recycle_bin_retention_period_isValid = ::OpenAPI::fromJsonValue(m_node_recycle_bin_retention_period, json[QString("nodeRecycleBinRetentionPeriod")]);
    m_node_recycle_bin_retention_period_isSet = !json[QString("nodeRecycleBinRetentionPeriod")].isNull() && m_node_recycle_bin_retention_period_isValid;

    m_node_size_isValid = ::OpenAPI::fromJsonValue(m_node_size, json[QString("nodeSize")]);
    m_node_size_isSet = !json[QString("nodeSize")].isNull() && m_node_size_isValid;

    m_node_updated_at_isValid = ::OpenAPI::fromJsonValue(m_node_updated_at, json[QString("nodeUpdatedAt")]);
    m_node_updated_at_isSet = !json[QString("nodeUpdatedAt")].isNull() && m_node_updated_at_isValid;

    m_node_updated_by_isValid = ::OpenAPI::fromJsonValue(m_node_updated_by, json[QString("nodeUpdatedBy")]);
    m_node_updated_by_isSet = !json[QString("nodeUpdatedBy")].isNull() && m_node_updated_by_isValid;
}

QString OAIAuditNodeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditNodeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_user_permission_list.size() > 0) {
        obj.insert(QString("auditUserPermissionList"), ::OpenAPI::toJsonValue(m_audit_user_permission_list));
    }
    if (m_node_cnt_children_isSet) {
        obj.insert(QString("nodeCntChildren"), ::OpenAPI::toJsonValue(m_node_cnt_children));
    }
    if (m_node_created_at_isSet) {
        obj.insert(QString("nodeCreatedAt"), ::OpenAPI::toJsonValue(m_node_created_at));
    }
    if (m_node_created_by.isSet()) {
        obj.insert(QString("nodeCreatedBy"), ::OpenAPI::toJsonValue(m_node_created_by));
    }
    if (m_node_has_activities_log_isSet) {
        obj.insert(QString("nodeHasActivitiesLog"), ::OpenAPI::toJsonValue(m_node_has_activities_log));
    }
    if (m_node_has_recycle_bin_isSet) {
        obj.insert(QString("nodeHasRecycleBin"), ::OpenAPI::toJsonValue(m_node_has_recycle_bin));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_is_encrypted_isSet) {
        obj.insert(QString("nodeIsEncrypted"), ::OpenAPI::toJsonValue(m_node_is_encrypted));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("nodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_node_parent_id_isSet) {
        obj.insert(QString("nodeParentId"), ::OpenAPI::toJsonValue(m_node_parent_id));
    }
    if (m_node_parent_path_isSet) {
        obj.insert(QString("nodeParentPath"), ::OpenAPI::toJsonValue(m_node_parent_path));
    }
    if (m_node_quota_isSet) {
        obj.insert(QString("nodeQuota"), ::OpenAPI::toJsonValue(m_node_quota));
    }
    if (m_node_recycle_bin_retention_period_isSet) {
        obj.insert(QString("nodeRecycleBinRetentionPeriod"), ::OpenAPI::toJsonValue(m_node_recycle_bin_retention_period));
    }
    if (m_node_size_isSet) {
        obj.insert(QString("nodeSize"), ::OpenAPI::toJsonValue(m_node_size));
    }
    if (m_node_updated_at_isSet) {
        obj.insert(QString("nodeUpdatedAt"), ::OpenAPI::toJsonValue(m_node_updated_at));
    }
    if (m_node_updated_by.isSet()) {
        obj.insert(QString("nodeUpdatedBy"), ::OpenAPI::toJsonValue(m_node_updated_by));
    }
    return obj;
}

QList<OAIAuditUserPermission> OAIAuditNodeResponse::getAuditUserPermissionList() const {
    return m_audit_user_permission_list;
}
void OAIAuditNodeResponse::setAuditUserPermissionList(const QList<OAIAuditUserPermission> &audit_user_permission_list) {
    m_audit_user_permission_list = audit_user_permission_list;
    m_audit_user_permission_list_isSet = true;
}

bool OAIAuditNodeResponse::is_audit_user_permission_list_Set() const{
    return m_audit_user_permission_list_isSet;
}

bool OAIAuditNodeResponse::is_audit_user_permission_list_Valid() const{
    return m_audit_user_permission_list_isValid;
}

qint32 OAIAuditNodeResponse::getNodeCntChildren() const {
    return m_node_cnt_children;
}
void OAIAuditNodeResponse::setNodeCntChildren(const qint32 &node_cnt_children) {
    m_node_cnt_children = node_cnt_children;
    m_node_cnt_children_isSet = true;
}

bool OAIAuditNodeResponse::is_node_cnt_children_Set() const{
    return m_node_cnt_children_isSet;
}

bool OAIAuditNodeResponse::is_node_cnt_children_Valid() const{
    return m_node_cnt_children_isValid;
}

QDateTime OAIAuditNodeResponse::getNodeCreatedAt() const {
    return m_node_created_at;
}
void OAIAuditNodeResponse::setNodeCreatedAt(const QDateTime &node_created_at) {
    m_node_created_at = node_created_at;
    m_node_created_at_isSet = true;
}

bool OAIAuditNodeResponse::is_node_created_at_Set() const{
    return m_node_created_at_isSet;
}

bool OAIAuditNodeResponse::is_node_created_at_Valid() const{
    return m_node_created_at_isValid;
}

OAIUserInfo OAIAuditNodeResponse::getNodeCreatedBy() const {
    return m_node_created_by;
}
void OAIAuditNodeResponse::setNodeCreatedBy(const OAIUserInfo &node_created_by) {
    m_node_created_by = node_created_by;
    m_node_created_by_isSet = true;
}

bool OAIAuditNodeResponse::is_node_created_by_Set() const{
    return m_node_created_by_isSet;
}

bool OAIAuditNodeResponse::is_node_created_by_Valid() const{
    return m_node_created_by_isValid;
}

bool OAIAuditNodeResponse::isNodeHasActivitiesLog() const {
    return m_node_has_activities_log;
}
void OAIAuditNodeResponse::setNodeHasActivitiesLog(const bool &node_has_activities_log) {
    m_node_has_activities_log = node_has_activities_log;
    m_node_has_activities_log_isSet = true;
}

bool OAIAuditNodeResponse::is_node_has_activities_log_Set() const{
    return m_node_has_activities_log_isSet;
}

bool OAIAuditNodeResponse::is_node_has_activities_log_Valid() const{
    return m_node_has_activities_log_isValid;
}

bool OAIAuditNodeResponse::isNodeHasRecycleBin() const {
    return m_node_has_recycle_bin;
}
void OAIAuditNodeResponse::setNodeHasRecycleBin(const bool &node_has_recycle_bin) {
    m_node_has_recycle_bin = node_has_recycle_bin;
    m_node_has_recycle_bin_isSet = true;
}

bool OAIAuditNodeResponse::is_node_has_recycle_bin_Set() const{
    return m_node_has_recycle_bin_isSet;
}

bool OAIAuditNodeResponse::is_node_has_recycle_bin_Valid() const{
    return m_node_has_recycle_bin_isValid;
}

qint64 OAIAuditNodeResponse::getNodeId() const {
    return m_node_id;
}
void OAIAuditNodeResponse::setNodeId(const qint64 &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIAuditNodeResponse::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIAuditNodeResponse::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAIAuditNodeResponse::isNodeIsEncrypted() const {
    return m_node_is_encrypted;
}
void OAIAuditNodeResponse::setNodeIsEncrypted(const bool &node_is_encrypted) {
    m_node_is_encrypted = node_is_encrypted;
    m_node_is_encrypted_isSet = true;
}

bool OAIAuditNodeResponse::is_node_is_encrypted_Set() const{
    return m_node_is_encrypted_isSet;
}

bool OAIAuditNodeResponse::is_node_is_encrypted_Valid() const{
    return m_node_is_encrypted_isValid;
}

QString OAIAuditNodeResponse::getNodeName() const {
    return m_node_name;
}
void OAIAuditNodeResponse::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIAuditNodeResponse::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIAuditNodeResponse::is_node_name_Valid() const{
    return m_node_name_isValid;
}

qint64 OAIAuditNodeResponse::getNodeParentId() const {
    return m_node_parent_id;
}
void OAIAuditNodeResponse::setNodeParentId(const qint64 &node_parent_id) {
    m_node_parent_id = node_parent_id;
    m_node_parent_id_isSet = true;
}

bool OAIAuditNodeResponse::is_node_parent_id_Set() const{
    return m_node_parent_id_isSet;
}

bool OAIAuditNodeResponse::is_node_parent_id_Valid() const{
    return m_node_parent_id_isValid;
}

QString OAIAuditNodeResponse::getNodeParentPath() const {
    return m_node_parent_path;
}
void OAIAuditNodeResponse::setNodeParentPath(const QString &node_parent_path) {
    m_node_parent_path = node_parent_path;
    m_node_parent_path_isSet = true;
}

bool OAIAuditNodeResponse::is_node_parent_path_Set() const{
    return m_node_parent_path_isSet;
}

bool OAIAuditNodeResponse::is_node_parent_path_Valid() const{
    return m_node_parent_path_isValid;
}

qint64 OAIAuditNodeResponse::getNodeQuota() const {
    return m_node_quota;
}
void OAIAuditNodeResponse::setNodeQuota(const qint64 &node_quota) {
    m_node_quota = node_quota;
    m_node_quota_isSet = true;
}

bool OAIAuditNodeResponse::is_node_quota_Set() const{
    return m_node_quota_isSet;
}

bool OAIAuditNodeResponse::is_node_quota_Valid() const{
    return m_node_quota_isValid;
}

qint32 OAIAuditNodeResponse::getNodeRecycleBinRetentionPeriod() const {
    return m_node_recycle_bin_retention_period;
}
void OAIAuditNodeResponse::setNodeRecycleBinRetentionPeriod(const qint32 &node_recycle_bin_retention_period) {
    m_node_recycle_bin_retention_period = node_recycle_bin_retention_period;
    m_node_recycle_bin_retention_period_isSet = true;
}

bool OAIAuditNodeResponse::is_node_recycle_bin_retention_period_Set() const{
    return m_node_recycle_bin_retention_period_isSet;
}

bool OAIAuditNodeResponse::is_node_recycle_bin_retention_period_Valid() const{
    return m_node_recycle_bin_retention_period_isValid;
}

qint64 OAIAuditNodeResponse::getNodeSize() const {
    return m_node_size;
}
void OAIAuditNodeResponse::setNodeSize(const qint64 &node_size) {
    m_node_size = node_size;
    m_node_size_isSet = true;
}

bool OAIAuditNodeResponse::is_node_size_Set() const{
    return m_node_size_isSet;
}

bool OAIAuditNodeResponse::is_node_size_Valid() const{
    return m_node_size_isValid;
}

QDateTime OAIAuditNodeResponse::getNodeUpdatedAt() const {
    return m_node_updated_at;
}
void OAIAuditNodeResponse::setNodeUpdatedAt(const QDateTime &node_updated_at) {
    m_node_updated_at = node_updated_at;
    m_node_updated_at_isSet = true;
}

bool OAIAuditNodeResponse::is_node_updated_at_Set() const{
    return m_node_updated_at_isSet;
}

bool OAIAuditNodeResponse::is_node_updated_at_Valid() const{
    return m_node_updated_at_isValid;
}

OAIUserInfo OAIAuditNodeResponse::getNodeUpdatedBy() const {
    return m_node_updated_by;
}
void OAIAuditNodeResponse::setNodeUpdatedBy(const OAIUserInfo &node_updated_by) {
    m_node_updated_by = node_updated_by;
    m_node_updated_by_isSet = true;
}

bool OAIAuditNodeResponse::is_node_updated_by_Set() const{
    return m_node_updated_by_isSet;
}

bool OAIAuditNodeResponse::is_node_updated_by_Valid() const{
    return m_node_updated_by_isValid;
}

bool OAIAuditNodeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_user_permission_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_cnt_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_has_activities_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_has_recycle_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_parent_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_recycle_bin_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditNodeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audit_user_permission_list_isValid && m_node_cnt_children_isValid && m_node_id_isValid && m_node_name_isValid && m_node_parent_path_isValid && true;
}

} // namespace OpenAPI
