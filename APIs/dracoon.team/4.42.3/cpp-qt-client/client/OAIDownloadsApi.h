/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDownloadsApi_H
#define OAI_OAIDownloadsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDownloadsApi : public QObject {
    Q_OBJECT

public:
    OAIDownloadsApi(const int timeOut = 0);
    ~OAIDownloadsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  uuid QString [required]
    */
    virtual void downloadAvatar(const qint64 &user_id, const QString &uuid);

    /**
    * @param[in]  token QString [required]
    * @param[in]  range QString [optional]
    * @param[in]  generic_mimetype bool [optional]
    * @param[in]  r_inline bool [optional]
    */
    virtual void downloadFileViaToken(const QString &token, const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &generic_mimetype = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_inline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    * @param[in]  range QString [optional]
    * @param[in]  generic_mimetype bool [optional]
    * @param[in]  r_inline bool [optional]
    */
    virtual void downloadFileViaToken1(const QString &token, const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &generic_mimetype = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_inline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  token QString [required]
    */
    virtual void downloadZipArchiveViaToken(const QString &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void downloadAvatarCallback(OAIHttpRequestWorker *worker);
    void downloadFileViaTokenCallback(OAIHttpRequestWorker *worker);
    void downloadFileViaToken1Callback(OAIHttpRequestWorker *worker);
    void downloadZipArchiveViaTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void downloadAvatarSignal(QString summary);
    void downloadFileViaTokenSignal();
    void downloadFileViaToken1Signal();
    void downloadZipArchiveViaTokenSignal();


    void downloadAvatarSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void downloadFileViaTokenSignalFull(OAIHttpRequestWorker *worker);
    void downloadFileViaToken1SignalFull(OAIHttpRequestWorker *worker);
    void downloadZipArchiveViaTokenSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use downloadAvatarSignalError() instead")
    void downloadAvatarSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadAvatarSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenSignalError() instead")
    void downloadFileViaTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaToken1SignalError() instead")
    void downloadFileViaToken1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaToken1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadZipArchiveViaTokenSignalError() instead")
    void downloadZipArchiveViaTokenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadZipArchiveViaTokenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use downloadAvatarSignalErrorFull() instead")
    void downloadAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenSignalErrorFull() instead")
    void downloadFileViaTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaToken1SignalErrorFull() instead")
    void downloadFileViaToken1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaToken1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadZipArchiveViaTokenSignalErrorFull() instead")
    void downloadZipArchiveViaTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadZipArchiveViaTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
