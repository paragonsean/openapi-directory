/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConfigApi_H
#define OAI_OAIConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlgorithmVersionInfoList.h"
#include "OAIClassificationPoliciesConfig.h"
#include "OAIConfigOptionList.h"
#include "OAIErrorResponse.h"
#include "OAIGeneralSettingsInfo.h"
#include "OAIGuestUsersPoliciesConfig.h"
#include "OAIInfrastructureProperties.h"
#include "OAINotificationChannelList.h"
#include "OAIPasswordPoliciesConfig.h"
#include "OAIProductPackageResponseList.h"
#include "OAIS3TagList.h"
#include "OAISystemDefaults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConfigApi : public QObject {
    Q_OBJECT

public:
    OAIConfigApi(const int timeOut = 0);
    ~OAIConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAlgorithms(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestClassificationPoliciesConfigInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestCurrentProductPackages(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGeneralSettingsInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGuestUsersPoliciesConfigInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestInfrastructurePropertiesInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNotificationChannelsInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestPasswordPoliciesConfigInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestProductPackages(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestS3TagsInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestSystemDefaultsInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestSystemSettings(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_config_option_list OAIConfigOptionList [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateSystemSettings(const OAIConfigOptionList &oai_config_option_list, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void requestAlgorithmsCallback(OAIHttpRequestWorker *worker);
    void requestClassificationPoliciesConfigInfoCallback(OAIHttpRequestWorker *worker);
    void requestCurrentProductPackagesCallback(OAIHttpRequestWorker *worker);
    void requestGeneralSettingsInfoCallback(OAIHttpRequestWorker *worker);
    void requestGuestUsersPoliciesConfigInfoCallback(OAIHttpRequestWorker *worker);
    void requestInfrastructurePropertiesInfoCallback(OAIHttpRequestWorker *worker);
    void requestNotificationChannelsInfoCallback(OAIHttpRequestWorker *worker);
    void requestPasswordPoliciesConfigInfoCallback(OAIHttpRequestWorker *worker);
    void requestProductPackagesCallback(OAIHttpRequestWorker *worker);
    void requestS3TagsInfoCallback(OAIHttpRequestWorker *worker);
    void requestSystemDefaultsInfoCallback(OAIHttpRequestWorker *worker);
    void requestSystemSettingsCallback(OAIHttpRequestWorker *worker);
    void updateSystemSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void requestAlgorithmsSignal(OAIAlgorithmVersionInfoList summary);
    void requestClassificationPoliciesConfigInfoSignal(OAIClassificationPoliciesConfig summary);
    void requestCurrentProductPackagesSignal(OAIProductPackageResponseList summary);
    void requestGeneralSettingsInfoSignal(OAIGeneralSettingsInfo summary);
    void requestGuestUsersPoliciesConfigInfoSignal(OAIGuestUsersPoliciesConfig summary);
    void requestInfrastructurePropertiesInfoSignal(OAIInfrastructureProperties summary);
    void requestNotificationChannelsInfoSignal(OAINotificationChannelList summary);
    void requestPasswordPoliciesConfigInfoSignal(OAIPasswordPoliciesConfig summary);
    void requestProductPackagesSignal(OAIProductPackageResponseList summary);
    void requestS3TagsInfoSignal(OAIS3TagList summary);
    void requestSystemDefaultsInfoSignal(OAISystemDefaults summary);
    void requestSystemSettingsSignal(OAIConfigOptionList summary);
    void updateSystemSettingsSignal();


    void requestAlgorithmsSignalFull(OAIHttpRequestWorker *worker, OAIAlgorithmVersionInfoList summary);
    void requestClassificationPoliciesConfigInfoSignalFull(OAIHttpRequestWorker *worker, OAIClassificationPoliciesConfig summary);
    void requestCurrentProductPackagesSignalFull(OAIHttpRequestWorker *worker, OAIProductPackageResponseList summary);
    void requestGeneralSettingsInfoSignalFull(OAIHttpRequestWorker *worker, OAIGeneralSettingsInfo summary);
    void requestGuestUsersPoliciesConfigInfoSignalFull(OAIHttpRequestWorker *worker, OAIGuestUsersPoliciesConfig summary);
    void requestInfrastructurePropertiesInfoSignalFull(OAIHttpRequestWorker *worker, OAIInfrastructureProperties summary);
    void requestNotificationChannelsInfoSignalFull(OAIHttpRequestWorker *worker, OAINotificationChannelList summary);
    void requestPasswordPoliciesConfigInfoSignalFull(OAIHttpRequestWorker *worker, OAIPasswordPoliciesConfig summary);
    void requestProductPackagesSignalFull(OAIHttpRequestWorker *worker, OAIProductPackageResponseList summary);
    void requestS3TagsInfoSignalFull(OAIHttpRequestWorker *worker, OAIS3TagList summary);
    void requestSystemDefaultsInfoSignalFull(OAIHttpRequestWorker *worker, OAISystemDefaults summary);
    void requestSystemSettingsSignalFull(OAIHttpRequestWorker *worker, OAIConfigOptionList summary);
    void updateSystemSettingsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use requestAlgorithmsSignalError() instead")
    void requestAlgorithmsSignalE(OAIAlgorithmVersionInfoList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAlgorithmsSignalError(OAIAlgorithmVersionInfoList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestClassificationPoliciesConfigInfoSignalError() instead")
    void requestClassificationPoliciesConfigInfoSignalE(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestClassificationPoliciesConfigInfoSignalError(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCurrentProductPackagesSignalError() instead")
    void requestCurrentProductPackagesSignalE(OAIProductPackageResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCurrentProductPackagesSignalError(OAIProductPackageResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGeneralSettingsInfoSignalError() instead")
    void requestGeneralSettingsInfoSignalE(OAIGeneralSettingsInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGeneralSettingsInfoSignalError(OAIGeneralSettingsInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGuestUsersPoliciesConfigInfoSignalError() instead")
    void requestGuestUsersPoliciesConfigInfoSignalE(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGuestUsersPoliciesConfigInfoSignalError(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestInfrastructurePropertiesInfoSignalError() instead")
    void requestInfrastructurePropertiesInfoSignalE(OAIInfrastructureProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestInfrastructurePropertiesInfoSignalError(OAIInfrastructureProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNotificationChannelsInfoSignalError() instead")
    void requestNotificationChannelsInfoSignalE(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNotificationChannelsInfoSignalError(OAINotificationChannelList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesConfigInfoSignalError() instead")
    void requestPasswordPoliciesConfigInfoSignalE(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesConfigInfoSignalError(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestProductPackagesSignalError() instead")
    void requestProductPackagesSignalE(OAIProductPackageResponseList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestProductPackagesSignalError(OAIProductPackageResponseList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagsInfoSignalError() instead")
    void requestS3TagsInfoSignalE(OAIS3TagList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagsInfoSignalError(OAIS3TagList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemDefaultsInfoSignalError() instead")
    void requestSystemDefaultsInfoSignalE(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemDefaultsInfoSignalError(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemSettingsSignalError() instead")
    void requestSystemSettingsSignalE(OAIConfigOptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemSettingsSignalError(OAIConfigOptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemSettingsSignalError() instead")
    void updateSystemSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use requestAlgorithmsSignalErrorFull() instead")
    void requestAlgorithmsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAlgorithmsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestClassificationPoliciesConfigInfoSignalErrorFull() instead")
    void requestClassificationPoliciesConfigInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestClassificationPoliciesConfigInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCurrentProductPackagesSignalErrorFull() instead")
    void requestCurrentProductPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCurrentProductPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGeneralSettingsInfoSignalErrorFull() instead")
    void requestGeneralSettingsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGeneralSettingsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGuestUsersPoliciesConfigInfoSignalErrorFull() instead")
    void requestGuestUsersPoliciesConfigInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGuestUsersPoliciesConfigInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestInfrastructurePropertiesInfoSignalErrorFull() instead")
    void requestInfrastructurePropertiesInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestInfrastructurePropertiesInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNotificationChannelsInfoSignalErrorFull() instead")
    void requestNotificationChannelsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNotificationChannelsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesConfigInfoSignalErrorFull() instead")
    void requestPasswordPoliciesConfigInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesConfigInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestProductPackagesSignalErrorFull() instead")
    void requestProductPackagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestProductPackagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagsInfoSignalErrorFull() instead")
    void requestS3TagsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemDefaultsInfoSignalErrorFull() instead")
    void requestSystemDefaultsInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemDefaultsInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemSettingsSignalErrorFull() instead")
    void requestSystemSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemSettingsSignalErrorFull() instead")
    void updateSystemSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
