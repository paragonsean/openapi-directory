/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenIdProvider.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenIdProvider::OAIOpenIdProvider(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenIdProvider::OAIOpenIdProvider() {
    this->initializeModel();
}

OAIOpenIdProvider::~OAIOpenIdProvider() {}

void OAIOpenIdProvider::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_global_available_isSet = false;
    m_is_global_available_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_mapping_claim_isSet = false;
    m_mapping_claim_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_management_url_isSet = false;
    m_user_management_url_isValid = false;
}

void OAIOpenIdProvider::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenIdProvider::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_global_available_isValid = ::OpenAPI::fromJsonValue(m_is_global_available, json[QString("isGlobalAvailable")]);
    m_is_global_available_isSet = !json[QString("isGlobalAvailable")].isNull() && m_is_global_available_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_mapping_claim_isValid = ::OpenAPI::fromJsonValue(m_mapping_claim, json[QString("mappingClaim")]);
    m_mapping_claim_isSet = !json[QString("mappingClaim")].isNull() && m_mapping_claim_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_management_url_isValid = ::OpenAPI::fromJsonValue(m_user_management_url, json[QString("userManagementUrl")]);
    m_user_management_url_isSet = !json[QString("userManagementUrl")].isNull() && m_user_management_url_isValid;
}

QString OAIOpenIdProvider::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenIdProvider::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_global_available_isSet) {
        obj.insert(QString("isGlobalAvailable"), ::OpenAPI::toJsonValue(m_is_global_available));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_mapping_claim_isSet) {
        obj.insert(QString("mappingClaim"), ::OpenAPI::toJsonValue(m_mapping_claim));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_management_url_isSet) {
        obj.insert(QString("userManagementUrl"), ::OpenAPI::toJsonValue(m_user_management_url));
    }
    return obj;
}

qint32 OAIOpenIdProvider::getId() const {
    return m_id;
}
void OAIOpenIdProvider::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOpenIdProvider::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpenIdProvider::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOpenIdProvider::isIsGlobalAvailable() const {
    return m_is_global_available;
}
void OAIOpenIdProvider::setIsGlobalAvailable(const bool &is_global_available) {
    m_is_global_available = is_global_available;
    m_is_global_available_isSet = true;
}

bool OAIOpenIdProvider::is_is_global_available_Set() const{
    return m_is_global_available_isSet;
}

bool OAIOpenIdProvider::is_is_global_available_Valid() const{
    return m_is_global_available_isValid;
}

QString OAIOpenIdProvider::getIssuer() const {
    return m_issuer;
}
void OAIOpenIdProvider::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIOpenIdProvider::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIOpenIdProvider::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIOpenIdProvider::getMappingClaim() const {
    return m_mapping_claim;
}
void OAIOpenIdProvider::setMappingClaim(const QString &mapping_claim) {
    m_mapping_claim = mapping_claim;
    m_mapping_claim_isSet = true;
}

bool OAIOpenIdProvider::is_mapping_claim_Set() const{
    return m_mapping_claim_isSet;
}

bool OAIOpenIdProvider::is_mapping_claim_Valid() const{
    return m_mapping_claim_isValid;
}

QString OAIOpenIdProvider::getName() const {
    return m_name;
}
void OAIOpenIdProvider::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOpenIdProvider::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOpenIdProvider::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOpenIdProvider::getUserManagementUrl() const {
    return m_user_management_url;
}
void OAIOpenIdProvider::setUserManagementUrl(const QString &user_management_url) {
    m_user_management_url = user_management_url;
    m_user_management_url_isSet = true;
}

bool OAIOpenIdProvider::is_user_management_url_Set() const{
    return m_user_management_url_isSet;
}

bool OAIOpenIdProvider::is_user_management_url_Valid() const{
    return m_user_management_url_isValid;
}

bool OAIOpenIdProvider::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_global_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_management_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenIdProvider::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_is_global_available_isValid && m_issuer_isValid && m_mapping_claim_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
