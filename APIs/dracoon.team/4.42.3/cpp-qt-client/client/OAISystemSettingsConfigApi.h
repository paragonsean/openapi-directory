/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemSettingsConfigApi_H
#define OAI_OAISystemSettingsConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthConfig.h"
#include "OAIErrorResponse.h"
#include "OAIEventlogConfig.h"
#include "OAIGeneralSettings.h"
#include "OAIInfrastructureProperties.h"
#include "OAISyslogConfig.h"
#include "OAISystemDefaults.h"
#include "OAIUpdateEventlogConfig.h"
#include "OAIUpdateGeneralSettings.h"
#include "OAIUpdateSyslogConfig.h"
#include "OAIUpdateSystemDefaults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemSettingsConfigApi : public QObject {
    Q_OBJECT

public:
    OAISystemSettingsConfigApi(const int timeOut = 0);
    ~OAISystemSettingsConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAuthConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestEventlogConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGeneralSettings(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestInfrastructureProperties(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestSyslogConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestSystemDefaults(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_auth_config OAIAuthConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateAuthConfig(const OAIAuthConfig &oai_auth_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_eventlog_config OAIUpdateEventlogConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateEventlogConfig(const OAIUpdateEventlogConfig &oai_update_eventlog_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_general_settings OAIUpdateGeneralSettings [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateGeneralSettings(const OAIUpdateGeneralSettings &oai_update_general_settings, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_syslog_config OAIUpdateSyslogConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateSyslogConfig(const OAIUpdateSyslogConfig &oai_update_syslog_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_system_defaults OAIUpdateSystemDefaults [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateSystemDefaults(const OAIUpdateSystemDefaults &oai_update_system_defaults, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void requestAuthConfigCallback(OAIHttpRequestWorker *worker);
    void requestEventlogConfigCallback(OAIHttpRequestWorker *worker);
    void requestGeneralSettingsCallback(OAIHttpRequestWorker *worker);
    void requestInfrastructurePropertiesCallback(OAIHttpRequestWorker *worker);
    void requestSyslogConfigCallback(OAIHttpRequestWorker *worker);
    void requestSystemDefaultsCallback(OAIHttpRequestWorker *worker);
    void updateAuthConfigCallback(OAIHttpRequestWorker *worker);
    void updateEventlogConfigCallback(OAIHttpRequestWorker *worker);
    void updateGeneralSettingsCallback(OAIHttpRequestWorker *worker);
    void updateSyslogConfigCallback(OAIHttpRequestWorker *worker);
    void updateSystemDefaultsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void requestAuthConfigSignal(OAIAuthConfig summary);
    void requestEventlogConfigSignal(OAIEventlogConfig summary);
    void requestGeneralSettingsSignal(OAIGeneralSettings summary);
    void requestInfrastructurePropertiesSignal(OAIInfrastructureProperties summary);
    void requestSyslogConfigSignal(OAISyslogConfig summary);
    void requestSystemDefaultsSignal(OAISystemDefaults summary);
    void updateAuthConfigSignal(OAIAuthConfig summary);
    void updateEventlogConfigSignal(OAIEventlogConfig summary);
    void updateGeneralSettingsSignal(OAIGeneralSettings summary);
    void updateSyslogConfigSignal(OAISyslogConfig summary);
    void updateSystemDefaultsSignal(OAISystemDefaults summary);


    void requestAuthConfigSignalFull(OAIHttpRequestWorker *worker, OAIAuthConfig summary);
    void requestEventlogConfigSignalFull(OAIHttpRequestWorker *worker, OAIEventlogConfig summary);
    void requestGeneralSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralSettings summary);
    void requestInfrastructurePropertiesSignalFull(OAIHttpRequestWorker *worker, OAIInfrastructureProperties summary);
    void requestSyslogConfigSignalFull(OAIHttpRequestWorker *worker, OAISyslogConfig summary);
    void requestSystemDefaultsSignalFull(OAIHttpRequestWorker *worker, OAISystemDefaults summary);
    void updateAuthConfigSignalFull(OAIHttpRequestWorker *worker, OAIAuthConfig summary);
    void updateEventlogConfigSignalFull(OAIHttpRequestWorker *worker, OAIEventlogConfig summary);
    void updateGeneralSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGeneralSettings summary);
    void updateSyslogConfigSignalFull(OAIHttpRequestWorker *worker, OAISyslogConfig summary);
    void updateSystemDefaultsSignalFull(OAIHttpRequestWorker *worker, OAISystemDefaults summary);

    Q_DECL_DEPRECATED_X("Use requestAuthConfigSignalError() instead")
    void requestAuthConfigSignalE(OAIAuthConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAuthConfigSignalError(OAIAuthConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEventlogConfigSignalError() instead")
    void requestEventlogConfigSignalE(OAIEventlogConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestEventlogConfigSignalError(OAIEventlogConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGeneralSettingsSignalError() instead")
    void requestGeneralSettingsSignalE(OAIGeneralSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGeneralSettingsSignalError(OAIGeneralSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestInfrastructurePropertiesSignalError() instead")
    void requestInfrastructurePropertiesSignalE(OAIInfrastructureProperties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestInfrastructurePropertiesSignalError(OAIInfrastructureProperties summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSyslogConfigSignalError() instead")
    void requestSyslogConfigSignalE(OAISyslogConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSyslogConfigSignalError(OAISyslogConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemDefaultsSignalError() instead")
    void requestSystemDefaultsSignalE(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemDefaultsSignalError(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAuthConfigSignalError() instead")
    void updateAuthConfigSignalE(OAIAuthConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAuthConfigSignalError(OAIAuthConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventlogConfigSignalError() instead")
    void updateEventlogConfigSignalE(OAIEventlogConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventlogConfigSignalError(OAIEventlogConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGeneralSettingsSignalError() instead")
    void updateGeneralSettingsSignalE(OAIGeneralSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGeneralSettingsSignalError(OAIGeneralSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyslogConfigSignalError() instead")
    void updateSyslogConfigSignalE(OAISyslogConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyslogConfigSignalError(OAISyslogConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemDefaultsSignalError() instead")
    void updateSystemDefaultsSignalE(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemDefaultsSignalError(OAISystemDefaults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use requestAuthConfigSignalErrorFull() instead")
    void requestAuthConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAuthConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEventlogConfigSignalErrorFull() instead")
    void requestEventlogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestEventlogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGeneralSettingsSignalErrorFull() instead")
    void requestGeneralSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGeneralSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestInfrastructurePropertiesSignalErrorFull() instead")
    void requestInfrastructurePropertiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestInfrastructurePropertiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSyslogConfigSignalErrorFull() instead")
    void requestSyslogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSyslogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemDefaultsSignalErrorFull() instead")
    void requestSystemDefaultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemDefaultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAuthConfigSignalErrorFull() instead")
    void updateAuthConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAuthConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateEventlogConfigSignalErrorFull() instead")
    void updateEventlogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateEventlogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGeneralSettingsSignalErrorFull() instead")
    void updateGeneralSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGeneralSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSyslogConfigSignalErrorFull() instead")
    void updateSyslogConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSyslogConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSystemDefaultsSignalErrorFull() instead")
    void updateSystemDefaultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSystemDefaultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
