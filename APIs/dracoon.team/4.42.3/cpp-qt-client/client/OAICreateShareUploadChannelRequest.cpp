/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateShareUploadChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateShareUploadChannelRequest::OAICreateShareUploadChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateShareUploadChannelRequest::OAICreateShareUploadChannelRequest() {
    this->initializeModel();
}

OAICreateShareUploadChannelRequest::~OAICreateShareUploadChannelRequest() {}

void OAICreateShareUploadChannelRequest::initializeModel() {

    m_direct_s3_upload_isSet = false;
    m_direct_s3_upload_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_timestamp_creation_isSet = false;
    m_timestamp_creation_isValid = false;

    m_timestamp_modification_isSet = false;
    m_timestamp_modification_isValid = false;
}

void OAICreateShareUploadChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateShareUploadChannelRequest::fromJsonObject(QJsonObject json) {

    m_direct_s3_upload_isValid = ::OpenAPI::fromJsonValue(m_direct_s3_upload, json[QString("directS3Upload")]);
    m_direct_s3_upload_isSet = !json[QString("directS3Upload")].isNull() && m_direct_s3_upload_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_timestamp_creation_isValid = ::OpenAPI::fromJsonValue(m_timestamp_creation, json[QString("timestampCreation")]);
    m_timestamp_creation_isSet = !json[QString("timestampCreation")].isNull() && m_timestamp_creation_isValid;

    m_timestamp_modification_isValid = ::OpenAPI::fromJsonValue(m_timestamp_modification, json[QString("timestampModification")]);
    m_timestamp_modification_isSet = !json[QString("timestampModification")].isNull() && m_timestamp_modification_isValid;
}

QString OAICreateShareUploadChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateShareUploadChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_direct_s3_upload_isSet) {
        obj.insert(QString("directS3Upload"), ::OpenAPI::toJsonValue(m_direct_s3_upload));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_timestamp_creation_isSet) {
        obj.insert(QString("timestampCreation"), ::OpenAPI::toJsonValue(m_timestamp_creation));
    }
    if (m_timestamp_modification_isSet) {
        obj.insert(QString("timestampModification"), ::OpenAPI::toJsonValue(m_timestamp_modification));
    }
    return obj;
}

bool OAICreateShareUploadChannelRequest::isDirectS3Upload() const {
    return m_direct_s3_upload;
}
void OAICreateShareUploadChannelRequest::setDirectS3Upload(const bool &direct_s3_upload) {
    m_direct_s3_upload = direct_s3_upload;
    m_direct_s3_upload_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_direct_s3_upload_Set() const{
    return m_direct_s3_upload_isSet;
}

bool OAICreateShareUploadChannelRequest::is_direct_s3_upload_Valid() const{
    return m_direct_s3_upload_isValid;
}

QString OAICreateShareUploadChannelRequest::getName() const {
    return m_name;
}
void OAICreateShareUploadChannelRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateShareUploadChannelRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateShareUploadChannelRequest::getPassword() const {
    return m_password;
}
void OAICreateShareUploadChannelRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateShareUploadChannelRequest::is_password_Valid() const{
    return m_password_isValid;
}

qint64 OAICreateShareUploadChannelRequest::getSize() const {
    return m_size;
}
void OAICreateShareUploadChannelRequest::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAICreateShareUploadChannelRequest::is_size_Valid() const{
    return m_size_isValid;
}

QDateTime OAICreateShareUploadChannelRequest::getTimestampCreation() const {
    return m_timestamp_creation;
}
void OAICreateShareUploadChannelRequest::setTimestampCreation(const QDateTime &timestamp_creation) {
    m_timestamp_creation = timestamp_creation;
    m_timestamp_creation_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_timestamp_creation_Set() const{
    return m_timestamp_creation_isSet;
}

bool OAICreateShareUploadChannelRequest::is_timestamp_creation_Valid() const{
    return m_timestamp_creation_isValid;
}

QDateTime OAICreateShareUploadChannelRequest::getTimestampModification() const {
    return m_timestamp_modification;
}
void OAICreateShareUploadChannelRequest::setTimestampModification(const QDateTime &timestamp_modification) {
    m_timestamp_modification = timestamp_modification;
    m_timestamp_modification_isSet = true;
}

bool OAICreateShareUploadChannelRequest::is_timestamp_modification_Set() const{
    return m_timestamp_modification_isSet;
}

bool OAICreateShareUploadChannelRequest::is_timestamp_modification_Valid() const{
    return m_timestamp_modification_isValid;
}

bool OAICreateShareUploadChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_direct_s3_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_modification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateShareUploadChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
