/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPublicApi::OAIPublicApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPublicApi::~OAIPublicApi() {
}

void OAIPublicApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("/api"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("cancelFileUploadViaShare", defaultConf);
    _serverIndices.insert("cancelFileUploadViaShare", 0);
    _serverConfigs.insert("checkPublicDownloadSharePassword", defaultConf);
    _serverIndices.insert("checkPublicDownloadSharePassword", 0);
    _serverConfigs.insert("completeFileUploadViaShare", defaultConf);
    _serverIndices.insert("completeFileUploadViaShare", 0);
    _serverConfigs.insert("completeS3FileUploadViaShare", defaultConf);
    _serverIndices.insert("completeS3FileUploadViaShare", 0);
    _serverConfigs.insert("createShareUploadChannel", defaultConf);
    _serverIndices.insert("createShareUploadChannel", 0);
    _serverConfigs.insert("downloadFileViaTokenPublic", defaultConf);
    _serverIndices.insert("downloadFileViaTokenPublic", 0);
    _serverConfigs.insert("downloadFileViaTokenPublic1", defaultConf);
    _serverIndices.insert("downloadFileViaTokenPublic1", 0);
    _serverConfigs.insert("generateDownloadUrlPublic", defaultConf);
    _serverIndices.insert("generateDownloadUrlPublic", 0);
    _serverConfigs.insert("generatePresignedUrlsPublic", defaultConf);
    _serverIndices.insert("generatePresignedUrlsPublic", 0);
    _serverConfigs.insert("requestActiveDirectoryAuthInfo", defaultConf);
    _serverIndices.insert("requestActiveDirectoryAuthInfo", 0);
    _serverConfigs.insert("requestOpenIdAuthInfo", defaultConf);
    _serverIndices.insert("requestOpenIdAuthInfo", 0);
    _serverConfigs.insert("requestPublicDownloadShareInfo", defaultConf);
    _serverIndices.insert("requestPublicDownloadShareInfo", 0);
    _serverConfigs.insert("requestPublicUploadShareInfo", defaultConf);
    _serverIndices.insert("requestPublicUploadShareInfo", 0);
    _serverConfigs.insert("requestSoftwareVersion", defaultConf);
    _serverIndices.insert("requestSoftwareVersion", 0);
    _serverConfigs.insert("requestSystemInfo", defaultConf);
    _serverIndices.insert("requestSystemInfo", 0);
    _serverConfigs.insert("requestSystemTime", defaultConf);
    _serverIndices.insert("requestSystemTime", 0);
    _serverConfigs.insert("requestThirdPartyDependencies", defaultConf);
    _serverIndices.insert("requestThirdPartyDependencies", 0);
    _serverConfigs.insert("requestUploadStatusPublic", defaultConf);
    _serverIndices.insert("requestUploadStatusPublic", 0);
    _serverConfigs.insert("uploadFileAsMultipartPublic1", defaultConf);
    _serverIndices.insert("uploadFileAsMultipartPublic1", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPublicApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPublicApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPublicApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPublicApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPublicApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPublicApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPublicApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPublicApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPublicApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPublicApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPublicApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPublicApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPublicApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPublicApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPublicApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPublicApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPublicApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPublicApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPublicApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPublicApi::cancelFileUploadViaShare(const QString &access_key, const QString &upload_id) {
    QString fullPath = QString(_serverConfigs["cancelFileUploadViaShare"][_serverIndices.value("cancelFileUploadViaShare")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::cancelFileUploadViaShareCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::cancelFileUploadViaShareCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT cancelFileUploadViaShareSignal();
        Q_EMIT cancelFileUploadViaShareSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT cancelFileUploadViaShareSignalE(error_type, error_str);
        Q_EMIT cancelFileUploadViaShareSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT cancelFileUploadViaShareSignalError(error_type, error_str);
        Q_EMIT cancelFileUploadViaShareSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::checkPublicDownloadSharePassword(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &password) {
    QString fullPath = QString(_serverConfigs["checkPublicDownloadSharePassword"][_serverIndices.value("checkPublicDownloadSharePassword")].URL()+"/v4/public/shares/downloads/{access_key}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (password.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "password", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("password")).append(querySuffix).append(QUrl::toPercentEncoding(password.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::checkPublicDownloadSharePasswordCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::checkPublicDownloadSharePasswordCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT checkPublicDownloadSharePasswordSignal();
        Q_EMIT checkPublicDownloadSharePasswordSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT checkPublicDownloadSharePasswordSignalE(error_type, error_str);
        Q_EMIT checkPublicDownloadSharePasswordSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT checkPublicDownloadSharePasswordSignalError(error_type, error_str);
        Q_EMIT checkPublicDownloadSharePasswordSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::completeFileUploadViaShare(const QString &access_key, const QString &upload_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format, const ::OpenAPI::OptionalParam<OAIUserFileKeyList> &oai_user_file_key_list) {
    QString fullPath = QString(_serverConfigs["completeFileUploadViaShare"][_serverIndices.value("completeFileUploadViaShare")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_user_file_key_list.hasValue()){

        
        QByteArray output = oai_user_file_key_list.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::completeFileUploadViaShareCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::completeFileUploadViaShareCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicUploadedFileData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT completeFileUploadViaShareSignal(output);
        Q_EMIT completeFileUploadViaShareSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT completeFileUploadViaShareSignalE(output, error_type, error_str);
        Q_EMIT completeFileUploadViaShareSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT completeFileUploadViaShareSignalError(output, error_type, error_str);
        Q_EMIT completeFileUploadViaShareSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::completeS3FileUploadViaShare(const QString &access_key, const QString &upload_id, const OAICompleteS3ShareUploadRequest &oai_complete_s3_share_upload_request) {
    QString fullPath = QString(_serverConfigs["completeS3FileUploadViaShare"][_serverIndices.value("completeS3FileUploadViaShare")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}/s3");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_complete_s3_share_upload_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::completeS3FileUploadViaShareCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::completeS3FileUploadViaShareCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT completeS3FileUploadViaShareSignal();
        Q_EMIT completeS3FileUploadViaShareSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT completeS3FileUploadViaShareSignalE(error_type, error_str);
        Q_EMIT completeS3FileUploadViaShareSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT completeS3FileUploadViaShareSignalError(error_type, error_str);
        Q_EMIT completeS3FileUploadViaShareSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::createShareUploadChannel(const QString &access_key, const OAICreateShareUploadChannelRequest &oai_create_share_upload_channel_request) {
    QString fullPath = QString(_serverConfigs["createShareUploadChannel"][_serverIndices.value("createShareUploadChannel")].URL()+"/v4/public/shares/uploads/{access_key}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_share_upload_channel_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::createShareUploadChannelCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::createShareUploadChannelCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateShareUploadChannelResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createShareUploadChannelSignal(output);
        Q_EMIT createShareUploadChannelSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createShareUploadChannelSignalE(output, error_type, error_str);
        Q_EMIT createShareUploadChannelSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createShareUploadChannelSignalError(output, error_type, error_str);
        Q_EMIT createShareUploadChannelSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::downloadFileViaTokenPublic(const QString &access_key, const QString &token, const ::OpenAPI::OptionalParam<QString> &range, const ::OpenAPI::OptionalParam<bool> &generic_mimetype, const ::OpenAPI::OptionalParam<bool> &r_inline) {
    QString fullPath = QString(_serverConfigs["downloadFileViaTokenPublic"][_serverIndices.value("downloadFileViaTokenPublic")].URL()+"/v4/public/shares/downloads/{access_key}/{token}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString tokenPathParam("{");
        tokenPathParam.append("token").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "token", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"token"+pathSuffix : pathPrefix;
        fullPath.replace(tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (generic_mimetype.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "generic_mimetype", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("generic_mimetype")).append(querySuffix).append(QUrl::toPercentEncoding(generic_mimetype.stringValue()));
    }
    if (r_inline.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "inline", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("inline")).append(querySuffix).append(QUrl::toPercentEncoding(r_inline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (range.hasValue())
    {
        if (!::OpenAPI::toStringValue(range.value()).isEmpty()) {
            input.headers.insert("Range", ::OpenAPI::toStringValue(range.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::downloadFileViaTokenPublicCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::downloadFileViaTokenPublicCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT downloadFileViaTokenPublicSignal();
        Q_EMIT downloadFileViaTokenPublicSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT downloadFileViaTokenPublicSignalE(error_type, error_str);
        Q_EMIT downloadFileViaTokenPublicSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT downloadFileViaTokenPublicSignalError(error_type, error_str);
        Q_EMIT downloadFileViaTokenPublicSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::downloadFileViaTokenPublic1(const QString &access_key, const QString &token, const ::OpenAPI::OptionalParam<QString> &range, const ::OpenAPI::OptionalParam<bool> &generic_mimetype, const ::OpenAPI::OptionalParam<bool> &r_inline) {
    QString fullPath = QString(_serverConfigs["downloadFileViaTokenPublic1"][_serverIndices.value("downloadFileViaTokenPublic1")].URL()+"/v4/public/shares/downloads/{access_key}/{token}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString tokenPathParam("{");
        tokenPathParam.append("token").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "token", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"token"+pathSuffix : pathPrefix;
        fullPath.replace(tokenPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(token)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (generic_mimetype.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "generic_mimetype", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("generic_mimetype")).append(querySuffix).append(QUrl::toPercentEncoding(generic_mimetype.stringValue()));
    }
    if (r_inline.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "inline", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("inline")).append(querySuffix).append(QUrl::toPercentEncoding(r_inline.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "HEAD");


    if (range.hasValue())
    {
        if (!::OpenAPI::toStringValue(range.value()).isEmpty()) {
            input.headers.insert("Range", ::OpenAPI::toStringValue(range.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::downloadFileViaTokenPublic1Callback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::downloadFileViaTokenPublic1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT downloadFileViaTokenPublic1Signal();
        Q_EMIT downloadFileViaTokenPublic1SignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT downloadFileViaTokenPublic1SignalE(error_type, error_str);
        Q_EMIT downloadFileViaTokenPublic1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT downloadFileViaTokenPublic1SignalError(error_type, error_str);
        Q_EMIT downloadFileViaTokenPublic1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::generateDownloadUrlPublic(const QString &access_key, const ::OpenAPI::OptionalParam<OAIPublicDownloadTokenGenerateRequest> &oai_public_download_token_generate_request) {
    QString fullPath = QString(_serverConfigs["generateDownloadUrlPublic"][_serverIndices.value("generateDownloadUrlPublic")].URL()+"/v4/public/shares/downloads/{access_key}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_public_download_token_generate_request.hasValue()){

        
        QByteArray output = oai_public_download_token_generate_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::generateDownloadUrlPublicCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::generateDownloadUrlPublicCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicDownloadTokenGenerateResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generateDownloadUrlPublicSignal(output);
        Q_EMIT generateDownloadUrlPublicSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generateDownloadUrlPublicSignalE(output, error_type, error_str);
        Q_EMIT generateDownloadUrlPublicSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generateDownloadUrlPublicSignalError(output, error_type, error_str);
        Q_EMIT generateDownloadUrlPublicSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::generatePresignedUrlsPublic(const QString &access_key, const QString &upload_id, const OAIGeneratePresignedUrlsRequest &oai_generate_presigned_urls_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["generatePresignedUrlsPublic"][_serverIndices.value("generatePresignedUrlsPublic")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}/s3_urls");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_generate_presigned_urls_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::generatePresignedUrlsPublicCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::generatePresignedUrlsPublicCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPresignedUrlList output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT generatePresignedUrlsPublicSignal(output);
        Q_EMIT generatePresignedUrlsPublicSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT generatePresignedUrlsPublicSignalE(output, error_type, error_str);
        Q_EMIT generatePresignedUrlsPublicSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT generatePresignedUrlsPublicSignalError(output, error_type, error_str);
        Q_EMIT generatePresignedUrlsPublicSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestActiveDirectoryAuthInfo(const ::OpenAPI::OptionalParam<bool> &is_global_available) {
    QString fullPath = QString(_serverConfigs["requestActiveDirectoryAuthInfo"][_serverIndices.value("requestActiveDirectoryAuthInfo")].URL()+"/v4/public/system/info/auth/ad");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (is_global_available.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "is_global_available", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("is_global_available")).append(querySuffix).append(QUrl::toPercentEncoding(is_global_available.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestActiveDirectoryAuthInfoCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestActiveDirectoryAuthInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIActiveDirectoryAuthInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestActiveDirectoryAuthInfoSignal(output);
        Q_EMIT requestActiveDirectoryAuthInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestActiveDirectoryAuthInfoSignalE(output, error_type, error_str);
        Q_EMIT requestActiveDirectoryAuthInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestActiveDirectoryAuthInfoSignalError(output, error_type, error_str);
        Q_EMIT requestActiveDirectoryAuthInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestOpenIdAuthInfo(const ::OpenAPI::OptionalParam<bool> &is_global_available) {
    QString fullPath = QString(_serverConfigs["requestOpenIdAuthInfo"][_serverIndices.value("requestOpenIdAuthInfo")].URL()+"/v4/public/system/info/auth/openid");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (is_global_available.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "is_global_available", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("is_global_available")).append(querySuffix).append(QUrl::toPercentEncoding(is_global_available.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestOpenIdAuthInfoCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestOpenIdAuthInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIOpenIdAuthInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestOpenIdAuthInfoSignal(output);
        Q_EMIT requestOpenIdAuthInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestOpenIdAuthInfoSignalE(output, error_type, error_str);
        Q_EMIT requestOpenIdAuthInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestOpenIdAuthInfoSignalError(output, error_type, error_str);
        Q_EMIT requestOpenIdAuthInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestPublicDownloadShareInfo(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["requestPublicDownloadShareInfo"][_serverIndices.value("requestPublicDownloadShareInfo")].URL()+"/v4/public/shares/downloads/{access_key}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestPublicDownloadShareInfoCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestPublicDownloadShareInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicDownloadShare output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestPublicDownloadShareInfoSignal(output);
        Q_EMIT requestPublicDownloadShareInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestPublicDownloadShareInfoSignalE(output, error_type, error_str);
        Q_EMIT requestPublicDownloadShareInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestPublicDownloadShareInfoSignalError(output, error_type, error_str);
        Q_EMIT requestPublicDownloadShareInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestPublicUploadShareInfo(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &x_sds_share_password, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["requestPublicUploadShareInfo"][_serverIndices.value("requestPublicUploadShareInfo")].URL()+"/v4/public/shares/uploads/{access_key}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_sds_share_password.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_share_password.value()).isEmpty()) {
            input.headers.insert("X-Sds-Share-Password", ::OpenAPI::toStringValue(x_sds_share_password.value()));
        }
        }
    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestPublicUploadShareInfoCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestPublicUploadShareInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPublicUploadShare output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestPublicUploadShareInfoSignal(output);
        Q_EMIT requestPublicUploadShareInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestPublicUploadShareInfoSignalE(output, error_type, error_str);
        Q_EMIT requestPublicUploadShareInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestPublicUploadShareInfoSignalError(output, error_type, error_str);
        Q_EMIT requestPublicUploadShareInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestSoftwareVersion(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["requestSoftwareVersion"][_serverIndices.value("requestSoftwareVersion")].URL()+"/v4/public/software/version");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestSoftwareVersionCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestSoftwareVersionCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISoftwareVersionData output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestSoftwareVersionSignal(output);
        Q_EMIT requestSoftwareVersionSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestSoftwareVersionSignalE(output, error_type, error_str);
        Q_EMIT requestSoftwareVersionSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestSoftwareVersionSignalError(output, error_type, error_str);
        Q_EMIT requestSoftwareVersionSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestSystemInfo(const ::OpenAPI::OptionalParam<bool> &is_enabled) {
    QString fullPath = QString(_serverConfigs["requestSystemInfo"][_serverIndices.value("requestSystemInfo")].URL()+"/v4/public/system/info");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (is_enabled.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "is_enabled", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("is_enabled")).append(querySuffix).append(QUrl::toPercentEncoding(is_enabled.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestSystemInfoCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestSystemInfoCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISystemInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestSystemInfoSignal(output);
        Q_EMIT requestSystemInfoSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestSystemInfoSignalE(output, error_type, error_str);
        Q_EMIT requestSystemInfoSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestSystemInfoSignalError(output, error_type, error_str);
        Q_EMIT requestSystemInfoSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestSystemTime(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["requestSystemTime"][_serverIndices.value("requestSystemTime")].URL()+"/v4/public/time");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestSystemTimeCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestSystemTimeCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISdsServerTime output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestSystemTimeSignal(output);
        Q_EMIT requestSystemTimeSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestSystemTimeSignalE(output, error_type, error_str);
        Q_EMIT requestSystemTimeSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestSystemTimeSignalError(output, error_type, error_str);
        Q_EMIT requestSystemTimeSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestThirdPartyDependencies() {
    QString fullPath = QString(_serverConfigs["requestThirdPartyDependencies"][_serverIndices.value("requestThirdPartyDependencies")].URL()+"/v4/public/software/third_party_dependencies");
    
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestThirdPartyDependenciesCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestThirdPartyDependenciesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<OAIThirdPartyDependenciesData> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        OAIThirdPartyDependenciesData val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestThirdPartyDependenciesSignal(output);
        Q_EMIT requestThirdPartyDependenciesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestThirdPartyDependenciesSignalE(output, error_type, error_str);
        Q_EMIT requestThirdPartyDependenciesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestThirdPartyDependenciesSignalError(output, error_type, error_str);
        Q_EMIT requestThirdPartyDependenciesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::requestUploadStatusPublic(const QString &access_key, const QString &upload_id) {
    QString fullPath = QString(_serverConfigs["requestUploadStatusPublic"][_serverIndices.value("requestUploadStatusPublic")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::requestUploadStatusPublicCallback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::requestUploadStatusPublicCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIS3ShareUploadStatus output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT requestUploadStatusPublicSignal(output);
        Q_EMIT requestUploadStatusPublicSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT requestUploadStatusPublicSignalE(output, error_type, error_str);
        Q_EMIT requestUploadStatusPublicSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT requestUploadStatusPublicSignalError(output, error_type, error_str);
        Q_EMIT requestUploadStatusPublicSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::uploadFileAsMultipartPublic1(const QString &access_key, const QString &upload_id, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &content_range, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format) {
    QString fullPath = QString(_serverConfigs["uploadFileAsMultipartPublic1"][_serverIndices.value("uploadFileAsMultipartPublic1")].URL()+"/v4/public/shares/uploads/{access_key}/{upload_id}");
    
    
    {
        QString access_keyPathParam("{");
        access_keyPathParam.append("access_key").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "access_key", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"access_key"+pathSuffix : pathPrefix;
        fullPath.replace(access_keyPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(access_key)));
    }
    
    {
        QString upload_idPathParam("{");
        upload_idPathParam.append("upload_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "upload_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"upload_id"+pathSuffix : pathPrefix;
        fullPath.replace(upload_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(upload_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    
    {
        input.add_file("file", file.local_filename, file.request_filename, file.mime_type);
    }

    if (content_range.hasValue())
    {
        if (!::OpenAPI::toStringValue(content_range.value()).isEmpty()) {
            input.headers.insert("Content-Range", ::OpenAPI::toStringValue(content_range.value()));
        }
        }
    if (x_sds_date_format.hasValue())
    {
        if (!::OpenAPI::toStringValue(x_sds_date_format.value()).isEmpty()) {
            input.headers.insert("X-Sds-Date-Format", ::OpenAPI::toStringValue(x_sds_date_format.value()));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPublicApi::uploadFileAsMultipartPublic1Callback);
    connect(this, &OAIPublicApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPublicApi::uploadFileAsMultipartPublic1Callback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIChunkUploadResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT uploadFileAsMultipartPublic1Signal(output);
        Q_EMIT uploadFileAsMultipartPublic1SignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT uploadFileAsMultipartPublic1SignalE(output, error_type, error_str);
        Q_EMIT uploadFileAsMultipartPublic1SignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT uploadFileAsMultipartPublic1SignalError(output, error_type, error_str);
        Q_EMIT uploadFileAsMultipartPublic1SignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPublicApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
