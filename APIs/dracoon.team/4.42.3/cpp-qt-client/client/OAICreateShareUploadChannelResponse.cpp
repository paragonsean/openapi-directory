/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateShareUploadChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateShareUploadChannelResponse::OAICreateShareUploadChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateShareUploadChannelResponse::OAICreateShareUploadChannelResponse() {
    this->initializeModel();
}

OAICreateShareUploadChannelResponse::~OAICreateShareUploadChannelResponse() {}

void OAICreateShareUploadChannelResponse::initializeModel() {

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;

    m_upload_url_isSet = false;
    m_upload_url_isValid = false;
}

void OAICreateShareUploadChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateShareUploadChannelResponse::fromJsonObject(QJsonObject json) {

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("uploadId")]);
    m_upload_id_isSet = !json[QString("uploadId")].isNull() && m_upload_id_isValid;

    m_upload_url_isValid = ::OpenAPI::fromJsonValue(m_upload_url, json[QString("uploadUrl")]);
    m_upload_url_isSet = !json[QString("uploadUrl")].isNull() && m_upload_url_isValid;
}

QString OAICreateShareUploadChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateShareUploadChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_upload_id_isSet) {
        obj.insert(QString("uploadId"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    if (m_upload_url_isSet) {
        obj.insert(QString("uploadUrl"), ::OpenAPI::toJsonValue(m_upload_url));
    }
    return obj;
}

QString OAICreateShareUploadChannelResponse::getUploadId() const {
    return m_upload_id;
}
void OAICreateShareUploadChannelResponse::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAICreateShareUploadChannelResponse::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAICreateShareUploadChannelResponse::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

QString OAICreateShareUploadChannelResponse::getUploadUrl() const {
    return m_upload_url;
}
void OAICreateShareUploadChannelResponse::setUploadUrl(const QString &upload_url) {
    m_upload_url = upload_url;
    m_upload_url_isSet = true;
}

bool OAICreateShareUploadChannelResponse::is_upload_url_Set() const{
    return m_upload_url_isSet;
}

bool OAICreateShareUploadChannelResponse::is_upload_url_Valid() const{
    return m_upload_url_isValid;
}

bool OAICreateShareUploadChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateShareUploadChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_upload_id_isValid && m_upload_url_isValid && true;
}

} // namespace OpenAPI
