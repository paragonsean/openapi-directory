/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoomPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoomPolicies::OAIRoomPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoomPolicies::OAIRoomPolicies() {
    this->initializeModel();
}

OAIRoomPolicies::~OAIRoomPolicies() {}

void OAIRoomPolicies::initializeModel() {

    m_default_expiration_period_isSet = false;
    m_default_expiration_period_isValid = false;
}

void OAIRoomPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoomPolicies::fromJsonObject(QJsonObject json) {

    m_default_expiration_period_isValid = ::OpenAPI::fromJsonValue(m_default_expiration_period, json[QString("defaultExpirationPeriod")]);
    m_default_expiration_period_isSet = !json[QString("defaultExpirationPeriod")].isNull() && m_default_expiration_period_isValid;
}

QString OAIRoomPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoomPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_default_expiration_period_isSet) {
        obj.insert(QString("defaultExpirationPeriod"), ::OpenAPI::toJsonValue(m_default_expiration_period));
    }
    return obj;
}

qint32 OAIRoomPolicies::getDefaultExpirationPeriod() const {
    return m_default_expiration_period;
}
void OAIRoomPolicies::setDefaultExpirationPeriod(const qint32 &default_expiration_period) {
    m_default_expiration_period = default_expiration_period;
    m_default_expiration_period_isSet = true;
}

bool OAIRoomPolicies::is_default_expiration_period_Set() const{
    return m_default_expiration_period_isSet;
}

bool OAIRoomPolicies::is_default_expiration_period_Valid() const{
    return m_default_expiration_period_isValid;
}

bool OAIRoomPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_expiration_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoomPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_default_expiration_period_isValid && true;
}

} // namespace OpenAPI
