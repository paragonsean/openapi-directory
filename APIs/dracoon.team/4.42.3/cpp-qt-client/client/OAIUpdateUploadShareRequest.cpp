/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUploadShareRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUploadShareRequest::OAIUpdateUploadShareRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUploadShareRequest::OAIUpdateUploadShareRequest() {
    this->initializeModel();
}

OAIUpdateUploadShareRequest::~OAIUpdateUploadShareRequest() {}

void OAIUpdateUploadShareRequest::initializeModel() {

    m_default_country_isSet = false;
    m_default_country_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_files_expiry_period_isSet = false;
    m_files_expiry_period_isValid = false;

    m_internal_notes_isSet = false;
    m_internal_notes_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_max_slots_isSet = false;
    m_max_slots_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_notify_creator_isSet = false;
    m_notify_creator_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_receiver_language_isSet = false;
    m_receiver_language_isValid = false;

    m_reset_files_expiry_period_isSet = false;
    m_reset_files_expiry_period_isValid = false;

    m_reset_max_size_isSet = false;
    m_reset_max_size_isValid = false;

    m_reset_max_slots_isSet = false;
    m_reset_max_slots_isValid = false;

    m_reset_password_isSet = false;
    m_reset_password_isValid = false;

    m_show_creator_name_isSet = false;
    m_show_creator_name_isValid = false;

    m_show_creator_username_isSet = false;
    m_show_creator_username_isValid = false;

    m_show_uploaded_files_isSet = false;
    m_show_uploaded_files_isValid = false;

    m_text_message_recipients_isSet = false;
    m_text_message_recipients_isValid = false;
}

void OAIUpdateUploadShareRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUploadShareRequest::fromJsonObject(QJsonObject json) {

    m_default_country_isValid = ::OpenAPI::fromJsonValue(m_default_country, json[QString("defaultCountry")]);
    m_default_country_isSet = !json[QString("defaultCountry")].isNull() && m_default_country_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_files_expiry_period_isValid = ::OpenAPI::fromJsonValue(m_files_expiry_period, json[QString("filesExpiryPeriod")]);
    m_files_expiry_period_isSet = !json[QString("filesExpiryPeriod")].isNull() && m_files_expiry_period_isValid;

    m_internal_notes_isValid = ::OpenAPI::fromJsonValue(m_internal_notes, json[QString("internalNotes")]);
    m_internal_notes_isSet = !json[QString("internalNotes")].isNull() && m_internal_notes_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;

    m_max_slots_isValid = ::OpenAPI::fromJsonValue(m_max_slots, json[QString("maxSlots")]);
    m_max_slots_isSet = !json[QString("maxSlots")].isNull() && m_max_slots_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_notify_creator_isValid = ::OpenAPI::fromJsonValue(m_notify_creator, json[QString("notifyCreator")]);
    m_notify_creator_isSet = !json[QString("notifyCreator")].isNull() && m_notify_creator_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_receiver_language_isValid = ::OpenAPI::fromJsonValue(m_receiver_language, json[QString("receiverLanguage")]);
    m_receiver_language_isSet = !json[QString("receiverLanguage")].isNull() && m_receiver_language_isValid;

    m_reset_files_expiry_period_isValid = ::OpenAPI::fromJsonValue(m_reset_files_expiry_period, json[QString("resetFilesExpiryPeriod")]);
    m_reset_files_expiry_period_isSet = !json[QString("resetFilesExpiryPeriod")].isNull() && m_reset_files_expiry_period_isValid;

    m_reset_max_size_isValid = ::OpenAPI::fromJsonValue(m_reset_max_size, json[QString("resetMaxSize")]);
    m_reset_max_size_isSet = !json[QString("resetMaxSize")].isNull() && m_reset_max_size_isValid;

    m_reset_max_slots_isValid = ::OpenAPI::fromJsonValue(m_reset_max_slots, json[QString("resetMaxSlots")]);
    m_reset_max_slots_isSet = !json[QString("resetMaxSlots")].isNull() && m_reset_max_slots_isValid;

    m_reset_password_isValid = ::OpenAPI::fromJsonValue(m_reset_password, json[QString("resetPassword")]);
    m_reset_password_isSet = !json[QString("resetPassword")].isNull() && m_reset_password_isValid;

    m_show_creator_name_isValid = ::OpenAPI::fromJsonValue(m_show_creator_name, json[QString("showCreatorName")]);
    m_show_creator_name_isSet = !json[QString("showCreatorName")].isNull() && m_show_creator_name_isValid;

    m_show_creator_username_isValid = ::OpenAPI::fromJsonValue(m_show_creator_username, json[QString("showCreatorUsername")]);
    m_show_creator_username_isSet = !json[QString("showCreatorUsername")].isNull() && m_show_creator_username_isValid;

    m_show_uploaded_files_isValid = ::OpenAPI::fromJsonValue(m_show_uploaded_files, json[QString("showUploadedFiles")]);
    m_show_uploaded_files_isSet = !json[QString("showUploadedFiles")].isNull() && m_show_uploaded_files_isValid;

    m_text_message_recipients_isValid = ::OpenAPI::fromJsonValue(m_text_message_recipients, json[QString("textMessageRecipients")]);
    m_text_message_recipients_isSet = !json[QString("textMessageRecipients")].isNull() && m_text_message_recipients_isValid;
}

QString OAIUpdateUploadShareRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUploadShareRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_default_country_isSet) {
        obj.insert(QString("defaultCountry"), ::OpenAPI::toJsonValue(m_default_country));
    }
    if (m_expiration.isSet()) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_files_expiry_period_isSet) {
        obj.insert(QString("filesExpiryPeriod"), ::OpenAPI::toJsonValue(m_files_expiry_period));
    }
    if (m_internal_notes_isSet) {
        obj.insert(QString("internalNotes"), ::OpenAPI::toJsonValue(m_internal_notes));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_max_slots_isSet) {
        obj.insert(QString("maxSlots"), ::OpenAPI::toJsonValue(m_max_slots));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_notify_creator_isSet) {
        obj.insert(QString("notifyCreator"), ::OpenAPI::toJsonValue(m_notify_creator));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_receiver_language_isSet) {
        obj.insert(QString("receiverLanguage"), ::OpenAPI::toJsonValue(m_receiver_language));
    }
    if (m_reset_files_expiry_period_isSet) {
        obj.insert(QString("resetFilesExpiryPeriod"), ::OpenAPI::toJsonValue(m_reset_files_expiry_period));
    }
    if (m_reset_max_size_isSet) {
        obj.insert(QString("resetMaxSize"), ::OpenAPI::toJsonValue(m_reset_max_size));
    }
    if (m_reset_max_slots_isSet) {
        obj.insert(QString("resetMaxSlots"), ::OpenAPI::toJsonValue(m_reset_max_slots));
    }
    if (m_reset_password_isSet) {
        obj.insert(QString("resetPassword"), ::OpenAPI::toJsonValue(m_reset_password));
    }
    if (m_show_creator_name_isSet) {
        obj.insert(QString("showCreatorName"), ::OpenAPI::toJsonValue(m_show_creator_name));
    }
    if (m_show_creator_username_isSet) {
        obj.insert(QString("showCreatorUsername"), ::OpenAPI::toJsonValue(m_show_creator_username));
    }
    if (m_show_uploaded_files_isSet) {
        obj.insert(QString("showUploadedFiles"), ::OpenAPI::toJsonValue(m_show_uploaded_files));
    }
    if (m_text_message_recipients.size() > 0) {
        obj.insert(QString("textMessageRecipients"), ::OpenAPI::toJsonValue(m_text_message_recipients));
    }
    return obj;
}

QString OAIUpdateUploadShareRequest::getDefaultCountry() const {
    return m_default_country;
}
void OAIUpdateUploadShareRequest::setDefaultCountry(const QString &default_country) {
    m_default_country = default_country;
    m_default_country_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_default_country_Set() const{
    return m_default_country_isSet;
}

bool OAIUpdateUploadShareRequest::is_default_country_Valid() const{
    return m_default_country_isValid;
}

OAIObjectExpiration OAIUpdateUploadShareRequest::getExpiration() const {
    return m_expiration;
}
void OAIUpdateUploadShareRequest::setExpiration(const OAIObjectExpiration &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIUpdateUploadShareRequest::is_expiration_Valid() const{
    return m_expiration_isValid;
}

qint32 OAIUpdateUploadShareRequest::getFilesExpiryPeriod() const {
    return m_files_expiry_period;
}
void OAIUpdateUploadShareRequest::setFilesExpiryPeriod(const qint32 &files_expiry_period) {
    m_files_expiry_period = files_expiry_period;
    m_files_expiry_period_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_files_expiry_period_Set() const{
    return m_files_expiry_period_isSet;
}

bool OAIUpdateUploadShareRequest::is_files_expiry_period_Valid() const{
    return m_files_expiry_period_isValid;
}

QString OAIUpdateUploadShareRequest::getInternalNotes() const {
    return m_internal_notes;
}
void OAIUpdateUploadShareRequest::setInternalNotes(const QString &internal_notes) {
    m_internal_notes = internal_notes;
    m_internal_notes_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_internal_notes_Set() const{
    return m_internal_notes_isSet;
}

bool OAIUpdateUploadShareRequest::is_internal_notes_Valid() const{
    return m_internal_notes_isValid;
}

qint64 OAIUpdateUploadShareRequest::getMaxSize() const {
    return m_max_size;
}
void OAIUpdateUploadShareRequest::setMaxSize(const qint64 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIUpdateUploadShareRequest::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAIUpdateUploadShareRequest::getMaxSlots() const {
    return m_max_slots;
}
void OAIUpdateUploadShareRequest::setMaxSlots(const qint32 &max_slots) {
    m_max_slots = max_slots;
    m_max_slots_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_max_slots_Set() const{
    return m_max_slots_isSet;
}

bool OAIUpdateUploadShareRequest::is_max_slots_Valid() const{
    return m_max_slots_isValid;
}

QString OAIUpdateUploadShareRequest::getName() const {
    return m_name;
}
void OAIUpdateUploadShareRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateUploadShareRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateUploadShareRequest::getNotes() const {
    return m_notes;
}
void OAIUpdateUploadShareRequest::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIUpdateUploadShareRequest::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIUpdateUploadShareRequest::isNotifyCreator() const {
    return m_notify_creator;
}
void OAIUpdateUploadShareRequest::setNotifyCreator(const bool &notify_creator) {
    m_notify_creator = notify_creator;
    m_notify_creator_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_notify_creator_Set() const{
    return m_notify_creator_isSet;
}

bool OAIUpdateUploadShareRequest::is_notify_creator_Valid() const{
    return m_notify_creator_isValid;
}

QString OAIUpdateUploadShareRequest::getPassword() const {
    return m_password;
}
void OAIUpdateUploadShareRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUpdateUploadShareRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUpdateUploadShareRequest::getReceiverLanguage() const {
    return m_receiver_language;
}
void OAIUpdateUploadShareRequest::setReceiverLanguage(const QString &receiver_language) {
    m_receiver_language = receiver_language;
    m_receiver_language_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_receiver_language_Set() const{
    return m_receiver_language_isSet;
}

bool OAIUpdateUploadShareRequest::is_receiver_language_Valid() const{
    return m_receiver_language_isValid;
}

bool OAIUpdateUploadShareRequest::isResetFilesExpiryPeriod() const {
    return m_reset_files_expiry_period;
}
void OAIUpdateUploadShareRequest::setResetFilesExpiryPeriod(const bool &reset_files_expiry_period) {
    m_reset_files_expiry_period = reset_files_expiry_period;
    m_reset_files_expiry_period_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_reset_files_expiry_period_Set() const{
    return m_reset_files_expiry_period_isSet;
}

bool OAIUpdateUploadShareRequest::is_reset_files_expiry_period_Valid() const{
    return m_reset_files_expiry_period_isValid;
}

bool OAIUpdateUploadShareRequest::isResetMaxSize() const {
    return m_reset_max_size;
}
void OAIUpdateUploadShareRequest::setResetMaxSize(const bool &reset_max_size) {
    m_reset_max_size = reset_max_size;
    m_reset_max_size_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_reset_max_size_Set() const{
    return m_reset_max_size_isSet;
}

bool OAIUpdateUploadShareRequest::is_reset_max_size_Valid() const{
    return m_reset_max_size_isValid;
}

bool OAIUpdateUploadShareRequest::isResetMaxSlots() const {
    return m_reset_max_slots;
}
void OAIUpdateUploadShareRequest::setResetMaxSlots(const bool &reset_max_slots) {
    m_reset_max_slots = reset_max_slots;
    m_reset_max_slots_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_reset_max_slots_Set() const{
    return m_reset_max_slots_isSet;
}

bool OAIUpdateUploadShareRequest::is_reset_max_slots_Valid() const{
    return m_reset_max_slots_isValid;
}

bool OAIUpdateUploadShareRequest::isResetPassword() const {
    return m_reset_password;
}
void OAIUpdateUploadShareRequest::setResetPassword(const bool &reset_password) {
    m_reset_password = reset_password;
    m_reset_password_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_reset_password_Set() const{
    return m_reset_password_isSet;
}

bool OAIUpdateUploadShareRequest::is_reset_password_Valid() const{
    return m_reset_password_isValid;
}

bool OAIUpdateUploadShareRequest::isShowCreatorName() const {
    return m_show_creator_name;
}
void OAIUpdateUploadShareRequest::setShowCreatorName(const bool &show_creator_name) {
    m_show_creator_name = show_creator_name;
    m_show_creator_name_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_show_creator_name_Set() const{
    return m_show_creator_name_isSet;
}

bool OAIUpdateUploadShareRequest::is_show_creator_name_Valid() const{
    return m_show_creator_name_isValid;
}

bool OAIUpdateUploadShareRequest::isShowCreatorUsername() const {
    return m_show_creator_username;
}
void OAIUpdateUploadShareRequest::setShowCreatorUsername(const bool &show_creator_username) {
    m_show_creator_username = show_creator_username;
    m_show_creator_username_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_show_creator_username_Set() const{
    return m_show_creator_username_isSet;
}

bool OAIUpdateUploadShareRequest::is_show_creator_username_Valid() const{
    return m_show_creator_username_isValid;
}

bool OAIUpdateUploadShareRequest::isShowUploadedFiles() const {
    return m_show_uploaded_files;
}
void OAIUpdateUploadShareRequest::setShowUploadedFiles(const bool &show_uploaded_files) {
    m_show_uploaded_files = show_uploaded_files;
    m_show_uploaded_files_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_show_uploaded_files_Set() const{
    return m_show_uploaded_files_isSet;
}

bool OAIUpdateUploadShareRequest::is_show_uploaded_files_Valid() const{
    return m_show_uploaded_files_isValid;
}

QList<QString> OAIUpdateUploadShareRequest::getTextMessageRecipients() const {
    return m_text_message_recipients;
}
void OAIUpdateUploadShareRequest::setTextMessageRecipients(const QList<QString> &text_message_recipients) {
    m_text_message_recipients = text_message_recipients;
    m_text_message_recipients_isSet = true;
}

bool OAIUpdateUploadShareRequest::is_text_message_recipients_Set() const{
    return m_text_message_recipients_isSet;
}

bool OAIUpdateUploadShareRequest::is_text_message_recipients_Valid() const{
    return m_text_message_recipients_isValid;
}

bool OAIUpdateUploadShareRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_expiry_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_files_expiry_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_max_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_uploaded_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_message_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUploadShareRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
