/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserAccount.h
 *
 * User information
 */

#ifndef OAIUserAccount_H
#define OAIUserAccount_H

#include <QJsonObject>

#include "OAIRoleList.h"
#include "OAIUserAttributes.h"
#include "OAIUserAuthData.h"
#include "OAIUserAuthMethod.h"
#include "OAIUserGroup.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserAuthData;
class OAIUserAuthMethod;
class OAIUserAttributes;
class OAIUserGroup;
class OAIRoleList;

class OAIUserAccount : public OAIObject {
public:
    OAIUserAccount();
    OAIUserAccount(QString json);
    ~OAIUserAccount() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIUserAuthData getAuthData() const;
    void setAuthData(const OAIUserAuthData &auth_data);
    bool is_auth_data_Set() const;
    bool is_auth_data_Valid() const;

    Q_DECL_DEPRECATED QList<OAIUserAuthMethod> getAuthMethods() const;
    Q_DECL_DEPRECATED void setAuthMethods(const QList<OAIUserAuthMethod> &auth_methods);
    Q_DECL_DEPRECATED bool is_auth_methods_Set() const;
    Q_DECL_DEPRECATED bool is_auth_methods_Valid() const;

    QString getEmail() const;
    void setEmail(const QString &email);
    bool is_email_Set() const;
    bool is_email_Valid() const;

    QDateTime getExpireAt() const;
    void setExpireAt(const QDateTime &expire_at);
    bool is_expire_at_Set() const;
    bool is_expire_at_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    Q_DECL_DEPRECATED QString getGender() const;
    Q_DECL_DEPRECATED void setGender(const QString &gender);
    Q_DECL_DEPRECATED bool is_gender_Set() const;
    Q_DECL_DEPRECATED bool is_gender_Valid() const;

    bool isHasManageableRooms() const;
    void setHasManageableRooms(const bool &has_manageable_rooms);
    bool is_has_manageable_rooms_Set() const;
    bool is_has_manageable_rooms_Valid() const;

    qint64 getHomeRoomId() const;
    void setHomeRoomId(const qint64 &home_room_id);
    bool is_home_room_id_Set() const;
    bool is_home_room_id_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsEncryptionEnabled() const;
    void setIsEncryptionEnabled(const bool &is_encryption_enabled);
    bool is_is_encryption_enabled_Set() const;
    bool is_is_encryption_enabled_Valid() const;

    bool isIsLocked() const;
    void setIsLocked(const bool &is_locked);
    bool is_is_locked_Set() const;
    bool is_is_locked_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QDateTime getLastLoginFailAt() const;
    void setLastLoginFailAt(const QDateTime &last_login_fail_at);
    bool is_last_login_fail_at_Set() const;
    bool is_last_login_fail_at_Valid() const;

    Q_DECL_DEPRECATED QString getLastLoginFailIp() const;
    Q_DECL_DEPRECATED void setLastLoginFailIp(const QString &last_login_fail_ip);
    Q_DECL_DEPRECATED bool is_last_login_fail_ip_Set() const;
    Q_DECL_DEPRECATED bool is_last_login_fail_ip_Valid() const;

    QDateTime getLastLoginSuccessAt() const;
    void setLastLoginSuccessAt(const QDateTime &last_login_success_at);
    bool is_last_login_success_at_Set() const;
    bool is_last_login_success_at_Valid() const;

    Q_DECL_DEPRECATED QString getLastLoginSuccessIp() const;
    Q_DECL_DEPRECATED void setLastLoginSuccessIp(const QString &last_login_success_ip);
    Q_DECL_DEPRECATED bool is_last_login_success_ip_Set() const;
    Q_DECL_DEPRECATED bool is_last_login_success_ip_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    Q_DECL_DEPRECATED qint32 getLockStatus() const;
    Q_DECL_DEPRECATED void setLockStatus(const qint32 &lock_status);
    Q_DECL_DEPRECATED bool is_lock_status_Set() const;
    Q_DECL_DEPRECATED bool is_lock_status_Valid() const;

    Q_DECL_DEPRECATED QString getLogin() const;
    Q_DECL_DEPRECATED void setLogin(const QString &login);
    Q_DECL_DEPRECATED bool is_login_Set() const;
    Q_DECL_DEPRECATED bool is_login_Valid() const;

    bool isMustSetEmail() const;
    void setMustSetEmail(const bool &must_set_email);
    bool is_must_set_email_Set() const;
    bool is_must_set_email_Valid() const;

    bool isNeedsToAcceptEula() const;
    void setNeedsToAcceptEula(const bool &needs_to_accept_eula);
    bool is_needs_to_accept_eula_Set() const;
    bool is_needs_to_accept_eula_Valid() const;

    Q_DECL_DEPRECATED bool isNeedsToChangePassword() const;
    Q_DECL_DEPRECATED void setNeedsToChangePassword(const bool &needs_to_change_password);
    Q_DECL_DEPRECATED bool is_needs_to_change_password_Set() const;
    Q_DECL_DEPRECATED bool is_needs_to_change_password_Valid() const;

    Q_DECL_DEPRECATED bool isNeedsToChangeUserName() const;
    Q_DECL_DEPRECATED void setNeedsToChangeUserName(const bool &needs_to_change_user_name);
    Q_DECL_DEPRECATED bool is_needs_to_change_user_name_Set() const;
    Q_DECL_DEPRECATED bool is_needs_to_change_user_name_Valid() const;

    QString getPhone() const;
    void setPhone(const QString &phone);
    bool is_phone_Set() const;
    bool is_phone_Valid() const;

    Q_DECL_DEPRECATED QString getTitle() const;
    Q_DECL_DEPRECATED void setTitle(const QString &title);
    Q_DECL_DEPRECATED bool is_title_Set() const;
    Q_DECL_DEPRECATED bool is_title_Valid() const;

    Q_DECL_DEPRECATED OAIUserAttributes getUserAttributes() const;
    Q_DECL_DEPRECATED void setUserAttributes(const OAIUserAttributes &user_attributes);
    Q_DECL_DEPRECATED bool is_user_attributes_Set() const;
    Q_DECL_DEPRECATED bool is_user_attributes_Valid() const;

    QList<OAIUserGroup> getUserGroups() const;
    void setUserGroups(const QList<OAIUserGroup> &user_groups);
    bool is_user_groups_Set() const;
    bool is_user_groups_Valid() const;

    QString getUserName() const;
    void setUserName(const QString &user_name);
    bool is_user_name_Set() const;
    bool is_user_name_Valid() const;

    OAIRoleList getUserRoles() const;
    void setUserRoles(const OAIRoleList &user_roles);
    bool is_user_roles_Set() const;
    bool is_user_roles_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIUserAuthData m_auth_data;
    bool m_auth_data_isSet;
    bool m_auth_data_isValid;

    QList<OAIUserAuthMethod> m_auth_methods;
    bool m_auth_methods_isSet;
    bool m_auth_methods_isValid;

    QString m_email;
    bool m_email_isSet;
    bool m_email_isValid;

    QDateTime m_expire_at;
    bool m_expire_at_isSet;
    bool m_expire_at_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_gender;
    bool m_gender_isSet;
    bool m_gender_isValid;

    bool m_has_manageable_rooms;
    bool m_has_manageable_rooms_isSet;
    bool m_has_manageable_rooms_isValid;

    qint64 m_home_room_id;
    bool m_home_room_id_isSet;
    bool m_home_room_id_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_encryption_enabled;
    bool m_is_encryption_enabled_isSet;
    bool m_is_encryption_enabled_isValid;

    bool m_is_locked;
    bool m_is_locked_isSet;
    bool m_is_locked_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QDateTime m_last_login_fail_at;
    bool m_last_login_fail_at_isSet;
    bool m_last_login_fail_at_isValid;

    QString m_last_login_fail_ip;
    bool m_last_login_fail_ip_isSet;
    bool m_last_login_fail_ip_isValid;

    QDateTime m_last_login_success_at;
    bool m_last_login_success_at_isSet;
    bool m_last_login_success_at_isValid;

    QString m_last_login_success_ip;
    bool m_last_login_success_ip_isSet;
    bool m_last_login_success_ip_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    qint32 m_lock_status;
    bool m_lock_status_isSet;
    bool m_lock_status_isValid;

    QString m_login;
    bool m_login_isSet;
    bool m_login_isValid;

    bool m_must_set_email;
    bool m_must_set_email_isSet;
    bool m_must_set_email_isValid;

    bool m_needs_to_accept_eula;
    bool m_needs_to_accept_eula_isSet;
    bool m_needs_to_accept_eula_isValid;

    bool m_needs_to_change_password;
    bool m_needs_to_change_password_isSet;
    bool m_needs_to_change_password_isValid;

    bool m_needs_to_change_user_name;
    bool m_needs_to_change_user_name_isSet;
    bool m_needs_to_change_user_name_isValid;

    QString m_phone;
    bool m_phone_isSet;
    bool m_phone_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    OAIUserAttributes m_user_attributes;
    bool m_user_attributes_isSet;
    bool m_user_attributes_isValid;

    QList<OAIUserGroup> m_user_groups;
    bool m_user_groups_isSet;
    bool m_user_groups_isValid;

    QString m_user_name;
    bool m_user_name_isSet;
    bool m_user_name_isValid;

    OAIRoleList m_user_roles;
    bool m_user_roles_isSet;
    bool m_user_roles_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserAccount)

#endif // OAIUserAccount_H
