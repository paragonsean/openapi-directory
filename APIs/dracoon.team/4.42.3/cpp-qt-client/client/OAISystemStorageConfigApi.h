/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemStorageConfigApi_H
#define OAI_OAISystemStorageConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIS3Config.h"
#include "OAIS3ConfigCreateRequest.h"
#include "OAIS3ConfigUpdateRequest.h"
#include "OAIS3Tag.h"
#include "OAIS3TagCreateRequest.h"
#include "OAIS3TagList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemStorageConfigApi : public QObject {
    Q_OBJECT

public:
    OAISystemStorageConfigApi(const int timeOut = 0);
    ~OAISystemStorageConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oais3_config_create_request OAIS3ConfigCreateRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createS3Config(const OAIS3ConfigCreateRequest &oais3_config_create_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oais3_tag_create_request OAIS3TagCreateRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createS3Tag(const OAIS3TagCreateRequest &oais3_tag_create_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeS3Tag(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void request3Config(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestS3Tag(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestS3TagList(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oais3_config_update_request OAIS3ConfigUpdateRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateS3Config(const OAIS3ConfigUpdateRequest &oais3_config_update_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createS3ConfigCallback(OAIHttpRequestWorker *worker);
    void createS3TagCallback(OAIHttpRequestWorker *worker);
    void removeS3TagCallback(OAIHttpRequestWorker *worker);
    void request3ConfigCallback(OAIHttpRequestWorker *worker);
    void requestS3TagCallback(OAIHttpRequestWorker *worker);
    void requestS3TagListCallback(OAIHttpRequestWorker *worker);
    void updateS3ConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createS3ConfigSignal(OAIS3Config summary);
    void createS3TagSignal(OAIS3Tag summary);
    void removeS3TagSignal();
    void request3ConfigSignal(OAIS3Config summary);
    void requestS3TagSignal(OAIS3Tag summary);
    void requestS3TagListSignal(OAIS3TagList summary);
    void updateS3ConfigSignal(OAIS3Config summary);


    void createS3ConfigSignalFull(OAIHttpRequestWorker *worker, OAIS3Config summary);
    void createS3TagSignalFull(OAIHttpRequestWorker *worker, OAIS3Tag summary);
    void removeS3TagSignalFull(OAIHttpRequestWorker *worker);
    void request3ConfigSignalFull(OAIHttpRequestWorker *worker, OAIS3Config summary);
    void requestS3TagSignalFull(OAIHttpRequestWorker *worker, OAIS3Tag summary);
    void requestS3TagListSignalFull(OAIHttpRequestWorker *worker, OAIS3TagList summary);
    void updateS3ConfigSignalFull(OAIHttpRequestWorker *worker, OAIS3Config summary);

    Q_DECL_DEPRECATED_X("Use createS3ConfigSignalError() instead")
    void createS3ConfigSignalE(OAIS3Config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createS3ConfigSignalError(OAIS3Config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createS3TagSignalError() instead")
    void createS3TagSignalE(OAIS3Tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createS3TagSignalError(OAIS3Tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeS3TagSignalError() instead")
    void removeS3TagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeS3TagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use request3ConfigSignalError() instead")
    void request3ConfigSignalE(OAIS3Config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void request3ConfigSignalError(OAIS3Config summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagSignalError() instead")
    void requestS3TagSignalE(OAIS3Tag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagSignalError(OAIS3Tag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagListSignalError() instead")
    void requestS3TagListSignalE(OAIS3TagList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagListSignalError(OAIS3TagList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateS3ConfigSignalError() instead")
    void updateS3ConfigSignalE(OAIS3Config summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateS3ConfigSignalError(OAIS3Config summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createS3ConfigSignalErrorFull() instead")
    void createS3ConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createS3ConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createS3TagSignalErrorFull() instead")
    void createS3TagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createS3TagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeS3TagSignalErrorFull() instead")
    void removeS3TagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeS3TagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use request3ConfigSignalErrorFull() instead")
    void request3ConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void request3ConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagSignalErrorFull() instead")
    void requestS3TagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestS3TagListSignalErrorFull() instead")
    void requestS3TagListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestS3TagListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateS3ConfigSignalErrorFull() instead")
    void updateS3ConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateS3ConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
