/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogEvent::OAILogEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogEvent::OAILogEvent() {
    this->initializeModel();
}

OAILogEvent::~OAILogEvent() {}

void OAILogEvent::initializeModel() {

    m_attribute1_isSet = false;
    m_attribute1_isValid = false;

    m_attribute2_isSet = false;
    m_attribute2_isValid = false;

    m_attribute3_isSet = false;
    m_attribute3_isValid = false;

    m_auth_parent_source_isSet = false;
    m_auth_parent_source_isValid = false;

    m_auth_parent_target_isSet = false;
    m_auth_parent_target_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_object_id1_isSet = false;
    m_object_id1_isValid = false;

    m_object_id2_isSet = false;
    m_object_id2_isValid = false;

    m_object_name1_isSet = false;
    m_object_name1_isValid = false;

    m_object_name2_isSet = false;
    m_object_name2_isValid = false;

    m_object_type1_isSet = false;
    m_object_type1_isValid = false;

    m_object_type2_isSet = false;
    m_object_type2_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_user_client_isSet = false;
    m_user_client_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_ip_isSet = false;
    m_user_ip_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAILogEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogEvent::fromJsonObject(QJsonObject json) {

    m_attribute1_isValid = ::OpenAPI::fromJsonValue(m_attribute1, json[QString("attribute1")]);
    m_attribute1_isSet = !json[QString("attribute1")].isNull() && m_attribute1_isValid;

    m_attribute2_isValid = ::OpenAPI::fromJsonValue(m_attribute2, json[QString("attribute2")]);
    m_attribute2_isSet = !json[QString("attribute2")].isNull() && m_attribute2_isValid;

    m_attribute3_isValid = ::OpenAPI::fromJsonValue(m_attribute3, json[QString("attribute3")]);
    m_attribute3_isSet = !json[QString("attribute3")].isNull() && m_attribute3_isValid;

    m_auth_parent_source_isValid = ::OpenAPI::fromJsonValue(m_auth_parent_source, json[QString("authParentSource")]);
    m_auth_parent_source_isSet = !json[QString("authParentSource")].isNull() && m_auth_parent_source_isValid;

    m_auth_parent_target_isValid = ::OpenAPI::fromJsonValue(m_auth_parent_target, json[QString("authParentTarget")]);
    m_auth_parent_target_isSet = !json[QString("authParentTarget")].isNull() && m_auth_parent_target_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_object_id1_isValid = ::OpenAPI::fromJsonValue(m_object_id1, json[QString("objectId1")]);
    m_object_id1_isSet = !json[QString("objectId1")].isNull() && m_object_id1_isValid;

    m_object_id2_isValid = ::OpenAPI::fromJsonValue(m_object_id2, json[QString("objectId2")]);
    m_object_id2_isSet = !json[QString("objectId2")].isNull() && m_object_id2_isValid;

    m_object_name1_isValid = ::OpenAPI::fromJsonValue(m_object_name1, json[QString("objectName1")]);
    m_object_name1_isSet = !json[QString("objectName1")].isNull() && m_object_name1_isValid;

    m_object_name2_isValid = ::OpenAPI::fromJsonValue(m_object_name2, json[QString("objectName2")]);
    m_object_name2_isSet = !json[QString("objectName2")].isNull() && m_object_name2_isValid;

    m_object_type1_isValid = ::OpenAPI::fromJsonValue(m_object_type1, json[QString("objectType1")]);
    m_object_type1_isSet = !json[QString("objectType1")].isNull() && m_object_type1_isValid;

    m_object_type2_isValid = ::OpenAPI::fromJsonValue(m_object_type2, json[QString("objectType2")]);
    m_object_type2_isSet = !json[QString("objectType2")].isNull() && m_object_type2_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_user_client_isValid = ::OpenAPI::fromJsonValue(m_user_client, json[QString("userClient")]);
    m_user_client_isSet = !json[QString("userClient")].isNull() && m_user_client_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_ip_isValid = ::OpenAPI::fromJsonValue(m_user_ip, json[QString("userIp")]);
    m_user_ip_isSet = !json[QString("userIp")].isNull() && m_user_ip_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAILogEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute1_isSet) {
        obj.insert(QString("attribute1"), ::OpenAPI::toJsonValue(m_attribute1));
    }
    if (m_attribute2_isSet) {
        obj.insert(QString("attribute2"), ::OpenAPI::toJsonValue(m_attribute2));
    }
    if (m_attribute3_isSet) {
        obj.insert(QString("attribute3"), ::OpenAPI::toJsonValue(m_attribute3));
    }
    if (m_auth_parent_source_isSet) {
        obj.insert(QString("authParentSource"), ::OpenAPI::toJsonValue(m_auth_parent_source));
    }
    if (m_auth_parent_target_isSet) {
        obj.insert(QString("authParentTarget"), ::OpenAPI::toJsonValue(m_auth_parent_target));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_object_id1_isSet) {
        obj.insert(QString("objectId1"), ::OpenAPI::toJsonValue(m_object_id1));
    }
    if (m_object_id2_isSet) {
        obj.insert(QString("objectId2"), ::OpenAPI::toJsonValue(m_object_id2));
    }
    if (m_object_name1_isSet) {
        obj.insert(QString("objectName1"), ::OpenAPI::toJsonValue(m_object_name1));
    }
    if (m_object_name2_isSet) {
        obj.insert(QString("objectName2"), ::OpenAPI::toJsonValue(m_object_name2));
    }
    if (m_object_type1_isSet) {
        obj.insert(QString("objectType1"), ::OpenAPI::toJsonValue(m_object_type1));
    }
    if (m_object_type2_isSet) {
        obj.insert(QString("objectType2"), ::OpenAPI::toJsonValue(m_object_type2));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_user_client_isSet) {
        obj.insert(QString("userClient"), ::OpenAPI::toJsonValue(m_user_client));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_ip_isSet) {
        obj.insert(QString("userIp"), ::OpenAPI::toJsonValue(m_user_ip));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAILogEvent::getAttribute1() const {
    return m_attribute1;
}
void OAILogEvent::setAttribute1(const QString &attribute1) {
    m_attribute1 = attribute1;
    m_attribute1_isSet = true;
}

bool OAILogEvent::is_attribute1_Set() const{
    return m_attribute1_isSet;
}

bool OAILogEvent::is_attribute1_Valid() const{
    return m_attribute1_isValid;
}

QString OAILogEvent::getAttribute2() const {
    return m_attribute2;
}
void OAILogEvent::setAttribute2(const QString &attribute2) {
    m_attribute2 = attribute2;
    m_attribute2_isSet = true;
}

bool OAILogEvent::is_attribute2_Set() const{
    return m_attribute2_isSet;
}

bool OAILogEvent::is_attribute2_Valid() const{
    return m_attribute2_isValid;
}

QString OAILogEvent::getAttribute3() const {
    return m_attribute3;
}
void OAILogEvent::setAttribute3(const QString &attribute3) {
    m_attribute3 = attribute3;
    m_attribute3_isSet = true;
}

bool OAILogEvent::is_attribute3_Set() const{
    return m_attribute3_isSet;
}

bool OAILogEvent::is_attribute3_Valid() const{
    return m_attribute3_isValid;
}

QString OAILogEvent::getAuthParentSource() const {
    return m_auth_parent_source;
}
void OAILogEvent::setAuthParentSource(const QString &auth_parent_source) {
    m_auth_parent_source = auth_parent_source;
    m_auth_parent_source_isSet = true;
}

bool OAILogEvent::is_auth_parent_source_Set() const{
    return m_auth_parent_source_isSet;
}

bool OAILogEvent::is_auth_parent_source_Valid() const{
    return m_auth_parent_source_isValid;
}

QString OAILogEvent::getAuthParentTarget() const {
    return m_auth_parent_target;
}
void OAILogEvent::setAuthParentTarget(const QString &auth_parent_target) {
    m_auth_parent_target = auth_parent_target;
    m_auth_parent_target_isSet = true;
}

bool OAILogEvent::is_auth_parent_target_Set() const{
    return m_auth_parent_target_isSet;
}

bool OAILogEvent::is_auth_parent_target_Valid() const{
    return m_auth_parent_target_isValid;
}

qint64 OAILogEvent::getCustomerId() const {
    return m_customer_id;
}
void OAILogEvent::setCustomerId(const qint64 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAILogEvent::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAILogEvent::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint64 OAILogEvent::getId() const {
    return m_id;
}
void OAILogEvent::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILogEvent::is_id_Set() const{
    return m_id_isSet;
}

bool OAILogEvent::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILogEvent::getMessage() const {
    return m_message;
}
void OAILogEvent::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAILogEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAILogEvent::is_message_Valid() const{
    return m_message_isValid;
}

qint64 OAILogEvent::getObjectId1() const {
    return m_object_id1;
}
void OAILogEvent::setObjectId1(const qint64 &object_id1) {
    m_object_id1 = object_id1;
    m_object_id1_isSet = true;
}

bool OAILogEvent::is_object_id1_Set() const{
    return m_object_id1_isSet;
}

bool OAILogEvent::is_object_id1_Valid() const{
    return m_object_id1_isValid;
}

qint64 OAILogEvent::getObjectId2() const {
    return m_object_id2;
}
void OAILogEvent::setObjectId2(const qint64 &object_id2) {
    m_object_id2 = object_id2;
    m_object_id2_isSet = true;
}

bool OAILogEvent::is_object_id2_Set() const{
    return m_object_id2_isSet;
}

bool OAILogEvent::is_object_id2_Valid() const{
    return m_object_id2_isValid;
}

QString OAILogEvent::getObjectName1() const {
    return m_object_name1;
}
void OAILogEvent::setObjectName1(const QString &object_name1) {
    m_object_name1 = object_name1;
    m_object_name1_isSet = true;
}

bool OAILogEvent::is_object_name1_Set() const{
    return m_object_name1_isSet;
}

bool OAILogEvent::is_object_name1_Valid() const{
    return m_object_name1_isValid;
}

QString OAILogEvent::getObjectName2() const {
    return m_object_name2;
}
void OAILogEvent::setObjectName2(const QString &object_name2) {
    m_object_name2 = object_name2;
    m_object_name2_isSet = true;
}

bool OAILogEvent::is_object_name2_Set() const{
    return m_object_name2_isSet;
}

bool OAILogEvent::is_object_name2_Valid() const{
    return m_object_name2_isValid;
}

qint32 OAILogEvent::getObjectType1() const {
    return m_object_type1;
}
void OAILogEvent::setObjectType1(const qint32 &object_type1) {
    m_object_type1 = object_type1;
    m_object_type1_isSet = true;
}

bool OAILogEvent::is_object_type1_Set() const{
    return m_object_type1_isSet;
}

bool OAILogEvent::is_object_type1_Valid() const{
    return m_object_type1_isValid;
}

qint32 OAILogEvent::getObjectType2() const {
    return m_object_type2;
}
void OAILogEvent::setObjectType2(const qint32 &object_type2) {
    m_object_type2 = object_type2;
    m_object_type2_isSet = true;
}

bool OAILogEvent::is_object_type2_Set() const{
    return m_object_type2_isSet;
}

bool OAILogEvent::is_object_type2_Valid() const{
    return m_object_type2_isValid;
}

qint32 OAILogEvent::getOperationId() const {
    return m_operation_id;
}
void OAILogEvent::setOperationId(const qint32 &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAILogEvent::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAILogEvent::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAILogEvent::getOperationName() const {
    return m_operation_name;
}
void OAILogEvent::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAILogEvent::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAILogEvent::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

qint32 OAILogEvent::getStatus() const {
    return m_status;
}
void OAILogEvent::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAILogEvent::is_status_Set() const{
    return m_status_isSet;
}

bool OAILogEvent::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAILogEvent::getTime() const {
    return m_time;
}
void OAILogEvent::setTime(const QDateTime &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAILogEvent::is_time_Set() const{
    return m_time_isSet;
}

bool OAILogEvent::is_time_Valid() const{
    return m_time_isValid;
}

QString OAILogEvent::getUserClient() const {
    return m_user_client;
}
void OAILogEvent::setUserClient(const QString &user_client) {
    m_user_client = user_client;
    m_user_client_isSet = true;
}

bool OAILogEvent::is_user_client_Set() const{
    return m_user_client_isSet;
}

bool OAILogEvent::is_user_client_Valid() const{
    return m_user_client_isValid;
}

qint64 OAILogEvent::getUserId() const {
    return m_user_id;
}
void OAILogEvent::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAILogEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAILogEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAILogEvent::getUserIp() const {
    return m_user_ip;
}
void OAILogEvent::setUserIp(const QString &user_ip) {
    m_user_ip = user_ip;
    m_user_ip_isSet = true;
}

bool OAILogEvent::is_user_ip_Set() const{
    return m_user_ip_isSet;
}

bool OAILogEvent::is_user_ip_Valid() const{
    return m_user_ip_isValid;
}

QString OAILogEvent::getUserName() const {
    return m_user_name;
}
void OAILogEvent::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAILogEvent::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAILogEvent::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAILogEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attribute3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_parent_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_parent_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_id2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_name2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_client_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_message_isValid && m_time_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
