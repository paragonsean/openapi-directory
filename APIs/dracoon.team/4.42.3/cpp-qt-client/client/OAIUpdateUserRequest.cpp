/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUserRequest::OAIUpdateUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUserRequest::OAIUpdateUserRequest() {
    this->initializeModel();
}

OAIUpdateUserRequest::~OAIUpdateUserRequest() {}

void OAIUpdateUserRequest::initializeModel() {

    m_auth_data_isSet = false;
    m_auth_data_isValid = false;

    m_auth_methods_isSet = false;
    m_auth_methods_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_mfa_config_isSet = false;
    m_mfa_config_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_receiver_language_isSet = false;
    m_receiver_language_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIUpdateUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUserRequest::fromJsonObject(QJsonObject json) {

    m_auth_data_isValid = ::OpenAPI::fromJsonValue(m_auth_data, json[QString("authData")]);
    m_auth_data_isSet = !json[QString("authData")].isNull() && m_auth_data_isValid;

    m_auth_methods_isValid = ::OpenAPI::fromJsonValue(m_auth_methods, json[QString("authMethods")]);
    m_auth_methods_isSet = !json[QString("authMethods")].isNull() && m_auth_methods_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_mfa_config_isValid = ::OpenAPI::fromJsonValue(m_mfa_config, json[QString("mfaConfig")]);
    m_mfa_config_isSet = !json[QString("mfaConfig")].isNull() && m_mfa_config_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_receiver_language_isValid = ::OpenAPI::fromJsonValue(m_receiver_language, json[QString("receiverLanguage")]);
    m_receiver_language_isSet = !json[QString("receiverLanguage")].isNull() && m_receiver_language_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIUpdateUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_data.isSet()) {
        obj.insert(QString("authData"), ::OpenAPI::toJsonValue(m_auth_data));
    }
    if (m_auth_methods.size() > 0) {
        obj.insert(QString("authMethods"), ::OpenAPI::toJsonValue(m_auth_methods));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expiration.isSet()) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_mfa_config.isSet()) {
        obj.insert(QString("mfaConfig"), ::OpenAPI::toJsonValue(m_mfa_config));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_receiver_language_isSet) {
        obj.insert(QString("receiverLanguage"), ::OpenAPI::toJsonValue(m_receiver_language));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

OAIUserAuthDataUpdateRequest OAIUpdateUserRequest::getAuthData() const {
    return m_auth_data;
}
void OAIUpdateUserRequest::setAuthData(const OAIUserAuthDataUpdateRequest &auth_data) {
    m_auth_data = auth_data;
    m_auth_data_isSet = true;
}

bool OAIUpdateUserRequest::is_auth_data_Set() const{
    return m_auth_data_isSet;
}

bool OAIUpdateUserRequest::is_auth_data_Valid() const{
    return m_auth_data_isValid;
}

QList<OAIUserAuthMethod> OAIUpdateUserRequest::getAuthMethods() const {
    return m_auth_methods;
}
void OAIUpdateUserRequest::setAuthMethods(const QList<OAIUserAuthMethod> &auth_methods) {
    m_auth_methods = auth_methods;
    m_auth_methods_isSet = true;
}

bool OAIUpdateUserRequest::is_auth_methods_Set() const{
    return m_auth_methods_isSet;
}

bool OAIUpdateUserRequest::is_auth_methods_Valid() const{
    return m_auth_methods_isValid;
}

QString OAIUpdateUserRequest::getEmail() const {
    return m_email;
}
void OAIUpdateUserRequest::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUpdateUserRequest::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUpdateUserRequest::is_email_Valid() const{
    return m_email_isValid;
}

OAIObjectExpiration OAIUpdateUserRequest::getExpiration() const {
    return m_expiration;
}
void OAIUpdateUserRequest::setExpiration(const OAIObjectExpiration &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIUpdateUserRequest::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIUpdateUserRequest::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIUpdateUserRequest::getFirstName() const {
    return m_first_name;
}
void OAIUpdateUserRequest::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUpdateUserRequest::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUpdateUserRequest::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUpdateUserRequest::getGender() const {
    return m_gender;
}
void OAIUpdateUserRequest::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIUpdateUserRequest::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIUpdateUserRequest::is_gender_Valid() const{
    return m_gender_isValid;
}

bool OAIUpdateUserRequest::isIsLocked() const {
    return m_is_locked;
}
void OAIUpdateUserRequest::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIUpdateUserRequest::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIUpdateUserRequest::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

QString OAIUpdateUserRequest::getLastName() const {
    return m_last_name;
}
void OAIUpdateUserRequest::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUpdateUserRequest::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUpdateUserRequest::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIUpdateUserRequest::getLockStatus() const {
    return m_lock_status;
}
void OAIUpdateUserRequest::setLockStatus(const qint32 &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIUpdateUserRequest::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIUpdateUserRequest::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

OAIMfaConfig OAIUpdateUserRequest::getMfaConfig() const {
    return m_mfa_config;
}
void OAIUpdateUserRequest::setMfaConfig(const OAIMfaConfig &mfa_config) {
    m_mfa_config = mfa_config;
    m_mfa_config_isSet = true;
}

bool OAIUpdateUserRequest::is_mfa_config_Set() const{
    return m_mfa_config_isSet;
}

bool OAIUpdateUserRequest::is_mfa_config_Valid() const{
    return m_mfa_config_isValid;
}

QString OAIUpdateUserRequest::getPhone() const {
    return m_phone;
}
void OAIUpdateUserRequest::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUpdateUserRequest::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUpdateUserRequest::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIUpdateUserRequest::getReceiverLanguage() const {
    return m_receiver_language;
}
void OAIUpdateUserRequest::setReceiverLanguage(const QString &receiver_language) {
    m_receiver_language = receiver_language;
    m_receiver_language_isSet = true;
}

bool OAIUpdateUserRequest::is_receiver_language_Set() const{
    return m_receiver_language_isSet;
}

bool OAIUpdateUserRequest::is_receiver_language_Valid() const{
    return m_receiver_language_isValid;
}

QString OAIUpdateUserRequest::getTitle() const {
    return m_title;
}
void OAIUpdateUserRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUpdateUserRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUpdateUserRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUpdateUserRequest::getUserName() const {
    return m_user_name;
}
void OAIUpdateUserRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUpdateUserRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUpdateUserRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIUpdateUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mfa_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
