/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuthApproval.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuthApproval::OAIOAuthApproval(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuthApproval::OAIOAuthApproval() {
    this->initializeModel();
}

OAIOAuthApproval::~OAIOAuthApproval() {}

void OAIOAuthApproval::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;
}

void OAIOAuthApproval::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuthApproval::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;
}

QString OAIOAuthApproval::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuthApproval::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    return obj;
}

QString OAIOAuthApproval::getClientId() const {
    return m_client_id;
}
void OAIOAuthApproval::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuthApproval::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuthApproval::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuthApproval::getClientName() const {
    return m_client_name;
}
void OAIOAuthApproval::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIOAuthApproval::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIOAuthApproval::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QDateTime OAIOAuthApproval::getExpiresAt() const {
    return m_expires_at;
}
void OAIOAuthApproval::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIOAuthApproval::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIOAuthApproval::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

bool OAIOAuthApproval::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuthApproval::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_name_isValid && true;
}

} // namespace OpenAPI
