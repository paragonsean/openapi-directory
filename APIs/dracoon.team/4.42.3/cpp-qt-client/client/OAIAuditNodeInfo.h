/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditNodeInfo.h
 *
 * Audit node info
 */

#ifndef OAIAuditNodeInfo_H
#define OAIAuditNodeInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAuditNodeInfo : public OAIObject {
public:
    OAIAuditNodeInfo();
    OAIAuditNodeInfo(QString json);
    ~OAIAuditNodeInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getCountChildren() const;
    void setCountChildren(const qint64 &count_children);
    bool is_count_children_Set() const;
    bool is_count_children_Valid() const;

    qint64 getNodeId() const;
    void setNodeId(const qint64 &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    bool isNodeIsEncrypted() const;
    void setNodeIsEncrypted(const bool &node_is_encrypted);
    bool is_node_is_encrypted_Set() const;
    bool is_node_is_encrypted_Valid() const;

    QString getNodeName() const;
    void setNodeName(const QString &node_name);
    bool is_node_name_Set() const;
    bool is_node_name_Valid() const;

    qint64 getNodeParentId() const;
    void setNodeParentId(const qint64 &node_parent_id);
    bool is_node_parent_id_Set() const;
    bool is_node_parent_id_Valid() const;

    QString getNodeParentPath() const;
    void setNodeParentPath(const QString &node_parent_path);
    bool is_node_parent_path_Set() const;
    bool is_node_parent_path_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_count_children;
    bool m_count_children_isSet;
    bool m_count_children_isValid;

    qint64 m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    bool m_node_is_encrypted;
    bool m_node_is_encrypted_isSet;
    bool m_node_is_encrypted_isValid;

    QString m_node_name;
    bool m_node_name_isSet;
    bool m_node_name_isValid;

    qint64 m_node_parent_id;
    bool m_node_parent_id_isSet;
    bool m_node_parent_id_isValid;

    QString m_node_parent_path;
    bool m_node_parent_path_isSet;
    bool m_node_parent_path_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditNodeInfo)

#endif // OAIAuditNodeInfo_H
