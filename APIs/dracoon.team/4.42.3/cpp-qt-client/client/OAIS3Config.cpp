/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Config.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Config::OAIS3Config(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Config::OAIS3Config() {
    this->initializeModel();
}

OAIS3Config::~OAIS3Config() {}

void OAIS3Config::initializeModel() {

    m_access_key_defined_isSet = false;
    m_access_key_defined_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_url_isSet = false;
    m_bucket_url_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_secret_key_defined_isSet = false;
    m_secret_key_defined_isValid = false;
}

void OAIS3Config::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Config::fromJsonObject(QJsonObject json) {

    m_access_key_defined_isValid = ::OpenAPI::fromJsonValue(m_access_key_defined, json[QString("accessKeyDefined")]);
    m_access_key_defined_isSet = !json[QString("accessKeyDefined")].isNull() && m_access_key_defined_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_url_isValid = ::OpenAPI::fromJsonValue(m_bucket_url, json[QString("bucketUrl")]);
    m_bucket_url_isSet = !json[QString("bucketUrl")].isNull() && m_bucket_url_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_secret_key_defined_isValid = ::OpenAPI::fromJsonValue(m_secret_key_defined, json[QString("secretKeyDefined")]);
    m_secret_key_defined_isSet = !json[QString("secretKeyDefined")].isNull() && m_secret_key_defined_isValid;
}

QString OAIS3Config::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Config::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_defined_isSet) {
        obj.insert(QString("accessKeyDefined"), ::OpenAPI::toJsonValue(m_access_key_defined));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_url_isSet) {
        obj.insert(QString("bucketUrl"), ::OpenAPI::toJsonValue(m_bucket_url));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_secret_key_defined_isSet) {
        obj.insert(QString("secretKeyDefined"), ::OpenAPI::toJsonValue(m_secret_key_defined));
    }
    return obj;
}

bool OAIS3Config::isAccessKeyDefined() const {
    return m_access_key_defined;
}
void OAIS3Config::setAccessKeyDefined(const bool &access_key_defined) {
    m_access_key_defined = access_key_defined;
    m_access_key_defined_isSet = true;
}

bool OAIS3Config::is_access_key_defined_Set() const{
    return m_access_key_defined_isSet;
}

bool OAIS3Config::is_access_key_defined_Valid() const{
    return m_access_key_defined_isValid;
}

QString OAIS3Config::getBucketName() const {
    return m_bucket_name;
}
void OAIS3Config::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3Config::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3Config::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIS3Config::getBucketUrl() const {
    return m_bucket_url;
}
void OAIS3Config::setBucketUrl(const QString &bucket_url) {
    m_bucket_url = bucket_url;
    m_bucket_url_isSet = true;
}

bool OAIS3Config::is_bucket_url_Set() const{
    return m_bucket_url_isSet;
}

bool OAIS3Config::is_bucket_url_Valid() const{
    return m_bucket_url_isValid;
}

QString OAIS3Config::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIS3Config::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIS3Config::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIS3Config::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIS3Config::getRegion() const {
    return m_region;
}
void OAIS3Config::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIS3Config::is_region_Set() const{
    return m_region_isSet;
}

bool OAIS3Config::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIS3Config::isSecretKeyDefined() const {
    return m_secret_key_defined;
}
void OAIS3Config::setSecretKeyDefined(const bool &secret_key_defined) {
    m_secret_key_defined = secret_key_defined;
    m_secret_key_defined_isSet = true;
}

bool OAIS3Config::is_secret_key_defined_Set() const{
    return m_secret_key_defined_isSet;
}

bool OAIS3Config::is_secret_key_defined_Valid() const{
    return m_secret_key_defined_isValid;
}

bool OAIS3Config::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_defined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_defined_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Config::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_key_defined_isValid && m_bucket_url_isValid && m_secret_key_defined_isValid && true;
}

} // namespace OpenAPI
