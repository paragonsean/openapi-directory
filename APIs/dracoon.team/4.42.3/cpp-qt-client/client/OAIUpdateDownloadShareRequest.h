/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateDownloadShareRequest.h
 *
 * Request model for updating a Download Share
 */

#ifndef OAIUpdateDownloadShareRequest_H
#define OAIUpdateDownloadShareRequest_H

#include <QJsonObject>

#include "OAIObjectExpiration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIObjectExpiration;

class OAIUpdateDownloadShareRequest : public OAIObject {
public:
    OAIUpdateDownloadShareRequest();
    OAIUpdateDownloadShareRequest(QString json);
    ~OAIUpdateDownloadShareRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDefaultCountry() const;
    void setDefaultCountry(const QString &default_country);
    bool is_default_country_Set() const;
    bool is_default_country_Valid() const;

    OAIObjectExpiration getExpiration() const;
    void setExpiration(const OAIObjectExpiration &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    QString getInternalNotes() const;
    void setInternalNotes(const QString &internal_notes);
    bool is_internal_notes_Set() const;
    bool is_internal_notes_Valid() const;

    qint32 getMaxDownloads() const;
    void setMaxDownloads(const qint32 &max_downloads);
    bool is_max_downloads_Set() const;
    bool is_max_downloads_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    Q_DECL_DEPRECATED bool isNotifyCreator() const;
    Q_DECL_DEPRECATED void setNotifyCreator(const bool &notify_creator);
    Q_DECL_DEPRECATED bool is_notify_creator_Set() const;
    Q_DECL_DEPRECATED bool is_notify_creator_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    QString getReceiverLanguage() const;
    void setReceiverLanguage(const QString &receiver_language);
    bool is_receiver_language_Set() const;
    bool is_receiver_language_Valid() const;

    bool isResetMaxDownloads() const;
    void setResetMaxDownloads(const bool &reset_max_downloads);
    bool is_reset_max_downloads_Set() const;
    bool is_reset_max_downloads_Valid() const;

    bool isResetPassword() const;
    void setResetPassword(const bool &reset_password);
    bool is_reset_password_Set() const;
    bool is_reset_password_Valid() const;

    bool isShowCreatorName() const;
    void setShowCreatorName(const bool &show_creator_name);
    bool is_show_creator_name_Set() const;
    bool is_show_creator_name_Valid() const;

    bool isShowCreatorUsername() const;
    void setShowCreatorUsername(const bool &show_creator_username);
    bool is_show_creator_username_Set() const;
    bool is_show_creator_username_Valid() const;

    QList<QString> getTextMessageRecipients() const;
    void setTextMessageRecipients(const QList<QString> &text_message_recipients);
    bool is_text_message_recipients_Set() const;
    bool is_text_message_recipients_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_default_country;
    bool m_default_country_isSet;
    bool m_default_country_isValid;

    OAIObjectExpiration m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    QString m_internal_notes;
    bool m_internal_notes_isSet;
    bool m_internal_notes_isValid;

    qint32 m_max_downloads;
    bool m_max_downloads_isSet;
    bool m_max_downloads_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    bool m_notify_creator;
    bool m_notify_creator_isSet;
    bool m_notify_creator_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    QString m_receiver_language;
    bool m_receiver_language_isSet;
    bool m_receiver_language_isValid;

    bool m_reset_max_downloads;
    bool m_reset_max_downloads_isSet;
    bool m_reset_max_downloads_isValid;

    bool m_reset_password;
    bool m_reset_password_isSet;
    bool m_reset_password_isValid;

    bool m_show_creator_name;
    bool m_show_creator_name_isSet;
    bool m_show_creator_name_isValid;

    bool m_show_creator_username;
    bool m_show_creator_username_isSet;
    bool m_show_creator_username_isValid;

    QList<QString> m_text_message_recipients;
    bool m_text_message_recipients_isSet;
    bool m_text_message_recipients_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateDownloadShareRequest)

#endif // OAIUpdateDownloadShareRequest_H
