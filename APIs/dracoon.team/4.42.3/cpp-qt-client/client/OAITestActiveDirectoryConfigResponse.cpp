/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestActiveDirectoryConfigResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestActiveDirectoryConfigResponse::OAITestActiveDirectoryConfigResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestActiveDirectoryConfigResponse::OAITestActiveDirectoryConfigResponse() {
    this->initializeModel();
}

OAITestActiveDirectoryConfigResponse::~OAITestActiveDirectoryConfigResponse() {}

void OAITestActiveDirectoryConfigResponse::initializeModel() {

    m_ldap_users_domain_isSet = false;
    m_ldap_users_domain_isValid = false;

    m_server_admin_name_isSet = false;
    m_server_admin_name_isValid = false;

    m_server_admin_password_isSet = false;
    m_server_admin_password_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_server_port_isSet = false;
    m_server_port_isValid = false;

    m_ssl_finger_print_isSet = false;
    m_ssl_finger_print_isValid = false;

    m_use_ldaps_isSet = false;
    m_use_ldaps_isValid = false;
}

void OAITestActiveDirectoryConfigResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestActiveDirectoryConfigResponse::fromJsonObject(QJsonObject json) {

    m_ldap_users_domain_isValid = ::OpenAPI::fromJsonValue(m_ldap_users_domain, json[QString("ldapUsersDomain")]);
    m_ldap_users_domain_isSet = !json[QString("ldapUsersDomain")].isNull() && m_ldap_users_domain_isValid;

    m_server_admin_name_isValid = ::OpenAPI::fromJsonValue(m_server_admin_name, json[QString("serverAdminName")]);
    m_server_admin_name_isSet = !json[QString("serverAdminName")].isNull() && m_server_admin_name_isValid;

    m_server_admin_password_isValid = ::OpenAPI::fromJsonValue(m_server_admin_password, json[QString("serverAdminPassword")]);
    m_server_admin_password_isSet = !json[QString("serverAdminPassword")].isNull() && m_server_admin_password_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("serverIp")]);
    m_server_ip_isSet = !json[QString("serverIp")].isNull() && m_server_ip_isValid;

    m_server_port_isValid = ::OpenAPI::fromJsonValue(m_server_port, json[QString("serverPort")]);
    m_server_port_isSet = !json[QString("serverPort")].isNull() && m_server_port_isValid;

    m_ssl_finger_print_isValid = ::OpenAPI::fromJsonValue(m_ssl_finger_print, json[QString("sslFingerPrint")]);
    m_ssl_finger_print_isSet = !json[QString("sslFingerPrint")].isNull() && m_ssl_finger_print_isValid;

    m_use_ldaps_isValid = ::OpenAPI::fromJsonValue(m_use_ldaps, json[QString("useLdaps")]);
    m_use_ldaps_isSet = !json[QString("useLdaps")].isNull() && m_use_ldaps_isValid;
}

QString OAITestActiveDirectoryConfigResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestActiveDirectoryConfigResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ldap_users_domain_isSet) {
        obj.insert(QString("ldapUsersDomain"), ::OpenAPI::toJsonValue(m_ldap_users_domain));
    }
    if (m_server_admin_name_isSet) {
        obj.insert(QString("serverAdminName"), ::OpenAPI::toJsonValue(m_server_admin_name));
    }
    if (m_server_admin_password_isSet) {
        obj.insert(QString("serverAdminPassword"), ::OpenAPI::toJsonValue(m_server_admin_password));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("serverIp"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_server_port_isSet) {
        obj.insert(QString("serverPort"), ::OpenAPI::toJsonValue(m_server_port));
    }
    if (m_ssl_finger_print_isSet) {
        obj.insert(QString("sslFingerPrint"), ::OpenAPI::toJsonValue(m_ssl_finger_print));
    }
    if (m_use_ldaps_isSet) {
        obj.insert(QString("useLdaps"), ::OpenAPI::toJsonValue(m_use_ldaps));
    }
    return obj;
}

QString OAITestActiveDirectoryConfigResponse::getLdapUsersDomain() const {
    return m_ldap_users_domain;
}
void OAITestActiveDirectoryConfigResponse::setLdapUsersDomain(const QString &ldap_users_domain) {
    m_ldap_users_domain = ldap_users_domain;
    m_ldap_users_domain_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_ldap_users_domain_Set() const{
    return m_ldap_users_domain_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_ldap_users_domain_Valid() const{
    return m_ldap_users_domain_isValid;
}

QString OAITestActiveDirectoryConfigResponse::getServerAdminName() const {
    return m_server_admin_name;
}
void OAITestActiveDirectoryConfigResponse::setServerAdminName(const QString &server_admin_name) {
    m_server_admin_name = server_admin_name;
    m_server_admin_name_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_server_admin_name_Set() const{
    return m_server_admin_name_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_server_admin_name_Valid() const{
    return m_server_admin_name_isValid;
}

QString OAITestActiveDirectoryConfigResponse::getServerAdminPassword() const {
    return m_server_admin_password;
}
void OAITestActiveDirectoryConfigResponse::setServerAdminPassword(const QString &server_admin_password) {
    m_server_admin_password = server_admin_password;
    m_server_admin_password_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_server_admin_password_Set() const{
    return m_server_admin_password_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_server_admin_password_Valid() const{
    return m_server_admin_password_isValid;
}

QString OAITestActiveDirectoryConfigResponse::getServerIp() const {
    return m_server_ip;
}
void OAITestActiveDirectoryConfigResponse::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

qint32 OAITestActiveDirectoryConfigResponse::getServerPort() const {
    return m_server_port;
}
void OAITestActiveDirectoryConfigResponse::setServerPort(const qint32 &server_port) {
    m_server_port = server_port;
    m_server_port_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_server_port_Set() const{
    return m_server_port_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_server_port_Valid() const{
    return m_server_port_isValid;
}

QString OAITestActiveDirectoryConfigResponse::getSslFingerPrint() const {
    return m_ssl_finger_print;
}
void OAITestActiveDirectoryConfigResponse::setSslFingerPrint(const QString &ssl_finger_print) {
    m_ssl_finger_print = ssl_finger_print;
    m_ssl_finger_print_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_ssl_finger_print_Set() const{
    return m_ssl_finger_print_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_ssl_finger_print_Valid() const{
    return m_ssl_finger_print_isValid;
}

bool OAITestActiveDirectoryConfigResponse::isUseLdaps() const {
    return m_use_ldaps;
}
void OAITestActiveDirectoryConfigResponse::setUseLdaps(const bool &use_ldaps) {
    m_use_ldaps = use_ldaps;
    m_use_ldaps_isSet = true;
}

bool OAITestActiveDirectoryConfigResponse::is_use_ldaps_Set() const{
    return m_use_ldaps_isSet;
}

bool OAITestActiveDirectoryConfigResponse::is_use_ldaps_Valid() const{
    return m_use_ldaps_isValid;
}

bool OAITestActiveDirectoryConfigResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ldap_users_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_admin_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_admin_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_finger_print_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ldaps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestActiveDirectoryConfigResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ldap_users_domain_isValid && m_server_admin_name_isValid && m_server_admin_password_isValid && m_server_ip_isValid && m_server_port_isValid && m_use_ldaps_isValid && true;
}

} // namespace OpenAPI
