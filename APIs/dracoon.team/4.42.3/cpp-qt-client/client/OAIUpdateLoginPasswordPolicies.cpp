/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLoginPasswordPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLoginPasswordPolicies::OAIUpdateLoginPasswordPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLoginPasswordPolicies::OAIUpdateLoginPasswordPolicies() {
    this->initializeModel();
}

OAIUpdateLoginPasswordPolicies::~OAIUpdateLoginPasswordPolicies() {}

void OAIUpdateLoginPasswordPolicies::initializeModel() {

    m_character_rules_isSet = false;
    m_character_rules_isValid = false;

    m_enforce_login_password_change_isSet = false;
    m_enforce_login_password_change_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_number_of_archived_passwords_isSet = false;
    m_number_of_archived_passwords_isValid = false;

    m_password_expiration_isSet = false;
    m_password_expiration_isValid = false;

    m_reject_dictionary_words_isSet = false;
    m_reject_dictionary_words_isValid = false;

    m_reject_keyboard_patterns_isSet = false;
    m_reject_keyboard_patterns_isValid = false;

    m_reject_user_info_isSet = false;
    m_reject_user_info_isValid = false;

    m_user_lockout_isSet = false;
    m_user_lockout_isValid = false;
}

void OAIUpdateLoginPasswordPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLoginPasswordPolicies::fromJsonObject(QJsonObject json) {

    m_character_rules_isValid = ::OpenAPI::fromJsonValue(m_character_rules, json[QString("characterRules")]);
    m_character_rules_isSet = !json[QString("characterRules")].isNull() && m_character_rules_isValid;

    m_enforce_login_password_change_isValid = ::OpenAPI::fromJsonValue(m_enforce_login_password_change, json[QString("enforceLoginPasswordChange")]);
    m_enforce_login_password_change_isSet = !json[QString("enforceLoginPasswordChange")].isNull() && m_enforce_login_password_change_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("minLength")]);
    m_min_length_isSet = !json[QString("minLength")].isNull() && m_min_length_isValid;

    m_number_of_archived_passwords_isValid = ::OpenAPI::fromJsonValue(m_number_of_archived_passwords, json[QString("numberOfArchivedPasswords")]);
    m_number_of_archived_passwords_isSet = !json[QString("numberOfArchivedPasswords")].isNull() && m_number_of_archived_passwords_isValid;

    m_password_expiration_isValid = ::OpenAPI::fromJsonValue(m_password_expiration, json[QString("passwordExpiration")]);
    m_password_expiration_isSet = !json[QString("passwordExpiration")].isNull() && m_password_expiration_isValid;

    m_reject_dictionary_words_isValid = ::OpenAPI::fromJsonValue(m_reject_dictionary_words, json[QString("rejectDictionaryWords")]);
    m_reject_dictionary_words_isSet = !json[QString("rejectDictionaryWords")].isNull() && m_reject_dictionary_words_isValid;

    m_reject_keyboard_patterns_isValid = ::OpenAPI::fromJsonValue(m_reject_keyboard_patterns, json[QString("rejectKeyboardPatterns")]);
    m_reject_keyboard_patterns_isSet = !json[QString("rejectKeyboardPatterns")].isNull() && m_reject_keyboard_patterns_isValid;

    m_reject_user_info_isValid = ::OpenAPI::fromJsonValue(m_reject_user_info, json[QString("rejectUserInfo")]);
    m_reject_user_info_isSet = !json[QString("rejectUserInfo")].isNull() && m_reject_user_info_isValid;

    m_user_lockout_isValid = ::OpenAPI::fromJsonValue(m_user_lockout, json[QString("userLockout")]);
    m_user_lockout_isSet = !json[QString("userLockout")].isNull() && m_user_lockout_isValid;
}

QString OAIUpdateLoginPasswordPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLoginPasswordPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_character_rules.isSet()) {
        obj.insert(QString("characterRules"), ::OpenAPI::toJsonValue(m_character_rules));
    }
    if (m_enforce_login_password_change_isSet) {
        obj.insert(QString("enforceLoginPasswordChange"), ::OpenAPI::toJsonValue(m_enforce_login_password_change));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("minLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_number_of_archived_passwords_isSet) {
        obj.insert(QString("numberOfArchivedPasswords"), ::OpenAPI::toJsonValue(m_number_of_archived_passwords));
    }
    if (m_password_expiration.isSet()) {
        obj.insert(QString("passwordExpiration"), ::OpenAPI::toJsonValue(m_password_expiration));
    }
    if (m_reject_dictionary_words_isSet) {
        obj.insert(QString("rejectDictionaryWords"), ::OpenAPI::toJsonValue(m_reject_dictionary_words));
    }
    if (m_reject_keyboard_patterns_isSet) {
        obj.insert(QString("rejectKeyboardPatterns"), ::OpenAPI::toJsonValue(m_reject_keyboard_patterns));
    }
    if (m_reject_user_info_isSet) {
        obj.insert(QString("rejectUserInfo"), ::OpenAPI::toJsonValue(m_reject_user_info));
    }
    if (m_user_lockout.isSet()) {
        obj.insert(QString("userLockout"), ::OpenAPI::toJsonValue(m_user_lockout));
    }
    return obj;
}

OAICharacterRules OAIUpdateLoginPasswordPolicies::getCharacterRules() const {
    return m_character_rules;
}
void OAIUpdateLoginPasswordPolicies::setCharacterRules(const OAICharacterRules &character_rules) {
    m_character_rules = character_rules;
    m_character_rules_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_character_rules_Set() const{
    return m_character_rules_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_character_rules_Valid() const{
    return m_character_rules_isValid;
}

bool OAIUpdateLoginPasswordPolicies::isEnforceLoginPasswordChange() const {
    return m_enforce_login_password_change;
}
void OAIUpdateLoginPasswordPolicies::setEnforceLoginPasswordChange(const bool &enforce_login_password_change) {
    m_enforce_login_password_change = enforce_login_password_change;
    m_enforce_login_password_change_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_enforce_login_password_change_Set() const{
    return m_enforce_login_password_change_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_enforce_login_password_change_Valid() const{
    return m_enforce_login_password_change_isValid;
}

qint32 OAIUpdateLoginPasswordPolicies::getMinLength() const {
    return m_min_length;
}
void OAIUpdateLoginPasswordPolicies::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_min_length_Valid() const{
    return m_min_length_isValid;
}

qint32 OAIUpdateLoginPasswordPolicies::getNumberOfArchivedPasswords() const {
    return m_number_of_archived_passwords;
}
void OAIUpdateLoginPasswordPolicies::setNumberOfArchivedPasswords(const qint32 &number_of_archived_passwords) {
    m_number_of_archived_passwords = number_of_archived_passwords;
    m_number_of_archived_passwords_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_number_of_archived_passwords_Set() const{
    return m_number_of_archived_passwords_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_number_of_archived_passwords_Valid() const{
    return m_number_of_archived_passwords_isValid;
}

OAIPasswordExpiration OAIUpdateLoginPasswordPolicies::getPasswordExpiration() const {
    return m_password_expiration;
}
void OAIUpdateLoginPasswordPolicies::setPasswordExpiration(const OAIPasswordExpiration &password_expiration) {
    m_password_expiration = password_expiration;
    m_password_expiration_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_password_expiration_Set() const{
    return m_password_expiration_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_password_expiration_Valid() const{
    return m_password_expiration_isValid;
}

bool OAIUpdateLoginPasswordPolicies::isRejectDictionaryWords() const {
    return m_reject_dictionary_words;
}
void OAIUpdateLoginPasswordPolicies::setRejectDictionaryWords(const bool &reject_dictionary_words) {
    m_reject_dictionary_words = reject_dictionary_words;
    m_reject_dictionary_words_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_dictionary_words_Set() const{
    return m_reject_dictionary_words_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_dictionary_words_Valid() const{
    return m_reject_dictionary_words_isValid;
}

bool OAIUpdateLoginPasswordPolicies::isRejectKeyboardPatterns() const {
    return m_reject_keyboard_patterns;
}
void OAIUpdateLoginPasswordPolicies::setRejectKeyboardPatterns(const bool &reject_keyboard_patterns) {
    m_reject_keyboard_patterns = reject_keyboard_patterns;
    m_reject_keyboard_patterns_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_keyboard_patterns_Set() const{
    return m_reject_keyboard_patterns_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_keyboard_patterns_Valid() const{
    return m_reject_keyboard_patterns_isValid;
}

bool OAIUpdateLoginPasswordPolicies::isRejectUserInfo() const {
    return m_reject_user_info;
}
void OAIUpdateLoginPasswordPolicies::setRejectUserInfo(const bool &reject_user_info) {
    m_reject_user_info = reject_user_info;
    m_reject_user_info_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_user_info_Set() const{
    return m_reject_user_info_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_reject_user_info_Valid() const{
    return m_reject_user_info_isValid;
}

OAIUserLockout OAIUpdateLoginPasswordPolicies::getUserLockout() const {
    return m_user_lockout;
}
void OAIUpdateLoginPasswordPolicies::setUserLockout(const OAIUserLockout &user_lockout) {
    m_user_lockout = user_lockout;
    m_user_lockout_isSet = true;
}

bool OAIUpdateLoginPasswordPolicies::is_user_lockout_Set() const{
    return m_user_lockout_isSet;
}

bool OAIUpdateLoginPasswordPolicies::is_user_lockout_Valid() const{
    return m_user_lockout_isValid;
}

bool OAIUpdateLoginPasswordPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_login_password_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_archived_passwords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_dictionary_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_keyboard_patterns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lockout.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLoginPasswordPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
