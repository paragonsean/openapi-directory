/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3ConfigUpdateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3ConfigUpdateRequest::OAIS3ConfigUpdateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3ConfigUpdateRequest::OAIS3ConfigUpdateRequest() {
    this->initializeModel();
}

OAIS3ConfigUpdateRequest::~OAIS3ConfigUpdateRequest() {}

void OAIS3ConfigUpdateRequest::initializeModel() {

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_bucket_name_isSet = false;
    m_bucket_name_isValid = false;

    m_bucket_url_isSet = false;
    m_bucket_url_isValid = false;

    m_endpoint_url_isSet = false;
    m_endpoint_url_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;
}

void OAIS3ConfigUpdateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3ConfigUpdateRequest::fromJsonObject(QJsonObject json) {

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_bucket_name_isValid = ::OpenAPI::fromJsonValue(m_bucket_name, json[QString("bucketName")]);
    m_bucket_name_isSet = !json[QString("bucketName")].isNull() && m_bucket_name_isValid;

    m_bucket_url_isValid = ::OpenAPI::fromJsonValue(m_bucket_url, json[QString("bucketUrl")]);
    m_bucket_url_isSet = !json[QString("bucketUrl")].isNull() && m_bucket_url_isValid;

    m_endpoint_url_isValid = ::OpenAPI::fromJsonValue(m_endpoint_url, json[QString("endpointUrl")]);
    m_endpoint_url_isSet = !json[QString("endpointUrl")].isNull() && m_endpoint_url_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("secretKey")]);
    m_secret_key_isSet = !json[QString("secretKey")].isNull() && m_secret_key_isValid;
}

QString OAIS3ConfigUpdateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3ConfigUpdateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_isSet) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_bucket_name_isSet) {
        obj.insert(QString("bucketName"), ::OpenAPI::toJsonValue(m_bucket_name));
    }
    if (m_bucket_url_isSet) {
        obj.insert(QString("bucketUrl"), ::OpenAPI::toJsonValue(m_bucket_url));
    }
    if (m_endpoint_url_isSet) {
        obj.insert(QString("endpointUrl"), ::OpenAPI::toJsonValue(m_endpoint_url));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("secretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    return obj;
}

QString OAIS3ConfigUpdateRequest::getAccessKey() const {
    return m_access_key;
}
void OAIS3ConfigUpdateRequest::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIS3ConfigUpdateRequest::is_access_key_Valid() const{
    return m_access_key_isValid;
}

QString OAIS3ConfigUpdateRequest::getBucketName() const {
    return m_bucket_name;
}
void OAIS3ConfigUpdateRequest::setBucketName(const QString &bucket_name) {
    m_bucket_name = bucket_name;
    m_bucket_name_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_bucket_name_Set() const{
    return m_bucket_name_isSet;
}

bool OAIS3ConfigUpdateRequest::is_bucket_name_Valid() const{
    return m_bucket_name_isValid;
}

QString OAIS3ConfigUpdateRequest::getBucketUrl() const {
    return m_bucket_url;
}
void OAIS3ConfigUpdateRequest::setBucketUrl(const QString &bucket_url) {
    m_bucket_url = bucket_url;
    m_bucket_url_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_bucket_url_Set() const{
    return m_bucket_url_isSet;
}

bool OAIS3ConfigUpdateRequest::is_bucket_url_Valid() const{
    return m_bucket_url_isValid;
}

QString OAIS3ConfigUpdateRequest::getEndpointUrl() const {
    return m_endpoint_url;
}
void OAIS3ConfigUpdateRequest::setEndpointUrl(const QString &endpoint_url) {
    m_endpoint_url = endpoint_url;
    m_endpoint_url_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_endpoint_url_Set() const{
    return m_endpoint_url_isSet;
}

bool OAIS3ConfigUpdateRequest::is_endpoint_url_Valid() const{
    return m_endpoint_url_isValid;
}

QString OAIS3ConfigUpdateRequest::getRegion() const {
    return m_region;
}
void OAIS3ConfigUpdateRequest::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_region_Set() const{
    return m_region_isSet;
}

bool OAIS3ConfigUpdateRequest::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIS3ConfigUpdateRequest::getSecretKey() const {
    return m_secret_key;
}
void OAIS3ConfigUpdateRequest::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAIS3ConfigUpdateRequest::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAIS3ConfigUpdateRequest::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

bool OAIS3ConfigUpdateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3ConfigUpdateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
