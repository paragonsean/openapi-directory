/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateOpenIdIdpConfigRequest.h
 *
 * Request model for creating an OpenID Connect IDP configuration
 */

#ifndef OAICreateOpenIdIdpConfigRequest_H
#define OAICreateOpenIdIdpConfigRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateOpenIdIdpConfigRequest : public OAIObject {
public:
    OAICreateOpenIdIdpConfigRequest();
    OAICreateOpenIdIdpConfigRequest(QString json);
    ~OAICreateOpenIdIdpConfigRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizationEndPointUrl() const;
    void setAuthorizationEndPointUrl(const QString &authorization_end_point_url);
    bool is_authorization_end_point_url_Set() const;
    bool is_authorization_end_point_url_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientSecret() const;
    void setClientSecret(const QString &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    QString getFallbackMappingClaim() const;
    void setFallbackMappingClaim(const QString &fallback_mapping_claim);
    bool is_fallback_mapping_claim_Set() const;
    bool is_fallback_mapping_claim_Valid() const;

    QString getFlow() const;
    void setFlow(const QString &flow);
    bool is_flow_Set() const;
    bool is_flow_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getJwksEndPointUrl() const;
    void setJwksEndPointUrl(const QString &jwks_end_point_url);
    bool is_jwks_end_point_url_Set() const;
    bool is_jwks_end_point_url_Valid() const;

    QString getMappingClaim() const;
    void setMappingClaim(const QString &mapping_claim);
    bool is_mapping_claim_Set() const;
    bool is_mapping_claim_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPkceChallengeMethod() const;
    void setPkceChallengeMethod(const QString &pkce_challenge_method);
    bool is_pkce_challenge_method_Set() const;
    bool is_pkce_challenge_method_Valid() const;

    bool isPkceEnabled() const;
    void setPkceEnabled(const bool &pkce_enabled);
    bool is_pkce_enabled_Set() const;
    bool is_pkce_enabled_Valid() const;

    QList<QString> getRedirectUris() const;
    void setRedirectUris(const QList<QString> &redirect_uris);
    bool is_redirect_uris_Set() const;
    bool is_redirect_uris_Valid() const;

    QList<QString> getScopes() const;
    void setScopes(const QList<QString> &scopes);
    bool is_scopes_Set() const;
    bool is_scopes_Valid() const;

    QString getTokenEndPointUrl() const;
    void setTokenEndPointUrl(const QString &token_end_point_url);
    bool is_token_end_point_url_Set() const;
    bool is_token_end_point_url_Valid() const;

    bool isUserImportEnabled() const;
    void setUserImportEnabled(const bool &user_import_enabled);
    bool is_user_import_enabled_Set() const;
    bool is_user_import_enabled_Valid() const;

    qint64 getUserImportGroup() const;
    void setUserImportGroup(const qint64 &user_import_group);
    bool is_user_import_group_Set() const;
    bool is_user_import_group_Valid() const;

    QString getUserInfoEndPointUrl() const;
    void setUserInfoEndPointUrl(const QString &user_info_end_point_url);
    bool is_user_info_end_point_url_Set() const;
    bool is_user_info_end_point_url_Valid() const;

    QString getUserInfoSource() const;
    void setUserInfoSource(const QString &user_info_source);
    bool is_user_info_source_Set() const;
    bool is_user_info_source_Valid() const;

    QString getUserManagementUrl() const;
    void setUserManagementUrl(const QString &user_management_url);
    bool is_user_management_url_Set() const;
    bool is_user_management_url_Valid() const;

    bool isUserUpdateEnabled() const;
    void setUserUpdateEnabled(const bool &user_update_enabled);
    bool is_user_update_enabled_Set() const;
    bool is_user_update_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorization_end_point_url;
    bool m_authorization_end_point_url_isSet;
    bool m_authorization_end_point_url_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    QString m_fallback_mapping_claim;
    bool m_fallback_mapping_claim_isSet;
    bool m_fallback_mapping_claim_isValid;

    QString m_flow;
    bool m_flow_isSet;
    bool m_flow_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_jwks_end_point_url;
    bool m_jwks_end_point_url_isSet;
    bool m_jwks_end_point_url_isValid;

    QString m_mapping_claim;
    bool m_mapping_claim_isSet;
    bool m_mapping_claim_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pkce_challenge_method;
    bool m_pkce_challenge_method_isSet;
    bool m_pkce_challenge_method_isValid;

    bool m_pkce_enabled;
    bool m_pkce_enabled_isSet;
    bool m_pkce_enabled_isValid;

    QList<QString> m_redirect_uris;
    bool m_redirect_uris_isSet;
    bool m_redirect_uris_isValid;

    QList<QString> m_scopes;
    bool m_scopes_isSet;
    bool m_scopes_isValid;

    QString m_token_end_point_url;
    bool m_token_end_point_url_isSet;
    bool m_token_end_point_url_isValid;

    bool m_user_import_enabled;
    bool m_user_import_enabled_isSet;
    bool m_user_import_enabled_isValid;

    qint64 m_user_import_group;
    bool m_user_import_group_isSet;
    bool m_user_import_group_isValid;

    QString m_user_info_end_point_url;
    bool m_user_info_end_point_url_isSet;
    bool m_user_info_end_point_url_isValid;

    QString m_user_info_source;
    bool m_user_info_source_isSet;
    bool m_user_info_source_isValid;

    QString m_user_management_url;
    bool m_user_management_url_isSet;
    bool m_user_management_url_isValid;

    bool m_user_update_enabled;
    bool m_user_update_enabled_isSet;
    bool m_user_update_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateOpenIdIdpConfigRequest)

#endif // OAICreateOpenIdIdpConfigRequest_H
