/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditNodeInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditNodeInfo::OAIAuditNodeInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditNodeInfo::OAIAuditNodeInfo() {
    this->initializeModel();
}

OAIAuditNodeInfo::~OAIAuditNodeInfo() {}

void OAIAuditNodeInfo::initializeModel() {

    m_count_children_isSet = false;
    m_count_children_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_is_encrypted_isSet = false;
    m_node_is_encrypted_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_node_parent_id_isSet = false;
    m_node_parent_id_isValid = false;

    m_node_parent_path_isSet = false;
    m_node_parent_path_isValid = false;
}

void OAIAuditNodeInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditNodeInfo::fromJsonObject(QJsonObject json) {

    m_count_children_isValid = ::OpenAPI::fromJsonValue(m_count_children, json[QString("countChildren")]);
    m_count_children_isSet = !json[QString("countChildren")].isNull() && m_count_children_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_node_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_node_is_encrypted, json[QString("nodeIsEncrypted")]);
    m_node_is_encrypted_isSet = !json[QString("nodeIsEncrypted")].isNull() && m_node_is_encrypted_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("nodeName")]);
    m_node_name_isSet = !json[QString("nodeName")].isNull() && m_node_name_isValid;

    m_node_parent_id_isValid = ::OpenAPI::fromJsonValue(m_node_parent_id, json[QString("nodeParentId")]);
    m_node_parent_id_isSet = !json[QString("nodeParentId")].isNull() && m_node_parent_id_isValid;

    m_node_parent_path_isValid = ::OpenAPI::fromJsonValue(m_node_parent_path, json[QString("nodeParentPath")]);
    m_node_parent_path_isSet = !json[QString("nodeParentPath")].isNull() && m_node_parent_path_isValid;
}

QString OAIAuditNodeInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditNodeInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_count_children_isSet) {
        obj.insert(QString("countChildren"), ::OpenAPI::toJsonValue(m_count_children));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_is_encrypted_isSet) {
        obj.insert(QString("nodeIsEncrypted"), ::OpenAPI::toJsonValue(m_node_is_encrypted));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("nodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_node_parent_id_isSet) {
        obj.insert(QString("nodeParentId"), ::OpenAPI::toJsonValue(m_node_parent_id));
    }
    if (m_node_parent_path_isSet) {
        obj.insert(QString("nodeParentPath"), ::OpenAPI::toJsonValue(m_node_parent_path));
    }
    return obj;
}

qint64 OAIAuditNodeInfo::getCountChildren() const {
    return m_count_children;
}
void OAIAuditNodeInfo::setCountChildren(const qint64 &count_children) {
    m_count_children = count_children;
    m_count_children_isSet = true;
}

bool OAIAuditNodeInfo::is_count_children_Set() const{
    return m_count_children_isSet;
}

bool OAIAuditNodeInfo::is_count_children_Valid() const{
    return m_count_children_isValid;
}

qint64 OAIAuditNodeInfo::getNodeId() const {
    return m_node_id;
}
void OAIAuditNodeInfo::setNodeId(const qint64 &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIAuditNodeInfo::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIAuditNodeInfo::is_node_id_Valid() const{
    return m_node_id_isValid;
}

bool OAIAuditNodeInfo::isNodeIsEncrypted() const {
    return m_node_is_encrypted;
}
void OAIAuditNodeInfo::setNodeIsEncrypted(const bool &node_is_encrypted) {
    m_node_is_encrypted = node_is_encrypted;
    m_node_is_encrypted_isSet = true;
}

bool OAIAuditNodeInfo::is_node_is_encrypted_Set() const{
    return m_node_is_encrypted_isSet;
}

bool OAIAuditNodeInfo::is_node_is_encrypted_Valid() const{
    return m_node_is_encrypted_isValid;
}

QString OAIAuditNodeInfo::getNodeName() const {
    return m_node_name;
}
void OAIAuditNodeInfo::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIAuditNodeInfo::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIAuditNodeInfo::is_node_name_Valid() const{
    return m_node_name_isValid;
}

qint64 OAIAuditNodeInfo::getNodeParentId() const {
    return m_node_parent_id;
}
void OAIAuditNodeInfo::setNodeParentId(const qint64 &node_parent_id) {
    m_node_parent_id = node_parent_id;
    m_node_parent_id_isSet = true;
}

bool OAIAuditNodeInfo::is_node_parent_id_Set() const{
    return m_node_parent_id_isSet;
}

bool OAIAuditNodeInfo::is_node_parent_id_Valid() const{
    return m_node_parent_id_isValid;
}

QString OAIAuditNodeInfo::getNodeParentPath() const {
    return m_node_parent_path;
}
void OAIAuditNodeInfo::setNodeParentPath(const QString &node_parent_path) {
    m_node_parent_path = node_parent_path;
    m_node_parent_path_isSet = true;
}

bool OAIAuditNodeInfo::is_node_parent_path_Set() const{
    return m_node_parent_path_isSet;
}

bool OAIAuditNodeInfo::is_node_parent_path_Valid() const{
    return m_node_parent_path_isValid;
}

bool OAIAuditNodeInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_parent_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditNodeInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_node_id_isValid && m_node_name_isValid && m_node_parent_path_isValid && true;
}

} // namespace OpenAPI
