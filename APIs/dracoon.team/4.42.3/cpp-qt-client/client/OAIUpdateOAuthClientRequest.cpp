/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateOAuthClientRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateOAuthClientRequest::OAIUpdateOAuthClientRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateOAuthClientRequest::OAIUpdateOAuthClientRequest() {
    this->initializeModel();
}

OAIUpdateOAuthClientRequest::~OAIUpdateOAuthClientRequest() {}

void OAIUpdateOAuthClientRequest::initializeModel() {

    m_access_token_validity_isSet = false;
    m_access_token_validity_isValid = false;

    m_approval_validity_isSet = false;
    m_approval_validity_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_grant_types_isSet = false;
    m_grant_types_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;

    m_refresh_token_validity_isSet = false;
    m_refresh_token_validity_isValid = false;
}

void OAIUpdateOAuthClientRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateOAuthClientRequest::fromJsonObject(QJsonObject json) {

    m_access_token_validity_isValid = ::OpenAPI::fromJsonValue(m_access_token_validity, json[QString("accessTokenValidity")]);
    m_access_token_validity_isSet = !json[QString("accessTokenValidity")].isNull() && m_access_token_validity_isValid;

    m_approval_validity_isValid = ::OpenAPI::fromJsonValue(m_approval_validity, json[QString("approvalValidity")]);
    m_approval_validity_isSet = !json[QString("approvalValidity")].isNull() && m_approval_validity_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("clientType")]);
    m_client_type_isSet = !json[QString("clientType")].isNull() && m_client_type_isValid;

    m_grant_types_isValid = ::OpenAPI::fromJsonValue(m_grant_types, json[QString("grantTypes")]);
    m_grant_types_isSet = !json[QString("grantTypes")].isNull() && m_grant_types_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirectUris")]);
    m_redirect_uris_isSet = !json[QString("redirectUris")].isNull() && m_redirect_uris_isValid;

    m_refresh_token_validity_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_validity, json[QString("refreshTokenValidity")]);
    m_refresh_token_validity_isSet = !json[QString("refreshTokenValidity")].isNull() && m_refresh_token_validity_isValid;
}

QString OAIUpdateOAuthClientRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateOAuthClientRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_validity_isSet) {
        obj.insert(QString("accessTokenValidity"), ::OpenAPI::toJsonValue(m_access_token_validity));
    }
    if (m_approval_validity_isSet) {
        obj.insert(QString("approvalValidity"), ::OpenAPI::toJsonValue(m_approval_validity));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("clientType"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_grant_types.size() > 0) {
        obj.insert(QString("grantTypes"), ::OpenAPI::toJsonValue(m_grant_types));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_redirect_uris.size() > 0) {
        obj.insert(QString("redirectUris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    if (m_refresh_token_validity_isSet) {
        obj.insert(QString("refreshTokenValidity"), ::OpenAPI::toJsonValue(m_refresh_token_validity));
    }
    return obj;
}

qint32 OAIUpdateOAuthClientRequest::getAccessTokenValidity() const {
    return m_access_token_validity;
}
void OAIUpdateOAuthClientRequest::setAccessTokenValidity(const qint32 &access_token_validity) {
    m_access_token_validity = access_token_validity;
    m_access_token_validity_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_access_token_validity_Set() const{
    return m_access_token_validity_isSet;
}

bool OAIUpdateOAuthClientRequest::is_access_token_validity_Valid() const{
    return m_access_token_validity_isValid;
}

qint32 OAIUpdateOAuthClientRequest::getApprovalValidity() const {
    return m_approval_validity;
}
void OAIUpdateOAuthClientRequest::setApprovalValidity(const qint32 &approval_validity) {
    m_approval_validity = approval_validity;
    m_approval_validity_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_approval_validity_Set() const{
    return m_approval_validity_isSet;
}

bool OAIUpdateOAuthClientRequest::is_approval_validity_Valid() const{
    return m_approval_validity_isValid;
}

QString OAIUpdateOAuthClientRequest::getClientName() const {
    return m_client_name;
}
void OAIUpdateOAuthClientRequest::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIUpdateOAuthClientRequest::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAIUpdateOAuthClientRequest::getClientSecret() const {
    return m_client_secret;
}
void OAIUpdateOAuthClientRequest::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIUpdateOAuthClientRequest::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIUpdateOAuthClientRequest::getClientType() const {
    return m_client_type;
}
void OAIUpdateOAuthClientRequest::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAIUpdateOAuthClientRequest::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QList<QString> OAIUpdateOAuthClientRequest::getGrantTypes() const {
    return m_grant_types;
}
void OAIUpdateOAuthClientRequest::setGrantTypes(const QList<QString> &grant_types) {
    m_grant_types = grant_types;
    m_grant_types_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_grant_types_Set() const{
    return m_grant_types_isSet;
}

bool OAIUpdateOAuthClientRequest::is_grant_types_Valid() const{
    return m_grant_types_isValid;
}

bool OAIUpdateOAuthClientRequest::isIsEnabled() const {
    return m_is_enabled;
}
void OAIUpdateOAuthClientRequest::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIUpdateOAuthClientRequest::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<QString> OAIUpdateOAuthClientRequest::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIUpdateOAuthClientRequest::setRedirectUris(const QList<QString> &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIUpdateOAuthClientRequest::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

qint32 OAIUpdateOAuthClientRequest::getRefreshTokenValidity() const {
    return m_refresh_token_validity;
}
void OAIUpdateOAuthClientRequest::setRefreshTokenValidity(const qint32 &refresh_token_validity) {
    m_refresh_token_validity = refresh_token_validity;
    m_refresh_token_validity_isSet = true;
}

bool OAIUpdateOAuthClientRequest::is_refresh_token_validity_Set() const{
    return m_refresh_token_validity_isSet;
}

bool OAIUpdateOAuthClientRequest::is_refresh_token_validity_Valid() const{
    return m_refresh_token_validity_isValid;
}

bool OAIUpdateOAuthClientRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateOAuthClientRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_grant_types_isValid && true;
}

} // namespace OpenAPI
