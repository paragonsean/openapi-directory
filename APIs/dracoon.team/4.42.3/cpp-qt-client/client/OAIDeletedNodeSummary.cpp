/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletedNodeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletedNodeSummary::OAIDeletedNodeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletedNodeSummary::OAIDeletedNodeSummary() {
    this->initializeModel();
}

OAIDeletedNodeSummary::~OAIDeletedNodeSummary() {}

void OAIDeletedNodeSummary::initializeModel() {

    m_cnt_versions_isSet = false;
    m_cnt_versions_isValid = false;

    m_first_deleted_at_isSet = false;
    m_first_deleted_at_isValid = false;

    m_last_deleted_at_isSet = false;
    m_last_deleted_at_isValid = false;

    m_last_deleted_node_id_isSet = false;
    m_last_deleted_node_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_path_isSet = false;
    m_parent_path_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_timestamp_creation_isSet = false;
    m_timestamp_creation_isValid = false;

    m_timestamp_modification_isSet = false;
    m_timestamp_modification_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDeletedNodeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletedNodeSummary::fromJsonObject(QJsonObject json) {

    m_cnt_versions_isValid = ::OpenAPI::fromJsonValue(m_cnt_versions, json[QString("cntVersions")]);
    m_cnt_versions_isSet = !json[QString("cntVersions")].isNull() && m_cnt_versions_isValid;

    m_first_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_first_deleted_at, json[QString("firstDeletedAt")]);
    m_first_deleted_at_isSet = !json[QString("firstDeletedAt")].isNull() && m_first_deleted_at_isValid;

    m_last_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_last_deleted_at, json[QString("lastDeletedAt")]);
    m_last_deleted_at_isSet = !json[QString("lastDeletedAt")].isNull() && m_last_deleted_at_isValid;

    m_last_deleted_node_id_isValid = ::OpenAPI::fromJsonValue(m_last_deleted_node_id, json[QString("lastDeletedNodeId")]);
    m_last_deleted_node_id_isSet = !json[QString("lastDeletedNodeId")].isNull() && m_last_deleted_node_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_parent_path_isValid = ::OpenAPI::fromJsonValue(m_parent_path, json[QString("parentPath")]);
    m_parent_path_isSet = !json[QString("parentPath")].isNull() && m_parent_path_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_timestamp_creation_isValid = ::OpenAPI::fromJsonValue(m_timestamp_creation, json[QString("timestampCreation")]);
    m_timestamp_creation_isSet = !json[QString("timestampCreation")].isNull() && m_timestamp_creation_isValid;

    m_timestamp_modification_isValid = ::OpenAPI::fromJsonValue(m_timestamp_modification, json[QString("timestampModification")]);
    m_timestamp_modification_isSet = !json[QString("timestampModification")].isNull() && m_timestamp_modification_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDeletedNodeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletedNodeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_cnt_versions_isSet) {
        obj.insert(QString("cntVersions"), ::OpenAPI::toJsonValue(m_cnt_versions));
    }
    if (m_first_deleted_at_isSet) {
        obj.insert(QString("firstDeletedAt"), ::OpenAPI::toJsonValue(m_first_deleted_at));
    }
    if (m_last_deleted_at_isSet) {
        obj.insert(QString("lastDeletedAt"), ::OpenAPI::toJsonValue(m_last_deleted_at));
    }
    if (m_last_deleted_node_id_isSet) {
        obj.insert(QString("lastDeletedNodeId"), ::OpenAPI::toJsonValue(m_last_deleted_node_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_path_isSet) {
        obj.insert(QString("parentPath"), ::OpenAPI::toJsonValue(m_parent_path));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_timestamp_creation_isSet) {
        obj.insert(QString("timestampCreation"), ::OpenAPI::toJsonValue(m_timestamp_creation));
    }
    if (m_timestamp_modification_isSet) {
        obj.insert(QString("timestampModification"), ::OpenAPI::toJsonValue(m_timestamp_modification));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIDeletedNodeSummary::getCntVersions() const {
    return m_cnt_versions;
}
void OAIDeletedNodeSummary::setCntVersions(const qint32 &cnt_versions) {
    m_cnt_versions = cnt_versions;
    m_cnt_versions_isSet = true;
}

bool OAIDeletedNodeSummary::is_cnt_versions_Set() const{
    return m_cnt_versions_isSet;
}

bool OAIDeletedNodeSummary::is_cnt_versions_Valid() const{
    return m_cnt_versions_isValid;
}

QDateTime OAIDeletedNodeSummary::getFirstDeletedAt() const {
    return m_first_deleted_at;
}
void OAIDeletedNodeSummary::setFirstDeletedAt(const QDateTime &first_deleted_at) {
    m_first_deleted_at = first_deleted_at;
    m_first_deleted_at_isSet = true;
}

bool OAIDeletedNodeSummary::is_first_deleted_at_Set() const{
    return m_first_deleted_at_isSet;
}

bool OAIDeletedNodeSummary::is_first_deleted_at_Valid() const{
    return m_first_deleted_at_isValid;
}

QDateTime OAIDeletedNodeSummary::getLastDeletedAt() const {
    return m_last_deleted_at;
}
void OAIDeletedNodeSummary::setLastDeletedAt(const QDateTime &last_deleted_at) {
    m_last_deleted_at = last_deleted_at;
    m_last_deleted_at_isSet = true;
}

bool OAIDeletedNodeSummary::is_last_deleted_at_Set() const{
    return m_last_deleted_at_isSet;
}

bool OAIDeletedNodeSummary::is_last_deleted_at_Valid() const{
    return m_last_deleted_at_isValid;
}

qint64 OAIDeletedNodeSummary::getLastDeletedNodeId() const {
    return m_last_deleted_node_id;
}
void OAIDeletedNodeSummary::setLastDeletedNodeId(const qint64 &last_deleted_node_id) {
    m_last_deleted_node_id = last_deleted_node_id;
    m_last_deleted_node_id_isSet = true;
}

bool OAIDeletedNodeSummary::is_last_deleted_node_id_Set() const{
    return m_last_deleted_node_id_isSet;
}

bool OAIDeletedNodeSummary::is_last_deleted_node_id_Valid() const{
    return m_last_deleted_node_id_isValid;
}

QString OAIDeletedNodeSummary::getName() const {
    return m_name;
}
void OAIDeletedNodeSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeletedNodeSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeletedNodeSummary::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIDeletedNodeSummary::getParentId() const {
    return m_parent_id;
}
void OAIDeletedNodeSummary::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIDeletedNodeSummary::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIDeletedNodeSummary::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIDeletedNodeSummary::getParentPath() const {
    return m_parent_path;
}
void OAIDeletedNodeSummary::setParentPath(const QString &parent_path) {
    m_parent_path = parent_path;
    m_parent_path_isSet = true;
}

bool OAIDeletedNodeSummary::is_parent_path_Set() const{
    return m_parent_path_isSet;
}

bool OAIDeletedNodeSummary::is_parent_path_Valid() const{
    return m_parent_path_isValid;
}

qint64 OAIDeletedNodeSummary::getReferenceId() const {
    return m_reference_id;
}
void OAIDeletedNodeSummary::setReferenceId(const qint64 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDeletedNodeSummary::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDeletedNodeSummary::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

QDateTime OAIDeletedNodeSummary::getTimestampCreation() const {
    return m_timestamp_creation;
}
void OAIDeletedNodeSummary::setTimestampCreation(const QDateTime &timestamp_creation) {
    m_timestamp_creation = timestamp_creation;
    m_timestamp_creation_isSet = true;
}

bool OAIDeletedNodeSummary::is_timestamp_creation_Set() const{
    return m_timestamp_creation_isSet;
}

bool OAIDeletedNodeSummary::is_timestamp_creation_Valid() const{
    return m_timestamp_creation_isValid;
}

QDateTime OAIDeletedNodeSummary::getTimestampModification() const {
    return m_timestamp_modification;
}
void OAIDeletedNodeSummary::setTimestampModification(const QDateTime &timestamp_modification) {
    m_timestamp_modification = timestamp_modification;
    m_timestamp_modification_isSet = true;
}

bool OAIDeletedNodeSummary::is_timestamp_modification_Set() const{
    return m_timestamp_modification_isSet;
}

bool OAIDeletedNodeSummary::is_timestamp_modification_Valid() const{
    return m_timestamp_modification_isValid;
}

QString OAIDeletedNodeSummary::getType() const {
    return m_type;
}
void OAIDeletedNodeSummary::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeletedNodeSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeletedNodeSummary::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDeletedNodeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cnt_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_deleted_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_modification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletedNodeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cnt_versions_isValid && m_first_deleted_at_isValid && m_last_deleted_at_isValid && m_last_deleted_node_id_isValid && m_name_isValid && m_parent_id_isValid && m_parent_path_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
