/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPublicApi_H
#define OAI_OAIPublicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveDirectoryAuthInfo.h"
#include "OAIChunkUploadResponse.h"
#include "OAICompleteS3ShareUploadRequest.h"
#include "OAICreateShareUploadChannelRequest.h"
#include "OAICreateShareUploadChannelResponse.h"
#include "OAIErrorResponse.h"
#include "OAIGeneratePresignedUrlsRequest.h"
#include "OAIHttpFileElement.h"
#include "OAIOpenIdAuthInfo.h"
#include "OAIPresignedUrlList.h"
#include "OAIPublicDownloadShare.h"
#include "OAIPublicDownloadTokenGenerateRequest.h"
#include "OAIPublicDownloadTokenGenerateResponse.h"
#include "OAIPublicUploadShare.h"
#include "OAIPublicUploadedFileData.h"
#include "OAIS3ShareUploadStatus.h"
#include "OAISdsServerTime.h"
#include "OAISoftwareVersionData.h"
#include "OAISystemInfo.h"
#include "OAIThirdPartyDependenciesData.h"
#include "OAIUserFileKeyList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPublicApi : public QObject {
    Q_OBJECT

public:
    OAIPublicApi(const int timeOut = 0);
    ~OAIPublicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    */
    virtual void cancelFileUploadViaShare(const QString &access_key, const QString &upload_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  password QString [optional]
    */
    virtual void checkPublicDownloadSharePassword(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &password = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  oai_user_file_key_list OAIUserFileKeyList [optional]
    */
    virtual void completeFileUploadViaShare(const QString &access_key, const QString &upload_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUserFileKeyList> &oai_user_file_key_list = ::OpenAPI::OptionalParam<OAIUserFileKeyList>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    * @param[in]  oai_complete_s3_share_upload_request OAICompleteS3ShareUploadRequest [required]
    */
    virtual void completeS3FileUploadViaShare(const QString &access_key, const QString &upload_id, const OAICompleteS3ShareUploadRequest &oai_complete_s3_share_upload_request);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  oai_create_share_upload_channel_request OAICreateShareUploadChannelRequest [required]
    */
    virtual void createShareUploadChannel(const QString &access_key, const OAICreateShareUploadChannelRequest &oai_create_share_upload_channel_request);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  range QString [optional]
    * @param[in]  generic_mimetype bool [optional]
    * @param[in]  r_inline bool [optional]
    */
    virtual void downloadFileViaTokenPublic(const QString &access_key, const QString &token, const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &generic_mimetype = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_inline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  token QString [required]
    * @param[in]  range QString [optional]
    * @param[in]  generic_mimetype bool [optional]
    * @param[in]  r_inline bool [optional]
    */
    virtual void downloadFileViaTokenPublic1(const QString &access_key, const QString &token, const ::OpenAPI::OptionalParam<QString> &range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &generic_mimetype = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &r_inline = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  oai_public_download_token_generate_request OAIPublicDownloadTokenGenerateRequest [optional]
    */
    virtual void generateDownloadUrlPublic(const QString &access_key, const ::OpenAPI::OptionalParam<OAIPublicDownloadTokenGenerateRequest> &oai_public_download_token_generate_request = ::OpenAPI::OptionalParam<OAIPublicDownloadTokenGenerateRequest>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    * @param[in]  oai_generate_presigned_urls_request OAIGeneratePresignedUrlsRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void generatePresignedUrlsPublic(const QString &access_key, const QString &upload_id, const OAIGeneratePresignedUrlsRequest &oai_generate_presigned_urls_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  is_global_available bool [optional]
    */
    virtual void requestActiveDirectoryAuthInfo(const ::OpenAPI::OptionalParam<bool> &is_global_available = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  is_global_available bool [optional]
    */
    virtual void requestOpenIdAuthInfo(const ::OpenAPI::OptionalParam<bool> &is_global_available = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void requestPublicDownloadShareInfo(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  x_sds_share_password QString [optional]
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void requestPublicUploadShareInfo(const QString &access_key, const ::OpenAPI::OptionalParam<QString> &x_sds_share_password = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void requestSoftwareVersion(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  is_enabled bool [optional]
    */
    virtual void requestSystemInfo(const ::OpenAPI::OptionalParam<bool> &is_enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void requestSystemTime(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());


    virtual void requestThirdPartyDependencies();

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    */
    virtual void requestUploadStatusPublic(const QString &access_key, const QString &upload_id);

    /**
    * @param[in]  access_key QString [required]
    * @param[in]  upload_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  content_range QString [optional]
    * @param[in]  x_sds_date_format QString [optional]
    */
    virtual void uploadFileAsMultipartPublic1(const QString &access_key, const QString &upload_id, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &content_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelFileUploadViaShareCallback(OAIHttpRequestWorker *worker);
    void checkPublicDownloadSharePasswordCallback(OAIHttpRequestWorker *worker);
    void completeFileUploadViaShareCallback(OAIHttpRequestWorker *worker);
    void completeS3FileUploadViaShareCallback(OAIHttpRequestWorker *worker);
    void createShareUploadChannelCallback(OAIHttpRequestWorker *worker);
    void downloadFileViaTokenPublicCallback(OAIHttpRequestWorker *worker);
    void downloadFileViaTokenPublic1Callback(OAIHttpRequestWorker *worker);
    void generateDownloadUrlPublicCallback(OAIHttpRequestWorker *worker);
    void generatePresignedUrlsPublicCallback(OAIHttpRequestWorker *worker);
    void requestActiveDirectoryAuthInfoCallback(OAIHttpRequestWorker *worker);
    void requestOpenIdAuthInfoCallback(OAIHttpRequestWorker *worker);
    void requestPublicDownloadShareInfoCallback(OAIHttpRequestWorker *worker);
    void requestPublicUploadShareInfoCallback(OAIHttpRequestWorker *worker);
    void requestSoftwareVersionCallback(OAIHttpRequestWorker *worker);
    void requestSystemInfoCallback(OAIHttpRequestWorker *worker);
    void requestSystemTimeCallback(OAIHttpRequestWorker *worker);
    void requestThirdPartyDependenciesCallback(OAIHttpRequestWorker *worker);
    void requestUploadStatusPublicCallback(OAIHttpRequestWorker *worker);
    void uploadFileAsMultipartPublic1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelFileUploadViaShareSignal();
    void checkPublicDownloadSharePasswordSignal();
    void completeFileUploadViaShareSignal(OAIPublicUploadedFileData summary);
    void completeS3FileUploadViaShareSignal();
    void createShareUploadChannelSignal(OAICreateShareUploadChannelResponse summary);
    void downloadFileViaTokenPublicSignal();
    void downloadFileViaTokenPublic1Signal();
    void generateDownloadUrlPublicSignal(OAIPublicDownloadTokenGenerateResponse summary);
    void generatePresignedUrlsPublicSignal(OAIPresignedUrlList summary);
    void requestActiveDirectoryAuthInfoSignal(OAIActiveDirectoryAuthInfo summary);
    void requestOpenIdAuthInfoSignal(OAIOpenIdAuthInfo summary);
    void requestPublicDownloadShareInfoSignal(OAIPublicDownloadShare summary);
    void requestPublicUploadShareInfoSignal(OAIPublicUploadShare summary);
    void requestSoftwareVersionSignal(OAISoftwareVersionData summary);
    void requestSystemInfoSignal(OAISystemInfo summary);
    void requestSystemTimeSignal(OAISdsServerTime summary);
    void requestThirdPartyDependenciesSignal(QList<OAIThirdPartyDependenciesData> summary);
    void requestUploadStatusPublicSignal(OAIS3ShareUploadStatus summary);
    void uploadFileAsMultipartPublic1Signal(OAIChunkUploadResponse summary);


    void cancelFileUploadViaShareSignalFull(OAIHttpRequestWorker *worker);
    void checkPublicDownloadSharePasswordSignalFull(OAIHttpRequestWorker *worker);
    void completeFileUploadViaShareSignalFull(OAIHttpRequestWorker *worker, OAIPublicUploadedFileData summary);
    void completeS3FileUploadViaShareSignalFull(OAIHttpRequestWorker *worker);
    void createShareUploadChannelSignalFull(OAIHttpRequestWorker *worker, OAICreateShareUploadChannelResponse summary);
    void downloadFileViaTokenPublicSignalFull(OAIHttpRequestWorker *worker);
    void downloadFileViaTokenPublic1SignalFull(OAIHttpRequestWorker *worker);
    void generateDownloadUrlPublicSignalFull(OAIHttpRequestWorker *worker, OAIPublicDownloadTokenGenerateResponse summary);
    void generatePresignedUrlsPublicSignalFull(OAIHttpRequestWorker *worker, OAIPresignedUrlList summary);
    void requestActiveDirectoryAuthInfoSignalFull(OAIHttpRequestWorker *worker, OAIActiveDirectoryAuthInfo summary);
    void requestOpenIdAuthInfoSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdAuthInfo summary);
    void requestPublicDownloadShareInfoSignalFull(OAIHttpRequestWorker *worker, OAIPublicDownloadShare summary);
    void requestPublicUploadShareInfoSignalFull(OAIHttpRequestWorker *worker, OAIPublicUploadShare summary);
    void requestSoftwareVersionSignalFull(OAIHttpRequestWorker *worker, OAISoftwareVersionData summary);
    void requestSystemInfoSignalFull(OAIHttpRequestWorker *worker, OAISystemInfo summary);
    void requestSystemTimeSignalFull(OAIHttpRequestWorker *worker, OAISdsServerTime summary);
    void requestThirdPartyDependenciesSignalFull(OAIHttpRequestWorker *worker, QList<OAIThirdPartyDependenciesData> summary);
    void requestUploadStatusPublicSignalFull(OAIHttpRequestWorker *worker, OAIS3ShareUploadStatus summary);
    void uploadFileAsMultipartPublic1SignalFull(OAIHttpRequestWorker *worker, OAIChunkUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use cancelFileUploadViaShareSignalError() instead")
    void cancelFileUploadViaShareSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFileUploadViaShareSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkPublicDownloadSharePasswordSignalError() instead")
    void checkPublicDownloadSharePasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void checkPublicDownloadSharePasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeFileUploadViaShareSignalError() instead")
    void completeFileUploadViaShareSignalE(OAIPublicUploadedFileData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeFileUploadViaShareSignalError(OAIPublicUploadedFileData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeS3FileUploadViaShareSignalError() instead")
    void completeS3FileUploadViaShareSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completeS3FileUploadViaShareSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShareUploadChannelSignalError() instead")
    void createShareUploadChannelSignalE(OAICreateShareUploadChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createShareUploadChannelSignalError(OAICreateShareUploadChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenPublicSignalError() instead")
    void downloadFileViaTokenPublicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenPublicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenPublic1SignalError() instead")
    void downloadFileViaTokenPublic1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenPublic1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlPublicSignalError() instead")
    void generateDownloadUrlPublicSignalE(OAIPublicDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlPublicSignalError(OAIPublicDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedUrlsPublicSignalError() instead")
    void generatePresignedUrlsPublicSignalE(OAIPresignedUrlList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedUrlsPublicSignalError(OAIPresignedUrlList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestActiveDirectoryAuthInfoSignalError() instead")
    void requestActiveDirectoryAuthInfoSignalE(OAIActiveDirectoryAuthInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestActiveDirectoryAuthInfoSignalError(OAIActiveDirectoryAuthInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdAuthInfoSignalError() instead")
    void requestOpenIdAuthInfoSignalE(OAIOpenIdAuthInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdAuthInfoSignalError(OAIOpenIdAuthInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPublicDownloadShareInfoSignalError() instead")
    void requestPublicDownloadShareInfoSignalE(OAIPublicDownloadShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPublicDownloadShareInfoSignalError(OAIPublicDownloadShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPublicUploadShareInfoSignalError() instead")
    void requestPublicUploadShareInfoSignalE(OAIPublicUploadShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPublicUploadShareInfoSignalError(OAIPublicUploadShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSoftwareVersionSignalError() instead")
    void requestSoftwareVersionSignalE(OAISoftwareVersionData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSoftwareVersionSignalError(OAISoftwareVersionData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemInfoSignalError() instead")
    void requestSystemInfoSignalE(OAISystemInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemInfoSignalError(OAISystemInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemTimeSignalError() instead")
    void requestSystemTimeSignalE(OAISdsServerTime summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemTimeSignalError(OAISdsServerTime summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestThirdPartyDependenciesSignalError() instead")
    void requestThirdPartyDependenciesSignalE(QList<OAIThirdPartyDependenciesData> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestThirdPartyDependenciesSignalError(QList<OAIThirdPartyDependenciesData> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUploadStatusPublicSignalError() instead")
    void requestUploadStatusPublicSignalE(OAIS3ShareUploadStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUploadStatusPublicSignalError(OAIS3ShareUploadStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileAsMultipartPublic1SignalError() instead")
    void uploadFileAsMultipartPublic1SignalE(OAIChunkUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileAsMultipartPublic1SignalError(OAIChunkUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelFileUploadViaShareSignalErrorFull() instead")
    void cancelFileUploadViaShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFileUploadViaShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkPublicDownloadSharePasswordSignalErrorFull() instead")
    void checkPublicDownloadSharePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPublicDownloadSharePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeFileUploadViaShareSignalErrorFull() instead")
    void completeFileUploadViaShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeFileUploadViaShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeS3FileUploadViaShareSignalErrorFull() instead")
    void completeS3FileUploadViaShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeS3FileUploadViaShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createShareUploadChannelSignalErrorFull() instead")
    void createShareUploadChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createShareUploadChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenPublicSignalErrorFull() instead")
    void downloadFileViaTokenPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadFileViaTokenPublic1SignalErrorFull() instead")
    void downloadFileViaTokenPublic1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadFileViaTokenPublic1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlPublicSignalErrorFull() instead")
    void generateDownloadUrlPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedUrlsPublicSignalErrorFull() instead")
    void generatePresignedUrlsPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedUrlsPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestActiveDirectoryAuthInfoSignalErrorFull() instead")
    void requestActiveDirectoryAuthInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestActiveDirectoryAuthInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdAuthInfoSignalErrorFull() instead")
    void requestOpenIdAuthInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdAuthInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPublicDownloadShareInfoSignalErrorFull() instead")
    void requestPublicDownloadShareInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPublicDownloadShareInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPublicUploadShareInfoSignalErrorFull() instead")
    void requestPublicUploadShareInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPublicUploadShareInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSoftwareVersionSignalErrorFull() instead")
    void requestSoftwareVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSoftwareVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemInfoSignalErrorFull() instead")
    void requestSystemInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemTimeSignalErrorFull() instead")
    void requestSystemTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestThirdPartyDependenciesSignalErrorFull() instead")
    void requestThirdPartyDependenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestThirdPartyDependenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUploadStatusPublicSignalErrorFull() instead")
    void requestUploadStatusPublicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUploadStatusPublicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileAsMultipartPublic1SignalErrorFull() instead")
    void uploadFileAsMultipartPublic1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileAsMultipartPublic1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
