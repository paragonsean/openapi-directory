/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup::OAIGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup::OAIGroup() {
    this->initializeModel();
}

OAIGroup::~OAIGroup() {}

void OAIGroup::initializeModel() {

    m_cnt_users_isSet = false;
    m_cnt_users_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_group_roles_isSet = false;
    m_group_roles_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup::fromJsonObject(QJsonObject json) {

    m_cnt_users_isValid = ::OpenAPI::fromJsonValue(m_cnt_users, json[QString("cntUsers")]);
    m_cnt_users_isSet = !json[QString("cntUsers")].isNull() && m_cnt_users_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_group_roles_isValid = ::OpenAPI::fromJsonValue(m_group_roles, json[QString("groupRoles")]);
    m_group_roles_isSet = !json[QString("groupRoles")].isNull() && m_group_roles_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_cnt_users_isSet) {
        obj.insert(QString("cntUsers"), ::OpenAPI::toJsonValue(m_cnt_users));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_group_roles.isSet()) {
        obj.insert(QString("groupRoles"), ::OpenAPI::toJsonValue(m_group_roles));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

qint32 OAIGroup::getCntUsers() const {
    return m_cnt_users;
}
void OAIGroup::setCntUsers(const qint32 &cnt_users) {
    m_cnt_users = cnt_users;
    m_cnt_users_isSet = true;
}

bool OAIGroup::is_cnt_users_Set() const{
    return m_cnt_users_isSet;
}

bool OAIGroup::is_cnt_users_Valid() const{
    return m_cnt_users_isValid;
}

QDateTime OAIGroup::getCreatedAt() const {
    return m_created_at;
}
void OAIGroup::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIGroup::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIGroup::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAIGroup::getCreatedBy() const {
    return m_created_by;
}
void OAIGroup::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIGroup::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIGroup::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIGroup::getExpireAt() const {
    return m_expire_at;
}
void OAIGroup::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIGroup::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIGroup::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

OAIRoleList OAIGroup::getGroupRoles() const {
    return m_group_roles;
}
void OAIGroup::setGroupRoles(const OAIRoleList &group_roles) {
    m_group_roles = group_roles;
    m_group_roles_isSet = true;
}

bool OAIGroup::is_group_roles_Set() const{
    return m_group_roles_isSet;
}

bool OAIGroup::is_group_roles_Valid() const{
    return m_group_roles_isValid;
}

qint64 OAIGroup::getId() const {
    return m_id;
}
void OAIGroup::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroup::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroup::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGroup::getName() const {
    return m_name;
}
void OAIGroup::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGroup::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGroup::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIGroup::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGroup::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGroup::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGroup::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAIGroup::getUpdatedBy() const {
    return m_updated_by;
}
void OAIGroup::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIGroup::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIGroup::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cnt_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cnt_users_isValid && m_created_at_isValid && m_created_by_isValid && m_id_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
