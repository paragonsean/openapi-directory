/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3FileUploadPart.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3FileUploadPart::OAIS3FileUploadPart(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3FileUploadPart::OAIS3FileUploadPart() {
    this->initializeModel();
}

OAIS3FileUploadPart::~OAIS3FileUploadPart() {}

void OAIS3FileUploadPart::initializeModel() {

    m_part_etag_isSet = false;
    m_part_etag_isValid = false;

    m_part_number_isSet = false;
    m_part_number_isValid = false;
}

void OAIS3FileUploadPart::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3FileUploadPart::fromJsonObject(QJsonObject json) {

    m_part_etag_isValid = ::OpenAPI::fromJsonValue(m_part_etag, json[QString("partEtag")]);
    m_part_etag_isSet = !json[QString("partEtag")].isNull() && m_part_etag_isValid;

    m_part_number_isValid = ::OpenAPI::fromJsonValue(m_part_number, json[QString("partNumber")]);
    m_part_number_isSet = !json[QString("partNumber")].isNull() && m_part_number_isValid;
}

QString OAIS3FileUploadPart::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3FileUploadPart::asJsonObject() const {
    QJsonObject obj;
    if (m_part_etag_isSet) {
        obj.insert(QString("partEtag"), ::OpenAPI::toJsonValue(m_part_etag));
    }
    if (m_part_number_isSet) {
        obj.insert(QString("partNumber"), ::OpenAPI::toJsonValue(m_part_number));
    }
    return obj;
}

QString OAIS3FileUploadPart::getPartEtag() const {
    return m_part_etag;
}
void OAIS3FileUploadPart::setPartEtag(const QString &part_etag) {
    m_part_etag = part_etag;
    m_part_etag_isSet = true;
}

bool OAIS3FileUploadPart::is_part_etag_Set() const{
    return m_part_etag_isSet;
}

bool OAIS3FileUploadPart::is_part_etag_Valid() const{
    return m_part_etag_isValid;
}

qint32 OAIS3FileUploadPart::getPartNumber() const {
    return m_part_number;
}
void OAIS3FileUploadPart::setPartNumber(const qint32 &part_number) {
    m_part_number = part_number;
    m_part_number_isSet = true;
}

bool OAIS3FileUploadPart::is_part_number_Set() const{
    return m_part_number_isSet;
}

bool OAIS3FileUploadPart::is_part_number_Valid() const{
    return m_part_number_isValid;
}

bool OAIS3FileUploadPart::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_part_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_part_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3FileUploadPart::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_part_etag_isValid && m_part_number_isValid && true;
}

} // namespace OpenAPI
