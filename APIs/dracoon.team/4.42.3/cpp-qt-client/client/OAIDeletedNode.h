/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDeletedNode.h
 *
 * Deleted node information (Deleted node can be a folder or file)
 */

#ifndef OAIDeletedNode_H
#define OAIDeletedNode_H

#include <QJsonObject>

#include "OAIUserInfo.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUserInfo;

class OAIDeletedNode : public OAIObject {
public:
    OAIDeletedNode();
    OAIDeletedNode(QString json);
    ~OAIDeletedNode() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getAccessedAt() const;
    void setAccessedAt(const QDateTime &accessed_at);
    bool is_accessed_at_Set() const;
    bool is_accessed_at_Valid() const;

    qint32 getClassification() const;
    void setClassification(const qint32 &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIUserInfo getCreatedBy() const;
    void setCreatedBy(const OAIUserInfo &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QDateTime getDeletedAt() const;
    void setDeletedAt(const QDateTime &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    OAIUserInfo getDeletedBy() const;
    void setDeletedBy(const OAIUserInfo &deleted_by);
    bool is_deleted_by_Set() const;
    bool is_deleted_by_Valid() const;

    QDateTime getExpireAt() const;
    void setExpireAt(const QDateTime &expire_at);
    bool is_expire_at_Set() const;
    bool is_expire_at_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsEncrypted() const;
    void setIsEncrypted(const bool &is_encrypted);
    bool is_is_encrypted_Set() const;
    bool is_is_encrypted_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    qint64 getParentId() const;
    void setParentId(const qint64 &parent_id);
    bool is_parent_id_Set() const;
    bool is_parent_id_Valid() const;

    QString getParentPath() const;
    void setParentPath(const QString &parent_path);
    bool is_parent_path_Set() const;
    bool is_parent_path_Valid() const;

    qint64 getReferenceId() const;
    void setReferenceId(const qint64 &reference_id);
    bool is_reference_id_Set() const;
    bool is_reference_id_Valid() const;

    qint64 getSize() const;
    void setSize(const qint64 &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    OAIUserInfo getUpdatedBy() const;
    void setUpdatedBy(const OAIUserInfo &updated_by);
    bool is_updated_by_Set() const;
    bool is_updated_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_accessed_at;
    bool m_accessed_at_isSet;
    bool m_accessed_at_isValid;

    qint32 m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIUserInfo m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QDateTime m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    OAIUserInfo m_deleted_by;
    bool m_deleted_by_isSet;
    bool m_deleted_by_isValid;

    QDateTime m_expire_at;
    bool m_expire_at_isSet;
    bool m_expire_at_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_encrypted;
    bool m_is_encrypted_isSet;
    bool m_is_encrypted_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    qint64 m_parent_id;
    bool m_parent_id_isSet;
    bool m_parent_id_isValid;

    QString m_parent_path;
    bool m_parent_path_isSet;
    bool m_parent_path_isValid;

    qint64 m_reference_id;
    bool m_reference_id_isSet;
    bool m_reference_id_isValid;

    qint64 m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    OAIUserInfo m_updated_by;
    bool m_updated_by_isSet;
    bool m_updated_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDeletedNode)

#endif // OAIDeletedNode_H
