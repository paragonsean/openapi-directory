/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITestActiveDirectoryConfigResponse.h
 *
 * Response model for testing connection for Active Directory configuration
 */

#ifndef OAITestActiveDirectoryConfigResponse_H
#define OAITestActiveDirectoryConfigResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITestActiveDirectoryConfigResponse : public OAIObject {
public:
    OAITestActiveDirectoryConfigResponse();
    OAITestActiveDirectoryConfigResponse(QString json);
    ~OAITestActiveDirectoryConfigResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLdapUsersDomain() const;
    void setLdapUsersDomain(const QString &ldap_users_domain);
    bool is_ldap_users_domain_Set() const;
    bool is_ldap_users_domain_Valid() const;

    QString getServerAdminName() const;
    void setServerAdminName(const QString &server_admin_name);
    bool is_server_admin_name_Set() const;
    bool is_server_admin_name_Valid() const;

    QString getServerAdminPassword() const;
    void setServerAdminPassword(const QString &server_admin_password);
    bool is_server_admin_password_Set() const;
    bool is_server_admin_password_Valid() const;

    QString getServerIp() const;
    void setServerIp(const QString &server_ip);
    bool is_server_ip_Set() const;
    bool is_server_ip_Valid() const;

    qint32 getServerPort() const;
    void setServerPort(const qint32 &server_port);
    bool is_server_port_Set() const;
    bool is_server_port_Valid() const;

    QString getSslFingerPrint() const;
    void setSslFingerPrint(const QString &ssl_finger_print);
    bool is_ssl_finger_print_Set() const;
    bool is_ssl_finger_print_Valid() const;

    bool isUseLdaps() const;
    void setUseLdaps(const bool &use_ldaps);
    bool is_use_ldaps_Set() const;
    bool is_use_ldaps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_ldap_users_domain;
    bool m_ldap_users_domain_isSet;
    bool m_ldap_users_domain_isValid;

    QString m_server_admin_name;
    bool m_server_admin_name_isSet;
    bool m_server_admin_name_isValid;

    QString m_server_admin_password;
    bool m_server_admin_password_isSet;
    bool m_server_admin_password_isValid;

    QString m_server_ip;
    bool m_server_ip_isSet;
    bool m_server_ip_isValid;

    qint32 m_server_port;
    bool m_server_port_isSet;
    bool m_server_port_isValid;

    QString m_ssl_finger_print;
    bool m_ssl_finger_print_isSet;
    bool m_ssl_finger_print_isValid;

    bool m_use_ldaps;
    bool m_use_ldaps_isSet;
    bool m_use_ldaps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITestActiveDirectoryConfigResponse)

#endif // OAITestActiveDirectoryConfigResponse_H
