/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthApi_H
#define OAI_OAIAuthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAILoginRequest.h"
#include "OAILoginResponse.h"
#include "OAIRadiusChallengeResponse.h"
#include "OAIRecoverUserNameRequest.h"
#include "OAIResetPasswordRequest.h"
#include "OAIResetPasswordTokenValidateResponse.h"
#include "OAIResetPasswordWithTokenRequest.h"
#include "OAIResetPassword_400_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthApi : public QObject {
    Q_OBJECT

public:
    OAIAuthApi(const int timeOut = 0);
    ~OAIAuthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  code QString [required]
    * @param[in]  state QString [required]
    * @param[in]  id_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void completeOpenIdLogin(const QString &code, const QString &state, const ::OpenAPI::OptionalParam<QString> &id_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  issuer QString [required]
    * @param[in]  redirect_uri QString [required]
    * @param[in]  language QString [required]
    * @param[in]  test bool [required]
    */
    Q_DECL_DEPRECATED virtual void initiateOpenIdLogin(const QString &issuer, const QString &redirect_uri, const QString &language, const bool &test);

    /**
    * @param[in]  oai_login_request OAILoginRequest [required]
    */
    Q_DECL_DEPRECATED virtual void login(const OAILoginRequest &oai_login_request);


    virtual void ping();

    /**
    * @param[in]  oai_recover_user_name_request OAIRecoverUserNameRequest [required]
    */
    virtual void recoverUserName(const OAIRecoverUserNameRequest &oai_recover_user_name_request);

    /**
    * @param[in]  oai_reset_password_request OAIResetPasswordRequest [required]
    */
    virtual void requestPasswordReset(const OAIResetPasswordRequest &oai_reset_password_request);

    /**
    * @param[in]  token QString [required]
    * @param[in]  oai_reset_password_with_token_request OAIResetPasswordWithTokenRequest [required]
    */
    virtual void resetPassword(const QString &token, const OAIResetPasswordWithTokenRequest &oai_reset_password_with_token_request);

    /**
    * @param[in]  token QString [required]
    */
    virtual void validateResetPasswordToken(const QString &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void completeOpenIdLoginCallback(OAIHttpRequestWorker *worker);
    void initiateOpenIdLoginCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void pingCallback(OAIHttpRequestWorker *worker);
    void recoverUserNameCallback(OAIHttpRequestWorker *worker);
    void requestPasswordResetCallback(OAIHttpRequestWorker *worker);
    void resetPasswordCallback(OAIHttpRequestWorker *worker);
    void validateResetPasswordTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void completeOpenIdLoginSignal(OAILoginResponse summary);
    void initiateOpenIdLoginSignal();
    void loginSignal(OAILoginResponse summary);
    void pingSignal(QString summary);
    void recoverUserNameSignal();
    void requestPasswordResetSignal();
    void resetPasswordSignal();
    void validateResetPasswordTokenSignal(OAIResetPasswordTokenValidateResponse summary);


    void completeOpenIdLoginSignalFull(OAIHttpRequestWorker *worker, OAILoginResponse summary);
    void initiateOpenIdLoginSignalFull(OAIHttpRequestWorker *worker);
    void loginSignalFull(OAIHttpRequestWorker *worker, OAILoginResponse summary);
    void pingSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void recoverUserNameSignalFull(OAIHttpRequestWorker *worker);
    void requestPasswordResetSignalFull(OAIHttpRequestWorker *worker);
    void resetPasswordSignalFull(OAIHttpRequestWorker *worker);
    void validateResetPasswordTokenSignalFull(OAIHttpRequestWorker *worker, OAIResetPasswordTokenValidateResponse summary);

    Q_DECL_DEPRECATED_X("Use completeOpenIdLoginSignalError() instead")
    void completeOpenIdLoginSignalE(OAILoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeOpenIdLoginSignalError(OAILoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateOpenIdLoginSignalError() instead")
    void initiateOpenIdLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void initiateOpenIdLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(OAILoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(OAILoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalError() instead")
    void pingSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverUserNameSignalError() instead")
    void recoverUserNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void recoverUserNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordResetSignalError() instead")
    void requestPasswordResetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordResetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordSignalError() instead")
    void resetPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateResetPasswordTokenSignalError() instead")
    void validateResetPasswordTokenSignalE(OAIResetPasswordTokenValidateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateResetPasswordTokenSignalError(OAIResetPasswordTokenValidateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use completeOpenIdLoginSignalErrorFull() instead")
    void completeOpenIdLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeOpenIdLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use initiateOpenIdLoginSignalErrorFull() instead")
    void initiateOpenIdLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void initiateOpenIdLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingSignalErrorFull() instead")
    void pingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use recoverUserNameSignalErrorFull() instead")
    void recoverUserNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void recoverUserNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordResetSignalErrorFull() instead")
    void requestPasswordResetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordResetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPasswordSignalErrorFull() instead")
    void resetPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateResetPasswordTokenSignalErrorFull() instead")
    void validateResetPasswordTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateResetPasswordTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
