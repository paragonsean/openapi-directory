/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINode::OAINode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINode::OAINode() {
    this->initializeModel();
}

OAINode::~OAINode() {}

void OAINode::initializeModel() {

    m_auth_parent_id_isSet = false;
    m_auth_parent_id_isValid = false;

    m_branch_version_isSet = false;
    m_branch_version_isValid = false;

    m_children_isSet = false;
    m_children_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_cnt_children_isSet = false;
    m_cnt_children_isValid = false;

    m_cnt_comments_isSet = false;
    m_cnt_comments_isValid = false;

    m_cnt_deleted_versions_isSet = false;
    m_cnt_deleted_versions_isValid = false;

    m_cnt_download_shares_isSet = false;
    m_cnt_download_shares_isValid = false;

    m_cnt_files_isSet = false;
    m_cnt_files_isValid = false;

    m_cnt_folders_isSet = false;
    m_cnt_folders_isValid = false;

    m_cnt_rooms_isSet = false;
    m_cnt_rooms_isValid = false;

    m_cnt_upload_shares_isSet = false;
    m_cnt_upload_shares_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_encryption_info_isSet = false;
    m_encryption_info_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_has_activities_log_isSet = false;
    m_has_activities_log_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inherit_permissions_isSet = false;
    m_inherit_permissions_isValid = false;

    m_is_browsable_isSet = false;
    m_is_browsable_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_is_favorite_isSet = false;
    m_is_favorite_isValid = false;

    m_media_token_isSet = false;
    m_media_token_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_path_isSet = false;
    m_parent_path_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_recycle_bin_retention_period_isSet = false;
    m_recycle_bin_retention_period_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_timestamp_creation_isSet = false;
    m_timestamp_creation_isValid = false;

    m_timestamp_modification_isSet = false;
    m_timestamp_modification_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAINode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINode::fromJsonObject(QJsonObject json) {

    m_auth_parent_id_isValid = ::OpenAPI::fromJsonValue(m_auth_parent_id, json[QString("authParentId")]);
    m_auth_parent_id_isSet = !json[QString("authParentId")].isNull() && m_auth_parent_id_isValid;

    m_branch_version_isValid = ::OpenAPI::fromJsonValue(m_branch_version, json[QString("branchVersion")]);
    m_branch_version_isSet = !json[QString("branchVersion")].isNull() && m_branch_version_isValid;

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_cnt_children_isValid = ::OpenAPI::fromJsonValue(m_cnt_children, json[QString("cntChildren")]);
    m_cnt_children_isSet = !json[QString("cntChildren")].isNull() && m_cnt_children_isValid;

    m_cnt_comments_isValid = ::OpenAPI::fromJsonValue(m_cnt_comments, json[QString("cntComments")]);
    m_cnt_comments_isSet = !json[QString("cntComments")].isNull() && m_cnt_comments_isValid;

    m_cnt_deleted_versions_isValid = ::OpenAPI::fromJsonValue(m_cnt_deleted_versions, json[QString("cntDeletedVersions")]);
    m_cnt_deleted_versions_isSet = !json[QString("cntDeletedVersions")].isNull() && m_cnt_deleted_versions_isValid;

    m_cnt_download_shares_isValid = ::OpenAPI::fromJsonValue(m_cnt_download_shares, json[QString("cntDownloadShares")]);
    m_cnt_download_shares_isSet = !json[QString("cntDownloadShares")].isNull() && m_cnt_download_shares_isValid;

    m_cnt_files_isValid = ::OpenAPI::fromJsonValue(m_cnt_files, json[QString("cntFiles")]);
    m_cnt_files_isSet = !json[QString("cntFiles")].isNull() && m_cnt_files_isValid;

    m_cnt_folders_isValid = ::OpenAPI::fromJsonValue(m_cnt_folders, json[QString("cntFolders")]);
    m_cnt_folders_isSet = !json[QString("cntFolders")].isNull() && m_cnt_folders_isValid;

    m_cnt_rooms_isValid = ::OpenAPI::fromJsonValue(m_cnt_rooms, json[QString("cntRooms")]);
    m_cnt_rooms_isSet = !json[QString("cntRooms")].isNull() && m_cnt_rooms_isValid;

    m_cnt_upload_shares_isValid = ::OpenAPI::fromJsonValue(m_cnt_upload_shares, json[QString("cntUploadShares")]);
    m_cnt_upload_shares_isSet = !json[QString("cntUploadShares")].isNull() && m_cnt_upload_shares_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_encryption_info_isValid = ::OpenAPI::fromJsonValue(m_encryption_info, json[QString("encryptionInfo")]);
    m_encryption_info_isSet = !json[QString("encryptionInfo")].isNull() && m_encryption_info_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_has_activities_log_isValid = ::OpenAPI::fromJsonValue(m_has_activities_log, json[QString("hasActivitiesLog")]);
    m_has_activities_log_isSet = !json[QString("hasActivitiesLog")].isNull() && m_has_activities_log_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inherit_permissions_isValid = ::OpenAPI::fromJsonValue(m_inherit_permissions, json[QString("inheritPermissions")]);
    m_inherit_permissions_isSet = !json[QString("inheritPermissions")].isNull() && m_inherit_permissions_isValid;

    m_is_browsable_isValid = ::OpenAPI::fromJsonValue(m_is_browsable, json[QString("isBrowsable")]);
    m_is_browsable_isSet = !json[QString("isBrowsable")].isNull() && m_is_browsable_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_is_favorite_isValid = ::OpenAPI::fromJsonValue(m_is_favorite, json[QString("isFavorite")]);
    m_is_favorite_isSet = !json[QString("isFavorite")].isNull() && m_is_favorite_isValid;

    m_media_token_isValid = ::OpenAPI::fromJsonValue(m_media_token, json[QString("mediaToken")]);
    m_media_token_isSet = !json[QString("mediaToken")].isNull() && m_media_token_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_parent_path_isValid = ::OpenAPI::fromJsonValue(m_parent_path, json[QString("parentPath")]);
    m_parent_path_isSet = !json[QString("parentPath")].isNull() && m_parent_path_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_recycle_bin_retention_period_isValid = ::OpenAPI::fromJsonValue(m_recycle_bin_retention_period, json[QString("recycleBinRetentionPeriod")]);
    m_recycle_bin_retention_period_isSet = !json[QString("recycleBinRetentionPeriod")].isNull() && m_recycle_bin_retention_period_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_timestamp_creation_isValid = ::OpenAPI::fromJsonValue(m_timestamp_creation, json[QString("timestampCreation")]);
    m_timestamp_creation_isSet = !json[QString("timestampCreation")].isNull() && m_timestamp_creation_isValid;

    m_timestamp_modification_isValid = ::OpenAPI::fromJsonValue(m_timestamp_modification, json[QString("timestampModification")]);
    m_timestamp_modification_isSet = !json[QString("timestampModification")].isNull() && m_timestamp_modification_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAINode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINode::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_parent_id_isSet) {
        obj.insert(QString("authParentId"), ::OpenAPI::toJsonValue(m_auth_parent_id));
    }
    if (m_branch_version_isSet) {
        obj.insert(QString("branchVersion"), ::OpenAPI::toJsonValue(m_branch_version));
    }
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_cnt_children_isSet) {
        obj.insert(QString("cntChildren"), ::OpenAPI::toJsonValue(m_cnt_children));
    }
    if (m_cnt_comments_isSet) {
        obj.insert(QString("cntComments"), ::OpenAPI::toJsonValue(m_cnt_comments));
    }
    if (m_cnt_deleted_versions_isSet) {
        obj.insert(QString("cntDeletedVersions"), ::OpenAPI::toJsonValue(m_cnt_deleted_versions));
    }
    if (m_cnt_download_shares_isSet) {
        obj.insert(QString("cntDownloadShares"), ::OpenAPI::toJsonValue(m_cnt_download_shares));
    }
    if (m_cnt_files_isSet) {
        obj.insert(QString("cntFiles"), ::OpenAPI::toJsonValue(m_cnt_files));
    }
    if (m_cnt_folders_isSet) {
        obj.insert(QString("cntFolders"), ::OpenAPI::toJsonValue(m_cnt_folders));
    }
    if (m_cnt_rooms_isSet) {
        obj.insert(QString("cntRooms"), ::OpenAPI::toJsonValue(m_cnt_rooms));
    }
    if (m_cnt_upload_shares_isSet) {
        obj.insert(QString("cntUploadShares"), ::OpenAPI::toJsonValue(m_cnt_upload_shares));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_encryption_info.isSet()) {
        obj.insert(QString("encryptionInfo"), ::OpenAPI::toJsonValue(m_encryption_info));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_has_activities_log_isSet) {
        obj.insert(QString("hasActivitiesLog"), ::OpenAPI::toJsonValue(m_has_activities_log));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inherit_permissions_isSet) {
        obj.insert(QString("inheritPermissions"), ::OpenAPI::toJsonValue(m_inherit_permissions));
    }
    if (m_is_browsable_isSet) {
        obj.insert(QString("isBrowsable"), ::OpenAPI::toJsonValue(m_is_browsable));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_is_favorite_isSet) {
        obj.insert(QString("isFavorite"), ::OpenAPI::toJsonValue(m_is_favorite));
    }
    if (m_media_token_isSet) {
        obj.insert(QString("mediaToken"), ::OpenAPI::toJsonValue(m_media_token));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_path_isSet) {
        obj.insert(QString("parentPath"), ::OpenAPI::toJsonValue(m_parent_path));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_quota_isSet) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_recycle_bin_retention_period_isSet) {
        obj.insert(QString("recycleBinRetentionPeriod"), ::OpenAPI::toJsonValue(m_recycle_bin_retention_period));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_timestamp_creation_isSet) {
        obj.insert(QString("timestampCreation"), ::OpenAPI::toJsonValue(m_timestamp_creation));
    }
    if (m_timestamp_modification_isSet) {
        obj.insert(QString("timestampModification"), ::OpenAPI::toJsonValue(m_timestamp_modification));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

qint64 OAINode::getAuthParentId() const {
    return m_auth_parent_id;
}
void OAINode::setAuthParentId(const qint64 &auth_parent_id) {
    m_auth_parent_id = auth_parent_id;
    m_auth_parent_id_isSet = true;
}

bool OAINode::is_auth_parent_id_Set() const{
    return m_auth_parent_id_isSet;
}

bool OAINode::is_auth_parent_id_Valid() const{
    return m_auth_parent_id_isValid;
}

qint64 OAINode::getBranchVersion() const {
    return m_branch_version;
}
void OAINode::setBranchVersion(const qint64 &branch_version) {
    m_branch_version = branch_version;
    m_branch_version_isSet = true;
}

bool OAINode::is_branch_version_Set() const{
    return m_branch_version_isSet;
}

bool OAINode::is_branch_version_Valid() const{
    return m_branch_version_isValid;
}

QList<OAINode> OAINode::getChildren() const {
    return m_children;
}
void OAINode::setChildren(const QList<OAINode> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAINode::is_children_Set() const{
    return m_children_isSet;
}

bool OAINode::is_children_Valid() const{
    return m_children_isValid;
}

qint32 OAINode::getClassification() const {
    return m_classification;
}
void OAINode::setClassification(const qint32 &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAINode::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAINode::is_classification_Valid() const{
    return m_classification_isValid;
}

qint32 OAINode::getCntChildren() const {
    return m_cnt_children;
}
void OAINode::setCntChildren(const qint32 &cnt_children) {
    m_cnt_children = cnt_children;
    m_cnt_children_isSet = true;
}

bool OAINode::is_cnt_children_Set() const{
    return m_cnt_children_isSet;
}

bool OAINode::is_cnt_children_Valid() const{
    return m_cnt_children_isValid;
}

qint32 OAINode::getCntComments() const {
    return m_cnt_comments;
}
void OAINode::setCntComments(const qint32 &cnt_comments) {
    m_cnt_comments = cnt_comments;
    m_cnt_comments_isSet = true;
}

bool OAINode::is_cnt_comments_Set() const{
    return m_cnt_comments_isSet;
}

bool OAINode::is_cnt_comments_Valid() const{
    return m_cnt_comments_isValid;
}

qint32 OAINode::getCntDeletedVersions() const {
    return m_cnt_deleted_versions;
}
void OAINode::setCntDeletedVersions(const qint32 &cnt_deleted_versions) {
    m_cnt_deleted_versions = cnt_deleted_versions;
    m_cnt_deleted_versions_isSet = true;
}

bool OAINode::is_cnt_deleted_versions_Set() const{
    return m_cnt_deleted_versions_isSet;
}

bool OAINode::is_cnt_deleted_versions_Valid() const{
    return m_cnt_deleted_versions_isValid;
}

qint32 OAINode::getCntDownloadShares() const {
    return m_cnt_download_shares;
}
void OAINode::setCntDownloadShares(const qint32 &cnt_download_shares) {
    m_cnt_download_shares = cnt_download_shares;
    m_cnt_download_shares_isSet = true;
}

bool OAINode::is_cnt_download_shares_Set() const{
    return m_cnt_download_shares_isSet;
}

bool OAINode::is_cnt_download_shares_Valid() const{
    return m_cnt_download_shares_isValid;
}

qint32 OAINode::getCntFiles() const {
    return m_cnt_files;
}
void OAINode::setCntFiles(const qint32 &cnt_files) {
    m_cnt_files = cnt_files;
    m_cnt_files_isSet = true;
}

bool OAINode::is_cnt_files_Set() const{
    return m_cnt_files_isSet;
}

bool OAINode::is_cnt_files_Valid() const{
    return m_cnt_files_isValid;
}

qint32 OAINode::getCntFolders() const {
    return m_cnt_folders;
}
void OAINode::setCntFolders(const qint32 &cnt_folders) {
    m_cnt_folders = cnt_folders;
    m_cnt_folders_isSet = true;
}

bool OAINode::is_cnt_folders_Set() const{
    return m_cnt_folders_isSet;
}

bool OAINode::is_cnt_folders_Valid() const{
    return m_cnt_folders_isValid;
}

qint32 OAINode::getCntRooms() const {
    return m_cnt_rooms;
}
void OAINode::setCntRooms(const qint32 &cnt_rooms) {
    m_cnt_rooms = cnt_rooms;
    m_cnt_rooms_isSet = true;
}

bool OAINode::is_cnt_rooms_Set() const{
    return m_cnt_rooms_isSet;
}

bool OAINode::is_cnt_rooms_Valid() const{
    return m_cnt_rooms_isValid;
}

qint32 OAINode::getCntUploadShares() const {
    return m_cnt_upload_shares;
}
void OAINode::setCntUploadShares(const qint32 &cnt_upload_shares) {
    m_cnt_upload_shares = cnt_upload_shares;
    m_cnt_upload_shares_isSet = true;
}

bool OAINode::is_cnt_upload_shares_Set() const{
    return m_cnt_upload_shares_isSet;
}

bool OAINode::is_cnt_upload_shares_Valid() const{
    return m_cnt_upload_shares_isValid;
}

QDateTime OAINode::getCreatedAt() const {
    return m_created_at;
}
void OAINode::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINode::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINode::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAINode::getCreatedBy() const {
    return m_created_by;
}
void OAINode::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAINode::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAINode::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIEncryptionInfo OAINode::getEncryptionInfo() const {
    return m_encryption_info;
}
void OAINode::setEncryptionInfo(const OAIEncryptionInfo &encryption_info) {
    m_encryption_info = encryption_info;
    m_encryption_info_isSet = true;
}

bool OAINode::is_encryption_info_Set() const{
    return m_encryption_info_isSet;
}

bool OAINode::is_encryption_info_Valid() const{
    return m_encryption_info_isValid;
}

QDateTime OAINode::getExpireAt() const {
    return m_expire_at;
}
void OAINode::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAINode::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAINode::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

QString OAINode::getFileType() const {
    return m_file_type;
}
void OAINode::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAINode::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAINode::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAINode::isHasActivitiesLog() const {
    return m_has_activities_log;
}
void OAINode::setHasActivitiesLog(const bool &has_activities_log) {
    m_has_activities_log = has_activities_log;
    m_has_activities_log_isSet = true;
}

bool OAINode::is_has_activities_log_Set() const{
    return m_has_activities_log_isSet;
}

bool OAINode::is_has_activities_log_Valid() const{
    return m_has_activities_log_isValid;
}

QString OAINode::getHash() const {
    return m_hash;
}
void OAINode::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAINode::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAINode::is_hash_Valid() const{
    return m_hash_isValid;
}

qint64 OAINode::getId() const {
    return m_id;
}
void OAINode::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINode::is_id_Set() const{
    return m_id_isSet;
}

bool OAINode::is_id_Valid() const{
    return m_id_isValid;
}

bool OAINode::isInheritPermissions() const {
    return m_inherit_permissions;
}
void OAINode::setInheritPermissions(const bool &inherit_permissions) {
    m_inherit_permissions = inherit_permissions;
    m_inherit_permissions_isSet = true;
}

bool OAINode::is_inherit_permissions_Set() const{
    return m_inherit_permissions_isSet;
}

bool OAINode::is_inherit_permissions_Valid() const{
    return m_inherit_permissions_isValid;
}

bool OAINode::isIsBrowsable() const {
    return m_is_browsable;
}
void OAINode::setIsBrowsable(const bool &is_browsable) {
    m_is_browsable = is_browsable;
    m_is_browsable_isSet = true;
}

bool OAINode::is_is_browsable_Set() const{
    return m_is_browsable_isSet;
}

bool OAINode::is_is_browsable_Valid() const{
    return m_is_browsable_isValid;
}

bool OAINode::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAINode::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAINode::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAINode::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAINode::isIsFavorite() const {
    return m_is_favorite;
}
void OAINode::setIsFavorite(const bool &is_favorite) {
    m_is_favorite = is_favorite;
    m_is_favorite_isSet = true;
}

bool OAINode::is_is_favorite_Set() const{
    return m_is_favorite_isSet;
}

bool OAINode::is_is_favorite_Valid() const{
    return m_is_favorite_isValid;
}

QString OAINode::getMediaToken() const {
    return m_media_token;
}
void OAINode::setMediaToken(const QString &media_token) {
    m_media_token = media_token;
    m_media_token_isSet = true;
}

bool OAINode::is_media_token_Set() const{
    return m_media_token_isSet;
}

bool OAINode::is_media_token_Valid() const{
    return m_media_token_isValid;
}

QString OAINode::getMediaType() const {
    return m_media_type;
}
void OAINode::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAINode::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAINode::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAINode::getName() const {
    return m_name;
}
void OAINode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINode::is_name_Set() const{
    return m_name_isSet;
}

bool OAINode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINode::getNotes() const {
    return m_notes;
}
void OAINode::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAINode::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAINode::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAINode::getParentId() const {
    return m_parent_id;
}
void OAINode::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAINode::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAINode::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAINode::getParentPath() const {
    return m_parent_path;
}
void OAINode::setParentPath(const QString &parent_path) {
    m_parent_path = parent_path;
    m_parent_path_isSet = true;
}

bool OAINode::is_parent_path_Set() const{
    return m_parent_path_isSet;
}

bool OAINode::is_parent_path_Valid() const{
    return m_parent_path_isValid;
}

OAINodePermissions OAINode::getPermissions() const {
    return m_permissions;
}
void OAINode::setPermissions(const OAINodePermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAINode::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINode::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint64 OAINode::getQuota() const {
    return m_quota;
}
void OAINode::setQuota(const qint64 &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAINode::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAINode::is_quota_Valid() const{
    return m_quota_isValid;
}

qint32 OAINode::getRecycleBinRetentionPeriod() const {
    return m_recycle_bin_retention_period;
}
void OAINode::setRecycleBinRetentionPeriod(const qint32 &recycle_bin_retention_period) {
    m_recycle_bin_retention_period = recycle_bin_retention_period;
    m_recycle_bin_retention_period_isSet = true;
}

bool OAINode::is_recycle_bin_retention_period_Set() const{
    return m_recycle_bin_retention_period_isSet;
}

bool OAINode::is_recycle_bin_retention_period_Valid() const{
    return m_recycle_bin_retention_period_isValid;
}

qint64 OAINode::getReferenceId() const {
    return m_reference_id;
}
void OAINode::setReferenceId(const qint64 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAINode::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAINode::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

qint64 OAINode::getSize() const {
    return m_size;
}
void OAINode::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAINode::is_size_Set() const{
    return m_size_isSet;
}

bool OAINode::is_size_Valid() const{
    return m_size_isValid;
}

QDateTime OAINode::getTimestampCreation() const {
    return m_timestamp_creation;
}
void OAINode::setTimestampCreation(const QDateTime &timestamp_creation) {
    m_timestamp_creation = timestamp_creation;
    m_timestamp_creation_isSet = true;
}

bool OAINode::is_timestamp_creation_Set() const{
    return m_timestamp_creation_isSet;
}

bool OAINode::is_timestamp_creation_Valid() const{
    return m_timestamp_creation_isValid;
}

QDateTime OAINode::getTimestampModification() const {
    return m_timestamp_modification;
}
void OAINode::setTimestampModification(const QDateTime &timestamp_modification) {
    m_timestamp_modification = timestamp_modification;
    m_timestamp_modification_isSet = true;
}

bool OAINode::is_timestamp_modification_Set() const{
    return m_timestamp_modification_isSet;
}

bool OAINode::is_timestamp_modification_Valid() const{
    return m_timestamp_modification_isValid;
}

QString OAINode::getType() const {
    return m_type;
}
void OAINode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINode::is_type_Set() const{
    return m_type_isSet;
}

bool OAINode::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAINode::getUpdatedAt() const {
    return m_updated_at;
}
void OAINode::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINode::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINode::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAINode::getUpdatedBy() const {
    return m_updated_by;
}
void OAINode::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAINode::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAINode::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAINode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_branch_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_deleted_versions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_download_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_folders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_upload_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_activities_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_browsable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_favorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recycle_bin_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_creation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_modification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
