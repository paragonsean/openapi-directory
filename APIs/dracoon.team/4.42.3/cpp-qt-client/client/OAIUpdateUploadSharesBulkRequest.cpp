/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateUploadSharesBulkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateUploadSharesBulkRequest::OAIUpdateUploadSharesBulkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateUploadSharesBulkRequest::OAIUpdateUploadSharesBulkRequest() {
    this->initializeModel();
}

OAIUpdateUploadSharesBulkRequest::~OAIUpdateUploadSharesBulkRequest() {}

void OAIUpdateUploadSharesBulkRequest::initializeModel() {

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_files_expiry_period_isSet = false;
    m_files_expiry_period_isValid = false;

    m_max_size_isSet = false;
    m_max_size_isValid = false;

    m_max_slots_isSet = false;
    m_max_slots_isValid = false;

    m_object_ids_isSet = false;
    m_object_ids_isValid = false;

    m_reset_files_expiry_period_isSet = false;
    m_reset_files_expiry_period_isValid = false;

    m_reset_max_size_isSet = false;
    m_reset_max_size_isValid = false;

    m_reset_max_slots_isSet = false;
    m_reset_max_slots_isValid = false;

    m_show_creator_name_isSet = false;
    m_show_creator_name_isValid = false;

    m_show_creator_username_isSet = false;
    m_show_creator_username_isValid = false;

    m_show_uploaded_files_isSet = false;
    m_show_uploaded_files_isValid = false;
}

void OAIUpdateUploadSharesBulkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateUploadSharesBulkRequest::fromJsonObject(QJsonObject json) {

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_files_expiry_period_isValid = ::OpenAPI::fromJsonValue(m_files_expiry_period, json[QString("filesExpiryPeriod")]);
    m_files_expiry_period_isSet = !json[QString("filesExpiryPeriod")].isNull() && m_files_expiry_period_isValid;

    m_max_size_isValid = ::OpenAPI::fromJsonValue(m_max_size, json[QString("maxSize")]);
    m_max_size_isSet = !json[QString("maxSize")].isNull() && m_max_size_isValid;

    m_max_slots_isValid = ::OpenAPI::fromJsonValue(m_max_slots, json[QString("maxSlots")]);
    m_max_slots_isSet = !json[QString("maxSlots")].isNull() && m_max_slots_isValid;

    m_object_ids_isValid = ::OpenAPI::fromJsonValue(m_object_ids, json[QString("objectIds")]);
    m_object_ids_isSet = !json[QString("objectIds")].isNull() && m_object_ids_isValid;

    m_reset_files_expiry_period_isValid = ::OpenAPI::fromJsonValue(m_reset_files_expiry_period, json[QString("resetFilesExpiryPeriod")]);
    m_reset_files_expiry_period_isSet = !json[QString("resetFilesExpiryPeriod")].isNull() && m_reset_files_expiry_period_isValid;

    m_reset_max_size_isValid = ::OpenAPI::fromJsonValue(m_reset_max_size, json[QString("resetMaxSize")]);
    m_reset_max_size_isSet = !json[QString("resetMaxSize")].isNull() && m_reset_max_size_isValid;

    m_reset_max_slots_isValid = ::OpenAPI::fromJsonValue(m_reset_max_slots, json[QString("resetMaxSlots")]);
    m_reset_max_slots_isSet = !json[QString("resetMaxSlots")].isNull() && m_reset_max_slots_isValid;

    m_show_creator_name_isValid = ::OpenAPI::fromJsonValue(m_show_creator_name, json[QString("showCreatorName")]);
    m_show_creator_name_isSet = !json[QString("showCreatorName")].isNull() && m_show_creator_name_isValid;

    m_show_creator_username_isValid = ::OpenAPI::fromJsonValue(m_show_creator_username, json[QString("showCreatorUsername")]);
    m_show_creator_username_isSet = !json[QString("showCreatorUsername")].isNull() && m_show_creator_username_isValid;

    m_show_uploaded_files_isValid = ::OpenAPI::fromJsonValue(m_show_uploaded_files, json[QString("showUploadedFiles")]);
    m_show_uploaded_files_isSet = !json[QString("showUploadedFiles")].isNull() && m_show_uploaded_files_isValid;
}

QString OAIUpdateUploadSharesBulkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateUploadSharesBulkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration.isSet()) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_files_expiry_period_isSet) {
        obj.insert(QString("filesExpiryPeriod"), ::OpenAPI::toJsonValue(m_files_expiry_period));
    }
    if (m_max_size_isSet) {
        obj.insert(QString("maxSize"), ::OpenAPI::toJsonValue(m_max_size));
    }
    if (m_max_slots_isSet) {
        obj.insert(QString("maxSlots"), ::OpenAPI::toJsonValue(m_max_slots));
    }
    if (m_object_ids.size() > 0) {
        obj.insert(QString("objectIds"), ::OpenAPI::toJsonValue(m_object_ids));
    }
    if (m_reset_files_expiry_period_isSet) {
        obj.insert(QString("resetFilesExpiryPeriod"), ::OpenAPI::toJsonValue(m_reset_files_expiry_period));
    }
    if (m_reset_max_size_isSet) {
        obj.insert(QString("resetMaxSize"), ::OpenAPI::toJsonValue(m_reset_max_size));
    }
    if (m_reset_max_slots_isSet) {
        obj.insert(QString("resetMaxSlots"), ::OpenAPI::toJsonValue(m_reset_max_slots));
    }
    if (m_show_creator_name_isSet) {
        obj.insert(QString("showCreatorName"), ::OpenAPI::toJsonValue(m_show_creator_name));
    }
    if (m_show_creator_username_isSet) {
        obj.insert(QString("showCreatorUsername"), ::OpenAPI::toJsonValue(m_show_creator_username));
    }
    if (m_show_uploaded_files_isSet) {
        obj.insert(QString("showUploadedFiles"), ::OpenAPI::toJsonValue(m_show_uploaded_files));
    }
    return obj;
}

OAIObjectExpiration OAIUpdateUploadSharesBulkRequest::getExpiration() const {
    return m_expiration;
}
void OAIUpdateUploadSharesBulkRequest::setExpiration(const OAIObjectExpiration &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_expiration_Valid() const{
    return m_expiration_isValid;
}

qint32 OAIUpdateUploadSharesBulkRequest::getFilesExpiryPeriod() const {
    return m_files_expiry_period;
}
void OAIUpdateUploadSharesBulkRequest::setFilesExpiryPeriod(const qint32 &files_expiry_period) {
    m_files_expiry_period = files_expiry_period;
    m_files_expiry_period_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_files_expiry_period_Set() const{
    return m_files_expiry_period_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_files_expiry_period_Valid() const{
    return m_files_expiry_period_isValid;
}

qint64 OAIUpdateUploadSharesBulkRequest::getMaxSize() const {
    return m_max_size;
}
void OAIUpdateUploadSharesBulkRequest::setMaxSize(const qint64 &max_size) {
    m_max_size = max_size;
    m_max_size_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_max_size_Set() const{
    return m_max_size_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_max_size_Valid() const{
    return m_max_size_isValid;
}

qint32 OAIUpdateUploadSharesBulkRequest::getMaxSlots() const {
    return m_max_slots;
}
void OAIUpdateUploadSharesBulkRequest::setMaxSlots(const qint32 &max_slots) {
    m_max_slots = max_slots;
    m_max_slots_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_max_slots_Set() const{
    return m_max_slots_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_max_slots_Valid() const{
    return m_max_slots_isValid;
}

QList<qint64> OAIUpdateUploadSharesBulkRequest::getObjectIds() const {
    return m_object_ids;
}
void OAIUpdateUploadSharesBulkRequest::setObjectIds(const QList<qint64> &object_ids) {
    m_object_ids = object_ids;
    m_object_ids_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_object_ids_Set() const{
    return m_object_ids_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_object_ids_Valid() const{
    return m_object_ids_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isResetFilesExpiryPeriod() const {
    return m_reset_files_expiry_period;
}
void OAIUpdateUploadSharesBulkRequest::setResetFilesExpiryPeriod(const bool &reset_files_expiry_period) {
    m_reset_files_expiry_period = reset_files_expiry_period;
    m_reset_files_expiry_period_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_files_expiry_period_Set() const{
    return m_reset_files_expiry_period_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_files_expiry_period_Valid() const{
    return m_reset_files_expiry_period_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isResetMaxSize() const {
    return m_reset_max_size;
}
void OAIUpdateUploadSharesBulkRequest::setResetMaxSize(const bool &reset_max_size) {
    m_reset_max_size = reset_max_size;
    m_reset_max_size_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_max_size_Set() const{
    return m_reset_max_size_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_max_size_Valid() const{
    return m_reset_max_size_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isResetMaxSlots() const {
    return m_reset_max_slots;
}
void OAIUpdateUploadSharesBulkRequest::setResetMaxSlots(const bool &reset_max_slots) {
    m_reset_max_slots = reset_max_slots;
    m_reset_max_slots_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_max_slots_Set() const{
    return m_reset_max_slots_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_reset_max_slots_Valid() const{
    return m_reset_max_slots_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isShowCreatorName() const {
    return m_show_creator_name;
}
void OAIUpdateUploadSharesBulkRequest::setShowCreatorName(const bool &show_creator_name) {
    m_show_creator_name = show_creator_name;
    m_show_creator_name_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_creator_name_Set() const{
    return m_show_creator_name_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_creator_name_Valid() const{
    return m_show_creator_name_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isShowCreatorUsername() const {
    return m_show_creator_username;
}
void OAIUpdateUploadSharesBulkRequest::setShowCreatorUsername(const bool &show_creator_username) {
    m_show_creator_username = show_creator_username;
    m_show_creator_username_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_creator_username_Set() const{
    return m_show_creator_username_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_creator_username_Valid() const{
    return m_show_creator_username_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isShowUploadedFiles() const {
    return m_show_uploaded_files;
}
void OAIUpdateUploadSharesBulkRequest::setShowUploadedFiles(const bool &show_uploaded_files) {
    m_show_uploaded_files = show_uploaded_files;
    m_show_uploaded_files_isSet = true;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_uploaded_files_Set() const{
    return m_show_uploaded_files_isSet;
}

bool OAIUpdateUploadSharesBulkRequest::is_show_uploaded_files_Valid() const{
    return m_show_uploaded_files_isValid;
}

bool OAIUpdateUploadSharesBulkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_expiry_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_files_expiry_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reset_max_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_uploaded_files_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateUploadSharesBulkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_object_ids_isValid && true;
}

} // namespace OpenAPI
