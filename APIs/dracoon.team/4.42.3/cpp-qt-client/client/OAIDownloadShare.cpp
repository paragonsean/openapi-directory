/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadShare::OAIDownloadShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadShare::OAIDownloadShare() {
    this->initializeModel();
}

OAIDownloadShare::~OAIDownloadShare() {}

void OAIDownloadShare::initializeModel() {

    m_access_key_isSet = false;
    m_access_key_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_cnt_downloads_isSet = false;
    m_cnt_downloads_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_data_url_isSet = false;
    m_data_url_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_internal_notes_isSet = false;
    m_internal_notes_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_is_protected_isSet = false;
    m_is_protected_isValid = false;

    m_max_downloads_isSet = false;
    m_max_downloads_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_node_id_isSet = false;
    m_node_id_isValid = false;

    m_node_path_isSet = false;
    m_node_path_isValid = false;

    m_node_type_isSet = false;
    m_node_type_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_notify_creator_isSet = false;
    m_notify_creator_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_show_creator_name_isSet = false;
    m_show_creator_name_isValid = false;

    m_show_creator_username_isSet = false;
    m_show_creator_username_isValid = false;

    m_sms_recipients_isSet = false;
    m_sms_recipients_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIDownloadShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadShare::fromJsonObject(QJsonObject json) {

    m_access_key_isValid = ::OpenAPI::fromJsonValue(m_access_key, json[QString("accessKey")]);
    m_access_key_isSet = !json[QString("accessKey")].isNull() && m_access_key_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_cnt_downloads_isValid = ::OpenAPI::fromJsonValue(m_cnt_downloads, json[QString("cntDownloads")]);
    m_cnt_downloads_isSet = !json[QString("cntDownloads")].isNull() && m_cnt_downloads_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_data_url_isValid = ::OpenAPI::fromJsonValue(m_data_url, json[QString("dataUrl")]);
    m_data_url_isSet = !json[QString("dataUrl")].isNull() && m_data_url_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_internal_notes_isValid = ::OpenAPI::fromJsonValue(m_internal_notes, json[QString("internalNotes")]);
    m_internal_notes_isSet = !json[QString("internalNotes")].isNull() && m_internal_notes_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_is_protected_isValid = ::OpenAPI::fromJsonValue(m_is_protected, json[QString("isProtected")]);
    m_is_protected_isSet = !json[QString("isProtected")].isNull() && m_is_protected_isValid;

    m_max_downloads_isValid = ::OpenAPI::fromJsonValue(m_max_downloads, json[QString("maxDownloads")]);
    m_max_downloads_isSet = !json[QString("maxDownloads")].isNull() && m_max_downloads_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_node_id_isValid = ::OpenAPI::fromJsonValue(m_node_id, json[QString("nodeId")]);
    m_node_id_isSet = !json[QString("nodeId")].isNull() && m_node_id_isValid;

    m_node_path_isValid = ::OpenAPI::fromJsonValue(m_node_path, json[QString("nodePath")]);
    m_node_path_isSet = !json[QString("nodePath")].isNull() && m_node_path_isValid;

    m_node_type_isValid = ::OpenAPI::fromJsonValue(m_node_type, json[QString("nodeType")]);
    m_node_type_isSet = !json[QString("nodeType")].isNull() && m_node_type_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_notify_creator_isValid = ::OpenAPI::fromJsonValue(m_notify_creator, json[QString("notifyCreator")]);
    m_notify_creator_isSet = !json[QString("notifyCreator")].isNull() && m_notify_creator_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_show_creator_name_isValid = ::OpenAPI::fromJsonValue(m_show_creator_name, json[QString("showCreatorName")]);
    m_show_creator_name_isSet = !json[QString("showCreatorName")].isNull() && m_show_creator_name_isValid;

    m_show_creator_username_isValid = ::OpenAPI::fromJsonValue(m_show_creator_username, json[QString("showCreatorUsername")]);
    m_show_creator_username_isSet = !json[QString("showCreatorUsername")].isNull() && m_show_creator_username_isValid;

    m_sms_recipients_isValid = ::OpenAPI::fromJsonValue(m_sms_recipients, json[QString("smsRecipients")]);
    m_sms_recipients_isSet = !json[QString("smsRecipients")].isNull() && m_sms_recipients_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIDownloadShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadShare::asJsonObject() const {
    QJsonObject obj;
    if (m_access_key_isSet) {
        obj.insert(QString("accessKey"), ::OpenAPI::toJsonValue(m_access_key));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_cnt_downloads_isSet) {
        obj.insert(QString("cntDownloads"), ::OpenAPI::toJsonValue(m_cnt_downloads));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_data_url_isSet) {
        obj.insert(QString("dataUrl"), ::OpenAPI::toJsonValue(m_data_url));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_internal_notes_isSet) {
        obj.insert(QString("internalNotes"), ::OpenAPI::toJsonValue(m_internal_notes));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_is_protected_isSet) {
        obj.insert(QString("isProtected"), ::OpenAPI::toJsonValue(m_is_protected));
    }
    if (m_max_downloads_isSet) {
        obj.insert(QString("maxDownloads"), ::OpenAPI::toJsonValue(m_max_downloads));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_node_id_isSet) {
        obj.insert(QString("nodeId"), ::OpenAPI::toJsonValue(m_node_id));
    }
    if (m_node_path_isSet) {
        obj.insert(QString("nodePath"), ::OpenAPI::toJsonValue(m_node_path));
    }
    if (m_node_type_isSet) {
        obj.insert(QString("nodeType"), ::OpenAPI::toJsonValue(m_node_type));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_notify_creator_isSet) {
        obj.insert(QString("notifyCreator"), ::OpenAPI::toJsonValue(m_notify_creator));
    }
    if (m_recipients_isSet) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_show_creator_name_isSet) {
        obj.insert(QString("showCreatorName"), ::OpenAPI::toJsonValue(m_show_creator_name));
    }
    if (m_show_creator_username_isSet) {
        obj.insert(QString("showCreatorUsername"), ::OpenAPI::toJsonValue(m_show_creator_username));
    }
    if (m_sms_recipients_isSet) {
        obj.insert(QString("smsRecipients"), ::OpenAPI::toJsonValue(m_sms_recipients));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QString OAIDownloadShare::getAccessKey() const {
    return m_access_key;
}
void OAIDownloadShare::setAccessKey(const QString &access_key) {
    m_access_key = access_key;
    m_access_key_isSet = true;
}

bool OAIDownloadShare::is_access_key_Set() const{
    return m_access_key_isSet;
}

bool OAIDownloadShare::is_access_key_Valid() const{
    return m_access_key_isValid;
}

qint32 OAIDownloadShare::getClassification() const {
    return m_classification;
}
void OAIDownloadShare::setClassification(const qint32 &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIDownloadShare::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIDownloadShare::is_classification_Valid() const{
    return m_classification_isValid;
}

qint32 OAIDownloadShare::getCntDownloads() const {
    return m_cnt_downloads;
}
void OAIDownloadShare::setCntDownloads(const qint32 &cnt_downloads) {
    m_cnt_downloads = cnt_downloads;
    m_cnt_downloads_isSet = true;
}

bool OAIDownloadShare::is_cnt_downloads_Set() const{
    return m_cnt_downloads_isSet;
}

bool OAIDownloadShare::is_cnt_downloads_Valid() const{
    return m_cnt_downloads_isValid;
}

QDateTime OAIDownloadShare::getCreatedAt() const {
    return m_created_at;
}
void OAIDownloadShare::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDownloadShare::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDownloadShare::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAIDownloadShare::getCreatedBy() const {
    return m_created_by;
}
void OAIDownloadShare::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDownloadShare::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDownloadShare::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIDownloadShare::getDataUrl() const {
    return m_data_url;
}
void OAIDownloadShare::setDataUrl(const QString &data_url) {
    m_data_url = data_url;
    m_data_url_isSet = true;
}

bool OAIDownloadShare::is_data_url_Set() const{
    return m_data_url_isSet;
}

bool OAIDownloadShare::is_data_url_Valid() const{
    return m_data_url_isValid;
}

QDateTime OAIDownloadShare::getExpireAt() const {
    return m_expire_at;
}
void OAIDownloadShare::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIDownloadShare::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIDownloadShare::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

qint64 OAIDownloadShare::getId() const {
    return m_id;
}
void OAIDownloadShare::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDownloadShare::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDownloadShare::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIDownloadShare::getInternalNotes() const {
    return m_internal_notes;
}
void OAIDownloadShare::setInternalNotes(const QString &internal_notes) {
    m_internal_notes = internal_notes;
    m_internal_notes_isSet = true;
}

bool OAIDownloadShare::is_internal_notes_Set() const{
    return m_internal_notes_isSet;
}

bool OAIDownloadShare::is_internal_notes_Valid() const{
    return m_internal_notes_isValid;
}

bool OAIDownloadShare::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIDownloadShare::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIDownloadShare::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIDownloadShare::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAIDownloadShare::isIsProtected() const {
    return m_is_protected;
}
void OAIDownloadShare::setIsProtected(const bool &is_protected) {
    m_is_protected = is_protected;
    m_is_protected_isSet = true;
}

bool OAIDownloadShare::is_is_protected_Set() const{
    return m_is_protected_isSet;
}

bool OAIDownloadShare::is_is_protected_Valid() const{
    return m_is_protected_isValid;
}

qint32 OAIDownloadShare::getMaxDownloads() const {
    return m_max_downloads;
}
void OAIDownloadShare::setMaxDownloads(const qint32 &max_downloads) {
    m_max_downloads = max_downloads;
    m_max_downloads_isSet = true;
}

bool OAIDownloadShare::is_max_downloads_Set() const{
    return m_max_downloads_isSet;
}

bool OAIDownloadShare::is_max_downloads_Valid() const{
    return m_max_downloads_isValid;
}

QString OAIDownloadShare::getName() const {
    return m_name;
}
void OAIDownloadShare::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDownloadShare::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDownloadShare::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIDownloadShare::getNodeId() const {
    return m_node_id;
}
void OAIDownloadShare::setNodeId(const qint64 &node_id) {
    m_node_id = node_id;
    m_node_id_isSet = true;
}

bool OAIDownloadShare::is_node_id_Set() const{
    return m_node_id_isSet;
}

bool OAIDownloadShare::is_node_id_Valid() const{
    return m_node_id_isValid;
}

QString OAIDownloadShare::getNodePath() const {
    return m_node_path;
}
void OAIDownloadShare::setNodePath(const QString &node_path) {
    m_node_path = node_path;
    m_node_path_isSet = true;
}

bool OAIDownloadShare::is_node_path_Set() const{
    return m_node_path_isSet;
}

bool OAIDownloadShare::is_node_path_Valid() const{
    return m_node_path_isValid;
}

QString OAIDownloadShare::getNodeType() const {
    return m_node_type;
}
void OAIDownloadShare::setNodeType(const QString &node_type) {
    m_node_type = node_type;
    m_node_type_isSet = true;
}

bool OAIDownloadShare::is_node_type_Set() const{
    return m_node_type_isSet;
}

bool OAIDownloadShare::is_node_type_Valid() const{
    return m_node_type_isValid;
}

QString OAIDownloadShare::getNotes() const {
    return m_notes;
}
void OAIDownloadShare::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDownloadShare::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDownloadShare::is_notes_Valid() const{
    return m_notes_isValid;
}

bool OAIDownloadShare::isNotifyCreator() const {
    return m_notify_creator;
}
void OAIDownloadShare::setNotifyCreator(const bool &notify_creator) {
    m_notify_creator = notify_creator;
    m_notify_creator_isSet = true;
}

bool OAIDownloadShare::is_notify_creator_Set() const{
    return m_notify_creator_isSet;
}

bool OAIDownloadShare::is_notify_creator_Valid() const{
    return m_notify_creator_isValid;
}

QString OAIDownloadShare::getRecipients() const {
    return m_recipients;
}
void OAIDownloadShare::setRecipients(const QString &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIDownloadShare::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIDownloadShare::is_recipients_Valid() const{
    return m_recipients_isValid;
}

bool OAIDownloadShare::isShowCreatorName() const {
    return m_show_creator_name;
}
void OAIDownloadShare::setShowCreatorName(const bool &show_creator_name) {
    m_show_creator_name = show_creator_name;
    m_show_creator_name_isSet = true;
}

bool OAIDownloadShare::is_show_creator_name_Set() const{
    return m_show_creator_name_isSet;
}

bool OAIDownloadShare::is_show_creator_name_Valid() const{
    return m_show_creator_name_isValid;
}

bool OAIDownloadShare::isShowCreatorUsername() const {
    return m_show_creator_username;
}
void OAIDownloadShare::setShowCreatorUsername(const bool &show_creator_username) {
    m_show_creator_username = show_creator_username;
    m_show_creator_username_isSet = true;
}

bool OAIDownloadShare::is_show_creator_username_Set() const{
    return m_show_creator_username_isSet;
}

bool OAIDownloadShare::is_show_creator_username_Valid() const{
    return m_show_creator_username_isValid;
}

QString OAIDownloadShare::getSmsRecipients() const {
    return m_sms_recipients;
}
void OAIDownloadShare::setSmsRecipients(const QString &sms_recipients) {
    m_sms_recipients = sms_recipients;
    m_sms_recipients_isSet = true;
}

bool OAIDownloadShare::is_sms_recipients_Set() const{
    return m_sms_recipients_isSet;
}

bool OAIDownloadShare::is_sms_recipients_Valid() const{
    return m_sms_recipients_isValid;
}

QDateTime OAIDownloadShare::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDownloadShare::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDownloadShare::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDownloadShare::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAIDownloadShare::getUpdatedBy() const {
    return m_updated_by;
}
void OAIDownloadShare::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIDownloadShare::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIDownloadShare::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIDownloadShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_internal_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_downloads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_creator_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sms_recipients_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_key_isValid && m_cnt_downloads_isValid && m_created_at_isValid && m_created_by_isValid && m_id_isValid && m_name_isValid && m_node_id_isValid && m_notify_creator_isValid && true;
}

} // namespace OpenAPI
