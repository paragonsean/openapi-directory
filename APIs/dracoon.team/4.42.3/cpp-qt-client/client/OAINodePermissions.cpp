/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINodePermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINodePermissions::OAINodePermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINodePermissions::OAINodePermissions() {
    this->initializeModel();
}

OAINodePermissions::~OAINodePermissions() {}

void OAINodePermissions::initializeModel() {

    m_change_isSet = false;
    m_change_isValid = false;

    m_create_isSet = false;
    m_create_isValid = false;

    m_r_delete_isSet = false;
    m_r_delete_isValid = false;

    m_delete_recycle_bin_isSet = false;
    m_delete_recycle_bin_isValid = false;

    m_manage_isSet = false;
    m_manage_isValid = false;

    m_manage_download_share_isSet = false;
    m_manage_download_share_isValid = false;

    m_manage_upload_share_isSet = false;
    m_manage_upload_share_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_read_recycle_bin_isSet = false;
    m_read_recycle_bin_isValid = false;

    m_restore_recycle_bin_isSet = false;
    m_restore_recycle_bin_isValid = false;
}

void OAINodePermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINodePermissions::fromJsonObject(QJsonObject json) {

    m_change_isValid = ::OpenAPI::fromJsonValue(m_change, json[QString("change")]);
    m_change_isSet = !json[QString("change")].isNull() && m_change_isValid;

    m_create_isValid = ::OpenAPI::fromJsonValue(m_create, json[QString("create")]);
    m_create_isSet = !json[QString("create")].isNull() && m_create_isValid;

    m_r_delete_isValid = ::OpenAPI::fromJsonValue(m_r_delete, json[QString("delete")]);
    m_r_delete_isSet = !json[QString("delete")].isNull() && m_r_delete_isValid;

    m_delete_recycle_bin_isValid = ::OpenAPI::fromJsonValue(m_delete_recycle_bin, json[QString("deleteRecycleBin")]);
    m_delete_recycle_bin_isSet = !json[QString("deleteRecycleBin")].isNull() && m_delete_recycle_bin_isValid;

    m_manage_isValid = ::OpenAPI::fromJsonValue(m_manage, json[QString("manage")]);
    m_manage_isSet = !json[QString("manage")].isNull() && m_manage_isValid;

    m_manage_download_share_isValid = ::OpenAPI::fromJsonValue(m_manage_download_share, json[QString("manageDownloadShare")]);
    m_manage_download_share_isSet = !json[QString("manageDownloadShare")].isNull() && m_manage_download_share_isValid;

    m_manage_upload_share_isValid = ::OpenAPI::fromJsonValue(m_manage_upload_share, json[QString("manageUploadShare")]);
    m_manage_upload_share_isSet = !json[QString("manageUploadShare")].isNull() && m_manage_upload_share_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_read_recycle_bin_isValid = ::OpenAPI::fromJsonValue(m_read_recycle_bin, json[QString("readRecycleBin")]);
    m_read_recycle_bin_isSet = !json[QString("readRecycleBin")].isNull() && m_read_recycle_bin_isValid;

    m_restore_recycle_bin_isValid = ::OpenAPI::fromJsonValue(m_restore_recycle_bin, json[QString("restoreRecycleBin")]);
    m_restore_recycle_bin_isSet = !json[QString("restoreRecycleBin")].isNull() && m_restore_recycle_bin_isValid;
}

QString OAINodePermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINodePermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_change_isSet) {
        obj.insert(QString("change"), ::OpenAPI::toJsonValue(m_change));
    }
    if (m_create_isSet) {
        obj.insert(QString("create"), ::OpenAPI::toJsonValue(m_create));
    }
    if (m_r_delete_isSet) {
        obj.insert(QString("delete"), ::OpenAPI::toJsonValue(m_r_delete));
    }
    if (m_delete_recycle_bin_isSet) {
        obj.insert(QString("deleteRecycleBin"), ::OpenAPI::toJsonValue(m_delete_recycle_bin));
    }
    if (m_manage_isSet) {
        obj.insert(QString("manage"), ::OpenAPI::toJsonValue(m_manage));
    }
    if (m_manage_download_share_isSet) {
        obj.insert(QString("manageDownloadShare"), ::OpenAPI::toJsonValue(m_manage_download_share));
    }
    if (m_manage_upload_share_isSet) {
        obj.insert(QString("manageUploadShare"), ::OpenAPI::toJsonValue(m_manage_upload_share));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_read_recycle_bin_isSet) {
        obj.insert(QString("readRecycleBin"), ::OpenAPI::toJsonValue(m_read_recycle_bin));
    }
    if (m_restore_recycle_bin_isSet) {
        obj.insert(QString("restoreRecycleBin"), ::OpenAPI::toJsonValue(m_restore_recycle_bin));
    }
    return obj;
}

bool OAINodePermissions::isChange() const {
    return m_change;
}
void OAINodePermissions::setChange(const bool &change) {
    m_change = change;
    m_change_isSet = true;
}

bool OAINodePermissions::is_change_Set() const{
    return m_change_isSet;
}

bool OAINodePermissions::is_change_Valid() const{
    return m_change_isValid;
}

bool OAINodePermissions::isCreate() const {
    return m_create;
}
void OAINodePermissions::setCreate(const bool &create) {
    m_create = create;
    m_create_isSet = true;
}

bool OAINodePermissions::is_create_Set() const{
    return m_create_isSet;
}

bool OAINodePermissions::is_create_Valid() const{
    return m_create_isValid;
}

bool OAINodePermissions::isRDelete() const {
    return m_r_delete;
}
void OAINodePermissions::setRDelete(const bool &r_delete) {
    m_r_delete = r_delete;
    m_r_delete_isSet = true;
}

bool OAINodePermissions::is_r_delete_Set() const{
    return m_r_delete_isSet;
}

bool OAINodePermissions::is_r_delete_Valid() const{
    return m_r_delete_isValid;
}

bool OAINodePermissions::isDeleteRecycleBin() const {
    return m_delete_recycle_bin;
}
void OAINodePermissions::setDeleteRecycleBin(const bool &delete_recycle_bin) {
    m_delete_recycle_bin = delete_recycle_bin;
    m_delete_recycle_bin_isSet = true;
}

bool OAINodePermissions::is_delete_recycle_bin_Set() const{
    return m_delete_recycle_bin_isSet;
}

bool OAINodePermissions::is_delete_recycle_bin_Valid() const{
    return m_delete_recycle_bin_isValid;
}

bool OAINodePermissions::isManage() const {
    return m_manage;
}
void OAINodePermissions::setManage(const bool &manage) {
    m_manage = manage;
    m_manage_isSet = true;
}

bool OAINodePermissions::is_manage_Set() const{
    return m_manage_isSet;
}

bool OAINodePermissions::is_manage_Valid() const{
    return m_manage_isValid;
}

bool OAINodePermissions::isManageDownloadShare() const {
    return m_manage_download_share;
}
void OAINodePermissions::setManageDownloadShare(const bool &manage_download_share) {
    m_manage_download_share = manage_download_share;
    m_manage_download_share_isSet = true;
}

bool OAINodePermissions::is_manage_download_share_Set() const{
    return m_manage_download_share_isSet;
}

bool OAINodePermissions::is_manage_download_share_Valid() const{
    return m_manage_download_share_isValid;
}

bool OAINodePermissions::isManageUploadShare() const {
    return m_manage_upload_share;
}
void OAINodePermissions::setManageUploadShare(const bool &manage_upload_share) {
    m_manage_upload_share = manage_upload_share;
    m_manage_upload_share_isSet = true;
}

bool OAINodePermissions::is_manage_upload_share_Set() const{
    return m_manage_upload_share_isSet;
}

bool OAINodePermissions::is_manage_upload_share_Valid() const{
    return m_manage_upload_share_isValid;
}

bool OAINodePermissions::isRead() const {
    return m_read;
}
void OAINodePermissions::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAINodePermissions::is_read_Set() const{
    return m_read_isSet;
}

bool OAINodePermissions::is_read_Valid() const{
    return m_read_isValid;
}

bool OAINodePermissions::isReadRecycleBin() const {
    return m_read_recycle_bin;
}
void OAINodePermissions::setReadRecycleBin(const bool &read_recycle_bin) {
    m_read_recycle_bin = read_recycle_bin;
    m_read_recycle_bin_isSet = true;
}

bool OAINodePermissions::is_read_recycle_bin_Set() const{
    return m_read_recycle_bin_isSet;
}

bool OAINodePermissions::is_read_recycle_bin_Valid() const{
    return m_read_recycle_bin_isValid;
}

bool OAINodePermissions::isRestoreRecycleBin() const {
    return m_restore_recycle_bin;
}
void OAINodePermissions::setRestoreRecycleBin(const bool &restore_recycle_bin) {
    m_restore_recycle_bin = restore_recycle_bin;
    m_restore_recycle_bin_isSet = true;
}

bool OAINodePermissions::is_restore_recycle_bin_Set() const{
    return m_restore_recycle_bin_isSet;
}

bool OAINodePermissions::is_restore_recycle_bin_Valid() const{
    return m_restore_recycle_bin_isValid;
}

bool OAINodePermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_recycle_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manage_download_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manage_upload_share_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_recycle_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restore_recycle_bin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINodePermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_change_isValid && m_create_isValid && m_r_delete_isValid && m_delete_recycle_bin_isValid && m_manage_isValid && m_manage_download_share_isValid && m_manage_upload_share_isValid && m_read_isValid && m_read_recycle_bin_isValid && m_restore_recycle_bin_isValid && true;
}

} // namespace OpenAPI
