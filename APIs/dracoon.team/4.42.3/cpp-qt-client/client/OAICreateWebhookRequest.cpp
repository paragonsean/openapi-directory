/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateWebhookRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateWebhookRequest::OAICreateWebhookRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateWebhookRequest::OAICreateWebhookRequest() {
    this->initializeModel();
}

OAICreateWebhookRequest::~OAICreateWebhookRequest() {}

void OAICreateWebhookRequest::initializeModel() {

    m_event_type_names_isSet = false;
    m_event_type_names_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_secret_isSet = false;
    m_secret_isValid = false;

    m_trigger_example_event_isSet = false;
    m_trigger_example_event_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateWebhookRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateWebhookRequest::fromJsonObject(QJsonObject json) {

    m_event_type_names_isValid = ::OpenAPI::fromJsonValue(m_event_type_names, json[QString("eventTypeNames")]);
    m_event_type_names_isSet = !json[QString("eventTypeNames")].isNull() && m_event_type_names_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_secret_isValid = ::OpenAPI::fromJsonValue(m_secret, json[QString("secret")]);
    m_secret_isSet = !json[QString("secret")].isNull() && m_secret_isValid;

    m_trigger_example_event_isValid = ::OpenAPI::fromJsonValue(m_trigger_example_event, json[QString("triggerExampleEvent")]);
    m_trigger_example_event_isSet = !json[QString("triggerExampleEvent")].isNull() && m_trigger_example_event_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreateWebhookRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateWebhookRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_event_type_names.size() > 0) {
        obj.insert(QString("eventTypeNames"), ::OpenAPI::toJsonValue(m_event_type_names));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_secret_isSet) {
        obj.insert(QString("secret"), ::OpenAPI::toJsonValue(m_secret));
    }
    if (m_trigger_example_event_isSet) {
        obj.insert(QString("triggerExampleEvent"), ::OpenAPI::toJsonValue(m_trigger_example_event));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<QString> OAICreateWebhookRequest::getEventTypeNames() const {
    return m_event_type_names;
}
void OAICreateWebhookRequest::setEventTypeNames(const QList<QString> &event_type_names) {
    m_event_type_names = event_type_names;
    m_event_type_names_isSet = true;
}

bool OAICreateWebhookRequest::is_event_type_names_Set() const{
    return m_event_type_names_isSet;
}

bool OAICreateWebhookRequest::is_event_type_names_Valid() const{
    return m_event_type_names_isValid;
}

bool OAICreateWebhookRequest::isIsEnabled() const {
    return m_is_enabled;
}
void OAICreateWebhookRequest::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAICreateWebhookRequest::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAICreateWebhookRequest::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QString OAICreateWebhookRequest::getName() const {
    return m_name;
}
void OAICreateWebhookRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateWebhookRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateWebhookRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateWebhookRequest::getSecret() const {
    return m_secret;
}
void OAICreateWebhookRequest::setSecret(const QString &secret) {
    m_secret = secret;
    m_secret_isSet = true;
}

bool OAICreateWebhookRequest::is_secret_Set() const{
    return m_secret_isSet;
}

bool OAICreateWebhookRequest::is_secret_Valid() const{
    return m_secret_isValid;
}

bool OAICreateWebhookRequest::isTriggerExampleEvent() const {
    return m_trigger_example_event;
}
void OAICreateWebhookRequest::setTriggerExampleEvent(const bool &trigger_example_event) {
    m_trigger_example_event = trigger_example_event;
    m_trigger_example_event_isSet = true;
}

bool OAICreateWebhookRequest::is_trigger_example_event_Set() const{
    return m_trigger_example_event_isSet;
}

bool OAICreateWebhookRequest::is_trigger_example_event_Valid() const{
    return m_trigger_example_event_isValid;
}

QString OAICreateWebhookRequest::getUrl() const {
    return m_url;
}
void OAICreateWebhookRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateWebhookRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateWebhookRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateWebhookRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_type_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_example_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateWebhookRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_type_names_isValid && m_name_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
