/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoleUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoleUser::OAIRoleUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoleUser::OAIRoleUser() {
    this->initializeModel();
}

OAIRoleUser::~OAIRoleUser() {}

void OAIRoleUser::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_member_isSet = false;
    m_is_member_isValid = false;

    m_user_info_isSet = false;
    m_user_info_isValid = false;
}

void OAIRoleUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoleUser::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_member_isValid = ::OpenAPI::fromJsonValue(m_is_member, json[QString("isMember")]);
    m_is_member_isSet = !json[QString("isMember")].isNull() && m_is_member_isValid;

    m_user_info_isValid = ::OpenAPI::fromJsonValue(m_user_info, json[QString("userInfo")]);
    m_user_info_isSet = !json[QString("userInfo")].isNull() && m_user_info_isValid;
}

QString OAIRoleUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoleUser::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_member_isSet) {
        obj.insert(QString("isMember"), ::OpenAPI::toJsonValue(m_is_member));
    }
    if (m_user_info.isSet()) {
        obj.insert(QString("userInfo"), ::OpenAPI::toJsonValue(m_user_info));
    }
    return obj;
}

QString OAIRoleUser::getDisplayName() const {
    return m_display_name;
}
void OAIRoleUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRoleUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRoleUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint64 OAIRoleUser::getId() const {
    return m_id;
}
void OAIRoleUser::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoleUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoleUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRoleUser::isIsMember() const {
    return m_is_member;
}
void OAIRoleUser::setIsMember(const bool &is_member) {
    m_is_member = is_member;
    m_is_member_isSet = true;
}

bool OAIRoleUser::is_is_member_Set() const{
    return m_is_member_isSet;
}

bool OAIRoleUser::is_is_member_Valid() const{
    return m_is_member_isValid;
}

OAIUserInfo OAIRoleUser::getUserInfo() const {
    return m_user_info;
}
void OAIRoleUser::setUserInfo(const OAIUserInfo &user_info) {
    m_user_info = user_info;
    m_user_info_isSet = true;
}

bool OAIRoleUser::is_user_info_Set() const{
    return m_user_info_isSet;
}

bool OAIRoleUser::is_user_info_Valid() const{
    return m_user_info_isValid;
}

bool OAIRoleUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_member_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoleUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_display_name_isValid && m_id_isValid && m_is_member_isValid && m_user_info_isValid && true;
}

} // namespace OpenAPI
