/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateEventlogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateEventlogConfig::OAIUpdateEventlogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateEventlogConfig::OAIUpdateEventlogConfig() {
    this->initializeModel();
}

OAIUpdateEventlogConfig::~OAIUpdateEventlogConfig() {}

void OAIUpdateEventlogConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_log_ip_enabled_isSet = false;
    m_log_ip_enabled_isValid = false;

    m_retention_period_isSet = false;
    m_retention_period_isValid = false;
}

void OAIUpdateEventlogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateEventlogConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_log_ip_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_ip_enabled, json[QString("logIpEnabled")]);
    m_log_ip_enabled_isSet = !json[QString("logIpEnabled")].isNull() && m_log_ip_enabled_isValid;

    m_retention_period_isValid = ::OpenAPI::fromJsonValue(m_retention_period, json[QString("retentionPeriod")]);
    m_retention_period_isSet = !json[QString("retentionPeriod")].isNull() && m_retention_period_isValid;
}

QString OAIUpdateEventlogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateEventlogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_log_ip_enabled_isSet) {
        obj.insert(QString("logIpEnabled"), ::OpenAPI::toJsonValue(m_log_ip_enabled));
    }
    if (m_retention_period_isSet) {
        obj.insert(QString("retentionPeriod"), ::OpenAPI::toJsonValue(m_retention_period));
    }
    return obj;
}

bool OAIUpdateEventlogConfig::isEnabled() const {
    return m_enabled;
}
void OAIUpdateEventlogConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdateEventlogConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdateEventlogConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIUpdateEventlogConfig::isLogIpEnabled() const {
    return m_log_ip_enabled;
}
void OAIUpdateEventlogConfig::setLogIpEnabled(const bool &log_ip_enabled) {
    m_log_ip_enabled = log_ip_enabled;
    m_log_ip_enabled_isSet = true;
}

bool OAIUpdateEventlogConfig::is_log_ip_enabled_Set() const{
    return m_log_ip_enabled_isSet;
}

bool OAIUpdateEventlogConfig::is_log_ip_enabled_Valid() const{
    return m_log_ip_enabled_isValid;
}

qint32 OAIUpdateEventlogConfig::getRetentionPeriod() const {
    return m_retention_period;
}
void OAIUpdateEventlogConfig::setRetentionPeriod(const qint32 &retention_period) {
    m_retention_period = retention_period;
    m_retention_period_isSet = true;
}

bool OAIUpdateEventlogConfig::is_retention_period_Set() const{
    return m_retention_period_isSet;
}

bool OAIUpdateEventlogConfig::is_retention_period_Valid() const{
    return m_retention_period_isValid;
}

bool OAIUpdateEventlogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_ip_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateEventlogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
