/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributesResponse.h"
#include "OAIAvatar.h"
#include "OAIChangeUserPasswordRequest.h"
#include "OAICreateKeyPairRequest.h"
#include "OAICustomerData.h"
#include "OAIEnableCustomerEncryptionRequest.h"
#include "OAIErrorResponse.h"
#include "OAIHttpFileElement.h"
#include "OAIMfaTotpConfirmationRequest.h"
#include "OAINotificationConfig.h"
#include "OAINotificationConfigChangeRequest.h"
#include "OAINotificationConfigList.h"
#include "OAIOAuthApproval.h"
#include "OAIOAuthAuthorization.h"
#include "OAIProfileAttributes.h"
#include "OAIProfileAttributesRequest.h"
#include "OAIResetPassword_400_response.h"
#include "OAISubscribedDownloadShare.h"
#include "OAISubscribedDownloadShareList.h"
#include "OAISubscribedNode.h"
#include "OAISubscribedNodeList.h"
#include "OAISubscribedUploadShare.h"
#include "OAISubscribedUploadShareList.h"
#include "OAITotpSetupResponse.h"
#include "OAIUpdateSubscriptionsBulkRequest.h"
#include "OAIUpdateUserAccountRequest.h"
#include "OAIUserAccount.h"
#include "OAIUserKeyPairContainer.h"
#include "OAIUserMfaStatusResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_change_user_password_request OAIChangeUserPasswordRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changeUserPassword(const OAIChangeUserPasswordRequest &oai_change_user_password_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_mfa_totp_confirmation_request OAIMfaTotpConfirmationRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void confirmTotpSetup(const OAIMfaTotpConfirmationRequest &oai_mfa_totp_confirmation_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_key_pair_request OAICreateKeyPairRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createAndPreserveUserKeyPair(const OAICreateKeyPairRequest &oai_create_key_pair_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  valid_otp QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void deleteMfaTotpSetup(const qint64 &id, const QString &valid_otp, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_enable_customer_encryption_request OAIEnableCustomerEncryptionRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void enableCustomerEncryption(const OAIEnableCustomerEncryptionRequest &oai_enable_customer_encryption_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void getMfaStatusForUser(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void getTotpSetupInformation(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void listDownloadShareSubscriptions(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void listNodeSubscriptions(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void listUploadShareSubscriptions(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  everywhere bool [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void logout(const ::OpenAPI::OptionalParam<bool> &everywhere = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void pingUser(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeOAuthApproval(const QString &client_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  authorization_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeOAuthAuthorization(const QString &client_id, const qint64 &authorization_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeOAuthAuthorizations(const QString &client_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeProfileAttribute(const QString &key, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeUserKeyPair(const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAvatar(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestCustomerInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestCustomerKeyPair(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestListOfNotificationConfigs(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOAuthApprovals(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOAuthAuthorizations(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestProfileAttributes(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  more_info bool [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserInfo(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &more_info = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserKeyPair(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserKeyPairs(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void resetAvatar(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_profile_attributes_request OAIProfileAttributesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void setProfileAttributes(const OAIProfileAttributesRequest &oai_profile_attributes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_user_key_pair_container OAIUserKeyPairContainer [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setUserKeyPair(const OAIUserKeyPairContainer &oai_user_key_pair_container, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  share_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void subscribeDownloadShare(const qint64 &share_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_subscriptions_bulk_request OAIUpdateSubscriptionsBulkRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void subscribeDownloadShares(const OAIUpdateSubscriptionsBulkRequest &oai_update_subscriptions_bulk_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void subscribeNode(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  share_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void subscribeUploadShare(const qint64 &share_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_subscriptions_bulk_request OAIUpdateSubscriptionsBulkRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void subscribeUploadShares(const OAIUpdateSubscriptionsBulkRequest &oai_update_subscriptions_bulk_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  share_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void unsubscribeDownloadShare(const qint64 &share_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void unsubscribeNode(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  share_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void unsubscribeUploadShare(const qint64 &share_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_subscriptions_bulk_request OAIUpdateSubscriptionsBulkRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateNodeSubscriptions(const OAIUpdateSubscriptionsBulkRequest &oai_update_subscriptions_bulk_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  oai_notification_config_change_request OAINotificationConfigChangeRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateNotificationConfig(const qint64 &id, const OAINotificationConfigChangeRequest &oai_notification_config_change_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_profile_attributes_request OAIProfileAttributesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateProfileAttributes(const OAIProfileAttributesRequest &oai_profile_attributes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_user_account_request OAIUpdateUserAccountRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateUserAccount(const OAIUpdateUserAccountRequest &oai_update_user_account_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void uploadAvatarAsMultipart(const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  emergency_code QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void useEmergencyCode(const QString &emergency_code, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeUserPasswordCallback(OAIHttpRequestWorker *worker);
    void confirmTotpSetupCallback(OAIHttpRequestWorker *worker);
    void createAndPreserveUserKeyPairCallback(OAIHttpRequestWorker *worker);
    void deleteMfaTotpSetupCallback(OAIHttpRequestWorker *worker);
    void enableCustomerEncryptionCallback(OAIHttpRequestWorker *worker);
    void getMfaStatusForUserCallback(OAIHttpRequestWorker *worker);
    void getTotpSetupInformationCallback(OAIHttpRequestWorker *worker);
    void listDownloadShareSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void listNodeSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void listUploadShareSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void pingUserCallback(OAIHttpRequestWorker *worker);
    void removeOAuthApprovalCallback(OAIHttpRequestWorker *worker);
    void removeOAuthAuthorizationCallback(OAIHttpRequestWorker *worker);
    void removeOAuthAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void removeProfileAttributeCallback(OAIHttpRequestWorker *worker);
    void removeUserKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestAvatarCallback(OAIHttpRequestWorker *worker);
    void requestCustomerInfoCallback(OAIHttpRequestWorker *worker);
    void requestCustomerKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestListOfNotificationConfigsCallback(OAIHttpRequestWorker *worker);
    void requestOAuthApprovalsCallback(OAIHttpRequestWorker *worker);
    void requestOAuthAuthorizationsCallback(OAIHttpRequestWorker *worker);
    void requestProfileAttributesCallback(OAIHttpRequestWorker *worker);
    void requestUserInfoCallback(OAIHttpRequestWorker *worker);
    void requestUserKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestUserKeyPairsCallback(OAIHttpRequestWorker *worker);
    void resetAvatarCallback(OAIHttpRequestWorker *worker);
    void setProfileAttributesCallback(OAIHttpRequestWorker *worker);
    void setUserKeyPairCallback(OAIHttpRequestWorker *worker);
    void subscribeDownloadShareCallback(OAIHttpRequestWorker *worker);
    void subscribeDownloadSharesCallback(OAIHttpRequestWorker *worker);
    void subscribeNodeCallback(OAIHttpRequestWorker *worker);
    void subscribeUploadShareCallback(OAIHttpRequestWorker *worker);
    void subscribeUploadSharesCallback(OAIHttpRequestWorker *worker);
    void unsubscribeDownloadShareCallback(OAIHttpRequestWorker *worker);
    void unsubscribeNodeCallback(OAIHttpRequestWorker *worker);
    void unsubscribeUploadShareCallback(OAIHttpRequestWorker *worker);
    void updateNodeSubscriptionsCallback(OAIHttpRequestWorker *worker);
    void updateNotificationConfigCallback(OAIHttpRequestWorker *worker);
    void updateProfileAttributesCallback(OAIHttpRequestWorker *worker);
    void updateUserAccountCallback(OAIHttpRequestWorker *worker);
    void uploadAvatarAsMultipartCallback(OAIHttpRequestWorker *worker);
    void useEmergencyCodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeUserPasswordSignal();
    void confirmTotpSetupSignal();
    void createAndPreserveUserKeyPairSignal();
    void deleteMfaTotpSetupSignal();
    void enableCustomerEncryptionSignal(OAICustomerData summary);
    void getMfaStatusForUserSignal(OAIUserMfaStatusResponse summary);
    void getTotpSetupInformationSignal(OAITotpSetupResponse summary);
    void listDownloadShareSubscriptionsSignal(OAISubscribedDownloadShareList summary);
    void listNodeSubscriptionsSignal(OAISubscribedNodeList summary);
    void listUploadShareSubscriptionsSignal(OAISubscribedUploadShareList summary);
    void logoutSignal();
    void pingUserSignal(QString summary);
    void removeOAuthApprovalSignal();
    void removeOAuthAuthorizationSignal();
    void removeOAuthAuthorizationsSignal();
    void removeProfileAttributeSignal();
    void removeUserKeyPairSignal();
    void requestAvatarSignal(OAIAvatar summary);
    void requestCustomerInfoSignal(OAICustomerData summary);
    void requestCustomerKeyPairSignal(OAIUserKeyPairContainer summary);
    void requestListOfNotificationConfigsSignal(OAINotificationConfigList summary);
    void requestOAuthApprovalsSignal(QList<OAIOAuthApproval> summary);
    void requestOAuthAuthorizationsSignal(QList<OAIOAuthAuthorization> summary);
    void requestProfileAttributesSignal(OAIAttributesResponse summary);
    void requestUserInfoSignal(OAIUserAccount summary);
    void requestUserKeyPairSignal(OAIUserKeyPairContainer summary);
    void requestUserKeyPairsSignal(QList<OAIUserKeyPairContainer> summary);
    void resetAvatarSignal(OAIAvatar summary);
    void setProfileAttributesSignal(OAIProfileAttributes summary);
    void setUserKeyPairSignal();
    void subscribeDownloadShareSignal(OAISubscribedDownloadShare summary);
    void subscribeDownloadSharesSignal();
    void subscribeNodeSignal(OAISubscribedNode summary);
    void subscribeUploadShareSignal(OAISubscribedUploadShare summary);
    void subscribeUploadSharesSignal();
    void unsubscribeDownloadShareSignal();
    void unsubscribeNodeSignal();
    void unsubscribeUploadShareSignal();
    void updateNodeSubscriptionsSignal();
    void updateNotificationConfigSignal(OAINotificationConfig summary);
    void updateProfileAttributesSignal(OAIProfileAttributes summary);
    void updateUserAccountSignal(OAIUserAccount summary);
    void uploadAvatarAsMultipartSignal(OAIAvatar summary);
    void useEmergencyCodeSignal();


    void changeUserPasswordSignalFull(OAIHttpRequestWorker *worker);
    void confirmTotpSetupSignalFull(OAIHttpRequestWorker *worker);
    void createAndPreserveUserKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void deleteMfaTotpSetupSignalFull(OAIHttpRequestWorker *worker);
    void enableCustomerEncryptionSignalFull(OAIHttpRequestWorker *worker, OAICustomerData summary);
    void getMfaStatusForUserSignalFull(OAIHttpRequestWorker *worker, OAIUserMfaStatusResponse summary);
    void getTotpSetupInformationSignalFull(OAIHttpRequestWorker *worker, OAITotpSetupResponse summary);
    void listDownloadShareSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAISubscribedDownloadShareList summary);
    void listNodeSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAISubscribedNodeList summary);
    void listUploadShareSubscriptionsSignalFull(OAIHttpRequestWorker *worker, OAISubscribedUploadShareList summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker);
    void pingUserSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void removeOAuthApprovalSignalFull(OAIHttpRequestWorker *worker);
    void removeOAuthAuthorizationSignalFull(OAIHttpRequestWorker *worker);
    void removeOAuthAuthorizationsSignalFull(OAIHttpRequestWorker *worker);
    void removeProfileAttributeSignalFull(OAIHttpRequestWorker *worker);
    void removeUserKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void requestAvatarSignalFull(OAIHttpRequestWorker *worker, OAIAvatar summary);
    void requestCustomerInfoSignalFull(OAIHttpRequestWorker *worker, OAICustomerData summary);
    void requestCustomerKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIUserKeyPairContainer summary);
    void requestListOfNotificationConfigsSignalFull(OAIHttpRequestWorker *worker, OAINotificationConfigList summary);
    void requestOAuthApprovalsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOAuthApproval> summary);
    void requestOAuthAuthorizationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOAuthAuthorization> summary);
    void requestProfileAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAttributesResponse summary);
    void requestUserInfoSignalFull(OAIHttpRequestWorker *worker, OAIUserAccount summary);
    void requestUserKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIUserKeyPairContainer summary);
    void requestUserKeyPairsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserKeyPairContainer> summary);
    void resetAvatarSignalFull(OAIHttpRequestWorker *worker, OAIAvatar summary);
    void setProfileAttributesSignalFull(OAIHttpRequestWorker *worker, OAIProfileAttributes summary);
    void setUserKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void subscribeDownloadShareSignalFull(OAIHttpRequestWorker *worker, OAISubscribedDownloadShare summary);
    void subscribeDownloadSharesSignalFull(OAIHttpRequestWorker *worker);
    void subscribeNodeSignalFull(OAIHttpRequestWorker *worker, OAISubscribedNode summary);
    void subscribeUploadShareSignalFull(OAIHttpRequestWorker *worker, OAISubscribedUploadShare summary);
    void subscribeUploadSharesSignalFull(OAIHttpRequestWorker *worker);
    void unsubscribeDownloadShareSignalFull(OAIHttpRequestWorker *worker);
    void unsubscribeNodeSignalFull(OAIHttpRequestWorker *worker);
    void unsubscribeUploadShareSignalFull(OAIHttpRequestWorker *worker);
    void updateNodeSubscriptionsSignalFull(OAIHttpRequestWorker *worker);
    void updateNotificationConfigSignalFull(OAIHttpRequestWorker *worker, OAINotificationConfig summary);
    void updateProfileAttributesSignalFull(OAIHttpRequestWorker *worker, OAIProfileAttributes summary);
    void updateUserAccountSignalFull(OAIHttpRequestWorker *worker, OAIUserAccount summary);
    void uploadAvatarAsMultipartSignalFull(OAIHttpRequestWorker *worker, OAIAvatar summary);
    void useEmergencyCodeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use changeUserPasswordSignalError() instead")
    void changeUserPasswordSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changeUserPasswordSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmTotpSetupSignalError() instead")
    void confirmTotpSetupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void confirmTotpSetupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAndPreserveUserKeyPairSignalError() instead")
    void createAndPreserveUserKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveUserKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMfaTotpSetupSignalError() instead")
    void deleteMfaTotpSetupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMfaTotpSetupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCustomerEncryptionSignalError() instead")
    void enableCustomerEncryptionSignalE(OAICustomerData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableCustomerEncryptionSignalError(OAICustomerData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMfaStatusForUserSignalError() instead")
    void getMfaStatusForUserSignalE(OAIUserMfaStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMfaStatusForUserSignalError(OAIUserMfaStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTotpSetupInformationSignalError() instead")
    void getTotpSetupInformationSignalE(OAITotpSetupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTotpSetupInformationSignalError(OAITotpSetupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDownloadShareSubscriptionsSignalError() instead")
    void listDownloadShareSubscriptionsSignalE(OAISubscribedDownloadShareList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listDownloadShareSubscriptionsSignalError(OAISubscribedDownloadShareList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNodeSubscriptionsSignalError() instead")
    void listNodeSubscriptionsSignalE(OAISubscribedNodeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listNodeSubscriptionsSignalError(OAISubscribedNodeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUploadShareSubscriptionsSignalError() instead")
    void listUploadShareSubscriptionsSignalE(OAISubscribedUploadShareList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUploadShareSubscriptionsSignalError(OAISubscribedUploadShareList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingUserSignalError() instead")
    void pingUserSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pingUserSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthApprovalSignalError() instead")
    void removeOAuthApprovalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthApprovalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthAuthorizationSignalError() instead")
    void removeOAuthAuthorizationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthAuthorizationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthAuthorizationsSignalError() instead")
    void removeOAuthAuthorizationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthAuthorizationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProfileAttributeSignalError() instead")
    void removeProfileAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeProfileAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserKeyPairSignalError() instead")
    void removeUserKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAvatarSignalError() instead")
    void requestAvatarSignalE(OAIAvatar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAvatarSignalError(OAIAvatar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerInfoSignalError() instead")
    void requestCustomerInfoSignalE(OAICustomerData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerInfoSignalError(OAICustomerData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerKeyPairSignalError() instead")
    void requestCustomerKeyPairSignalE(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerKeyPairSignalError(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfNotificationConfigsSignalError() instead")
    void requestListOfNotificationConfigsSignalE(OAINotificationConfigList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfNotificationConfigsSignalError(OAINotificationConfigList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthApprovalsSignalError() instead")
    void requestOAuthApprovalsSignalE(QList<OAIOAuthApproval> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthApprovalsSignalError(QList<OAIOAuthApproval> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthAuthorizationsSignalError() instead")
    void requestOAuthAuthorizationsSignalE(QList<OAIOAuthAuthorization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthAuthorizationsSignalError(QList<OAIOAuthAuthorization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestProfileAttributesSignalError() instead")
    void requestProfileAttributesSignalE(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestProfileAttributesSignalError(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserInfoSignalError() instead")
    void requestUserInfoSignalE(OAIUserAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserInfoSignalError(OAIUserAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserKeyPairSignalError() instead")
    void requestUserKeyPairSignalE(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserKeyPairSignalError(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserKeyPairsSignalError() instead")
    void requestUserKeyPairsSignalE(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserKeyPairsSignalError(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetAvatarSignalError() instead")
    void resetAvatarSignalE(OAIAvatar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetAvatarSignalError(OAIAvatar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setProfileAttributesSignalError() instead")
    void setProfileAttributesSignalE(OAIProfileAttributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setProfileAttributesSignalError(OAIProfileAttributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserKeyPairSignalError() instead")
    void setUserKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setUserKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeDownloadShareSignalError() instead")
    void subscribeDownloadShareSignalE(OAISubscribedDownloadShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeDownloadShareSignalError(OAISubscribedDownloadShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeDownloadSharesSignalError() instead")
    void subscribeDownloadSharesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeDownloadSharesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeNodeSignalError() instead")
    void subscribeNodeSignalE(OAISubscribedNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeNodeSignalError(OAISubscribedNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUploadShareSignalError() instead")
    void subscribeUploadShareSignalE(OAISubscribedUploadShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUploadShareSignalError(OAISubscribedUploadShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUploadSharesSignalError() instead")
    void subscribeUploadSharesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUploadSharesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeDownloadShareSignalError() instead")
    void unsubscribeDownloadShareSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeDownloadShareSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeNodeSignalError() instead")
    void unsubscribeNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeUploadShareSignalError() instead")
    void unsubscribeUploadShareSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeUploadShareSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNodeSubscriptionsSignalError() instead")
    void updateNodeSubscriptionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateNodeSubscriptionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationConfigSignalError() instead")
    void updateNotificationConfigSignalE(OAINotificationConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationConfigSignalError(OAINotificationConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileAttributesSignalError() instead")
    void updateProfileAttributesSignalE(OAIProfileAttributes summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileAttributesSignalError(OAIProfileAttributes summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAccountSignalError() instead")
    void updateUserAccountSignalE(OAIUserAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAccountSignalError(OAIUserAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadAvatarAsMultipartSignalError() instead")
    void uploadAvatarAsMultipartSignalE(OAIAvatar summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadAvatarAsMultipartSignalError(OAIAvatar summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useEmergencyCodeSignalError() instead")
    void useEmergencyCodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void useEmergencyCodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeUserPasswordSignalErrorFull() instead")
    void changeUserPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeUserPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmTotpSetupSignalErrorFull() instead")
    void confirmTotpSetupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmTotpSetupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAndPreserveUserKeyPairSignalErrorFull() instead")
    void createAndPreserveUserKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveUserKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMfaTotpSetupSignalErrorFull() instead")
    void deleteMfaTotpSetupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMfaTotpSetupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableCustomerEncryptionSignalErrorFull() instead")
    void enableCustomerEncryptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableCustomerEncryptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMfaStatusForUserSignalErrorFull() instead")
    void getMfaStatusForUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMfaStatusForUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTotpSetupInformationSignalErrorFull() instead")
    void getTotpSetupInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTotpSetupInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDownloadShareSubscriptionsSignalErrorFull() instead")
    void listDownloadShareSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDownloadShareSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listNodeSubscriptionsSignalErrorFull() instead")
    void listNodeSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listNodeSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUploadShareSubscriptionsSignalErrorFull() instead")
    void listUploadShareSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUploadShareSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pingUserSignalErrorFull() instead")
    void pingUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pingUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthApprovalSignalErrorFull() instead")
    void removeOAuthApprovalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthApprovalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthAuthorizationSignalErrorFull() instead")
    void removeOAuthAuthorizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthAuthorizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthAuthorizationsSignalErrorFull() instead")
    void removeOAuthAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeProfileAttributeSignalErrorFull() instead")
    void removeProfileAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeProfileAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserKeyPairSignalErrorFull() instead")
    void removeUserKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAvatarSignalErrorFull() instead")
    void requestAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerInfoSignalErrorFull() instead")
    void requestCustomerInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerKeyPairSignalErrorFull() instead")
    void requestCustomerKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfNotificationConfigsSignalErrorFull() instead")
    void requestListOfNotificationConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfNotificationConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthApprovalsSignalErrorFull() instead")
    void requestOAuthApprovalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthApprovalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthAuthorizationsSignalErrorFull() instead")
    void requestOAuthAuthorizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthAuthorizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestProfileAttributesSignalErrorFull() instead")
    void requestProfileAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestProfileAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserInfoSignalErrorFull() instead")
    void requestUserInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserKeyPairSignalErrorFull() instead")
    void requestUserKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserKeyPairsSignalErrorFull() instead")
    void requestUserKeyPairsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserKeyPairsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetAvatarSignalErrorFull() instead")
    void resetAvatarSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetAvatarSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setProfileAttributesSignalErrorFull() instead")
    void setProfileAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setProfileAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserKeyPairSignalErrorFull() instead")
    void setUserKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeDownloadShareSignalErrorFull() instead")
    void subscribeDownloadShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeDownloadShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeDownloadSharesSignalErrorFull() instead")
    void subscribeDownloadSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeDownloadSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeNodeSignalErrorFull() instead")
    void subscribeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUploadShareSignalErrorFull() instead")
    void subscribeUploadShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUploadShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use subscribeUploadSharesSignalErrorFull() instead")
    void subscribeUploadSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void subscribeUploadSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeDownloadShareSignalErrorFull() instead")
    void unsubscribeDownloadShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeDownloadShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeNodeSignalErrorFull() instead")
    void unsubscribeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unsubscribeUploadShareSignalErrorFull() instead")
    void unsubscribeUploadShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unsubscribeUploadShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNodeSubscriptionsSignalErrorFull() instead")
    void updateNodeSubscriptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNodeSubscriptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNotificationConfigSignalErrorFull() instead")
    void updateNotificationConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNotificationConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileAttributesSignalErrorFull() instead")
    void updateProfileAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAccountSignalErrorFull() instead")
    void updateUserAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadAvatarAsMultipartSignalErrorFull() instead")
    void uploadAvatarAsMultipartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadAvatarAsMultipartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use useEmergencyCodeSignalErrorFull() instead")
    void useEmergencyCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void useEmergencyCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
