/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyDependenciesData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyDependenciesData::OAIThirdPartyDependenciesData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyDependenciesData::OAIThirdPartyDependenciesData() {
    this->initializeModel();
}

OAIThirdPartyDependenciesData::~OAIThirdPartyDependenciesData() {}

void OAIThirdPartyDependenciesData::initializeModel() {

    m_artifact_id_isSet = false;
    m_artifact_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_licenses_isSet = false;
    m_licenses_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIThirdPartyDependenciesData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyDependenciesData::fromJsonObject(QJsonObject json) {

    m_artifact_id_isValid = ::OpenAPI::fromJsonValue(m_artifact_id, json[QString("artifactId")]);
    m_artifact_id_isSet = !json[QString("artifactId")].isNull() && m_artifact_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_licenses_isValid = ::OpenAPI::fromJsonValue(m_licenses, json[QString("licenses")]);
    m_licenses_isSet = !json[QString("licenses")].isNull() && m_licenses_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIThirdPartyDependenciesData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyDependenciesData::asJsonObject() const {
    QJsonObject obj;
    if (m_artifact_id_isSet) {
        obj.insert(QString("artifactId"), ::OpenAPI::toJsonValue(m_artifact_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_licenses.size() > 0) {
        obj.insert(QString("licenses"), ::OpenAPI::toJsonValue(m_licenses));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIThirdPartyDependenciesData::getArtifactId() const {
    return m_artifact_id;
}
void OAIThirdPartyDependenciesData::setArtifactId(const QString &artifact_id) {
    m_artifact_id = artifact_id;
    m_artifact_id_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_artifact_id_Set() const{
    return m_artifact_id_isSet;
}

bool OAIThirdPartyDependenciesData::is_artifact_id_Valid() const{
    return m_artifact_id_isValid;
}

QString OAIThirdPartyDependenciesData::getDescription() const {
    return m_description;
}
void OAIThirdPartyDependenciesData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIThirdPartyDependenciesData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIThirdPartyDependenciesData::getGroupId() const {
    return m_group_id;
}
void OAIThirdPartyDependenciesData::setGroupId(const QString &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIThirdPartyDependenciesData::is_group_id_Valid() const{
    return m_group_id_isValid;
}

QString OAIThirdPartyDependenciesData::getId() const {
    return m_id;
}
void OAIThirdPartyDependenciesData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIThirdPartyDependenciesData::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIThirdPartyDependenciesData::getLicenses() const {
    return m_licenses;
}
void OAIThirdPartyDependenciesData::setLicenses(const QList<QString> &licenses) {
    m_licenses = licenses;
    m_licenses_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_licenses_Set() const{
    return m_licenses_isSet;
}

bool OAIThirdPartyDependenciesData::is_licenses_Valid() const{
    return m_licenses_isValid;
}

QString OAIThirdPartyDependenciesData::getName() const {
    return m_name;
}
void OAIThirdPartyDependenciesData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIThirdPartyDependenciesData::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIThirdPartyDependenciesData::getType() const {
    return m_type;
}
void OAIThirdPartyDependenciesData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIThirdPartyDependenciesData::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIThirdPartyDependenciesData::getUrl() const {
    return m_url;
}
void OAIThirdPartyDependenciesData::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIThirdPartyDependenciesData::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIThirdPartyDependenciesData::getVersion() const {
    return m_version;
}
void OAIThirdPartyDependenciesData::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIThirdPartyDependenciesData::is_version_Set() const{
    return m_version_isSet;
}

bool OAIThirdPartyDependenciesData::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIThirdPartyDependenciesData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_artifact_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_licenses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyDependenciesData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_artifact_id_isValid && m_description_isValid && m_group_id_isValid && m_id_isValid && m_licenses_isValid && m_name_isValid && m_type_isValid && m_url_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
