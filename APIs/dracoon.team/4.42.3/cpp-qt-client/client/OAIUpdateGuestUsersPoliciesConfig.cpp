/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateGuestUsersPoliciesConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateGuestUsersPoliciesConfig::OAIUpdateGuestUsersPoliciesConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateGuestUsersPoliciesConfig::OAIUpdateGuestUsersPoliciesConfig() {
    this->initializeModel();
}

OAIUpdateGuestUsersPoliciesConfig::~OAIUpdateGuestUsersPoliciesConfig() {}

void OAIUpdateGuestUsersPoliciesConfig::initializeModel() {

    m_is_invite_users_enabled_isSet = false;
    m_is_invite_users_enabled_isValid = false;
}

void OAIUpdateGuestUsersPoliciesConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateGuestUsersPoliciesConfig::fromJsonObject(QJsonObject json) {

    m_is_invite_users_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_invite_users_enabled, json[QString("isInviteUsersEnabled")]);
    m_is_invite_users_enabled_isSet = !json[QString("isInviteUsersEnabled")].isNull() && m_is_invite_users_enabled_isValid;
}

QString OAIUpdateGuestUsersPoliciesConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateGuestUsersPoliciesConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_is_invite_users_enabled_isSet) {
        obj.insert(QString("isInviteUsersEnabled"), ::OpenAPI::toJsonValue(m_is_invite_users_enabled));
    }
    return obj;
}

bool OAIUpdateGuestUsersPoliciesConfig::isIsInviteUsersEnabled() const {
    return m_is_invite_users_enabled;
}
void OAIUpdateGuestUsersPoliciesConfig::setIsInviteUsersEnabled(const bool &is_invite_users_enabled) {
    m_is_invite_users_enabled = is_invite_users_enabled;
    m_is_invite_users_enabled_isSet = true;
}

bool OAIUpdateGuestUsersPoliciesConfig::is_is_invite_users_enabled_Set() const{
    return m_is_invite_users_enabled_isSet;
}

bool OAIUpdateGuestUsersPoliciesConfig::is_is_invite_users_enabled_Valid() const{
    return m_is_invite_users_enabled_isValid;
}

bool OAIUpdateGuestUsersPoliciesConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_invite_users_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateGuestUsersPoliciesConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_invite_users_enabled_isValid && true;
}

} // namespace OpenAPI
