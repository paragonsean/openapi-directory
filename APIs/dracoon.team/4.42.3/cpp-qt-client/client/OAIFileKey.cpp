/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileKey::OAIFileKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileKey::OAIFileKey() {
    this->initializeModel();
}

OAIFileKey::~OAIFileKey() {}

void OAIFileKey::initializeModel() {

    m_iv_isSet = false;
    m_iv_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIFileKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileKey::fromJsonObject(QJsonObject json) {

    m_iv_isValid = ::OpenAPI::fromJsonValue(m_iv, json[QString("iv")]);
    m_iv_isSet = !json[QString("iv")].isNull() && m_iv_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIFileKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileKey::asJsonObject() const {
    QJsonObject obj;
    if (m_iv_isSet) {
        obj.insert(QString("iv"), ::OpenAPI::toJsonValue(m_iv));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIFileKey::getIv() const {
    return m_iv;
}
void OAIFileKey::setIv(const QString &iv) {
    m_iv = iv;
    m_iv_isSet = true;
}

bool OAIFileKey::is_iv_Set() const{
    return m_iv_isSet;
}

bool OAIFileKey::is_iv_Valid() const{
    return m_iv_isValid;
}

QString OAIFileKey::getKey() const {
    return m_key;
}
void OAIFileKey::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIFileKey::is_key_Set() const{
    return m_key_isSet;
}

bool OAIFileKey::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIFileKey::getTag() const {
    return m_tag;
}
void OAIFileKey::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIFileKey::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIFileKey::is_tag_Valid() const{
    return m_tag_isValid;
}

QString OAIFileKey::getVersion() const {
    return m_version;
}
void OAIFileKey::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIFileKey::is_version_Set() const{
    return m_version_isSet;
}

bool OAIFileKey::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIFileKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_iv_isValid && m_key_isValid && m_tag_isValid && m_version_isValid && true;
}

} // namespace OpenAPI
