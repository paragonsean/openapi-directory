/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigRoomRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigRoomRequest::OAIConfigRoomRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigRoomRequest::OAIConfigRoomRequest() {
    this->initializeModel();
}

OAIConfigRoomRequest::~OAIConfigRoomRequest() {}

void OAIConfigRoomRequest::initializeModel() {

    m_admin_group_ids_isSet = false;
    m_admin_group_ids_isValid = false;

    m_admin_ids_isSet = false;
    m_admin_ids_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_has_activities_log_isSet = false;
    m_has_activities_log_isValid = false;

    m_inherit_permissions_isSet = false;
    m_inherit_permissions_isValid = false;

    m_new_group_member_acceptance_isSet = false;
    m_new_group_member_acceptance_isValid = false;

    m_recycle_bin_retention_period_isSet = false;
    m_recycle_bin_retention_period_isValid = false;

    m_take_over_permissions_isSet = false;
    m_take_over_permissions_isValid = false;
}

void OAIConfigRoomRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigRoomRequest::fromJsonObject(QJsonObject json) {

    m_admin_group_ids_isValid = ::OpenAPI::fromJsonValue(m_admin_group_ids, json[QString("adminGroupIds")]);
    m_admin_group_ids_isSet = !json[QString("adminGroupIds")].isNull() && m_admin_group_ids_isValid;

    m_admin_ids_isValid = ::OpenAPI::fromJsonValue(m_admin_ids, json[QString("adminIds")]);
    m_admin_ids_isSet = !json[QString("adminIds")].isNull() && m_admin_ids_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_has_activities_log_isValid = ::OpenAPI::fromJsonValue(m_has_activities_log, json[QString("hasActivitiesLog")]);
    m_has_activities_log_isSet = !json[QString("hasActivitiesLog")].isNull() && m_has_activities_log_isValid;

    m_inherit_permissions_isValid = ::OpenAPI::fromJsonValue(m_inherit_permissions, json[QString("inheritPermissions")]);
    m_inherit_permissions_isSet = !json[QString("inheritPermissions")].isNull() && m_inherit_permissions_isValid;

    m_new_group_member_acceptance_isValid = ::OpenAPI::fromJsonValue(m_new_group_member_acceptance, json[QString("newGroupMemberAcceptance")]);
    m_new_group_member_acceptance_isSet = !json[QString("newGroupMemberAcceptance")].isNull() && m_new_group_member_acceptance_isValid;

    m_recycle_bin_retention_period_isValid = ::OpenAPI::fromJsonValue(m_recycle_bin_retention_period, json[QString("recycleBinRetentionPeriod")]);
    m_recycle_bin_retention_period_isSet = !json[QString("recycleBinRetentionPeriod")].isNull() && m_recycle_bin_retention_period_isValid;

    m_take_over_permissions_isValid = ::OpenAPI::fromJsonValue(m_take_over_permissions, json[QString("takeOverPermissions")]);
    m_take_over_permissions_isSet = !json[QString("takeOverPermissions")].isNull() && m_take_over_permissions_isValid;
}

QString OAIConfigRoomRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigRoomRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_group_ids.size() > 0) {
        obj.insert(QString("adminGroupIds"), ::OpenAPI::toJsonValue(m_admin_group_ids));
    }
    if (m_admin_ids.size() > 0) {
        obj.insert(QString("adminIds"), ::OpenAPI::toJsonValue(m_admin_ids));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_has_activities_log_isSet) {
        obj.insert(QString("hasActivitiesLog"), ::OpenAPI::toJsonValue(m_has_activities_log));
    }
    if (m_inherit_permissions_isSet) {
        obj.insert(QString("inheritPermissions"), ::OpenAPI::toJsonValue(m_inherit_permissions));
    }
    if (m_new_group_member_acceptance_isSet) {
        obj.insert(QString("newGroupMemberAcceptance"), ::OpenAPI::toJsonValue(m_new_group_member_acceptance));
    }
    if (m_recycle_bin_retention_period_isSet) {
        obj.insert(QString("recycleBinRetentionPeriod"), ::OpenAPI::toJsonValue(m_recycle_bin_retention_period));
    }
    if (m_take_over_permissions_isSet) {
        obj.insert(QString("takeOverPermissions"), ::OpenAPI::toJsonValue(m_take_over_permissions));
    }
    return obj;
}

QList<qint64> OAIConfigRoomRequest::getAdminGroupIds() const {
    return m_admin_group_ids;
}
void OAIConfigRoomRequest::setAdminGroupIds(const QList<qint64> &admin_group_ids) {
    m_admin_group_ids = admin_group_ids;
    m_admin_group_ids_isSet = true;
}

bool OAIConfigRoomRequest::is_admin_group_ids_Set() const{
    return m_admin_group_ids_isSet;
}

bool OAIConfigRoomRequest::is_admin_group_ids_Valid() const{
    return m_admin_group_ids_isValid;
}

QList<qint64> OAIConfigRoomRequest::getAdminIds() const {
    return m_admin_ids;
}
void OAIConfigRoomRequest::setAdminIds(const QList<qint64> &admin_ids) {
    m_admin_ids = admin_ids;
    m_admin_ids_isSet = true;
}

bool OAIConfigRoomRequest::is_admin_ids_Set() const{
    return m_admin_ids_isSet;
}

bool OAIConfigRoomRequest::is_admin_ids_Valid() const{
    return m_admin_ids_isValid;
}

qint32 OAIConfigRoomRequest::getClassification() const {
    return m_classification;
}
void OAIConfigRoomRequest::setClassification(const qint32 &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIConfigRoomRequest::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIConfigRoomRequest::is_classification_Valid() const{
    return m_classification_isValid;
}

bool OAIConfigRoomRequest::isHasActivitiesLog() const {
    return m_has_activities_log;
}
void OAIConfigRoomRequest::setHasActivitiesLog(const bool &has_activities_log) {
    m_has_activities_log = has_activities_log;
    m_has_activities_log_isSet = true;
}

bool OAIConfigRoomRequest::is_has_activities_log_Set() const{
    return m_has_activities_log_isSet;
}

bool OAIConfigRoomRequest::is_has_activities_log_Valid() const{
    return m_has_activities_log_isValid;
}

bool OAIConfigRoomRequest::isInheritPermissions() const {
    return m_inherit_permissions;
}
void OAIConfigRoomRequest::setInheritPermissions(const bool &inherit_permissions) {
    m_inherit_permissions = inherit_permissions;
    m_inherit_permissions_isSet = true;
}

bool OAIConfigRoomRequest::is_inherit_permissions_Set() const{
    return m_inherit_permissions_isSet;
}

bool OAIConfigRoomRequest::is_inherit_permissions_Valid() const{
    return m_inherit_permissions_isValid;
}

QString OAIConfigRoomRequest::getNewGroupMemberAcceptance() const {
    return m_new_group_member_acceptance;
}
void OAIConfigRoomRequest::setNewGroupMemberAcceptance(const QString &new_group_member_acceptance) {
    m_new_group_member_acceptance = new_group_member_acceptance;
    m_new_group_member_acceptance_isSet = true;
}

bool OAIConfigRoomRequest::is_new_group_member_acceptance_Set() const{
    return m_new_group_member_acceptance_isSet;
}

bool OAIConfigRoomRequest::is_new_group_member_acceptance_Valid() const{
    return m_new_group_member_acceptance_isValid;
}

qint32 OAIConfigRoomRequest::getRecycleBinRetentionPeriod() const {
    return m_recycle_bin_retention_period;
}
void OAIConfigRoomRequest::setRecycleBinRetentionPeriod(const qint32 &recycle_bin_retention_period) {
    m_recycle_bin_retention_period = recycle_bin_retention_period;
    m_recycle_bin_retention_period_isSet = true;
}

bool OAIConfigRoomRequest::is_recycle_bin_retention_period_Set() const{
    return m_recycle_bin_retention_period_isSet;
}

bool OAIConfigRoomRequest::is_recycle_bin_retention_period_Valid() const{
    return m_recycle_bin_retention_period_isValid;
}

bool OAIConfigRoomRequest::isTakeOverPermissions() const {
    return m_take_over_permissions;
}
void OAIConfigRoomRequest::setTakeOverPermissions(const bool &take_over_permissions) {
    m_take_over_permissions = take_over_permissions;
    m_take_over_permissions_isSet = true;
}

bool OAIConfigRoomRequest::is_take_over_permissions_Set() const{
    return m_take_over_permissions_isSet;
}

bool OAIConfigRoomRequest::is_take_over_permissions_Valid() const{
    return m_take_over_permissions_isValid;
}

bool OAIConfigRoomRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_group_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_admin_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_activities_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inherit_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_group_member_acceptance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recycle_bin_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_take_over_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigRoomRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
