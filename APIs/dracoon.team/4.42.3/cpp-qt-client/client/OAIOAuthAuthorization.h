/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOAuthAuthorization.h
 *
 * OAuth authorization
 */

#ifndef OAIOAuthAuthorization_H
#define OAIOAuthAuthorization_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOAuthAuthorization : public OAIObject {
public:
    OAIOAuthAuthorization();
    OAIOAuthAuthorization(QString json);
    ~OAIOAuthAuthorization() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientName() const;
    void setClientName(const QString &client_name);
    bool is_client_name_Set() const;
    bool is_client_name_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getExpiresAt() const;
    void setExpiresAt(const QDateTime &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    qint64 getId() const;
    void setId(const qint64 &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsCurrentAuthorization() const;
    void setIsCurrentAuthorization(const bool &is_current_authorization);
    bool is_is_current_authorization_Set() const;
    bool is_is_current_authorization_Valid() const;

    bool isIsStandard() const;
    void setIsStandard(const bool &is_standard);
    bool is_is_standard_Set() const;
    bool is_is_standard_Valid() const;

    QDateTime getUsedAt() const;
    void setUsedAt(const QDateTime &used_at);
    bool is_used_at_Set() const;
    bool is_used_at_Valid() const;

    QString getUserAgentCategory() const;
    void setUserAgentCategory(const QString &user_agent_category);
    bool is_user_agent_category_Set() const;
    bool is_user_agent_category_Valid() const;

    QString getUserAgentInfo() const;
    void setUserAgentInfo(const QString &user_agent_info);
    bool is_user_agent_info_Set() const;
    bool is_user_agent_info_Valid() const;

    QString getUserAgentOs() const;
    void setUserAgentOs(const QString &user_agent_os);
    bool is_user_agent_os_Set() const;
    bool is_user_agent_os_Valid() const;

    QString getUserAgentType() const;
    void setUserAgentType(const QString &user_agent_type);
    bool is_user_agent_type_Set() const;
    bool is_user_agent_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_name;
    bool m_client_name_isSet;
    bool m_client_name_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    qint64 m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_current_authorization;
    bool m_is_current_authorization_isSet;
    bool m_is_current_authorization_isValid;

    bool m_is_standard;
    bool m_is_standard_isSet;
    bool m_is_standard_isValid;

    QDateTime m_used_at;
    bool m_used_at_isSet;
    bool m_used_at_isValid;

    QString m_user_agent_category;
    bool m_user_agent_category_isSet;
    bool m_user_agent_category_isValid;

    QString m_user_agent_info;
    bool m_user_agent_info_isSet;
    bool m_user_agent_info_isValid;

    QString m_user_agent_os;
    bool m_user_agent_os_isSet;
    bool m_user_agent_os_isValid;

    QString m_user_agent_type;
    bool m_user_agent_type_isSet;
    bool m_user_agent_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOAuthAuthorization)

#endif // OAIOAuthAuthorization_H
