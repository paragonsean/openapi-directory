/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicUploadShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicUploadShare::OAIPublicUploadShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicUploadShare::OAIPublicUploadShare() {
    this->initializeModel();
}

OAIPublicUploadShare::~OAIPublicUploadShare() {}

void OAIPublicUploadShare::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_name_isSet = false;
    m_creator_name_isValid = false;

    m_creator_username_isSet = false;
    m_creator_username_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_is_protected_isSet = false;
    m_is_protected_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_remaining_size_isSet = false;
    m_remaining_size_isValid = false;

    m_remaining_slots_isSet = false;
    m_remaining_slots_isValid = false;

    m_show_uploaded_files_isSet = false;
    m_show_uploaded_files_isValid = false;

    m_uploaded_files_isSet = false;
    m_uploaded_files_isValid = false;

    m_user_user_public_key_list_isSet = false;
    m_user_user_public_key_list_isValid = false;
}

void OAIPublicUploadShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicUploadShare::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_creator_name_isValid = ::OpenAPI::fromJsonValue(m_creator_name, json[QString("creatorName")]);
    m_creator_name_isSet = !json[QString("creatorName")].isNull() && m_creator_name_isValid;

    m_creator_username_isValid = ::OpenAPI::fromJsonValue(m_creator_username, json[QString("creatorUsername")]);
    m_creator_username_isSet = !json[QString("creatorUsername")].isNull() && m_creator_username_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_is_protected_isValid = ::OpenAPI::fromJsonValue(m_is_protected, json[QString("isProtected")]);
    m_is_protected_isSet = !json[QString("isProtected")].isNull() && m_is_protected_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_remaining_size_isValid = ::OpenAPI::fromJsonValue(m_remaining_size, json[QString("remainingSize")]);
    m_remaining_size_isSet = !json[QString("remainingSize")].isNull() && m_remaining_size_isValid;

    m_remaining_slots_isValid = ::OpenAPI::fromJsonValue(m_remaining_slots, json[QString("remainingSlots")]);
    m_remaining_slots_isSet = !json[QString("remainingSlots")].isNull() && m_remaining_slots_isValid;

    m_show_uploaded_files_isValid = ::OpenAPI::fromJsonValue(m_show_uploaded_files, json[QString("showUploadedFiles")]);
    m_show_uploaded_files_isSet = !json[QString("showUploadedFiles")].isNull() && m_show_uploaded_files_isValid;

    m_uploaded_files_isValid = ::OpenAPI::fromJsonValue(m_uploaded_files, json[QString("uploadedFiles")]);
    m_uploaded_files_isSet = !json[QString("uploadedFiles")].isNull() && m_uploaded_files_isValid;

    m_user_user_public_key_list_isValid = ::OpenAPI::fromJsonValue(m_user_user_public_key_list, json[QString("userUserPublicKeyList")]);
    m_user_user_public_key_list_isSet = !json[QString("userUserPublicKeyList")].isNull() && m_user_user_public_key_list_isValid;
}

QString OAIPublicUploadShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicUploadShare::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_name_isSet) {
        obj.insert(QString("creatorName"), ::OpenAPI::toJsonValue(m_creator_name));
    }
    if (m_creator_username_isSet) {
        obj.insert(QString("creatorUsername"), ::OpenAPI::toJsonValue(m_creator_username));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_is_protected_isSet) {
        obj.insert(QString("isProtected"), ::OpenAPI::toJsonValue(m_is_protected));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_remaining_size_isSet) {
        obj.insert(QString("remainingSize"), ::OpenAPI::toJsonValue(m_remaining_size));
    }
    if (m_remaining_slots_isSet) {
        obj.insert(QString("remainingSlots"), ::OpenAPI::toJsonValue(m_remaining_slots));
    }
    if (m_show_uploaded_files_isSet) {
        obj.insert(QString("showUploadedFiles"), ::OpenAPI::toJsonValue(m_show_uploaded_files));
    }
    if (m_uploaded_files.size() > 0) {
        obj.insert(QString("uploadedFiles"), ::OpenAPI::toJsonValue(m_uploaded_files));
    }
    if (m_user_user_public_key_list.isSet()) {
        obj.insert(QString("userUserPublicKeyList"), ::OpenAPI::toJsonValue(m_user_user_public_key_list));
    }
    return obj;
}

QDateTime OAIPublicUploadShare::getCreatedAt() const {
    return m_created_at;
}
void OAIPublicUploadShare::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPublicUploadShare::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPublicUploadShare::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPublicUploadShare::getCreatorName() const {
    return m_creator_name;
}
void OAIPublicUploadShare::setCreatorName(const QString &creator_name) {
    m_creator_name = creator_name;
    m_creator_name_isSet = true;
}

bool OAIPublicUploadShare::is_creator_name_Set() const{
    return m_creator_name_isSet;
}

bool OAIPublicUploadShare::is_creator_name_Valid() const{
    return m_creator_name_isValid;
}

QString OAIPublicUploadShare::getCreatorUsername() const {
    return m_creator_username;
}
void OAIPublicUploadShare::setCreatorUsername(const QString &creator_username) {
    m_creator_username = creator_username;
    m_creator_username_isSet = true;
}

bool OAIPublicUploadShare::is_creator_username_Set() const{
    return m_creator_username_isSet;
}

bool OAIPublicUploadShare::is_creator_username_Valid() const{
    return m_creator_username_isValid;
}

QDateTime OAIPublicUploadShare::getExpireAt() const {
    return m_expire_at;
}
void OAIPublicUploadShare::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIPublicUploadShare::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIPublicUploadShare::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

bool OAIPublicUploadShare::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIPublicUploadShare::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIPublicUploadShare::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIPublicUploadShare::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAIPublicUploadShare::isIsProtected() const {
    return m_is_protected;
}
void OAIPublicUploadShare::setIsProtected(const bool &is_protected) {
    m_is_protected = is_protected;
    m_is_protected_isSet = true;
}

bool OAIPublicUploadShare::is_is_protected_Set() const{
    return m_is_protected_isSet;
}

bool OAIPublicUploadShare::is_is_protected_Valid() const{
    return m_is_protected_isValid;
}

QString OAIPublicUploadShare::getName() const {
    return m_name;
}
void OAIPublicUploadShare::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublicUploadShare::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublicUploadShare::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublicUploadShare::getNotes() const {
    return m_notes;
}
void OAIPublicUploadShare::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPublicUploadShare::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPublicUploadShare::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAIPublicUploadShare::getRemainingSize() const {
    return m_remaining_size;
}
void OAIPublicUploadShare::setRemainingSize(const qint64 &remaining_size) {
    m_remaining_size = remaining_size;
    m_remaining_size_isSet = true;
}

bool OAIPublicUploadShare::is_remaining_size_Set() const{
    return m_remaining_size_isSet;
}

bool OAIPublicUploadShare::is_remaining_size_Valid() const{
    return m_remaining_size_isValid;
}

qint32 OAIPublicUploadShare::getRemainingSlots() const {
    return m_remaining_slots;
}
void OAIPublicUploadShare::setRemainingSlots(const qint32 &remaining_slots) {
    m_remaining_slots = remaining_slots;
    m_remaining_slots_isSet = true;
}

bool OAIPublicUploadShare::is_remaining_slots_Set() const{
    return m_remaining_slots_isSet;
}

bool OAIPublicUploadShare::is_remaining_slots_Valid() const{
    return m_remaining_slots_isValid;
}

bool OAIPublicUploadShare::isShowUploadedFiles() const {
    return m_show_uploaded_files;
}
void OAIPublicUploadShare::setShowUploadedFiles(const bool &show_uploaded_files) {
    m_show_uploaded_files = show_uploaded_files;
    m_show_uploaded_files_isSet = true;
}

bool OAIPublicUploadShare::is_show_uploaded_files_Set() const{
    return m_show_uploaded_files_isSet;
}

bool OAIPublicUploadShare::is_show_uploaded_files_Valid() const{
    return m_show_uploaded_files_isValid;
}

QList<OAIPublicUploadedFileData> OAIPublicUploadShare::getUploadedFiles() const {
    return m_uploaded_files;
}
void OAIPublicUploadShare::setUploadedFiles(const QList<OAIPublicUploadedFileData> &uploaded_files) {
    m_uploaded_files = uploaded_files;
    m_uploaded_files_isSet = true;
}

bool OAIPublicUploadShare::is_uploaded_files_Set() const{
    return m_uploaded_files_isSet;
}

bool OAIPublicUploadShare::is_uploaded_files_Valid() const{
    return m_uploaded_files_isValid;
}

OAIUserUserPublicKeyList OAIPublicUploadShare::getUserUserPublicKeyList() const {
    return m_user_user_public_key_list;
}
void OAIPublicUploadShare::setUserUserPublicKeyList(const OAIUserUserPublicKeyList &user_user_public_key_list) {
    m_user_user_public_key_list = user_user_public_key_list;
    m_user_user_public_key_list_isSet = true;
}

bool OAIPublicUploadShare::is_user_user_public_key_list_Set() const{
    return m_user_user_public_key_list_isSet;
}

bool OAIPublicUploadShare::is_user_user_public_key_list_Valid() const{
    return m_user_user_public_key_list_isValid;
}

bool OAIPublicUploadShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_slots_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_uploaded_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_user_public_key_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicUploadShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_creator_name_isValid && m_is_protected_isValid && true;
}

} // namespace OpenAPI
