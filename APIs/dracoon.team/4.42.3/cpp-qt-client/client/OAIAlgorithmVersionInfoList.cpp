/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlgorithmVersionInfoList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlgorithmVersionInfoList::OAIAlgorithmVersionInfoList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlgorithmVersionInfoList::OAIAlgorithmVersionInfoList() {
    this->initializeModel();
}

OAIAlgorithmVersionInfoList::~OAIAlgorithmVersionInfoList() {}

void OAIAlgorithmVersionInfoList::initializeModel() {

    m_file_key_algorithms_isSet = false;
    m_file_key_algorithms_isValid = false;

    m_key_pair_algorithms_isSet = false;
    m_key_pair_algorithms_isValid = false;
}

void OAIAlgorithmVersionInfoList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlgorithmVersionInfoList::fromJsonObject(QJsonObject json) {

    m_file_key_algorithms_isValid = ::OpenAPI::fromJsonValue(m_file_key_algorithms, json[QString("fileKeyAlgorithms")]);
    m_file_key_algorithms_isSet = !json[QString("fileKeyAlgorithms")].isNull() && m_file_key_algorithms_isValid;

    m_key_pair_algorithms_isValid = ::OpenAPI::fromJsonValue(m_key_pair_algorithms, json[QString("keyPairAlgorithms")]);
    m_key_pair_algorithms_isSet = !json[QString("keyPairAlgorithms")].isNull() && m_key_pair_algorithms_isValid;
}

QString OAIAlgorithmVersionInfoList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlgorithmVersionInfoList::asJsonObject() const {
    QJsonObject obj;
    if (m_file_key_algorithms.size() > 0) {
        obj.insert(QString("fileKeyAlgorithms"), ::OpenAPI::toJsonValue(m_file_key_algorithms));
    }
    if (m_key_pair_algorithms.size() > 0) {
        obj.insert(QString("keyPairAlgorithms"), ::OpenAPI::toJsonValue(m_key_pair_algorithms));
    }
    return obj;
}

QList<OAIAlgorithmVersionInfo> OAIAlgorithmVersionInfoList::getFileKeyAlgorithms() const {
    return m_file_key_algorithms;
}
void OAIAlgorithmVersionInfoList::setFileKeyAlgorithms(const QList<OAIAlgorithmVersionInfo> &file_key_algorithms) {
    m_file_key_algorithms = file_key_algorithms;
    m_file_key_algorithms_isSet = true;
}

bool OAIAlgorithmVersionInfoList::is_file_key_algorithms_Set() const{
    return m_file_key_algorithms_isSet;
}

bool OAIAlgorithmVersionInfoList::is_file_key_algorithms_Valid() const{
    return m_file_key_algorithms_isValid;
}

QList<OAIAlgorithmVersionInfo> OAIAlgorithmVersionInfoList::getKeyPairAlgorithms() const {
    return m_key_pair_algorithms;
}
void OAIAlgorithmVersionInfoList::setKeyPairAlgorithms(const QList<OAIAlgorithmVersionInfo> &key_pair_algorithms) {
    m_key_pair_algorithms = key_pair_algorithms;
    m_key_pair_algorithms_isSet = true;
}

bool OAIAlgorithmVersionInfoList::is_key_pair_algorithms_Set() const{
    return m_key_pair_algorithms_isSet;
}

bool OAIAlgorithmVersionInfoList::is_key_pair_algorithms_Valid() const{
    return m_key_pair_algorithms_isValid;
}

bool OAIAlgorithmVersionInfoList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_key_algorithms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_pair_algorithms.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlgorithmVersionInfoList::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_key_algorithms_isValid && m_key_pair_algorithms_isValid && true;
}

} // namespace OpenAPI
