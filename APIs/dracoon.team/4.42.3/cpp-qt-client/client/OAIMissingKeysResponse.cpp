/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMissingKeysResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMissingKeysResponse::OAIMissingKeysResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMissingKeysResponse::OAIMissingKeysResponse() {
    this->initializeModel();
}

OAIMissingKeysResponse::~OAIMissingKeysResponse() {}

void OAIMissingKeysResponse::initializeModel() {

    m_files_isSet = false;
    m_files_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIMissingKeysResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMissingKeysResponse::fromJsonObject(QJsonObject json) {

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIMissingKeysResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMissingKeysResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QList<OAIFileFileKeys> OAIMissingKeysResponse::getFiles() const {
    return m_files;
}
void OAIMissingKeysResponse::setFiles(const QList<OAIFileFileKeys> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIMissingKeysResponse::is_files_Set() const{
    return m_files_isSet;
}

bool OAIMissingKeysResponse::is_files_Valid() const{
    return m_files_isValid;
}

QList<OAIUserIdFileIdItem> OAIMissingKeysResponse::getItems() const {
    return m_items;
}
void OAIMissingKeysResponse::setItems(const QList<OAIUserIdFileIdItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIMissingKeysResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIMissingKeysResponse::is_items_Valid() const{
    return m_items_isValid;
}

OAIRange OAIMissingKeysResponse::getRange() const {
    return m_range;
}
void OAIMissingKeysResponse::setRange(const OAIRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIMissingKeysResponse::is_range_Set() const{
    return m_range_isSet;
}

bool OAIMissingKeysResponse::is_range_Valid() const{
    return m_range_isValid;
}

QList<OAIUserUserPublicKey> OAIMissingKeysResponse::getUsers() const {
    return m_users;
}
void OAIMissingKeysResponse::setUsers(const QList<OAIUserUserPublicKey> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIMissingKeysResponse::is_users_Set() const{
    return m_users_isSet;
}

bool OAIMissingKeysResponse::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIMissingKeysResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMissingKeysResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
