/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_changed_isSet = false;
    m_is_changed_isValid = false;

    m_is_deleted_isSet = false;
    m_is_deleted_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_changed_isValid = ::OpenAPI::fromJsonValue(m_is_changed, json[QString("isChanged")]);
    m_is_changed_isSet = !json[QString("isChanged")].isNull() && m_is_changed_isValid;

    m_is_deleted_isValid = ::OpenAPI::fromJsonValue(m_is_deleted, json[QString("isDeleted")]);
    m_is_deleted_isSet = !json[QString("isDeleted")].isNull() && m_is_deleted_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_changed_isSet) {
        obj.insert(QString("isChanged"), ::OpenAPI::toJsonValue(m_is_changed));
    }
    if (m_is_deleted_isSet) {
        obj.insert(QString("isDeleted"), ::OpenAPI::toJsonValue(m_is_deleted));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QDateTime OAIComment::getCreatedAt() const {
    return m_created_at;
}
void OAIComment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIComment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIComment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAIComment::getCreatedBy() const {
    return m_created_by;
}
void OAIComment::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIComment::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIComment::is_created_by_Valid() const{
    return m_created_by_isValid;
}

qint64 OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIComment::isIsChanged() const {
    return m_is_changed;
}
void OAIComment::setIsChanged(const bool &is_changed) {
    m_is_changed = is_changed;
    m_is_changed_isSet = true;
}

bool OAIComment::is_is_changed_Set() const{
    return m_is_changed_isSet;
}

bool OAIComment::is_is_changed_Valid() const{
    return m_is_changed_isValid;
}

bool OAIComment::isIsDeleted() const {
    return m_is_deleted;
}
void OAIComment::setIsDeleted(const bool &is_deleted) {
    m_is_deleted = is_deleted;
    m_is_deleted_isSet = true;
}

bool OAIComment::is_is_deleted_Set() const{
    return m_is_deleted_isSet;
}

bool OAIComment::is_is_deleted_Valid() const{
    return m_is_deleted_isValid;
}

QString OAIComment::getText() const {
    return m_text;
}
void OAIComment::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIComment::is_text_Set() const{
    return m_text_isSet;
}

bool OAIComment::is_text_Valid() const{
    return m_text_isValid;
}

QDateTime OAIComment::getUpdatedAt() const {
    return m_updated_at;
}
void OAIComment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIComment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIComment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAIComment::getUpdatedBy() const {
    return m_updated_by;
}
void OAIComment::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIComment::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIComment::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_created_by_isValid && m_id_isValid && m_is_changed_isValid && m_is_deleted_isValid && m_text_isValid && m_updated_at_isValid && m_updated_by_isValid && true;
}

} // namespace OpenAPI
