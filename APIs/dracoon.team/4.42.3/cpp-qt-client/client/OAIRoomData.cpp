/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoomData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoomData::OAIRoomData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoomData::OAIRoomData() {
    this->initializeModel();
}

OAIRoomData::~OAIRoomData() {}

void OAIRoomData::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_cnt_download_shares_isSet = false;
    m_cnt_download_shares_isValid = false;

    m_cnt_upload_shares_isSet = false;
    m_cnt_upload_shares_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_has_recycle_bin_isSet = false;
    m_has_recycle_bin_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_is_favorite_isSet = false;
    m_is_favorite_isValid = false;

    m_is_granted_isSet = false;
    m_is_granted_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_quota_isSet = false;
    m_quota_isValid = false;

    m_recycle_bin_retention_period_isSet = false;
    m_recycle_bin_retention_period_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIRoomData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoomData::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_cnt_download_shares_isValid = ::OpenAPI::fromJsonValue(m_cnt_download_shares, json[QString("cntDownloadShares")]);
    m_cnt_download_shares_isSet = !json[QString("cntDownloadShares")].isNull() && m_cnt_download_shares_isValid;

    m_cnt_upload_shares_isValid = ::OpenAPI::fromJsonValue(m_cnt_upload_shares, json[QString("cntUploadShares")]);
    m_cnt_upload_shares_isSet = !json[QString("cntUploadShares")].isNull() && m_cnt_upload_shares_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_has_recycle_bin_isValid = ::OpenAPI::fromJsonValue(m_has_recycle_bin, json[QString("hasRecycleBin")]);
    m_has_recycle_bin_isSet = !json[QString("hasRecycleBin")].isNull() && m_has_recycle_bin_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_is_favorite_isValid = ::OpenAPI::fromJsonValue(m_is_favorite, json[QString("isFavorite")]);
    m_is_favorite_isSet = !json[QString("isFavorite")].isNull() && m_is_favorite_isValid;

    m_is_granted_isValid = ::OpenAPI::fromJsonValue(m_is_granted, json[QString("isGranted")]);
    m_is_granted_isSet = !json[QString("isGranted")].isNull() && m_is_granted_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_quota_isValid = ::OpenAPI::fromJsonValue(m_quota, json[QString("quota")]);
    m_quota_isSet = !json[QString("quota")].isNull() && m_quota_isValid;

    m_recycle_bin_retention_period_isValid = ::OpenAPI::fromJsonValue(m_recycle_bin_retention_period, json[QString("recycleBinRetentionPeriod")]);
    m_recycle_bin_retention_period_isSet = !json[QString("recycleBinRetentionPeriod")].isNull() && m_recycle_bin_retention_period_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIRoomData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoomData::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_cnt_download_shares_isSet) {
        obj.insert(QString("cntDownloadShares"), ::OpenAPI::toJsonValue(m_cnt_download_shares));
    }
    if (m_cnt_upload_shares_isSet) {
        obj.insert(QString("cntUploadShares"), ::OpenAPI::toJsonValue(m_cnt_upload_shares));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_has_recycle_bin_isSet) {
        obj.insert(QString("hasRecycleBin"), ::OpenAPI::toJsonValue(m_has_recycle_bin));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_is_favorite_isSet) {
        obj.insert(QString("isFavorite"), ::OpenAPI::toJsonValue(m_is_favorite));
    }
    if (m_is_granted_isSet) {
        obj.insert(QString("isGranted"), ::OpenAPI::toJsonValue(m_is_granted));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_quota_isSet) {
        obj.insert(QString("quota"), ::OpenAPI::toJsonValue(m_quota));
    }
    if (m_recycle_bin_retention_period_isSet) {
        obj.insert(QString("recycleBinRetentionPeriod"), ::OpenAPI::toJsonValue(m_recycle_bin_retention_period));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QList<OAIRoomData> OAIRoomData::getChildren() const {
    return m_children;
}
void OAIRoomData::setChildren(const QList<OAIRoomData> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIRoomData::is_children_Set() const{
    return m_children_isSet;
}

bool OAIRoomData::is_children_Valid() const{
    return m_children_isValid;
}

qint32 OAIRoomData::getCntDownloadShares() const {
    return m_cnt_download_shares;
}
void OAIRoomData::setCntDownloadShares(const qint32 &cnt_download_shares) {
    m_cnt_download_shares = cnt_download_shares;
    m_cnt_download_shares_isSet = true;
}

bool OAIRoomData::is_cnt_download_shares_Set() const{
    return m_cnt_download_shares_isSet;
}

bool OAIRoomData::is_cnt_download_shares_Valid() const{
    return m_cnt_download_shares_isValid;
}

qint32 OAIRoomData::getCntUploadShares() const {
    return m_cnt_upload_shares;
}
void OAIRoomData::setCntUploadShares(const qint32 &cnt_upload_shares) {
    m_cnt_upload_shares = cnt_upload_shares;
    m_cnt_upload_shares_isSet = true;
}

bool OAIRoomData::is_cnt_upload_shares_Set() const{
    return m_cnt_upload_shares_isSet;
}

bool OAIRoomData::is_cnt_upload_shares_Valid() const{
    return m_cnt_upload_shares_isValid;
}

QDateTime OAIRoomData::getCreatedAt() const {
    return m_created_at;
}
void OAIRoomData::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRoomData::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRoomData::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAIRoomData::getCreatedBy() const {
    return m_created_by;
}
void OAIRoomData::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIRoomData::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIRoomData::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIRoomData::isHasRecycleBin() const {
    return m_has_recycle_bin;
}
void OAIRoomData::setHasRecycleBin(const bool &has_recycle_bin) {
    m_has_recycle_bin = has_recycle_bin;
    m_has_recycle_bin_isSet = true;
}

bool OAIRoomData::is_has_recycle_bin_Set() const{
    return m_has_recycle_bin_isSet;
}

bool OAIRoomData::is_has_recycle_bin_Valid() const{
    return m_has_recycle_bin_isValid;
}

qint64 OAIRoomData::getId() const {
    return m_id;
}
void OAIRoomData::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRoomData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRoomData::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRoomData::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIRoomData::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIRoomData::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIRoomData::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAIRoomData::isIsFavorite() const {
    return m_is_favorite;
}
void OAIRoomData::setIsFavorite(const bool &is_favorite) {
    m_is_favorite = is_favorite;
    m_is_favorite_isSet = true;
}

bool OAIRoomData::is_is_favorite_Set() const{
    return m_is_favorite_isSet;
}

bool OAIRoomData::is_is_favorite_Valid() const{
    return m_is_favorite_isValid;
}

bool OAIRoomData::isIsGranted() const {
    return m_is_granted;
}
void OAIRoomData::setIsGranted(const bool &is_granted) {
    m_is_granted = is_granted;
    m_is_granted_isSet = true;
}

bool OAIRoomData::is_is_granted_Set() const{
    return m_is_granted_isSet;
}

bool OAIRoomData::is_is_granted_Valid() const{
    return m_is_granted_isValid;
}

QString OAIRoomData::getName() const {
    return m_name;
}
void OAIRoomData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoomData::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoomData::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIRoomData::getParentId() const {
    return m_parent_id;
}
void OAIRoomData::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIRoomData::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIRoomData::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAINodePermissions OAIRoomData::getPermissions() const {
    return m_permissions;
}
void OAIRoomData::setPermissions(const OAINodePermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIRoomData::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIRoomData::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint64 OAIRoomData::getQuota() const {
    return m_quota;
}
void OAIRoomData::setQuota(const qint64 &quota) {
    m_quota = quota;
    m_quota_isSet = true;
}

bool OAIRoomData::is_quota_Set() const{
    return m_quota_isSet;
}

bool OAIRoomData::is_quota_Valid() const{
    return m_quota_isValid;
}

qint32 OAIRoomData::getRecycleBinRetentionPeriod() const {
    return m_recycle_bin_retention_period;
}
void OAIRoomData::setRecycleBinRetentionPeriod(const qint32 &recycle_bin_retention_period) {
    m_recycle_bin_retention_period = recycle_bin_retention_period;
    m_recycle_bin_retention_period_isSet = true;
}

bool OAIRoomData::is_recycle_bin_retention_period_Set() const{
    return m_recycle_bin_retention_period_isSet;
}

bool OAIRoomData::is_recycle_bin_retention_period_Valid() const{
    return m_recycle_bin_retention_period_isValid;
}

qint64 OAIRoomData::getSize() const {
    return m_size;
}
void OAIRoomData::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRoomData::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRoomData::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRoomData::getType() const {
    return m_type;
}
void OAIRoomData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoomData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoomData::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIRoomData::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRoomData::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRoomData::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRoomData::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAIRoomData::getUpdatedBy() const {
    return m_updated_by;
}
void OAIRoomData::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIRoomData::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIRoomData::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIRoomData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_download_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_upload_shares_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_recycle_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_favorite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_granted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recycle_bin_retention_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoomData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_has_recycle_bin_isValid && m_id_isValid && m_is_encrypted_isValid && m_is_granted_isValid && m_name_isValid && m_recycle_bin_retention_period_isValid && true;
}

} // namespace OpenAPI
