/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProvisioningApi_H
#define OAI_OAIProvisioningApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributesResponse.h"
#include "OAICreateWebhookRequest.h"
#include "OAICustomer.h"
#include "OAICustomerAttributes.h"
#include "OAICustomerList.h"
#include "OAIErrorResponse.h"
#include "OAIEventTypeList.h"
#include "OAINewCustomerRequest.h"
#include "OAINewCustomerResponse.h"
#include "OAIResetPassword_400_response.h"
#include "OAIUpdateCustomerRequest.h"
#include "OAIUpdateCustomerResponse.h"
#include "OAIUpdateWebhookRequest.h"
#include "OAIUserList.h"
#include "OAIWebhook.h"
#include "OAIWebhookList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProvisioningApi : public QObject {
    Q_OBJECT

public:
    OAIProvisioningApi(const int timeOut = 0);
    ~OAIProvisioningApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_new_customer_request OAINewCustomerRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void createCustomer(const OAINewCustomerRequest &oai_new_customer_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_webhook_request OAICreateWebhookRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void createTenantWebhook(const OAICreateWebhookRequest &oai_create_webhook_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void removeCustomer(const qint64 &customer_id, const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  key QString [required]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void removeCustomerAttribute(const qint64 &customer_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void removeTenantWebhook(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  include_attributes bool [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestCustomer(const qint64 &customer_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_attributes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestCustomerAttributes(const qint64 &customer_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_attributes bool [optional]
    * @param[in]  include_roles bool [optional]
    * @param[in]  include_manageable_rooms bool [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestCustomerUsers(const qint64 &customer_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_attributes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_manageable_rooms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_attributes bool [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestCustomers(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_attributes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestListOfEventTypesForTenant(const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestListOfTenantWebhooks(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void requestTenantWebhook(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void resetTenantWebhookLifetime(const qint64 &webhook_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_customer_attributes OAICustomerAttributes [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void setCustomerAttributes(const qint64 &customer_id, const OAICustomerAttributes &oai_customer_attributes, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_update_customer_request OAIUpdateCustomerRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void updateCustomer(const qint64 &customer_id, const OAIUpdateCustomerRequest &oai_update_customer_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer_id qint64 [required]
    * @param[in]  oai_customer_attributes OAICustomerAttributes [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void updateCustomerAttributes(const qint64 &customer_id, const OAICustomerAttributes &oai_customer_attributes, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id qint64 [required]
    * @param[in]  oai_update_webhook_request OAIUpdateWebhookRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_service_token QString [optional]
    */
    virtual void updateTenantWebhook(const qint64 &webhook_id, const OAIUpdateWebhookRequest &oai_update_webhook_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_service_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCustomerCallback(OAIHttpRequestWorker *worker);
    void createTenantWebhookCallback(OAIHttpRequestWorker *worker);
    void removeCustomerCallback(OAIHttpRequestWorker *worker);
    void removeCustomerAttributeCallback(OAIHttpRequestWorker *worker);
    void removeTenantWebhookCallback(OAIHttpRequestWorker *worker);
    void requestCustomerCallback(OAIHttpRequestWorker *worker);
    void requestCustomerAttributesCallback(OAIHttpRequestWorker *worker);
    void requestCustomerUsersCallback(OAIHttpRequestWorker *worker);
    void requestCustomersCallback(OAIHttpRequestWorker *worker);
    void requestListOfEventTypesForTenantCallback(OAIHttpRequestWorker *worker);
    void requestListOfTenantWebhooksCallback(OAIHttpRequestWorker *worker);
    void requestTenantWebhookCallback(OAIHttpRequestWorker *worker);
    void resetTenantWebhookLifetimeCallback(OAIHttpRequestWorker *worker);
    void setCustomerAttributesCallback(OAIHttpRequestWorker *worker);
    void updateCustomerCallback(OAIHttpRequestWorker *worker);
    void updateCustomerAttributesCallback(OAIHttpRequestWorker *worker);
    void updateTenantWebhookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCustomerSignal(OAINewCustomerResponse summary);
    void createTenantWebhookSignal(OAIWebhook summary);
    void removeCustomerSignal();
    void removeCustomerAttributeSignal();
    void removeTenantWebhookSignal();
    void requestCustomerSignal(OAICustomer summary);
    void requestCustomerAttributesSignal(OAIAttributesResponse summary);
    void requestCustomerUsersSignal(OAIUserList summary);
    void requestCustomersSignal(OAICustomerList summary);
    void requestListOfEventTypesForTenantSignal(OAIEventTypeList summary);
    void requestListOfTenantWebhooksSignal(OAIWebhookList summary);
    void requestTenantWebhookSignal(OAIWebhook summary);
    void resetTenantWebhookLifetimeSignal(OAIWebhook summary);
    void setCustomerAttributesSignal(OAICustomer summary);
    void updateCustomerSignal(OAIUpdateCustomerResponse summary);
    void updateCustomerAttributesSignal(OAICustomer summary);
    void updateTenantWebhookSignal(OAIWebhook summary);


    void createCustomerSignalFull(OAIHttpRequestWorker *worker, OAINewCustomerResponse summary);
    void createTenantWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void removeCustomerSignalFull(OAIHttpRequestWorker *worker);
    void removeCustomerAttributeSignalFull(OAIHttpRequestWorker *worker);
    void removeTenantWebhookSignalFull(OAIHttpRequestWorker *worker);
    void requestCustomerSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void requestCustomerAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAttributesResponse summary);
    void requestCustomerUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void requestCustomersSignalFull(OAIHttpRequestWorker *worker, OAICustomerList summary);
    void requestListOfEventTypesForTenantSignalFull(OAIHttpRequestWorker *worker, OAIEventTypeList summary);
    void requestListOfTenantWebhooksSignalFull(OAIHttpRequestWorker *worker, OAIWebhookList summary);
    void requestTenantWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void resetTenantWebhookLifetimeSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);
    void setCustomerAttributesSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void updateCustomerSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCustomerResponse summary);
    void updateCustomerAttributesSignalFull(OAIHttpRequestWorker *worker, OAICustomer summary);
    void updateTenantWebhookSignalFull(OAIHttpRequestWorker *worker, OAIWebhook summary);

    Q_DECL_DEPRECATED_X("Use createCustomerSignalError() instead")
    void createCustomerSignalE(OAINewCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalError(OAINewCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTenantWebhookSignalError() instead")
    void createTenantWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTenantWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomerSignalError() instead")
    void removeCustomerSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomerSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomerAttributeSignalError() instead")
    void removeCustomerAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomerAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTenantWebhookSignalError() instead")
    void removeTenantWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeTenantWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerSignalError() instead")
    void requestCustomerSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerAttributesSignalError() instead")
    void requestCustomerAttributesSignalE(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerAttributesSignalError(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerUsersSignalError() instead")
    void requestCustomerUsersSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerUsersSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomersSignalError() instead")
    void requestCustomersSignalE(OAICustomerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomersSignalError(OAICustomerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfEventTypesForTenantSignalError() instead")
    void requestListOfEventTypesForTenantSignalE(OAIEventTypeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfEventTypesForTenantSignalError(OAIEventTypeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfTenantWebhooksSignalError() instead")
    void requestListOfTenantWebhooksSignalE(OAIWebhookList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfTenantWebhooksSignalError(OAIWebhookList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestTenantWebhookSignalError() instead")
    void requestTenantWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestTenantWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTenantWebhookLifetimeSignalError() instead")
    void resetTenantWebhookLifetimeSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTenantWebhookLifetimeSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCustomerAttributesSignalError() instead")
    void setCustomerAttributesSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setCustomerAttributesSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerSignalError() instead")
    void updateCustomerSignalE(OAIUpdateCustomerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerSignalError(OAIUpdateCustomerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerAttributesSignalError() instead")
    void updateCustomerAttributesSignalE(OAICustomer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerAttributesSignalError(OAICustomer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTenantWebhookSignalError() instead")
    void updateTenantWebhookSignalE(OAIWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTenantWebhookSignalError(OAIWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCustomerSignalErrorFull() instead")
    void createCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTenantWebhookSignalErrorFull() instead")
    void createTenantWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTenantWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomerSignalErrorFull() instead")
    void removeCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeCustomerAttributeSignalErrorFull() instead")
    void removeCustomerAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeCustomerAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTenantWebhookSignalErrorFull() instead")
    void removeTenantWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTenantWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerSignalErrorFull() instead")
    void requestCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerAttributesSignalErrorFull() instead")
    void requestCustomerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomerUsersSignalErrorFull() instead")
    void requestCustomerUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomerUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestCustomersSignalErrorFull() instead")
    void requestCustomersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestCustomersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfEventTypesForTenantSignalErrorFull() instead")
    void requestListOfEventTypesForTenantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfEventTypesForTenantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfTenantWebhooksSignalErrorFull() instead")
    void requestListOfTenantWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfTenantWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestTenantWebhookSignalErrorFull() instead")
    void requestTenantWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestTenantWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetTenantWebhookLifetimeSignalErrorFull() instead")
    void resetTenantWebhookLifetimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetTenantWebhookLifetimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setCustomerAttributesSignalErrorFull() instead")
    void setCustomerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setCustomerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerSignalErrorFull() instead")
    void updateCustomerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCustomerAttributesSignalErrorFull() instead")
    void updateCustomerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCustomerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTenantWebhookSignalErrorFull() instead")
    void updateTenantWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTenantWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
