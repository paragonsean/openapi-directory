/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublicDownloadShare.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublicDownloadShare::OAIPublicDownloadShare(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublicDownloadShare::OAIPublicDownloadShare() {
    this->initializeModel();
}

OAIPublicDownloadShare::~OAIPublicDownloadShare() {}

void OAIPublicDownloadShare::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creator_name_isSet = false;
    m_creator_name_isValid = false;

    m_creator_username_isSet = false;
    m_creator_username_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_file_key_isSet = false;
    m_file_key_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_has_download_limit_isSet = false;
    m_has_download_limit_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_is_protected_isSet = false;
    m_is_protected_isValid = false;

    m_limit_reached_isSet = false;
    m_limit_reached_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_private_key_container_isSet = false;
    m_private_key_container_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAIPublicDownloadShare::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublicDownloadShare::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_creator_name_isValid = ::OpenAPI::fromJsonValue(m_creator_name, json[QString("creatorName")]);
    m_creator_name_isSet = !json[QString("creatorName")].isNull() && m_creator_name_isValid;

    m_creator_username_isValid = ::OpenAPI::fromJsonValue(m_creator_username, json[QString("creatorUsername")]);
    m_creator_username_isSet = !json[QString("creatorUsername")].isNull() && m_creator_username_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_file_key_isValid = ::OpenAPI::fromJsonValue(m_file_key, json[QString("fileKey")]);
    m_file_key_isSet = !json[QString("fileKey")].isNull() && m_file_key_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_has_download_limit_isValid = ::OpenAPI::fromJsonValue(m_has_download_limit, json[QString("hasDownloadLimit")]);
    m_has_download_limit_isSet = !json[QString("hasDownloadLimit")].isNull() && m_has_download_limit_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_is_protected_isValid = ::OpenAPI::fromJsonValue(m_is_protected, json[QString("isProtected")]);
    m_is_protected_isSet = !json[QString("isProtected")].isNull() && m_is_protected_isValid;

    m_limit_reached_isValid = ::OpenAPI::fromJsonValue(m_limit_reached, json[QString("limitReached")]);
    m_limit_reached_isSet = !json[QString("limitReached")].isNull() && m_limit_reached_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_private_key_container_isValid = ::OpenAPI::fromJsonValue(m_private_key_container, json[QString("privateKeyContainer")]);
    m_private_key_container_isSet = !json[QString("privateKeyContainer")].isNull() && m_private_key_container_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAIPublicDownloadShare::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublicDownloadShare::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creator_name_isSet) {
        obj.insert(QString("creatorName"), ::OpenAPI::toJsonValue(m_creator_name));
    }
    if (m_creator_username_isSet) {
        obj.insert(QString("creatorUsername"), ::OpenAPI::toJsonValue(m_creator_username));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_file_key.isSet()) {
        obj.insert(QString("fileKey"), ::OpenAPI::toJsonValue(m_file_key));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_has_download_limit_isSet) {
        obj.insert(QString("hasDownloadLimit"), ::OpenAPI::toJsonValue(m_has_download_limit));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_is_protected_isSet) {
        obj.insert(QString("isProtected"), ::OpenAPI::toJsonValue(m_is_protected));
    }
    if (m_limit_reached_isSet) {
        obj.insert(QString("limitReached"), ::OpenAPI::toJsonValue(m_limit_reached));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_private_key_container.isSet()) {
        obj.insert(QString("privateKeyContainer"), ::OpenAPI::toJsonValue(m_private_key_container));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QDateTime OAIPublicDownloadShare::getCreatedAt() const {
    return m_created_at;
}
void OAIPublicDownloadShare::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPublicDownloadShare::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPublicDownloadShare::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPublicDownloadShare::getCreatorName() const {
    return m_creator_name;
}
void OAIPublicDownloadShare::setCreatorName(const QString &creator_name) {
    m_creator_name = creator_name;
    m_creator_name_isSet = true;
}

bool OAIPublicDownloadShare::is_creator_name_Set() const{
    return m_creator_name_isSet;
}

bool OAIPublicDownloadShare::is_creator_name_Valid() const{
    return m_creator_name_isValid;
}

QString OAIPublicDownloadShare::getCreatorUsername() const {
    return m_creator_username;
}
void OAIPublicDownloadShare::setCreatorUsername(const QString &creator_username) {
    m_creator_username = creator_username;
    m_creator_username_isSet = true;
}

bool OAIPublicDownloadShare::is_creator_username_Set() const{
    return m_creator_username_isSet;
}

bool OAIPublicDownloadShare::is_creator_username_Valid() const{
    return m_creator_username_isValid;
}

QDateTime OAIPublicDownloadShare::getExpireAt() const {
    return m_expire_at;
}
void OAIPublicDownloadShare::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIPublicDownloadShare::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIPublicDownloadShare::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

OAIFileKey OAIPublicDownloadShare::getFileKey() const {
    return m_file_key;
}
void OAIPublicDownloadShare::setFileKey(const OAIFileKey &file_key) {
    m_file_key = file_key;
    m_file_key_isSet = true;
}

bool OAIPublicDownloadShare::is_file_key_Set() const{
    return m_file_key_isSet;
}

bool OAIPublicDownloadShare::is_file_key_Valid() const{
    return m_file_key_isValid;
}

QString OAIPublicDownloadShare::getFileName() const {
    return m_file_name;
}
void OAIPublicDownloadShare::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIPublicDownloadShare::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIPublicDownloadShare::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAIPublicDownloadShare::isHasDownloadLimit() const {
    return m_has_download_limit;
}
void OAIPublicDownloadShare::setHasDownloadLimit(const bool &has_download_limit) {
    m_has_download_limit = has_download_limit;
    m_has_download_limit_isSet = true;
}

bool OAIPublicDownloadShare::is_has_download_limit_Set() const{
    return m_has_download_limit_isSet;
}

bool OAIPublicDownloadShare::is_has_download_limit_Valid() const{
    return m_has_download_limit_isValid;
}

bool OAIPublicDownloadShare::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIPublicDownloadShare::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIPublicDownloadShare::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIPublicDownloadShare::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

bool OAIPublicDownloadShare::isIsProtected() const {
    return m_is_protected;
}
void OAIPublicDownloadShare::setIsProtected(const bool &is_protected) {
    m_is_protected = is_protected;
    m_is_protected_isSet = true;
}

bool OAIPublicDownloadShare::is_is_protected_Set() const{
    return m_is_protected_isSet;
}

bool OAIPublicDownloadShare::is_is_protected_Valid() const{
    return m_is_protected_isValid;
}

bool OAIPublicDownloadShare::isLimitReached() const {
    return m_limit_reached;
}
void OAIPublicDownloadShare::setLimitReached(const bool &limit_reached) {
    m_limit_reached = limit_reached;
    m_limit_reached_isSet = true;
}

bool OAIPublicDownloadShare::is_limit_reached_Set() const{
    return m_limit_reached_isSet;
}

bool OAIPublicDownloadShare::is_limit_reached_Valid() const{
    return m_limit_reached_isValid;
}

QString OAIPublicDownloadShare::getMediaType() const {
    return m_media_type;
}
void OAIPublicDownloadShare::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIPublicDownloadShare::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIPublicDownloadShare::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIPublicDownloadShare::getName() const {
    return m_name;
}
void OAIPublicDownloadShare::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublicDownloadShare::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublicDownloadShare::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublicDownloadShare::getNotes() const {
    return m_notes;
}
void OAIPublicDownloadShare::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIPublicDownloadShare::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIPublicDownloadShare::is_notes_Valid() const{
    return m_notes_isValid;
}

OAIPrivateKeyContainer OAIPublicDownloadShare::getPrivateKeyContainer() const {
    return m_private_key_container;
}
void OAIPublicDownloadShare::setPrivateKeyContainer(const OAIPrivateKeyContainer &private_key_container) {
    m_private_key_container = private_key_container;
    m_private_key_container_isSet = true;
}

bool OAIPublicDownloadShare::is_private_key_container_Set() const{
    return m_private_key_container_isSet;
}

bool OAIPublicDownloadShare::is_private_key_container_Valid() const{
    return m_private_key_container_isValid;
}

qint64 OAIPublicDownloadShare::getSize() const {
    return m_size;
}
void OAIPublicDownloadShare::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPublicDownloadShare::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPublicDownloadShare::is_size_Valid() const{
    return m_size_isValid;
}

bool OAIPublicDownloadShare::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_download_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_protected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_reached_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublicDownloadShare::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_creator_name_isValid && m_file_name_isValid && m_has_download_limit_isValid && m_is_protected_isValid && m_limit_reached_isValid && m_media_type_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
