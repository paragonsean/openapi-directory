/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditUserPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditUserPermission::OAIAuditUserPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditUserPermission::OAIAuditUserPermission() {
    this->initializeModel();
}

OAIAuditUserPermission::~OAIAuditUserPermission() {}

void OAIAuditUserPermission::initializeModel() {

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_user_first_name_isSet = false;
    m_user_first_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_last_name_isSet = false;
    m_user_last_name_isValid = false;

    m_user_login_isSet = false;
    m_user_login_isValid = false;
}

void OAIAuditUserPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditUserPermission::fromJsonObject(QJsonObject json) {

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_user_first_name_isValid = ::OpenAPI::fromJsonValue(m_user_first_name, json[QString("userFirstName")]);
    m_user_first_name_isSet = !json[QString("userFirstName")].isNull() && m_user_first_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_last_name_isValid = ::OpenAPI::fromJsonValue(m_user_last_name, json[QString("userLastName")]);
    m_user_last_name_isSet = !json[QString("userLastName")].isNull() && m_user_last_name_isValid;

    m_user_login_isValid = ::OpenAPI::fromJsonValue(m_user_login, json[QString("userLogin")]);
    m_user_login_isSet = !json[QString("userLogin")].isNull() && m_user_login_isValid;
}

QString OAIAuditUserPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditUserPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_user_first_name_isSet) {
        obj.insert(QString("userFirstName"), ::OpenAPI::toJsonValue(m_user_first_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_last_name_isSet) {
        obj.insert(QString("userLastName"), ::OpenAPI::toJsonValue(m_user_last_name));
    }
    if (m_user_login_isSet) {
        obj.insert(QString("userLogin"), ::OpenAPI::toJsonValue(m_user_login));
    }
    return obj;
}

OAINodePermissions OAIAuditUserPermission::getPermissions() const {
    return m_permissions;
}
void OAIAuditUserPermission::setPermissions(const OAINodePermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAuditUserPermission::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAuditUserPermission::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIAuditUserPermission::getUserFirstName() const {
    return m_user_first_name;
}
void OAIAuditUserPermission::setUserFirstName(const QString &user_first_name) {
    m_user_first_name = user_first_name;
    m_user_first_name_isSet = true;
}

bool OAIAuditUserPermission::is_user_first_name_Set() const{
    return m_user_first_name_isSet;
}

bool OAIAuditUserPermission::is_user_first_name_Valid() const{
    return m_user_first_name_isValid;
}

qint64 OAIAuditUserPermission::getUserId() const {
    return m_user_id;
}
void OAIAuditUserPermission::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAuditUserPermission::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAuditUserPermission::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAuditUserPermission::getUserLastName() const {
    return m_user_last_name;
}
void OAIAuditUserPermission::setUserLastName(const QString &user_last_name) {
    m_user_last_name = user_last_name;
    m_user_last_name_isSet = true;
}

bool OAIAuditUserPermission::is_user_last_name_Set() const{
    return m_user_last_name_isSet;
}

bool OAIAuditUserPermission::is_user_last_name_Valid() const{
    return m_user_last_name_isValid;
}

QString OAIAuditUserPermission::getUserLogin() const {
    return m_user_login;
}
void OAIAuditUserPermission::setUserLogin(const QString &user_login) {
    m_user_login = user_login;
    m_user_login_isSet = true;
}

bool OAIAuditUserPermission::is_user_login_Set() const{
    return m_user_login_isSet;
}

bool OAIAuditUserPermission::is_user_login_Valid() const{
    return m_user_login_isValid;
}

bool OAIAuditUserPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_login_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditUserPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_permissions_isValid && m_user_first_name_isValid && m_user_id_isValid && m_user_last_name_isValid && m_user_login_isValid && true;
}

} // namespace OpenAPI
