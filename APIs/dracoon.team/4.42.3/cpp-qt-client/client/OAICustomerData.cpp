/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerData::OAICustomerData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerData::OAICustomerData() {
    this->initializeModel();
}

OAICustomerData::~OAICustomerData() {}

void OAICustomerData::initializeModel() {

    m_accounts_limit_isSet = false;
    m_accounts_limit_isValid = false;

    m_accounts_used_isSet = false;
    m_accounts_used_isValid = false;

    m_cnt_guest_user_isSet = false;
    m_cnt_guest_user_isValid = false;

    m_cnt_internal_user_isSet = false;
    m_cnt_internal_user_isValid = false;

    m_customer_encryption_enabled_isSet = false;
    m_customer_encryption_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_provider_customer_isSet = false;
    m_is_provider_customer_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_space_limit_isSet = false;
    m_space_limit_isValid = false;

    m_space_used_isSet = false;
    m_space_used_isValid = false;
}

void OAICustomerData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerData::fromJsonObject(QJsonObject json) {

    m_accounts_limit_isValid = ::OpenAPI::fromJsonValue(m_accounts_limit, json[QString("accountsLimit")]);
    m_accounts_limit_isSet = !json[QString("accountsLimit")].isNull() && m_accounts_limit_isValid;

    m_accounts_used_isValid = ::OpenAPI::fromJsonValue(m_accounts_used, json[QString("accountsUsed")]);
    m_accounts_used_isSet = !json[QString("accountsUsed")].isNull() && m_accounts_used_isValid;

    m_cnt_guest_user_isValid = ::OpenAPI::fromJsonValue(m_cnt_guest_user, json[QString("cntGuestUser")]);
    m_cnt_guest_user_isSet = !json[QString("cntGuestUser")].isNull() && m_cnt_guest_user_isValid;

    m_cnt_internal_user_isValid = ::OpenAPI::fromJsonValue(m_cnt_internal_user, json[QString("cntInternalUser")]);
    m_cnt_internal_user_isSet = !json[QString("cntInternalUser")].isNull() && m_cnt_internal_user_isValid;

    m_customer_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_customer_encryption_enabled, json[QString("customerEncryptionEnabled")]);
    m_customer_encryption_enabled_isSet = !json[QString("customerEncryptionEnabled")].isNull() && m_customer_encryption_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_provider_customer_isValid = ::OpenAPI::fromJsonValue(m_is_provider_customer, json[QString("isProviderCustomer")]);
    m_is_provider_customer_isSet = !json[QString("isProviderCustomer")].isNull() && m_is_provider_customer_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_space_limit_isValid = ::OpenAPI::fromJsonValue(m_space_limit, json[QString("spaceLimit")]);
    m_space_limit_isSet = !json[QString("spaceLimit")].isNull() && m_space_limit_isValid;

    m_space_used_isValid = ::OpenAPI::fromJsonValue(m_space_used, json[QString("spaceUsed")]);
    m_space_used_isSet = !json[QString("spaceUsed")].isNull() && m_space_used_isValid;
}

QString OAICustomerData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerData::asJsonObject() const {
    QJsonObject obj;
    if (m_accounts_limit_isSet) {
        obj.insert(QString("accountsLimit"), ::OpenAPI::toJsonValue(m_accounts_limit));
    }
    if (m_accounts_used_isSet) {
        obj.insert(QString("accountsUsed"), ::OpenAPI::toJsonValue(m_accounts_used));
    }
    if (m_cnt_guest_user_isSet) {
        obj.insert(QString("cntGuestUser"), ::OpenAPI::toJsonValue(m_cnt_guest_user));
    }
    if (m_cnt_internal_user_isSet) {
        obj.insert(QString("cntInternalUser"), ::OpenAPI::toJsonValue(m_cnt_internal_user));
    }
    if (m_customer_encryption_enabled_isSet) {
        obj.insert(QString("customerEncryptionEnabled"), ::OpenAPI::toJsonValue(m_customer_encryption_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_provider_customer_isSet) {
        obj.insert(QString("isProviderCustomer"), ::OpenAPI::toJsonValue(m_is_provider_customer));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_space_limit_isSet) {
        obj.insert(QString("spaceLimit"), ::OpenAPI::toJsonValue(m_space_limit));
    }
    if (m_space_used_isSet) {
        obj.insert(QString("spaceUsed"), ::OpenAPI::toJsonValue(m_space_used));
    }
    return obj;
}

qint32 OAICustomerData::getAccountsLimit() const {
    return m_accounts_limit;
}
void OAICustomerData::setAccountsLimit(const qint32 &accounts_limit) {
    m_accounts_limit = accounts_limit;
    m_accounts_limit_isSet = true;
}

bool OAICustomerData::is_accounts_limit_Set() const{
    return m_accounts_limit_isSet;
}

bool OAICustomerData::is_accounts_limit_Valid() const{
    return m_accounts_limit_isValid;
}

qint32 OAICustomerData::getAccountsUsed() const {
    return m_accounts_used;
}
void OAICustomerData::setAccountsUsed(const qint32 &accounts_used) {
    m_accounts_used = accounts_used;
    m_accounts_used_isSet = true;
}

bool OAICustomerData::is_accounts_used_Set() const{
    return m_accounts_used_isSet;
}

bool OAICustomerData::is_accounts_used_Valid() const{
    return m_accounts_used_isValid;
}

qint32 OAICustomerData::getCntGuestUser() const {
    return m_cnt_guest_user;
}
void OAICustomerData::setCntGuestUser(const qint32 &cnt_guest_user) {
    m_cnt_guest_user = cnt_guest_user;
    m_cnt_guest_user_isSet = true;
}

bool OAICustomerData::is_cnt_guest_user_Set() const{
    return m_cnt_guest_user_isSet;
}

bool OAICustomerData::is_cnt_guest_user_Valid() const{
    return m_cnt_guest_user_isValid;
}

qint32 OAICustomerData::getCntInternalUser() const {
    return m_cnt_internal_user;
}
void OAICustomerData::setCntInternalUser(const qint32 &cnt_internal_user) {
    m_cnt_internal_user = cnt_internal_user;
    m_cnt_internal_user_isSet = true;
}

bool OAICustomerData::is_cnt_internal_user_Set() const{
    return m_cnt_internal_user_isSet;
}

bool OAICustomerData::is_cnt_internal_user_Valid() const{
    return m_cnt_internal_user_isValid;
}

bool OAICustomerData::isCustomerEncryptionEnabled() const {
    return m_customer_encryption_enabled;
}
void OAICustomerData::setCustomerEncryptionEnabled(const bool &customer_encryption_enabled) {
    m_customer_encryption_enabled = customer_encryption_enabled;
    m_customer_encryption_enabled_isSet = true;
}

bool OAICustomerData::is_customer_encryption_enabled_Set() const{
    return m_customer_encryption_enabled_isSet;
}

bool OAICustomerData::is_customer_encryption_enabled_Valid() const{
    return m_customer_encryption_enabled_isValid;
}

qint64 OAICustomerData::getId() const {
    return m_id;
}
void OAICustomerData::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICustomerData::is_id_Set() const{
    return m_id_isSet;
}

bool OAICustomerData::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICustomerData::isIsProviderCustomer() const {
    return m_is_provider_customer;
}
void OAICustomerData::setIsProviderCustomer(const bool &is_provider_customer) {
    m_is_provider_customer = is_provider_customer;
    m_is_provider_customer_isSet = true;
}

bool OAICustomerData::is_is_provider_customer_Set() const{
    return m_is_provider_customer_isSet;
}

bool OAICustomerData::is_is_provider_customer_Valid() const{
    return m_is_provider_customer_isValid;
}

QString OAICustomerData::getName() const {
    return m_name;
}
void OAICustomerData::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICustomerData::is_name_Set() const{
    return m_name_isSet;
}

bool OAICustomerData::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAICustomerData::getSpaceLimit() const {
    return m_space_limit;
}
void OAICustomerData::setSpaceLimit(const qint64 &space_limit) {
    m_space_limit = space_limit;
    m_space_limit_isSet = true;
}

bool OAICustomerData::is_space_limit_Set() const{
    return m_space_limit_isSet;
}

bool OAICustomerData::is_space_limit_Valid() const{
    return m_space_limit_isValid;
}

qint64 OAICustomerData::getSpaceUsed() const {
    return m_space_used;
}
void OAICustomerData::setSpaceUsed(const qint64 &space_used) {
    m_space_used = space_used;
    m_space_used_isSet = true;
}

bool OAICustomerData::is_space_used_Set() const{
    return m_space_used_isSet;
}

bool OAICustomerData::is_space_used_Valid() const{
    return m_space_used_isValid;
}

bool OAICustomerData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accounts_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_guest_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnt_internal_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_provider_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accounts_limit_isValid && m_accounts_used_isValid && m_cnt_guest_user_isValid && m_cnt_internal_user_isValid && m_customer_encryption_enabled_isValid && m_id_isValid && m_is_provider_customer_isValid && m_name_isValid && m_space_limit_isValid && m_space_used_isValid && true;
}

} // namespace OpenAPI
