/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateOAuthClientRequest.h
 *
 * Request model for creating an OAuth client
 */

#ifndef OAICreateOAuthClientRequest_H
#define OAICreateOAuthClientRequest_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateOAuthClientRequest : public OAIObject {
public:
    OAICreateOAuthClientRequest();
    OAICreateOAuthClientRequest(QString json);
    ~OAICreateOAuthClientRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccessTokenValidity() const;
    void setAccessTokenValidity(const qint32 &access_token_validity);
    bool is_access_token_validity_Set() const;
    bool is_access_token_validity_Valid() const;

    qint32 getApprovalValidity() const;
    void setApprovalValidity(const qint32 &approval_validity);
    bool is_approval_validity_Set() const;
    bool is_approval_validity_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getClientName() const;
    void setClientName(const QString &client_name);
    bool is_client_name_Set() const;
    bool is_client_name_Valid() const;

    QString getClientSecret() const;
    void setClientSecret(const QString &client_secret);
    bool is_client_secret_Set() const;
    bool is_client_secret_Valid() const;

    QString getClientType() const;
    void setClientType(const QString &client_type);
    bool is_client_type_Set() const;
    bool is_client_type_Valid() const;

    QList<QString> getGrantTypes() const;
    void setGrantTypes(const QList<QString> &grant_types);
    bool is_grant_types_Set() const;
    bool is_grant_types_Valid() const;

    QList<QString> getRedirectUris() const;
    void setRedirectUris(const QList<QString> &redirect_uris);
    bool is_redirect_uris_Set() const;
    bool is_redirect_uris_Valid() const;

    qint32 getRefreshTokenValidity() const;
    void setRefreshTokenValidity(const qint32 &refresh_token_validity);
    bool is_refresh_token_validity_Set() const;
    bool is_refresh_token_validity_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_access_token_validity;
    bool m_access_token_validity_isSet;
    bool m_access_token_validity_isValid;

    qint32 m_approval_validity;
    bool m_approval_validity_isSet;
    bool m_approval_validity_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_client_name;
    bool m_client_name_isSet;
    bool m_client_name_isValid;

    QString m_client_secret;
    bool m_client_secret_isSet;
    bool m_client_secret_isValid;

    QString m_client_type;
    bool m_client_type_isSet;
    bool m_client_type_isValid;

    QList<QString> m_grant_types;
    bool m_grant_types_isSet;
    bool m_grant_types_isValid;

    QList<QString> m_redirect_uris;
    bool m_redirect_uris_isSet;
    bool m_redirect_uris_isValid;

    qint32 m_refresh_token_validity;
    bool m_refresh_token_validity_isSet;
    bool m_refresh_token_validity_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateOAuthClientRequest)

#endif // OAICreateOAuthClientRequest_H
