/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompleteS3ShareUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompleteS3ShareUploadRequest::OAICompleteS3ShareUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompleteS3ShareUploadRequest::OAICompleteS3ShareUploadRequest() {
    this->initializeModel();
}

OAICompleteS3ShareUploadRequest::~OAICompleteS3ShareUploadRequest() {}

void OAICompleteS3ShareUploadRequest::initializeModel() {

    m_parts_isSet = false;
    m_parts_isValid = false;

    m_user_file_key_list_isSet = false;
    m_user_file_key_list_isValid = false;
}

void OAICompleteS3ShareUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompleteS3ShareUploadRequest::fromJsonObject(QJsonObject json) {

    m_parts_isValid = ::OpenAPI::fromJsonValue(m_parts, json[QString("parts")]);
    m_parts_isSet = !json[QString("parts")].isNull() && m_parts_isValid;

    m_user_file_key_list_isValid = ::OpenAPI::fromJsonValue(m_user_file_key_list, json[QString("userFileKeyList")]);
    m_user_file_key_list_isSet = !json[QString("userFileKeyList")].isNull() && m_user_file_key_list_isValid;
}

QString OAICompleteS3ShareUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompleteS3ShareUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_parts.size() > 0) {
        obj.insert(QString("parts"), ::OpenAPI::toJsonValue(m_parts));
    }
    if (m_user_file_key_list.size() > 0) {
        obj.insert(QString("userFileKeyList"), ::OpenAPI::toJsonValue(m_user_file_key_list));
    }
    return obj;
}

QList<OAIS3FileUploadPart> OAICompleteS3ShareUploadRequest::getParts() const {
    return m_parts;
}
void OAICompleteS3ShareUploadRequest::setParts(const QList<OAIS3FileUploadPart> &parts) {
    m_parts = parts;
    m_parts_isSet = true;
}

bool OAICompleteS3ShareUploadRequest::is_parts_Set() const{
    return m_parts_isSet;
}

bool OAICompleteS3ShareUploadRequest::is_parts_Valid() const{
    return m_parts_isValid;
}

QList<OAIUserFileKey> OAICompleteS3ShareUploadRequest::getUserFileKeyList() const {
    return m_user_file_key_list;
}
void OAICompleteS3ShareUploadRequest::setUserFileKeyList(const QList<OAIUserFileKey> &user_file_key_list) {
    m_user_file_key_list = user_file_key_list;
    m_user_file_key_list_isSet = true;
}

bool OAICompleteS3ShareUploadRequest::is_user_file_key_list_Set() const{
    return m_user_file_key_list_isSet;
}

bool OAICompleteS3ShareUploadRequest::is_user_file_key_list_Valid() const{
    return m_user_file_key_list_isValid;
}

bool OAICompleteS3ShareUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_file_key_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompleteS3ShareUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parts_isValid && true;
}

} // namespace OpenAPI
