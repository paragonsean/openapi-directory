/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICharacterRules.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICharacterRules::OAICharacterRules(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICharacterRules::OAICharacterRules() {
    this->initializeModel();
}

OAICharacterRules::~OAICharacterRules() {}

void OAICharacterRules::initializeModel() {

    m_must_contain_characters_isSet = false;
    m_must_contain_characters_isValid = false;

    m_number_of_characteristics_to_enforce_isSet = false;
    m_number_of_characteristics_to_enforce_isValid = false;
}

void OAICharacterRules::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICharacterRules::fromJsonObject(QJsonObject json) {

    m_must_contain_characters_isValid = ::OpenAPI::fromJsonValue(m_must_contain_characters, json[QString("mustContainCharacters")]);
    m_must_contain_characters_isSet = !json[QString("mustContainCharacters")].isNull() && m_must_contain_characters_isValid;

    m_number_of_characteristics_to_enforce_isValid = ::OpenAPI::fromJsonValue(m_number_of_characteristics_to_enforce, json[QString("numberOfCharacteristicsToEnforce")]);
    m_number_of_characteristics_to_enforce_isSet = !json[QString("numberOfCharacteristicsToEnforce")].isNull() && m_number_of_characteristics_to_enforce_isValid;
}

QString OAICharacterRules::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICharacterRules::asJsonObject() const {
    QJsonObject obj;
    if (m_must_contain_characters.size() > 0) {
        obj.insert(QString("mustContainCharacters"), ::OpenAPI::toJsonValue(m_must_contain_characters));
    }
    if (m_number_of_characteristics_to_enforce_isSet) {
        obj.insert(QString("numberOfCharacteristicsToEnforce"), ::OpenAPI::toJsonValue(m_number_of_characteristics_to_enforce));
    }
    return obj;
}

QList<QString> OAICharacterRules::getMustContainCharacters() const {
    return m_must_contain_characters;
}
void OAICharacterRules::setMustContainCharacters(const QList<QString> &must_contain_characters) {
    m_must_contain_characters = must_contain_characters;
    m_must_contain_characters_isSet = true;
}

bool OAICharacterRules::is_must_contain_characters_Set() const{
    return m_must_contain_characters_isSet;
}

bool OAICharacterRules::is_must_contain_characters_Valid() const{
    return m_must_contain_characters_isValid;
}

qint32 OAICharacterRules::getNumberOfCharacteristicsToEnforce() const {
    return m_number_of_characteristics_to_enforce;
}
void OAICharacterRules::setNumberOfCharacteristicsToEnforce(const qint32 &number_of_characteristics_to_enforce) {
    m_number_of_characteristics_to_enforce = number_of_characteristics_to_enforce;
    m_number_of_characteristics_to_enforce_isSet = true;
}

bool OAICharacterRules::is_number_of_characteristics_to_enforce_Set() const{
    return m_number_of_characteristics_to_enforce_isSet;
}

bool OAICharacterRules::is_number_of_characteristics_to_enforce_Valid() const{
    return m_number_of_characteristics_to_enforce_isValid;
}

bool OAICharacterRules::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_must_contain_characters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_characteristics_to_enforce_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICharacterRules::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_must_contain_characters_isValid && m_number_of_characteristics_to_enforce_isValid && true;
}

} // namespace OpenAPI
