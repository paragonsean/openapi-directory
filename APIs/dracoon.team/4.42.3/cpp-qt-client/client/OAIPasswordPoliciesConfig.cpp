/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasswordPoliciesConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasswordPoliciesConfig::OAIPasswordPoliciesConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasswordPoliciesConfig::OAIPasswordPoliciesConfig() {
    this->initializeModel();
}

OAIPasswordPoliciesConfig::~OAIPasswordPoliciesConfig() {}

void OAIPasswordPoliciesConfig::initializeModel() {

    m_encryption_password_policies_isSet = false;
    m_encryption_password_policies_isValid = false;

    m_login_password_policies_isSet = false;
    m_login_password_policies_isValid = false;

    m_shares_password_policies_isSet = false;
    m_shares_password_policies_isValid = false;
}

void OAIPasswordPoliciesConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasswordPoliciesConfig::fromJsonObject(QJsonObject json) {

    m_encryption_password_policies_isValid = ::OpenAPI::fromJsonValue(m_encryption_password_policies, json[QString("encryptionPasswordPolicies")]);
    m_encryption_password_policies_isSet = !json[QString("encryptionPasswordPolicies")].isNull() && m_encryption_password_policies_isValid;

    m_login_password_policies_isValid = ::OpenAPI::fromJsonValue(m_login_password_policies, json[QString("loginPasswordPolicies")]);
    m_login_password_policies_isSet = !json[QString("loginPasswordPolicies")].isNull() && m_login_password_policies_isValid;

    m_shares_password_policies_isValid = ::OpenAPI::fromJsonValue(m_shares_password_policies, json[QString("sharesPasswordPolicies")]);
    m_shares_password_policies_isSet = !json[QString("sharesPasswordPolicies")].isNull() && m_shares_password_policies_isValid;
}

QString OAIPasswordPoliciesConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasswordPoliciesConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_password_policies.isSet()) {
        obj.insert(QString("encryptionPasswordPolicies"), ::OpenAPI::toJsonValue(m_encryption_password_policies));
    }
    if (m_login_password_policies.isSet()) {
        obj.insert(QString("loginPasswordPolicies"), ::OpenAPI::toJsonValue(m_login_password_policies));
    }
    if (m_shares_password_policies.isSet()) {
        obj.insert(QString("sharesPasswordPolicies"), ::OpenAPI::toJsonValue(m_shares_password_policies));
    }
    return obj;
}

OAIEncryptionPasswordPolicies OAIPasswordPoliciesConfig::getEncryptionPasswordPolicies() const {
    return m_encryption_password_policies;
}
void OAIPasswordPoliciesConfig::setEncryptionPasswordPolicies(const OAIEncryptionPasswordPolicies &encryption_password_policies) {
    m_encryption_password_policies = encryption_password_policies;
    m_encryption_password_policies_isSet = true;
}

bool OAIPasswordPoliciesConfig::is_encryption_password_policies_Set() const{
    return m_encryption_password_policies_isSet;
}

bool OAIPasswordPoliciesConfig::is_encryption_password_policies_Valid() const{
    return m_encryption_password_policies_isValid;
}

OAILoginPasswordPolicies OAIPasswordPoliciesConfig::getLoginPasswordPolicies() const {
    return m_login_password_policies;
}
void OAIPasswordPoliciesConfig::setLoginPasswordPolicies(const OAILoginPasswordPolicies &login_password_policies) {
    m_login_password_policies = login_password_policies;
    m_login_password_policies_isSet = true;
}

bool OAIPasswordPoliciesConfig::is_login_password_policies_Set() const{
    return m_login_password_policies_isSet;
}

bool OAIPasswordPoliciesConfig::is_login_password_policies_Valid() const{
    return m_login_password_policies_isValid;
}

OAISharesPasswordPolicies OAIPasswordPoliciesConfig::getSharesPasswordPolicies() const {
    return m_shares_password_policies;
}
void OAIPasswordPoliciesConfig::setSharesPasswordPolicies(const OAISharesPasswordPolicies &shares_password_policies) {
    m_shares_password_policies = shares_password_policies;
    m_shares_password_policies_isSet = true;
}

bool OAIPasswordPoliciesConfig::is_shares_password_policies_Set() const{
    return m_shares_password_policies_isSet;
}

bool OAIPasswordPoliciesConfig::is_shares_password_policies_Valid() const{
    return m_shares_password_policies_isValid;
}

bool OAIPasswordPoliciesConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_password_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_password_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shares_password_policies.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasswordPoliciesConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
