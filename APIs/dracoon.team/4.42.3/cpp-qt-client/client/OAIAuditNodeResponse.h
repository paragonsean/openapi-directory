/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditNodeResponse.h
 *
 * Audit node report
 */

#ifndef OAIAuditNodeResponse_H
#define OAIAuditNodeResponse_H

#include <QJsonObject>

#include "OAIAuditUserPermission.h"
#include "OAIUserInfo.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuditUserPermission;
class OAIUserInfo;

class OAIAuditNodeResponse : public OAIObject {
public:
    OAIAuditNodeResponse();
    OAIAuditNodeResponse(QString json);
    ~OAIAuditNodeResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAuditUserPermission> getAuditUserPermissionList() const;
    void setAuditUserPermissionList(const QList<OAIAuditUserPermission> &audit_user_permission_list);
    bool is_audit_user_permission_list_Set() const;
    bool is_audit_user_permission_list_Valid() const;

    qint32 getNodeCntChildren() const;
    void setNodeCntChildren(const qint32 &node_cnt_children);
    bool is_node_cnt_children_Set() const;
    bool is_node_cnt_children_Valid() const;

    QDateTime getNodeCreatedAt() const;
    void setNodeCreatedAt(const QDateTime &node_created_at);
    bool is_node_created_at_Set() const;
    bool is_node_created_at_Valid() const;

    OAIUserInfo getNodeCreatedBy() const;
    void setNodeCreatedBy(const OAIUserInfo &node_created_by);
    bool is_node_created_by_Set() const;
    bool is_node_created_by_Valid() const;

    bool isNodeHasActivitiesLog() const;
    void setNodeHasActivitiesLog(const bool &node_has_activities_log);
    bool is_node_has_activities_log_Set() const;
    bool is_node_has_activities_log_Valid() const;

    Q_DECL_DEPRECATED bool isNodeHasRecycleBin() const;
    Q_DECL_DEPRECATED void setNodeHasRecycleBin(const bool &node_has_recycle_bin);
    Q_DECL_DEPRECATED bool is_node_has_recycle_bin_Set() const;
    Q_DECL_DEPRECATED bool is_node_has_recycle_bin_Valid() const;

    qint64 getNodeId() const;
    void setNodeId(const qint64 &node_id);
    bool is_node_id_Set() const;
    bool is_node_id_Valid() const;

    bool isNodeIsEncrypted() const;
    void setNodeIsEncrypted(const bool &node_is_encrypted);
    bool is_node_is_encrypted_Set() const;
    bool is_node_is_encrypted_Valid() const;

    QString getNodeName() const;
    void setNodeName(const QString &node_name);
    bool is_node_name_Set() const;
    bool is_node_name_Valid() const;

    qint64 getNodeParentId() const;
    void setNodeParentId(const qint64 &node_parent_id);
    bool is_node_parent_id_Set() const;
    bool is_node_parent_id_Valid() const;

    QString getNodeParentPath() const;
    void setNodeParentPath(const QString &node_parent_path);
    bool is_node_parent_path_Set() const;
    bool is_node_parent_path_Valid() const;

    qint64 getNodeQuota() const;
    void setNodeQuota(const qint64 &node_quota);
    bool is_node_quota_Set() const;
    bool is_node_quota_Valid() const;

    qint32 getNodeRecycleBinRetentionPeriod() const;
    void setNodeRecycleBinRetentionPeriod(const qint32 &node_recycle_bin_retention_period);
    bool is_node_recycle_bin_retention_period_Set() const;
    bool is_node_recycle_bin_retention_period_Valid() const;

    qint64 getNodeSize() const;
    void setNodeSize(const qint64 &node_size);
    bool is_node_size_Set() const;
    bool is_node_size_Valid() const;

    QDateTime getNodeUpdatedAt() const;
    void setNodeUpdatedAt(const QDateTime &node_updated_at);
    bool is_node_updated_at_Set() const;
    bool is_node_updated_at_Valid() const;

    OAIUserInfo getNodeUpdatedBy() const;
    void setNodeUpdatedBy(const OAIUserInfo &node_updated_by);
    bool is_node_updated_by_Set() const;
    bool is_node_updated_by_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAuditUserPermission> m_audit_user_permission_list;
    bool m_audit_user_permission_list_isSet;
    bool m_audit_user_permission_list_isValid;

    qint32 m_node_cnt_children;
    bool m_node_cnt_children_isSet;
    bool m_node_cnt_children_isValid;

    QDateTime m_node_created_at;
    bool m_node_created_at_isSet;
    bool m_node_created_at_isValid;

    OAIUserInfo m_node_created_by;
    bool m_node_created_by_isSet;
    bool m_node_created_by_isValid;

    bool m_node_has_activities_log;
    bool m_node_has_activities_log_isSet;
    bool m_node_has_activities_log_isValid;

    bool m_node_has_recycle_bin;
    bool m_node_has_recycle_bin_isSet;
    bool m_node_has_recycle_bin_isValid;

    qint64 m_node_id;
    bool m_node_id_isSet;
    bool m_node_id_isValid;

    bool m_node_is_encrypted;
    bool m_node_is_encrypted_isSet;
    bool m_node_is_encrypted_isValid;

    QString m_node_name;
    bool m_node_name_isSet;
    bool m_node_name_isValid;

    qint64 m_node_parent_id;
    bool m_node_parent_id_isSet;
    bool m_node_parent_id_isValid;

    QString m_node_parent_path;
    bool m_node_parent_path_isSet;
    bool m_node_parent_path_isValid;

    qint64 m_node_quota;
    bool m_node_quota_isSet;
    bool m_node_quota_isValid;

    qint32 m_node_recycle_bin_retention_period;
    bool m_node_recycle_bin_retention_period_isSet;
    bool m_node_recycle_bin_retention_period_isValid;

    qint64 m_node_size;
    bool m_node_size_isSet;
    bool m_node_size_isValid;

    QDateTime m_node_updated_at;
    bool m_node_updated_at_isSet;
    bool m_node_updated_at_isValid;

    OAIUserInfo m_node_updated_by;
    bool m_node_updated_by_isSet;
    bool m_node_updated_by_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditNodeResponse)

#endif // OAIAuditNodeResponse_H
