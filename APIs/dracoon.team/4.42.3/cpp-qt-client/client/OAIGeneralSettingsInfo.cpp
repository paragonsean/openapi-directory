/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeneralSettingsInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeneralSettingsInfo::OAIGeneralSettingsInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeneralSettingsInfo::OAIGeneralSettingsInfo() {
    this->initializeModel();
}

OAIGeneralSettingsInfo::~OAIGeneralSettingsInfo() {}

void OAIGeneralSettingsInfo::initializeModel() {

    m_auth_token_restrictions_isSet = false;
    m_auth_token_restrictions_isValid = false;

    m_crypto_enabled_isSet = false;
    m_crypto_enabled_isValid = false;

    m_email_notification_button_enabled_isSet = false;
    m_email_notification_button_enabled_isValid = false;

    m_eula_enabled_isSet = false;
    m_eula_enabled_isValid = false;

    m_hide_login_input_fields_isSet = false;
    m_hide_login_input_fields_isValid = false;

    m_home_room_parent_id_isSet = false;
    m_home_room_parent_id_isValid = false;

    m_home_rooms_active_isSet = false;
    m_home_rooms_active_isValid = false;

    m_media_server_enabled_isSet = false;
    m_media_server_enabled_isValid = false;

    m_s3_tags_enabled_isSet = false;
    m_s3_tags_enabled_isValid = false;

    m_share_password_sms_enabled_isSet = false;
    m_share_password_sms_enabled_isValid = false;

    m_subscription_plan_isSet = false;
    m_subscription_plan_isValid = false;

    m_use_s3_storage_isSet = false;
    m_use_s3_storage_isValid = false;

    m_weak_password_enabled_isSet = false;
    m_weak_password_enabled_isValid = false;
}

void OAIGeneralSettingsInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeneralSettingsInfo::fromJsonObject(QJsonObject json) {

    m_auth_token_restrictions_isValid = ::OpenAPI::fromJsonValue(m_auth_token_restrictions, json[QString("authTokenRestrictions")]);
    m_auth_token_restrictions_isSet = !json[QString("authTokenRestrictions")].isNull() && m_auth_token_restrictions_isValid;

    m_crypto_enabled_isValid = ::OpenAPI::fromJsonValue(m_crypto_enabled, json[QString("cryptoEnabled")]);
    m_crypto_enabled_isSet = !json[QString("cryptoEnabled")].isNull() && m_crypto_enabled_isValid;

    m_email_notification_button_enabled_isValid = ::OpenAPI::fromJsonValue(m_email_notification_button_enabled, json[QString("emailNotificationButtonEnabled")]);
    m_email_notification_button_enabled_isSet = !json[QString("emailNotificationButtonEnabled")].isNull() && m_email_notification_button_enabled_isValid;

    m_eula_enabled_isValid = ::OpenAPI::fromJsonValue(m_eula_enabled, json[QString("eulaEnabled")]);
    m_eula_enabled_isSet = !json[QString("eulaEnabled")].isNull() && m_eula_enabled_isValid;

    m_hide_login_input_fields_isValid = ::OpenAPI::fromJsonValue(m_hide_login_input_fields, json[QString("hideLoginInputFields")]);
    m_hide_login_input_fields_isSet = !json[QString("hideLoginInputFields")].isNull() && m_hide_login_input_fields_isValid;

    m_home_room_parent_id_isValid = ::OpenAPI::fromJsonValue(m_home_room_parent_id, json[QString("homeRoomParentId")]);
    m_home_room_parent_id_isSet = !json[QString("homeRoomParentId")].isNull() && m_home_room_parent_id_isValid;

    m_home_rooms_active_isValid = ::OpenAPI::fromJsonValue(m_home_rooms_active, json[QString("homeRoomsActive")]);
    m_home_rooms_active_isSet = !json[QString("homeRoomsActive")].isNull() && m_home_rooms_active_isValid;

    m_media_server_enabled_isValid = ::OpenAPI::fromJsonValue(m_media_server_enabled, json[QString("mediaServerEnabled")]);
    m_media_server_enabled_isSet = !json[QString("mediaServerEnabled")].isNull() && m_media_server_enabled_isValid;

    m_s3_tags_enabled_isValid = ::OpenAPI::fromJsonValue(m_s3_tags_enabled, json[QString("s3TagsEnabled")]);
    m_s3_tags_enabled_isSet = !json[QString("s3TagsEnabled")].isNull() && m_s3_tags_enabled_isValid;

    m_share_password_sms_enabled_isValid = ::OpenAPI::fromJsonValue(m_share_password_sms_enabled, json[QString("sharePasswordSmsEnabled")]);
    m_share_password_sms_enabled_isSet = !json[QString("sharePasswordSmsEnabled")].isNull() && m_share_password_sms_enabled_isValid;

    m_subscription_plan_isValid = ::OpenAPI::fromJsonValue(m_subscription_plan, json[QString("subscriptionPlan")]);
    m_subscription_plan_isSet = !json[QString("subscriptionPlan")].isNull() && m_subscription_plan_isValid;

    m_use_s3_storage_isValid = ::OpenAPI::fromJsonValue(m_use_s3_storage, json[QString("useS3Storage")]);
    m_use_s3_storage_isSet = !json[QString("useS3Storage")].isNull() && m_use_s3_storage_isValid;

    m_weak_password_enabled_isValid = ::OpenAPI::fromJsonValue(m_weak_password_enabled, json[QString("weakPasswordEnabled")]);
    m_weak_password_enabled_isSet = !json[QString("weakPasswordEnabled")].isNull() && m_weak_password_enabled_isValid;
}

QString OAIGeneralSettingsInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeneralSettingsInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_token_restrictions.isSet()) {
        obj.insert(QString("authTokenRestrictions"), ::OpenAPI::toJsonValue(m_auth_token_restrictions));
    }
    if (m_crypto_enabled_isSet) {
        obj.insert(QString("cryptoEnabled"), ::OpenAPI::toJsonValue(m_crypto_enabled));
    }
    if (m_email_notification_button_enabled_isSet) {
        obj.insert(QString("emailNotificationButtonEnabled"), ::OpenAPI::toJsonValue(m_email_notification_button_enabled));
    }
    if (m_eula_enabled_isSet) {
        obj.insert(QString("eulaEnabled"), ::OpenAPI::toJsonValue(m_eula_enabled));
    }
    if (m_hide_login_input_fields_isSet) {
        obj.insert(QString("hideLoginInputFields"), ::OpenAPI::toJsonValue(m_hide_login_input_fields));
    }
    if (m_home_room_parent_id_isSet) {
        obj.insert(QString("homeRoomParentId"), ::OpenAPI::toJsonValue(m_home_room_parent_id));
    }
    if (m_home_rooms_active_isSet) {
        obj.insert(QString("homeRoomsActive"), ::OpenAPI::toJsonValue(m_home_rooms_active));
    }
    if (m_media_server_enabled_isSet) {
        obj.insert(QString("mediaServerEnabled"), ::OpenAPI::toJsonValue(m_media_server_enabled));
    }
    if (m_s3_tags_enabled_isSet) {
        obj.insert(QString("s3TagsEnabled"), ::OpenAPI::toJsonValue(m_s3_tags_enabled));
    }
    if (m_share_password_sms_enabled_isSet) {
        obj.insert(QString("sharePasswordSmsEnabled"), ::OpenAPI::toJsonValue(m_share_password_sms_enabled));
    }
    if (m_subscription_plan_isSet) {
        obj.insert(QString("subscriptionPlan"), ::OpenAPI::toJsonValue(m_subscription_plan));
    }
    if (m_use_s3_storage_isSet) {
        obj.insert(QString("useS3Storage"), ::OpenAPI::toJsonValue(m_use_s3_storage));
    }
    if (m_weak_password_enabled_isSet) {
        obj.insert(QString("weakPasswordEnabled"), ::OpenAPI::toJsonValue(m_weak_password_enabled));
    }
    return obj;
}

OAIAuthTokenRestrictions OAIGeneralSettingsInfo::getAuthTokenRestrictions() const {
    return m_auth_token_restrictions;
}
void OAIGeneralSettingsInfo::setAuthTokenRestrictions(const OAIAuthTokenRestrictions &auth_token_restrictions) {
    m_auth_token_restrictions = auth_token_restrictions;
    m_auth_token_restrictions_isSet = true;
}

bool OAIGeneralSettingsInfo::is_auth_token_restrictions_Set() const{
    return m_auth_token_restrictions_isSet;
}

bool OAIGeneralSettingsInfo::is_auth_token_restrictions_Valid() const{
    return m_auth_token_restrictions_isValid;
}

bool OAIGeneralSettingsInfo::isCryptoEnabled() const {
    return m_crypto_enabled;
}
void OAIGeneralSettingsInfo::setCryptoEnabled(const bool &crypto_enabled) {
    m_crypto_enabled = crypto_enabled;
    m_crypto_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_crypto_enabled_Set() const{
    return m_crypto_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_crypto_enabled_Valid() const{
    return m_crypto_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isEmailNotificationButtonEnabled() const {
    return m_email_notification_button_enabled;
}
void OAIGeneralSettingsInfo::setEmailNotificationButtonEnabled(const bool &email_notification_button_enabled) {
    m_email_notification_button_enabled = email_notification_button_enabled;
    m_email_notification_button_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_email_notification_button_enabled_Set() const{
    return m_email_notification_button_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_email_notification_button_enabled_Valid() const{
    return m_email_notification_button_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isEulaEnabled() const {
    return m_eula_enabled;
}
void OAIGeneralSettingsInfo::setEulaEnabled(const bool &eula_enabled) {
    m_eula_enabled = eula_enabled;
    m_eula_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_eula_enabled_Set() const{
    return m_eula_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_eula_enabled_Valid() const{
    return m_eula_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isHideLoginInputFields() const {
    return m_hide_login_input_fields;
}
void OAIGeneralSettingsInfo::setHideLoginInputFields(const bool &hide_login_input_fields) {
    m_hide_login_input_fields = hide_login_input_fields;
    m_hide_login_input_fields_isSet = true;
}

bool OAIGeneralSettingsInfo::is_hide_login_input_fields_Set() const{
    return m_hide_login_input_fields_isSet;
}

bool OAIGeneralSettingsInfo::is_hide_login_input_fields_Valid() const{
    return m_hide_login_input_fields_isValid;
}

qint64 OAIGeneralSettingsInfo::getHomeRoomParentId() const {
    return m_home_room_parent_id;
}
void OAIGeneralSettingsInfo::setHomeRoomParentId(const qint64 &home_room_parent_id) {
    m_home_room_parent_id = home_room_parent_id;
    m_home_room_parent_id_isSet = true;
}

bool OAIGeneralSettingsInfo::is_home_room_parent_id_Set() const{
    return m_home_room_parent_id_isSet;
}

bool OAIGeneralSettingsInfo::is_home_room_parent_id_Valid() const{
    return m_home_room_parent_id_isValid;
}

bool OAIGeneralSettingsInfo::isHomeRoomsActive() const {
    return m_home_rooms_active;
}
void OAIGeneralSettingsInfo::setHomeRoomsActive(const bool &home_rooms_active) {
    m_home_rooms_active = home_rooms_active;
    m_home_rooms_active_isSet = true;
}

bool OAIGeneralSettingsInfo::is_home_rooms_active_Set() const{
    return m_home_rooms_active_isSet;
}

bool OAIGeneralSettingsInfo::is_home_rooms_active_Valid() const{
    return m_home_rooms_active_isValid;
}

bool OAIGeneralSettingsInfo::isMediaServerEnabled() const {
    return m_media_server_enabled;
}
void OAIGeneralSettingsInfo::setMediaServerEnabled(const bool &media_server_enabled) {
    m_media_server_enabled = media_server_enabled;
    m_media_server_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_media_server_enabled_Set() const{
    return m_media_server_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_media_server_enabled_Valid() const{
    return m_media_server_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isS3TagsEnabled() const {
    return m_s3_tags_enabled;
}
void OAIGeneralSettingsInfo::setS3TagsEnabled(const bool &s3_tags_enabled) {
    m_s3_tags_enabled = s3_tags_enabled;
    m_s3_tags_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_s3_tags_enabled_Set() const{
    return m_s3_tags_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_s3_tags_enabled_Valid() const{
    return m_s3_tags_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isSharePasswordSmsEnabled() const {
    return m_share_password_sms_enabled;
}
void OAIGeneralSettingsInfo::setSharePasswordSmsEnabled(const bool &share_password_sms_enabled) {
    m_share_password_sms_enabled = share_password_sms_enabled;
    m_share_password_sms_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_share_password_sms_enabled_Set() const{
    return m_share_password_sms_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_share_password_sms_enabled_Valid() const{
    return m_share_password_sms_enabled_isValid;
}

qint32 OAIGeneralSettingsInfo::getSubscriptionPlan() const {
    return m_subscription_plan;
}
void OAIGeneralSettingsInfo::setSubscriptionPlan(const qint32 &subscription_plan) {
    m_subscription_plan = subscription_plan;
    m_subscription_plan_isSet = true;
}

bool OAIGeneralSettingsInfo::is_subscription_plan_Set() const{
    return m_subscription_plan_isSet;
}

bool OAIGeneralSettingsInfo::is_subscription_plan_Valid() const{
    return m_subscription_plan_isValid;
}

bool OAIGeneralSettingsInfo::isUseS3Storage() const {
    return m_use_s3_storage;
}
void OAIGeneralSettingsInfo::setUseS3Storage(const bool &use_s3_storage) {
    m_use_s3_storage = use_s3_storage;
    m_use_s3_storage_isSet = true;
}

bool OAIGeneralSettingsInfo::is_use_s3_storage_Set() const{
    return m_use_s3_storage_isSet;
}

bool OAIGeneralSettingsInfo::is_use_s3_storage_Valid() const{
    return m_use_s3_storage_isValid;
}

bool OAIGeneralSettingsInfo::isWeakPasswordEnabled() const {
    return m_weak_password_enabled;
}
void OAIGeneralSettingsInfo::setWeakPasswordEnabled(const bool &weak_password_enabled) {
    m_weak_password_enabled = weak_password_enabled;
    m_weak_password_enabled_isSet = true;
}

bool OAIGeneralSettingsInfo::is_weak_password_enabled_Set() const{
    return m_weak_password_enabled_isSet;
}

bool OAIGeneralSettingsInfo::is_weak_password_enabled_Valid() const{
    return m_weak_password_enabled_isValid;
}

bool OAIGeneralSettingsInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_token_restrictions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crypto_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_notification_button_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eula_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_login_input_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_room_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_rooms_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_server_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_tags_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_password_sms_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_s3_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weak_password_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeneralSettingsInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_home_rooms_active_isValid && m_subscription_plan_isValid && true;
}

} // namespace OpenAPI
