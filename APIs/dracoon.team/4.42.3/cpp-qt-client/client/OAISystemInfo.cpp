/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemInfo::OAISystemInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemInfo::OAISystemInfo() {
    this->initializeModel();
}

OAISystemInfo::~OAISystemInfo() {}

void OAISystemInfo::initializeModel() {

    m_auth_methods_isSet = false;
    m_auth_methods_isValid = false;

    m_hide_login_input_fields_isSet = false;
    m_hide_login_input_fields_isValid = false;

    m_language_default_isSet = false;
    m_language_default_isValid = false;

    m_s3_enforce_direct_upload_isSet = false;
    m_s3_enforce_direct_upload_isValid = false;

    m_s3_hosts_isSet = false;
    m_s3_hosts_isValid = false;

    m_use_s3_storage_isSet = false;
    m_use_s3_storage_isValid = false;
}

void OAISystemInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemInfo::fromJsonObject(QJsonObject json) {

    m_auth_methods_isValid = ::OpenAPI::fromJsonValue(m_auth_methods, json[QString("authMethods")]);
    m_auth_methods_isSet = !json[QString("authMethods")].isNull() && m_auth_methods_isValid;

    m_hide_login_input_fields_isValid = ::OpenAPI::fromJsonValue(m_hide_login_input_fields, json[QString("hideLoginInputFields")]);
    m_hide_login_input_fields_isSet = !json[QString("hideLoginInputFields")].isNull() && m_hide_login_input_fields_isValid;

    m_language_default_isValid = ::OpenAPI::fromJsonValue(m_language_default, json[QString("languageDefault")]);
    m_language_default_isSet = !json[QString("languageDefault")].isNull() && m_language_default_isValid;

    m_s3_enforce_direct_upload_isValid = ::OpenAPI::fromJsonValue(m_s3_enforce_direct_upload, json[QString("s3EnforceDirectUpload")]);
    m_s3_enforce_direct_upload_isSet = !json[QString("s3EnforceDirectUpload")].isNull() && m_s3_enforce_direct_upload_isValid;

    m_s3_hosts_isValid = ::OpenAPI::fromJsonValue(m_s3_hosts, json[QString("s3Hosts")]);
    m_s3_hosts_isSet = !json[QString("s3Hosts")].isNull() && m_s3_hosts_isValid;

    m_use_s3_storage_isValid = ::OpenAPI::fromJsonValue(m_use_s3_storage, json[QString("useS3Storage")]);
    m_use_s3_storage_isSet = !json[QString("useS3Storage")].isNull() && m_use_s3_storage_isValid;
}

QString OAISystemInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_methods.size() > 0) {
        obj.insert(QString("authMethods"), ::OpenAPI::toJsonValue(m_auth_methods));
    }
    if (m_hide_login_input_fields_isSet) {
        obj.insert(QString("hideLoginInputFields"), ::OpenAPI::toJsonValue(m_hide_login_input_fields));
    }
    if (m_language_default_isSet) {
        obj.insert(QString("languageDefault"), ::OpenAPI::toJsonValue(m_language_default));
    }
    if (m_s3_enforce_direct_upload_isSet) {
        obj.insert(QString("s3EnforceDirectUpload"), ::OpenAPI::toJsonValue(m_s3_enforce_direct_upload));
    }
    if (m_s3_hosts.size() > 0) {
        obj.insert(QString("s3Hosts"), ::OpenAPI::toJsonValue(m_s3_hosts));
    }
    if (m_use_s3_storage_isSet) {
        obj.insert(QString("useS3Storage"), ::OpenAPI::toJsonValue(m_use_s3_storage));
    }
    return obj;
}

QList<OAIAuthMethod> OAISystemInfo::getAuthMethods() const {
    return m_auth_methods;
}
void OAISystemInfo::setAuthMethods(const QList<OAIAuthMethod> &auth_methods) {
    m_auth_methods = auth_methods;
    m_auth_methods_isSet = true;
}

bool OAISystemInfo::is_auth_methods_Set() const{
    return m_auth_methods_isSet;
}

bool OAISystemInfo::is_auth_methods_Valid() const{
    return m_auth_methods_isValid;
}

bool OAISystemInfo::isHideLoginInputFields() const {
    return m_hide_login_input_fields;
}
void OAISystemInfo::setHideLoginInputFields(const bool &hide_login_input_fields) {
    m_hide_login_input_fields = hide_login_input_fields;
    m_hide_login_input_fields_isSet = true;
}

bool OAISystemInfo::is_hide_login_input_fields_Set() const{
    return m_hide_login_input_fields_isSet;
}

bool OAISystemInfo::is_hide_login_input_fields_Valid() const{
    return m_hide_login_input_fields_isValid;
}

QString OAISystemInfo::getLanguageDefault() const {
    return m_language_default;
}
void OAISystemInfo::setLanguageDefault(const QString &language_default) {
    m_language_default = language_default;
    m_language_default_isSet = true;
}

bool OAISystemInfo::is_language_default_Set() const{
    return m_language_default_isSet;
}

bool OAISystemInfo::is_language_default_Valid() const{
    return m_language_default_isValid;
}

bool OAISystemInfo::isS3EnforceDirectUpload() const {
    return m_s3_enforce_direct_upload;
}
void OAISystemInfo::setS3EnforceDirectUpload(const bool &s3_enforce_direct_upload) {
    m_s3_enforce_direct_upload = s3_enforce_direct_upload;
    m_s3_enforce_direct_upload_isSet = true;
}

bool OAISystemInfo::is_s3_enforce_direct_upload_Set() const{
    return m_s3_enforce_direct_upload_isSet;
}

bool OAISystemInfo::is_s3_enforce_direct_upload_Valid() const{
    return m_s3_enforce_direct_upload_isValid;
}

QList<QString> OAISystemInfo::getS3Hosts() const {
    return m_s3_hosts;
}
void OAISystemInfo::setS3Hosts(const QList<QString> &s3_hosts) {
    m_s3_hosts = s3_hosts;
    m_s3_hosts_isSet = true;
}

bool OAISystemInfo::is_s3_hosts_Set() const{
    return m_s3_hosts_isSet;
}

bool OAISystemInfo::is_s3_hosts_Valid() const{
    return m_s3_hosts_isValid;
}

bool OAISystemInfo::isUseS3Storage() const {
    return m_use_s3_storage;
}
void OAISystemInfo::setUseS3Storage(const bool &use_s3_storage) {
    m_use_s3_storage = use_s3_storage;
    m_use_s3_storage_isSet = true;
}

bool OAISystemInfo::is_use_s3_storage_Set() const{
    return m_use_s3_storage_isSet;
}

bool OAISystemInfo::is_use_s3_storage_Valid() const{
    return m_use_s3_storage_isValid;
}

bool OAISystemInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_login_input_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_enforce_direct_upload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_hosts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_s3_storage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_methods_isValid && m_hide_login_input_fields_isValid && m_language_default_isValid && m_s3_enforce_direct_upload_isValid && m_s3_hosts_isValid && m_use_s3_storage_isValid && true;
}

} // namespace OpenAPI
