/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInternalApi_H
#define OAI_OAIInternalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAISubscriptionPlanRequest.h"
#include "OAISubscriptionPlanResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInternalApi : public QObject {
    Q_OBJECT

public:
    OAIInternalApi(const int timeOut = 0);
    ~OAIInternalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_sds_service_token QString [required]
    */
    virtual void internalRequestSubscriptionPlan(const QString &x_sds_service_token);

    /**
    * @param[in]  x_sds_service_token QString [required]
    * @param[in]  oai_subscription_plan_request OAISubscriptionPlanRequest [required]
    */
    virtual void internalSetSubscriptionPlan(const QString &x_sds_service_token, const OAISubscriptionPlanRequest &oai_subscription_plan_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void internalRequestSubscriptionPlanCallback(OAIHttpRequestWorker *worker);
    void internalSetSubscriptionPlanCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void internalRequestSubscriptionPlanSignal(OAISubscriptionPlanResponse summary);
    void internalSetSubscriptionPlanSignal(OAISubscriptionPlanResponse summary);


    void internalRequestSubscriptionPlanSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionPlanResponse summary);
    void internalSetSubscriptionPlanSignalFull(OAIHttpRequestWorker *worker, OAISubscriptionPlanResponse summary);

    Q_DECL_DEPRECATED_X("Use internalRequestSubscriptionPlanSignalError() instead")
    void internalRequestSubscriptionPlanSignalE(OAISubscriptionPlanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void internalRequestSubscriptionPlanSignalError(OAISubscriptionPlanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use internalSetSubscriptionPlanSignalError() instead")
    void internalSetSubscriptionPlanSignalE(OAISubscriptionPlanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void internalSetSubscriptionPlanSignalError(OAISubscriptionPlanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use internalRequestSubscriptionPlanSignalErrorFull() instead")
    void internalRequestSubscriptionPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void internalRequestSubscriptionPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use internalSetSubscriptionPlanSignalErrorFull() instead")
    void internalSetSubscriptionPlanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void internalSetSubscriptionPlanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
