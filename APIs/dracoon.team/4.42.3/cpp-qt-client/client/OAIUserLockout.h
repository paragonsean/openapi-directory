/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserLockout.h
 *
 * User lockout information
 */

#ifndef OAIUserLockout_H
#define OAIUserLockout_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserLockout : public OAIObject {
public:
    OAIUserLockout();
    OAIUserLockout(QString json);
    ~OAIUserLockout() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    qint32 getLockoutPeriod() const;
    void setLockoutPeriod(const qint32 &lockout_period);
    bool is_lockout_period_Set() const;
    bool is_lockout_period_Valid() const;

    qint32 getMaxNumberOfLoginFailures() const;
    void setMaxNumberOfLoginFailures(const qint32 &max_number_of_login_failures);
    bool is_max_number_of_login_failures_Set() const;
    bool is_max_number_of_login_failures_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    qint32 m_lockout_period;
    bool m_lockout_period_isSet;
    bool m_lockout_period_isValid;

    qint32 m_max_number_of_login_failures;
    bool m_max_number_of_login_failures_isSet;
    bool m_max_number_of_login_failures_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserLockout)

#endif // OAIUserLockout_H
