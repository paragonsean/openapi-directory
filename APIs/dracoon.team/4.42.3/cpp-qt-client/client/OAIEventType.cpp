/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventType::OAIEventType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventType::OAIEventType() {
    this->initializeModel();
}

OAIEventType::~OAIEventType() {}

void OAIEventType::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_usable_customer_admin_webhook_isSet = false;
    m_usable_customer_admin_webhook_isValid = false;

    m_usable_node_webhook_isSet = false;
    m_usable_node_webhook_isValid = false;

    m_usable_push_notification_isSet = false;
    m_usable_push_notification_isValid = false;

    m_usable_tenant_webhook_isSet = false;
    m_usable_tenant_webhook_isValid = false;
}

void OAIEventType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventType::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_usable_customer_admin_webhook_isValid = ::OpenAPI::fromJsonValue(m_usable_customer_admin_webhook, json[QString("usableCustomerAdminWebhook")]);
    m_usable_customer_admin_webhook_isSet = !json[QString("usableCustomerAdminWebhook")].isNull() && m_usable_customer_admin_webhook_isValid;

    m_usable_node_webhook_isValid = ::OpenAPI::fromJsonValue(m_usable_node_webhook, json[QString("usableNodeWebhook")]);
    m_usable_node_webhook_isSet = !json[QString("usableNodeWebhook")].isNull() && m_usable_node_webhook_isValid;

    m_usable_push_notification_isValid = ::OpenAPI::fromJsonValue(m_usable_push_notification, json[QString("usablePushNotification")]);
    m_usable_push_notification_isSet = !json[QString("usablePushNotification")].isNull() && m_usable_push_notification_isValid;

    m_usable_tenant_webhook_isValid = ::OpenAPI::fromJsonValue(m_usable_tenant_webhook, json[QString("usableTenantWebhook")]);
    m_usable_tenant_webhook_isSet = !json[QString("usableTenantWebhook")].isNull() && m_usable_tenant_webhook_isValid;
}

QString OAIEventType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventType::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_usable_customer_admin_webhook_isSet) {
        obj.insert(QString("usableCustomerAdminWebhook"), ::OpenAPI::toJsonValue(m_usable_customer_admin_webhook));
    }
    if (m_usable_node_webhook_isSet) {
        obj.insert(QString("usableNodeWebhook"), ::OpenAPI::toJsonValue(m_usable_node_webhook));
    }
    if (m_usable_push_notification_isSet) {
        obj.insert(QString("usablePushNotification"), ::OpenAPI::toJsonValue(m_usable_push_notification));
    }
    if (m_usable_tenant_webhook_isSet) {
        obj.insert(QString("usableTenantWebhook"), ::OpenAPI::toJsonValue(m_usable_tenant_webhook));
    }
    return obj;
}

qint32 OAIEventType::getId() const {
    return m_id;
}
void OAIEventType::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventType::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventType::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventType::getName() const {
    return m_name;
}
void OAIEventType::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEventType::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEventType::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIEventType::isUsableCustomerAdminWebhook() const {
    return m_usable_customer_admin_webhook;
}
void OAIEventType::setUsableCustomerAdminWebhook(const bool &usable_customer_admin_webhook) {
    m_usable_customer_admin_webhook = usable_customer_admin_webhook;
    m_usable_customer_admin_webhook_isSet = true;
}

bool OAIEventType::is_usable_customer_admin_webhook_Set() const{
    return m_usable_customer_admin_webhook_isSet;
}

bool OAIEventType::is_usable_customer_admin_webhook_Valid() const{
    return m_usable_customer_admin_webhook_isValid;
}

bool OAIEventType::isUsableNodeWebhook() const {
    return m_usable_node_webhook;
}
void OAIEventType::setUsableNodeWebhook(const bool &usable_node_webhook) {
    m_usable_node_webhook = usable_node_webhook;
    m_usable_node_webhook_isSet = true;
}

bool OAIEventType::is_usable_node_webhook_Set() const{
    return m_usable_node_webhook_isSet;
}

bool OAIEventType::is_usable_node_webhook_Valid() const{
    return m_usable_node_webhook_isValid;
}

bool OAIEventType::isUsablePushNotification() const {
    return m_usable_push_notification;
}
void OAIEventType::setUsablePushNotification(const bool &usable_push_notification) {
    m_usable_push_notification = usable_push_notification;
    m_usable_push_notification_isSet = true;
}

bool OAIEventType::is_usable_push_notification_Set() const{
    return m_usable_push_notification_isSet;
}

bool OAIEventType::is_usable_push_notification_Valid() const{
    return m_usable_push_notification_isValid;
}

bool OAIEventType::isUsableTenantWebhook() const {
    return m_usable_tenant_webhook;
}
void OAIEventType::setUsableTenantWebhook(const bool &usable_tenant_webhook) {
    m_usable_tenant_webhook = usable_tenant_webhook;
    m_usable_tenant_webhook_isSet = true;
}

bool OAIEventType::is_usable_tenant_webhook_Set() const{
    return m_usable_tenant_webhook_isSet;
}

bool OAIEventType::is_usable_tenant_webhook_Valid() const{
    return m_usable_tenant_webhook_isValid;
}

bool OAIEventType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usable_customer_admin_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usable_node_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usable_push_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usable_tenant_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_usable_customer_admin_webhook_isValid && m_usable_node_webhook_isValid && m_usable_push_notification_isValid && m_usable_tenant_webhook_isValid && true;
}

} // namespace OpenAPI
