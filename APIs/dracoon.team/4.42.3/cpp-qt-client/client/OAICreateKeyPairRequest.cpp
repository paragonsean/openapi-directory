/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateKeyPairRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateKeyPairRequest::OAICreateKeyPairRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateKeyPairRequest::OAICreateKeyPairRequest() {
    this->initializeModel();
}

OAICreateKeyPairRequest::~OAICreateKeyPairRequest() {}

void OAICreateKeyPairRequest::initializeModel() {

    m_previous_private_key_isSet = false;
    m_previous_private_key_isValid = false;

    m_private_key_container_isSet = false;
    m_private_key_container_isValid = false;

    m_public_key_container_isSet = false;
    m_public_key_container_isValid = false;
}

void OAICreateKeyPairRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateKeyPairRequest::fromJsonObject(QJsonObject json) {

    m_previous_private_key_isValid = ::OpenAPI::fromJsonValue(m_previous_private_key, json[QString("previousPrivateKey")]);
    m_previous_private_key_isSet = !json[QString("previousPrivateKey")].isNull() && m_previous_private_key_isValid;

    m_private_key_container_isValid = ::OpenAPI::fromJsonValue(m_private_key_container, json[QString("privateKeyContainer")]);
    m_private_key_container_isSet = !json[QString("privateKeyContainer")].isNull() && m_private_key_container_isValid;

    m_public_key_container_isValid = ::OpenAPI::fromJsonValue(m_public_key_container, json[QString("publicKeyContainer")]);
    m_public_key_container_isSet = !json[QString("publicKeyContainer")].isNull() && m_public_key_container_isValid;
}

QString OAICreateKeyPairRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateKeyPairRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_previous_private_key.isSet()) {
        obj.insert(QString("previousPrivateKey"), ::OpenAPI::toJsonValue(m_previous_private_key));
    }
    if (m_private_key_container.isSet()) {
        obj.insert(QString("privateKeyContainer"), ::OpenAPI::toJsonValue(m_private_key_container));
    }
    if (m_public_key_container.isSet()) {
        obj.insert(QString("publicKeyContainer"), ::OpenAPI::toJsonValue(m_public_key_container));
    }
    return obj;
}

OAIPrivateKeyContainer OAICreateKeyPairRequest::getPreviousPrivateKey() const {
    return m_previous_private_key;
}
void OAICreateKeyPairRequest::setPreviousPrivateKey(const OAIPrivateKeyContainer &previous_private_key) {
    m_previous_private_key = previous_private_key;
    m_previous_private_key_isSet = true;
}

bool OAICreateKeyPairRequest::is_previous_private_key_Set() const{
    return m_previous_private_key_isSet;
}

bool OAICreateKeyPairRequest::is_previous_private_key_Valid() const{
    return m_previous_private_key_isValid;
}

OAIPrivateKeyContainer OAICreateKeyPairRequest::getPrivateKeyContainer() const {
    return m_private_key_container;
}
void OAICreateKeyPairRequest::setPrivateKeyContainer(const OAIPrivateKeyContainer &private_key_container) {
    m_private_key_container = private_key_container;
    m_private_key_container_isSet = true;
}

bool OAICreateKeyPairRequest::is_private_key_container_Set() const{
    return m_private_key_container_isSet;
}

bool OAICreateKeyPairRequest::is_private_key_container_Valid() const{
    return m_private_key_container_isValid;
}

OAIPublicKeyContainer OAICreateKeyPairRequest::getPublicKeyContainer() const {
    return m_public_key_container;
}
void OAICreateKeyPairRequest::setPublicKeyContainer(const OAIPublicKeyContainer &public_key_container) {
    m_public_key_container = public_key_container;
    m_public_key_container_isSet = true;
}

bool OAICreateKeyPairRequest::is_public_key_container_Set() const{
    return m_public_key_container_isSet;
}

bool OAICreateKeyPairRequest::is_public_key_container_Valid() const{
    return m_public_key_container_isValid;
}

bool OAICreateKeyPairRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_previous_private_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_container.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateKeyPairRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_previous_private_key_isValid && m_private_key_container_isValid && m_public_key_container_isValid && true;
}

} // namespace OpenAPI
