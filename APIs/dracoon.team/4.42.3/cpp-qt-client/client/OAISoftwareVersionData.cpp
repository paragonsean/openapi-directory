/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoftwareVersionData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoftwareVersionData::OAISoftwareVersionData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoftwareVersionData::OAISoftwareVersionData() {
    this->initializeModel();
}

OAISoftwareVersionData::~OAISoftwareVersionData() {}

void OAISoftwareVersionData::initializeModel() {

    m_build_date_isSet = false;
    m_build_date_isValid = false;

    m_is_dracoon_cloud_isSet = false;
    m_is_dracoon_cloud_isValid = false;

    m_rest_api_version_isSet = false;
    m_rest_api_version_isValid = false;

    m_scm_revision_number_isSet = false;
    m_scm_revision_number_isValid = false;

    m_sds_server_version_isSet = false;
    m_sds_server_version_isValid = false;
}

void OAISoftwareVersionData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoftwareVersionData::fromJsonObject(QJsonObject json) {

    m_build_date_isValid = ::OpenAPI::fromJsonValue(m_build_date, json[QString("buildDate")]);
    m_build_date_isSet = !json[QString("buildDate")].isNull() && m_build_date_isValid;

    m_is_dracoon_cloud_isValid = ::OpenAPI::fromJsonValue(m_is_dracoon_cloud, json[QString("isDracoonCloud")]);
    m_is_dracoon_cloud_isSet = !json[QString("isDracoonCloud")].isNull() && m_is_dracoon_cloud_isValid;

    m_rest_api_version_isValid = ::OpenAPI::fromJsonValue(m_rest_api_version, json[QString("restApiVersion")]);
    m_rest_api_version_isSet = !json[QString("restApiVersion")].isNull() && m_rest_api_version_isValid;

    m_scm_revision_number_isValid = ::OpenAPI::fromJsonValue(m_scm_revision_number, json[QString("scmRevisionNumber")]);
    m_scm_revision_number_isSet = !json[QString("scmRevisionNumber")].isNull() && m_scm_revision_number_isValid;

    m_sds_server_version_isValid = ::OpenAPI::fromJsonValue(m_sds_server_version, json[QString("sdsServerVersion")]);
    m_sds_server_version_isSet = !json[QString("sdsServerVersion")].isNull() && m_sds_server_version_isValid;
}

QString OAISoftwareVersionData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoftwareVersionData::asJsonObject() const {
    QJsonObject obj;
    if (m_build_date_isSet) {
        obj.insert(QString("buildDate"), ::OpenAPI::toJsonValue(m_build_date));
    }
    if (m_is_dracoon_cloud_isSet) {
        obj.insert(QString("isDracoonCloud"), ::OpenAPI::toJsonValue(m_is_dracoon_cloud));
    }
    if (m_rest_api_version_isSet) {
        obj.insert(QString("restApiVersion"), ::OpenAPI::toJsonValue(m_rest_api_version));
    }
    if (m_scm_revision_number_isSet) {
        obj.insert(QString("scmRevisionNumber"), ::OpenAPI::toJsonValue(m_scm_revision_number));
    }
    if (m_sds_server_version_isSet) {
        obj.insert(QString("sdsServerVersion"), ::OpenAPI::toJsonValue(m_sds_server_version));
    }
    return obj;
}

QDateTime OAISoftwareVersionData::getBuildDate() const {
    return m_build_date;
}
void OAISoftwareVersionData::setBuildDate(const QDateTime &build_date) {
    m_build_date = build_date;
    m_build_date_isSet = true;
}

bool OAISoftwareVersionData::is_build_date_Set() const{
    return m_build_date_isSet;
}

bool OAISoftwareVersionData::is_build_date_Valid() const{
    return m_build_date_isValid;
}

bool OAISoftwareVersionData::isIsDracoonCloud() const {
    return m_is_dracoon_cloud;
}
void OAISoftwareVersionData::setIsDracoonCloud(const bool &is_dracoon_cloud) {
    m_is_dracoon_cloud = is_dracoon_cloud;
    m_is_dracoon_cloud_isSet = true;
}

bool OAISoftwareVersionData::is_is_dracoon_cloud_Set() const{
    return m_is_dracoon_cloud_isSet;
}

bool OAISoftwareVersionData::is_is_dracoon_cloud_Valid() const{
    return m_is_dracoon_cloud_isValid;
}

QString OAISoftwareVersionData::getRestApiVersion() const {
    return m_rest_api_version;
}
void OAISoftwareVersionData::setRestApiVersion(const QString &rest_api_version) {
    m_rest_api_version = rest_api_version;
    m_rest_api_version_isSet = true;
}

bool OAISoftwareVersionData::is_rest_api_version_Set() const{
    return m_rest_api_version_isSet;
}

bool OAISoftwareVersionData::is_rest_api_version_Valid() const{
    return m_rest_api_version_isValid;
}

QString OAISoftwareVersionData::getScmRevisionNumber() const {
    return m_scm_revision_number;
}
void OAISoftwareVersionData::setScmRevisionNumber(const QString &scm_revision_number) {
    m_scm_revision_number = scm_revision_number;
    m_scm_revision_number_isSet = true;
}

bool OAISoftwareVersionData::is_scm_revision_number_Set() const{
    return m_scm_revision_number_isSet;
}

bool OAISoftwareVersionData::is_scm_revision_number_Valid() const{
    return m_scm_revision_number_isValid;
}

QString OAISoftwareVersionData::getSdsServerVersion() const {
    return m_sds_server_version;
}
void OAISoftwareVersionData::setSdsServerVersion(const QString &sds_server_version) {
    m_sds_server_version = sds_server_version;
    m_sds_server_version_isSet = true;
}

bool OAISoftwareVersionData::is_sds_server_version_Set() const{
    return m_sds_server_version_isSet;
}

bool OAISoftwareVersionData::is_sds_server_version_Valid() const{
    return m_sds_server_version_isValid;
}

bool OAISoftwareVersionData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_dracoon_cloud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rest_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scm_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sds_server_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoftwareVersionData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_build_date_isValid && m_rest_api_version_isValid && m_scm_revision_number_isValid && m_sds_server_version_isValid && true;
}

} // namespace OpenAPI
