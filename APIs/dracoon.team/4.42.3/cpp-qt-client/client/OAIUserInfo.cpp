/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserInfo::OAIUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserInfo::OAIUserInfo() {
    this->initializeModel();
}

OAIUserInfo::~OAIUserInfo() {}

void OAIUserInfo::initializeModel() {

    m_avatar_uuid_isSet = false;
    m_avatar_uuid_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAIUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserInfo::fromJsonObject(QJsonObject json) {

    m_avatar_uuid_isValid = ::OpenAPI::fromJsonValue(m_avatar_uuid, json[QString("avatarUuid")]);
    m_avatar_uuid_isSet = !json[QString("avatarUuid")].isNull() && m_avatar_uuid_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;
}

QString OAIUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_uuid_isSet) {
        obj.insert(QString("avatarUuid"), ::OpenAPI::toJsonValue(m_avatar_uuid));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

QString OAIUserInfo::getAvatarUuid() const {
    return m_avatar_uuid;
}
void OAIUserInfo::setAvatarUuid(const QString &avatar_uuid) {
    m_avatar_uuid = avatar_uuid;
    m_avatar_uuid_isSet = true;
}

bool OAIUserInfo::is_avatar_uuid_Set() const{
    return m_avatar_uuid_isSet;
}

bool OAIUserInfo::is_avatar_uuid_Valid() const{
    return m_avatar_uuid_isValid;
}

QString OAIUserInfo::getDisplayName() const {
    return m_display_name;
}
void OAIUserInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserInfo::getEmail() const {
    return m_email;
}
void OAIUserInfo::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserInfo::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserInfo::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserInfo::getFirstName() const {
    return m_first_name;
}
void OAIUserInfo::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserInfo::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserInfo::is_first_name_Valid() const{
    return m_first_name_isValid;
}

qint64 OAIUserInfo::getId() const {
    return m_id;
}
void OAIUserInfo::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserInfo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserInfo::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserInfo::getLastName() const {
    return m_last_name;
}
void OAIUserInfo::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserInfo::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserInfo::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUserInfo::getTitle() const {
    return m_title;
}
void OAIUserInfo::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUserInfo::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUserInfo::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIUserInfo::getUserName() const {
    return m_user_name;
}
void OAIUserInfo::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUserInfo::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUserInfo::is_user_name_Valid() const{
    return m_user_name_isValid;
}

QString OAIUserInfo::getUserType() const {
    return m_user_type;
}
void OAIUserInfo::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUserInfo::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUserInfo::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAIUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_avatar_uuid_isValid && m_first_name_isValid && m_id_isValid && m_last_name_isValid && m_user_name_isValid && m_user_type_isValid && true;
}

} // namespace OpenAPI
