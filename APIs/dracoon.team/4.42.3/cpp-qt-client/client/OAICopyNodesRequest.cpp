/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICopyNodesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICopyNodesRequest::OAICopyNodesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICopyNodesRequest::OAICopyNodesRequest() {
    this->initializeModel();
}

OAICopyNodesRequest::~OAICopyNodesRequest() {}

void OAICopyNodesRequest::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_keep_share_links_isSet = false;
    m_keep_share_links_isValid = false;

    m_node_ids_isSet = false;
    m_node_ids_isValid = false;

    m_resolution_strategy_isSet = false;
    m_resolution_strategy_isValid = false;
}

void OAICopyNodesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICopyNodesRequest::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_keep_share_links_isValid = ::OpenAPI::fromJsonValue(m_keep_share_links, json[QString("keepShareLinks")]);
    m_keep_share_links_isSet = !json[QString("keepShareLinks")].isNull() && m_keep_share_links_isValid;

    m_node_ids_isValid = ::OpenAPI::fromJsonValue(m_node_ids, json[QString("nodeIds")]);
    m_node_ids_isSet = !json[QString("nodeIds")].isNull() && m_node_ids_isValid;

    m_resolution_strategy_isValid = ::OpenAPI::fromJsonValue(m_resolution_strategy, json[QString("resolutionStrategy")]);
    m_resolution_strategy_isSet = !json[QString("resolutionStrategy")].isNull() && m_resolution_strategy_isValid;
}

QString OAICopyNodesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICopyNodesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_keep_share_links_isSet) {
        obj.insert(QString("keepShareLinks"), ::OpenAPI::toJsonValue(m_keep_share_links));
    }
    if (m_node_ids.size() > 0) {
        obj.insert(QString("nodeIds"), ::OpenAPI::toJsonValue(m_node_ids));
    }
    if (m_resolution_strategy_isSet) {
        obj.insert(QString("resolutionStrategy"), ::OpenAPI::toJsonValue(m_resolution_strategy));
    }
    return obj;
}

QList<OAICopyNode> OAICopyNodesRequest::getItems() const {
    return m_items;
}
void OAICopyNodesRequest::setItems(const QList<OAICopyNode> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAICopyNodesRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAICopyNodesRequest::is_items_Valid() const{
    return m_items_isValid;
}

bool OAICopyNodesRequest::isKeepShareLinks() const {
    return m_keep_share_links;
}
void OAICopyNodesRequest::setKeepShareLinks(const bool &keep_share_links) {
    m_keep_share_links = keep_share_links;
    m_keep_share_links_isSet = true;
}

bool OAICopyNodesRequest::is_keep_share_links_Set() const{
    return m_keep_share_links_isSet;
}

bool OAICopyNodesRequest::is_keep_share_links_Valid() const{
    return m_keep_share_links_isValid;
}

QList<qint64> OAICopyNodesRequest::getNodeIds() const {
    return m_node_ids;
}
void OAICopyNodesRequest::setNodeIds(const QList<qint64> &node_ids) {
    m_node_ids = node_ids;
    m_node_ids_isSet = true;
}

bool OAICopyNodesRequest::is_node_ids_Set() const{
    return m_node_ids_isSet;
}

bool OAICopyNodesRequest::is_node_ids_Valid() const{
    return m_node_ids_isValid;
}

QString OAICopyNodesRequest::getResolutionStrategy() const {
    return m_resolution_strategy;
}
void OAICopyNodesRequest::setResolutionStrategy(const QString &resolution_strategy) {
    m_resolution_strategy = resolution_strategy;
    m_resolution_strategy_isSet = true;
}

bool OAICopyNodesRequest::is_resolution_strategy_Set() const{
    return m_resolution_strategy_isSet;
}

bool OAICopyNodesRequest::is_resolution_strategy_Valid() const{
    return m_resolution_strategy_isValid;
}

bool OAICopyNodesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_share_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICopyNodesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
