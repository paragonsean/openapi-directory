/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAuthTokenRestrictions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAuthTokenRestrictions::OAIUpdateAuthTokenRestrictions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAuthTokenRestrictions::OAIUpdateAuthTokenRestrictions() {
    this->initializeModel();
}

OAIUpdateAuthTokenRestrictions::~OAIUpdateAuthTokenRestrictions() {}

void OAIUpdateAuthTokenRestrictions::initializeModel() {

    m_access_token_validity_isSet = false;
    m_access_token_validity_isValid = false;

    m_overwrite_enabled_isSet = false;
    m_overwrite_enabled_isValid = false;

    m_refresh_token_validity_isSet = false;
    m_refresh_token_validity_isValid = false;
}

void OAIUpdateAuthTokenRestrictions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAuthTokenRestrictions::fromJsonObject(QJsonObject json) {

    m_access_token_validity_isValid = ::OpenAPI::fromJsonValue(m_access_token_validity, json[QString("accessTokenValidity")]);
    m_access_token_validity_isSet = !json[QString("accessTokenValidity")].isNull() && m_access_token_validity_isValid;

    m_overwrite_enabled_isValid = ::OpenAPI::fromJsonValue(m_overwrite_enabled, json[QString("overwriteEnabled")]);
    m_overwrite_enabled_isSet = !json[QString("overwriteEnabled")].isNull() && m_overwrite_enabled_isValid;

    m_refresh_token_validity_isValid = ::OpenAPI::fromJsonValue(m_refresh_token_validity, json[QString("refreshTokenValidity")]);
    m_refresh_token_validity_isSet = !json[QString("refreshTokenValidity")].isNull() && m_refresh_token_validity_isValid;
}

QString OAIUpdateAuthTokenRestrictions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAuthTokenRestrictions::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_validity_isSet) {
        obj.insert(QString("accessTokenValidity"), ::OpenAPI::toJsonValue(m_access_token_validity));
    }
    if (m_overwrite_enabled_isSet) {
        obj.insert(QString("overwriteEnabled"), ::OpenAPI::toJsonValue(m_overwrite_enabled));
    }
    if (m_refresh_token_validity_isSet) {
        obj.insert(QString("refreshTokenValidity"), ::OpenAPI::toJsonValue(m_refresh_token_validity));
    }
    return obj;
}

qint32 OAIUpdateAuthTokenRestrictions::getAccessTokenValidity() const {
    return m_access_token_validity;
}
void OAIUpdateAuthTokenRestrictions::setAccessTokenValidity(const qint32 &access_token_validity) {
    m_access_token_validity = access_token_validity;
    m_access_token_validity_isSet = true;
}

bool OAIUpdateAuthTokenRestrictions::is_access_token_validity_Set() const{
    return m_access_token_validity_isSet;
}

bool OAIUpdateAuthTokenRestrictions::is_access_token_validity_Valid() const{
    return m_access_token_validity_isValid;
}

bool OAIUpdateAuthTokenRestrictions::isOverwriteEnabled() const {
    return m_overwrite_enabled;
}
void OAIUpdateAuthTokenRestrictions::setOverwriteEnabled(const bool &overwrite_enabled) {
    m_overwrite_enabled = overwrite_enabled;
    m_overwrite_enabled_isSet = true;
}

bool OAIUpdateAuthTokenRestrictions::is_overwrite_enabled_Set() const{
    return m_overwrite_enabled_isSet;
}

bool OAIUpdateAuthTokenRestrictions::is_overwrite_enabled_Valid() const{
    return m_overwrite_enabled_isValid;
}

qint32 OAIUpdateAuthTokenRestrictions::getRefreshTokenValidity() const {
    return m_refresh_token_validity;
}
void OAIUpdateAuthTokenRestrictions::setRefreshTokenValidity(const qint32 &refresh_token_validity) {
    m_refresh_token_validity = refresh_token_validity;
    m_refresh_token_validity_isSet = true;
}

bool OAIUpdateAuthTokenRestrictions::is_refresh_token_validity_Set() const{
    return m_refresh_token_validity_isSet;
}

bool OAIUpdateAuthTokenRestrictions::is_refresh_token_validity_Valid() const{
    return m_refresh_token_validity_isValid;
}

bool OAIUpdateAuthTokenRestrictions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_validity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAuthTokenRestrictions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_overwrite_enabled_isValid && true;
}

} // namespace OpenAPI
