/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOAuthAuthorization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOAuthAuthorization::OAIOAuthAuthorization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOAuthAuthorization::OAIOAuthAuthorization() {
    this->initializeModel();
}

OAIOAuthAuthorization::~OAIOAuthAuthorization() {}

void OAIOAuthAuthorization::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_current_authorization_isSet = false;
    m_is_current_authorization_isValid = false;

    m_is_standard_isSet = false;
    m_is_standard_isValid = false;

    m_used_at_isSet = false;
    m_used_at_isValid = false;

    m_user_agent_category_isSet = false;
    m_user_agent_category_isValid = false;

    m_user_agent_info_isSet = false;
    m_user_agent_info_isValid = false;

    m_user_agent_os_isSet = false;
    m_user_agent_os_isValid = false;

    m_user_agent_type_isSet = false;
    m_user_agent_type_isValid = false;
}

void OAIOAuthAuthorization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOAuthAuthorization::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_current_authorization_isValid = ::OpenAPI::fromJsonValue(m_is_current_authorization, json[QString("isCurrentAuthorization")]);
    m_is_current_authorization_isSet = !json[QString("isCurrentAuthorization")].isNull() && m_is_current_authorization_isValid;

    m_is_standard_isValid = ::OpenAPI::fromJsonValue(m_is_standard, json[QString("isStandard")]);
    m_is_standard_isSet = !json[QString("isStandard")].isNull() && m_is_standard_isValid;

    m_used_at_isValid = ::OpenAPI::fromJsonValue(m_used_at, json[QString("usedAt")]);
    m_used_at_isSet = !json[QString("usedAt")].isNull() && m_used_at_isValid;

    m_user_agent_category_isValid = ::OpenAPI::fromJsonValue(m_user_agent_category, json[QString("userAgentCategory")]);
    m_user_agent_category_isSet = !json[QString("userAgentCategory")].isNull() && m_user_agent_category_isValid;

    m_user_agent_info_isValid = ::OpenAPI::fromJsonValue(m_user_agent_info, json[QString("userAgentInfo")]);
    m_user_agent_info_isSet = !json[QString("userAgentInfo")].isNull() && m_user_agent_info_isValid;

    m_user_agent_os_isValid = ::OpenAPI::fromJsonValue(m_user_agent_os, json[QString("userAgentOs")]);
    m_user_agent_os_isSet = !json[QString("userAgentOs")].isNull() && m_user_agent_os_isValid;

    m_user_agent_type_isValid = ::OpenAPI::fromJsonValue(m_user_agent_type, json[QString("userAgentType")]);
    m_user_agent_type_isSet = !json[QString("userAgentType")].isNull() && m_user_agent_type_isValid;
}

QString OAIOAuthAuthorization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOAuthAuthorization::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_current_authorization_isSet) {
        obj.insert(QString("isCurrentAuthorization"), ::OpenAPI::toJsonValue(m_is_current_authorization));
    }
    if (m_is_standard_isSet) {
        obj.insert(QString("isStandard"), ::OpenAPI::toJsonValue(m_is_standard));
    }
    if (m_used_at_isSet) {
        obj.insert(QString("usedAt"), ::OpenAPI::toJsonValue(m_used_at));
    }
    if (m_user_agent_category_isSet) {
        obj.insert(QString("userAgentCategory"), ::OpenAPI::toJsonValue(m_user_agent_category));
    }
    if (m_user_agent_info_isSet) {
        obj.insert(QString("userAgentInfo"), ::OpenAPI::toJsonValue(m_user_agent_info));
    }
    if (m_user_agent_os_isSet) {
        obj.insert(QString("userAgentOs"), ::OpenAPI::toJsonValue(m_user_agent_os));
    }
    if (m_user_agent_type_isSet) {
        obj.insert(QString("userAgentType"), ::OpenAPI::toJsonValue(m_user_agent_type));
    }
    return obj;
}

QString OAIOAuthAuthorization::getClientId() const {
    return m_client_id;
}
void OAIOAuthAuthorization::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOAuthAuthorization::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOAuthAuthorization::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOAuthAuthorization::getClientName() const {
    return m_client_name;
}
void OAIOAuthAuthorization::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAIOAuthAuthorization::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAIOAuthAuthorization::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QDateTime OAIOAuthAuthorization::getCreatedAt() const {
    return m_created_at;
}
void OAIOAuthAuthorization::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOAuthAuthorization::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOAuthAuthorization::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIOAuthAuthorization::getExpiresAt() const {
    return m_expires_at;
}
void OAIOAuthAuthorization::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIOAuthAuthorization::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIOAuthAuthorization::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

qint64 OAIOAuthAuthorization::getId() const {
    return m_id;
}
void OAIOAuthAuthorization::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOAuthAuthorization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOAuthAuthorization::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOAuthAuthorization::isIsCurrentAuthorization() const {
    return m_is_current_authorization;
}
void OAIOAuthAuthorization::setIsCurrentAuthorization(const bool &is_current_authorization) {
    m_is_current_authorization = is_current_authorization;
    m_is_current_authorization_isSet = true;
}

bool OAIOAuthAuthorization::is_is_current_authorization_Set() const{
    return m_is_current_authorization_isSet;
}

bool OAIOAuthAuthorization::is_is_current_authorization_Valid() const{
    return m_is_current_authorization_isValid;
}

bool OAIOAuthAuthorization::isIsStandard() const {
    return m_is_standard;
}
void OAIOAuthAuthorization::setIsStandard(const bool &is_standard) {
    m_is_standard = is_standard;
    m_is_standard_isSet = true;
}

bool OAIOAuthAuthorization::is_is_standard_Set() const{
    return m_is_standard_isSet;
}

bool OAIOAuthAuthorization::is_is_standard_Valid() const{
    return m_is_standard_isValid;
}

QDateTime OAIOAuthAuthorization::getUsedAt() const {
    return m_used_at;
}
void OAIOAuthAuthorization::setUsedAt(const QDateTime &used_at) {
    m_used_at = used_at;
    m_used_at_isSet = true;
}

bool OAIOAuthAuthorization::is_used_at_Set() const{
    return m_used_at_isSet;
}

bool OAIOAuthAuthorization::is_used_at_Valid() const{
    return m_used_at_isValid;
}

QString OAIOAuthAuthorization::getUserAgentCategory() const {
    return m_user_agent_category;
}
void OAIOAuthAuthorization::setUserAgentCategory(const QString &user_agent_category) {
    m_user_agent_category = user_agent_category;
    m_user_agent_category_isSet = true;
}

bool OAIOAuthAuthorization::is_user_agent_category_Set() const{
    return m_user_agent_category_isSet;
}

bool OAIOAuthAuthorization::is_user_agent_category_Valid() const{
    return m_user_agent_category_isValid;
}

QString OAIOAuthAuthorization::getUserAgentInfo() const {
    return m_user_agent_info;
}
void OAIOAuthAuthorization::setUserAgentInfo(const QString &user_agent_info) {
    m_user_agent_info = user_agent_info;
    m_user_agent_info_isSet = true;
}

bool OAIOAuthAuthorization::is_user_agent_info_Set() const{
    return m_user_agent_info_isSet;
}

bool OAIOAuthAuthorization::is_user_agent_info_Valid() const{
    return m_user_agent_info_isValid;
}

QString OAIOAuthAuthorization::getUserAgentOs() const {
    return m_user_agent_os;
}
void OAIOAuthAuthorization::setUserAgentOs(const QString &user_agent_os) {
    m_user_agent_os = user_agent_os;
    m_user_agent_os_isSet = true;
}

bool OAIOAuthAuthorization::is_user_agent_os_Set() const{
    return m_user_agent_os_isSet;
}

bool OAIOAuthAuthorization::is_user_agent_os_Valid() const{
    return m_user_agent_os_isValid;
}

QString OAIOAuthAuthorization::getUserAgentType() const {
    return m_user_agent_type;
}
void OAIOAuthAuthorization::setUserAgentType(const QString &user_agent_type) {
    m_user_agent_type = user_agent_type;
    m_user_agent_type_isSet = true;
}

bool OAIOAuthAuthorization::is_user_agent_type_Set() const{
    return m_user_agent_type_isSet;
}

bool OAIOAuthAuthorization::is_user_agent_type_Valid() const{
    return m_user_agent_type_isValid;
}

bool OAIOAuthAuthorization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_current_authorization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_standard_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOAuthAuthorization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_client_name_isValid && m_user_agent_category_isValid && true;
}

} // namespace OpenAPI
