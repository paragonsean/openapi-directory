/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOpenIdIdpConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOpenIdIdpConfig::OAIOpenIdIdpConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOpenIdIdpConfig::OAIOpenIdIdpConfig() {
    this->initializeModel();
}

OAIOpenIdIdpConfig::~OAIOpenIdIdpConfig() {}

void OAIOpenIdIdpConfig::initializeModel() {

    m_authorization_end_point_url_isSet = false;
    m_authorization_end_point_url_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_fallback_mapping_claim_isSet = false;
    m_fallback_mapping_claim_isValid = false;

    m_flow_isSet = false;
    m_flow_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_jwks_end_point_url_isSet = false;
    m_jwks_end_point_url_isValid = false;

    m_mapping_claim_isSet = false;
    m_mapping_claim_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pkce_challenge_method_isSet = false;
    m_pkce_challenge_method_isValid = false;

    m_pkce_enabled_isSet = false;
    m_pkce_enabled_isValid = false;

    m_redirect_uris_isSet = false;
    m_redirect_uris_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_token_end_point_url_isSet = false;
    m_token_end_point_url_isValid = false;

    m_user_import_enabled_isSet = false;
    m_user_import_enabled_isValid = false;

    m_user_import_group_isSet = false;
    m_user_import_group_isValid = false;

    m_user_info_end_point_url_isSet = false;
    m_user_info_end_point_url_isValid = false;

    m_user_info_source_isSet = false;
    m_user_info_source_isValid = false;

    m_user_management_url_isSet = false;
    m_user_management_url_isValid = false;

    m_user_update_enabled_isSet = false;
    m_user_update_enabled_isValid = false;
}

void OAIOpenIdIdpConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOpenIdIdpConfig::fromJsonObject(QJsonObject json) {

    m_authorization_end_point_url_isValid = ::OpenAPI::fromJsonValue(m_authorization_end_point_url, json[QString("authorizationEndPointUrl")]);
    m_authorization_end_point_url_isSet = !json[QString("authorizationEndPointUrl")].isNull() && m_authorization_end_point_url_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_fallback_mapping_claim_isValid = ::OpenAPI::fromJsonValue(m_fallback_mapping_claim, json[QString("fallbackMappingClaim")]);
    m_fallback_mapping_claim_isSet = !json[QString("fallbackMappingClaim")].isNull() && m_fallback_mapping_claim_isValid;

    m_flow_isValid = ::OpenAPI::fromJsonValue(m_flow, json[QString("flow")]);
    m_flow_isSet = !json[QString("flow")].isNull() && m_flow_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_jwks_end_point_url_isValid = ::OpenAPI::fromJsonValue(m_jwks_end_point_url, json[QString("jwksEndPointUrl")]);
    m_jwks_end_point_url_isSet = !json[QString("jwksEndPointUrl")].isNull() && m_jwks_end_point_url_isValid;

    m_mapping_claim_isValid = ::OpenAPI::fromJsonValue(m_mapping_claim, json[QString("mappingClaim")]);
    m_mapping_claim_isSet = !json[QString("mappingClaim")].isNull() && m_mapping_claim_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pkce_challenge_method_isValid = ::OpenAPI::fromJsonValue(m_pkce_challenge_method, json[QString("pkceChallengeMethod")]);
    m_pkce_challenge_method_isSet = !json[QString("pkceChallengeMethod")].isNull() && m_pkce_challenge_method_isValid;

    m_pkce_enabled_isValid = ::OpenAPI::fromJsonValue(m_pkce_enabled, json[QString("pkceEnabled")]);
    m_pkce_enabled_isSet = !json[QString("pkceEnabled")].isNull() && m_pkce_enabled_isValid;

    m_redirect_uris_isValid = ::OpenAPI::fromJsonValue(m_redirect_uris, json[QString("redirectUris")]);
    m_redirect_uris_isSet = !json[QString("redirectUris")].isNull() && m_redirect_uris_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_token_end_point_url_isValid = ::OpenAPI::fromJsonValue(m_token_end_point_url, json[QString("tokenEndPointUrl")]);
    m_token_end_point_url_isSet = !json[QString("tokenEndPointUrl")].isNull() && m_token_end_point_url_isValid;

    m_user_import_enabled_isValid = ::OpenAPI::fromJsonValue(m_user_import_enabled, json[QString("userImportEnabled")]);
    m_user_import_enabled_isSet = !json[QString("userImportEnabled")].isNull() && m_user_import_enabled_isValid;

    m_user_import_group_isValid = ::OpenAPI::fromJsonValue(m_user_import_group, json[QString("userImportGroup")]);
    m_user_import_group_isSet = !json[QString("userImportGroup")].isNull() && m_user_import_group_isValid;

    m_user_info_end_point_url_isValid = ::OpenAPI::fromJsonValue(m_user_info_end_point_url, json[QString("userInfoEndPointUrl")]);
    m_user_info_end_point_url_isSet = !json[QString("userInfoEndPointUrl")].isNull() && m_user_info_end_point_url_isValid;

    m_user_info_source_isValid = ::OpenAPI::fromJsonValue(m_user_info_source, json[QString("userInfoSource")]);
    m_user_info_source_isSet = !json[QString("userInfoSource")].isNull() && m_user_info_source_isValid;

    m_user_management_url_isValid = ::OpenAPI::fromJsonValue(m_user_management_url, json[QString("userManagementUrl")]);
    m_user_management_url_isSet = !json[QString("userManagementUrl")].isNull() && m_user_management_url_isValid;

    m_user_update_enabled_isValid = ::OpenAPI::fromJsonValue(m_user_update_enabled, json[QString("userUpdateEnabled")]);
    m_user_update_enabled_isSet = !json[QString("userUpdateEnabled")].isNull() && m_user_update_enabled_isValid;
}

QString OAIOpenIdIdpConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOpenIdIdpConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_end_point_url_isSet) {
        obj.insert(QString("authorizationEndPointUrl"), ::OpenAPI::toJsonValue(m_authorization_end_point_url));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_fallback_mapping_claim_isSet) {
        obj.insert(QString("fallbackMappingClaim"), ::OpenAPI::toJsonValue(m_fallback_mapping_claim));
    }
    if (m_flow_isSet) {
        obj.insert(QString("flow"), ::OpenAPI::toJsonValue(m_flow));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_jwks_end_point_url_isSet) {
        obj.insert(QString("jwksEndPointUrl"), ::OpenAPI::toJsonValue(m_jwks_end_point_url));
    }
    if (m_mapping_claim_isSet) {
        obj.insert(QString("mappingClaim"), ::OpenAPI::toJsonValue(m_mapping_claim));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pkce_challenge_method_isSet) {
        obj.insert(QString("pkceChallengeMethod"), ::OpenAPI::toJsonValue(m_pkce_challenge_method));
    }
    if (m_pkce_enabled_isSet) {
        obj.insert(QString("pkceEnabled"), ::OpenAPI::toJsonValue(m_pkce_enabled));
    }
    if (m_redirect_uris.size() > 0) {
        obj.insert(QString("redirectUris"), ::OpenAPI::toJsonValue(m_redirect_uris));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_token_end_point_url_isSet) {
        obj.insert(QString("tokenEndPointUrl"), ::OpenAPI::toJsonValue(m_token_end_point_url));
    }
    if (m_user_import_enabled_isSet) {
        obj.insert(QString("userImportEnabled"), ::OpenAPI::toJsonValue(m_user_import_enabled));
    }
    if (m_user_import_group_isSet) {
        obj.insert(QString("userImportGroup"), ::OpenAPI::toJsonValue(m_user_import_group));
    }
    if (m_user_info_end_point_url_isSet) {
        obj.insert(QString("userInfoEndPointUrl"), ::OpenAPI::toJsonValue(m_user_info_end_point_url));
    }
    if (m_user_info_source_isSet) {
        obj.insert(QString("userInfoSource"), ::OpenAPI::toJsonValue(m_user_info_source));
    }
    if (m_user_management_url_isSet) {
        obj.insert(QString("userManagementUrl"), ::OpenAPI::toJsonValue(m_user_management_url));
    }
    if (m_user_update_enabled_isSet) {
        obj.insert(QString("userUpdateEnabled"), ::OpenAPI::toJsonValue(m_user_update_enabled));
    }
    return obj;
}

QString OAIOpenIdIdpConfig::getAuthorizationEndPointUrl() const {
    return m_authorization_end_point_url;
}
void OAIOpenIdIdpConfig::setAuthorizationEndPointUrl(const QString &authorization_end_point_url) {
    m_authorization_end_point_url = authorization_end_point_url;
    m_authorization_end_point_url_isSet = true;
}

bool OAIOpenIdIdpConfig::is_authorization_end_point_url_Set() const{
    return m_authorization_end_point_url_isSet;
}

bool OAIOpenIdIdpConfig::is_authorization_end_point_url_Valid() const{
    return m_authorization_end_point_url_isValid;
}

QString OAIOpenIdIdpConfig::getClientId() const {
    return m_client_id;
}
void OAIOpenIdIdpConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIOpenIdIdpConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIOpenIdIdpConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIOpenIdIdpConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIOpenIdIdpConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIOpenIdIdpConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIOpenIdIdpConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAIOpenIdIdpConfig::getFallbackMappingClaim() const {
    return m_fallback_mapping_claim;
}
void OAIOpenIdIdpConfig::setFallbackMappingClaim(const QString &fallback_mapping_claim) {
    m_fallback_mapping_claim = fallback_mapping_claim;
    m_fallback_mapping_claim_isSet = true;
}

bool OAIOpenIdIdpConfig::is_fallback_mapping_claim_Set() const{
    return m_fallback_mapping_claim_isSet;
}

bool OAIOpenIdIdpConfig::is_fallback_mapping_claim_Valid() const{
    return m_fallback_mapping_claim_isValid;
}

QString OAIOpenIdIdpConfig::getFlow() const {
    return m_flow;
}
void OAIOpenIdIdpConfig::setFlow(const QString &flow) {
    m_flow = flow;
    m_flow_isSet = true;
}

bool OAIOpenIdIdpConfig::is_flow_Set() const{
    return m_flow_isSet;
}

bool OAIOpenIdIdpConfig::is_flow_Valid() const{
    return m_flow_isValid;
}

qint32 OAIOpenIdIdpConfig::getId() const {
    return m_id;
}
void OAIOpenIdIdpConfig::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOpenIdIdpConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOpenIdIdpConfig::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOpenIdIdpConfig::getIssuer() const {
    return m_issuer;
}
void OAIOpenIdIdpConfig::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIOpenIdIdpConfig::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIOpenIdIdpConfig::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIOpenIdIdpConfig::getJwksEndPointUrl() const {
    return m_jwks_end_point_url;
}
void OAIOpenIdIdpConfig::setJwksEndPointUrl(const QString &jwks_end_point_url) {
    m_jwks_end_point_url = jwks_end_point_url;
    m_jwks_end_point_url_isSet = true;
}

bool OAIOpenIdIdpConfig::is_jwks_end_point_url_Set() const{
    return m_jwks_end_point_url_isSet;
}

bool OAIOpenIdIdpConfig::is_jwks_end_point_url_Valid() const{
    return m_jwks_end_point_url_isValid;
}

QString OAIOpenIdIdpConfig::getMappingClaim() const {
    return m_mapping_claim;
}
void OAIOpenIdIdpConfig::setMappingClaim(const QString &mapping_claim) {
    m_mapping_claim = mapping_claim;
    m_mapping_claim_isSet = true;
}

bool OAIOpenIdIdpConfig::is_mapping_claim_Set() const{
    return m_mapping_claim_isSet;
}

bool OAIOpenIdIdpConfig::is_mapping_claim_Valid() const{
    return m_mapping_claim_isValid;
}

QString OAIOpenIdIdpConfig::getName() const {
    return m_name;
}
void OAIOpenIdIdpConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOpenIdIdpConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOpenIdIdpConfig::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOpenIdIdpConfig::getPkceChallengeMethod() const {
    return m_pkce_challenge_method;
}
void OAIOpenIdIdpConfig::setPkceChallengeMethod(const QString &pkce_challenge_method) {
    m_pkce_challenge_method = pkce_challenge_method;
    m_pkce_challenge_method_isSet = true;
}

bool OAIOpenIdIdpConfig::is_pkce_challenge_method_Set() const{
    return m_pkce_challenge_method_isSet;
}

bool OAIOpenIdIdpConfig::is_pkce_challenge_method_Valid() const{
    return m_pkce_challenge_method_isValid;
}

bool OAIOpenIdIdpConfig::isPkceEnabled() const {
    return m_pkce_enabled;
}
void OAIOpenIdIdpConfig::setPkceEnabled(const bool &pkce_enabled) {
    m_pkce_enabled = pkce_enabled;
    m_pkce_enabled_isSet = true;
}

bool OAIOpenIdIdpConfig::is_pkce_enabled_Set() const{
    return m_pkce_enabled_isSet;
}

bool OAIOpenIdIdpConfig::is_pkce_enabled_Valid() const{
    return m_pkce_enabled_isValid;
}

QList<QString> OAIOpenIdIdpConfig::getRedirectUris() const {
    return m_redirect_uris;
}
void OAIOpenIdIdpConfig::setRedirectUris(const QList<QString> &redirect_uris) {
    m_redirect_uris = redirect_uris;
    m_redirect_uris_isSet = true;
}

bool OAIOpenIdIdpConfig::is_redirect_uris_Set() const{
    return m_redirect_uris_isSet;
}

bool OAIOpenIdIdpConfig::is_redirect_uris_Valid() const{
    return m_redirect_uris_isValid;
}

QList<QString> OAIOpenIdIdpConfig::getScopes() const {
    return m_scopes;
}
void OAIOpenIdIdpConfig::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIOpenIdIdpConfig::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIOpenIdIdpConfig::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIOpenIdIdpConfig::getTokenEndPointUrl() const {
    return m_token_end_point_url;
}
void OAIOpenIdIdpConfig::setTokenEndPointUrl(const QString &token_end_point_url) {
    m_token_end_point_url = token_end_point_url;
    m_token_end_point_url_isSet = true;
}

bool OAIOpenIdIdpConfig::is_token_end_point_url_Set() const{
    return m_token_end_point_url_isSet;
}

bool OAIOpenIdIdpConfig::is_token_end_point_url_Valid() const{
    return m_token_end_point_url_isValid;
}

bool OAIOpenIdIdpConfig::isUserImportEnabled() const {
    return m_user_import_enabled;
}
void OAIOpenIdIdpConfig::setUserImportEnabled(const bool &user_import_enabled) {
    m_user_import_enabled = user_import_enabled;
    m_user_import_enabled_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_import_enabled_Set() const{
    return m_user_import_enabled_isSet;
}

bool OAIOpenIdIdpConfig::is_user_import_enabled_Valid() const{
    return m_user_import_enabled_isValid;
}

qint64 OAIOpenIdIdpConfig::getUserImportGroup() const {
    return m_user_import_group;
}
void OAIOpenIdIdpConfig::setUserImportGroup(const qint64 &user_import_group) {
    m_user_import_group = user_import_group;
    m_user_import_group_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_import_group_Set() const{
    return m_user_import_group_isSet;
}

bool OAIOpenIdIdpConfig::is_user_import_group_Valid() const{
    return m_user_import_group_isValid;
}

QString OAIOpenIdIdpConfig::getUserInfoEndPointUrl() const {
    return m_user_info_end_point_url;
}
void OAIOpenIdIdpConfig::setUserInfoEndPointUrl(const QString &user_info_end_point_url) {
    m_user_info_end_point_url = user_info_end_point_url;
    m_user_info_end_point_url_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_info_end_point_url_Set() const{
    return m_user_info_end_point_url_isSet;
}

bool OAIOpenIdIdpConfig::is_user_info_end_point_url_Valid() const{
    return m_user_info_end_point_url_isValid;
}

QString OAIOpenIdIdpConfig::getUserInfoSource() const {
    return m_user_info_source;
}
void OAIOpenIdIdpConfig::setUserInfoSource(const QString &user_info_source) {
    m_user_info_source = user_info_source;
    m_user_info_source_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_info_source_Set() const{
    return m_user_info_source_isSet;
}

bool OAIOpenIdIdpConfig::is_user_info_source_Valid() const{
    return m_user_info_source_isValid;
}

QString OAIOpenIdIdpConfig::getUserManagementUrl() const {
    return m_user_management_url;
}
void OAIOpenIdIdpConfig::setUserManagementUrl(const QString &user_management_url) {
    m_user_management_url = user_management_url;
    m_user_management_url_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_management_url_Set() const{
    return m_user_management_url_isSet;
}

bool OAIOpenIdIdpConfig::is_user_management_url_Valid() const{
    return m_user_management_url_isValid;
}

bool OAIOpenIdIdpConfig::isUserUpdateEnabled() const {
    return m_user_update_enabled;
}
void OAIOpenIdIdpConfig::setUserUpdateEnabled(const bool &user_update_enabled) {
    m_user_update_enabled = user_update_enabled;
    m_user_update_enabled_isSet = true;
}

bool OAIOpenIdIdpConfig::is_user_update_enabled_Set() const{
    return m_user_update_enabled_isSet;
}

bool OAIOpenIdIdpConfig::is_user_update_enabled_Valid() const{
    return m_user_update_enabled_isValid;
}

bool OAIOpenIdIdpConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_end_point_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_mapping_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwks_end_point_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mapping_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkce_challenge_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pkce_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_end_point_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_import_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_import_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_end_point_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_info_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_management_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_update_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOpenIdIdpConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
