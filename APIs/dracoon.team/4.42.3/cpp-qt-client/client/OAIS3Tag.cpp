/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Tag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Tag::OAIS3Tag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Tag::OAIS3Tag() {
    this->initializeModel();
}

OAIS3Tag::~OAIS3Tag() {}

void OAIS3Tag::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_mandatory_isSet = false;
    m_is_mandatory_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIS3Tag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Tag::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_mandatory_isValid = ::OpenAPI::fromJsonValue(m_is_mandatory, json[QString("isMandatory")]);
    m_is_mandatory_isSet = !json[QString("isMandatory")].isNull() && m_is_mandatory_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIS3Tag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Tag::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_mandatory_isSet) {
        obj.insert(QString("isMandatory"), ::OpenAPI::toJsonValue(m_is_mandatory));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAIS3Tag::getId() const {
    return m_id;
}
void OAIS3Tag::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIS3Tag::is_id_Set() const{
    return m_id_isSet;
}

bool OAIS3Tag::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIS3Tag::isIsMandatory() const {
    return m_is_mandatory;
}
void OAIS3Tag::setIsMandatory(const bool &is_mandatory) {
    m_is_mandatory = is_mandatory;
    m_is_mandatory_isSet = true;
}

bool OAIS3Tag::is_is_mandatory_Set() const{
    return m_is_mandatory_isSet;
}

bool OAIS3Tag::is_is_mandatory_Valid() const{
    return m_is_mandatory_isValid;
}

QString OAIS3Tag::getKey() const {
    return m_key;
}
void OAIS3Tag::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIS3Tag::is_key_Set() const{
    return m_key_isSet;
}

bool OAIS3Tag::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIS3Tag::getValue() const {
    return m_value;
}
void OAIS3Tag::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIS3Tag::is_value_Set() const{
    return m_value_isSet;
}

bool OAIS3Tag::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIS3Tag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mandatory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Tag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
