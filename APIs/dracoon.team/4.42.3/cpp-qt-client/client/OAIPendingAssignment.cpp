/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPendingAssignment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPendingAssignment::OAIPendingAssignment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPendingAssignment::OAIPendingAssignment() {
    this->initializeModel();
}

OAIPendingAssignment::~OAIPendingAssignment() {}

void OAIPendingAssignment::initializeModel() {

    m_group_id_isSet = false;
    m_group_id_isValid = false;

    m_room_id_isSet = false;
    m_room_id_isValid = false;

    m_room_name_isSet = false;
    m_room_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPendingAssignment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPendingAssignment::fromJsonObject(QJsonObject json) {

    m_group_id_isValid = ::OpenAPI::fromJsonValue(m_group_id, json[QString("groupId")]);
    m_group_id_isSet = !json[QString("groupId")].isNull() && m_group_id_isValid;

    m_room_id_isValid = ::OpenAPI::fromJsonValue(m_room_id, json[QString("roomId")]);
    m_room_id_isSet = !json[QString("roomId")].isNull() && m_room_id_isValid;

    m_room_name_isValid = ::OpenAPI::fromJsonValue(m_room_name, json[QString("roomName")]);
    m_room_name_isSet = !json[QString("roomName")].isNull() && m_room_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIPendingAssignment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPendingAssignment::asJsonObject() const {
    QJsonObject obj;
    if (m_group_id_isSet) {
        obj.insert(QString("groupId"), ::OpenAPI::toJsonValue(m_group_id));
    }
    if (m_room_id_isSet) {
        obj.insert(QString("roomId"), ::OpenAPI::toJsonValue(m_room_id));
    }
    if (m_room_name_isSet) {
        obj.insert(QString("roomName"), ::OpenAPI::toJsonValue(m_room_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIPendingAssignment::getGroupId() const {
    return m_group_id;
}
void OAIPendingAssignment::setGroupId(const qint64 &group_id) {
    m_group_id = group_id;
    m_group_id_isSet = true;
}

bool OAIPendingAssignment::is_group_id_Set() const{
    return m_group_id_isSet;
}

bool OAIPendingAssignment::is_group_id_Valid() const{
    return m_group_id_isValid;
}

qint64 OAIPendingAssignment::getRoomId() const {
    return m_room_id;
}
void OAIPendingAssignment::setRoomId(const qint64 &room_id) {
    m_room_id = room_id;
    m_room_id_isSet = true;
}

bool OAIPendingAssignment::is_room_id_Set() const{
    return m_room_id_isSet;
}

bool OAIPendingAssignment::is_room_id_Valid() const{
    return m_room_id_isValid;
}

QString OAIPendingAssignment::getRoomName() const {
    return m_room_name;
}
void OAIPendingAssignment::setRoomName(const QString &room_name) {
    m_room_name = room_name;
    m_room_name_isSet = true;
}

bool OAIPendingAssignment::is_room_name_Set() const{
    return m_room_name_isSet;
}

bool OAIPendingAssignment::is_room_name_Valid() const{
    return m_room_name_isValid;
}

QString OAIPendingAssignment::getState() const {
    return m_state;
}
void OAIPendingAssignment::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPendingAssignment::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPendingAssignment::is_state_Valid() const{
    return m_state_isValid;
}

qint64 OAIPendingAssignment::getUserId() const {
    return m_user_id;
}
void OAIPendingAssignment::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPendingAssignment::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPendingAssignment::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPendingAssignment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPendingAssignment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_id_isValid && m_room_id_isValid && m_room_name_isValid && m_state_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
