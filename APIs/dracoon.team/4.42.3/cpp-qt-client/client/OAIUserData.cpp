/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserData::OAIUserData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserData::OAIUserData() {
    this->initializeModel();
}

OAIUserData::~OAIUserData() {}

void OAIUserData::initializeModel() {

    m_auth_data_isSet = false;
    m_auth_data_isValid = false;

    m_auth_methods_isSet = false;
    m_auth_methods_isValid = false;

    m_avatar_uuid_isSet = false;
    m_avatar_uuid_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_has_manageable_rooms_isSet = false;
    m_has_manageable_rooms_isValid = false;

    m_home_room_id_isSet = false;
    m_home_room_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_encryption_enabled_isSet = false;
    m_is_encryption_enabled_isValid = false;

    m_is_locked_isSet = false;
    m_is_locked_isValid = false;

    m_is_mfa_enabled_isSet = false;
    m_is_mfa_enabled_isValid = false;

    m_is_mfa_enforced_isSet = false;
    m_is_mfa_enforced_isValid = false;

    m_last_login_success_at_isSet = false;
    m_last_login_success_at_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_lock_status_isSet = false;
    m_lock_status_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_public_key_container_isSet = false;
    m_public_key_container_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_attributes_isSet = false;
    m_user_attributes_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;

    m_user_roles_isSet = false;
    m_user_roles_isValid = false;
}

void OAIUserData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserData::fromJsonObject(QJsonObject json) {

    m_auth_data_isValid = ::OpenAPI::fromJsonValue(m_auth_data, json[QString("authData")]);
    m_auth_data_isSet = !json[QString("authData")].isNull() && m_auth_data_isValid;

    m_auth_methods_isValid = ::OpenAPI::fromJsonValue(m_auth_methods, json[QString("authMethods")]);
    m_auth_methods_isSet = !json[QString("authMethods")].isNull() && m_auth_methods_isValid;

    m_avatar_uuid_isValid = ::OpenAPI::fromJsonValue(m_avatar_uuid, json[QString("avatarUuid")]);
    m_avatar_uuid_isSet = !json[QString("avatarUuid")].isNull() && m_avatar_uuid_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_has_manageable_rooms_isValid = ::OpenAPI::fromJsonValue(m_has_manageable_rooms, json[QString("hasManageableRooms")]);
    m_has_manageable_rooms_isSet = !json[QString("hasManageableRooms")].isNull() && m_has_manageable_rooms_isValid;

    m_home_room_id_isValid = ::OpenAPI::fromJsonValue(m_home_room_id, json[QString("homeRoomId")]);
    m_home_room_id_isSet = !json[QString("homeRoomId")].isNull() && m_home_room_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_encryption_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_encryption_enabled, json[QString("isEncryptionEnabled")]);
    m_is_encryption_enabled_isSet = !json[QString("isEncryptionEnabled")].isNull() && m_is_encryption_enabled_isValid;

    m_is_locked_isValid = ::OpenAPI::fromJsonValue(m_is_locked, json[QString("isLocked")]);
    m_is_locked_isSet = !json[QString("isLocked")].isNull() && m_is_locked_isValid;

    m_is_mfa_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_mfa_enabled, json[QString("isMfaEnabled")]);
    m_is_mfa_enabled_isSet = !json[QString("isMfaEnabled")].isNull() && m_is_mfa_enabled_isValid;

    m_is_mfa_enforced_isValid = ::OpenAPI::fromJsonValue(m_is_mfa_enforced, json[QString("isMfaEnforced")]);
    m_is_mfa_enforced_isSet = !json[QString("isMfaEnforced")].isNull() && m_is_mfa_enforced_isValid;

    m_last_login_success_at_isValid = ::OpenAPI::fromJsonValue(m_last_login_success_at, json[QString("lastLoginSuccessAt")]);
    m_last_login_success_at_isSet = !json[QString("lastLoginSuccessAt")].isNull() && m_last_login_success_at_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_lock_status_isValid = ::OpenAPI::fromJsonValue(m_lock_status, json[QString("lockStatus")]);
    m_lock_status_isSet = !json[QString("lockStatus")].isNull() && m_lock_status_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_public_key_container_isValid = ::OpenAPI::fromJsonValue(m_public_key_container, json[QString("publicKeyContainer")]);
    m_public_key_container_isSet = !json[QString("publicKeyContainer")].isNull() && m_public_key_container_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_attributes_isValid = ::OpenAPI::fromJsonValue(m_user_attributes, json[QString("userAttributes")]);
    m_user_attributes_isSet = !json[QString("userAttributes")].isNull() && m_user_attributes_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;

    m_user_roles_isValid = ::OpenAPI::fromJsonValue(m_user_roles, json[QString("userRoles")]);
    m_user_roles_isSet = !json[QString("userRoles")].isNull() && m_user_roles_isValid;
}

QString OAIUserData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserData::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_data.isSet()) {
        obj.insert(QString("authData"), ::OpenAPI::toJsonValue(m_auth_data));
    }
    if (m_auth_methods.size() > 0) {
        obj.insert(QString("authMethods"), ::OpenAPI::toJsonValue(m_auth_methods));
    }
    if (m_avatar_uuid_isSet) {
        obj.insert(QString("avatarUuid"), ::OpenAPI::toJsonValue(m_avatar_uuid));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_has_manageable_rooms_isSet) {
        obj.insert(QString("hasManageableRooms"), ::OpenAPI::toJsonValue(m_has_manageable_rooms));
    }
    if (m_home_room_id_isSet) {
        obj.insert(QString("homeRoomId"), ::OpenAPI::toJsonValue(m_home_room_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_encryption_enabled_isSet) {
        obj.insert(QString("isEncryptionEnabled"), ::OpenAPI::toJsonValue(m_is_encryption_enabled));
    }
    if (m_is_locked_isSet) {
        obj.insert(QString("isLocked"), ::OpenAPI::toJsonValue(m_is_locked));
    }
    if (m_is_mfa_enabled_isSet) {
        obj.insert(QString("isMfaEnabled"), ::OpenAPI::toJsonValue(m_is_mfa_enabled));
    }
    if (m_is_mfa_enforced_isSet) {
        obj.insert(QString("isMfaEnforced"), ::OpenAPI::toJsonValue(m_is_mfa_enforced));
    }
    if (m_last_login_success_at_isSet) {
        obj.insert(QString("lastLoginSuccessAt"), ::OpenAPI::toJsonValue(m_last_login_success_at));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_lock_status_isSet) {
        obj.insert(QString("lockStatus"), ::OpenAPI::toJsonValue(m_lock_status));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_public_key_container.isSet()) {
        obj.insert(QString("publicKeyContainer"), ::OpenAPI::toJsonValue(m_public_key_container));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_attributes.isSet()) {
        obj.insert(QString("userAttributes"), ::OpenAPI::toJsonValue(m_user_attributes));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    if (m_user_roles.isSet()) {
        obj.insert(QString("userRoles"), ::OpenAPI::toJsonValue(m_user_roles));
    }
    return obj;
}

OAIUserAuthData OAIUserData::getAuthData() const {
    return m_auth_data;
}
void OAIUserData::setAuthData(const OAIUserAuthData &auth_data) {
    m_auth_data = auth_data;
    m_auth_data_isSet = true;
}

bool OAIUserData::is_auth_data_Set() const{
    return m_auth_data_isSet;
}

bool OAIUserData::is_auth_data_Valid() const{
    return m_auth_data_isValid;
}

QList<OAIUserAuthMethod> OAIUserData::getAuthMethods() const {
    return m_auth_methods;
}
void OAIUserData::setAuthMethods(const QList<OAIUserAuthMethod> &auth_methods) {
    m_auth_methods = auth_methods;
    m_auth_methods_isSet = true;
}

bool OAIUserData::is_auth_methods_Set() const{
    return m_auth_methods_isSet;
}

bool OAIUserData::is_auth_methods_Valid() const{
    return m_auth_methods_isValid;
}

QString OAIUserData::getAvatarUuid() const {
    return m_avatar_uuid;
}
void OAIUserData::setAvatarUuid(const QString &avatar_uuid) {
    m_avatar_uuid = avatar_uuid;
    m_avatar_uuid_isSet = true;
}

bool OAIUserData::is_avatar_uuid_Set() const{
    return m_avatar_uuid_isSet;
}

bool OAIUserData::is_avatar_uuid_Valid() const{
    return m_avatar_uuid_isValid;
}

QString OAIUserData::getEmail() const {
    return m_email;
}
void OAIUserData::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserData::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserData::is_email_Valid() const{
    return m_email_isValid;
}

QDateTime OAIUserData::getExpireAt() const {
    return m_expire_at;
}
void OAIUserData::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIUserData::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIUserData::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

QString OAIUserData::getFirstName() const {
    return m_first_name;
}
void OAIUserData::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserData::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserData::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserData::getGender() const {
    return m_gender;
}
void OAIUserData::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIUserData::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIUserData::is_gender_Valid() const{
    return m_gender_isValid;
}

bool OAIUserData::isHasManageableRooms() const {
    return m_has_manageable_rooms;
}
void OAIUserData::setHasManageableRooms(const bool &has_manageable_rooms) {
    m_has_manageable_rooms = has_manageable_rooms;
    m_has_manageable_rooms_isSet = true;
}

bool OAIUserData::is_has_manageable_rooms_Set() const{
    return m_has_manageable_rooms_isSet;
}

bool OAIUserData::is_has_manageable_rooms_Valid() const{
    return m_has_manageable_rooms_isValid;
}

qint64 OAIUserData::getHomeRoomId() const {
    return m_home_room_id;
}
void OAIUserData::setHomeRoomId(const qint64 &home_room_id) {
    m_home_room_id = home_room_id;
    m_home_room_id_isSet = true;
}

bool OAIUserData::is_home_room_id_Set() const{
    return m_home_room_id_isSet;
}

bool OAIUserData::is_home_room_id_Valid() const{
    return m_home_room_id_isValid;
}

qint64 OAIUserData::getId() const {
    return m_id;
}
void OAIUserData::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserData::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserData::isIsEncryptionEnabled() const {
    return m_is_encryption_enabled;
}
void OAIUserData::setIsEncryptionEnabled(const bool &is_encryption_enabled) {
    m_is_encryption_enabled = is_encryption_enabled;
    m_is_encryption_enabled_isSet = true;
}

bool OAIUserData::is_is_encryption_enabled_Set() const{
    return m_is_encryption_enabled_isSet;
}

bool OAIUserData::is_is_encryption_enabled_Valid() const{
    return m_is_encryption_enabled_isValid;
}

bool OAIUserData::isIsLocked() const {
    return m_is_locked;
}
void OAIUserData::setIsLocked(const bool &is_locked) {
    m_is_locked = is_locked;
    m_is_locked_isSet = true;
}

bool OAIUserData::is_is_locked_Set() const{
    return m_is_locked_isSet;
}

bool OAIUserData::is_is_locked_Valid() const{
    return m_is_locked_isValid;
}

bool OAIUserData::isIsMfaEnabled() const {
    return m_is_mfa_enabled;
}
void OAIUserData::setIsMfaEnabled(const bool &is_mfa_enabled) {
    m_is_mfa_enabled = is_mfa_enabled;
    m_is_mfa_enabled_isSet = true;
}

bool OAIUserData::is_is_mfa_enabled_Set() const{
    return m_is_mfa_enabled_isSet;
}

bool OAIUserData::is_is_mfa_enabled_Valid() const{
    return m_is_mfa_enabled_isValid;
}

bool OAIUserData::isIsMfaEnforced() const {
    return m_is_mfa_enforced;
}
void OAIUserData::setIsMfaEnforced(const bool &is_mfa_enforced) {
    m_is_mfa_enforced = is_mfa_enforced;
    m_is_mfa_enforced_isSet = true;
}

bool OAIUserData::is_is_mfa_enforced_Set() const{
    return m_is_mfa_enforced_isSet;
}

bool OAIUserData::is_is_mfa_enforced_Valid() const{
    return m_is_mfa_enforced_isValid;
}

QDateTime OAIUserData::getLastLoginSuccessAt() const {
    return m_last_login_success_at;
}
void OAIUserData::setLastLoginSuccessAt(const QDateTime &last_login_success_at) {
    m_last_login_success_at = last_login_success_at;
    m_last_login_success_at_isSet = true;
}

bool OAIUserData::is_last_login_success_at_Set() const{
    return m_last_login_success_at_isSet;
}

bool OAIUserData::is_last_login_success_at_Valid() const{
    return m_last_login_success_at_isValid;
}

QString OAIUserData::getLastName() const {
    return m_last_name;
}
void OAIUserData::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserData::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserData::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIUserData::getLockStatus() const {
    return m_lock_status;
}
void OAIUserData::setLockStatus(const qint32 &lock_status) {
    m_lock_status = lock_status;
    m_lock_status_isSet = true;
}

bool OAIUserData::is_lock_status_Set() const{
    return m_lock_status_isSet;
}

bool OAIUserData::is_lock_status_Valid() const{
    return m_lock_status_isValid;
}

QString OAIUserData::getLogin() const {
    return m_login;
}
void OAIUserData::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAIUserData::is_login_Set() const{
    return m_login_isSet;
}

bool OAIUserData::is_login_Valid() const{
    return m_login_isValid;
}

QString OAIUserData::getPhone() const {
    return m_phone;
}
void OAIUserData::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIUserData::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIUserData::is_phone_Valid() const{
    return m_phone_isValid;
}

OAIPublicKeyContainer OAIUserData::getPublicKeyContainer() const {
    return m_public_key_container;
}
void OAIUserData::setPublicKeyContainer(const OAIPublicKeyContainer &public_key_container) {
    m_public_key_container = public_key_container;
    m_public_key_container_isSet = true;
}

bool OAIUserData::is_public_key_container_Set() const{
    return m_public_key_container_isSet;
}

bool OAIUserData::is_public_key_container_Valid() const{
    return m_public_key_container_isValid;
}

QString OAIUserData::getTitle() const {
    return m_title;
}
void OAIUserData::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUserData::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUserData::is_title_Valid() const{
    return m_title_isValid;
}

OAIUserAttributes OAIUserData::getUserAttributes() const {
    return m_user_attributes;
}
void OAIUserData::setUserAttributes(const OAIUserAttributes &user_attributes) {
    m_user_attributes = user_attributes;
    m_user_attributes_isSet = true;
}

bool OAIUserData::is_user_attributes_Set() const{
    return m_user_attributes_isSet;
}

bool OAIUserData::is_user_attributes_Valid() const{
    return m_user_attributes_isValid;
}

QString OAIUserData::getUserName() const {
    return m_user_name;
}
void OAIUserData::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIUserData::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIUserData::is_user_name_Valid() const{
    return m_user_name_isValid;
}

OAIRoleList OAIUserData::getUserRoles() const {
    return m_user_roles;
}
void OAIUserData::setUserRoles(const OAIRoleList &user_roles) {
    m_user_roles = user_roles;
    m_user_roles_isSet = true;
}

bool OAIUserData::is_user_roles_Set() const{
    return m_user_roles_isSet;
}

bool OAIUserData::is_user_roles_Valid() const{
    return m_user_roles_isValid;
}

bool OAIUserData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_manageable_rooms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_room_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encryption_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_locked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mfa_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mfa_enforced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_login_success_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lock_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_container.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_data_isValid && m_avatar_uuid_isValid && m_first_name_isValid && m_id_isValid && m_is_locked_isValid && m_last_name_isValid && m_lock_status_isValid && m_user_name_isValid && true;
}

} // namespace OpenAPI
