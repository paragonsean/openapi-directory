/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginRequest::OAILoginRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginRequest::OAILoginRequest() {
    this->initializeModel();
}

OAILoginRequest::~OAILoginRequest() {}

void OAILoginRequest::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_login_isSet = false;
    m_login_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAILoginRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginRequest::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_login_isValid = ::OpenAPI::fromJsonValue(m_login, json[QString("login")]);
    m_login_isSet = !json[QString("login")].isNull() && m_login_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAILoginRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_login_isSet) {
        obj.insert(QString("login"), ::OpenAPI::toJsonValue(m_login));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAILoginRequest::getAuthType() const {
    return m_auth_type;
}
void OAILoginRequest::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAILoginRequest::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAILoginRequest::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAILoginRequest::getLanguage() const {
    return m_language;
}
void OAILoginRequest::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILoginRequest::is_language_Set() const{
    return m_language_isSet;
}

bool OAILoginRequest::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILoginRequest::getLogin() const {
    return m_login;
}
void OAILoginRequest::setLogin(const QString &login) {
    m_login = login;
    m_login_isSet = true;
}

bool OAILoginRequest::is_login_Set() const{
    return m_login_isSet;
}

bool OAILoginRequest::is_login_Valid() const{
    return m_login_isValid;
}

QString OAILoginRequest::getPassword() const {
    return m_password;
}
void OAILoginRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAILoginRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAILoginRequest::is_password_Valid() const{
    return m_password_isValid;
}

QString OAILoginRequest::getState() const {
    return m_state;
}
void OAILoginRequest::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILoginRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAILoginRequest::is_state_Valid() const{
    return m_state_isValid;
}

QString OAILoginRequest::getToken() const {
    return m_token;
}
void OAILoginRequest::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAILoginRequest::is_token_Set() const{
    return m_token_isSet;
}

bool OAILoginRequest::is_token_Valid() const{
    return m_token_isValid;
}

QString OAILoginRequest::getUserName() const {
    return m_user_name;
}
void OAILoginRequest::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAILoginRequest::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAILoginRequest::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAILoginRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_password_isValid && true;
}

} // namespace OpenAPI
