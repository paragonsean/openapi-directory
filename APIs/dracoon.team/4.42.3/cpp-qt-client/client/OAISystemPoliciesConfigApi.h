/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemPoliciesConfigApi_H
#define OAI_OAISystemPoliciesConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClassificationPoliciesConfig.h"
#include "OAIErrorResponse.h"
#include "OAIGuestUsersPoliciesConfig.h"
#include "OAIMfaPoliciesConfig.h"
#include "OAIPasswordPoliciesConfig.h"
#include "OAIUpdateClassificationPoliciesConfig.h"
#include "OAIUpdateGuestUsersPoliciesConfig.h"
#include "OAIUpdateMfaPoliciesConfig.h"
#include "OAIUpdatePasswordPoliciesConfig.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemPoliciesConfigApi : public QObject {
    Q_OBJECT

public:
    OAISystemPoliciesConfigApi(const int timeOut = 0);
    ~OAISystemPoliciesConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_update_classification_policies_config OAIUpdateClassificationPoliciesConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changeClassificationPoliciesConfig(const OAIUpdateClassificationPoliciesConfig &oai_update_classification_policies_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_guest_users_policies_config OAIUpdateGuestUsersPoliciesConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changeGuestUsersPoliciesConfig(const OAIUpdateGuestUsersPoliciesConfig &oai_update_guest_users_policies_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_mfa_policies_config OAIUpdateMfaPoliciesConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changeMfaPoliciesConfig(const OAIUpdateMfaPoliciesConfig &oai_update_mfa_policies_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_password_policies_config OAIUpdatePasswordPoliciesConfig [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changePasswordPoliciesConfig(const OAIUpdatePasswordPoliciesConfig &oai_update_password_policies_config, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void enforceLoginPasswordChange(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestClassificationPoliciesConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestGuestUsersPoliciesConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestMfaPoliciesConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestPasswordPoliciesConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  password_type QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestPasswordPoliciesForPasswordType(const QString &password_type, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void changeClassificationPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void changeGuestUsersPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void changeMfaPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void changePasswordPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void enforceLoginPasswordChangeCallback(OAIHttpRequestWorker *worker);
    void requestClassificationPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void requestGuestUsersPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void requestMfaPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void requestPasswordPoliciesConfigCallback(OAIHttpRequestWorker *worker);
    void requestPasswordPoliciesForPasswordTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void changeClassificationPoliciesConfigSignal(OAIClassificationPoliciesConfig summary);
    void changeGuestUsersPoliciesConfigSignal(OAIGuestUsersPoliciesConfig summary);
    void changeMfaPoliciesConfigSignal(OAIMfaPoliciesConfig summary);
    void changePasswordPoliciesConfigSignal(OAIPasswordPoliciesConfig summary);
    void enforceLoginPasswordChangeSignal();
    void requestClassificationPoliciesConfigSignal(OAIClassificationPoliciesConfig summary);
    void requestGuestUsersPoliciesConfigSignal(OAIGuestUsersPoliciesConfig summary);
    void requestMfaPoliciesConfigSignal(OAIMfaPoliciesConfig summary);
    void requestPasswordPoliciesConfigSignal(OAIPasswordPoliciesConfig summary);
    void requestPasswordPoliciesForPasswordTypeSignal(OAIPasswordPoliciesConfig summary);


    void changeClassificationPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIClassificationPoliciesConfig summary);
    void changeGuestUsersPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIGuestUsersPoliciesConfig summary);
    void changeMfaPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIMfaPoliciesConfig summary);
    void changePasswordPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIPasswordPoliciesConfig summary);
    void enforceLoginPasswordChangeSignalFull(OAIHttpRequestWorker *worker);
    void requestClassificationPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIClassificationPoliciesConfig summary);
    void requestGuestUsersPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIGuestUsersPoliciesConfig summary);
    void requestMfaPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIMfaPoliciesConfig summary);
    void requestPasswordPoliciesConfigSignalFull(OAIHttpRequestWorker *worker, OAIPasswordPoliciesConfig summary);
    void requestPasswordPoliciesForPasswordTypeSignalFull(OAIHttpRequestWorker *worker, OAIPasswordPoliciesConfig summary);

    Q_DECL_DEPRECATED_X("Use changeClassificationPoliciesConfigSignalError() instead")
    void changeClassificationPoliciesConfigSignalE(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeClassificationPoliciesConfigSignalError(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeGuestUsersPoliciesConfigSignalError() instead")
    void changeGuestUsersPoliciesConfigSignalE(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeGuestUsersPoliciesConfigSignalError(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMfaPoliciesConfigSignalError() instead")
    void changeMfaPoliciesConfigSignalE(OAIMfaPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changeMfaPoliciesConfigSignalError(OAIMfaPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordPoliciesConfigSignalError() instead")
    void changePasswordPoliciesConfigSignalE(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordPoliciesConfigSignalError(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enforceLoginPasswordChangeSignalError() instead")
    void enforceLoginPasswordChangeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enforceLoginPasswordChangeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestClassificationPoliciesConfigSignalError() instead")
    void requestClassificationPoliciesConfigSignalE(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestClassificationPoliciesConfigSignalError(OAIClassificationPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGuestUsersPoliciesConfigSignalError() instead")
    void requestGuestUsersPoliciesConfigSignalE(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGuestUsersPoliciesConfigSignalError(OAIGuestUsersPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestMfaPoliciesConfigSignalError() instead")
    void requestMfaPoliciesConfigSignalE(OAIMfaPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestMfaPoliciesConfigSignalError(OAIMfaPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesConfigSignalError() instead")
    void requestPasswordPoliciesConfigSignalE(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesConfigSignalError(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesForPasswordTypeSignalError() instead")
    void requestPasswordPoliciesForPasswordTypeSignalE(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesForPasswordTypeSignalError(OAIPasswordPoliciesConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use changeClassificationPoliciesConfigSignalErrorFull() instead")
    void changeClassificationPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeClassificationPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeGuestUsersPoliciesConfigSignalErrorFull() instead")
    void changeGuestUsersPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeGuestUsersPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changeMfaPoliciesConfigSignalErrorFull() instead")
    void changeMfaPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changeMfaPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePasswordPoliciesConfigSignalErrorFull() instead")
    void changePasswordPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePasswordPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enforceLoginPasswordChangeSignalErrorFull() instead")
    void enforceLoginPasswordChangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enforceLoginPasswordChangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestClassificationPoliciesConfigSignalErrorFull() instead")
    void requestClassificationPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestClassificationPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestGuestUsersPoliciesConfigSignalErrorFull() instead")
    void requestGuestUsersPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestGuestUsersPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestMfaPoliciesConfigSignalErrorFull() instead")
    void requestMfaPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestMfaPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesConfigSignalErrorFull() instead")
    void requestPasswordPoliciesConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPasswordPoliciesForPasswordTypeSignalErrorFull() instead")
    void requestPasswordPoliciesForPasswordTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPasswordPoliciesForPasswordTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
