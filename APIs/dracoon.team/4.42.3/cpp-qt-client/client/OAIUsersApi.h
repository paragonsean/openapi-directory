/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttributesResponse.h"
#include "OAICreateUserRequest.h"
#include "OAIEmergencyMfaCodeResponse.h"
#include "OAIErrorResponse.h"
#include "OAILastAdminUserRoomList.h"
#include "OAIResetPassword_400_response.h"
#include "OAIRoleList.h"
#include "OAIRoomTreeDataList.h"
#include "OAIUpdateUserRequest.h"
#include "OAIUserAttributes.h"
#include "OAIUserData.h"
#include "OAIUserGroupList.h"
#include "OAIUserList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_user_request OAICreateUserRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createUser(const OAICreateUserRequest &oai_create_user_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeUser(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  key QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeUserAttribute(const qint64 &user_id, const QString &key, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestEmergencyMfaCode(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestLastAdminRoomsUsers(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  effective_roles bool [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUser(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &effective_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserAttributes(const qint64 &user_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserGroups(const qint64 &user_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserRoles(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  include_attributes bool [optional]
    * @param[in]  include_roles bool [optional]
    * @param[in]  include_manageable_rooms bool [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUsers(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_attributes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_roles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_manageable_rooms = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestUsersRooms(const qint64 &user_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_user_attributes OAIUserAttributes [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void setUserAttributes(const qint64 &user_id, const OAIUserAttributes &oai_user_attributes, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_update_user_request OAIUpdateUserRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateUser(const qint64 &user_id, const OAIUpdateUserRequest &oai_update_user_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id qint64 [required]
    * @param[in]  oai_user_attributes OAIUserAttributes [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateUserAttributes(const qint64 &user_id, const OAIUserAttributes &oai_user_attributes, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUserCallback(OAIHttpRequestWorker *worker);
    void removeUserCallback(OAIHttpRequestWorker *worker);
    void removeUserAttributeCallback(OAIHttpRequestWorker *worker);
    void requestEmergencyMfaCodeCallback(OAIHttpRequestWorker *worker);
    void requestLastAdminRoomsUsersCallback(OAIHttpRequestWorker *worker);
    void requestUserCallback(OAIHttpRequestWorker *worker);
    void requestUserAttributesCallback(OAIHttpRequestWorker *worker);
    void requestUserGroupsCallback(OAIHttpRequestWorker *worker);
    void requestUserRolesCallback(OAIHttpRequestWorker *worker);
    void requestUsersCallback(OAIHttpRequestWorker *worker);
    void requestUsersRoomsCallback(OAIHttpRequestWorker *worker);
    void setUserAttributesCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUserAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUserSignal(OAIUserData summary);
    void removeUserSignal();
    void removeUserAttributeSignal();
    void requestEmergencyMfaCodeSignal(OAIEmergencyMfaCodeResponse summary);
    void requestLastAdminRoomsUsersSignal(OAILastAdminUserRoomList summary);
    void requestUserSignal(OAIUserData summary);
    void requestUserAttributesSignal(OAIAttributesResponse summary);
    void requestUserGroupsSignal(OAIUserGroupList summary);
    void requestUserRolesSignal(OAIRoleList summary);
    void requestUsersSignal(OAIUserList summary);
    void requestUsersRoomsSignal(OAIRoomTreeDataList summary);
    void setUserAttributesSignal(OAIUserData summary);
    void updateUserSignal(OAIUserData summary);
    void updateUserAttributesSignal(OAIUserData summary);


    void createUserSignalFull(OAIHttpRequestWorker *worker, OAIUserData summary);
    void removeUserSignalFull(OAIHttpRequestWorker *worker);
    void removeUserAttributeSignalFull(OAIHttpRequestWorker *worker);
    void requestEmergencyMfaCodeSignalFull(OAIHttpRequestWorker *worker, OAIEmergencyMfaCodeResponse summary);
    void requestLastAdminRoomsUsersSignalFull(OAIHttpRequestWorker *worker, OAILastAdminUserRoomList summary);
    void requestUserSignalFull(OAIHttpRequestWorker *worker, OAIUserData summary);
    void requestUserAttributesSignalFull(OAIHttpRequestWorker *worker, OAIAttributesResponse summary);
    void requestUserGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUserGroupList summary);
    void requestUserRolesSignalFull(OAIHttpRequestWorker *worker, OAIRoleList summary);
    void requestUsersSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void requestUsersRoomsSignalFull(OAIHttpRequestWorker *worker, OAIRoomTreeDataList summary);
    void setUserAttributesSignalFull(OAIHttpRequestWorker *worker, OAIUserData summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUserData summary);
    void updateUserAttributesSignalFull(OAIHttpRequestWorker *worker, OAIUserData summary);

    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAIUserData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAIUserData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalError() instead")
    void removeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserAttributeSignalError() instead")
    void removeUserAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEmergencyMfaCodeSignalError() instead")
    void requestEmergencyMfaCodeSignalE(OAIEmergencyMfaCodeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestEmergencyMfaCodeSignalError(OAIEmergencyMfaCodeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestLastAdminRoomsUsersSignalError() instead")
    void requestLastAdminRoomsUsersSignalE(OAILastAdminUserRoomList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestLastAdminRoomsUsersSignalError(OAILastAdminUserRoomList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserSignalError() instead")
    void requestUserSignalE(OAIUserData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserSignalError(OAIUserData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserAttributesSignalError() instead")
    void requestUserAttributesSignalE(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserAttributesSignalError(OAIAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserGroupsSignalError() instead")
    void requestUserGroupsSignalE(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserGroupsSignalError(OAIUserGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserRolesSignalError() instead")
    void requestUserRolesSignalE(OAIRoleList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserRolesSignalError(OAIRoleList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUsersSignalError() instead")
    void requestUsersSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUsersSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUsersRoomsSignalError() instead")
    void requestUsersRoomsSignalE(OAIRoomTreeDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUsersRoomsSignalError(OAIRoomTreeDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserAttributesSignalError() instead")
    void setUserAttributesSignalE(OAIUserData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserAttributesSignalError(OAIUserData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUserData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUserData summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAttributesSignalError() instead")
    void updateUserAttributesSignalE(OAIUserData summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAttributesSignalError(OAIUserData summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserSignalErrorFull() instead")
    void removeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeUserAttributeSignalErrorFull() instead")
    void removeUserAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeUserAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestEmergencyMfaCodeSignalErrorFull() instead")
    void requestEmergencyMfaCodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestEmergencyMfaCodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestLastAdminRoomsUsersSignalErrorFull() instead")
    void requestLastAdminRoomsUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestLastAdminRoomsUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserSignalErrorFull() instead")
    void requestUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserAttributesSignalErrorFull() instead")
    void requestUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserGroupsSignalErrorFull() instead")
    void requestUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserRolesSignalErrorFull() instead")
    void requestUserRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUsersSignalErrorFull() instead")
    void requestUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUsersRoomsSignalErrorFull() instead")
    void requestUsersRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUsersRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserAttributesSignalErrorFull() instead")
    void setUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAttributesSignalErrorFull() instead")
    void updateUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
