/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditUserPermission.h
 *
 * Audit user permissions report
 */

#ifndef OAIAuditUserPermission_H
#define OAIAuditUserPermission_H

#include <QJsonObject>

#include "OAINodePermissions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINodePermissions;

class OAIAuditUserPermission : public OAIObject {
public:
    OAIAuditUserPermission();
    OAIAuditUserPermission(QString json);
    ~OAIAuditUserPermission() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINodePermissions getPermissions() const;
    void setPermissions(const OAINodePermissions &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    QString getUserFirstName() const;
    void setUserFirstName(const QString &user_first_name);
    bool is_user_first_name_Set() const;
    bool is_user_first_name_Valid() const;

    qint64 getUserId() const;
    void setUserId(const qint64 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserLastName() const;
    void setUserLastName(const QString &user_last_name);
    bool is_user_last_name_Set() const;
    bool is_user_last_name_Valid() const;

    QString getUserLogin() const;
    void setUserLogin(const QString &user_login);
    bool is_user_login_Set() const;
    bool is_user_login_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINodePermissions m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    QString m_user_first_name;
    bool m_user_first_name_isSet;
    bool m_user_first_name_isValid;

    qint64 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_last_name;
    bool m_user_last_name_isSet;
    bool m_user_last_name_isValid;

    QString m_user_login;
    bool m_user_login_isSet;
    bool m_user_login_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditUserPermission)

#endif // OAIAuditUserPermission_H
