/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRadiusChallengeResponse.h
 *
 * RADIUS challenge reply
 */

#ifndef OAIRadiusChallengeResponse_H
#define OAIRadiusChallengeResponse_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRadiusChallengeResponse : public OAIObject {
public:
    OAIRadiusChallengeResponse();
    OAIRadiusChallengeResponse(QString json);
    ~OAIRadiusChallengeResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCode() const;
    void setCode(const qint32 &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getDebugInfo() const;
    void setDebugInfo(const QString &debug_info);
    bool is_debug_info_Set() const;
    bool is_debug_info_Valid() const;

    qint32 getErrorCode() const;
    void setErrorCode(const qint32 &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getReplyMessage() const;
    void setReplyMessage(const QString &reply_message);
    bool is_reply_message_Set() const;
    bool is_reply_message_Valid() const;

    QString getReplyState() const;
    void setReplyState(const QString &reply_state);
    bool is_reply_state_Set() const;
    bool is_reply_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_debug_info;
    bool m_debug_info_isSet;
    bool m_debug_info_isValid;

    qint32 m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_reply_message;
    bool m_reply_message_isSet;
    bool m_reply_message_isValid;

    QString m_reply_state;
    bool m_reply_state_isSet;
    bool m_reply_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRadiusChallengeResponse)

#endif // OAIRadiusChallengeResponse_H
