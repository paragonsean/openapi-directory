/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyslogConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyslogConfig::OAISyslogConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyslogConfig::OAISyslogConfig() {
    this->initializeModel();
}

OAISyslogConfig::~OAISyslogConfig() {}

void OAISyslogConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_log_ip_enabled_isSet = false;
    m_log_ip_enabled_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;
}

void OAISyslogConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyslogConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_log_ip_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_ip_enabled, json[QString("logIpEnabled")]);
    m_log_ip_enabled_isSet = !json[QString("logIpEnabled")].isNull() && m_log_ip_enabled_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;
}

QString OAISyslogConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyslogConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_log_ip_enabled_isSet) {
        obj.insert(QString("logIpEnabled"), ::OpenAPI::toJsonValue(m_log_ip_enabled));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    return obj;
}

bool OAISyslogConfig::isEnabled() const {
    return m_enabled;
}
void OAISyslogConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAISyslogConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAISyslogConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAISyslogConfig::getHost() const {
    return m_host;
}
void OAISyslogConfig::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAISyslogConfig::is_host_Set() const{
    return m_host_isSet;
}

bool OAISyslogConfig::is_host_Valid() const{
    return m_host_isValid;
}

bool OAISyslogConfig::isLogIpEnabled() const {
    return m_log_ip_enabled;
}
void OAISyslogConfig::setLogIpEnabled(const bool &log_ip_enabled) {
    m_log_ip_enabled = log_ip_enabled;
    m_log_ip_enabled_isSet = true;
}

bool OAISyslogConfig::is_log_ip_enabled_Set() const{
    return m_log_ip_enabled_isSet;
}

bool OAISyslogConfig::is_log_ip_enabled_Valid() const{
    return m_log_ip_enabled_isValid;
}

qint32 OAISyslogConfig::getPort() const {
    return m_port;
}
void OAISyslogConfig::setPort(const qint32 &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAISyslogConfig::is_port_Set() const{
    return m_port_isSet;
}

bool OAISyslogConfig::is_port_Valid() const{
    return m_port_isValid;
}

QString OAISyslogConfig::getProtocol() const {
    return m_protocol;
}
void OAISyslogConfig::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAISyslogConfig::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAISyslogConfig::is_protocol_Valid() const{
    return m_protocol_isValid;
}

bool OAISyslogConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_ip_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyslogConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
