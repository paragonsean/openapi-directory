/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharesPasswordPolicies.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharesPasswordPolicies::OAISharesPasswordPolicies(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharesPasswordPolicies::OAISharesPasswordPolicies() {
    this->initializeModel();
}

OAISharesPasswordPolicies::~OAISharesPasswordPolicies() {}

void OAISharesPasswordPolicies::initializeModel() {

    m_character_rules_isSet = false;
    m_character_rules_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_reject_dictionary_words_isSet = false;
    m_reject_dictionary_words_isValid = false;

    m_reject_keyboard_patterns_isSet = false;
    m_reject_keyboard_patterns_isValid = false;

    m_reject_user_info_isSet = false;
    m_reject_user_info_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAISharesPasswordPolicies::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharesPasswordPolicies::fromJsonObject(QJsonObject json) {

    m_character_rules_isValid = ::OpenAPI::fromJsonValue(m_character_rules, json[QString("characterRules")]);
    m_character_rules_isSet = !json[QString("characterRules")].isNull() && m_character_rules_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("minLength")]);
    m_min_length_isSet = !json[QString("minLength")].isNull() && m_min_length_isValid;

    m_reject_dictionary_words_isValid = ::OpenAPI::fromJsonValue(m_reject_dictionary_words, json[QString("rejectDictionaryWords")]);
    m_reject_dictionary_words_isSet = !json[QString("rejectDictionaryWords")].isNull() && m_reject_dictionary_words_isValid;

    m_reject_keyboard_patterns_isValid = ::OpenAPI::fromJsonValue(m_reject_keyboard_patterns, json[QString("rejectKeyboardPatterns")]);
    m_reject_keyboard_patterns_isSet = !json[QString("rejectKeyboardPatterns")].isNull() && m_reject_keyboard_patterns_isValid;

    m_reject_user_info_isValid = ::OpenAPI::fromJsonValue(m_reject_user_info, json[QString("rejectUserInfo")]);
    m_reject_user_info_isSet = !json[QString("rejectUserInfo")].isNull() && m_reject_user_info_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAISharesPasswordPolicies::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharesPasswordPolicies::asJsonObject() const {
    QJsonObject obj;
    if (m_character_rules.isSet()) {
        obj.insert(QString("characterRules"), ::OpenAPI::toJsonValue(m_character_rules));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("minLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_reject_dictionary_words_isSet) {
        obj.insert(QString("rejectDictionaryWords"), ::OpenAPI::toJsonValue(m_reject_dictionary_words));
    }
    if (m_reject_keyboard_patterns_isSet) {
        obj.insert(QString("rejectKeyboardPatterns"), ::OpenAPI::toJsonValue(m_reject_keyboard_patterns));
    }
    if (m_reject_user_info_isSet) {
        obj.insert(QString("rejectUserInfo"), ::OpenAPI::toJsonValue(m_reject_user_info));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

OAICharacterRules OAISharesPasswordPolicies::getCharacterRules() const {
    return m_character_rules;
}
void OAISharesPasswordPolicies::setCharacterRules(const OAICharacterRules &character_rules) {
    m_character_rules = character_rules;
    m_character_rules_isSet = true;
}

bool OAISharesPasswordPolicies::is_character_rules_Set() const{
    return m_character_rules_isSet;
}

bool OAISharesPasswordPolicies::is_character_rules_Valid() const{
    return m_character_rules_isValid;
}

qint32 OAISharesPasswordPolicies::getMinLength() const {
    return m_min_length;
}
void OAISharesPasswordPolicies::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAISharesPasswordPolicies::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAISharesPasswordPolicies::is_min_length_Valid() const{
    return m_min_length_isValid;
}

bool OAISharesPasswordPolicies::isRejectDictionaryWords() const {
    return m_reject_dictionary_words;
}
void OAISharesPasswordPolicies::setRejectDictionaryWords(const bool &reject_dictionary_words) {
    m_reject_dictionary_words = reject_dictionary_words;
    m_reject_dictionary_words_isSet = true;
}

bool OAISharesPasswordPolicies::is_reject_dictionary_words_Set() const{
    return m_reject_dictionary_words_isSet;
}

bool OAISharesPasswordPolicies::is_reject_dictionary_words_Valid() const{
    return m_reject_dictionary_words_isValid;
}

bool OAISharesPasswordPolicies::isRejectKeyboardPatterns() const {
    return m_reject_keyboard_patterns;
}
void OAISharesPasswordPolicies::setRejectKeyboardPatterns(const bool &reject_keyboard_patterns) {
    m_reject_keyboard_patterns = reject_keyboard_patterns;
    m_reject_keyboard_patterns_isSet = true;
}

bool OAISharesPasswordPolicies::is_reject_keyboard_patterns_Set() const{
    return m_reject_keyboard_patterns_isSet;
}

bool OAISharesPasswordPolicies::is_reject_keyboard_patterns_Valid() const{
    return m_reject_keyboard_patterns_isValid;
}

bool OAISharesPasswordPolicies::isRejectUserInfo() const {
    return m_reject_user_info;
}
void OAISharesPasswordPolicies::setRejectUserInfo(const bool &reject_user_info) {
    m_reject_user_info = reject_user_info;
    m_reject_user_info_isSet = true;
}

bool OAISharesPasswordPolicies::is_reject_user_info_Set() const{
    return m_reject_user_info_isSet;
}

bool OAISharesPasswordPolicies::is_reject_user_info_Valid() const{
    return m_reject_user_info_isValid;
}

QDateTime OAISharesPasswordPolicies::getUpdatedAt() const {
    return m_updated_at;
}
void OAISharesPasswordPolicies::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISharesPasswordPolicies::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISharesPasswordPolicies::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAISharesPasswordPolicies::getUpdatedBy() const {
    return m_updated_by;
}
void OAISharesPasswordPolicies::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAISharesPasswordPolicies::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAISharesPasswordPolicies::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAISharesPasswordPolicies::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_character_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_dictionary_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_keyboard_patterns_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_user_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharesPasswordPolicies::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
