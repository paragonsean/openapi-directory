/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISystemAuthConfigApi_H
#define OAI_OAISystemAuthConfigApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActiveDirectoryConfig.h"
#include "OAIActiveDirectoryConfigList.h"
#include "OAICreateActiveDirectoryConfigRequest.h"
#include "OAICreateOAuthClientRequest.h"
#include "OAICreateOpenIdIdpConfigRequest.h"
#include "OAIErrorResponse.h"
#include "OAIOAuthClient.h"
#include "OAIOpenIdIdpConfig.h"
#include "OAIRadiusConfig.h"
#include "OAIRadiusConfigCreateRequest.h"
#include "OAIRadiusConfigUpdateRequest.h"
#include "OAIResetPassword_400_response.h"
#include "OAITestActiveDirectoryConfigRequest.h"
#include "OAITestActiveDirectoryConfigResponse.h"
#include "OAIUpdateActiveDirectoryConfigRequest.h"
#include "OAIUpdateOAuthClientRequest.h"
#include "OAIUpdateOpenIdIdpConfigRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISystemAuthConfigApi : public QObject {
    Q_OBJECT

public:
    OAISystemAuthConfigApi(const int timeOut = 0);
    ~OAISystemAuthConfigApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_active_directory_config_request OAICreateActiveDirectoryConfigRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createAdConfig(const OAICreateActiveDirectoryConfigRequest &oai_create_active_directory_config_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_o_auth_client_request OAICreateOAuthClientRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createOAuthClient(const OAICreateOAuthClientRequest &oai_create_o_auth_client_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_open_id_idp_config_request OAICreateOpenIdIdpConfigRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createOpenIdIdpConfig(const OAICreateOpenIdIdpConfigRequest &oai_create_open_id_idp_config_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_radius_config_create_request OAIRadiusConfigCreateRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createRadiusConfig(const OAIRadiusConfigCreateRequest &oai_radius_config_create_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_id qint32 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeAdConfig(const qint32 &ad_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeOAuthClient(const QString &client_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  idp_id qint32 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeOpenIdIdpConfig(const qint32 &idp_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeRadiusConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_id qint32 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAdConfig(const qint32 &ad_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestAdConfigs(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOAuthClient(const QString &client_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOAuthClients(const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  idp_id qint32 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOpenIdIdpConfig(const qint32 &idp_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestOpenIdIdpConfigs(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRadiusConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_test_active_directory_config_request OAITestActiveDirectoryConfigRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void testAdConfig(const OAITestActiveDirectoryConfigRequest &oai_test_active_directory_config_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void testRadiusConfig(const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ad_id qint32 [required]
    * @param[in]  oai_update_active_directory_config_request OAIUpdateActiveDirectoryConfigRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateAdConfig(const qint32 &ad_id, const OAIUpdateActiveDirectoryConfigRequest &oai_update_active_directory_config_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  oai_update_o_auth_client_request OAIUpdateOAuthClientRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateOAuthClient(const QString &client_id, const OAIUpdateOAuthClientRequest &oai_update_o_auth_client_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  idp_id qint32 [required]
    * @param[in]  oai_update_open_id_idp_config_request OAIUpdateOpenIdIdpConfigRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateOpenIdIdpConfig(const qint32 &idp_id, const OAIUpdateOpenIdIdpConfigRequest &oai_update_open_id_idp_config_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_radius_config_update_request OAIRadiusConfigUpdateRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateRadiusConfig(const OAIRadiusConfigUpdateRequest &oai_radius_config_update_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAdConfigCallback(OAIHttpRequestWorker *worker);
    void createOAuthClientCallback(OAIHttpRequestWorker *worker);
    void createOpenIdIdpConfigCallback(OAIHttpRequestWorker *worker);
    void createRadiusConfigCallback(OAIHttpRequestWorker *worker);
    void removeAdConfigCallback(OAIHttpRequestWorker *worker);
    void removeOAuthClientCallback(OAIHttpRequestWorker *worker);
    void removeOpenIdIdpConfigCallback(OAIHttpRequestWorker *worker);
    void removeRadiusConfigCallback(OAIHttpRequestWorker *worker);
    void requestAdConfigCallback(OAIHttpRequestWorker *worker);
    void requestAdConfigsCallback(OAIHttpRequestWorker *worker);
    void requestOAuthClientCallback(OAIHttpRequestWorker *worker);
    void requestOAuthClientsCallback(OAIHttpRequestWorker *worker);
    void requestOpenIdIdpConfigCallback(OAIHttpRequestWorker *worker);
    void requestOpenIdIdpConfigsCallback(OAIHttpRequestWorker *worker);
    void requestRadiusConfigCallback(OAIHttpRequestWorker *worker);
    void testAdConfigCallback(OAIHttpRequestWorker *worker);
    void testRadiusConfigCallback(OAIHttpRequestWorker *worker);
    void updateAdConfigCallback(OAIHttpRequestWorker *worker);
    void updateOAuthClientCallback(OAIHttpRequestWorker *worker);
    void updateOpenIdIdpConfigCallback(OAIHttpRequestWorker *worker);
    void updateRadiusConfigCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAdConfigSignal(OAIActiveDirectoryConfig summary);
    void createOAuthClientSignal(OAIOAuthClient summary);
    void createOpenIdIdpConfigSignal(OAIOpenIdIdpConfig summary);
    void createRadiusConfigSignal(OAIRadiusConfig summary);
    void removeAdConfigSignal();
    void removeOAuthClientSignal();
    void removeOpenIdIdpConfigSignal();
    void removeRadiusConfigSignal();
    void requestAdConfigSignal(OAIActiveDirectoryConfig summary);
    void requestAdConfigsSignal(OAIActiveDirectoryConfigList summary);
    void requestOAuthClientSignal(OAIOAuthClient summary);
    void requestOAuthClientsSignal(QList<OAIOAuthClient> summary);
    void requestOpenIdIdpConfigSignal(OAIOpenIdIdpConfig summary);
    void requestOpenIdIdpConfigsSignal(QList<OAIOpenIdIdpConfig> summary);
    void requestRadiusConfigSignal(OAIRadiusConfig summary);
    void testAdConfigSignal(OAITestActiveDirectoryConfigResponse summary);
    void testRadiusConfigSignal();
    void updateAdConfigSignal(OAIActiveDirectoryConfig summary);
    void updateOAuthClientSignal(OAIOAuthClient summary);
    void updateOpenIdIdpConfigSignal(OAIOpenIdIdpConfig summary);
    void updateRadiusConfigSignal(OAIRadiusConfig summary);


    void createAdConfigSignalFull(OAIHttpRequestWorker *worker, OAIActiveDirectoryConfig summary);
    void createOAuthClientSignalFull(OAIHttpRequestWorker *worker, OAIOAuthClient summary);
    void createOpenIdIdpConfigSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdIdpConfig summary);
    void createRadiusConfigSignalFull(OAIHttpRequestWorker *worker, OAIRadiusConfig summary);
    void removeAdConfigSignalFull(OAIHttpRequestWorker *worker);
    void removeOAuthClientSignalFull(OAIHttpRequestWorker *worker);
    void removeOpenIdIdpConfigSignalFull(OAIHttpRequestWorker *worker);
    void removeRadiusConfigSignalFull(OAIHttpRequestWorker *worker);
    void requestAdConfigSignalFull(OAIHttpRequestWorker *worker, OAIActiveDirectoryConfig summary);
    void requestAdConfigsSignalFull(OAIHttpRequestWorker *worker, OAIActiveDirectoryConfigList summary);
    void requestOAuthClientSignalFull(OAIHttpRequestWorker *worker, OAIOAuthClient summary);
    void requestOAuthClientsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOAuthClient> summary);
    void requestOpenIdIdpConfigSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdIdpConfig summary);
    void requestOpenIdIdpConfigsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOpenIdIdpConfig> summary);
    void requestRadiusConfigSignalFull(OAIHttpRequestWorker *worker, OAIRadiusConfig summary);
    void testAdConfigSignalFull(OAIHttpRequestWorker *worker, OAITestActiveDirectoryConfigResponse summary);
    void testRadiusConfigSignalFull(OAIHttpRequestWorker *worker);
    void updateAdConfigSignalFull(OAIHttpRequestWorker *worker, OAIActiveDirectoryConfig summary);
    void updateOAuthClientSignalFull(OAIHttpRequestWorker *worker, OAIOAuthClient summary);
    void updateOpenIdIdpConfigSignalFull(OAIHttpRequestWorker *worker, OAIOpenIdIdpConfig summary);
    void updateRadiusConfigSignalFull(OAIHttpRequestWorker *worker, OAIRadiusConfig summary);

    Q_DECL_DEPRECATED_X("Use createAdConfigSignalError() instead")
    void createAdConfigSignalE(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdConfigSignalError(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOAuthClientSignalError() instead")
    void createOAuthClientSignalE(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOAuthClientSignalError(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOpenIdIdpConfigSignalError() instead")
    void createOpenIdIdpConfigSignalE(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpenIdIdpConfigSignalError(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRadiusConfigSignalError() instead")
    void createRadiusConfigSignalE(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRadiusConfigSignalError(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAdConfigSignalError() instead")
    void removeAdConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeAdConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthClientSignalError() instead")
    void removeOAuthClientSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthClientSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOpenIdIdpConfigSignalError() instead")
    void removeOpenIdIdpConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeOpenIdIdpConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRadiusConfigSignalError() instead")
    void removeRadiusConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeRadiusConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAdConfigSignalError() instead")
    void requestAdConfigSignalE(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAdConfigSignalError(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAdConfigsSignalError() instead")
    void requestAdConfigsSignalE(OAIActiveDirectoryConfigList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAdConfigsSignalError(OAIActiveDirectoryConfigList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthClientSignalError() instead")
    void requestOAuthClientSignalE(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthClientSignalError(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthClientsSignalError() instead")
    void requestOAuthClientsSignalE(QList<OAIOAuthClient> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthClientsSignalError(QList<OAIOAuthClient> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdIdpConfigSignalError() instead")
    void requestOpenIdIdpConfigSignalE(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdIdpConfigSignalError(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdIdpConfigsSignalError() instead")
    void requestOpenIdIdpConfigsSignalE(QList<OAIOpenIdIdpConfig> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdIdpConfigsSignalError(QList<OAIOpenIdIdpConfig> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRadiusConfigSignalError() instead")
    void requestRadiusConfigSignalE(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRadiusConfigSignalError(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testAdConfigSignalError() instead")
    void testAdConfigSignalE(OAITestActiveDirectoryConfigResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testAdConfigSignalError(OAITestActiveDirectoryConfigResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testRadiusConfigSignalError() instead")
    void testRadiusConfigSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void testRadiusConfigSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdConfigSignalError() instead")
    void updateAdConfigSignalE(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdConfigSignalError(OAIActiveDirectoryConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOAuthClientSignalError() instead")
    void updateOAuthClientSignalE(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOAuthClientSignalError(OAIOAuthClient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpenIdIdpConfigSignalError() instead")
    void updateOpenIdIdpConfigSignalE(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpenIdIdpConfigSignalError(OAIOpenIdIdpConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRadiusConfigSignalError() instead")
    void updateRadiusConfigSignalE(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRadiusConfigSignalError(OAIRadiusConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAdConfigSignalErrorFull() instead")
    void createAdConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAdConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOAuthClientSignalErrorFull() instead")
    void createOAuthClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOAuthClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createOpenIdIdpConfigSignalErrorFull() instead")
    void createOpenIdIdpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createOpenIdIdpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRadiusConfigSignalErrorFull() instead")
    void createRadiusConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRadiusConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeAdConfigSignalErrorFull() instead")
    void removeAdConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeAdConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOAuthClientSignalErrorFull() instead")
    void removeOAuthClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOAuthClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeOpenIdIdpConfigSignalErrorFull() instead")
    void removeOpenIdIdpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeOpenIdIdpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRadiusConfigSignalErrorFull() instead")
    void removeRadiusConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRadiusConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAdConfigSignalErrorFull() instead")
    void requestAdConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAdConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestAdConfigsSignalErrorFull() instead")
    void requestAdConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestAdConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthClientSignalErrorFull() instead")
    void requestOAuthClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOAuthClientsSignalErrorFull() instead")
    void requestOAuthClientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOAuthClientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdIdpConfigSignalErrorFull() instead")
    void requestOpenIdIdpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdIdpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestOpenIdIdpConfigsSignalErrorFull() instead")
    void requestOpenIdIdpConfigsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestOpenIdIdpConfigsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRadiusConfigSignalErrorFull() instead")
    void requestRadiusConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRadiusConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testAdConfigSignalErrorFull() instead")
    void testAdConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testAdConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testRadiusConfigSignalErrorFull() instead")
    void testRadiusConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testRadiusConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAdConfigSignalErrorFull() instead")
    void updateAdConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAdConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOAuthClientSignalErrorFull() instead")
    void updateOAuthClientSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOAuthClientSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOpenIdIdpConfigSignalErrorFull() instead")
    void updateOpenIdIdpConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOpenIdIdpConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRadiusConfigSignalErrorFull() instead")
    void updateRadiusConfigSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRadiusConfigSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
