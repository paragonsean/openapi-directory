/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINodesApi_H
#define OAI_OAINodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIChangeNodeCommentRequest.h"
#include "OAIChunkUploadResponse.h"
#include "OAIComment.h"
#include "OAICommentList.h"
#include "OAICompleteS3FileUploadRequest.h"
#include "OAICompleteUploadRequest.h"
#include "OAIConfigRoomRequest.h"
#include "OAICopyNodesRequest.h"
#include "OAICreateFileUploadRequest.h"
#include "OAICreateFileUploadResponse.h"
#include "OAICreateFolderRequest.h"
#include "OAICreateKeyPairRequest.h"
#include "OAICreateNodeCommentRequest.h"
#include "OAICreateRoomRequest.h"
#include "OAIDeleteDeletedNodesRequest.h"
#include "OAIDeleteNodesRequest.h"
#include "OAIDeletedNode.h"
#include "OAIDeletedNodeSummaryList.h"
#include "OAIDeletedNodeVersionsList.h"
#include "OAIDownloadTokenGenerateResponse.h"
#include "OAIEncryptRoomRequest.h"
#include "OAIErrorResponse.h"
#include "OAIFileKey.h"
#include "OAIFileVersionList.h"
#include "OAIGeneratePresignedUrlsRequest.h"
#include "OAIHttpFileElement.h"
#include "OAILogEventList.h"
#include "OAIMissingKeysResponse.h"
#include "OAIMoveNodesRequest.h"
#include "OAINode.h"
#include "OAINodeList.h"
#include "OAINodeParentList.h"
#include "OAIPendingAssignmentList.h"
#include "OAIPendingAssignmentsRequest.h"
#include "OAIPresignedUrlList.h"
#include "OAIRestoreDeletedNodesRequest.h"
#include "OAIRoomGroupList.h"
#include "OAIRoomGroupsAddBatchRequest.h"
#include "OAIRoomGroupsDeleteBatchRequest.h"
#include "OAIRoomGuestUserAddRequest.h"
#include "OAIRoomPolicies.h"
#include "OAIRoomPoliciesRequest.h"
#include "OAIRoomUserList.h"
#include "OAIRoomUsersAddBatchRequest.h"
#include "OAIRoomUsersDeleteBatchRequest.h"
#include "OAIRoomWebhookList.h"
#include "OAIS3FileUploadStatus.h"
#include "OAIS3TagIds.h"
#include "OAIS3TagList.h"
#include "OAIUpdateFavoritesBulkRequest.h"
#include "OAIUpdateFileRequest.h"
#include "OAIUpdateFilesBulkRequest.h"
#include "OAIUpdateFolderRequest.h"
#include "OAIUpdateRoomRequest.h"
#include "OAIUpdateRoomWebhookRequest.h"
#include "OAIUserFileKeySetBatchRequest.h"
#include "OAIUserKeyPairContainer.h"
#include "OAIZipDownloadRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINodesApi : public QObject {
    Q_OBJECT

public:
    OAINodesApi(const int timeOut = 0);
    ~OAINodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void addFavorite(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_guest_user_add_request OAIRoomGuestUserAddRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void addRoomGuestUsers(const qint64 &room_id, const OAIRoomGuestUserAddRequest &oai_room_guest_user_add_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void cancelFileUpload(const QString &upload_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_pending_assignments_request OAIPendingAssignmentsRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void changePendingAssignments(const OAIPendingAssignmentsRequest &oai_pending_assignments_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    * @param[in]  oai_complete_upload_request OAICompleteUploadRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void completeFileUpload(const QString &upload_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICompleteUploadRequest> &oai_complete_upload_request = ::OpenAPI::OptionalParam<OAICompleteUploadRequest>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  oai_complete_s3_file_upload_request OAICompleteS3FileUploadRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void completeS3FileUpload(const QString &upload_id, const OAICompleteS3FileUploadRequest &oai_complete_s3_file_upload_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_config_room_request OAIConfigRoomRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void configureRoom(const qint64 &room_id, const OAIConfigRoomRequest &oai_config_room_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  oai_copy_nodes_request OAICopyNodesRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void copyNodes(const qint64 &node_id, const OAICopyNodesRequest &oai_copy_nodes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_create_key_pair_request OAICreateKeyPairRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createAndPreserveRoomRescueKeyPair(const qint64 &room_id, const OAICreateKeyPairRequest &oai_create_key_pair_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_file_upload_request OAICreateFileUploadRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createFileUploadChannel(const OAICreateFileUploadRequest &oai_create_file_upload_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_folder_request OAICreateFolderRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createFolder(const OAICreateFolderRequest &oai_create_folder_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  oai_create_node_comment_request OAICreateNodeCommentRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createNodeComment(const qint64 &node_id, const OAICreateNodeCommentRequest &oai_create_node_comment_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_room_request OAICreateRoomRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void createRoom(const OAICreateRoomRequest &oai_create_room_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_zip_download_request OAIZipDownloadRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void downloadZipArchive(const OAIZipDownloadRequest &oai_zip_download_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void emptyDeletedNodes(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_encrypt_room_request OAIEncryptRoomRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void encryptRoom(const qint64 &room_id, const OAIEncryptRoomRequest &oai_encrypt_room_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void generateDownloadUrl(const qint64 &file_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_zip_download_request OAIZipDownloadRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void generateDownloadUrlForZipArchive(const OAIZipDownloadRequest &oai_zip_download_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  oai_generate_presigned_urls_request OAIGeneratePresignedUrlsRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void generatePresignedUrlsFiles(const QString &upload_id, const OAIGeneratePresignedUrlsRequest &oai_generate_presigned_urls_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_update_room_webhook_request OAIUpdateRoomWebhookRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void handleRoomWebhookAssignments(const qint64 &room_id, const OAIUpdateRoomWebhookRequest &oai_update_room_webhook_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  oai_move_nodes_request OAIMoveNodesRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void moveNodes(const qint64 &node_id, const OAIMoveNodesRequest &oai_move_nodes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_deleted_nodes_request OAIDeleteDeletedNodesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeDeletedNodes(const OAIDeleteDeletedNodesRequest &oai_delete_deleted_nodes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeFavorite(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeNode(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  comment_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeNodeComment(const qint64 &comment_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_delete_nodes_request OAIDeleteNodesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeNodes(const OAIDeleteNodesRequest &oai_delete_nodes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void removeRoomRescueKeyPair(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  deleted_node_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestDeletedNode(const qint64 &deleted_node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestDeletedNodeVersions(const qint64 &node_id, const QString &type, const QString &name, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestDeletedNodesSummary(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  reference_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestFileVersionList(const qint64 &reference_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestListOfWebhooksForRoom(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  room_id qint64 [optional]
    * @param[in]  file_id qint64 [optional]
    * @param[in]  user_id qint64 [optional]
    * @param[in]  use_key QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestMissingFileKeys(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &room_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &file_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &user_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &use_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNode(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  hide_deleted bool [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNodeComments(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &hide_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  node_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNodeParents(const qint64 &node_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  depth_level qint32 [optional]
    * @param[in]  parent_id qint64 [optional]
    * @param[in]  room_manager bool [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestNodes(const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &depth_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &parent_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<bool> &room_manager = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestPendingAssignments(const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  date_start QString [optional]
    * @param[in]  date_end QString [optional]
    * @param[in]  type qint32 [optional]
    * @param[in]  user_id qint64 [optional]
    * @param[in]  status qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomActivitiesLogAsJson(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &date_start = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_end = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &type = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &user_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint32> &status = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomGroups(const qint64 &room_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomPolicies(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestRoomRescueKey(const qint64 &file_id, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomRescueKeyPair(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomRescueKeyPairs(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomS3Tags(const qint64 &room_id, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestRoomUsers(const qint64 &room_id, const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void requestSystemRescueKey(const qint64 &file_id, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUploadStatusFiles(const QString &upload_id, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  version QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void requestUserFileKey(const qint64 &file_id, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_restore_deleted_nodes_request OAIRestoreDeletedNodesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void restoreNodes(const OAIRestoreDeletedNodesRequest &oai_restore_deleted_nodes_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_groups_delete_batch_request OAIRoomGroupsDeleteBatchRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void revokeRoomGroups(const qint64 &room_id, const OAIRoomGroupsDeleteBatchRequest &oai_room_groups_delete_batch_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_users_delete_batch_request OAIRoomUsersDeleteBatchRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void revokeRoomUsers(const qint64 &room_id, const OAIRoomUsersDeleteBatchRequest &oai_room_users_delete_batch_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  search_string QString [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  depth_level qint32 [optional]
    * @param[in]  parent_id qint64 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void searchNodes(const QString &search_string, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &depth_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint64> &parent_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_policies_request OAIRoomPoliciesRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setRoomPolicies(const qint64 &room_id, const OAIRoomPoliciesRequest &oai_room_policies_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_user_key_pair_container OAIUserKeyPairContainer [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setRoomRescueKeyPair(const qint64 &room_id, const OAIUserKeyPairContainer &oai_user_key_pair_container, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oais3_tag_ids OAIS3TagIds [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setRoomS3Tags(const qint64 &room_id, const OAIS3TagIds &oais3_tag_ids, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_user_file_key_set_batch_request OAIUserFileKeySetBatchRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void setUserFileKeys(const OAIUserFileKeySetBatchRequest &oai_user_file_key_set_batch_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_favorites_bulk_request OAIUpdateFavoritesBulkRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateFavorites(const OAIUpdateFavoritesBulkRequest &oai_update_favorites_bulk_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id qint64 [required]
    * @param[in]  oai_update_file_request OAIUpdateFileRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateFile(const qint64 &file_id, const OAIUpdateFileRequest &oai_update_file_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_files_bulk_request OAIUpdateFilesBulkRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateFiles(const OAIUpdateFilesBulkRequest &oai_update_files_bulk_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  folder_id qint64 [required]
    * @param[in]  oai_update_folder_request OAIUpdateFolderRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateFolder(const qint64 &folder_id, const OAIUpdateFolderRequest &oai_update_folder_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  comment_id qint64 [required]
    * @param[in]  oai_change_node_comment_request OAIChangeNodeCommentRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateNodeComment(const qint64 &comment_id, const OAIChangeNodeCommentRequest &oai_change_node_comment_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_update_room_request OAIUpdateRoomRequest [required]
    * @param[in]  x_sds_date_format QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateRoom(const qint64 &room_id, const OAIUpdateRoomRequest &oai_update_room_request, const ::OpenAPI::OptionalParam<QString> &x_sds_date_format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_groups_add_batch_request OAIRoomGroupsAddBatchRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateRoomGroups(const qint64 &room_id, const OAIRoomGroupsAddBatchRequest &oai_room_groups_add_batch_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  room_id qint64 [required]
    * @param[in]  oai_room_users_add_batch_request OAIRoomUsersAddBatchRequest [required]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    virtual void updateRoomUsers(const qint64 &room_id, const OAIRoomUsersAddBatchRequest &oai_room_users_add_batch_request, const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  upload_id QString [required]
    * @param[in]  file OAIHttpFileElement [required]
    * @param[in]  content_range QString [optional]
    * @param[in]  x_sds_auth_token QString [optional]
    */
    Q_DECL_DEPRECATED virtual void uploadFileAsMultipart(const QString &upload_id, const OAIHttpFileElement &file, const ::OpenAPI::OptionalParam<QString> &content_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_sds_auth_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFavoriteCallback(OAIHttpRequestWorker *worker);
    void addRoomGuestUsersCallback(OAIHttpRequestWorker *worker);
    void cancelFileUploadCallback(OAIHttpRequestWorker *worker);
    void changePendingAssignmentsCallback(OAIHttpRequestWorker *worker);
    void completeFileUploadCallback(OAIHttpRequestWorker *worker);
    void completeS3FileUploadCallback(OAIHttpRequestWorker *worker);
    void configureRoomCallback(OAIHttpRequestWorker *worker);
    void copyNodesCallback(OAIHttpRequestWorker *worker);
    void createAndPreserveRoomRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void createFileUploadChannelCallback(OAIHttpRequestWorker *worker);
    void createFolderCallback(OAIHttpRequestWorker *worker);
    void createNodeCommentCallback(OAIHttpRequestWorker *worker);
    void createRoomCallback(OAIHttpRequestWorker *worker);
    void downloadZipArchiveCallback(OAIHttpRequestWorker *worker);
    void emptyDeletedNodesCallback(OAIHttpRequestWorker *worker);
    void encryptRoomCallback(OAIHttpRequestWorker *worker);
    void generateDownloadUrlCallback(OAIHttpRequestWorker *worker);
    void generateDownloadUrlForZipArchiveCallback(OAIHttpRequestWorker *worker);
    void generatePresignedUrlsFilesCallback(OAIHttpRequestWorker *worker);
    void handleRoomWebhookAssignmentsCallback(OAIHttpRequestWorker *worker);
    void moveNodesCallback(OAIHttpRequestWorker *worker);
    void removeDeletedNodesCallback(OAIHttpRequestWorker *worker);
    void removeFavoriteCallback(OAIHttpRequestWorker *worker);
    void removeNodeCallback(OAIHttpRequestWorker *worker);
    void removeNodeCommentCallback(OAIHttpRequestWorker *worker);
    void removeNodesCallback(OAIHttpRequestWorker *worker);
    void removeRoomRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestDeletedNodeCallback(OAIHttpRequestWorker *worker);
    void requestDeletedNodeVersionsCallback(OAIHttpRequestWorker *worker);
    void requestDeletedNodesSummaryCallback(OAIHttpRequestWorker *worker);
    void requestFileVersionListCallback(OAIHttpRequestWorker *worker);
    void requestListOfWebhooksForRoomCallback(OAIHttpRequestWorker *worker);
    void requestMissingFileKeysCallback(OAIHttpRequestWorker *worker);
    void requestNodeCallback(OAIHttpRequestWorker *worker);
    void requestNodeCommentsCallback(OAIHttpRequestWorker *worker);
    void requestNodeParentsCallback(OAIHttpRequestWorker *worker);
    void requestNodesCallback(OAIHttpRequestWorker *worker);
    void requestPendingAssignmentsCallback(OAIHttpRequestWorker *worker);
    void requestRoomActivitiesLogAsJsonCallback(OAIHttpRequestWorker *worker);
    void requestRoomGroupsCallback(OAIHttpRequestWorker *worker);
    void requestRoomPoliciesCallback(OAIHttpRequestWorker *worker);
    void requestRoomRescueKeyCallback(OAIHttpRequestWorker *worker);
    void requestRoomRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void requestRoomRescueKeyPairsCallback(OAIHttpRequestWorker *worker);
    void requestRoomS3TagsCallback(OAIHttpRequestWorker *worker);
    void requestRoomUsersCallback(OAIHttpRequestWorker *worker);
    void requestSystemRescueKeyCallback(OAIHttpRequestWorker *worker);
    void requestUploadStatusFilesCallback(OAIHttpRequestWorker *worker);
    void requestUserFileKeyCallback(OAIHttpRequestWorker *worker);
    void restoreNodesCallback(OAIHttpRequestWorker *worker);
    void revokeRoomGroupsCallback(OAIHttpRequestWorker *worker);
    void revokeRoomUsersCallback(OAIHttpRequestWorker *worker);
    void searchNodesCallback(OAIHttpRequestWorker *worker);
    void setRoomPoliciesCallback(OAIHttpRequestWorker *worker);
    void setRoomRescueKeyPairCallback(OAIHttpRequestWorker *worker);
    void setRoomS3TagsCallback(OAIHttpRequestWorker *worker);
    void setUserFileKeysCallback(OAIHttpRequestWorker *worker);
    void updateFavoritesCallback(OAIHttpRequestWorker *worker);
    void updateFileCallback(OAIHttpRequestWorker *worker);
    void updateFilesCallback(OAIHttpRequestWorker *worker);
    void updateFolderCallback(OAIHttpRequestWorker *worker);
    void updateNodeCommentCallback(OAIHttpRequestWorker *worker);
    void updateRoomCallback(OAIHttpRequestWorker *worker);
    void updateRoomGroupsCallback(OAIHttpRequestWorker *worker);
    void updateRoomUsersCallback(OAIHttpRequestWorker *worker);
    void uploadFileAsMultipartCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFavoriteSignal(OAINode summary);
    void addRoomGuestUsersSignal();
    void cancelFileUploadSignal();
    void changePendingAssignmentsSignal();
    void completeFileUploadSignal(OAINode summary);
    void completeS3FileUploadSignal();
    void configureRoomSignal(OAINode summary);
    void copyNodesSignal(OAINode summary);
    void createAndPreserveRoomRescueKeyPairSignal();
    void createFileUploadChannelSignal(OAICreateFileUploadResponse summary);
    void createFolderSignal(OAINode summary);
    void createNodeCommentSignal(OAIComment summary);
    void createRoomSignal(OAINode summary);
    void downloadZipArchiveSignal();
    void emptyDeletedNodesSignal();
    void encryptRoomSignal(OAINode summary);
    void generateDownloadUrlSignal(OAIDownloadTokenGenerateResponse summary);
    void generateDownloadUrlForZipArchiveSignal(OAIDownloadTokenGenerateResponse summary);
    void generatePresignedUrlsFilesSignal(OAIPresignedUrlList summary);
    void handleRoomWebhookAssignmentsSignal(OAIRoomWebhookList summary);
    void moveNodesSignal(OAINode summary);
    void removeDeletedNodesSignal();
    void removeFavoriteSignal();
    void removeNodeSignal();
    void removeNodeCommentSignal();
    void removeNodesSignal();
    void removeRoomRescueKeyPairSignal();
    void requestDeletedNodeSignal(OAIDeletedNode summary);
    void requestDeletedNodeVersionsSignal(OAIDeletedNodeVersionsList summary);
    void requestDeletedNodesSummarySignal(OAIDeletedNodeSummaryList summary);
    void requestFileVersionListSignal(OAIFileVersionList summary);
    void requestListOfWebhooksForRoomSignal(OAIRoomWebhookList summary);
    void requestMissingFileKeysSignal(OAIMissingKeysResponse summary);
    void requestNodeSignal(OAINode summary);
    void requestNodeCommentsSignal(OAICommentList summary);
    void requestNodeParentsSignal(OAINodeParentList summary);
    void requestNodesSignal(OAINodeList summary);
    void requestPendingAssignmentsSignal(OAIPendingAssignmentList summary);
    void requestRoomActivitiesLogAsJsonSignal(OAILogEventList summary);
    void requestRoomGroupsSignal(OAIRoomGroupList summary);
    void requestRoomPoliciesSignal(OAIRoomPolicies summary);
    void requestRoomRescueKeySignal(OAIFileKey summary);
    void requestRoomRescueKeyPairSignal(OAIUserKeyPairContainer summary);
    void requestRoomRescueKeyPairsSignal(QList<OAIUserKeyPairContainer> summary);
    void requestRoomS3TagsSignal(OAIS3TagList summary);
    void requestRoomUsersSignal(OAIRoomUserList summary);
    void requestSystemRescueKeySignal(OAIFileKey summary);
    void requestUploadStatusFilesSignal(OAIS3FileUploadStatus summary);
    void requestUserFileKeySignal(OAIFileKey summary);
    void restoreNodesSignal();
    void revokeRoomGroupsSignal();
    void revokeRoomUsersSignal();
    void searchNodesSignal(OAINodeList summary);
    void setRoomPoliciesSignal();
    void setRoomRescueKeyPairSignal();
    void setRoomS3TagsSignal(OAIS3TagList summary);
    void setUserFileKeysSignal();
    void updateFavoritesSignal();
    void updateFileSignal(OAINode summary);
    void updateFilesSignal();
    void updateFolderSignal(OAINode summary);
    void updateNodeCommentSignal(OAIComment summary);
    void updateRoomSignal(OAINode summary);
    void updateRoomGroupsSignal();
    void updateRoomUsersSignal();
    void uploadFileAsMultipartSignal(OAIChunkUploadResponse summary);


    void addFavoriteSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void addRoomGuestUsersSignalFull(OAIHttpRequestWorker *worker);
    void cancelFileUploadSignalFull(OAIHttpRequestWorker *worker);
    void changePendingAssignmentsSignalFull(OAIHttpRequestWorker *worker);
    void completeFileUploadSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void completeS3FileUploadSignalFull(OAIHttpRequestWorker *worker);
    void configureRoomSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void copyNodesSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void createAndPreserveRoomRescueKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void createFileUploadChannelSignalFull(OAIHttpRequestWorker *worker, OAICreateFileUploadResponse summary);
    void createFolderSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void createNodeCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void createRoomSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void downloadZipArchiveSignalFull(OAIHttpRequestWorker *worker);
    void emptyDeletedNodesSignalFull(OAIHttpRequestWorker *worker);
    void encryptRoomSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void generateDownloadUrlSignalFull(OAIHttpRequestWorker *worker, OAIDownloadTokenGenerateResponse summary);
    void generateDownloadUrlForZipArchiveSignalFull(OAIHttpRequestWorker *worker, OAIDownloadTokenGenerateResponse summary);
    void generatePresignedUrlsFilesSignalFull(OAIHttpRequestWorker *worker, OAIPresignedUrlList summary);
    void handleRoomWebhookAssignmentsSignalFull(OAIHttpRequestWorker *worker, OAIRoomWebhookList summary);
    void moveNodesSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void removeDeletedNodesSignalFull(OAIHttpRequestWorker *worker);
    void removeFavoriteSignalFull(OAIHttpRequestWorker *worker);
    void removeNodeSignalFull(OAIHttpRequestWorker *worker);
    void removeNodeCommentSignalFull(OAIHttpRequestWorker *worker);
    void removeNodesSignalFull(OAIHttpRequestWorker *worker);
    void removeRoomRescueKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void requestDeletedNodeSignalFull(OAIHttpRequestWorker *worker, OAIDeletedNode summary);
    void requestDeletedNodeVersionsSignalFull(OAIHttpRequestWorker *worker, OAIDeletedNodeVersionsList summary);
    void requestDeletedNodesSummarySignalFull(OAIHttpRequestWorker *worker, OAIDeletedNodeSummaryList summary);
    void requestFileVersionListSignalFull(OAIHttpRequestWorker *worker, OAIFileVersionList summary);
    void requestListOfWebhooksForRoomSignalFull(OAIHttpRequestWorker *worker, OAIRoomWebhookList summary);
    void requestMissingFileKeysSignalFull(OAIHttpRequestWorker *worker, OAIMissingKeysResponse summary);
    void requestNodeSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void requestNodeCommentsSignalFull(OAIHttpRequestWorker *worker, OAICommentList summary);
    void requestNodeParentsSignalFull(OAIHttpRequestWorker *worker, OAINodeParentList summary);
    void requestNodesSignalFull(OAIHttpRequestWorker *worker, OAINodeList summary);
    void requestPendingAssignmentsSignalFull(OAIHttpRequestWorker *worker, OAIPendingAssignmentList summary);
    void requestRoomActivitiesLogAsJsonSignalFull(OAIHttpRequestWorker *worker, OAILogEventList summary);
    void requestRoomGroupsSignalFull(OAIHttpRequestWorker *worker, OAIRoomGroupList summary);
    void requestRoomPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIRoomPolicies summary);
    void requestRoomRescueKeySignalFull(OAIHttpRequestWorker *worker, OAIFileKey summary);
    void requestRoomRescueKeyPairSignalFull(OAIHttpRequestWorker *worker, OAIUserKeyPairContainer summary);
    void requestRoomRescueKeyPairsSignalFull(OAIHttpRequestWorker *worker, QList<OAIUserKeyPairContainer> summary);
    void requestRoomS3TagsSignalFull(OAIHttpRequestWorker *worker, OAIS3TagList summary);
    void requestRoomUsersSignalFull(OAIHttpRequestWorker *worker, OAIRoomUserList summary);
    void requestSystemRescueKeySignalFull(OAIHttpRequestWorker *worker, OAIFileKey summary);
    void requestUploadStatusFilesSignalFull(OAIHttpRequestWorker *worker, OAIS3FileUploadStatus summary);
    void requestUserFileKeySignalFull(OAIHttpRequestWorker *worker, OAIFileKey summary);
    void restoreNodesSignalFull(OAIHttpRequestWorker *worker);
    void revokeRoomGroupsSignalFull(OAIHttpRequestWorker *worker);
    void revokeRoomUsersSignalFull(OAIHttpRequestWorker *worker);
    void searchNodesSignalFull(OAIHttpRequestWorker *worker, OAINodeList summary);
    void setRoomPoliciesSignalFull(OAIHttpRequestWorker *worker);
    void setRoomRescueKeyPairSignalFull(OAIHttpRequestWorker *worker);
    void setRoomS3TagsSignalFull(OAIHttpRequestWorker *worker, OAIS3TagList summary);
    void setUserFileKeysSignalFull(OAIHttpRequestWorker *worker);
    void updateFavoritesSignalFull(OAIHttpRequestWorker *worker);
    void updateFileSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void updateFilesSignalFull(OAIHttpRequestWorker *worker);
    void updateFolderSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void updateNodeCommentSignalFull(OAIHttpRequestWorker *worker, OAIComment summary);
    void updateRoomSignalFull(OAIHttpRequestWorker *worker, OAINode summary);
    void updateRoomGroupsSignalFull(OAIHttpRequestWorker *worker);
    void updateRoomUsersSignalFull(OAIHttpRequestWorker *worker);
    void uploadFileAsMultipartSignalFull(OAIHttpRequestWorker *worker, OAIChunkUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use addFavoriteSignalError() instead")
    void addFavoriteSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addFavoriteSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRoomGuestUsersSignalError() instead")
    void addRoomGuestUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addRoomGuestUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelFileUploadSignalError() instead")
    void cancelFileUploadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFileUploadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePendingAssignmentsSignalError() instead")
    void changePendingAssignmentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void changePendingAssignmentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeFileUploadSignalError() instead")
    void completeFileUploadSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void completeFileUploadSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeS3FileUploadSignalError() instead")
    void completeS3FileUploadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void completeS3FileUploadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configureRoomSignalError() instead")
    void configureRoomSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void configureRoomSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyNodesSignalError() instead")
    void copyNodesSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void copyNodesSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAndPreserveRoomRescueKeyPairSignalError() instead")
    void createAndPreserveRoomRescueKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveRoomRescueKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFileUploadChannelSignalError() instead")
    void createFileUploadChannelSignalE(OAICreateFileUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileUploadChannelSignalError(OAICreateFileUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalError() instead")
    void createFolderSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNodeCommentSignalError() instead")
    void createNodeCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNodeCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomSignalError() instead")
    void createRoomSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadZipArchiveSignalError() instead")
    void downloadZipArchiveSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadZipArchiveSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emptyDeletedNodesSignalError() instead")
    void emptyDeletedNodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void emptyDeletedNodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptRoomSignalError() instead")
    void encryptRoomSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptRoomSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlSignalError() instead")
    void generateDownloadUrlSignalE(OAIDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlSignalError(OAIDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlForZipArchiveSignalError() instead")
    void generateDownloadUrlForZipArchiveSignalE(OAIDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlForZipArchiveSignalError(OAIDownloadTokenGenerateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedUrlsFilesSignalError() instead")
    void generatePresignedUrlsFilesSignalE(OAIPresignedUrlList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedUrlsFilesSignalError(OAIPresignedUrlList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use handleRoomWebhookAssignmentsSignalError() instead")
    void handleRoomWebhookAssignmentsSignalE(OAIRoomWebhookList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void handleRoomWebhookAssignmentsSignalError(OAIRoomWebhookList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNodesSignalError() instead")
    void moveNodesSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNodesSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDeletedNodesSignalError() instead")
    void removeDeletedNodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeDeletedNodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFavoriteSignalError() instead")
    void removeFavoriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeFavoriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeSignalError() instead")
    void removeNodeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeCommentSignalError() instead")
    void removeNodeCommentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeCommentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodesSignalError() instead")
    void removeNodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRoomRescueKeyPairSignalError() instead")
    void removeRoomRescueKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeRoomRescueKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodeSignalError() instead")
    void requestDeletedNodeSignalE(OAIDeletedNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodeSignalError(OAIDeletedNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodeVersionsSignalError() instead")
    void requestDeletedNodeVersionsSignalE(OAIDeletedNodeVersionsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodeVersionsSignalError(OAIDeletedNodeVersionsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodesSummarySignalError() instead")
    void requestDeletedNodesSummarySignalE(OAIDeletedNodeSummaryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodesSummarySignalError(OAIDeletedNodeSummaryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestFileVersionListSignalError() instead")
    void requestFileVersionListSignalE(OAIFileVersionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestFileVersionListSignalError(OAIFileVersionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfWebhooksForRoomSignalError() instead")
    void requestListOfWebhooksForRoomSignalE(OAIRoomWebhookList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfWebhooksForRoomSignalError(OAIRoomWebhookList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestMissingFileKeysSignalError() instead")
    void requestMissingFileKeysSignalE(OAIMissingKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestMissingFileKeysSignalError(OAIMissingKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeSignalError() instead")
    void requestNodeSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeCommentsSignalError() instead")
    void requestNodeCommentsSignalE(OAICommentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeCommentsSignalError(OAICommentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeParentsSignalError() instead")
    void requestNodeParentsSignalE(OAINodeParentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeParentsSignalError(OAINodeParentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodesSignalError() instead")
    void requestNodesSignalE(OAINodeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodesSignalError(OAINodeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPendingAssignmentsSignalError() instead")
    void requestPendingAssignmentsSignalE(OAIPendingAssignmentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPendingAssignmentsSignalError(OAIPendingAssignmentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomActivitiesLogAsJsonSignalError() instead")
    void requestRoomActivitiesLogAsJsonSignalE(OAILogEventList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomActivitiesLogAsJsonSignalError(OAILogEventList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomGroupsSignalError() instead")
    void requestRoomGroupsSignalE(OAIRoomGroupList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomGroupsSignalError(OAIRoomGroupList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomPoliciesSignalError() instead")
    void requestRoomPoliciesSignalE(OAIRoomPolicies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomPoliciesSignalError(OAIRoomPolicies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeySignalError() instead")
    void requestRoomRescueKeySignalE(OAIFileKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeySignalError(OAIFileKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeyPairSignalError() instead")
    void requestRoomRescueKeyPairSignalE(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeyPairSignalError(OAIUserKeyPairContainer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeyPairsSignalError() instead")
    void requestRoomRescueKeyPairsSignalE(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeyPairsSignalError(QList<OAIUserKeyPairContainer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomS3TagsSignalError() instead")
    void requestRoomS3TagsSignalE(OAIS3TagList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomS3TagsSignalError(OAIS3TagList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomUsersSignalError() instead")
    void requestRoomUsersSignalE(OAIRoomUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomUsersSignalError(OAIRoomUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemRescueKeySignalError() instead")
    void requestSystemRescueKeySignalE(OAIFileKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemRescueKeySignalError(OAIFileKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUploadStatusFilesSignalError() instead")
    void requestUploadStatusFilesSignalE(OAIS3FileUploadStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUploadStatusFilesSignalError(OAIS3FileUploadStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserFileKeySignalError() instead")
    void requestUserFileKeySignalE(OAIFileKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserFileKeySignalError(OAIFileKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreNodesSignalError() instead")
    void restoreNodesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restoreNodesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeRoomGroupsSignalError() instead")
    void revokeRoomGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeRoomGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeRoomUsersSignalError() instead")
    void revokeRoomUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokeRoomUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchNodesSignalError() instead")
    void searchNodesSignalE(OAINodeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchNodesSignalError(OAINodeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomPoliciesSignalError() instead")
    void setRoomPoliciesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomPoliciesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomRescueKeyPairSignalError() instead")
    void setRoomRescueKeyPairSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomRescueKeyPairSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomS3TagsSignalError() instead")
    void setRoomS3TagsSignalE(OAIS3TagList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomS3TagsSignalError(OAIS3TagList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserFileKeysSignalError() instead")
    void setUserFileKeysSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setUserFileKeysSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFavoritesSignalError() instead")
    void updateFavoritesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateFavoritesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSignalError() instead")
    void updateFileSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilesSignalError() instead")
    void updateFilesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalError() instead")
    void updateFolderSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNodeCommentSignalError() instead")
    void updateNodeCommentSignalE(OAIComment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNodeCommentSignalError(OAIComment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalError() instead")
    void updateRoomSignalE(OAINode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalError(OAINode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomGroupsSignalError() instead")
    void updateRoomGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomUsersSignalError() instead")
    void updateRoomUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileAsMultipartSignalError() instead")
    void uploadFileAsMultipartSignalE(OAIChunkUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileAsMultipartSignalError(OAIChunkUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFavoriteSignalErrorFull() instead")
    void addFavoriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFavoriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRoomGuestUsersSignalErrorFull() instead")
    void addRoomGuestUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRoomGuestUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelFileUploadSignalErrorFull() instead")
    void cancelFileUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelFileUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use changePendingAssignmentsSignalErrorFull() instead")
    void changePendingAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void changePendingAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeFileUploadSignalErrorFull() instead")
    void completeFileUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeFileUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use completeS3FileUploadSignalErrorFull() instead")
    void completeS3FileUploadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void completeS3FileUploadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use configureRoomSignalErrorFull() instead")
    void configureRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void configureRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use copyNodesSignalErrorFull() instead")
    void copyNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void copyNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAndPreserveRoomRescueKeyPairSignalErrorFull() instead")
    void createAndPreserveRoomRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAndPreserveRoomRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFileUploadChannelSignalErrorFull() instead")
    void createFileUploadChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFileUploadChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createFolderSignalErrorFull() instead")
    void createFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNodeCommentSignalErrorFull() instead")
    void createNodeCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNodeCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomSignalErrorFull() instead")
    void createRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadZipArchiveSignalErrorFull() instead")
    void downloadZipArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadZipArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emptyDeletedNodesSignalErrorFull() instead")
    void emptyDeletedNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emptyDeletedNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use encryptRoomSignalErrorFull() instead")
    void encryptRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void encryptRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlSignalErrorFull() instead")
    void generateDownloadUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateDownloadUrlForZipArchiveSignalErrorFull() instead")
    void generateDownloadUrlForZipArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateDownloadUrlForZipArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generatePresignedUrlsFilesSignalErrorFull() instead")
    void generatePresignedUrlsFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generatePresignedUrlsFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use handleRoomWebhookAssignmentsSignalErrorFull() instead")
    void handleRoomWebhookAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void handleRoomWebhookAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveNodesSignalErrorFull() instead")
    void moveNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeDeletedNodesSignalErrorFull() instead")
    void removeDeletedNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeDeletedNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeFavoriteSignalErrorFull() instead")
    void removeFavoriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeFavoriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeSignalErrorFull() instead")
    void removeNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodeCommentSignalErrorFull() instead")
    void removeNodeCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodeCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeNodesSignalErrorFull() instead")
    void removeNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeRoomRescueKeyPairSignalErrorFull() instead")
    void removeRoomRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeRoomRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodeSignalErrorFull() instead")
    void requestDeletedNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodeVersionsSignalErrorFull() instead")
    void requestDeletedNodeVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodeVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestDeletedNodesSummarySignalErrorFull() instead")
    void requestDeletedNodesSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestDeletedNodesSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestFileVersionListSignalErrorFull() instead")
    void requestFileVersionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestFileVersionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestListOfWebhooksForRoomSignalErrorFull() instead")
    void requestListOfWebhooksForRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestListOfWebhooksForRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestMissingFileKeysSignalErrorFull() instead")
    void requestMissingFileKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestMissingFileKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeSignalErrorFull() instead")
    void requestNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeCommentsSignalErrorFull() instead")
    void requestNodeCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodeParentsSignalErrorFull() instead")
    void requestNodeParentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodeParentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestNodesSignalErrorFull() instead")
    void requestNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestPendingAssignmentsSignalErrorFull() instead")
    void requestPendingAssignmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestPendingAssignmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomActivitiesLogAsJsonSignalErrorFull() instead")
    void requestRoomActivitiesLogAsJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomActivitiesLogAsJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomGroupsSignalErrorFull() instead")
    void requestRoomGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomPoliciesSignalErrorFull() instead")
    void requestRoomPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeySignalErrorFull() instead")
    void requestRoomRescueKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeyPairSignalErrorFull() instead")
    void requestRoomRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomRescueKeyPairsSignalErrorFull() instead")
    void requestRoomRescueKeyPairsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomRescueKeyPairsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomS3TagsSignalErrorFull() instead")
    void requestRoomS3TagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomS3TagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestRoomUsersSignalErrorFull() instead")
    void requestRoomUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestRoomUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSystemRescueKeySignalErrorFull() instead")
    void requestSystemRescueKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSystemRescueKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUploadStatusFilesSignalErrorFull() instead")
    void requestUploadStatusFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUploadStatusFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestUserFileKeySignalErrorFull() instead")
    void requestUserFileKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestUserFileKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreNodesSignalErrorFull() instead")
    void restoreNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeRoomGroupsSignalErrorFull() instead")
    void revokeRoomGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeRoomGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokeRoomUsersSignalErrorFull() instead")
    void revokeRoomUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokeRoomUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchNodesSignalErrorFull() instead")
    void searchNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomPoliciesSignalErrorFull() instead")
    void setRoomPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomRescueKeyPairSignalErrorFull() instead")
    void setRoomRescueKeyPairSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomRescueKeyPairSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setRoomS3TagsSignalErrorFull() instead")
    void setRoomS3TagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setRoomS3TagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserFileKeysSignalErrorFull() instead")
    void setUserFileKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserFileKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFavoritesSignalErrorFull() instead")
    void updateFavoritesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFavoritesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSignalErrorFull() instead")
    void updateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFilesSignalErrorFull() instead")
    void updateFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFolderSignalErrorFull() instead")
    void updateFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNodeCommentSignalErrorFull() instead")
    void updateNodeCommentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNodeCommentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalErrorFull() instead")
    void updateRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomGroupsSignalErrorFull() instead")
    void updateRoomGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomUsersSignalErrorFull() instead")
    void updateRoomUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileAsMultipartSignalErrorFull() instead")
    void uploadFileAsMultipartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileAsMultipartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
