/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeletedNode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeletedNode::OAIDeletedNode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeletedNode::OAIDeletedNode() {
    this->initializeModel();
}

OAIDeletedNode::~OAIDeletedNode() {}

void OAIDeletedNode::initializeModel() {

    m_accessed_at_isSet = false;
    m_accessed_at_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_deleted_by_isSet = false;
    m_deleted_by_isValid = false;

    m_expire_at_isSet = false;
    m_expire_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_encrypted_isSet = false;
    m_is_encrypted_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_parent_path_isSet = false;
    m_parent_path_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;
}

void OAIDeletedNode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeletedNode::fromJsonObject(QJsonObject json) {

    m_accessed_at_isValid = ::OpenAPI::fromJsonValue(m_accessed_at, json[QString("accessedAt")]);
    m_accessed_at_isSet = !json[QString("accessedAt")].isNull() && m_accessed_at_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deletedAt")]);
    m_deleted_at_isSet = !json[QString("deletedAt")].isNull() && m_deleted_at_isValid;

    m_deleted_by_isValid = ::OpenAPI::fromJsonValue(m_deleted_by, json[QString("deletedBy")]);
    m_deleted_by_isSet = !json[QString("deletedBy")].isNull() && m_deleted_by_isValid;

    m_expire_at_isValid = ::OpenAPI::fromJsonValue(m_expire_at, json[QString("expireAt")]);
    m_expire_at_isSet = !json[QString("expireAt")].isNull() && m_expire_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_encrypted_isValid = ::OpenAPI::fromJsonValue(m_is_encrypted, json[QString("isEncrypted")]);
    m_is_encrypted_isSet = !json[QString("isEncrypted")].isNull() && m_is_encrypted_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_parent_path_isValid = ::OpenAPI::fromJsonValue(m_parent_path, json[QString("parentPath")]);
    m_parent_path_isSet = !json[QString("parentPath")].isNull() && m_parent_path_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("referenceId")]);
    m_reference_id_isSet = !json[QString("referenceId")].isNull() && m_reference_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;
}

QString OAIDeletedNode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeletedNode::asJsonObject() const {
    QJsonObject obj;
    if (m_accessed_at_isSet) {
        obj.insert(QString("accessedAt"), ::OpenAPI::toJsonValue(m_accessed_at));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deletedAt"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_deleted_by.isSet()) {
        obj.insert(QString("deletedBy"), ::OpenAPI::toJsonValue(m_deleted_by));
    }
    if (m_expire_at_isSet) {
        obj.insert(QString("expireAt"), ::OpenAPI::toJsonValue(m_expire_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_encrypted_isSet) {
        obj.insert(QString("isEncrypted"), ::OpenAPI::toJsonValue(m_is_encrypted));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_parent_path_isSet) {
        obj.insert(QString("parentPath"), ::OpenAPI::toJsonValue(m_parent_path));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("referenceId"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_updated_by.isSet()) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    return obj;
}

QDateTime OAIDeletedNode::getAccessedAt() const {
    return m_accessed_at;
}
void OAIDeletedNode::setAccessedAt(const QDateTime &accessed_at) {
    m_accessed_at = accessed_at;
    m_accessed_at_isSet = true;
}

bool OAIDeletedNode::is_accessed_at_Set() const{
    return m_accessed_at_isSet;
}

bool OAIDeletedNode::is_accessed_at_Valid() const{
    return m_accessed_at_isValid;
}

qint32 OAIDeletedNode::getClassification() const {
    return m_classification;
}
void OAIDeletedNode::setClassification(const qint32 &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIDeletedNode::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIDeletedNode::is_classification_Valid() const{
    return m_classification_isValid;
}

QDateTime OAIDeletedNode::getCreatedAt() const {
    return m_created_at;
}
void OAIDeletedNode::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeletedNode::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeletedNode::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserInfo OAIDeletedNode::getCreatedBy() const {
    return m_created_by;
}
void OAIDeletedNode::setCreatedBy(const OAIUserInfo &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIDeletedNode::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIDeletedNode::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIDeletedNode::getDeletedAt() const {
    return m_deleted_at;
}
void OAIDeletedNode::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIDeletedNode::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIDeletedNode::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

OAIUserInfo OAIDeletedNode::getDeletedBy() const {
    return m_deleted_by;
}
void OAIDeletedNode::setDeletedBy(const OAIUserInfo &deleted_by) {
    m_deleted_by = deleted_by;
    m_deleted_by_isSet = true;
}

bool OAIDeletedNode::is_deleted_by_Set() const{
    return m_deleted_by_isSet;
}

bool OAIDeletedNode::is_deleted_by_Valid() const{
    return m_deleted_by_isValid;
}

QDateTime OAIDeletedNode::getExpireAt() const {
    return m_expire_at;
}
void OAIDeletedNode::setExpireAt(const QDateTime &expire_at) {
    m_expire_at = expire_at;
    m_expire_at_isSet = true;
}

bool OAIDeletedNode::is_expire_at_Set() const{
    return m_expire_at_isSet;
}

bool OAIDeletedNode::is_expire_at_Valid() const{
    return m_expire_at_isValid;
}

qint64 OAIDeletedNode::getId() const {
    return m_id;
}
void OAIDeletedNode::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDeletedNode::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDeletedNode::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIDeletedNode::isIsEncrypted() const {
    return m_is_encrypted;
}
void OAIDeletedNode::setIsEncrypted(const bool &is_encrypted) {
    m_is_encrypted = is_encrypted;
    m_is_encrypted_isSet = true;
}

bool OAIDeletedNode::is_is_encrypted_Set() const{
    return m_is_encrypted_isSet;
}

bool OAIDeletedNode::is_is_encrypted_Valid() const{
    return m_is_encrypted_isValid;
}

QString OAIDeletedNode::getName() const {
    return m_name;
}
void OAIDeletedNode::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDeletedNode::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDeletedNode::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDeletedNode::getNotes() const {
    return m_notes;
}
void OAIDeletedNode::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDeletedNode::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDeletedNode::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAIDeletedNode::getParentId() const {
    return m_parent_id;
}
void OAIDeletedNode::setParentId(const qint64 &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIDeletedNode::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIDeletedNode::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QString OAIDeletedNode::getParentPath() const {
    return m_parent_path;
}
void OAIDeletedNode::setParentPath(const QString &parent_path) {
    m_parent_path = parent_path;
    m_parent_path_isSet = true;
}

bool OAIDeletedNode::is_parent_path_Set() const{
    return m_parent_path_isSet;
}

bool OAIDeletedNode::is_parent_path_Valid() const{
    return m_parent_path_isValid;
}

qint64 OAIDeletedNode::getReferenceId() const {
    return m_reference_id;
}
void OAIDeletedNode::setReferenceId(const qint64 &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIDeletedNode::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIDeletedNode::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

qint64 OAIDeletedNode::getSize() const {
    return m_size;
}
void OAIDeletedNode::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIDeletedNode::is_size_Set() const{
    return m_size_isSet;
}

bool OAIDeletedNode::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIDeletedNode::getType() const {
    return m_type;
}
void OAIDeletedNode::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDeletedNode::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDeletedNode::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIDeletedNode::getUpdatedAt() const {
    return m_updated_at;
}
void OAIDeletedNode::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIDeletedNode::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIDeletedNode::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserInfo OAIDeletedNode::getUpdatedBy() const {
    return m_updated_by;
}
void OAIDeletedNode::setUpdatedBy(const OAIUserInfo &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIDeletedNode::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIDeletedNode::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

bool OAIDeletedNode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeletedNode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_parent_id_isValid && m_parent_path_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
