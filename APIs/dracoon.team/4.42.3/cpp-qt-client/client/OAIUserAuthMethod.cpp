/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserAuthMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserAuthMethod::OAIUserAuthMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserAuthMethod::OAIUserAuthMethod() {
    this->initializeModel();
}

OAIUserAuthMethod::~OAIUserAuthMethod() {}

void OAIUserAuthMethod::initializeModel() {

    m_auth_id_isSet = false;
    m_auth_id_isValid = false;

    m_is_enabled_isSet = false;
    m_is_enabled_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIUserAuthMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserAuthMethod::fromJsonObject(QJsonObject json) {

    m_auth_id_isValid = ::OpenAPI::fromJsonValue(m_auth_id, json[QString("authId")]);
    m_auth_id_isSet = !json[QString("authId")].isNull() && m_auth_id_isValid;

    m_is_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_enabled, json[QString("isEnabled")]);
    m_is_enabled_isSet = !json[QString("isEnabled")].isNull() && m_is_enabled_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;
}

QString OAIUserAuthMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserAuthMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_id_isSet) {
        obj.insert(QString("authId"), ::OpenAPI::toJsonValue(m_auth_id));
    }
    if (m_is_enabled_isSet) {
        obj.insert(QString("isEnabled"), ::OpenAPI::toJsonValue(m_is_enabled));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIUserAuthMethod::getAuthId() const {
    return m_auth_id;
}
void OAIUserAuthMethod::setAuthId(const QString &auth_id) {
    m_auth_id = auth_id;
    m_auth_id_isSet = true;
}

bool OAIUserAuthMethod::is_auth_id_Set() const{
    return m_auth_id_isSet;
}

bool OAIUserAuthMethod::is_auth_id_Valid() const{
    return m_auth_id_isValid;
}

bool OAIUserAuthMethod::isIsEnabled() const {
    return m_is_enabled;
}
void OAIUserAuthMethod::setIsEnabled(const bool &is_enabled) {
    m_is_enabled = is_enabled;
    m_is_enabled_isSet = true;
}

bool OAIUserAuthMethod::is_is_enabled_Set() const{
    return m_is_enabled_isSet;
}

bool OAIUserAuthMethod::is_is_enabled_Valid() const{
    return m_is_enabled_isValid;
}

QList<OAIKeyValueEntry> OAIUserAuthMethod::getOptions() const {
    return m_options;
}
void OAIUserAuthMethod::setOptions(const QList<OAIKeyValueEntry> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIUserAuthMethod::is_options_Set() const{
    return m_options_isSet;
}

bool OAIUserAuthMethod::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIUserAuthMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserAuthMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_id_isValid && m_is_enabled_isValid && true;
}

} // namespace OpenAPI
