/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompleteS3FileUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompleteS3FileUploadRequest::OAICompleteS3FileUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompleteS3FileUploadRequest::OAICompleteS3FileUploadRequest() {
    this->initializeModel();
}

OAICompleteS3FileUploadRequest::~OAICompleteS3FileUploadRequest() {}

void OAICompleteS3FileUploadRequest::initializeModel() {

    m_file_key_isSet = false;
    m_file_key_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_keep_share_links_isSet = false;
    m_keep_share_links_isValid = false;

    m_parts_isSet = false;
    m_parts_isValid = false;

    m_resolution_strategy_isSet = false;
    m_resolution_strategy_isValid = false;
}

void OAICompleteS3FileUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompleteS3FileUploadRequest::fromJsonObject(QJsonObject json) {

    m_file_key_isValid = ::OpenAPI::fromJsonValue(m_file_key, json[QString("fileKey")]);
    m_file_key_isSet = !json[QString("fileKey")].isNull() && m_file_key_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_keep_share_links_isValid = ::OpenAPI::fromJsonValue(m_keep_share_links, json[QString("keepShareLinks")]);
    m_keep_share_links_isSet = !json[QString("keepShareLinks")].isNull() && m_keep_share_links_isValid;

    m_parts_isValid = ::OpenAPI::fromJsonValue(m_parts, json[QString("parts")]);
    m_parts_isSet = !json[QString("parts")].isNull() && m_parts_isValid;

    m_resolution_strategy_isValid = ::OpenAPI::fromJsonValue(m_resolution_strategy, json[QString("resolutionStrategy")]);
    m_resolution_strategy_isSet = !json[QString("resolutionStrategy")].isNull() && m_resolution_strategy_isValid;
}

QString OAICompleteS3FileUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompleteS3FileUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_file_key.isSet()) {
        obj.insert(QString("fileKey"), ::OpenAPI::toJsonValue(m_file_key));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_keep_share_links_isSet) {
        obj.insert(QString("keepShareLinks"), ::OpenAPI::toJsonValue(m_keep_share_links));
    }
    if (m_parts.size() > 0) {
        obj.insert(QString("parts"), ::OpenAPI::toJsonValue(m_parts));
    }
    if (m_resolution_strategy_isSet) {
        obj.insert(QString("resolutionStrategy"), ::OpenAPI::toJsonValue(m_resolution_strategy));
    }
    return obj;
}

OAIFileKey OAICompleteS3FileUploadRequest::getFileKey() const {
    return m_file_key;
}
void OAICompleteS3FileUploadRequest::setFileKey(const OAIFileKey &file_key) {
    m_file_key = file_key;
    m_file_key_isSet = true;
}

bool OAICompleteS3FileUploadRequest::is_file_key_Set() const{
    return m_file_key_isSet;
}

bool OAICompleteS3FileUploadRequest::is_file_key_Valid() const{
    return m_file_key_isValid;
}

QString OAICompleteS3FileUploadRequest::getFileName() const {
    return m_file_name;
}
void OAICompleteS3FileUploadRequest::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAICompleteS3FileUploadRequest::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAICompleteS3FileUploadRequest::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAICompleteS3FileUploadRequest::isKeepShareLinks() const {
    return m_keep_share_links;
}
void OAICompleteS3FileUploadRequest::setKeepShareLinks(const bool &keep_share_links) {
    m_keep_share_links = keep_share_links;
    m_keep_share_links_isSet = true;
}

bool OAICompleteS3FileUploadRequest::is_keep_share_links_Set() const{
    return m_keep_share_links_isSet;
}

bool OAICompleteS3FileUploadRequest::is_keep_share_links_Valid() const{
    return m_keep_share_links_isValid;
}

QList<OAIS3FileUploadPart> OAICompleteS3FileUploadRequest::getParts() const {
    return m_parts;
}
void OAICompleteS3FileUploadRequest::setParts(const QList<OAIS3FileUploadPart> &parts) {
    m_parts = parts;
    m_parts_isSet = true;
}

bool OAICompleteS3FileUploadRequest::is_parts_Set() const{
    return m_parts_isSet;
}

bool OAICompleteS3FileUploadRequest::is_parts_Valid() const{
    return m_parts_isValid;
}

QString OAICompleteS3FileUploadRequest::getResolutionStrategy() const {
    return m_resolution_strategy;
}
void OAICompleteS3FileUploadRequest::setResolutionStrategy(const QString &resolution_strategy) {
    m_resolution_strategy = resolution_strategy;
    m_resolution_strategy_isSet = true;
}

bool OAICompleteS3FileUploadRequest::is_resolution_strategy_Set() const{
    return m_resolution_strategy_isSet;
}

bool OAICompleteS3FileUploadRequest::is_resolution_strategy_Valid() const{
    return m_resolution_strategy_isValid;
}

bool OAICompleteS3FileUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_share_links_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompleteS3FileUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parts_isValid && true;
}

} // namespace OpenAPI
