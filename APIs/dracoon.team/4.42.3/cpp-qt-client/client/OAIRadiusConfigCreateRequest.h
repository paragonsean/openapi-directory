/**
 * DRACOON API
 * REST Web Services for DRACOON<br><br>This page provides an overview of all available and documented DRACOON APIs, which are grouped by tags.<br>Each tag provides a collection of APIs that are intended for a specific area of the DRACOON.<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a><br><br><a title='Terms of service' href='https://www.dracoon.com/terms/general-terms-and-conditions/'>Terms of service</a>
 *
 * The version of the OpenAPI document: 4.42.3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRadiusConfigCreateRequest.h
 *
 * Request model for creating a RADIUS configuration
 */

#ifndef OAIRadiusConfigCreateRequest_H
#define OAIRadiusConfigCreateRequest_H

#include <QJsonObject>

#include "OAIFailoverServer.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFailoverServer;

class OAIRadiusConfigCreateRequest : public OAIObject {
public:
    OAIRadiusConfigCreateRequest();
    OAIRadiusConfigCreateRequest(QString json);
    ~OAIRadiusConfigCreateRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIFailoverServer getFailoverServer() const;
    void setFailoverServer(const OAIFailoverServer &failover_server);
    bool is_failover_server_Set() const;
    bool is_failover_server_Valid() const;

    QString getIpAddress() const;
    void setIpAddress(const QString &ip_address);
    bool is_ip_address_Set() const;
    bool is_ip_address_Valid() const;

    bool isOtpPinFirst() const;
    void setOtpPinFirst(const bool &otp_pin_first);
    bool is_otp_pin_first_Set() const;
    bool is_otp_pin_first_Valid() const;

    qint32 getPort() const;
    void setPort(const qint32 &port);
    bool is_port_Set() const;
    bool is_port_Valid() const;

    QString getSharedSecret() const;
    void setSharedSecret(const QString &shared_secret);
    bool is_shared_secret_Set() const;
    bool is_shared_secret_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIFailoverServer m_failover_server;
    bool m_failover_server_isSet;
    bool m_failover_server_isValid;

    QString m_ip_address;
    bool m_ip_address_isSet;
    bool m_ip_address_isValid;

    bool m_otp_pin_first;
    bool m_otp_pin_first_isSet;
    bool m_otp_pin_first_isValid;

    qint32 m_port;
    bool m_port_isSet;
    bool m_port_isValid;

    QString m_shared_secret;
    bool m_shared_secret_isSet;
    bool m_shared_secret_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRadiusConfigCreateRequest)

#endif // OAIRadiusConfigCreateRequest_H
