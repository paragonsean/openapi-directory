# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_metadata_filter import DocumentMetadataFilter
from openapi_server import util


class Query(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: DocumentMetadataFilter=None, query: str=None, top_k: int=3):
        """Query - a model defined in OpenAPI

        :param filter: The filter of this Query.
        :param query: The query of this Query.
        :param top_k: The top_k of this Query.
        """
        self.openapi_types = {
            'filter': DocumentMetadataFilter,
            'query': str,
            'top_k': int
        }

        self.attribute_map = {
            'filter': 'filter',
            'query': 'query',
            'top_k': 'top_k'
        }

        self._filter = filter
        self._query = query
        self._top_k = top_k

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Query':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Query of this Query.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this Query.


        :return: The filter of this Query.
        :rtype: DocumentMetadataFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Query.


        :param filter: The filter of this Query.
        :type filter: DocumentMetadataFilter
        """

        self._filter = filter

    @property
    def query(self):
        """Gets the query of this Query.


        :return: The query of this Query.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Query.


        :param query: The query of this Query.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def top_k(self):
        """Gets the top_k of this Query.


        :return: The top_k of this Query.
        :rtype: int
        """
        return self._top_k

    @top_k.setter
    def top_k(self, top_k):
        """Sets the top_k of this Query.


        :param top_k: The top_k of this Query.
        :type top_k: int
        """

        self._top_k = top_k
