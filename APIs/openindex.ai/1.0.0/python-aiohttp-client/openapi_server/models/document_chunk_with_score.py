# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_chunk_metadata import DocumentChunkMetadata
from openapi_server import util


class DocumentChunkWithScore(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedding: List[float]=None, id: str=None, metadata: DocumentChunkMetadata=None, score: float=None, text: str=None):
        """DocumentChunkWithScore - a model defined in OpenAPI

        :param embedding: The embedding of this DocumentChunkWithScore.
        :param id: The id of this DocumentChunkWithScore.
        :param metadata: The metadata of this DocumentChunkWithScore.
        :param score: The score of this DocumentChunkWithScore.
        :param text: The text of this DocumentChunkWithScore.
        """
        self.openapi_types = {
            'embedding': List[float],
            'id': str,
            'metadata': DocumentChunkMetadata,
            'score': float,
            'text': str
        }

        self.attribute_map = {
            'embedding': 'embedding',
            'id': 'id',
            'metadata': 'metadata',
            'score': 'score',
            'text': 'text'
        }

        self._embedding = embedding
        self._id = id
        self._metadata = metadata
        self._score = score
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentChunkWithScore':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentChunkWithScore of this DocumentChunkWithScore.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedding(self):
        """Gets the embedding of this DocumentChunkWithScore.


        :return: The embedding of this DocumentChunkWithScore.
        :rtype: List[float]
        """
        return self._embedding

    @embedding.setter
    def embedding(self, embedding):
        """Sets the embedding of this DocumentChunkWithScore.


        :param embedding: The embedding of this DocumentChunkWithScore.
        :type embedding: List[float]
        """

        self._embedding = embedding

    @property
    def id(self):
        """Gets the id of this DocumentChunkWithScore.


        :return: The id of this DocumentChunkWithScore.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentChunkWithScore.


        :param id: The id of this DocumentChunkWithScore.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this DocumentChunkWithScore.


        :return: The metadata of this DocumentChunkWithScore.
        :rtype: DocumentChunkMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DocumentChunkWithScore.


        :param metadata: The metadata of this DocumentChunkWithScore.
        :type metadata: DocumentChunkMetadata
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")

        self._metadata = metadata

    @property
    def score(self):
        """Gets the score of this DocumentChunkWithScore.


        :return: The score of this DocumentChunkWithScore.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this DocumentChunkWithScore.


        :param score: The score of this DocumentChunkWithScore.
        :type score: float
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def text(self):
        """Gets the text of this DocumentChunkWithScore.


        :return: The text of this DocumentChunkWithScore.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this DocumentChunkWithScore.


        :param text: The text of this DocumentChunkWithScore.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
