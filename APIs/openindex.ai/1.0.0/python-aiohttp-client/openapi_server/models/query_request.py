# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query import Query
from openapi_server import util


class QueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, namespace: str=None, queries: List[Query]=None):
        """QueryRequest - a model defined in OpenAPI

        :param namespace: The namespace of this QueryRequest.
        :param queries: The queries of this QueryRequest.
        """
        self.openapi_types = {
            'namespace': str,
            'queries': List[Query]
        }

        self.attribute_map = {
            'namespace': 'namespace',
            'queries': 'queries'
        }

        self._namespace = namespace
        self._queries = queries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRequest of this QueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def namespace(self):
        """Gets the namespace of this QueryRequest.


        :return: The namespace of this QueryRequest.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this QueryRequest.


        :param namespace: The namespace of this QueryRequest.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def queries(self):
        """Gets the queries of this QueryRequest.


        :return: The queries of this QueryRequest.
        :rtype: List[Query]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this QueryRequest.


        :param queries: The queries of this QueryRequest.
        :type queries: List[Query]
        """
        if queries is None:
            raise ValueError("Invalid value for `queries`, must not be `None`")

        self._queries = queries
