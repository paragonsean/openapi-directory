/**
 * OpenIndex Retrieval Plugin API
 * A retrieval API for querying and filtering documents based on natural language queries and metadata
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Source from './Source';

/**
 * The DocumentMetadataFilter model module.
 * @module model/DocumentMetadataFilter
 * @version 1.0.0
 */
class DocumentMetadataFilter {
    /**
     * Constructs a new <code>DocumentMetadataFilter</code>.
     * @alias module:model/DocumentMetadataFilter
     */
    constructor() { 
        
        DocumentMetadataFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DocumentMetadataFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentMetadataFilter} obj Optional instance to populate.
     * @return {module:model/DocumentMetadataFilter} The populated <code>DocumentMetadataFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentMetadataFilter();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('collection_id')) {
                obj['collection_id'] = ApiClient.convertToType(data['collection_id'], 'String');
            }
            if (data.hasOwnProperty('document_id')) {
                obj['document_id'] = ApiClient.convertToType(data['document_id'], 'String');
            }
            if (data.hasOwnProperty('end_date')) {
                obj['end_date'] = ApiClient.convertToType(data['end_date'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Source.constructFromObject(data['source']);
            }
            if (data.hasOwnProperty('source_id')) {
                obj['source_id'] = ApiClient.convertToType(data['source_id'], 'String');
            }
            if (data.hasOwnProperty('start_date')) {
                obj['start_date'] = ApiClient.convertToType(data['start_date'], 'String');
            }
            if (data.hasOwnProperty('time_period')) {
                obj['time_period'] = ApiClient.convertToType(data['time_period'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentMetadataFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentMetadataFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['collection_id'] && !(typeof data['collection_id'] === 'string' || data['collection_id'] instanceof String)) {
            throw new Error("Expected the field `collection_id` to be a primitive type in the JSON string but got " + data['collection_id']);
        }
        // ensure the json data is a string
        if (data['document_id'] && !(typeof data['document_id'] === 'string' || data['document_id'] instanceof String)) {
            throw new Error("Expected the field `document_id` to be a primitive type in the JSON string but got " + data['document_id']);
        }
        // ensure the json data is a string
        if (data['end_date'] && !(typeof data['end_date'] === 'string' || data['end_date'] instanceof String)) {
            throw new Error("Expected the field `end_date` to be a primitive type in the JSON string but got " + data['end_date']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['source_id'] && !(typeof data['source_id'] === 'string' || data['source_id'] instanceof String)) {
            throw new Error("Expected the field `source_id` to be a primitive type in the JSON string but got " + data['source_id']);
        }
        // ensure the json data is a string
        if (data['start_date'] && !(typeof data['start_date'] === 'string' || data['start_date'] instanceof String)) {
            throw new Error("Expected the field `start_date` to be a primitive type in the JSON string but got " + data['start_date']);
        }
        // ensure the json data is a string
        if (data['time_period'] && !(typeof data['time_period'] === 'string' || data['time_period'] instanceof String)) {
            throw new Error("Expected the field `time_period` to be a primitive type in the JSON string but got " + data['time_period']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * @member {String} author
 */
DocumentMetadataFilter.prototype['author'] = undefined;

/**
 * @member {String} collection_id
 */
DocumentMetadataFilter.prototype['collection_id'] = undefined;

/**
 * @member {String} document_id
 */
DocumentMetadataFilter.prototype['document_id'] = undefined;

/**
 * @member {String} end_date
 */
DocumentMetadataFilter.prototype['end_date'] = undefined;

/**
 * @member {Array.<String>} keywords
 */
DocumentMetadataFilter.prototype['keywords'] = undefined;

/**
 * @member {String} language
 */
DocumentMetadataFilter.prototype['language'] = undefined;

/**
 * @member {module:model/Source} source
 */
DocumentMetadataFilter.prototype['source'] = undefined;

/**
 * @member {String} source_id
 */
DocumentMetadataFilter.prototype['source_id'] = undefined;

/**
 * @member {String} start_date
 */
DocumentMetadataFilter.prototype['start_date'] = undefined;

/**
 * @member {String} time_period
 */
DocumentMetadataFilter.prototype['time_period'] = undefined;

/**
 * @member {String} user_id
 */
DocumentMetadataFilter.prototype['user_id'] = undefined;






export default DocumentMetadataFilter;

