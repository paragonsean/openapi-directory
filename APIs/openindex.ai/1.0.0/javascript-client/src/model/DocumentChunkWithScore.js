/**
 * OpenIndex Retrieval Plugin API
 * A retrieval API for querying and filtering documents based on natural language queries and metadata
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentChunkMetadata from './DocumentChunkMetadata';

/**
 * The DocumentChunkWithScore model module.
 * @module model/DocumentChunkWithScore
 * @version 1.0.0
 */
class DocumentChunkWithScore {
    /**
     * Constructs a new <code>DocumentChunkWithScore</code>.
     * @alias module:model/DocumentChunkWithScore
     * @param metadata {module:model/DocumentChunkMetadata} 
     * @param score {Number} 
     * @param text {String} 
     */
    constructor(metadata, score, text) { 
        
        DocumentChunkWithScore.initialize(this, metadata, score, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, metadata, score, text) { 
        obj['metadata'] = metadata;
        obj['score'] = score;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>DocumentChunkWithScore</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentChunkWithScore} obj Optional instance to populate.
     * @return {module:model/DocumentChunkWithScore} The populated <code>DocumentChunkWithScore</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentChunkWithScore();

            if (data.hasOwnProperty('embedding')) {
                obj['embedding'] = ApiClient.convertToType(data['embedding'], ['Number']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = DocumentChunkMetadata.constructFromObject(data['metadata']);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentChunkWithScore</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentChunkWithScore</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentChunkWithScore.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['embedding'])) {
            throw new Error("Expected the field `embedding` to be an array in the JSON data but got " + data['embedding']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `metadata`
        if (data['metadata']) { // data not null
          DocumentChunkMetadata.validateJSON(data['metadata']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

DocumentChunkWithScore.RequiredProperties = ["metadata", "score", "text"];

/**
 * @member {Array.<Number>} embedding
 */
DocumentChunkWithScore.prototype['embedding'] = undefined;

/**
 * @member {String} id
 */
DocumentChunkWithScore.prototype['id'] = undefined;

/**
 * @member {module:model/DocumentChunkMetadata} metadata
 */
DocumentChunkWithScore.prototype['metadata'] = undefined;

/**
 * @member {Number} score
 */
DocumentChunkWithScore.prototype['score'] = undefined;

/**
 * @member {String} text
 */
DocumentChunkWithScore.prototype['text'] = undefined;






export default DocumentChunkWithScore;

