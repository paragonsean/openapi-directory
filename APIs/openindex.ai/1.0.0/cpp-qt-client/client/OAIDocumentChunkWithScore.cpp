/**
 * OpenIndex Retrieval Plugin API
 * A retrieval API for querying and filtering documents based on natural language queries and metadata
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentChunkWithScore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentChunkWithScore::OAIDocumentChunkWithScore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentChunkWithScore::OAIDocumentChunkWithScore() {
    this->initializeModel();
}

OAIDocumentChunkWithScore::~OAIDocumentChunkWithScore() {}

void OAIDocumentChunkWithScore::initializeModel() {

    m_embedding_isSet = false;
    m_embedding_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIDocumentChunkWithScore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentChunkWithScore::fromJsonObject(QJsonObject json) {

    m_embedding_isValid = ::OpenAPI::fromJsonValue(m_embedding, json[QString("embedding")]);
    m_embedding_isSet = !json[QString("embedding")].isNull() && m_embedding_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIDocumentChunkWithScore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentChunkWithScore::asJsonObject() const {
    QJsonObject obj;
    if (m_embedding.size() > 0) {
        obj.insert(QString("embedding"), ::OpenAPI::toJsonValue(m_embedding));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.isSet()) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<double> OAIDocumentChunkWithScore::getEmbedding() const {
    return m_embedding;
}
void OAIDocumentChunkWithScore::setEmbedding(const QList<double> &embedding) {
    m_embedding = embedding;
    m_embedding_isSet = true;
}

bool OAIDocumentChunkWithScore::is_embedding_Set() const{
    return m_embedding_isSet;
}

bool OAIDocumentChunkWithScore::is_embedding_Valid() const{
    return m_embedding_isValid;
}

QString OAIDocumentChunkWithScore::getId() const {
    return m_id;
}
void OAIDocumentChunkWithScore::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDocumentChunkWithScore::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDocumentChunkWithScore::is_id_Valid() const{
    return m_id_isValid;
}

OAIDocumentChunkMetadata OAIDocumentChunkWithScore::getMetadata() const {
    return m_metadata;
}
void OAIDocumentChunkWithScore::setMetadata(const OAIDocumentChunkMetadata &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDocumentChunkWithScore::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDocumentChunkWithScore::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAIDocumentChunkWithScore::getScore() const {
    return m_score;
}
void OAIDocumentChunkWithScore::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIDocumentChunkWithScore::is_score_Set() const{
    return m_score_isSet;
}

bool OAIDocumentChunkWithScore::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIDocumentChunkWithScore::getText() const {
    return m_text;
}
void OAIDocumentChunkWithScore::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIDocumentChunkWithScore::is_text_Set() const{
    return m_text_isSet;
}

bool OAIDocumentChunkWithScore::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIDocumentChunkWithScore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_embedding.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentChunkWithScore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_metadata_isValid && m_score_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
