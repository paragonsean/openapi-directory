/**
 * OpenIndex Retrieval Plugin API
 * A retrieval API for querying and filtering documents based on natural language queries and metadata
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentMetadataFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentMetadataFilter::OAIDocumentMetadataFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentMetadataFilter::OAIDocumentMetadataFilter() {
    this->initializeModel();
}

OAIDocumentMetadataFilter::~OAIDocumentMetadataFilter() {}

void OAIDocumentMetadataFilter::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_document_id_isSet = false;
    m_document_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_time_period_isSet = false;
    m_time_period_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIDocumentMetadataFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentMetadataFilter::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collection_id")]);
    m_collection_id_isSet = !json[QString("collection_id")].isNull() && m_collection_id_isValid;

    m_document_id_isValid = ::OpenAPI::fromJsonValue(m_document_id, json[QString("document_id")]);
    m_document_id_isSet = !json[QString("document_id")].isNull() && m_document_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("source_id")]);
    m_source_id_isSet = !json[QString("source_id")].isNull() && m_source_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;

    m_time_period_isValid = ::OpenAPI::fromJsonValue(m_time_period, json[QString("time_period")]);
    m_time_period_isSet = !json[QString("time_period")].isNull() && m_time_period_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIDocumentMetadataFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentMetadataFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_collection_id_isSet) {
        obj.insert(QString("collection_id"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_document_id_isSet) {
        obj.insert(QString("document_id"), ::OpenAPI::toJsonValue(m_document_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_id_isSet) {
        obj.insert(QString("source_id"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_time_period_isSet) {
        obj.insert(QString("time_period"), ::OpenAPI::toJsonValue(m_time_period));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIDocumentMetadataFilter::getAuthor() const {
    return m_author;
}
void OAIDocumentMetadataFilter::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIDocumentMetadataFilter::is_author_Set() const{
    return m_author_isSet;
}

bool OAIDocumentMetadataFilter::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIDocumentMetadataFilter::getCollectionId() const {
    return m_collection_id;
}
void OAIDocumentMetadataFilter::setCollectionId(const QString &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAIDocumentMetadataFilter::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAIDocumentMetadataFilter::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

QString OAIDocumentMetadataFilter::getDocumentId() const {
    return m_document_id;
}
void OAIDocumentMetadataFilter::setDocumentId(const QString &document_id) {
    m_document_id = document_id;
    m_document_id_isSet = true;
}

bool OAIDocumentMetadataFilter::is_document_id_Set() const{
    return m_document_id_isSet;
}

bool OAIDocumentMetadataFilter::is_document_id_Valid() const{
    return m_document_id_isValid;
}

QString OAIDocumentMetadataFilter::getEndDate() const {
    return m_end_date;
}
void OAIDocumentMetadataFilter::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDocumentMetadataFilter::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDocumentMetadataFilter::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QList<QString> OAIDocumentMetadataFilter::getKeywords() const {
    return m_keywords;
}
void OAIDocumentMetadataFilter::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIDocumentMetadataFilter::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIDocumentMetadataFilter::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIDocumentMetadataFilter::getLanguage() const {
    return m_language;
}
void OAIDocumentMetadataFilter::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIDocumentMetadataFilter::is_language_Set() const{
    return m_language_isSet;
}

bool OAIDocumentMetadataFilter::is_language_Valid() const{
    return m_language_isValid;
}

OAISource OAIDocumentMetadataFilter::getSource() const {
    return m_source;
}
void OAIDocumentMetadataFilter::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIDocumentMetadataFilter::is_source_Set() const{
    return m_source_isSet;
}

bool OAIDocumentMetadataFilter::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIDocumentMetadataFilter::getSourceId() const {
    return m_source_id;
}
void OAIDocumentMetadataFilter::setSourceId(const QString &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAIDocumentMetadataFilter::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAIDocumentMetadataFilter::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAIDocumentMetadataFilter::getStartDate() const {
    return m_start_date;
}
void OAIDocumentMetadataFilter::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDocumentMetadataFilter::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDocumentMetadataFilter::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIDocumentMetadataFilter::getTimePeriod() const {
    return m_time_period;
}
void OAIDocumentMetadataFilter::setTimePeriod(const QString &time_period) {
    m_time_period = time_period;
    m_time_period_isSet = true;
}

bool OAIDocumentMetadataFilter::is_time_period_Set() const{
    return m_time_period_isSet;
}

bool OAIDocumentMetadataFilter::is_time_period_Valid() const{
    return m_time_period_isValid;
}

QString OAIDocumentMetadataFilter::getUserId() const {
    return m_user_id;
}
void OAIDocumentMetadataFilter::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIDocumentMetadataFilter::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIDocumentMetadataFilter::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIDocumentMetadataFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentMetadataFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
