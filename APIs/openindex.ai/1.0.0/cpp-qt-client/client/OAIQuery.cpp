/**
 * OpenIndex Retrieval Plugin API
 * A retrieval API for querying and filtering documents based on natural language queries and metadata
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_top_k_isSet = false;
    m_top_k_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_top_k_isValid = ::OpenAPI::fromJsonValue(m_top_k, json[QString("top_k")]);
    m_top_k_isSet = !json[QString("top_k")].isNull() && m_top_k_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_top_k_isSet) {
        obj.insert(QString("top_k"), ::OpenAPI::toJsonValue(m_top_k));
    }
    return obj;
}

OAIDocumentMetadataFilter OAIQuery::getFilter() const {
    return m_filter;
}
void OAIQuery::setFilter(const OAIDocumentMetadataFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIQuery::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIQuery::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIQuery::getQuery() const {
    return m_query;
}
void OAIQuery::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQuery::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQuery::is_query_Valid() const{
    return m_query_isValid;
}

qint32 OAIQuery::getTopK() const {
    return m_top_k;
}
void OAIQuery::setTopK(const qint32 &top_k) {
    m_top_k = top_k;
    m_top_k_isSet = true;
}

bool OAIQuery::is_top_k_Set() const{
    return m_top_k_isSet;
}

bool OAIQuery::is_top_k_Valid() const{
    return m_top_k_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_k_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && true;
}

} // namespace OpenAPI
