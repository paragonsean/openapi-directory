# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.check_into_an_item_request_movie_ids import CheckIntoAnItemRequestMovieIds
from openapi_server import util


class AddItemsToCollectionRequestMoviesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: str=None, audio_channels: str=None, collected_at: str=None, hdr: str=None, ids: CheckIntoAnItemRequestMovieIds=None, media_type: str=None, resolution: str=None, title: str=None, year: float=None):
        """AddItemsToCollectionRequestMoviesInner - a model defined in OpenAPI

        :param audio: The audio of this AddItemsToCollectionRequestMoviesInner.
        :param audio_channels: The audio_channels of this AddItemsToCollectionRequestMoviesInner.
        :param collected_at: The collected_at of this AddItemsToCollectionRequestMoviesInner.
        :param hdr: The hdr of this AddItemsToCollectionRequestMoviesInner.
        :param ids: The ids of this AddItemsToCollectionRequestMoviesInner.
        :param media_type: The media_type of this AddItemsToCollectionRequestMoviesInner.
        :param resolution: The resolution of this AddItemsToCollectionRequestMoviesInner.
        :param title: The title of this AddItemsToCollectionRequestMoviesInner.
        :param year: The year of this AddItemsToCollectionRequestMoviesInner.
        """
        self.openapi_types = {
            'audio': str,
            'audio_channels': str,
            'collected_at': str,
            'hdr': str,
            'ids': CheckIntoAnItemRequestMovieIds,
            'media_type': str,
            'resolution': str,
            'title': str,
            'year': float
        }

        self.attribute_map = {
            'audio': 'audio',
            'audio_channels': 'audio_channels',
            'collected_at': 'collected_at',
            'hdr': 'hdr',
            'ids': 'ids',
            'media_type': 'media_type',
            'resolution': 'resolution',
            'title': 'title',
            'year': 'year'
        }

        self._audio = audio
        self._audio_channels = audio_channels
        self._collected_at = collected_at
        self._hdr = hdr
        self._ids = ids
        self._media_type = media_type
        self._resolution = resolution
        self._title = title
        self._year = year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddItemsToCollectionRequestMoviesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Add_items_to_collection_request_movies_inner of this AddItemsToCollectionRequestMoviesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this AddItemsToCollectionRequestMoviesInner.


        :return: The audio of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this AddItemsToCollectionRequestMoviesInner.


        :param audio: The audio of this AddItemsToCollectionRequestMoviesInner.
        :type audio: str
        """

        self._audio = audio

    @property
    def audio_channels(self):
        """Gets the audio_channels of this AddItemsToCollectionRequestMoviesInner.


        :return: The audio_channels of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._audio_channels

    @audio_channels.setter
    def audio_channels(self, audio_channels):
        """Sets the audio_channels of this AddItemsToCollectionRequestMoviesInner.


        :param audio_channels: The audio_channels of this AddItemsToCollectionRequestMoviesInner.
        :type audio_channels: str
        """

        self._audio_channels = audio_channels

    @property
    def collected_at(self):
        """Gets the collected_at of this AddItemsToCollectionRequestMoviesInner.


        :return: The collected_at of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._collected_at

    @collected_at.setter
    def collected_at(self, collected_at):
        """Sets the collected_at of this AddItemsToCollectionRequestMoviesInner.


        :param collected_at: The collected_at of this AddItemsToCollectionRequestMoviesInner.
        :type collected_at: str
        """

        self._collected_at = collected_at

    @property
    def hdr(self):
        """Gets the hdr of this AddItemsToCollectionRequestMoviesInner.


        :return: The hdr of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._hdr

    @hdr.setter
    def hdr(self, hdr):
        """Sets the hdr of this AddItemsToCollectionRequestMoviesInner.


        :param hdr: The hdr of this AddItemsToCollectionRequestMoviesInner.
        :type hdr: str
        """

        self._hdr = hdr

    @property
    def ids(self):
        """Gets the ids of this AddItemsToCollectionRequestMoviesInner.


        :return: The ids of this AddItemsToCollectionRequestMoviesInner.
        :rtype: CheckIntoAnItemRequestMovieIds
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this AddItemsToCollectionRequestMoviesInner.


        :param ids: The ids of this AddItemsToCollectionRequestMoviesInner.
        :type ids: CheckIntoAnItemRequestMovieIds
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")

        self._ids = ids

    @property
    def media_type(self):
        """Gets the media_type of this AddItemsToCollectionRequestMoviesInner.


        :return: The media_type of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this AddItemsToCollectionRequestMoviesInner.


        :param media_type: The media_type of this AddItemsToCollectionRequestMoviesInner.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def resolution(self):
        """Gets the resolution of this AddItemsToCollectionRequestMoviesInner.


        :return: The resolution of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this AddItemsToCollectionRequestMoviesInner.


        :param resolution: The resolution of this AddItemsToCollectionRequestMoviesInner.
        :type resolution: str
        """

        self._resolution = resolution

    @property
    def title(self):
        """Gets the title of this AddItemsToCollectionRequestMoviesInner.


        :return: The title of this AddItemsToCollectionRequestMoviesInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AddItemsToCollectionRequestMoviesInner.


        :param title: The title of this AddItemsToCollectionRequestMoviesInner.
        :type title: str
        """

        self._title = title

    @property
    def year(self):
        """Gets the year of this AddItemsToCollectionRequestMoviesInner.


        :return: The year of this AddItemsToCollectionRequestMoviesInner.
        :rtype: float
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this AddItemsToCollectionRequestMoviesInner.


        :param year: The year of this AddItemsToCollectionRequestMoviesInner.
        :type year: float
        """

        self._year = year
