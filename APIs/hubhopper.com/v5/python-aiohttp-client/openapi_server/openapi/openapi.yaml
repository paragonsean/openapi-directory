openapi: 3.0.1
info:
  description: "This is an interactive document explaining the API(s) that could be\
    \ used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key\
    \ provided to authorize `x-api-key` and test the API(s). The output data models\
    \ are also available for reference."
  title: Hubhopper Partner Integration API(s) - Production
  version: v5
  x-apisguru-categories:
  - entertainment
  x-origin:
  - format: swagger
    url: https://docs.hubhopper.com/api/integrations/partner/swagger.yaml
    version: "2.0"
  x-providerName: hubhopper.com
servers:
- url: https://apis.hubhopper.com/partner
tags:
- description: API(s) related to Categories.
  name: Category
- description: API(s) related to Podcasts and Episodes.
  name: Podcast
- description: API(s) related to Content Utility on Hubhopper.
  name: Util
paths:
  /categories:
    get:
      description: Get the list of all content categories.
      operationId: categories_get
      parameters:
      - description: Provide the size of the page to fetch.
        in: query
        name: pageSize
        schema:
          type: string
      - description: Provide the page number to fetch.
        in: query
        name: page
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Category
      x-openapi-router-controller: openapi_server.controllers.category_controller
  /categories/{categoryId}:
    get:
      description: Get specific content category.
      operationId: categories_category_id_get
      parameters:
      - description: Unique qualifier for a category.
        in: path
        name: categoryId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleCategory'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Category
      x-openapi-router-controller: openapi_server.controllers.category_controller
  /categories/{categoryId}/podcasts:
    get:
      description: Get a list of all podcasts under a category.
      operationId: categories_category_id_podcasts_get
      parameters:
      - description: Unique qualifier for a category.
        in: path
        name: categoryId
        required: true
        schema:
          type: string
      - description: Provide the page number to fetch.
        in: query
        name: page
        schema:
          type: string
      - description: Provide the size of the page to fetch.
        in: query
        name: pageSize
        schema:
          type: string
      - description: Order the items by 'newest' | 'random'
        in: query
        name: order
        schema:
          type: string
      - description: "Takes filters like 'lang' in a url encoded json. \nExample:\n\
          1)Single ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));\n\
          2)Multiple ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ,\"hi\"]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));"
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodcastList'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Category
      x-openapi-router-controller: openapi_server.controllers.category_controller
  /podcasts:
    get:
      description: Get the list of all podcasts.
      operationId: podcasts_get
      parameters:
      - description: Provide the page number to fetch.
        in: query
        name: page
        schema:
          type: string
      - description: Provide the size of the page to fetch.
        in: query
        name: pageSize
        schema:
          type: string
      - description: Order the items by 'newest' | 'random'
        in: query
        name: order
        schema:
          type: string
      - description: "Takes filters like 'lang' in a url encoded json. \nExample:\n\
          1)Single ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));\n\
          2)Multiple ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ,\"hi\"]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));"
        in: query
        name: filters
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodcastList'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Podcast
      x-openapi-router-controller: openapi_server.controllers.podcast_controller
  /podcasts/{podcastId}:
    get:
      description: Get a single Podcast.
      operationId: podcasts_podcast_id_get
      parameters:
      - description: Unique qualifier for a podcast.
        in: path
        name: podcastId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SinglePodcast'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Podcast
      x-openapi-router-controller: openapi_server.controllers.podcast_controller
  /podcasts/{podcastId}/episodes:
    get:
      description: Get a list of all episodes under a podcast.
      operationId: podcasts_podcast_id_episodes_get
      parameters:
      - description: Provide the page number to fetch.
        in: query
        name: page
        schema:
          type: string
      - description: Provide the size of the page to fetch.
        in: query
        name: pageSize
        schema:
          type: string
      - description: Order the items by 'newest' | 'random'
        in: query
        name: order
        schema:
          type: string
      - description: "Takes filters like 'lang' in a url encoded json. \nExample:\n\
          1)Single ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));\n\
          2)Multiple ->\n&nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"\
          ,\"hi\"]};\n&nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));"
        in: query
        name: filters
        schema:
          type: string
      - description: Unique qualifier for a podcast.
        in: path
        name: podcastId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PodcastEpisodeList'
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Podcast
      x-openapi-router-controller: openapi_server.controllers.podcast_controller
  /util/languages:
    get:
      operationId: util_languages_get
      parameters:
      - description: Provide the size of the page to fetch.
        in: query
        name: pageSize
        schema:
          type: string
      - description: Provide the page number to fetch.
        in: query
        name: page
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LanguageList'
          description: 200 response
        "204":
          content: {}
          description: 204 response
        "401":
          content: {}
          description: 401 response
        "404":
          content: {}
          description: 404 response
        "500":
          content: {}
          description: 500 response
      security:
      - api_key: []
        partner_id: []
      tags:
      - Util
      x-openapi-router-controller: openapi_server.controllers.util_controller
components:
  schemas:
    CategoryList:
      example:
        total: 5
        noOfPages: 6
        pageSize: 5
        categories:
        - name: name
          id: 0
          url: url
        - name: name
          id: 0
          url: url
        page: 1
      properties:
        categories:
          items:
            $ref: '#/components/schemas/CategoryListCategoriesItem'
          title: categories
          type: array
        noOfPages:
          title: noOfPages
          type: integer
        page:
          title: page
          type: integer
        pageSize:
          title: pageSize
          type: integer
        total:
          title: total
          type: integer
      title: CategoryListOutputModel
      type: object
    CategoryListCategoriesItem:
      example:
        name: name
        id: 0
        url: url
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
      title: CategoryListCategoriesItem
      type: object
    Empty:
      title: Empty Schema
      type: object
    Error:
      example:
        message: message
      properties:
        message:
          title: message
          type: string
      title: Error Schema
      type: object
    LanguageItem:
      example:
        code: code
        name: name
        id: 0
      properties:
        code:
          title: code
          type: string
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
      title: LanguageItem
      type: object
    LanguageList:
      example:
        total: 5
        languages:
        - code: code
          name: name
          id: 0
        - code: code
          name: name
          id: 0
        noOfPages: 6
        pageSize: 5
        page: 1
      properties:
        languages:
          items:
            $ref: '#/components/schemas/LanguageItem'
          title: languages
          type: array
        noOfPages:
          title: noOfPages
          type: integer
        page:
          title: page
          type: integer
        pageSize:
          title: pageSize
          type: integer
        total:
          title: total
          type: integer
      title: LanguageList
      type: object
    PodcastEpisodeList:
      example:
        total: 9
        noOfPages: 5
        pageSize: 7
        page: 2
        episodes:
        - play:
            duration: duration
            durationInSec: 6
            size: size
            type: type
            url: url
          image: image
          podcastId: 1
          publishTime: publishTime
          author: author
          podcastUrl: podcastUrl
          episodeUrl: episodeUrl
          description: description
          publishedOn: 5
          isNew: true
          episodeId: 0
          title: title
        - play:
            duration: duration
            durationInSec: 6
            size: size
            type: type
            url: url
          image: image
          podcastId: 1
          publishTime: publishTime
          author: author
          podcastUrl: podcastUrl
          episodeUrl: episodeUrl
          description: description
          publishedOn: 5
          isNew: true
          episodeId: 0
          title: title
      properties:
        episodes:
          items:
            $ref: '#/components/schemas/PodcastEpisodeListEpisodesItem'
          title: episodes
          type: array
        noOfPages:
          title: noOfPages
          type: integer
        page:
          title: page
          type: integer
        pageSize:
          title: pageSize
          type: integer
        total:
          title: total
          type: integer
      title: PodcastEpisodeListOutputModel
      type: object
    PodcastEpisodeListEpisodesItem:
      example:
        play:
          duration: duration
          durationInSec: 6
          size: size
          type: type
          url: url
        image: image
        podcastId: 1
        publishTime: publishTime
        author: author
        podcastUrl: podcastUrl
        episodeUrl: episodeUrl
        description: description
        publishedOn: 5
        isNew: true
        episodeId: 0
        title: title
      properties:
        author:
          title: author
          type: string
        description:
          title: description
          type: string
        episodeId:
          title: episodeId
          type: integer
        episodeUrl:
          title: episodeUrl
          type: string
        image:
          title: image
          type: string
        isNew:
          title: isNew
          type: boolean
        play:
          $ref: '#/components/schemas/PodcastEpisodeListEpisodesItem_play'
        podcastId:
          title: podcastId
          type: integer
        podcastUrl:
          title: podcastUrl
          type: string
        publishTime:
          title: publishTime
          type: string
        publishedOn:
          title: publishedOn
          type: integer
        title:
          title: title
          type: string
      title: PodcastEpisodeListEpisodesItem
      type: object
    PodcastList:
      example:
        total: 3
        podcasts:
        - image: image
          podcastId: 9
          featured:
            name: name
            id: 5
          latestEpisodeTime: latestEpisodeTime
          keywords: keywords
          author: author
          description: description
          title: title
          featuredId: 7
          url: url
          category:
            name: name
            id: 5
          categoryId: 5
          episodes: 2
        - image: image
          podcastId: 9
          featured:
            name: name
            id: 5
          latestEpisodeTime: latestEpisodeTime
          keywords: keywords
          author: author
          description: description
          title: title
          featuredId: 7
          url: url
          category:
            name: name
            id: 5
          categoryId: 5
          episodes: 2
        noOfPages: 0
        pageSize: 1
        page: 6
      properties:
        noOfPages:
          title: noOfPages
          type: integer
        page:
          title: page
          type: integer
        pageSize:
          title: pageSize
          type: integer
        podcasts:
          items:
            $ref: '#/components/schemas/PodcastListPodcastsItem'
          title: podcasts
          type: array
        total:
          title: total
          type: integer
      title: PodcastListOutputModel
      type: object
    PodcastListPodcastsItem:
      example:
        image: image
        podcastId: 9
        featured:
          name: name
          id: 5
        latestEpisodeTime: latestEpisodeTime
        keywords: keywords
        author: author
        description: description
        title: title
        featuredId: 7
        url: url
        category:
          name: name
          id: 5
        categoryId: 5
        episodes: 2
      properties:
        author:
          title: author
          type: string
        category:
          $ref: '#/components/schemas/PodcastListPodcastsItem_category'
        categoryId:
          title: categoryId
          type: integer
        description:
          title: description
          type: string
        episodes:
          title: episodes
          type: integer
        featured:
          $ref: '#/components/schemas/PodcastListPodcastsItem_category'
        featuredId:
          title: featuredId
          type: integer
        image:
          title: image
          type: string
        keywords:
          title: keywords
          type: string
        latestEpisodeTime:
          title: latestEpisodeTime
          type: string
        podcastId:
          title: podcastId
          type: integer
        title:
          title: title
          type: string
        url:
          title: url
          type: string
      title: PodcastListPodcastsItem
      type: object
    SingleCategory:
      description: Model to fetch a single category.
      example:
        category:
          name: name
          id: 0
          url: url
      properties:
        category:
          $ref: '#/components/schemas/SingleCategoryCategory'
      title: SingleCategoryOutputModel
      type: object
    SingleCategoryCategory:
      example:
        name: name
        id: 0
        url: url
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        url:
          title: url
          type: string
      title: SingleCategoryCategory
      type: object
    SinglePodcast:
      example:
        podcast:
          image: image
          podcastId: 5
          featured:
            name: name
            id: 5
          website: website
          keywords: keywords
          author: author
          description: description
          title: title
          featuredId: 1
          url: url
          latest_episode_time: latest_episode_time
          category:
            name: name
            id: 5
          categoryId: 0
          episodes: 6
      properties:
        podcast:
          $ref: '#/components/schemas/SinglePodcastPodcast'
      title: SinglePodcastOutputModel
      type: object
    SinglePodcastPodcast:
      example:
        image: image
        podcastId: 5
        featured:
          name: name
          id: 5
        website: website
        keywords: keywords
        author: author
        description: description
        title: title
        featuredId: 1
        url: url
        latest_episode_time: latest_episode_time
        category:
          name: name
          id: 5
        categoryId: 0
        episodes: 6
      properties:
        author:
          title: author
          type: string
        category:
          $ref: '#/components/schemas/PodcastListPodcastsItem_category'
        categoryId:
          title: categoryId
          type: integer
        description:
          title: description
          type: string
        episodes:
          title: episodes
          type: integer
        featured:
          $ref: '#/components/schemas/PodcastListPodcastsItem_category'
        featuredId:
          title: featuredId
          type: integer
        image:
          title: image
          type: string
        keywords:
          title: keywords
          type: string
        latest_episode_time:
          title: latest_episode_time
          type: string
        podcastId:
          title: podcastId
          type: integer
        title:
          title: title
          type: string
        url:
          title: url
          type: string
        website:
          title: website
          type: string
      title: SinglePodcastPodcast
      type: object
    PodcastEpisodeListEpisodesItem_play:
      example:
        duration: duration
        durationInSec: 6
        size: size
        type: type
        url: url
      properties:
        duration:
          title: duration
          type: string
        durationInSec:
          title: durationInSec
          type: integer
        size:
          title: size
          type: string
        type:
          title: type
          type: string
        url:
          title: url
          type: string
      title: PodcastEpisodeListEpisodesItem_play
      type: object
    PodcastListPodcastsItem_category:
      example:
        name: name
        id: 5
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
      title: PodcastListPodcastsItem_category
      type: object
  securitySchemes:
    api_key:
      in: header
      name: x-api-key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_api_key
    partner_id:
      in: header
      name: hhPartnerId
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_partner_id
x-original-swagger-version: "2.0"
