# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category_list_categories_item import CategoryListCategoriesItem
from openapi_server import util


class CategoryList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories: List[CategoryListCategoriesItem]=None, no_of_pages: int=None, page: int=None, page_size: int=None, total: int=None):
        """CategoryList - a model defined in OpenAPI

        :param categories: The categories of this CategoryList.
        :param no_of_pages: The no_of_pages of this CategoryList.
        :param page: The page of this CategoryList.
        :param page_size: The page_size of this CategoryList.
        :param total: The total of this CategoryList.
        """
        self.openapi_types = {
            'categories': List[CategoryListCategoriesItem],
            'no_of_pages': int,
            'page': int,
            'page_size': int,
            'total': int
        }

        self.attribute_map = {
            'categories': 'categories',
            'no_of_pages': 'noOfPages',
            'page': 'page',
            'page_size': 'pageSize',
            'total': 'total'
        }

        self._categories = categories
        self._no_of_pages = no_of_pages
        self._page = page
        self._page_size = page_size
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CategoryList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CategoryList of this CategoryList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self):
        """Gets the categories of this CategoryList.


        :return: The categories of this CategoryList.
        :rtype: List[CategoryListCategoriesItem]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CategoryList.


        :param categories: The categories of this CategoryList.
        :type categories: List[CategoryListCategoriesItem]
        """

        self._categories = categories

    @property
    def no_of_pages(self):
        """Gets the no_of_pages of this CategoryList.


        :return: The no_of_pages of this CategoryList.
        :rtype: int
        """
        return self._no_of_pages

    @no_of_pages.setter
    def no_of_pages(self, no_of_pages):
        """Sets the no_of_pages of this CategoryList.


        :param no_of_pages: The no_of_pages of this CategoryList.
        :type no_of_pages: int
        """

        self._no_of_pages = no_of_pages

    @property
    def page(self):
        """Gets the page of this CategoryList.


        :return: The page of this CategoryList.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this CategoryList.


        :param page: The page of this CategoryList.
        :type page: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this CategoryList.


        :return: The page_size of this CategoryList.
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this CategoryList.


        :param page_size: The page_size of this CategoryList.
        :type page_size: int
        """

        self._page_size = page_size

    @property
    def total(self):
        """Gets the total of this CategoryList.


        :return: The total of this CategoryList.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CategoryList.


        :param total: The total of this CategoryList.
        :type total: int
        """

        self._total = total
