/*
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PodcastEpisodeListEpisodesItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PodcastEpisodeList
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.334207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PodcastEpisodeList {
  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private List<PodcastEpisodeListEpisodesItem> episodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NO_OF_PAGES = "noOfPages";
  @SerializedName(SERIALIZED_NAME_NO_OF_PAGES)
  private Integer noOfPages;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  private Integer pageSize;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public PodcastEpisodeList() {
  }

  public PodcastEpisodeList episodes(List<PodcastEpisodeListEpisodesItem> episodes) {
    this.episodes = episodes;
    return this;
  }

  public PodcastEpisodeList addEpisodesItem(PodcastEpisodeListEpisodesItem episodesItem) {
    if (this.episodes == null) {
      this.episodes = new ArrayList<>();
    }
    this.episodes.add(episodesItem);
    return this;
  }

  /**
   * Get episodes
   * @return episodes
   */
  @javax.annotation.Nullable
  public List<PodcastEpisodeListEpisodesItem> getEpisodes() {
    return episodes;
  }

  public void setEpisodes(List<PodcastEpisodeListEpisodesItem> episodes) {
    this.episodes = episodes;
  }


  public PodcastEpisodeList noOfPages(Integer noOfPages) {
    this.noOfPages = noOfPages;
    return this;
  }

  /**
   * Get noOfPages
   * @return noOfPages
   */
  @javax.annotation.Nullable
  public Integer getNoOfPages() {
    return noOfPages;
  }

  public void setNoOfPages(Integer noOfPages) {
    this.noOfPages = noOfPages;
  }


  public PodcastEpisodeList page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * Get page
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public PodcastEpisodeList pageSize(Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Get pageSize
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  public PodcastEpisodeList total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PodcastEpisodeList podcastEpisodeList = (PodcastEpisodeList) o;
    return Objects.equals(this.episodes, podcastEpisodeList.episodes) &&
        Objects.equals(this.noOfPages, podcastEpisodeList.noOfPages) &&
        Objects.equals(this.page, podcastEpisodeList.page) &&
        Objects.equals(this.pageSize, podcastEpisodeList.pageSize) &&
        Objects.equals(this.total, podcastEpisodeList.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(episodes, noOfPages, page, pageSize, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PodcastEpisodeList {\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    noOfPages: ").append(toIndentedString(noOfPages)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("episodes");
    openapiFields.add("noOfPages");
    openapiFields.add("page");
    openapiFields.add("pageSize");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PodcastEpisodeList
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PodcastEpisodeList.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PodcastEpisodeList is not found in the empty JSON string", PodcastEpisodeList.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PodcastEpisodeList.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PodcastEpisodeList` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("episodes") != null && !jsonObj.get("episodes").isJsonNull()) {
        JsonArray jsonArrayepisodes = jsonObj.getAsJsonArray("episodes");
        if (jsonArrayepisodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("episodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `episodes` to be an array in the JSON string but got `%s`", jsonObj.get("episodes").toString()));
          }

          // validate the optional field `episodes` (array)
          for (int i = 0; i < jsonArrayepisodes.size(); i++) {
            PodcastEpisodeListEpisodesItem.validateJsonElement(jsonArrayepisodes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PodcastEpisodeList.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PodcastEpisodeList' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PodcastEpisodeList> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PodcastEpisodeList.class));

       return (TypeAdapter<T>) new TypeAdapter<PodcastEpisodeList>() {
           @Override
           public void write(JsonWriter out, PodcastEpisodeList value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PodcastEpisodeList read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PodcastEpisodeList given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PodcastEpisodeList
   * @throws IOException if the JSON string is invalid with respect to PodcastEpisodeList
   */
  public static PodcastEpisodeList fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PodcastEpisodeList.class);
  }

  /**
   * Convert an instance of PodcastEpisodeList to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

