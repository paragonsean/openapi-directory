/*
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PodcastListPodcastsItemCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SinglePodcastPodcast
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:08.334207-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SinglePodcastPodcast {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private PodcastListPodcastsItemCategory category;

  public static final String SERIALIZED_NAME_CATEGORY_ID = "categoryId";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private Integer categoryId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EPISODES = "episodes";
  @SerializedName(SERIALIZED_NAME_EPISODES)
  private Integer episodes;

  public static final String SERIALIZED_NAME_FEATURED = "featured";
  @SerializedName(SERIALIZED_NAME_FEATURED)
  private PodcastListPodcastsItemCategory featured;

  public static final String SERIALIZED_NAME_FEATURED_ID = "featuredId";
  @SerializedName(SERIALIZED_NAME_FEATURED_ID)
  private Integer featuredId;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private String keywords;

  public static final String SERIALIZED_NAME_LATEST_EPISODE_TIME = "latest_episode_time";
  @SerializedName(SERIALIZED_NAME_LATEST_EPISODE_TIME)
  private String latestEpisodeTime;

  public static final String SERIALIZED_NAME_PODCAST_ID = "podcastId";
  @SerializedName(SERIALIZED_NAME_PODCAST_ID)
  private Integer podcastId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public SinglePodcastPodcast() {
  }

  public SinglePodcastPodcast author(String author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public SinglePodcastPodcast category(PodcastListPodcastsItemCategory category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public PodcastListPodcastsItemCategory getCategory() {
    return category;
  }

  public void setCategory(PodcastListPodcastsItemCategory category) {
    this.category = category;
  }


  public SinglePodcastPodcast categoryId(Integer categoryId) {
    this.categoryId = categoryId;
    return this;
  }

  /**
   * Get categoryId
   * @return categoryId
   */
  @javax.annotation.Nullable
  public Integer getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(Integer categoryId) {
    this.categoryId = categoryId;
  }


  public SinglePodcastPodcast description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SinglePodcastPodcast episodes(Integer episodes) {
    this.episodes = episodes;
    return this;
  }

  /**
   * Get episodes
   * @return episodes
   */
  @javax.annotation.Nullable
  public Integer getEpisodes() {
    return episodes;
  }

  public void setEpisodes(Integer episodes) {
    this.episodes = episodes;
  }


  public SinglePodcastPodcast featured(PodcastListPodcastsItemCategory featured) {
    this.featured = featured;
    return this;
  }

  /**
   * Get featured
   * @return featured
   */
  @javax.annotation.Nullable
  public PodcastListPodcastsItemCategory getFeatured() {
    return featured;
  }

  public void setFeatured(PodcastListPodcastsItemCategory featured) {
    this.featured = featured;
  }


  public SinglePodcastPodcast featuredId(Integer featuredId) {
    this.featuredId = featuredId;
    return this;
  }

  /**
   * Get featuredId
   * @return featuredId
   */
  @javax.annotation.Nullable
  public Integer getFeaturedId() {
    return featuredId;
  }

  public void setFeaturedId(Integer featuredId) {
    this.featuredId = featuredId;
  }


  public SinglePodcastPodcast image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public SinglePodcastPodcast keywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public String getKeywords() {
    return keywords;
  }

  public void setKeywords(String keywords) {
    this.keywords = keywords;
  }


  public SinglePodcastPodcast latestEpisodeTime(String latestEpisodeTime) {
    this.latestEpisodeTime = latestEpisodeTime;
    return this;
  }

  /**
   * Get latestEpisodeTime
   * @return latestEpisodeTime
   */
  @javax.annotation.Nullable
  public String getLatestEpisodeTime() {
    return latestEpisodeTime;
  }

  public void setLatestEpisodeTime(String latestEpisodeTime) {
    this.latestEpisodeTime = latestEpisodeTime;
  }


  public SinglePodcastPodcast podcastId(Integer podcastId) {
    this.podcastId = podcastId;
    return this;
  }

  /**
   * Get podcastId
   * @return podcastId
   */
  @javax.annotation.Nullable
  public Integer getPodcastId() {
    return podcastId;
  }

  public void setPodcastId(Integer podcastId) {
    this.podcastId = podcastId;
  }


  public SinglePodcastPodcast title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SinglePodcastPodcast url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Get url
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public SinglePodcastPodcast website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SinglePodcastPodcast singlePodcastPodcast = (SinglePodcastPodcast) o;
    return Objects.equals(this.author, singlePodcastPodcast.author) &&
        Objects.equals(this.category, singlePodcastPodcast.category) &&
        Objects.equals(this.categoryId, singlePodcastPodcast.categoryId) &&
        Objects.equals(this.description, singlePodcastPodcast.description) &&
        Objects.equals(this.episodes, singlePodcastPodcast.episodes) &&
        Objects.equals(this.featured, singlePodcastPodcast.featured) &&
        Objects.equals(this.featuredId, singlePodcastPodcast.featuredId) &&
        Objects.equals(this.image, singlePodcastPodcast.image) &&
        Objects.equals(this.keywords, singlePodcastPodcast.keywords) &&
        Objects.equals(this.latestEpisodeTime, singlePodcastPodcast.latestEpisodeTime) &&
        Objects.equals(this.podcastId, singlePodcastPodcast.podcastId) &&
        Objects.equals(this.title, singlePodcastPodcast.title) &&
        Objects.equals(this.url, singlePodcastPodcast.url) &&
        Objects.equals(this.website, singlePodcastPodcast.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, category, categoryId, description, episodes, featured, featuredId, image, keywords, latestEpisodeTime, podcastId, title, url, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SinglePodcastPodcast {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    episodes: ").append(toIndentedString(episodes)).append("\n");
    sb.append("    featured: ").append(toIndentedString(featured)).append("\n");
    sb.append("    featuredId: ").append(toIndentedString(featuredId)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    latestEpisodeTime: ").append(toIndentedString(latestEpisodeTime)).append("\n");
    sb.append("    podcastId: ").append(toIndentedString(podcastId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("category");
    openapiFields.add("categoryId");
    openapiFields.add("description");
    openapiFields.add("episodes");
    openapiFields.add("featured");
    openapiFields.add("featuredId");
    openapiFields.add("image");
    openapiFields.add("keywords");
    openapiFields.add("latest_episode_time");
    openapiFields.add("podcastId");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SinglePodcastPodcast
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SinglePodcastPodcast.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SinglePodcastPodcast is not found in the empty JSON string", SinglePodcastPodcast.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SinglePodcastPodcast.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SinglePodcastPodcast` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        PodcastListPodcastsItemCategory.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `featured`
      if (jsonObj.get("featured") != null && !jsonObj.get("featured").isJsonNull()) {
        PodcastListPodcastsItemCategory.validateJsonElement(jsonObj.get("featured"));
      }
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull()) && !jsonObj.get("keywords").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if ((jsonObj.get("latest_episode_time") != null && !jsonObj.get("latest_episode_time").isJsonNull()) && !jsonObj.get("latest_episode_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latest_episode_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latest_episode_time").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SinglePodcastPodcast.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SinglePodcastPodcast' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SinglePodcastPodcast> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SinglePodcastPodcast.class));

       return (TypeAdapter<T>) new TypeAdapter<SinglePodcastPodcast>() {
           @Override
           public void write(JsonWriter out, SinglePodcastPodcast value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SinglePodcastPodcast read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SinglePodcastPodcast given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SinglePodcastPodcast
   * @throws IOException if the JSON string is invalid with respect to SinglePodcastPodcast
   */
  public static SinglePodcastPodcast fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SinglePodcastPodcast.class);
  }

  /**
   * Convert an instance of SinglePodcastPodcast to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

