/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastEpisodeListEpisodesItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastEpisodeListEpisodesItem::OAIPodcastEpisodeListEpisodesItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastEpisodeListEpisodesItem::OAIPodcastEpisodeListEpisodesItem() {
    this->initializeModel();
}

OAIPodcastEpisodeListEpisodesItem::~OAIPodcastEpisodeListEpisodesItem() {}

void OAIPodcastEpisodeListEpisodesItem::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_episode_id_isSet = false;
    m_episode_id_isValid = false;

    m_episode_url_isSet = false;
    m_episode_url_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_new_isSet = false;
    m_is_new_isValid = false;

    m_play_isSet = false;
    m_play_isValid = false;

    m_podcast_id_isSet = false;
    m_podcast_id_isValid = false;

    m_podcast_url_isSet = false;
    m_podcast_url_isValid = false;

    m_publish_time_isSet = false;
    m_publish_time_isValid = false;

    m_published_on_isSet = false;
    m_published_on_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPodcastEpisodeListEpisodesItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastEpisodeListEpisodesItem::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_episode_id_isValid = ::OpenAPI::fromJsonValue(m_episode_id, json[QString("episodeId")]);
    m_episode_id_isSet = !json[QString("episodeId")].isNull() && m_episode_id_isValid;

    m_episode_url_isValid = ::OpenAPI::fromJsonValue(m_episode_url, json[QString("episodeUrl")]);
    m_episode_url_isSet = !json[QString("episodeUrl")].isNull() && m_episode_url_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_new_isValid = ::OpenAPI::fromJsonValue(m_is_new, json[QString("isNew")]);
    m_is_new_isSet = !json[QString("isNew")].isNull() && m_is_new_isValid;

    m_play_isValid = ::OpenAPI::fromJsonValue(m_play, json[QString("play")]);
    m_play_isSet = !json[QString("play")].isNull() && m_play_isValid;

    m_podcast_id_isValid = ::OpenAPI::fromJsonValue(m_podcast_id, json[QString("podcastId")]);
    m_podcast_id_isSet = !json[QString("podcastId")].isNull() && m_podcast_id_isValid;

    m_podcast_url_isValid = ::OpenAPI::fromJsonValue(m_podcast_url, json[QString("podcastUrl")]);
    m_podcast_url_isSet = !json[QString("podcastUrl")].isNull() && m_podcast_url_isValid;

    m_publish_time_isValid = ::OpenAPI::fromJsonValue(m_publish_time, json[QString("publishTime")]);
    m_publish_time_isSet = !json[QString("publishTime")].isNull() && m_publish_time_isValid;

    m_published_on_isValid = ::OpenAPI::fromJsonValue(m_published_on, json[QString("publishedOn")]);
    m_published_on_isSet = !json[QString("publishedOn")].isNull() && m_published_on_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastEpisodeListEpisodesItem::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_episode_id_isSet) {
        obj.insert(QString("episodeId"), ::OpenAPI::toJsonValue(m_episode_id));
    }
    if (m_episode_url_isSet) {
        obj.insert(QString("episodeUrl"), ::OpenAPI::toJsonValue(m_episode_url));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_new_isSet) {
        obj.insert(QString("isNew"), ::OpenAPI::toJsonValue(m_is_new));
    }
    if (m_play.isSet()) {
        obj.insert(QString("play"), ::OpenAPI::toJsonValue(m_play));
    }
    if (m_podcast_id_isSet) {
        obj.insert(QString("podcastId"), ::OpenAPI::toJsonValue(m_podcast_id));
    }
    if (m_podcast_url_isSet) {
        obj.insert(QString("podcastUrl"), ::OpenAPI::toJsonValue(m_podcast_url));
    }
    if (m_publish_time_isSet) {
        obj.insert(QString("publishTime"), ::OpenAPI::toJsonValue(m_publish_time));
    }
    if (m_published_on_isSet) {
        obj.insert(QString("publishedOn"), ::OpenAPI::toJsonValue(m_published_on));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPodcastEpisodeListEpisodesItem::getAuthor() const {
    return m_author;
}
void OAIPodcastEpisodeListEpisodesItem::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getDescription() const {
    return m_description;
}
void OAIPodcastEpisodeListEpisodesItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPodcastEpisodeListEpisodesItem::getEpisodeId() const {
    return m_episode_id;
}
void OAIPodcastEpisodeListEpisodesItem::setEpisodeId(const qint32 &episode_id) {
    m_episode_id = episode_id;
    m_episode_id_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_episode_id_Set() const{
    return m_episode_id_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_episode_id_Valid() const{
    return m_episode_id_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getEpisodeUrl() const {
    return m_episode_url;
}
void OAIPodcastEpisodeListEpisodesItem::setEpisodeUrl(const QString &episode_url) {
    m_episode_url = episode_url;
    m_episode_url_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_episode_url_Set() const{
    return m_episode_url_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_episode_url_Valid() const{
    return m_episode_url_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getImage() const {
    return m_image;
}
void OAIPodcastEpisodeListEpisodesItem::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIPodcastEpisodeListEpisodesItem::isIsNew() const {
    return m_is_new;
}
void OAIPodcastEpisodeListEpisodesItem::setIsNew(const bool &is_new) {
    m_is_new = is_new;
    m_is_new_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_is_new_Set() const{
    return m_is_new_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_is_new_Valid() const{
    return m_is_new_isValid;
}

OAIPodcastEpisodeListEpisodesItem_play OAIPodcastEpisodeListEpisodesItem::getPlay() const {
    return m_play;
}
void OAIPodcastEpisodeListEpisodesItem::setPlay(const OAIPodcastEpisodeListEpisodesItem_play &play) {
    m_play = play;
    m_play_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_play_Set() const{
    return m_play_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_play_Valid() const{
    return m_play_isValid;
}

qint32 OAIPodcastEpisodeListEpisodesItem::getPodcastId() const {
    return m_podcast_id;
}
void OAIPodcastEpisodeListEpisodesItem::setPodcastId(const qint32 &podcast_id) {
    m_podcast_id = podcast_id;
    m_podcast_id_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_podcast_id_Set() const{
    return m_podcast_id_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_podcast_id_Valid() const{
    return m_podcast_id_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getPodcastUrl() const {
    return m_podcast_url;
}
void OAIPodcastEpisodeListEpisodesItem::setPodcastUrl(const QString &podcast_url) {
    m_podcast_url = podcast_url;
    m_podcast_url_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_podcast_url_Set() const{
    return m_podcast_url_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_podcast_url_Valid() const{
    return m_podcast_url_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getPublishTime() const {
    return m_publish_time;
}
void OAIPodcastEpisodeListEpisodesItem::setPublishTime(const QString &publish_time) {
    m_publish_time = publish_time;
    m_publish_time_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_publish_time_Set() const{
    return m_publish_time_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_publish_time_Valid() const{
    return m_publish_time_isValid;
}

qint32 OAIPodcastEpisodeListEpisodesItem::getPublishedOn() const {
    return m_published_on;
}
void OAIPodcastEpisodeListEpisodesItem::setPublishedOn(const qint32 &published_on) {
    m_published_on = published_on;
    m_published_on_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_published_on_Set() const{
    return m_published_on_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_published_on_Valid() const{
    return m_published_on_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem::getTitle() const {
    return m_title;
}
void OAIPodcastEpisodeListEpisodesItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPodcastEpisodeListEpisodesItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_new_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_play.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastEpisodeListEpisodesItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
