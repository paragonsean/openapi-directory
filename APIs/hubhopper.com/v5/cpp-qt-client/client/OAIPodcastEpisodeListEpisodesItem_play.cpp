/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastEpisodeListEpisodesItem_play.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastEpisodeListEpisodesItem_play::OAIPodcastEpisodeListEpisodesItem_play(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastEpisodeListEpisodesItem_play::OAIPodcastEpisodeListEpisodesItem_play() {
    this->initializeModel();
}

OAIPodcastEpisodeListEpisodesItem_play::~OAIPodcastEpisodeListEpisodesItem_play() {}

void OAIPodcastEpisodeListEpisodesItem_play::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_duration_in_sec_isSet = false;
    m_duration_in_sec_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPodcastEpisodeListEpisodesItem_play::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastEpisodeListEpisodesItem_play::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_duration_in_sec_isValid = ::OpenAPI::fromJsonValue(m_duration_in_sec, json[QString("durationInSec")]);
    m_duration_in_sec_isSet = !json[QString("durationInSec")].isNull() && m_duration_in_sec_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem_play::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastEpisodeListEpisodesItem_play::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_duration_in_sec_isSet) {
        obj.insert(QString("durationInSec"), ::OpenAPI::toJsonValue(m_duration_in_sec));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPodcastEpisodeListEpisodesItem_play::getDuration() const {
    return m_duration;
}
void OAIPodcastEpisodeListEpisodesItem_play::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_duration_Valid() const{
    return m_duration_isValid;
}

qint32 OAIPodcastEpisodeListEpisodesItem_play::getDurationInSec() const {
    return m_duration_in_sec;
}
void OAIPodcastEpisodeListEpisodesItem_play::setDurationInSec(const qint32 &duration_in_sec) {
    m_duration_in_sec = duration_in_sec;
    m_duration_in_sec_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_duration_in_sec_Set() const{
    return m_duration_in_sec_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_duration_in_sec_Valid() const{
    return m_duration_in_sec_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem_play::getSize() const {
    return m_size;
}
void OAIPodcastEpisodeListEpisodesItem_play::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem_play::getType() const {
    return m_type;
}
void OAIPodcastEpisodeListEpisodesItem_play::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPodcastEpisodeListEpisodesItem_play::getUrl() const {
    return m_url;
}
void OAIPodcastEpisodeListEpisodesItem_play::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPodcastEpisodeListEpisodesItem_play::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPodcastEpisodeListEpisodesItem_play::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_in_sec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastEpisodeListEpisodesItem_play::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
