/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISinglePodcastPodcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISinglePodcastPodcast::OAISinglePodcastPodcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISinglePodcastPodcast::OAISinglePodcastPodcast() {
    this->initializeModel();
}

OAISinglePodcastPodcast::~OAISinglePodcastPodcast() {}

void OAISinglePodcastPodcast::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_episodes_isSet = false;
    m_episodes_isValid = false;

    m_featured_isSet = false;
    m_featured_isValid = false;

    m_featured_id_isSet = false;
    m_featured_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_latest_episode_time_isSet = false;
    m_latest_episode_time_isValid = false;

    m_podcast_id_isSet = false;
    m_podcast_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAISinglePodcastPodcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISinglePodcastPodcast::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_episodes_isValid = ::OpenAPI::fromJsonValue(m_episodes, json[QString("episodes")]);
    m_episodes_isSet = !json[QString("episodes")].isNull() && m_episodes_isValid;

    m_featured_isValid = ::OpenAPI::fromJsonValue(m_featured, json[QString("featured")]);
    m_featured_isSet = !json[QString("featured")].isNull() && m_featured_isValid;

    m_featured_id_isValid = ::OpenAPI::fromJsonValue(m_featured_id, json[QString("featuredId")]);
    m_featured_id_isSet = !json[QString("featuredId")].isNull() && m_featured_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_latest_episode_time_isValid = ::OpenAPI::fromJsonValue(m_latest_episode_time, json[QString("latest_episode_time")]);
    m_latest_episode_time_isSet = !json[QString("latest_episode_time")].isNull() && m_latest_episode_time_isValid;

    m_podcast_id_isValid = ::OpenAPI::fromJsonValue(m_podcast_id, json[QString("podcastId")]);
    m_podcast_id_isSet = !json[QString("podcastId")].isNull() && m_podcast_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAISinglePodcastPodcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISinglePodcastPodcast::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_episodes_isSet) {
        obj.insert(QString("episodes"), ::OpenAPI::toJsonValue(m_episodes));
    }
    if (m_featured.isSet()) {
        obj.insert(QString("featured"), ::OpenAPI::toJsonValue(m_featured));
    }
    if (m_featured_id_isSet) {
        obj.insert(QString("featuredId"), ::OpenAPI::toJsonValue(m_featured_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_keywords_isSet) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_latest_episode_time_isSet) {
        obj.insert(QString("latest_episode_time"), ::OpenAPI::toJsonValue(m_latest_episode_time));
    }
    if (m_podcast_id_isSet) {
        obj.insert(QString("podcastId"), ::OpenAPI::toJsonValue(m_podcast_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAISinglePodcastPodcast::getAuthor() const {
    return m_author;
}
void OAISinglePodcastPodcast::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAISinglePodcastPodcast::is_author_Set() const{
    return m_author_isSet;
}

bool OAISinglePodcastPodcast::is_author_Valid() const{
    return m_author_isValid;
}

OAIPodcastListPodcastsItem_category OAISinglePodcastPodcast::getCategory() const {
    return m_category;
}
void OAISinglePodcastPodcast::setCategory(const OAIPodcastListPodcastsItem_category &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISinglePodcastPodcast::is_category_Set() const{
    return m_category_isSet;
}

bool OAISinglePodcastPodcast::is_category_Valid() const{
    return m_category_isValid;
}

qint32 OAISinglePodcastPodcast::getCategoryId() const {
    return m_category_id;
}
void OAISinglePodcastPodcast::setCategoryId(const qint32 &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAISinglePodcastPodcast::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAISinglePodcastPodcast::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAISinglePodcastPodcast::getDescription() const {
    return m_description;
}
void OAISinglePodcastPodcast::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISinglePodcastPodcast::is_description_Set() const{
    return m_description_isSet;
}

bool OAISinglePodcastPodcast::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAISinglePodcastPodcast::getEpisodes() const {
    return m_episodes;
}
void OAISinglePodcastPodcast::setEpisodes(const qint32 &episodes) {
    m_episodes = episodes;
    m_episodes_isSet = true;
}

bool OAISinglePodcastPodcast::is_episodes_Set() const{
    return m_episodes_isSet;
}

bool OAISinglePodcastPodcast::is_episodes_Valid() const{
    return m_episodes_isValid;
}

OAIPodcastListPodcastsItem_category OAISinglePodcastPodcast::getFeatured() const {
    return m_featured;
}
void OAISinglePodcastPodcast::setFeatured(const OAIPodcastListPodcastsItem_category &featured) {
    m_featured = featured;
    m_featured_isSet = true;
}

bool OAISinglePodcastPodcast::is_featured_Set() const{
    return m_featured_isSet;
}

bool OAISinglePodcastPodcast::is_featured_Valid() const{
    return m_featured_isValid;
}

qint32 OAISinglePodcastPodcast::getFeaturedId() const {
    return m_featured_id;
}
void OAISinglePodcastPodcast::setFeaturedId(const qint32 &featured_id) {
    m_featured_id = featured_id;
    m_featured_id_isSet = true;
}

bool OAISinglePodcastPodcast::is_featured_id_Set() const{
    return m_featured_id_isSet;
}

bool OAISinglePodcastPodcast::is_featured_id_Valid() const{
    return m_featured_id_isValid;
}

QString OAISinglePodcastPodcast::getImage() const {
    return m_image;
}
void OAISinglePodcastPodcast::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAISinglePodcastPodcast::is_image_Set() const{
    return m_image_isSet;
}

bool OAISinglePodcastPodcast::is_image_Valid() const{
    return m_image_isValid;
}

QString OAISinglePodcastPodcast::getKeywords() const {
    return m_keywords;
}
void OAISinglePodcastPodcast::setKeywords(const QString &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAISinglePodcastPodcast::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAISinglePodcastPodcast::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAISinglePodcastPodcast::getLatestEpisodeTime() const {
    return m_latest_episode_time;
}
void OAISinglePodcastPodcast::setLatestEpisodeTime(const QString &latest_episode_time) {
    m_latest_episode_time = latest_episode_time;
    m_latest_episode_time_isSet = true;
}

bool OAISinglePodcastPodcast::is_latest_episode_time_Set() const{
    return m_latest_episode_time_isSet;
}

bool OAISinglePodcastPodcast::is_latest_episode_time_Valid() const{
    return m_latest_episode_time_isValid;
}

qint32 OAISinglePodcastPodcast::getPodcastId() const {
    return m_podcast_id;
}
void OAISinglePodcastPodcast::setPodcastId(const qint32 &podcast_id) {
    m_podcast_id = podcast_id;
    m_podcast_id_isSet = true;
}

bool OAISinglePodcastPodcast::is_podcast_id_Set() const{
    return m_podcast_id_isSet;
}

bool OAISinglePodcastPodcast::is_podcast_id_Valid() const{
    return m_podcast_id_isValid;
}

QString OAISinglePodcastPodcast::getTitle() const {
    return m_title;
}
void OAISinglePodcastPodcast::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISinglePodcastPodcast::is_title_Set() const{
    return m_title_isSet;
}

bool OAISinglePodcastPodcast::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISinglePodcastPodcast::getUrl() const {
    return m_url;
}
void OAISinglePodcastPodcast::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISinglePodcastPodcast::is_url_Set() const{
    return m_url_isSet;
}

bool OAISinglePodcastPodcast::is_url_Valid() const{
    return m_url_isValid;
}

QString OAISinglePodcastPodcast::getWebsite() const {
    return m_website;
}
void OAISinglePodcastPodcast::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAISinglePodcastPodcast::is_website_Set() const{
    return m_website_isSet;
}

bool OAISinglePodcastPodcast::is_website_Valid() const{
    return m_website_isValid;
}

bool OAISinglePodcastPodcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_featured_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_episode_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISinglePodcastPodcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
