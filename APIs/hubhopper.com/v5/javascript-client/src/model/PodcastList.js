/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastListPodcastsItem from './PodcastListPodcastsItem';

/**
 * The PodcastList model module.
 * @module model/PodcastList
 * @version v5
 */
class PodcastList {
    /**
     * Constructs a new <code>PodcastList</code>.
     * @alias module:model/PodcastList
     */
    constructor() { 
        
        PodcastList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodcastList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastList} obj Optional instance to populate.
     * @return {module:model/PodcastList} The populated <code>PodcastList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastList();

            if (data.hasOwnProperty('noOfPages')) {
                obj['noOfPages'] = ApiClient.convertToType(data['noOfPages'], 'Number');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('pageSize')) {
                obj['pageSize'] = ApiClient.convertToType(data['pageSize'], 'Number');
            }
            if (data.hasOwnProperty('podcasts')) {
                obj['podcasts'] = ApiClient.convertToType(data['podcasts'], [PodcastListPodcastsItem]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastList</code>.
     */
    static validateJSON(data) {
        if (data['podcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['podcasts'])) {
                throw new Error("Expected the field `podcasts` to be an array in the JSON data but got " + data['podcasts']);
            }
            // validate the optional field `podcasts` (array)
            for (const item of data['podcasts']) {
                PodcastListPodcastsItem.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Number} noOfPages
 */
PodcastList.prototype['noOfPages'] = undefined;

/**
 * @member {Number} page
 */
PodcastList.prototype['page'] = undefined;

/**
 * @member {Number} pageSize
 */
PodcastList.prototype['pageSize'] = undefined;

/**
 * @member {Array.<module:model/PodcastListPodcastsItem>} podcasts
 */
PodcastList.prototype['podcasts'] = undefined;

/**
 * @member {Number} total
 */
PodcastList.prototype['total'] = undefined;






export default PodcastList;

