/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PodcastEpisodeListEpisodesItemPlay from './PodcastEpisodeListEpisodesItemPlay';

/**
 * The PodcastEpisodeListEpisodesItem model module.
 * @module model/PodcastEpisodeListEpisodesItem
 * @version v5
 */
class PodcastEpisodeListEpisodesItem {
    /**
     * Constructs a new <code>PodcastEpisodeListEpisodesItem</code>.
     * @alias module:model/PodcastEpisodeListEpisodesItem
     */
    constructor() { 
        
        PodcastEpisodeListEpisodesItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodcastEpisodeListEpisodesItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastEpisodeListEpisodesItem} obj Optional instance to populate.
     * @return {module:model/PodcastEpisodeListEpisodesItem} The populated <code>PodcastEpisodeListEpisodesItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastEpisodeListEpisodesItem();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('episodeId')) {
                obj['episodeId'] = ApiClient.convertToType(data['episodeId'], 'Number');
            }
            if (data.hasOwnProperty('episodeUrl')) {
                obj['episodeUrl'] = ApiClient.convertToType(data['episodeUrl'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('isNew')) {
                obj['isNew'] = ApiClient.convertToType(data['isNew'], 'Boolean');
            }
            if (data.hasOwnProperty('play')) {
                obj['play'] = PodcastEpisodeListEpisodesItemPlay.constructFromObject(data['play']);
            }
            if (data.hasOwnProperty('podcastId')) {
                obj['podcastId'] = ApiClient.convertToType(data['podcastId'], 'Number');
            }
            if (data.hasOwnProperty('podcastUrl')) {
                obj['podcastUrl'] = ApiClient.convertToType(data['podcastUrl'], 'String');
            }
            if (data.hasOwnProperty('publishTime')) {
                obj['publishTime'] = ApiClient.convertToType(data['publishTime'], 'String');
            }
            if (data.hasOwnProperty('publishedOn')) {
                obj['publishedOn'] = ApiClient.convertToType(data['publishedOn'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastEpisodeListEpisodesItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastEpisodeListEpisodesItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['episodeUrl'] && !(typeof data['episodeUrl'] === 'string' || data['episodeUrl'] instanceof String)) {
            throw new Error("Expected the field `episodeUrl` to be a primitive type in the JSON string but got " + data['episodeUrl']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // validate the optional field `play`
        if (data['play']) { // data not null
          PodcastEpisodeListEpisodesItemPlay.validateJSON(data['play']);
        }
        // ensure the json data is a string
        if (data['podcastUrl'] && !(typeof data['podcastUrl'] === 'string' || data['podcastUrl'] instanceof String)) {
            throw new Error("Expected the field `podcastUrl` to be a primitive type in the JSON string but got " + data['podcastUrl']);
        }
        // ensure the json data is a string
        if (data['publishTime'] && !(typeof data['publishTime'] === 'string' || data['publishTime'] instanceof String)) {
            throw new Error("Expected the field `publishTime` to be a primitive type in the JSON string but got " + data['publishTime']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} author
 */
PodcastEpisodeListEpisodesItem.prototype['author'] = undefined;

/**
 * @member {String} description
 */
PodcastEpisodeListEpisodesItem.prototype['description'] = undefined;

/**
 * @member {Number} episodeId
 */
PodcastEpisodeListEpisodesItem.prototype['episodeId'] = undefined;

/**
 * @member {String} episodeUrl
 */
PodcastEpisodeListEpisodesItem.prototype['episodeUrl'] = undefined;

/**
 * @member {String} image
 */
PodcastEpisodeListEpisodesItem.prototype['image'] = undefined;

/**
 * @member {Boolean} isNew
 */
PodcastEpisodeListEpisodesItem.prototype['isNew'] = undefined;

/**
 * @member {module:model/PodcastEpisodeListEpisodesItemPlay} play
 */
PodcastEpisodeListEpisodesItem.prototype['play'] = undefined;

/**
 * @member {Number} podcastId
 */
PodcastEpisodeListEpisodesItem.prototype['podcastId'] = undefined;

/**
 * @member {String} podcastUrl
 */
PodcastEpisodeListEpisodesItem.prototype['podcastUrl'] = undefined;

/**
 * @member {String} publishTime
 */
PodcastEpisodeListEpisodesItem.prototype['publishTime'] = undefined;

/**
 * @member {Number} publishedOn
 */
PodcastEpisodeListEpisodesItem.prototype['publishedOn'] = undefined;

/**
 * @member {String} title
 */
PodcastEpisodeListEpisodesItem.prototype['title'] = undefined;






export default PodcastEpisodeListEpisodesItem;

