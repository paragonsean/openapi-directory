/**
 * Hubhopper Partner Integration API(s) - Production
 * This is an interactive document explaining the API(s) that could be used to fetch data from [Hubhopper](https://hubhopper.com). Use the api key provided to authorize `x-api-key` and test the API(s). The output data models are also available for reference.
 *
 * The version of the OpenAPI document: v5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryList from '../model/CategoryList';
import PodcastList from '../model/PodcastList';
import SingleCategory from '../model/SingleCategory';

/**
* Category service.
* @module api/CategoryApi
* @version v5
*/
export default class CategoryApi {

    /**
    * Constructs a new CategoryApi. 
    * @alias module:api/CategoryApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the categoriesCategoryIdGet operation.
     * @callback module:api/CategoryApi~categoriesCategoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific content category.
     * @param {String} categoryId Unique qualifier for a category.
     * @param {module:api/CategoryApi~categoriesCategoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleCategory}
     */
    categoriesCategoryIdGet(categoryId, callback) {
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdGet");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['partner_id', 'api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SingleCategory;
      return this.apiClient.callApi(
        '/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesCategoryIdPodcastsGet operation.
     * @callback module:api/CategoryApi~categoriesCategoryIdPodcastsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all podcasts under a category.
     * @param {String} categoryId Unique qualifier for a category.
     * @param {Object} opts Optional parameters
     * @param {String} [page] Provide the page number to fetch.
     * @param {String} [pageSize] Provide the size of the page to fetch.
     * @param {String} [order] Order the items by 'newest' | 'random'
     * @param {String} [filters] Takes filters like 'lang' in a url encoded json.  Example: 1)Single -> &nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\"]}; &nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson)); 2)Multiple -> &nbsp;&nbsp;&nbsp;&nbsp; var filterJson = {\"lang\":[\"en\",\"hi\"]}; &nbsp;&nbsp;&nbsp;&nbsp; var url = baseUrl+'?'+filters=enocdeURI(JSON.stringify(filterJson));
     * @param {module:api/CategoryApi~categoriesCategoryIdPodcastsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastList}
     */
    categoriesCategoryIdPodcastsGet(categoryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdPodcastsGet");
      }

      let pathParams = {
        'categoryId': categoryId
      };
      let queryParams = {
        'page': opts['page'],
        'pageSize': opts['pageSize'],
        'order': opts['order'],
        'filters': opts['filters']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['partner_id', 'api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PodcastList;
      return this.apiClient.callApi(
        '/categories/{categoryId}/podcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesGet operation.
     * @callback module:api/CategoryApi~categoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of all content categories.
     * @param {Object} opts Optional parameters
     * @param {String} [pageSize] Provide the size of the page to fetch.
     * @param {String} [page] Provide the page number to fetch.
     * @param {module:api/CategoryApi~categoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryList}
     */
    categoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['partner_id', 'api_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryList;
      return this.apiClient.callApi(
        '/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
