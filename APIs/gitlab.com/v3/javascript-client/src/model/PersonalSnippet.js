/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserBasic from './UserBasic';

/**
 * The PersonalSnippet model module.
 * @module model/PersonalSnippet
 * @version v3
 */
class PersonalSnippet {
    /**
     * Constructs a new <code>PersonalSnippet</code>.
     * This feature was introduced in GitLab 8.15.
     * @alias module:model/PersonalSnippet
     */
    constructor() { 
        
        PersonalSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PersonalSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PersonalSnippet} obj Optional instance to populate.
     * @return {module:model/PersonalSnippet} The populated <code>PersonalSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PersonalSnippet();

            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('file_name')) {
                obj['file_name'] = ApiClient.convertToType(data['file_name'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('raw_url')) {
                obj['raw_url'] = ApiClient.convertToType(data['raw_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('web_url')) {
                obj['web_url'] = ApiClient.convertToType(data['web_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PersonalSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PersonalSnippet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserBasic.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['file_name'] && !(typeof data['file_name'] === 'string' || data['file_name'] instanceof String)) {
            throw new Error("Expected the field `file_name` to be a primitive type in the JSON string but got " + data['file_name']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['raw_url'] && !(typeof data['raw_url'] === 'string' || data['raw_url'] instanceof String)) {
            throw new Error("Expected the field `raw_url` to be a primitive type in the JSON string but got " + data['raw_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['web_url'] && !(typeof data['web_url'] === 'string' || data['web_url'] instanceof String)) {
            throw new Error("Expected the field `web_url` to be a primitive type in the JSON string but got " + data['web_url']);
        }

        return true;
    }


}



/**
 * @member {module:model/UserBasic} author
 */
PersonalSnippet.prototype['author'] = undefined;

/**
 * @member {String} created_at
 */
PersonalSnippet.prototype['created_at'] = undefined;

/**
 * @member {String} file_name
 */
PersonalSnippet.prototype['file_name'] = undefined;

/**
 * @member {String} id
 */
PersonalSnippet.prototype['id'] = undefined;

/**
 * @member {String} raw_url
 */
PersonalSnippet.prototype['raw_url'] = undefined;

/**
 * @member {String} title
 */
PersonalSnippet.prototype['title'] = undefined;

/**
 * @member {String} updated_at
 */
PersonalSnippet.prototype['updated_at'] = undefined;

/**
 * @member {String} web_url
 */
PersonalSnippet.prototype['web_url'] = undefined;






export default PersonalSnippet;

