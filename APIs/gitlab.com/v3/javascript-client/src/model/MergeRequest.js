/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Milestone from './Milestone';
import UserBasic from './UserBasic';

/**
 * The MergeRequest model module.
 * @module model/MergeRequest
 * @version v3
 */
class MergeRequest {
    /**
     * Constructs a new <code>MergeRequest</code>.
     * Unsubscribe from a resource
     * @alias module:model/MergeRequest
     */
    constructor() { 
        
        MergeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MergeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeRequest} obj Optional instance to populate.
     * @return {module:model/MergeRequest} The populated <code>MergeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeRequest();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = UserBasic.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('downvotes')) {
                obj['downvotes'] = ApiClient.convertToType(data['downvotes'], 'String');
            }
            if (data.hasOwnProperty('force_remove_source_branch')) {
                obj['force_remove_source_branch'] = ApiClient.convertToType(data['force_remove_source_branch'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iid')) {
                obj['iid'] = ApiClient.convertToType(data['iid'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'String');
            }
            if (data.hasOwnProperty('merge_commit_sha')) {
                obj['merge_commit_sha'] = ApiClient.convertToType(data['merge_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('merge_status')) {
                obj['merge_status'] = ApiClient.convertToType(data['merge_status'], 'String');
            }
            if (data.hasOwnProperty('merge_when_build_succeeds')) {
                obj['merge_when_build_succeeds'] = ApiClient.convertToType(data['merge_when_build_succeeds'], 'String');
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = Milestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('should_remove_source_branch')) {
                obj['should_remove_source_branch'] = ApiClient.convertToType(data['should_remove_source_branch'], 'String');
            }
            if (data.hasOwnProperty('source_branch')) {
                obj['source_branch'] = ApiClient.convertToType(data['source_branch'], 'String');
            }
            if (data.hasOwnProperty('source_project_id')) {
                obj['source_project_id'] = ApiClient.convertToType(data['source_project_id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'String');
            }
            if (data.hasOwnProperty('target_branch')) {
                obj['target_branch'] = ApiClient.convertToType(data['target_branch'], 'String');
            }
            if (data.hasOwnProperty('target_project_id')) {
                obj['target_project_id'] = ApiClient.convertToType(data['target_project_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('upvotes')) {
                obj['upvotes'] = ApiClient.convertToType(data['upvotes'], 'String');
            }
            if (data.hasOwnProperty('user_notes_count')) {
                obj['user_notes_count'] = ApiClient.convertToType(data['user_notes_count'], 'String');
            }
            if (data.hasOwnProperty('web_url')) {
                obj['web_url'] = ApiClient.convertToType(data['web_url'], 'String');
            }
            if (data.hasOwnProperty('work_in_progress')) {
                obj['work_in_progress'] = ApiClient.convertToType(data['work_in_progress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `assignee`
        if (data['assignee']) { // data not null
          UserBasic.validateJSON(data['assignee']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserBasic.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['downvotes'] && !(typeof data['downvotes'] === 'string' || data['downvotes'] instanceof String)) {
            throw new Error("Expected the field `downvotes` to be a primitive type in the JSON string but got " + data['downvotes']);
        }
        // ensure the json data is a string
        if (data['force_remove_source_branch'] && !(typeof data['force_remove_source_branch'] === 'string' || data['force_remove_source_branch'] instanceof String)) {
            throw new Error("Expected the field `force_remove_source_branch` to be a primitive type in the JSON string but got " + data['force_remove_source_branch']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['iid'] && !(typeof data['iid'] === 'string' || data['iid'] instanceof String)) {
            throw new Error("Expected the field `iid` to be a primitive type in the JSON string but got " + data['iid']);
        }
        // ensure the json data is a string
        if (data['labels'] && !(typeof data['labels'] === 'string' || data['labels'] instanceof String)) {
            throw new Error("Expected the field `labels` to be a primitive type in the JSON string but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['merge_commit_sha'] && !(typeof data['merge_commit_sha'] === 'string' || data['merge_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_sha` to be a primitive type in the JSON string but got " + data['merge_commit_sha']);
        }
        // ensure the json data is a string
        if (data['merge_status'] && !(typeof data['merge_status'] === 'string' || data['merge_status'] instanceof String)) {
            throw new Error("Expected the field `merge_status` to be a primitive type in the JSON string but got " + data['merge_status']);
        }
        // ensure the json data is a string
        if (data['merge_when_build_succeeds'] && !(typeof data['merge_when_build_succeeds'] === 'string' || data['merge_when_build_succeeds'] instanceof String)) {
            throw new Error("Expected the field `merge_when_build_succeeds` to be a primitive type in the JSON string but got " + data['merge_when_build_succeeds']);
        }
        // validate the optional field `milestone`
        if (data['milestone']) { // data not null
          Milestone.validateJSON(data['milestone']);
        }
        // ensure the json data is a string
        if (data['project_id'] && !(typeof data['project_id'] === 'string' || data['project_id'] instanceof String)) {
            throw new Error("Expected the field `project_id` to be a primitive type in the JSON string but got " + data['project_id']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }
        // ensure the json data is a string
        if (data['should_remove_source_branch'] && !(typeof data['should_remove_source_branch'] === 'string' || data['should_remove_source_branch'] instanceof String)) {
            throw new Error("Expected the field `should_remove_source_branch` to be a primitive type in the JSON string but got " + data['should_remove_source_branch']);
        }
        // ensure the json data is a string
        if (data['source_branch'] && !(typeof data['source_branch'] === 'string' || data['source_branch'] instanceof String)) {
            throw new Error("Expected the field `source_branch` to be a primitive type in the JSON string but got " + data['source_branch']);
        }
        // ensure the json data is a string
        if (data['source_project_id'] && !(typeof data['source_project_id'] === 'string' || data['source_project_id'] instanceof String)) {
            throw new Error("Expected the field `source_project_id` to be a primitive type in the JSON string but got " + data['source_project_id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subscribed'] && !(typeof data['subscribed'] === 'string' || data['subscribed'] instanceof String)) {
            throw new Error("Expected the field `subscribed` to be a primitive type in the JSON string but got " + data['subscribed']);
        }
        // ensure the json data is a string
        if (data['target_branch'] && !(typeof data['target_branch'] === 'string' || data['target_branch'] instanceof String)) {
            throw new Error("Expected the field `target_branch` to be a primitive type in the JSON string but got " + data['target_branch']);
        }
        // ensure the json data is a string
        if (data['target_project_id'] && !(typeof data['target_project_id'] === 'string' || data['target_project_id'] instanceof String)) {
            throw new Error("Expected the field `target_project_id` to be a primitive type in the JSON string but got " + data['target_project_id']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // ensure the json data is a string
        if (data['upvotes'] && !(typeof data['upvotes'] === 'string' || data['upvotes'] instanceof String)) {
            throw new Error("Expected the field `upvotes` to be a primitive type in the JSON string but got " + data['upvotes']);
        }
        // ensure the json data is a string
        if (data['user_notes_count'] && !(typeof data['user_notes_count'] === 'string' || data['user_notes_count'] instanceof String)) {
            throw new Error("Expected the field `user_notes_count` to be a primitive type in the JSON string but got " + data['user_notes_count']);
        }
        // ensure the json data is a string
        if (data['web_url'] && !(typeof data['web_url'] === 'string' || data['web_url'] instanceof String)) {
            throw new Error("Expected the field `web_url` to be a primitive type in the JSON string but got " + data['web_url']);
        }
        // ensure the json data is a string
        if (data['work_in_progress'] && !(typeof data['work_in_progress'] === 'string' || data['work_in_progress'] instanceof String)) {
            throw new Error("Expected the field `work_in_progress` to be a primitive type in the JSON string but got " + data['work_in_progress']);
        }

        return true;
    }


}



/**
 * @member {module:model/UserBasic} assignee
 */
MergeRequest.prototype['assignee'] = undefined;

/**
 * @member {module:model/UserBasic} author
 */
MergeRequest.prototype['author'] = undefined;

/**
 * @member {String} created_at
 */
MergeRequest.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
MergeRequest.prototype['description'] = undefined;

/**
 * @member {String} downvotes
 */
MergeRequest.prototype['downvotes'] = undefined;

/**
 * @member {String} force_remove_source_branch
 */
MergeRequest.prototype['force_remove_source_branch'] = undefined;

/**
 * @member {String} id
 */
MergeRequest.prototype['id'] = undefined;

/**
 * @member {String} iid
 */
MergeRequest.prototype['iid'] = undefined;

/**
 * @member {String} labels
 */
MergeRequest.prototype['labels'] = undefined;

/**
 * @member {String} merge_commit_sha
 */
MergeRequest.prototype['merge_commit_sha'] = undefined;

/**
 * @member {String} merge_status
 */
MergeRequest.prototype['merge_status'] = undefined;

/**
 * @member {String} merge_when_build_succeeds
 */
MergeRequest.prototype['merge_when_build_succeeds'] = undefined;

/**
 * @member {module:model/Milestone} milestone
 */
MergeRequest.prototype['milestone'] = undefined;

/**
 * @member {String} project_id
 */
MergeRequest.prototype['project_id'] = undefined;

/**
 * @member {String} sha
 */
MergeRequest.prototype['sha'] = undefined;

/**
 * @member {String} should_remove_source_branch
 */
MergeRequest.prototype['should_remove_source_branch'] = undefined;

/**
 * @member {String} source_branch
 */
MergeRequest.prototype['source_branch'] = undefined;

/**
 * @member {String} source_project_id
 */
MergeRequest.prototype['source_project_id'] = undefined;

/**
 * @member {String} state
 */
MergeRequest.prototype['state'] = undefined;

/**
 * @member {String} subscribed
 */
MergeRequest.prototype['subscribed'] = undefined;

/**
 * @member {String} target_branch
 */
MergeRequest.prototype['target_branch'] = undefined;

/**
 * @member {String} target_project_id
 */
MergeRequest.prototype['target_project_id'] = undefined;

/**
 * @member {String} title
 */
MergeRequest.prototype['title'] = undefined;

/**
 * @member {String} updated_at
 */
MergeRequest.prototype['updated_at'] = undefined;

/**
 * @member {String} upvotes
 */
MergeRequest.prototype['upvotes'] = undefined;

/**
 * @member {String} user_notes_count
 */
MergeRequest.prototype['user_notes_count'] = undefined;

/**
 * @member {String} web_url
 */
MergeRequest.prototype['web_url'] = undefined;

/**
 * @member {String} work_in_progress
 */
MergeRequest.prototype['work_in_progress'] = undefined;






export default MergeRequest;

