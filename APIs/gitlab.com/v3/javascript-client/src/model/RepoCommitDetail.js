/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RepoCommitStats from './RepoCommitStats';

/**
 * The RepoCommitDetail model module.
 * @module model/RepoCommitDetail
 * @version v3
 */
class RepoCommitDetail {
    /**
     * Constructs a new <code>RepoCommitDetail</code>.
     * Get a specific commit of a project
     * @alias module:model/RepoCommitDetail
     */
    constructor() { 
        
        RepoCommitDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepoCommitDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepoCommitDetail} obj Optional instance to populate.
     * @return {module:model/RepoCommitDetail} The populated <code>RepoCommitDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepoCommitDetail();

            if (data.hasOwnProperty('author_email')) {
                obj['author_email'] = ApiClient.convertToType(data['author_email'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('authored_date')) {
                obj['authored_date'] = ApiClient.convertToType(data['authored_date'], 'String');
            }
            if (data.hasOwnProperty('committed_date')) {
                obj['committed_date'] = ApiClient.convertToType(data['committed_date'], 'String');
            }
            if (data.hasOwnProperty('committer_email')) {
                obj['committer_email'] = ApiClient.convertToType(data['committer_email'], 'String');
            }
            if (data.hasOwnProperty('committer_name')) {
                obj['committer_name'] = ApiClient.convertToType(data['committer_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parent_ids')) {
                obj['parent_ids'] = ApiClient.convertToType(data['parent_ids'], 'String');
            }
            if (data.hasOwnProperty('short_id')) {
                obj['short_id'] = ApiClient.convertToType(data['short_id'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = RepoCommitStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepoCommitDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepoCommitDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['author_email'] && !(typeof data['author_email'] === 'string' || data['author_email'] instanceof String)) {
            throw new Error("Expected the field `author_email` to be a primitive type in the JSON string but got " + data['author_email']);
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }
        // ensure the json data is a string
        if (data['authored_date'] && !(typeof data['authored_date'] === 'string' || data['authored_date'] instanceof String)) {
            throw new Error("Expected the field `authored_date` to be a primitive type in the JSON string but got " + data['authored_date']);
        }
        // ensure the json data is a string
        if (data['committed_date'] && !(typeof data['committed_date'] === 'string' || data['committed_date'] instanceof String)) {
            throw new Error("Expected the field `committed_date` to be a primitive type in the JSON string but got " + data['committed_date']);
        }
        // ensure the json data is a string
        if (data['committer_email'] && !(typeof data['committer_email'] === 'string' || data['committer_email'] instanceof String)) {
            throw new Error("Expected the field `committer_email` to be a primitive type in the JSON string but got " + data['committer_email']);
        }
        // ensure the json data is a string
        if (data['committer_name'] && !(typeof data['committer_name'] === 'string' || data['committer_name'] instanceof String)) {
            throw new Error("Expected the field `committer_name` to be a primitive type in the JSON string but got " + data['committer_name']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['parent_ids'] && !(typeof data['parent_ids'] === 'string' || data['parent_ids'] instanceof String)) {
            throw new Error("Expected the field `parent_ids` to be a primitive type in the JSON string but got " + data['parent_ids']);
        }
        // ensure the json data is a string
        if (data['short_id'] && !(typeof data['short_id'] === 'string' || data['short_id'] instanceof String)) {
            throw new Error("Expected the field `short_id` to be a primitive type in the JSON string but got " + data['short_id']);
        }
        // validate the optional field `stats`
        if (data['stats']) { // data not null
          RepoCommitStats.validateJSON(data['stats']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {String} author_email
 */
RepoCommitDetail.prototype['author_email'] = undefined;

/**
 * @member {String} author_name
 */
RepoCommitDetail.prototype['author_name'] = undefined;

/**
 * @member {String} authored_date
 */
RepoCommitDetail.prototype['authored_date'] = undefined;

/**
 * @member {String} committed_date
 */
RepoCommitDetail.prototype['committed_date'] = undefined;

/**
 * @member {String} committer_email
 */
RepoCommitDetail.prototype['committer_email'] = undefined;

/**
 * @member {String} committer_name
 */
RepoCommitDetail.prototype['committer_name'] = undefined;

/**
 * @member {String} created_at
 */
RepoCommitDetail.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
RepoCommitDetail.prototype['id'] = undefined;

/**
 * @member {String} message
 */
RepoCommitDetail.prototype['message'] = undefined;

/**
 * @member {String} parent_ids
 */
RepoCommitDetail.prototype['parent_ids'] = undefined;

/**
 * @member {String} short_id
 */
RepoCommitDetail.prototype['short_id'] = undefined;

/**
 * @member {module:model/RepoCommitStats} stats
 */
RepoCommitDetail.prototype['stats'] = undefined;

/**
 * @member {String} status
 */
RepoCommitDetail.prototype['status'] = undefined;

/**
 * @member {String} title
 */
RepoCommitDetail.prototype['title'] = undefined;






export default RepoCommitDetail;

