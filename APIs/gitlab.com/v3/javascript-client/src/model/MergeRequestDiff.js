/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MergeRequestDiff model module.
 * @module model/MergeRequestDiff
 * @version v3
 */
class MergeRequestDiff {
    /**
     * Constructs a new <code>MergeRequestDiff</code>.
     * This feature was introduced in GitLab 8.12.
     * @alias module:model/MergeRequestDiff
     */
    constructor() { 
        
        MergeRequestDiff.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MergeRequestDiff</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MergeRequestDiff} obj Optional instance to populate.
     * @return {module:model/MergeRequestDiff} The populated <code>MergeRequestDiff</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MergeRequestDiff();

            if (data.hasOwnProperty('base_commit_sha')) {
                obj['base_commit_sha'] = ApiClient.convertToType(data['base_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('head_commit_sha')) {
                obj['head_commit_sha'] = ApiClient.convertToType(data['head_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merge_request_id')) {
                obj['merge_request_id'] = ApiClient.convertToType(data['merge_request_id'], 'String');
            }
            if (data.hasOwnProperty('real_size')) {
                obj['real_size'] = ApiClient.convertToType(data['real_size'], 'String');
            }
            if (data.hasOwnProperty('start_commit_sha')) {
                obj['start_commit_sha'] = ApiClient.convertToType(data['start_commit_sha'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MergeRequestDiff</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MergeRequestDiff</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['base_commit_sha'] && !(typeof data['base_commit_sha'] === 'string' || data['base_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `base_commit_sha` to be a primitive type in the JSON string but got " + data['base_commit_sha']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['head_commit_sha'] && !(typeof data['head_commit_sha'] === 'string' || data['head_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `head_commit_sha` to be a primitive type in the JSON string but got " + data['head_commit_sha']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['merge_request_id'] && !(typeof data['merge_request_id'] === 'string' || data['merge_request_id'] instanceof String)) {
            throw new Error("Expected the field `merge_request_id` to be a primitive type in the JSON string but got " + data['merge_request_id']);
        }
        // ensure the json data is a string
        if (data['real_size'] && !(typeof data['real_size'] === 'string' || data['real_size'] instanceof String)) {
            throw new Error("Expected the field `real_size` to be a primitive type in the JSON string but got " + data['real_size']);
        }
        // ensure the json data is a string
        if (data['start_commit_sha'] && !(typeof data['start_commit_sha'] === 'string' || data['start_commit_sha'] instanceof String)) {
            throw new Error("Expected the field `start_commit_sha` to be a primitive type in the JSON string but got " + data['start_commit_sha']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {String} base_commit_sha
 */
MergeRequestDiff.prototype['base_commit_sha'] = undefined;

/**
 * @member {String} created_at
 */
MergeRequestDiff.prototype['created_at'] = undefined;

/**
 * @member {String} head_commit_sha
 */
MergeRequestDiff.prototype['head_commit_sha'] = undefined;

/**
 * @member {String} id
 */
MergeRequestDiff.prototype['id'] = undefined;

/**
 * @member {String} merge_request_id
 */
MergeRequestDiff.prototype['merge_request_id'] = undefined;

/**
 * @member {String} real_size
 */
MergeRequestDiff.prototype['real_size'] = undefined;

/**
 * @member {String} start_commit_sha
 */
MergeRequestDiff.prototype['start_commit_sha'] = undefined;

/**
 * @member {String} state
 */
MergeRequestDiff.prototype['state'] = undefined;






export default MergeRequestDiff;

