/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesTeamcityRequest model module.
 * @module model/PutV3ProjectsIdServicesTeamcityRequest
 * @version v3
 */
class PutV3ProjectsIdServicesTeamcityRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesTeamcityRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesTeamcityRequest
     * @param teamcityUrl {String} TeamCity root URL like https://teamcity.example.com
     * @param buildType {String} Build configuration ID
     * @param username {String} A user with permissions to trigger a manual build
     * @param password {String} The password of the user
     */
    constructor(teamcityUrl, buildType, username, password) { 
        
        PutV3ProjectsIdServicesTeamcityRequest.initialize(this, teamcityUrl, buildType, username, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, teamcityUrl, buildType, username, password) { 
        obj['teamcity_url'] = teamcityUrl;
        obj['build_type'] = buildType;
        obj['username'] = username;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesTeamcityRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesTeamcityRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesTeamcityRequest} The populated <code>PutV3ProjectsIdServicesTeamcityRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesTeamcityRequest();

            if (data.hasOwnProperty('teamcity_url')) {
                obj['teamcity_url'] = ApiClient.convertToType(data['teamcity_url'], 'String');
            }
            if (data.hasOwnProperty('build_type')) {
                obj['build_type'] = ApiClient.convertToType(data['build_type'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesTeamcityRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesTeamcityRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesTeamcityRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['teamcity_url'] && !(typeof data['teamcity_url'] === 'string' || data['teamcity_url'] instanceof String)) {
            throw new Error("Expected the field `teamcity_url` to be a primitive type in the JSON string but got " + data['teamcity_url']);
        }
        // ensure the json data is a string
        if (data['build_type'] && !(typeof data['build_type'] === 'string' || data['build_type'] instanceof String)) {
            throw new Error("Expected the field `build_type` to be a primitive type in the JSON string but got " + data['build_type']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesTeamcityRequest.RequiredProperties = ["teamcity_url", "build_type", "username", "password"];

/**
 * TeamCity root URL like https://teamcity.example.com
 * @member {String} teamcity_url
 */
PutV3ProjectsIdServicesTeamcityRequest.prototype['teamcity_url'] = undefined;

/**
 * Build configuration ID
 * @member {String} build_type
 */
PutV3ProjectsIdServicesTeamcityRequest.prototype['build_type'] = undefined;

/**
 * A user with permissions to trigger a manual build
 * @member {String} username
 */
PutV3ProjectsIdServicesTeamcityRequest.prototype['username'] = undefined;

/**
 * The password of the user
 * @member {String} password
 */
PutV3ProjectsIdServicesTeamcityRequest.prototype['password'] = undefined;

/**
 * Event will be triggered by a push to the repository
 * @member {String} push_events
 */
PutV3ProjectsIdServicesTeamcityRequest.prototype['push_events'] = undefined;






export default PutV3ProjectsIdServicesTeamcityRequest;

