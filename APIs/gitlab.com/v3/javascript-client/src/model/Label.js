/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Label model module.
 * @module model/Label
 * @version v3
 */
class Label {
    /**
     * Constructs a new <code>Label</code>.
     * Unsubscribe from a resource
     * @alias module:model/Label
     */
    constructor() { 
        
        Label.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Label</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Label} obj Optional instance to populate.
     * @return {module:model/Label} The populated <code>Label</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Label();

            if (data.hasOwnProperty('closed_issues_count')) {
                obj['closed_issues_count'] = ApiClient.convertToType(data['closed_issues_count'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('open_issues_count')) {
                obj['open_issues_count'] = ApiClient.convertToType(data['open_issues_count'], 'String');
            }
            if (data.hasOwnProperty('open_merge_requests_count')) {
                obj['open_merge_requests_count'] = ApiClient.convertToType(data['open_merge_requests_count'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Label</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Label</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['closed_issues_count'] && !(typeof data['closed_issues_count'] === 'string' || data['closed_issues_count'] instanceof String)) {
            throw new Error("Expected the field `closed_issues_count` to be a primitive type in the JSON string but got " + data['closed_issues_count']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['open_issues_count'] && !(typeof data['open_issues_count'] === 'string' || data['open_issues_count'] instanceof String)) {
            throw new Error("Expected the field `open_issues_count` to be a primitive type in the JSON string but got " + data['open_issues_count']);
        }
        // ensure the json data is a string
        if (data['open_merge_requests_count'] && !(typeof data['open_merge_requests_count'] === 'string' || data['open_merge_requests_count'] instanceof String)) {
            throw new Error("Expected the field `open_merge_requests_count` to be a primitive type in the JSON string but got " + data['open_merge_requests_count']);
        }
        // ensure the json data is a string
        if (data['priority'] && !(typeof data['priority'] === 'string' || data['priority'] instanceof String)) {
            throw new Error("Expected the field `priority` to be a primitive type in the JSON string but got " + data['priority']);
        }
        // ensure the json data is a string
        if (data['subscribed'] && !(typeof data['subscribed'] === 'string' || data['subscribed'] instanceof String)) {
            throw new Error("Expected the field `subscribed` to be a primitive type in the JSON string but got " + data['subscribed']);
        }

        return true;
    }


}



/**
 * @member {String} closed_issues_count
 */
Label.prototype['closed_issues_count'] = undefined;

/**
 * @member {String} color
 */
Label.prototype['color'] = undefined;

/**
 * @member {String} description
 */
Label.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Label.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Label.prototype['name'] = undefined;

/**
 * @member {String} open_issues_count
 */
Label.prototype['open_issues_count'] = undefined;

/**
 * @member {String} open_merge_requests_count
 */
Label.prototype['open_merge_requests_count'] = undefined;

/**
 * @member {String} priority
 */
Label.prototype['priority'] = undefined;

/**
 * @member {String} subscribed
 */
Label.prototype['subscribed'] = undefined;






export default Label;

