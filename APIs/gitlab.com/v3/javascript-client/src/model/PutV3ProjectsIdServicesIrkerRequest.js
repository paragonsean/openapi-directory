/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesIrkerRequest model module.
 * @module model/PutV3ProjectsIdServicesIrkerRequest
 * @version v3
 */
class PutV3ProjectsIdServicesIrkerRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesIrkerRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesIrkerRequest
     * @param recipients {String} Recipients/channels separated by whitespaces
     */
    constructor(recipients) { 
        
        PutV3ProjectsIdServicesIrkerRequest.initialize(this, recipients);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recipients) { 
        obj['recipients'] = recipients;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesIrkerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesIrkerRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesIrkerRequest} The populated <code>PutV3ProjectsIdServicesIrkerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesIrkerRequest();

            if (data.hasOwnProperty('recipients')) {
                obj['recipients'] = ApiClient.convertToType(data['recipients'], 'String');
            }
            if (data.hasOwnProperty('default_irc_uri')) {
                obj['default_irc_uri'] = ApiClient.convertToType(data['default_irc_uri'], 'String');
            }
            if (data.hasOwnProperty('server_host')) {
                obj['server_host'] = ApiClient.convertToType(data['server_host'], 'String');
            }
            if (data.hasOwnProperty('server_port')) {
                obj['server_port'] = ApiClient.convertToType(data['server_port'], 'Number');
            }
            if (data.hasOwnProperty('colorize_messages')) {
                obj['colorize_messages'] = ApiClient.convertToType(data['colorize_messages'], 'Boolean');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesIrkerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesIrkerRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesIrkerRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['recipients'] && !(typeof data['recipients'] === 'string' || data['recipients'] instanceof String)) {
            throw new Error("Expected the field `recipients` to be a primitive type in the JSON string but got " + data['recipients']);
        }
        // ensure the json data is a string
        if (data['default_irc_uri'] && !(typeof data['default_irc_uri'] === 'string' || data['default_irc_uri'] instanceof String)) {
            throw new Error("Expected the field `default_irc_uri` to be a primitive type in the JSON string but got " + data['default_irc_uri']);
        }
        // ensure the json data is a string
        if (data['server_host'] && !(typeof data['server_host'] === 'string' || data['server_host'] instanceof String)) {
            throw new Error("Expected the field `server_host` to be a primitive type in the JSON string but got " + data['server_host']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesIrkerRequest.RequiredProperties = ["recipients"];

/**
 * Recipients/channels separated by whitespaces
 * @member {String} recipients
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['recipients'] = undefined;

/**
 * Default: irc://irc.network.net:6697
 * @member {String} default_irc_uri
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['default_irc_uri'] = undefined;

/**
 * Server host. Default localhost
 * @member {String} server_host
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['server_host'] = undefined;

/**
 * Server port. Default 6659
 * @member {Number} server_port
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['server_port'] = undefined;

/**
 * Colorize messages
 * @member {Boolean} colorize_messages
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['colorize_messages'] = undefined;

/**
 * Event will be triggered by a push to the repository
 * @member {String} push_events
 */
PutV3ProjectsIdServicesIrkerRequest.prototype['push_events'] = undefined;






export default PutV3ProjectsIdServicesIrkerRequest;

