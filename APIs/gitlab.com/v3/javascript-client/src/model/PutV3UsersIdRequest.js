/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3UsersIdRequest model module.
 * @module model/PutV3UsersIdRequest
 * @version v3
 */
class PutV3UsersIdRequest {
    /**
     * Constructs a new <code>PutV3UsersIdRequest</code>.
     * @alias module:model/PutV3UsersIdRequest
     */
    constructor() { 
        
        PutV3UsersIdRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutV3UsersIdRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3UsersIdRequest} obj Optional instance to populate.
     * @return {module:model/PutV3UsersIdRequest} The populated <code>PutV3UsersIdRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3UsersIdRequest();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('skype')) {
                obj['skype'] = ApiClient.convertToType(data['skype'], 'String');
            }
            if (data.hasOwnProperty('linkedin')) {
                obj['linkedin'] = ApiClient.convertToType(data['linkedin'], 'String');
            }
            if (data.hasOwnProperty('twitter')) {
                obj['twitter'] = ApiClient.convertToType(data['twitter'], 'String');
            }
            if (data.hasOwnProperty('website_url')) {
                obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = ApiClient.convertToType(data['organization'], 'String');
            }
            if (data.hasOwnProperty('projects_limit')) {
                obj['projects_limit'] = ApiClient.convertToType(data['projects_limit'], 'Number');
            }
            if (data.hasOwnProperty('extern_uid')) {
                obj['extern_uid'] = ApiClient.convertToType(data['extern_uid'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('bio')) {
                obj['bio'] = ApiClient.convertToType(data['bio'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('admin')) {
                obj['admin'] = ApiClient.convertToType(data['admin'], 'Boolean');
            }
            if (data.hasOwnProperty('can_create_group')) {
                obj['can_create_group'] = ApiClient.convertToType(data['can_create_group'], 'Boolean');
            }
            if (data.hasOwnProperty('confirm')) {
                obj['confirm'] = ApiClient.convertToType(data['confirm'], 'Boolean');
            }
            if (data.hasOwnProperty('external')) {
                obj['external'] = ApiClient.convertToType(data['external'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3UsersIdRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3UsersIdRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['skype'] && !(typeof data['skype'] === 'string' || data['skype'] instanceof String)) {
            throw new Error("Expected the field `skype` to be a primitive type in the JSON string but got " + data['skype']);
        }
        // ensure the json data is a string
        if (data['linkedin'] && !(typeof data['linkedin'] === 'string' || data['linkedin'] instanceof String)) {
            throw new Error("Expected the field `linkedin` to be a primitive type in the JSON string but got " + data['linkedin']);
        }
        // ensure the json data is a string
        if (data['twitter'] && !(typeof data['twitter'] === 'string' || data['twitter'] instanceof String)) {
            throw new Error("Expected the field `twitter` to be a primitive type in the JSON string but got " + data['twitter']);
        }
        // ensure the json data is a string
        if (data['website_url'] && !(typeof data['website_url'] === 'string' || data['website_url'] instanceof String)) {
            throw new Error("Expected the field `website_url` to be a primitive type in the JSON string but got " + data['website_url']);
        }
        // ensure the json data is a string
        if (data['organization'] && !(typeof data['organization'] === 'string' || data['organization'] instanceof String)) {
            throw new Error("Expected the field `organization` to be a primitive type in the JSON string but got " + data['organization']);
        }
        // ensure the json data is a string
        if (data['extern_uid'] && !(typeof data['extern_uid'] === 'string' || data['extern_uid'] instanceof String)) {
            throw new Error("Expected the field `extern_uid` to be a primitive type in the JSON string but got " + data['extern_uid']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['bio'] && !(typeof data['bio'] === 'string' || data['bio'] instanceof String)) {
            throw new Error("Expected the field `bio` to be a primitive type in the JSON string but got " + data['bio']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }

        return true;
    }


}



/**
 * The email of the user
 * @member {String} email
 */
PutV3UsersIdRequest.prototype['email'] = undefined;

/**
 * The password of the new user
 * @member {String} password
 */
PutV3UsersIdRequest.prototype['password'] = undefined;

/**
 * The name of the user
 * @member {String} name
 */
PutV3UsersIdRequest.prototype['name'] = undefined;

/**
 * The username of the user
 * @member {String} username
 */
PutV3UsersIdRequest.prototype['username'] = undefined;

/**
 * The Skype username
 * @member {String} skype
 */
PutV3UsersIdRequest.prototype['skype'] = undefined;

/**
 * The LinkedIn username
 * @member {String} linkedin
 */
PutV3UsersIdRequest.prototype['linkedin'] = undefined;

/**
 * The Twitter username
 * @member {String} twitter
 */
PutV3UsersIdRequest.prototype['twitter'] = undefined;

/**
 * The website of the user
 * @member {String} website_url
 */
PutV3UsersIdRequest.prototype['website_url'] = undefined;

/**
 * The organization of the user
 * @member {String} organization
 */
PutV3UsersIdRequest.prototype['organization'] = undefined;

/**
 * The number of projects a user can create
 * @member {Number} projects_limit
 */
PutV3UsersIdRequest.prototype['projects_limit'] = undefined;

/**
 * The external authentication provider UID
 * @member {String} extern_uid
 */
PutV3UsersIdRequest.prototype['extern_uid'] = undefined;

/**
 * The external provider
 * @member {String} provider
 */
PutV3UsersIdRequest.prototype['provider'] = undefined;

/**
 * The biography of the user
 * @member {String} bio
 */
PutV3UsersIdRequest.prototype['bio'] = undefined;

/**
 * The location of the user
 * @member {String} location
 */
PutV3UsersIdRequest.prototype['location'] = undefined;

/**
 * Flag indicating the user is an administrator
 * @member {Boolean} admin
 */
PutV3UsersIdRequest.prototype['admin'] = undefined;

/**
 * Flag indicating the user can create groups
 * @member {Boolean} can_create_group
 */
PutV3UsersIdRequest.prototype['can_create_group'] = undefined;

/**
 * Flag indicating the account needs to be confirmed
 * @member {Boolean} confirm
 */
PutV3UsersIdRequest.prototype['confirm'] = undefined;

/**
 * Flag indicating the user is an external user
 * @member {Boolean} external
 */
PutV3UsersIdRequest.prototype['external'] = undefined;






export default PutV3UsersIdRequest;

