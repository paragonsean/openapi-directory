/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostV3ProjectsIdIssuesRequest model module.
 * @module model/PostV3ProjectsIdIssuesRequest
 * @version v3
 */
class PostV3ProjectsIdIssuesRequest {
    /**
     * Constructs a new <code>PostV3ProjectsIdIssuesRequest</code>.
     * @alias module:model/PostV3ProjectsIdIssuesRequest
     * @param title {String} The title of an issue
     */
    constructor(title) { 
        
        PostV3ProjectsIdIssuesRequest.initialize(this, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title) { 
        obj['title'] = title;
    }

    /**
     * Constructs a <code>PostV3ProjectsIdIssuesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostV3ProjectsIdIssuesRequest} obj Optional instance to populate.
     * @return {module:model/PostV3ProjectsIdIssuesRequest} The populated <code>PostV3ProjectsIdIssuesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostV3ProjectsIdIssuesRequest();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('merge_request_for_resolving_discussions')) {
                obj['merge_request_for_resolving_discussions'] = ApiClient.convertToType(data['merge_request_for_resolving_discussions'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('assignee_id')) {
                obj['assignee_id'] = ApiClient.convertToType(data['assignee_id'], 'Number');
            }
            if (data.hasOwnProperty('milestone_id')) {
                obj['milestone_id'] = ApiClient.convertToType(data['milestone_id'], 'Number');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'String');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'String');
            }
            if (data.hasOwnProperty('confidential')) {
                obj['confidential'] = ApiClient.convertToType(data['confidential'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostV3ProjectsIdIssuesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostV3ProjectsIdIssuesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostV3ProjectsIdIssuesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['labels'] && !(typeof data['labels'] === 'string' || data['labels'] instanceof String)) {
            throw new Error("Expected the field `labels` to be a primitive type in the JSON string but got " + data['labels']);
        }
        // ensure the json data is a string
        if (data['due_date'] && !(typeof data['due_date'] === 'string' || data['due_date'] instanceof String)) {
            throw new Error("Expected the field `due_date` to be a primitive type in the JSON string but got " + data['due_date']);
        }

        return true;
    }


}

PostV3ProjectsIdIssuesRequest.RequiredProperties = ["title"];

/**
 * The title of an issue
 * @member {String} title
 */
PostV3ProjectsIdIssuesRequest.prototype['title'] = undefined;

/**
 * Date time when the issue was created. Available only for admins and project owners.
 * @member {Date} created_at
 */
PostV3ProjectsIdIssuesRequest.prototype['created_at'] = undefined;

/**
 * The IID of a merge request for which to resolve discussions
 * @member {Number} merge_request_for_resolving_discussions
 */
PostV3ProjectsIdIssuesRequest.prototype['merge_request_for_resolving_discussions'] = undefined;

/**
 * The description of an issue
 * @member {String} description
 */
PostV3ProjectsIdIssuesRequest.prototype['description'] = undefined;

/**
 * The ID of a user to assign issue
 * @member {Number} assignee_id
 */
PostV3ProjectsIdIssuesRequest.prototype['assignee_id'] = undefined;

/**
 * The ID of a milestone to assign issue
 * @member {Number} milestone_id
 */
PostV3ProjectsIdIssuesRequest.prototype['milestone_id'] = undefined;

/**
 * Comma-separated list of label names
 * @member {String} labels
 */
PostV3ProjectsIdIssuesRequest.prototype['labels'] = undefined;

/**
 * Date time string in the format YEAR-MONTH-DAY
 * @member {String} due_date
 */
PostV3ProjectsIdIssuesRequest.prototype['due_date'] = undefined;

/**
 * Boolean parameter if the issue should be confidential
 * @member {Boolean} confidential
 */
PostV3ProjectsIdIssuesRequest.prototype['confidential'] = undefined;






export default PostV3ProjectsIdIssuesRequest;

