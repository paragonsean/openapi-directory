/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserPublic from './UserPublic';

/**
 * The SSHKeyWithUser model module.
 * @module model/SSHKeyWithUser
 * @version v3
 */
class SSHKeyWithUser {
    /**
     * Constructs a new <code>SSHKeyWithUser</code>.
     * Get single ssh key by id. Only available to admin users
     * @alias module:model/SSHKeyWithUser
     */
    constructor() { 
        
        SSHKeyWithUser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SSHKeyWithUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SSHKeyWithUser} obj Optional instance to populate.
     * @return {module:model/SSHKeyWithUser} The populated <code>SSHKeyWithUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SSHKeyWithUser();

            if (data.hasOwnProperty('can_push')) {
                obj['can_push'] = ApiClient.convertToType(data['can_push'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserPublic.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SSHKeyWithUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SSHKeyWithUser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['can_push'] && !(typeof data['can_push'] === 'string' || data['can_push'] instanceof String)) {
            throw new Error("Expected the field `can_push` to be a primitive type in the JSON string but got " + data['can_push']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserPublic.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {String} can_push
 */
SSHKeyWithUser.prototype['can_push'] = undefined;

/**
 * @member {String} created_at
 */
SSHKeyWithUser.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
SSHKeyWithUser.prototype['id'] = undefined;

/**
 * @member {String} key
 */
SSHKeyWithUser.prototype['key'] = undefined;

/**
 * @member {String} title
 */
SSHKeyWithUser.prototype['title'] = undefined;

/**
 * @member {module:model/UserPublic} user
 */
SSHKeyWithUser.prototype['user'] = undefined;






export default SSHKeyWithUser;

