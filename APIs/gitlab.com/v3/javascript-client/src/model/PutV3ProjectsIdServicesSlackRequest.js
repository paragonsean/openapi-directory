/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesSlackRequest model module.
 * @module model/PutV3ProjectsIdServicesSlackRequest
 * @version v3
 */
class PutV3ProjectsIdServicesSlackRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesSlackRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesSlackRequest
     * @param webhook {String} The Slack webhook. e.g. https://hooks.slack.com/services/...
     */
    constructor(webhook) { 
        
        PutV3ProjectsIdServicesSlackRequest.initialize(this, webhook);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, webhook) { 
        obj['webhook'] = webhook;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesSlackRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesSlackRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesSlackRequest} The populated <code>PutV3ProjectsIdServicesSlackRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesSlackRequest();

            if (data.hasOwnProperty('webhook')) {
                obj['webhook'] = ApiClient.convertToType(data['webhook'], 'String');
            }
            if (data.hasOwnProperty('new_issue_url')) {
                obj['new_issue_url'] = ApiClient.convertToType(data['new_issue_url'], 'String');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
            if (data.hasOwnProperty('issue_events')) {
                obj['issue_events'] = ApiClient.convertToType(data['issue_events'], 'String');
            }
            if (data.hasOwnProperty('confidential_issue_events')) {
                obj['confidential_issue_events'] = ApiClient.convertToType(data['confidential_issue_events'], 'String');
            }
            if (data.hasOwnProperty('merge_request_events')) {
                obj['merge_request_events'] = ApiClient.convertToType(data['merge_request_events'], 'String');
            }
            if (data.hasOwnProperty('note_events')) {
                obj['note_events'] = ApiClient.convertToType(data['note_events'], 'String');
            }
            if (data.hasOwnProperty('tag_push_events')) {
                obj['tag_push_events'] = ApiClient.convertToType(data['tag_push_events'], 'String');
            }
            if (data.hasOwnProperty('build_events')) {
                obj['build_events'] = ApiClient.convertToType(data['build_events'], 'String');
            }
            if (data.hasOwnProperty('pipeline_events')) {
                obj['pipeline_events'] = ApiClient.convertToType(data['pipeline_events'], 'String');
            }
            if (data.hasOwnProperty('wiki_page_events')) {
                obj['wiki_page_events'] = ApiClient.convertToType(data['wiki_page_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesSlackRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesSlackRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesSlackRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['webhook'] && !(typeof data['webhook'] === 'string' || data['webhook'] instanceof String)) {
            throw new Error("Expected the field `webhook` to be a primitive type in the JSON string but got " + data['webhook']);
        }
        // ensure the json data is a string
        if (data['new_issue_url'] && !(typeof data['new_issue_url'] === 'string' || data['new_issue_url'] instanceof String)) {
            throw new Error("Expected the field `new_issue_url` to be a primitive type in the JSON string but got " + data['new_issue_url']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }
        // ensure the json data is a string
        if (data['issue_events'] && !(typeof data['issue_events'] === 'string' || data['issue_events'] instanceof String)) {
            throw new Error("Expected the field `issue_events` to be a primitive type in the JSON string but got " + data['issue_events']);
        }
        // ensure the json data is a string
        if (data['confidential_issue_events'] && !(typeof data['confidential_issue_events'] === 'string' || data['confidential_issue_events'] instanceof String)) {
            throw new Error("Expected the field `confidential_issue_events` to be a primitive type in the JSON string but got " + data['confidential_issue_events']);
        }
        // ensure the json data is a string
        if (data['merge_request_events'] && !(typeof data['merge_request_events'] === 'string' || data['merge_request_events'] instanceof String)) {
            throw new Error("Expected the field `merge_request_events` to be a primitive type in the JSON string but got " + data['merge_request_events']);
        }
        // ensure the json data is a string
        if (data['note_events'] && !(typeof data['note_events'] === 'string' || data['note_events'] instanceof String)) {
            throw new Error("Expected the field `note_events` to be a primitive type in the JSON string but got " + data['note_events']);
        }
        // ensure the json data is a string
        if (data['tag_push_events'] && !(typeof data['tag_push_events'] === 'string' || data['tag_push_events'] instanceof String)) {
            throw new Error("Expected the field `tag_push_events` to be a primitive type in the JSON string but got " + data['tag_push_events']);
        }
        // ensure the json data is a string
        if (data['build_events'] && !(typeof data['build_events'] === 'string' || data['build_events'] instanceof String)) {
            throw new Error("Expected the field `build_events` to be a primitive type in the JSON string but got " + data['build_events']);
        }
        // ensure the json data is a string
        if (data['pipeline_events'] && !(typeof data['pipeline_events'] === 'string' || data['pipeline_events'] instanceof String)) {
            throw new Error("Expected the field `pipeline_events` to be a primitive type in the JSON string but got " + data['pipeline_events']);
        }
        // ensure the json data is a string
        if (data['wiki_page_events'] && !(typeof data['wiki_page_events'] === 'string' || data['wiki_page_events'] instanceof String)) {
            throw new Error("Expected the field `wiki_page_events` to be a primitive type in the JSON string but got " + data['wiki_page_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesSlackRequest.RequiredProperties = ["webhook"];

/**
 * The Slack webhook. e.g. https://hooks.slack.com/services/...
 * @member {String} webhook
 */
PutV3ProjectsIdServicesSlackRequest.prototype['webhook'] = undefined;

/**
 * The user name
 * @member {String} new_issue_url
 */
PutV3ProjectsIdServicesSlackRequest.prototype['new_issue_url'] = undefined;

/**
 * The channel name
 * @member {String} channel
 */
PutV3ProjectsIdServicesSlackRequest.prototype['channel'] = undefined;

/**
 * Event will be triggered by a push to the repository
 * @member {String} push_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['push_events'] = undefined;

/**
 * Event will be triggered when an issue is created/updated/closed
 * @member {String} issue_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['issue_events'] = undefined;

/**
 * Event will be triggered when a confidential issue is created/updated/closed
 * @member {String} confidential_issue_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['confidential_issue_events'] = undefined;

/**
 * Event will be triggered when a merge request is created/updated/merged
 * @member {String} merge_request_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['merge_request_events'] = undefined;

/**
 * Event will be triggered when someone adds a comment
 * @member {String} note_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['note_events'] = undefined;

/**
 * Event will be triggered when a new tag is pushed to the repository
 * @member {String} tag_push_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['tag_push_events'] = undefined;

/**
 * Event will be triggered when a build status changes
 * @member {String} build_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['build_events'] = undefined;

/**
 * @member {String} pipeline_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['pipeline_events'] = undefined;

/**
 * Event will be triggered when a wiki page is created/updated
 * @member {String} wiki_page_events
 */
PutV3ProjectsIdServicesSlackRequest.prototype['wiki_page_events'] = undefined;






export default PutV3ProjectsIdServicesSlackRequest;

