/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepoBranch model module.
 * @module model/RepoBranch
 * @version v3
 */
class RepoBranch {
    /**
     * Constructs a new <code>RepoBranch</code>.
     * Create branch
     * @alias module:model/RepoBranch
     */
    constructor() { 
        
        RepoBranch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepoBranch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepoBranch} obj Optional instance to populate.
     * @return {module:model/RepoBranch} The populated <code>RepoBranch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepoBranch();

            if (data.hasOwnProperty('commit')) {
                obj['commit'] = ApiClient.convertToType(data['commit'], 'String');
            }
            if (data.hasOwnProperty('developers_can_merge')) {
                obj['developers_can_merge'] = ApiClient.convertToType(data['developers_can_merge'], 'String');
            }
            if (data.hasOwnProperty('developers_can_push')) {
                obj['developers_can_push'] = ApiClient.convertToType(data['developers_can_push'], 'String');
            }
            if (data.hasOwnProperty('merged')) {
                obj['merged'] = ApiClient.convertToType(data['merged'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('protected')) {
                obj['protected'] = ApiClient.convertToType(data['protected'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RepoBranch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RepoBranch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['commit'] && !(typeof data['commit'] === 'string' || data['commit'] instanceof String)) {
            throw new Error("Expected the field `commit` to be a primitive type in the JSON string but got " + data['commit']);
        }
        // ensure the json data is a string
        if (data['developers_can_merge'] && !(typeof data['developers_can_merge'] === 'string' || data['developers_can_merge'] instanceof String)) {
            throw new Error("Expected the field `developers_can_merge` to be a primitive type in the JSON string but got " + data['developers_can_merge']);
        }
        // ensure the json data is a string
        if (data['developers_can_push'] && !(typeof data['developers_can_push'] === 'string' || data['developers_can_push'] instanceof String)) {
            throw new Error("Expected the field `developers_can_push` to be a primitive type in the JSON string but got " + data['developers_can_push']);
        }
        // ensure the json data is a string
        if (data['merged'] && !(typeof data['merged'] === 'string' || data['merged'] instanceof String)) {
            throw new Error("Expected the field `merged` to be a primitive type in the JSON string but got " + data['merged']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['protected'] && !(typeof data['protected'] === 'string' || data['protected'] instanceof String)) {
            throw new Error("Expected the field `protected` to be a primitive type in the JSON string but got " + data['protected']);
        }

        return true;
    }


}



/**
 * @member {String} commit
 */
RepoBranch.prototype['commit'] = undefined;

/**
 * @member {String} developers_can_merge
 */
RepoBranch.prototype['developers_can_merge'] = undefined;

/**
 * @member {String} developers_can_push
 */
RepoBranch.prototype['developers_can_push'] = undefined;

/**
 * @member {String} merged
 */
RepoBranch.prototype['merged'] = undefined;

/**
 * @member {String} name
 */
RepoBranch.prototype['name'] = undefined;

/**
 * @member {String} protected
 */
RepoBranch.prototype['protected'] = undefined;






export default RepoBranch;

