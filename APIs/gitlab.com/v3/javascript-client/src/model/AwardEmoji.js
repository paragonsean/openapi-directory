/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserBasic from './UserBasic';

/**
 * The AwardEmoji model module.
 * @module model/AwardEmoji
 * @version v3
 */
class AwardEmoji {
    /**
     * Constructs a new <code>AwardEmoji</code>.
     * This feature was introduced in 8.9
     * @alias module:model/AwardEmoji
     */
    constructor() { 
        
        AwardEmoji.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AwardEmoji</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AwardEmoji} obj Optional instance to populate.
     * @return {module:model/AwardEmoji} The populated <code>AwardEmoji</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AwardEmoji();

            if (data.hasOwnProperty('awardable_id')) {
                obj['awardable_id'] = ApiClient.convertToType(data['awardable_id'], 'String');
            }
            if (data.hasOwnProperty('awardable_type')) {
                obj['awardable_type'] = ApiClient.convertToType(data['awardable_type'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserBasic.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AwardEmoji</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AwardEmoji</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['awardable_id'] && !(typeof data['awardable_id'] === 'string' || data['awardable_id'] instanceof String)) {
            throw new Error("Expected the field `awardable_id` to be a primitive type in the JSON string but got " + data['awardable_id']);
        }
        // ensure the json data is a string
        if (data['awardable_type'] && !(typeof data['awardable_type'] === 'string' || data['awardable_type'] instanceof String)) {
            throw new Error("Expected the field `awardable_type` to be a primitive type in the JSON string but got " + data['awardable_type']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          UserBasic.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {String} awardable_id
 */
AwardEmoji.prototype['awardable_id'] = undefined;

/**
 * @member {String} awardable_type
 */
AwardEmoji.prototype['awardable_type'] = undefined;

/**
 * @member {String} created_at
 */
AwardEmoji.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
AwardEmoji.prototype['id'] = undefined;

/**
 * @member {String} name
 */
AwardEmoji.prototype['name'] = undefined;

/**
 * @member {String} updated_at
 */
AwardEmoji.prototype['updated_at'] = undefined;

/**
 * @member {module:model/UserBasic} user
 */
AwardEmoji.prototype['user'] = undefined;






export default AwardEmoji;

