/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdLabelsRequest model module.
 * @module model/PutV3ProjectsIdLabelsRequest
 * @version v3
 */
class PutV3ProjectsIdLabelsRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdLabelsRequest</code>.
     * @alias module:model/PutV3ProjectsIdLabelsRequest
     * @param name {String} The name of the label to be updated
     */
    constructor(name) { 
        
        PutV3ProjectsIdLabelsRequest.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdLabelsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdLabelsRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdLabelsRequest} The populated <code>PutV3ProjectsIdLabelsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdLabelsRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('new_name')) {
                obj['new_name'] = ApiClient.convertToType(data['new_name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdLabelsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdLabelsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdLabelsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['new_name'] && !(typeof data['new_name'] === 'string' || data['new_name'] instanceof String)) {
            throw new Error("Expected the field `new_name` to be a primitive type in the JSON string but got " + data['new_name']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

PutV3ProjectsIdLabelsRequest.RequiredProperties = ["name"];

/**
 * The name of the label to be updated
 * @member {String} name
 */
PutV3ProjectsIdLabelsRequest.prototype['name'] = undefined;

/**
 * The new name of the label
 * @member {String} new_name
 */
PutV3ProjectsIdLabelsRequest.prototype['new_name'] = undefined;

/**
 * The new color of the label given in 6-digit hex notation with leading '#' sign (e.g. #FFAABB)
 * @member {String} color
 */
PutV3ProjectsIdLabelsRequest.prototype['color'] = undefined;

/**
 * The new description of label
 * @member {String} description
 */
PutV3ProjectsIdLabelsRequest.prototype['description'] = undefined;

/**
 * The priority of the label
 * @member {Number} priority
 */
PutV3ProjectsIdLabelsRequest.prototype['priority'] = undefined;






export default PutV3ProjectsIdLabelsRequest;

