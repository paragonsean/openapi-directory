/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesRedmineRequest model module.
 * @module model/PutV3ProjectsIdServicesRedmineRequest
 * @version v3
 */
class PutV3ProjectsIdServicesRedmineRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesRedmineRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesRedmineRequest
     * @param newIssueUrl {String} The new issue URL
     * @param projectUrl {String} The project URL
     * @param issuesUrl {String} The issues URL
     */
    constructor(newIssueUrl, projectUrl, issuesUrl) { 
        
        PutV3ProjectsIdServicesRedmineRequest.initialize(this, newIssueUrl, projectUrl, issuesUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, newIssueUrl, projectUrl, issuesUrl) { 
        obj['new_issue_url'] = newIssueUrl;
        obj['project_url'] = projectUrl;
        obj['issues_url'] = issuesUrl;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesRedmineRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesRedmineRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesRedmineRequest} The populated <code>PutV3ProjectsIdServicesRedmineRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesRedmineRequest();

            if (data.hasOwnProperty('new_issue_url')) {
                obj['new_issue_url'] = ApiClient.convertToType(data['new_issue_url'], 'String');
            }
            if (data.hasOwnProperty('project_url')) {
                obj['project_url'] = ApiClient.convertToType(data['project_url'], 'String');
            }
            if (data.hasOwnProperty('issues_url')) {
                obj['issues_url'] = ApiClient.convertToType(data['issues_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesRedmineRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesRedmineRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesRedmineRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['new_issue_url'] && !(typeof data['new_issue_url'] === 'string' || data['new_issue_url'] instanceof String)) {
            throw new Error("Expected the field `new_issue_url` to be a primitive type in the JSON string but got " + data['new_issue_url']);
        }
        // ensure the json data is a string
        if (data['project_url'] && !(typeof data['project_url'] === 'string' || data['project_url'] instanceof String)) {
            throw new Error("Expected the field `project_url` to be a primitive type in the JSON string but got " + data['project_url']);
        }
        // ensure the json data is a string
        if (data['issues_url'] && !(typeof data['issues_url'] === 'string' || data['issues_url'] instanceof String)) {
            throw new Error("Expected the field `issues_url` to be a primitive type in the JSON string but got " + data['issues_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesRedmineRequest.RequiredProperties = ["new_issue_url", "project_url", "issues_url"];

/**
 * The new issue URL
 * @member {String} new_issue_url
 */
PutV3ProjectsIdServicesRedmineRequest.prototype['new_issue_url'] = undefined;

/**
 * The project URL
 * @member {String} project_url
 */
PutV3ProjectsIdServicesRedmineRequest.prototype['project_url'] = undefined;

/**
 * The issues URL
 * @member {String} issues_url
 */
PutV3ProjectsIdServicesRedmineRequest.prototype['issues_url'] = undefined;

/**
 * The description of the tracker
 * @member {String} description
 */
PutV3ProjectsIdServicesRedmineRequest.prototype['description'] = undefined;

/**
 * Event will be triggered by a push to the repository
 * @member {String} push_events
 */
PutV3ProjectsIdServicesRedmineRequest.prototype['push_events'] = undefined;






export default PutV3ProjectsIdServicesRedmineRequest;

