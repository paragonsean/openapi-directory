/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectHook model module.
 * @module model/ProjectHook
 * @version v3
 */
class ProjectHook {
    /**
     * Constructs a new <code>ProjectHook</code>.
     * Deletes project hook
     * @alias module:model/ProjectHook
     */
    constructor() { 
        
        ProjectHook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectHook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectHook} obj Optional instance to populate.
     * @return {module:model/ProjectHook} The populated <code>ProjectHook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectHook();

            if (data.hasOwnProperty('build_events')) {
                obj['build_events'] = ApiClient.convertToType(data['build_events'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('enable_ssl_verification')) {
                obj['enable_ssl_verification'] = ApiClient.convertToType(data['enable_ssl_verification'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issues_events')) {
                obj['issues_events'] = ApiClient.convertToType(data['issues_events'], 'String');
            }
            if (data.hasOwnProperty('merge_requests_events')) {
                obj['merge_requests_events'] = ApiClient.convertToType(data['merge_requests_events'], 'String');
            }
            if (data.hasOwnProperty('note_events')) {
                obj['note_events'] = ApiClient.convertToType(data['note_events'], 'String');
            }
            if (data.hasOwnProperty('pipeline_events')) {
                obj['pipeline_events'] = ApiClient.convertToType(data['pipeline_events'], 'String');
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
            if (data.hasOwnProperty('tag_push_events')) {
                obj['tag_push_events'] = ApiClient.convertToType(data['tag_push_events'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('wiki_page_events')) {
                obj['wiki_page_events'] = ApiClient.convertToType(data['wiki_page_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectHook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectHook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['build_events'] && !(typeof data['build_events'] === 'string' || data['build_events'] instanceof String)) {
            throw new Error("Expected the field `build_events` to be a primitive type in the JSON string but got " + data['build_events']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['enable_ssl_verification'] && !(typeof data['enable_ssl_verification'] === 'string' || data['enable_ssl_verification'] instanceof String)) {
            throw new Error("Expected the field `enable_ssl_verification` to be a primitive type in the JSON string but got " + data['enable_ssl_verification']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issues_events'] && !(typeof data['issues_events'] === 'string' || data['issues_events'] instanceof String)) {
            throw new Error("Expected the field `issues_events` to be a primitive type in the JSON string but got " + data['issues_events']);
        }
        // ensure the json data is a string
        if (data['merge_requests_events'] && !(typeof data['merge_requests_events'] === 'string' || data['merge_requests_events'] instanceof String)) {
            throw new Error("Expected the field `merge_requests_events` to be a primitive type in the JSON string but got " + data['merge_requests_events']);
        }
        // ensure the json data is a string
        if (data['note_events'] && !(typeof data['note_events'] === 'string' || data['note_events'] instanceof String)) {
            throw new Error("Expected the field `note_events` to be a primitive type in the JSON string but got " + data['note_events']);
        }
        // ensure the json data is a string
        if (data['pipeline_events'] && !(typeof data['pipeline_events'] === 'string' || data['pipeline_events'] instanceof String)) {
            throw new Error("Expected the field `pipeline_events` to be a primitive type in the JSON string but got " + data['pipeline_events']);
        }
        // ensure the json data is a string
        if (data['project_id'] && !(typeof data['project_id'] === 'string' || data['project_id'] instanceof String)) {
            throw new Error("Expected the field `project_id` to be a primitive type in the JSON string but got " + data['project_id']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }
        // ensure the json data is a string
        if (data['tag_push_events'] && !(typeof data['tag_push_events'] === 'string' || data['tag_push_events'] instanceof String)) {
            throw new Error("Expected the field `tag_push_events` to be a primitive type in the JSON string but got " + data['tag_push_events']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['wiki_page_events'] && !(typeof data['wiki_page_events'] === 'string' || data['wiki_page_events'] instanceof String)) {
            throw new Error("Expected the field `wiki_page_events` to be a primitive type in the JSON string but got " + data['wiki_page_events']);
        }

        return true;
    }


}



/**
 * @member {String} build_events
 */
ProjectHook.prototype['build_events'] = undefined;

/**
 * @member {String} created_at
 */
ProjectHook.prototype['created_at'] = undefined;

/**
 * @member {String} enable_ssl_verification
 */
ProjectHook.prototype['enable_ssl_verification'] = undefined;

/**
 * @member {String} id
 */
ProjectHook.prototype['id'] = undefined;

/**
 * @member {String} issues_events
 */
ProjectHook.prototype['issues_events'] = undefined;

/**
 * @member {String} merge_requests_events
 */
ProjectHook.prototype['merge_requests_events'] = undefined;

/**
 * @member {String} note_events
 */
ProjectHook.prototype['note_events'] = undefined;

/**
 * @member {String} pipeline_events
 */
ProjectHook.prototype['pipeline_events'] = undefined;

/**
 * @member {String} project_id
 */
ProjectHook.prototype['project_id'] = undefined;

/**
 * @member {String} push_events
 */
ProjectHook.prototype['push_events'] = undefined;

/**
 * @member {String} tag_push_events
 */
ProjectHook.prototype['tag_push_events'] = undefined;

/**
 * @member {String} url
 */
ProjectHook.prototype['url'] = undefined;

/**
 * @member {String} wiki_page_events
 */
ProjectHook.prototype['wiki_page_events'] = undefined;






export default ProjectHook;

