/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicProjectDetails from './BasicProjectDetails';
import UserBasic from './UserBasic';

/**
 * The Todo model module.
 * @module model/Todo
 * @version v3
 */
class Todo {
    /**
     * Constructs a new <code>Todo</code>.
     * Mark a todo as done
     * @alias module:model/Todo
     */
    constructor() { 
        
        Todo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Todo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Todo} obj Optional instance to populate.
     * @return {module:model/Todo} The populated <code>Todo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Todo();

            if (data.hasOwnProperty('action_name')) {
                obj['action_name'] = ApiClient.convertToType(data['action_name'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = BasicProjectDetails.constructFromObject(data['project']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], 'String');
            }
            if (data.hasOwnProperty('target_type')) {
                obj['target_type'] = ApiClient.convertToType(data['target_type'], 'String');
            }
            if (data.hasOwnProperty('target_url')) {
                obj['target_url'] = ApiClient.convertToType(data['target_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Todo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Todo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action_name'] && !(typeof data['action_name'] === 'string' || data['action_name'] instanceof String)) {
            throw new Error("Expected the field `action_name` to be a primitive type in the JSON string but got " + data['action_name']);
        }
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserBasic.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `project`
        if (data['project']) { // data not null
          BasicProjectDetails.validateJSON(data['project']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['target'] && !(typeof data['target'] === 'string' || data['target'] instanceof String)) {
            throw new Error("Expected the field `target` to be a primitive type in the JSON string but got " + data['target']);
        }
        // ensure the json data is a string
        if (data['target_type'] && !(typeof data['target_type'] === 'string' || data['target_type'] instanceof String)) {
            throw new Error("Expected the field `target_type` to be a primitive type in the JSON string but got " + data['target_type']);
        }
        // ensure the json data is a string
        if (data['target_url'] && !(typeof data['target_url'] === 'string' || data['target_url'] instanceof String)) {
            throw new Error("Expected the field `target_url` to be a primitive type in the JSON string but got " + data['target_url']);
        }

        return true;
    }


}



/**
 * @member {String} action_name
 */
Todo.prototype['action_name'] = undefined;

/**
 * @member {module:model/UserBasic} author
 */
Todo.prototype['author'] = undefined;

/**
 * @member {String} body
 */
Todo.prototype['body'] = undefined;

/**
 * @member {String} created_at
 */
Todo.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
Todo.prototype['id'] = undefined;

/**
 * @member {module:model/BasicProjectDetails} project
 */
Todo.prototype['project'] = undefined;

/**
 * @member {String} state
 */
Todo.prototype['state'] = undefined;

/**
 * @member {String} target
 */
Todo.prototype['target'] = undefined;

/**
 * @member {String} target_type
 */
Todo.prototype['target_type'] = undefined;

/**
 * @member {String} target_url
 */
Todo.prototype['target_url'] = undefined;






export default Todo;

