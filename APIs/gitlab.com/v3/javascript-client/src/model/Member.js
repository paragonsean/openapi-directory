/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Member model module.
 * @module model/Member
 * @version v3
 */
class Member {
    /**
     * Constructs a new <code>Member</code>.
     * Updates a member of a group or project.
     * @alias module:model/Member
     */
    constructor() { 
        
        Member.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Member</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Member} obj Optional instance to populate.
     * @return {module:model/Member} The populated <code>Member</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Member();

            if (data.hasOwnProperty('access_level')) {
                obj['access_level'] = ApiClient.convertToType(data['access_level'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('expires_at')) {
                obj['expires_at'] = ApiClient.convertToType(data['expires_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('web_url')) {
                obj['web_url'] = ApiClient.convertToType(data['web_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Member</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Member</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['access_level'] && !(typeof data['access_level'] === 'string' || data['access_level'] instanceof String)) {
            throw new Error("Expected the field `access_level` to be a primitive type in the JSON string but got " + data['access_level']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['expires_at'] && !(typeof data['expires_at'] === 'string' || data['expires_at'] instanceof String)) {
            throw new Error("Expected the field `expires_at` to be a primitive type in the JSON string but got " + data['expires_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['web_url'] && !(typeof data['web_url'] === 'string' || data['web_url'] instanceof String)) {
            throw new Error("Expected the field `web_url` to be a primitive type in the JSON string but got " + data['web_url']);
        }

        return true;
    }


}



/**
 * @member {String} access_level
 */
Member.prototype['access_level'] = undefined;

/**
 * @member {String} avatar_url
 */
Member.prototype['avatar_url'] = undefined;

/**
 * @member {String} expires_at
 */
Member.prototype['expires_at'] = undefined;

/**
 * @member {String} id
 */
Member.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Member.prototype['name'] = undefined;

/**
 * @member {String} state
 */
Member.prototype['state'] = undefined;

/**
 * @member {String} username
 */
Member.prototype['username'] = undefined;

/**
 * @member {String} web_url
 */
Member.prototype['web_url'] = undefined;






export default Member;

