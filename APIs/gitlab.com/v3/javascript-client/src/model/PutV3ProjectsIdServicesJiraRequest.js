/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesJiraRequest model module.
 * @module model/PutV3ProjectsIdServicesJiraRequest
 * @version v3
 */
class PutV3ProjectsIdServicesJiraRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesJiraRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesJiraRequest
     * @param url {String} The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com
     * @param projectKey {String} The short identifier for your JIRA project, all uppercase, e.g., PROJ
     */
    constructor(url, projectKey) { 
        
        PutV3ProjectsIdServicesJiraRequest.initialize(this, url, projectKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url, projectKey) { 
        obj['url'] = url;
        obj['project_key'] = projectKey;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesJiraRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesJiraRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesJiraRequest} The populated <code>PutV3ProjectsIdServicesJiraRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesJiraRequest();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('project_key')) {
                obj['project_key'] = ApiClient.convertToType(data['project_key'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('jira_issue_transition_id')) {
                obj['jira_issue_transition_id'] = ApiClient.convertToType(data['jira_issue_transition_id'], 'Number');
            }
            if (data.hasOwnProperty('commit_events')) {
                obj['commit_events'] = ApiClient.convertToType(data['commit_events'], 'String');
            }
            if (data.hasOwnProperty('merge_request_events')) {
                obj['merge_request_events'] = ApiClient.convertToType(data['merge_request_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesJiraRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesJiraRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesJiraRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['project_key'] && !(typeof data['project_key'] === 'string' || data['project_key'] instanceof String)) {
            throw new Error("Expected the field `project_key` to be a primitive type in the JSON string but got " + data['project_key']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['commit_events'] && !(typeof data['commit_events'] === 'string' || data['commit_events'] instanceof String)) {
            throw new Error("Expected the field `commit_events` to be a primitive type in the JSON string but got " + data['commit_events']);
        }
        // ensure the json data is a string
        if (data['merge_request_events'] && !(typeof data['merge_request_events'] === 'string' || data['merge_request_events'] instanceof String)) {
            throw new Error("Expected the field `merge_request_events` to be a primitive type in the JSON string but got " + data['merge_request_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesJiraRequest.RequiredProperties = ["url", "project_key"];

/**
 * The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com
 * @member {String} url
 */
PutV3ProjectsIdServicesJiraRequest.prototype['url'] = undefined;

/**
 * The short identifier for your JIRA project, all uppercase, e.g., PROJ
 * @member {String} project_key
 */
PutV3ProjectsIdServicesJiraRequest.prototype['project_key'] = undefined;

/**
 * The username of the user created to be used with GitLab/JIRA
 * @member {String} username
 */
PutV3ProjectsIdServicesJiraRequest.prototype['username'] = undefined;

/**
 * The password of the user created to be used with GitLab/JIRA
 * @member {String} password
 */
PutV3ProjectsIdServicesJiraRequest.prototype['password'] = undefined;

/**
 * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration > Issues > Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to `2`
 * @member {Number} jira_issue_transition_id
 */
PutV3ProjectsIdServicesJiraRequest.prototype['jira_issue_transition_id'] = undefined;

/**
 * Event will be triggered when a commit is created/updated
 * @member {String} commit_events
 */
PutV3ProjectsIdServicesJiraRequest.prototype['commit_events'] = undefined;

/**
 * Event will be triggered when a merge request is created/updated/merged
 * @member {String} merge_request_events
 */
PutV3ProjectsIdServicesJiraRequest.prototype['merge_request_events'] = undefined;






export default PutV3ProjectsIdServicesJiraRequest;

