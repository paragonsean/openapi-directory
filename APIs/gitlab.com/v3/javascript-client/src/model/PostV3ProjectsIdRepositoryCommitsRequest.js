/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostV3ProjectsIdRepositoryCommitsRequest model module.
 * @module model/PostV3ProjectsIdRepositoryCommitsRequest
 * @version v3
 */
class PostV3ProjectsIdRepositoryCommitsRequest {
    /**
     * Constructs a new <code>PostV3ProjectsIdRepositoryCommitsRequest</code>.
     * @alias module:model/PostV3ProjectsIdRepositoryCommitsRequest
     * @param branchName {String} The name of branch
     * @param commitMessage {String} Commit message
     * @param actions {Array.<Object>} Actions to perform in commit
     */
    constructor(branchName, commitMessage, actions) { 
        
        PostV3ProjectsIdRepositoryCommitsRequest.initialize(this, branchName, commitMessage, actions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, branchName, commitMessage, actions) { 
        obj['branch_name'] = branchName;
        obj['commit_message'] = commitMessage;
        obj['actions'] = actions;
    }

    /**
     * Constructs a <code>PostV3ProjectsIdRepositoryCommitsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostV3ProjectsIdRepositoryCommitsRequest} obj Optional instance to populate.
     * @return {module:model/PostV3ProjectsIdRepositoryCommitsRequest} The populated <code>PostV3ProjectsIdRepositoryCommitsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostV3ProjectsIdRepositoryCommitsRequest();

            if (data.hasOwnProperty('branch_name')) {
                obj['branch_name'] = ApiClient.convertToType(data['branch_name'], 'String');
            }
            if (data.hasOwnProperty('commit_message')) {
                obj['commit_message'] = ApiClient.convertToType(data['commit_message'], 'String');
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [Object]);
            }
            if (data.hasOwnProperty('author_email')) {
                obj['author_email'] = ApiClient.convertToType(data['author_email'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostV3ProjectsIdRepositoryCommitsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostV3ProjectsIdRepositoryCommitsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostV3ProjectsIdRepositoryCommitsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['branch_name'] && !(typeof data['branch_name'] === 'string' || data['branch_name'] instanceof String)) {
            throw new Error("Expected the field `branch_name` to be a primitive type in the JSON string but got " + data['branch_name']);
        }
        // ensure the json data is a string
        if (data['commit_message'] && !(typeof data['commit_message'] === 'string' || data['commit_message'] instanceof String)) {
            throw new Error("Expected the field `commit_message` to be a primitive type in the JSON string but got " + data['commit_message']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is a string
        if (data['author_email'] && !(typeof data['author_email'] === 'string' || data['author_email'] instanceof String)) {
            throw new Error("Expected the field `author_email` to be a primitive type in the JSON string but got " + data['author_email']);
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }

        return true;
    }


}

PostV3ProjectsIdRepositoryCommitsRequest.RequiredProperties = ["branch_name", "commit_message", "actions"];

/**
 * The name of branch
 * @member {String} branch_name
 */
PostV3ProjectsIdRepositoryCommitsRequest.prototype['branch_name'] = undefined;

/**
 * Commit message
 * @member {String} commit_message
 */
PostV3ProjectsIdRepositoryCommitsRequest.prototype['commit_message'] = undefined;

/**
 * Actions to perform in commit
 * @member {Array.<Object>} actions
 */
PostV3ProjectsIdRepositoryCommitsRequest.prototype['actions'] = undefined;

/**
 * Author email for commit
 * @member {String} author_email
 */
PostV3ProjectsIdRepositoryCommitsRequest.prototype['author_email'] = undefined;

/**
 * Author name for commit
 * @member {String} author_name
 */
PostV3ProjectsIdRepositoryCommitsRequest.prototype['author_name'] = undefined;






export default PostV3ProjectsIdRepositoryCommitsRequest;

