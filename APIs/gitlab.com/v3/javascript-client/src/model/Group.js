/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Group model module.
 * @module model/Group
 * @version v3
 */
class Group {
    /**
     * Constructs a new <code>Group</code>.
     * Update a group. Available only for users who can administrate groups.
     * @alias module:model/Group
     */
    constructor() { 
        
        Group.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Group</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Group} obj Optional instance to populate.
     * @return {module:model/Group} The populated <code>Group</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Group();

            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lfs_enabled')) {
                obj['lfs_enabled'] = ApiClient.convertToType(data['lfs_enabled'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('request_access_enabled')) {
                obj['request_access_enabled'] = ApiClient.convertToType(data['request_access_enabled'], 'String');
            }
            if (data.hasOwnProperty('statistics')) {
                obj['statistics'] = ApiClient.convertToType(data['statistics'], 'String');
            }
            if (data.hasOwnProperty('visibility_level')) {
                obj['visibility_level'] = ApiClient.convertToType(data['visibility_level'], 'String');
            }
            if (data.hasOwnProperty('web_url')) {
                obj['web_url'] = ApiClient.convertToType(data['web_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Group</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Group</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['lfs_enabled'] && !(typeof data['lfs_enabled'] === 'string' || data['lfs_enabled'] instanceof String)) {
            throw new Error("Expected the field `lfs_enabled` to be a primitive type in the JSON string but got " + data['lfs_enabled']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['request_access_enabled'] && !(typeof data['request_access_enabled'] === 'string' || data['request_access_enabled'] instanceof String)) {
            throw new Error("Expected the field `request_access_enabled` to be a primitive type in the JSON string but got " + data['request_access_enabled']);
        }
        // ensure the json data is a string
        if (data['statistics'] && !(typeof data['statistics'] === 'string' || data['statistics'] instanceof String)) {
            throw new Error("Expected the field `statistics` to be a primitive type in the JSON string but got " + data['statistics']);
        }
        // ensure the json data is a string
        if (data['visibility_level'] && !(typeof data['visibility_level'] === 'string' || data['visibility_level'] instanceof String)) {
            throw new Error("Expected the field `visibility_level` to be a primitive type in the JSON string but got " + data['visibility_level']);
        }
        // ensure the json data is a string
        if (data['web_url'] && !(typeof data['web_url'] === 'string' || data['web_url'] instanceof String)) {
            throw new Error("Expected the field `web_url` to be a primitive type in the JSON string but got " + data['web_url']);
        }

        return true;
    }


}



/**
 * @member {String} avatar_url
 */
Group.prototype['avatar_url'] = undefined;

/**
 * @member {String} description
 */
Group.prototype['description'] = undefined;

/**
 * @member {String} id
 */
Group.prototype['id'] = undefined;

/**
 * @member {String} lfs_enabled
 */
Group.prototype['lfs_enabled'] = undefined;

/**
 * @member {String} name
 */
Group.prototype['name'] = undefined;

/**
 * @member {String} path
 */
Group.prototype['path'] = undefined;

/**
 * @member {String} request_access_enabled
 */
Group.prototype['request_access_enabled'] = undefined;

/**
 * @member {String} statistics
 */
Group.prototype['statistics'] = undefined;

/**
 * @member {String} visibility_level
 */
Group.prototype['visibility_level'] = undefined;

/**
 * @member {String} web_url
 */
Group.prototype['web_url'] = undefined;






export default Group;

