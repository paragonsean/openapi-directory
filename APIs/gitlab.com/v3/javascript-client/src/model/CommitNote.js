/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserBasic from './UserBasic';

/**
 * The CommitNote model module.
 * @module model/CommitNote
 * @version v3
 */
class CommitNote {
    /**
     * Constructs a new <code>CommitNote</code>.
     * Post comment to commit
     * @alias module:model/CommitNote
     */
    constructor() { 
        
        CommitNote.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommitNote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommitNote} obj Optional instance to populate.
     * @return {module:model/CommitNote} The populated <code>CommitNote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommitNote();

            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'String');
            }
            if (data.hasOwnProperty('line_type')) {
                obj['line_type'] = ApiClient.convertToType(data['line_type'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommitNote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommitNote</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          UserBasic.validateJSON(data['author']);
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['line'] && !(typeof data['line'] === 'string' || data['line'] instanceof String)) {
            throw new Error("Expected the field `line` to be a primitive type in the JSON string but got " + data['line']);
        }
        // ensure the json data is a string
        if (data['line_type'] && !(typeof data['line_type'] === 'string' || data['line_type'] instanceof String)) {
            throw new Error("Expected the field `line_type` to be a primitive type in the JSON string but got " + data['line_type']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }

        return true;
    }


}



/**
 * @member {module:model/UserBasic} author
 */
CommitNote.prototype['author'] = undefined;

/**
 * @member {String} created_at
 */
CommitNote.prototype['created_at'] = undefined;

/**
 * @member {String} line
 */
CommitNote.prototype['line'] = undefined;

/**
 * @member {String} line_type
 */
CommitNote.prototype['line_type'] = undefined;

/**
 * @member {String} note
 */
CommitNote.prototype['note'] = undefined;

/**
 * @member {String} path
 */
CommitNote.prototype['path'] = undefined;






export default CommitNote;

