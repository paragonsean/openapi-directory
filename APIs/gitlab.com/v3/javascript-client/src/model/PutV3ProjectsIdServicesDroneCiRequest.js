/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdServicesDroneCiRequest model module.
 * @module model/PutV3ProjectsIdServicesDroneCiRequest
 * @version v3
 */
class PutV3ProjectsIdServicesDroneCiRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdServicesDroneCiRequest</code>.
     * @alias module:model/PutV3ProjectsIdServicesDroneCiRequest
     * @param token {String} Drone CI token
     * @param droneUrl {String} Drone CI URL
     */
    constructor(token, droneUrl) { 
        
        PutV3ProjectsIdServicesDroneCiRequest.initialize(this, token, droneUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, token, droneUrl) { 
        obj['token'] = token;
        obj['drone_url'] = droneUrl;
    }

    /**
     * Constructs a <code>PutV3ProjectsIdServicesDroneCiRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdServicesDroneCiRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdServicesDroneCiRequest} The populated <code>PutV3ProjectsIdServicesDroneCiRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdServicesDroneCiRequest();

            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('drone_url')) {
                obj['drone_url'] = ApiClient.convertToType(data['drone_url'], 'String');
            }
            if (data.hasOwnProperty('enable_ssl_verification')) {
                obj['enable_ssl_verification'] = ApiClient.convertToType(data['enable_ssl_verification'], 'Boolean');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'String');
            }
            if (data.hasOwnProperty('merge_request_events')) {
                obj['merge_request_events'] = ApiClient.convertToType(data['merge_request_events'], 'String');
            }
            if (data.hasOwnProperty('tag_push_events')) {
                obj['tag_push_events'] = ApiClient.convertToType(data['tag_push_events'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdServicesDroneCiRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdServicesDroneCiRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutV3ProjectsIdServicesDroneCiRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['drone_url'] && !(typeof data['drone_url'] === 'string' || data['drone_url'] instanceof String)) {
            throw new Error("Expected the field `drone_url` to be a primitive type in the JSON string but got " + data['drone_url']);
        }
        // ensure the json data is a string
        if (data['push_events'] && !(typeof data['push_events'] === 'string' || data['push_events'] instanceof String)) {
            throw new Error("Expected the field `push_events` to be a primitive type in the JSON string but got " + data['push_events']);
        }
        // ensure the json data is a string
        if (data['merge_request_events'] && !(typeof data['merge_request_events'] === 'string' || data['merge_request_events'] instanceof String)) {
            throw new Error("Expected the field `merge_request_events` to be a primitive type in the JSON string but got " + data['merge_request_events']);
        }
        // ensure the json data is a string
        if (data['tag_push_events'] && !(typeof data['tag_push_events'] === 'string' || data['tag_push_events'] instanceof String)) {
            throw new Error("Expected the field `tag_push_events` to be a primitive type in the JSON string but got " + data['tag_push_events']);
        }

        return true;
    }


}

PutV3ProjectsIdServicesDroneCiRequest.RequiredProperties = ["token", "drone_url"];

/**
 * Drone CI token
 * @member {String} token
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['token'] = undefined;

/**
 * Drone CI URL
 * @member {String} drone_url
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['drone_url'] = undefined;

/**
 * Enable SSL verification for communication
 * @member {Boolean} enable_ssl_verification
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['enable_ssl_verification'] = undefined;

/**
 * Event will be triggered by a push to the repository
 * @member {String} push_events
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['push_events'] = undefined;

/**
 * Event will be triggered when a merge request is created/updated/merged
 * @member {String} merge_request_events
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['merge_request_events'] = undefined;

/**
 * Event will be triggered when a new tag is pushed to the repository
 * @member {String} tag_push_events
 */
PutV3ProjectsIdServicesDroneCiRequest.prototype['tag_push_events'] = undefined;






export default PutV3ProjectsIdServicesDroneCiRequest;

