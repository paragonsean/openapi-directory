/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdRequest model module.
 * @module model/PutV3ProjectsIdRequest
 * @version v3
 */
class PutV3ProjectsIdRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdRequest</code>.
     * @alias module:model/PutV3ProjectsIdRequest
     */
    constructor() { 
        
        PutV3ProjectsIdRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutV3ProjectsIdRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdRequest} The populated <code>PutV3ProjectsIdRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('default_branch')) {
                obj['default_branch'] = ApiClient.convertToType(data['default_branch'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('issues_enabled')) {
                obj['issues_enabled'] = ApiClient.convertToType(data['issues_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('merge_requests_enabled')) {
                obj['merge_requests_enabled'] = ApiClient.convertToType(data['merge_requests_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('wiki_enabled')) {
                obj['wiki_enabled'] = ApiClient.convertToType(data['wiki_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('builds_enabled')) {
                obj['builds_enabled'] = ApiClient.convertToType(data['builds_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('snippets_enabled')) {
                obj['snippets_enabled'] = ApiClient.convertToType(data['snippets_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('shared_runners_enabled')) {
                obj['shared_runners_enabled'] = ApiClient.convertToType(data['shared_runners_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('container_registry_enabled')) {
                obj['container_registry_enabled'] = ApiClient.convertToType(data['container_registry_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('lfs_enabled')) {
                obj['lfs_enabled'] = ApiClient.convertToType(data['lfs_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('visibility_level')) {
                obj['visibility_level'] = ApiClient.convertToType(data['visibility_level'], 'Number');
            }
            if (data.hasOwnProperty('public_builds')) {
                obj['public_builds'] = ApiClient.convertToType(data['public_builds'], 'Boolean');
            }
            if (data.hasOwnProperty('request_access_enabled')) {
                obj['request_access_enabled'] = ApiClient.convertToType(data['request_access_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('only_allow_merge_if_build_succeeds')) {
                obj['only_allow_merge_if_build_succeeds'] = ApiClient.convertToType(data['only_allow_merge_if_build_succeeds'], 'Boolean');
            }
            if (data.hasOwnProperty('only_allow_merge_if_all_discussions_are_resolved')) {
                obj['only_allow_merge_if_all_discussions_are_resolved'] = ApiClient.convertToType(data['only_allow_merge_if_all_discussions_are_resolved'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['default_branch'] && !(typeof data['default_branch'] === 'string' || data['default_branch'] instanceof String)) {
            throw new Error("Expected the field `default_branch` to be a primitive type in the JSON string but got " + data['default_branch']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * The name of the project
 * @member {String} name
 */
PutV3ProjectsIdRequest.prototype['name'] = undefined;

/**
 * The default branch of the project
 * @member {String} default_branch
 */
PutV3ProjectsIdRequest.prototype['default_branch'] = undefined;

/**
 * The path of the repository
 * @member {String} path
 */
PutV3ProjectsIdRequest.prototype['path'] = undefined;

/**
 * The description of the project
 * @member {String} description
 */
PutV3ProjectsIdRequest.prototype['description'] = undefined;

/**
 * Flag indication if the issue tracker is enabled
 * @member {Boolean} issues_enabled
 */
PutV3ProjectsIdRequest.prototype['issues_enabled'] = undefined;

/**
 * Flag indication if merge requests are enabled
 * @member {Boolean} merge_requests_enabled
 */
PutV3ProjectsIdRequest.prototype['merge_requests_enabled'] = undefined;

/**
 * Flag indication if the wiki is enabled
 * @member {Boolean} wiki_enabled
 */
PutV3ProjectsIdRequest.prototype['wiki_enabled'] = undefined;

/**
 * Flag indication if builds are enabled
 * @member {Boolean} builds_enabled
 */
PutV3ProjectsIdRequest.prototype['builds_enabled'] = undefined;

/**
 * Flag indication if snippets are enabled
 * @member {Boolean} snippets_enabled
 */
PutV3ProjectsIdRequest.prototype['snippets_enabled'] = undefined;

/**
 * Flag indication if shared runners are enabled for that project
 * @member {Boolean} shared_runners_enabled
 */
PutV3ProjectsIdRequest.prototype['shared_runners_enabled'] = undefined;

/**
 * Flag indication if the container registry is enabled for that project
 * @member {Boolean} container_registry_enabled
 */
PutV3ProjectsIdRequest.prototype['container_registry_enabled'] = undefined;

/**
 * Flag indication if Git LFS is enabled for that project
 * @member {Boolean} lfs_enabled
 */
PutV3ProjectsIdRequest.prototype['lfs_enabled'] = undefined;

/**
 * Create a public project. The same as visibility_level = 20.
 * @member {Boolean} public
 */
PutV3ProjectsIdRequest.prototype['public'] = undefined;

/**
 * Create a public project. The same as visibility_level = 20.
 * @member {module:model/PutV3ProjectsIdRequest.VisibilityLevelEnum} visibility_level
 */
PutV3ProjectsIdRequest.prototype['visibility_level'] = undefined;

/**
 * Perform public builds
 * @member {Boolean} public_builds
 */
PutV3ProjectsIdRequest.prototype['public_builds'] = undefined;

/**
 * Allow users to request member access
 * @member {Boolean} request_access_enabled
 */
PutV3ProjectsIdRequest.prototype['request_access_enabled'] = undefined;

/**
 * Only allow to merge if builds succeed
 * @member {Boolean} only_allow_merge_if_build_succeeds
 */
PutV3ProjectsIdRequest.prototype['only_allow_merge_if_build_succeeds'] = undefined;

/**
 * Only allow to merge if all discussions are resolved
 * @member {Boolean} only_allow_merge_if_all_discussions_are_resolved
 */
PutV3ProjectsIdRequest.prototype['only_allow_merge_if_all_discussions_are_resolved'] = undefined;





/**
 * Allowed values for the <code>visibility_level</code> property.
 * @enum {Number}
 * @readonly
 */
PutV3ProjectsIdRequest['VisibilityLevelEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 10
     * @const
     */
    "10": 10,

    /**
     * value: 20
     * @const
     */
    "20": 20
};



export default PutV3ProjectsIdRequest;

