/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostV3HooksRequest model module.
 * @module model/PostV3HooksRequest
 * @version v3
 */
class PostV3HooksRequest {
    /**
     * Constructs a new <code>PostV3HooksRequest</code>.
     * @alias module:model/PostV3HooksRequest
     * @param url {String} The URL to send the request to
     */
    constructor(url) { 
        
        PostV3HooksRequest.initialize(this, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, url) { 
        obj['url'] = url;
    }

    /**
     * Constructs a <code>PostV3HooksRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostV3HooksRequest} obj Optional instance to populate.
     * @return {module:model/PostV3HooksRequest} The populated <code>PostV3HooksRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostV3HooksRequest();

            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('push_events')) {
                obj['push_events'] = ApiClient.convertToType(data['push_events'], 'Boolean');
            }
            if (data.hasOwnProperty('tag_push_events')) {
                obj['tag_push_events'] = ApiClient.convertToType(data['tag_push_events'], 'Boolean');
            }
            if (data.hasOwnProperty('enable_ssl_verification')) {
                obj['enable_ssl_verification'] = ApiClient.convertToType(data['enable_ssl_verification'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostV3HooksRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostV3HooksRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostV3HooksRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

PostV3HooksRequest.RequiredProperties = ["url"];

/**
 * The URL to send the request to
 * @member {String} url
 */
PostV3HooksRequest.prototype['url'] = undefined;

/**
 * The token used to validate payloads
 * @member {String} token
 */
PostV3HooksRequest.prototype['token'] = undefined;

/**
 * Trigger hook on push events
 * @member {Boolean} push_events
 */
PostV3HooksRequest.prototype['push_events'] = undefined;

/**
 * Trigger hook on tag push events
 * @member {Boolean} tag_push_events
 */
PostV3HooksRequest.prototype['tag_push_events'] = undefined;

/**
 * Do SSL verification when triggering the hook
 * @member {Boolean} enable_ssl_verification
 */
PostV3HooksRequest.prototype['enable_ssl_verification'] = undefined;






export default PostV3HooksRequest;

