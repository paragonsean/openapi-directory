/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BasicProjectDetails from './BasicProjectDetails';

/**
 * The RunnerDetails model module.
 * @module model/RunnerDetails
 * @version v3
 */
class RunnerDetails {
    /**
     * Constructs a new <code>RunnerDetails</code>.
     * Update runner&#39;s details
     * @alias module:model/RunnerDetails
     */
    constructor() { 
        
        RunnerDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RunnerDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunnerDetails} obj Optional instance to populate.
     * @return {module:model/RunnerDetails} The populated <code>RunnerDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunnerDetails();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'String');
            }
            if (data.hasOwnProperty('architecture')) {
                obj['architecture'] = ApiClient.convertToType(data['architecture'], 'String');
            }
            if (data.hasOwnProperty('contacted_at')) {
                obj['contacted_at'] = ApiClient.convertToType(data['contacted_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_shared')) {
                obj['is_shared'] = ApiClient.convertToType(data['is_shared'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = BasicProjectDetails.constructFromObject(data['projects']);
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'String');
            }
            if (data.hasOwnProperty('run_untagged')) {
                obj['run_untagged'] = ApiClient.convertToType(data['run_untagged'], 'String');
            }
            if (data.hasOwnProperty('tag_list')) {
                obj['tag_list'] = ApiClient.convertToType(data['tag_list'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunnerDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunnerDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['active'] && !(typeof data['active'] === 'string' || data['active'] instanceof String)) {
            throw new Error("Expected the field `active` to be a primitive type in the JSON string but got " + data['active']);
        }
        // ensure the json data is a string
        if (data['architecture'] && !(typeof data['architecture'] === 'string' || data['architecture'] instanceof String)) {
            throw new Error("Expected the field `architecture` to be a primitive type in the JSON string but got " + data['architecture']);
        }
        // ensure the json data is a string
        if (data['contacted_at'] && !(typeof data['contacted_at'] === 'string' || data['contacted_at'] instanceof String)) {
            throw new Error("Expected the field `contacted_at` to be a primitive type in the JSON string but got " + data['contacted_at']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['is_shared'] && !(typeof data['is_shared'] === 'string' || data['is_shared'] instanceof String)) {
            throw new Error("Expected the field `is_shared` to be a primitive type in the JSON string but got " + data['is_shared']);
        }
        // ensure the json data is a string
        if (data['locked'] && !(typeof data['locked'] === 'string' || data['locked'] instanceof String)) {
            throw new Error("Expected the field `locked` to be a primitive type in the JSON string but got " + data['locked']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // validate the optional field `projects`
        if (data['projects']) { // data not null
          BasicProjectDetails.validateJSON(data['projects']);
        }
        // ensure the json data is a string
        if (data['revision'] && !(typeof data['revision'] === 'string' || data['revision'] instanceof String)) {
            throw new Error("Expected the field `revision` to be a primitive type in the JSON string but got " + data['revision']);
        }
        // ensure the json data is a string
        if (data['run_untagged'] && !(typeof data['run_untagged'] === 'string' || data['run_untagged'] instanceof String)) {
            throw new Error("Expected the field `run_untagged` to be a primitive type in the JSON string but got " + data['run_untagged']);
        }
        // ensure the json data is a string
        if (data['tag_list'] && !(typeof data['tag_list'] === 'string' || data['tag_list'] instanceof String)) {
            throw new Error("Expected the field `tag_list` to be a primitive type in the JSON string but got " + data['tag_list']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {String} active
 */
RunnerDetails.prototype['active'] = undefined;

/**
 * @member {String} architecture
 */
RunnerDetails.prototype['architecture'] = undefined;

/**
 * @member {String} contacted_at
 */
RunnerDetails.prototype['contacted_at'] = undefined;

/**
 * @member {String} description
 */
RunnerDetails.prototype['description'] = undefined;

/**
 * @member {String} id
 */
RunnerDetails.prototype['id'] = undefined;

/**
 * @member {String} is_shared
 */
RunnerDetails.prototype['is_shared'] = undefined;

/**
 * @member {String} locked
 */
RunnerDetails.prototype['locked'] = undefined;

/**
 * @member {String} name
 */
RunnerDetails.prototype['name'] = undefined;

/**
 * @member {String} platform
 */
RunnerDetails.prototype['platform'] = undefined;

/**
 * @member {module:model/BasicProjectDetails} projects
 */
RunnerDetails.prototype['projects'] = undefined;

/**
 * @member {String} revision
 */
RunnerDetails.prototype['revision'] = undefined;

/**
 * @member {String} run_untagged
 */
RunnerDetails.prototype['run_untagged'] = undefined;

/**
 * @member {String} tag_list
 */
RunnerDetails.prototype['tag_list'] = undefined;

/**
 * @member {String} token
 */
RunnerDetails.prototype['token'] = undefined;

/**
 * @member {String} version
 */
RunnerDetails.prototype['version'] = undefined;






export default RunnerDetails;

