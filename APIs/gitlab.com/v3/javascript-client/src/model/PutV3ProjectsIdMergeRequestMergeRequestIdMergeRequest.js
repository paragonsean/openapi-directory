/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest model module.
 * @module model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
 * @version v3
 */
class PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest {
    /**
     * Constructs a new <code>PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest</code>.
     * @alias module:model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest
     */
    constructor() { 
        
        PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest} obj Optional instance to populate.
     * @return {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest} The populated <code>PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest();

            if (data.hasOwnProperty('merge_commit_message')) {
                obj['merge_commit_message'] = ApiClient.convertToType(data['merge_commit_message'], 'String');
            }
            if (data.hasOwnProperty('should_remove_source_branch')) {
                obj['should_remove_source_branch'] = ApiClient.convertToType(data['should_remove_source_branch'], 'Boolean');
            }
            if (data.hasOwnProperty('merge_when_build_succeeds')) {
                obj['merge_when_build_succeeds'] = ApiClient.convertToType(data['merge_when_build_succeeds'], 'Boolean');
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['merge_commit_message'] && !(typeof data['merge_commit_message'] === 'string' || data['merge_commit_message'] instanceof String)) {
            throw new Error("Expected the field `merge_commit_message` to be a primitive type in the JSON string but got " + data['merge_commit_message']);
        }
        // ensure the json data is a string
        if (data['sha'] && !(typeof data['sha'] === 'string' || data['sha'] instanceof String)) {
            throw new Error("Expected the field `sha` to be a primitive type in the JSON string but got " + data['sha']);
        }

        return true;
    }


}



/**
 * Custom merge commit message
 * @member {String} merge_commit_message
 */
PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.prototype['merge_commit_message'] = undefined;

/**
 * When true, the source branch will be deleted if possible
 * @member {Boolean} should_remove_source_branch
 */
PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.prototype['should_remove_source_branch'] = undefined;

/**
 * When true, this merge request will be merged when the pipeline succeeds
 * @member {Boolean} merge_when_build_succeeds
 */
PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.prototype['merge_when_build_succeeds'] = undefined;

/**
 * When present, must have the HEAD SHA of the source branch
 * @member {String} sha
 */
PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest.prototype['sha'] = undefined;






export default PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest;

