/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PostV3ProjectsIdRepositoryCommitsShaCommentsRequest model module.
 * @module model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
 * @version v3
 */
class PostV3ProjectsIdRepositoryCommitsShaCommentsRequest {
    /**
     * Constructs a new <code>PostV3ProjectsIdRepositoryCommitsShaCommentsRequest</code>.
     * @alias module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest
     * @param note {String} The text of the comment
     * @param line {Number} The line number
     * @param lineType {module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.LineTypeEnum} The type of the line
     */
    constructor(note, line, lineType) { 
        
        PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.initialize(this, note, line, lineType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, note, line, lineType) { 
        obj['note'] = note;
        obj['line'] = line;
        obj['line_type'] = lineType || 'new';
    }

    /**
     * Constructs a <code>PostV3ProjectsIdRepositoryCommitsShaCommentsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest} obj Optional instance to populate.
     * @return {module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest} The populated <code>PostV3ProjectsIdRepositoryCommitsShaCommentsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostV3ProjectsIdRepositoryCommitsShaCommentsRequest();

            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('line')) {
                obj['line'] = ApiClient.convertToType(data['line'], 'Number');
            }
            if (data.hasOwnProperty('line_type')) {
                obj['line_type'] = ApiClient.convertToType(data['line_type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostV3ProjectsIdRepositoryCommitsShaCommentsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostV3ProjectsIdRepositoryCommitsShaCommentsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['line_type'] && !(typeof data['line_type'] === 'string' || data['line_type'] instanceof String)) {
            throw new Error("Expected the field `line_type` to be a primitive type in the JSON string but got " + data['line_type']);
        }

        return true;
    }


}

PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.RequiredProperties = ["note", "line", "line_type"];

/**
 * The text of the comment
 * @member {String} note
 */
PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.prototype['note'] = undefined;

/**
 * The file path
 * @member {String} path
 */
PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.prototype['path'] = undefined;

/**
 * The line number
 * @member {Number} line
 */
PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.prototype['line'] = undefined;

/**
 * The type of the line
 * @member {module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.LineTypeEnum} line_type
 * @default 'new'
 */
PostV3ProjectsIdRepositoryCommitsShaCommentsRequest.prototype['line_type'] = 'new';





/**
 * Allowed values for the <code>line_type</code> property.
 * @enum {String}
 * @readonly
 */
PostV3ProjectsIdRepositoryCommitsShaCommentsRequest['LineTypeEnum'] = {

    /**
     * value: "new"
     * @const
     */
    "new": "new",

    /**
     * value: "old"
     * @const
     */
    "old": "old"
};



export default PostV3ProjectsIdRepositoryCommitsShaCommentsRequest;

