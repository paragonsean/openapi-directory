/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GlobalNotificationSetting from '../model/GlobalNotificationSetting';
import PutV3NotificationSettingsRequest from '../model/PutV3NotificationSettingsRequest';

/**
* NotificationSettings service.
* @module api/NotificationSettingsApi
* @version v3
*/
export default class NotificationSettingsApi {

    /**
    * Constructs a new NotificationSettingsApi. 
    * @alias module:api/NotificationSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getV3NotificationSettings operation.
     * @callback module:api/NotificationSettingsApi~getV3NotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalNotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global notification level settings and email, defaults to Participate
     * This feature was introduced in GitLab 8.12
     * @param {module:api/NotificationSettingsApi~getV3NotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalNotificationSetting}
     */
    getV3NotificationSettings(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GlobalNotificationSetting;
      return this.apiClient.callApi(
        '/v3/notification_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3NotificationSettings operation.
     * @callback module:api/NotificationSettingsApi~putV3NotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GlobalNotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update global notification level settings and email, defaults to Participate
     * This feature was introduced in GitLab 8.12
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3NotificationSettingsRequest} [putV3NotificationSettingsRequest] 
     * @param {module:api/NotificationSettingsApi~putV3NotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GlobalNotificationSetting}
     */
    putV3NotificationSettings(opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3NotificationSettingsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GlobalNotificationSetting;
      return this.apiClient.callApi(
        '/v3/notification_settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
