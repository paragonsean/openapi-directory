/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessRequester from '../model/AccessRequester';
import AwardEmoji from '../model/AwardEmoji';
import BasicProjectDetails from '../model/BasicProjectDetails';
import Board from '../model/Board';
import Build from '../model/Build';
import CommitNote from '../model/CommitNote';
import CommitStatus from '../model/CommitStatus';
import Compare from '../model/Compare';
import Contributor from '../model/Contributor';
import Deployment from '../model/Deployment';
import Environment from '../model/Environment';
import Event from '../model/Event';
import Issue from '../model/Issue';
import Label from '../model/Label';
import MRNote from '../model/MRNote';
import Member from '../model/Member';
import MergeRequest from '../model/MergeRequest';
import MergeRequestChanges from '../model/MergeRequestChanges';
import MergeRequestDiff from '../model/MergeRequestDiff';
import MergeRequestDiffFull from '../model/MergeRequestDiffFull';
import Milestone from '../model/Milestone';
import Note from '../model/Note';
import NotificationSetting from '../model/NotificationSetting';
import Pipeline from '../model/Pipeline';
import PostV3GroupsIdMembersRequest from '../model/PostV3GroupsIdMembersRequest';
import PostV3ProjectsForkIdRequest from '../model/PostV3ProjectsForkIdRequest';
import PostV3ProjectsIdBoardsBoardIdListsRequest from '../model/PostV3ProjectsIdBoardsBoardIdListsRequest';
import PostV3ProjectsIdDeployKeysRequest from '../model/PostV3ProjectsIdDeployKeysRequest';
import PostV3ProjectsIdEnvironmentsRequest from '../model/PostV3ProjectsIdEnvironmentsRequest';
import PostV3ProjectsIdHooksRequest from '../model/PostV3ProjectsIdHooksRequest';
import PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest from '../model/PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest';
import PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest from '../model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest';
import PostV3ProjectsIdIssuesIssueIdMoveRequest from '../model/PostV3ProjectsIdIssuesIssueIdMoveRequest';
import PostV3ProjectsIdIssuesNoteableIdNotesRequest from '../model/PostV3ProjectsIdIssuesNoteableIdNotesRequest';
import PostV3ProjectsIdIssuesRequest from '../model/PostV3ProjectsIdIssuesRequest';
import PostV3ProjectsIdLabelsRequest from '../model/PostV3ProjectsIdLabelsRequest';
import PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest from '../model/PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest';
import PostV3ProjectsIdMergeRequestsRequest from '../model/PostV3ProjectsIdMergeRequestsRequest';
import PostV3ProjectsIdMilestonesRequest from '../model/PostV3ProjectsIdMilestonesRequest';
import PostV3ProjectsIdPipelineRequest from '../model/PostV3ProjectsIdPipelineRequest';
import PostV3ProjectsIdRefRefTriggerBuildsRequest from '../model/PostV3ProjectsIdRefRefTriggerBuildsRequest';
import PostV3ProjectsIdRepositoryBranchesRequest from '../model/PostV3ProjectsIdRepositoryBranchesRequest';
import PostV3ProjectsIdRepositoryCommitsRequest from '../model/PostV3ProjectsIdRepositoryCommitsRequest';
import PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest from '../model/PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest';
import PostV3ProjectsIdRepositoryCommitsShaCommentsRequest from '../model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest';
import PostV3ProjectsIdRepositoryTagsRequest from '../model/PostV3ProjectsIdRepositoryTagsRequest';
import PostV3ProjectsIdRunnersRequest from '../model/PostV3ProjectsIdRunnersRequest';
import PostV3ProjectsIdShareRequest from '../model/PostV3ProjectsIdShareRequest';
import PostV3ProjectsIdSnippetsRequest from '../model/PostV3ProjectsIdSnippetsRequest';
import PostV3ProjectsIdStatusesShaRequest from '../model/PostV3ProjectsIdStatusesShaRequest';
import PostV3ProjectsIdUploadsRequest from '../model/PostV3ProjectsIdUploadsRequest';
import PostV3ProjectsIdVariablesRequest from '../model/PostV3ProjectsIdVariablesRequest';
import PostV3ProjectsRequest from '../model/PostV3ProjectsRequest';
import PostV3ProjectsUserUserIdRequest from '../model/PostV3ProjectsUserUserIdRequest';
import Project from '../model/Project';
import ProjectGroupLink from '../model/ProjectGroupLink';
import ProjectHook from '../model/ProjectHook';
import ProjectService from '../model/ProjectService';
import ProjectSnippet from '../model/ProjectSnippet';
import ProjectWithAccess from '../model/ProjectWithAccess';
import PutV3GroupsIdAccessRequestsUserIdApproveRequest from '../model/PutV3GroupsIdAccessRequestsUserIdApproveRequest';
import PutV3GroupsIdMembersUserIdRequest from '../model/PutV3GroupsIdMembersUserIdRequest';
import PutV3ProjectsIdBoardsBoardIdListsListIdRequest from '../model/PutV3ProjectsIdBoardsBoardIdListsListIdRequest';
import PutV3ProjectsIdEnvironmentsEnvironmentIdRequest from '../model/PutV3ProjectsIdEnvironmentsEnvironmentIdRequest';
import PutV3ProjectsIdIssuesIssueIdRequest from '../model/PutV3ProjectsIdIssuesIssueIdRequest';
import PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest from '../model/PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest';
import PutV3ProjectsIdLabelsRequest from '../model/PutV3ProjectsIdLabelsRequest';
import PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest from '../model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest';
import PutV3ProjectsIdMergeRequestMergeRequestIdRequest from '../model/PutV3ProjectsIdMergeRequestMergeRequestIdRequest';
import PutV3ProjectsIdMilestonesMilestoneIdRequest from '../model/PutV3ProjectsIdMilestonesMilestoneIdRequest';
import PutV3ProjectsIdNotificationSettingsRequest from '../model/PutV3ProjectsIdNotificationSettingsRequest';
import PutV3ProjectsIdRepositoryBranchesBranchProtectRequest from '../model/PutV3ProjectsIdRepositoryBranchesBranchProtectRequest';
import PutV3ProjectsIdRepositoryFilesRequest from '../model/PutV3ProjectsIdRepositoryFilesRequest';
import PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest from '../model/PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest';
import PutV3ProjectsIdRequest from '../model/PutV3ProjectsIdRequest';
import PutV3ProjectsIdServicesAsanaRequest from '../model/PutV3ProjectsIdServicesAsanaRequest';
import PutV3ProjectsIdServicesAssemblaRequest from '../model/PutV3ProjectsIdServicesAssemblaRequest';
import PutV3ProjectsIdServicesBambooRequest from '../model/PutV3ProjectsIdServicesBambooRequest';
import PutV3ProjectsIdServicesBugzillaRequest from '../model/PutV3ProjectsIdServicesBugzillaRequest';
import PutV3ProjectsIdServicesBuildkiteRequest from '../model/PutV3ProjectsIdServicesBuildkiteRequest';
import PutV3ProjectsIdServicesBuildsEmailRequest from '../model/PutV3ProjectsIdServicesBuildsEmailRequest';
import PutV3ProjectsIdServicesCampfireRequest from '../model/PutV3ProjectsIdServicesCampfireRequest';
import PutV3ProjectsIdServicesDroneCiRequest from '../model/PutV3ProjectsIdServicesDroneCiRequest';
import PutV3ProjectsIdServicesEmailsOnPushRequest from '../model/PutV3ProjectsIdServicesEmailsOnPushRequest';
import PutV3ProjectsIdServicesExternalWikiRequest from '../model/PutV3ProjectsIdServicesExternalWikiRequest';
import PutV3ProjectsIdServicesFlowdockRequest from '../model/PutV3ProjectsIdServicesFlowdockRequest';
import PutV3ProjectsIdServicesGemnasiumRequest from '../model/PutV3ProjectsIdServicesGemnasiumRequest';
import PutV3ProjectsIdServicesHipchatRequest from '../model/PutV3ProjectsIdServicesHipchatRequest';
import PutV3ProjectsIdServicesIrkerRequest from '../model/PutV3ProjectsIdServicesIrkerRequest';
import PutV3ProjectsIdServicesJiraRequest from '../model/PutV3ProjectsIdServicesJiraRequest';
import PutV3ProjectsIdServicesKubernetesRequest from '../model/PutV3ProjectsIdServicesKubernetesRequest';
import PutV3ProjectsIdServicesMattermostRequest from '../model/PutV3ProjectsIdServicesMattermostRequest';
import PutV3ProjectsIdServicesMattermostSlashCommandsRequest from '../model/PutV3ProjectsIdServicesMattermostSlashCommandsRequest';
import PutV3ProjectsIdServicesPipelinesEmailRequest from '../model/PutV3ProjectsIdServicesPipelinesEmailRequest';
import PutV3ProjectsIdServicesPivotaltrackerRequest from '../model/PutV3ProjectsIdServicesPivotaltrackerRequest';
import PutV3ProjectsIdServicesPushoverRequest from '../model/PutV3ProjectsIdServicesPushoverRequest';
import PutV3ProjectsIdServicesRedmineRequest from '../model/PutV3ProjectsIdServicesRedmineRequest';
import PutV3ProjectsIdServicesSlackRequest from '../model/PutV3ProjectsIdServicesSlackRequest';
import PutV3ProjectsIdServicesSlackSlashCommandsRequest from '../model/PutV3ProjectsIdServicesSlackSlashCommandsRequest';
import PutV3ProjectsIdServicesTeamcityRequest from '../model/PutV3ProjectsIdServicesTeamcityRequest';
import PutV3ProjectsIdSnippetsSnippetIdRequest from '../model/PutV3ProjectsIdSnippetsSnippetIdRequest';
import PutV3ProjectsIdVariablesKeyRequest from '../model/PutV3ProjectsIdVariablesKeyRequest';
import Release from '../model/Release';
import RepoBranch from '../model/RepoBranch';
import RepoCommit from '../model/RepoCommit';
import RepoCommitDetail from '../model/RepoCommitDetail';
import RepoTag from '../model/RepoTag';
import RepoTreeObject from '../model/RepoTreeObject';
import Runner from '../model/Runner';
import SSHKey from '../model/SSHKey';
import Todo from '../model/Todo';
import Trigger from '../model/Trigger';
import TriggerRequest from '../model/TriggerRequest';
import UserBasic from '../model/UserBasic';
import Variable from '../model/Variable';

/**
* Projects service.
* @module api/ProjectsApi
* @version v3
*/
export default class ProjectsApi {

    /**
    * Constructs a new ProjectsApi. 
    * @alias module:api/ProjectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV3ProjectsId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a project
     * Remove a project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdAccessRequestsUserId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdAccessRequestsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} userId The user ID of the access requester
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdAccessRequestsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdAccessRequestsUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdAccessRequestsUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteV3ProjectsIdAccessRequestsUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/access_requests/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdBoardsBoardIdListsListId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdBoardsBoardIdListsListIdCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a board list
     * This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {Number} boardId The ID of a board
     * @param {Number} listId The ID of a board list
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdBoardsBoardIdListsListIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    deleteV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling deleteV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling deleteV3ProjectsIdBoardsBoardIdListsListId");
      }

      let pathParams = {
        'id': id,
        'board_id': boardId,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards/{board_id}/lists/{list_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdDeployKeysKeyId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdDeployKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdDeployKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    deleteV3ProjectsIdDeployKeysKeyId(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdDeployKeysKeyId");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdDeployKeysKeyId");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdDeployKeysKeyIdDisable operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdDeployKeysKeyIdDisableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdDeployKeysKeyIdDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    deleteV3ProjectsIdDeployKeysKeyIdDisable(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdDeployKeysKeyIdDisable");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdDeployKeysKeyIdDisable");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys/{key_id}/disable', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdEnvironmentsEnvironmentId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdEnvironmentsEnvironmentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} environmentId The environment ID
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdEnvironmentsEnvironmentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    deleteV3ProjectsIdEnvironmentsEnvironmentId(id, environmentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdEnvironmentsEnvironmentId");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling deleteV3ProjectsIdEnvironmentsEnvironmentId");
      }

      let pathParams = {
        'id': id,
        'environment_id': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/environments/{environment_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdFork operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdForkCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a forked_from relationship
     * Remove a forked_from relationship
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdForkCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdFork(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdFork");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/fork', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdHooksHookId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdHooksHookIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes project hook
     * Deletes project hook
     * @param {String} id The ID of a project
     * @param {Number} hookId The ID of the hook to delete
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdHooksHookIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHook}
     */
    deleteV3ProjectsIdHooksHookId(id, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdHooksHookId");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling deleteV3ProjectsIdHooksHookId");
      }

      let pathParams = {
        'id': id,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectHook;
      return this.apiClient.callApi(
        '/v3/projects/{id}/hooks/{hook_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdIssuesIssueId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project issue
     * Delete a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdIssuesIssueId(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueId");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(awardId, id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(awardId, id, issueId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'issue_id': issueId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdIssuesNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteableId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdIssuesSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdIssuesSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdIssuesSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    deleteV3ProjectsIdIssuesSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdIssuesSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdIssuesSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{subscribable_id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdKeysKeyId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete deploy key for a project
     * Delete deploy key for a project
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    deleteV3ProjectsIdKeysKeyId(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdKeysKeyId");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdKeysKeyId");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdKeysKeyIdDisable operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdKeysKeyIdDisableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdKeysKeyIdDisableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    deleteV3ProjectsIdKeysKeyIdDisable(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdKeysKeyIdDisable");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteV3ProjectsIdKeysKeyIdDisable");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys/{key_id}/disable', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdLabels operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing label
     * Delete an existing label
     * @param {String} id The ID of a project
     * @param {String} name The name of the label to be deleted
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    deleteV3ProjectsIdLabels(id, name, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdLabels");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteV3ProjectsIdLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdLabelsSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdLabelsSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdLabelsSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    deleteV3ProjectsIdLabelsSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdLabelsSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdLabelsSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels/{subscribable_id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMembersUserId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param {String} id The project ID
     * @param {Number} userId The user ID of the member
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdMembersUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteV3ProjectsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/members/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdMergeRequestSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{subscribable_id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestsMergeRequestId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a merge request
     * Delete a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a merge request
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(awardId, id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(awardId, id, mergeRequestId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'merge_request_id': mergeRequestId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteableId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsubscribe from a resource
     * Unsubscribe from a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{subscribable_id}/subscription', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdRepositoryBranchesBranch operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdRepositoryBranchesBranchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a branch
     * Delete a branch
     * @param {String} id The ID of a project
     * @param {String} branch The name of the branch
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdRepositoryBranchesBranchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdRepositoryBranchesBranch(id, branch, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryBranchesBranch");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling deleteV3ProjectsIdRepositoryBranchesBranch");
      }

      let pathParams = {
        'id': id,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches/{branch}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdRepositoryFiles operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdRepositoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing file in repository
     * Delete an existing file in repository
     * @param {String} id The project ID
     * @param {String} filePath The path to new file. Ex. lib/class.rb
     * @param {String} branchName The name of branch
     * @param {String} commitMessage Commit Message
     * @param {Object} opts Optional parameters
     * @param {String} [authorEmail] The email of the author
     * @param {String} [authorName] The name of the author
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdRepositoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdRepositoryFiles(id, filePath, branchName, commitMessage, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling deleteV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'branchName' is set
      if (branchName === undefined || branchName === null) {
        throw new Error("Missing the required parameter 'branchName' when calling deleteV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'commitMessage' is set
      if (commitMessage === undefined || commitMessage === null) {
        throw new Error("Missing the required parameter 'commitMessage' when calling deleteV3ProjectsIdRepositoryFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'file_path': filePath,
        'branch_name': branchName,
        'commit_message': commitMessage,
        'author_email': opts['authorEmail'],
        'author_name': opts['authorName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/files', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdRepositoryMergedBranches operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdRepositoryMergedBranchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdRepositoryMergedBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdRepositoryMergedBranches(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryMergedBranches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/merged_branches', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdRepositoryTagsTagName operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdRepositoryTagsTagNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository tag
     * Delete a repository tag
     * @param {String} id The ID of a project
     * @param {String} tagName The name of the tag
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdRepositoryTagsTagNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdRepositoryTagsTagName(id, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdRepositoryTagsTagName");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling deleteV3ProjectsIdRepositoryTagsTagName");
      }

      let pathParams = {
        'id': id,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags/{tag_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdRunnersRunnerId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdRunnersRunnerIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable project's runner
     * Disable project's runner
     * @param {String} id The ID of a project
     * @param {Number} runnerId The ID of the runner
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdRunnersRunnerIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    deleteV3ProjectsIdRunnersRunnerId(id, runnerId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdRunnersRunnerId");
      }
      // verify the required parameter 'runnerId' is set
      if (runnerId === undefined || runnerId === null) {
        throw new Error("Missing the required parameter 'runnerId' when calling deleteV3ProjectsIdRunnersRunnerId");
      }

      let pathParams = {
        'id': id,
        'runner_id': runnerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/projects/{id}/runners/{runner_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdServicesServiceSlug operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdServicesServiceSlugCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a service for project
     * Delete a service for project
     * @param {module:model/String} serviceSlug The name of the service
     * @param {Number} id 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdServicesServiceSlugCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdServicesServiceSlug(serviceSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'serviceSlug' is set
      if (serviceSlug === undefined || serviceSlug === null) {
        throw new Error("Missing the required parameter 'serviceSlug' when calling deleteV3ProjectsIdServicesServiceSlug");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdServicesServiceSlug");
      }

      let pathParams = {
        'service_slug': serviceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/{service_slug}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdShareGroupId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdShareGroupIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id The ID of a project
     * @param {Number} groupId The ID of the group
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdShareGroupIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdShareGroupId(id, groupId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdShareGroupId");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling deleteV3ProjectsIdShareGroupId");
      }

      let pathParams = {
        'id': id,
        'group_id': groupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/share/{group_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +noteable+ note
     * Delete a +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteableId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdSnippetsSnippetId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a project snippet
     * Delete a project snippet
     * @param {String} id The ID of a project
     * @param {Number} snippetId The ID of a project snippet
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3ProjectsIdSnippetsSnippetId(id, snippetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetId");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(awardId, id, snippetId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a +awardables+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of an award emoji
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(awardId, id, snippetId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'snippet_id': snippetId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdStar operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdStarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unstar a project
     * Unstar a project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdStarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    deleteV3ProjectsIdStar(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdStar");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/{id}/star', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdTriggersToken operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdTriggersTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a trigger
     * Delete a trigger
     * @param {String} id The ID of a project
     * @param {String} token The unique token of trigger
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdTriggersTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    deleteV3ProjectsIdTriggersToken(id, token, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdTriggersToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling deleteV3ProjectsIdTriggersToken");
      }

      let pathParams = {
        'id': id,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/v3/projects/{id}/triggers/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3ProjectsIdVariablesKey operation.
     * @callback module:api/ProjectsApi~deleteV3ProjectsIdVariablesKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing variable from a project
     * Delete an existing variable from a project
     * @param {String} id The ID of a project
     * @param {String} key The key of the variable
     * @param {module:api/ProjectsApi~deleteV3ProjectsIdVariablesKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    deleteV3ProjectsIdVariablesKey(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3ProjectsIdVariablesKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteV3ProjectsIdVariablesKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/v3/projects/{id}/variables/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3Projects operation.
     * @callback module:api/ProjectsApi~getV3ProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a projects list for authenticated user
     * Get a projects list for authenticated user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {module:api/ProjectsApi~getV3ProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicProjectDetails}
     */
    getV3Projects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'simple': opts['simple']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicProjectDetails;
      return this.apiClient.callApi(
        '/v3/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsAll operation.
     * @callback module:api/ProjectsApi~getV3ProjectsAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all projects for admin user
     * Get all projects for admin user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {Boolean} [statistics] Include project statistics
     * @param {module:api/ProjectsApi~getV3ProjectsAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicProjectDetails}
     */
    getV3ProjectsAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'simple': opts['simple'],
        'statistics': opts['statistics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicProjectDetails;
      return this.apiClient.callApi(
        '/v3/projects/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectWithAccess} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single project
     * Get a single project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectWithAccess}
     */
    getV3ProjectsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectWithAccess;
      return this.apiClient.callApi(
        '/v3/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdAccessRequests operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdAccessRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessRequester} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of access requests for a project.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdAccessRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessRequester}
     */
    getV3ProjectsIdAccessRequests(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdAccessRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessRequester;
      return this.apiClient.callApi(
        '/v3/projects/{id}/access_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBoards operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBoardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Board} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project boards
     * This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdBoardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Board}
     */
    getV3ProjectsIdBoards(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBoards");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Board;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBoardsBoardIdLists operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBoardsBoardIdListsCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the lists of a project board
     * Does not include `backlog` and `done` lists. This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {Number} boardId The ID of a board
     * @param {module:api/ProjectsApi~getV3ProjectsIdBoardsBoardIdListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    getV3ProjectsIdBoardsBoardIdLists(id, boardId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBoardsBoardIdLists");
      }
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getV3ProjectsIdBoardsBoardIdLists");
      }

      let pathParams = {
        'id': id,
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards/{board_id}/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBoardsBoardIdListsListId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBoardsBoardIdListsListIdCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of a project board
     * This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {Number} boardId The ID of a board
     * @param {Number} listId The ID of a list
     * @param {module:api/ProjectsApi~getV3ProjectsIdBoardsBoardIdListsListIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    getV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling getV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling getV3ProjectsIdBoardsBoardIdListsListId");
      }

      let pathParams = {
        'id': id,
        'board_id': boardId,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards/{board_id}/lists/{list_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBuilds operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project builds
     * Get a project builds
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope] The scope of builds to show
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    getV3ProjectsIdBuilds(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBuilds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'scope': opts['scope'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBuildsArtifactsRefNameDownload operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBuildsArtifactsRefNameDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.10
     * @param {String} id The ID of a project
     * @param {String} refName The ref from repository
     * @param {String} job The name for the build
     * @param {module:api/ProjectsApi~getV3ProjectsIdBuildsArtifactsRefNameDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdBuildsArtifactsRefNameDownload(id, refName, job, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload");
      }
      // verify the required parameter 'refName' is set
      if (refName === undefined || refName === null) {
        throw new Error("Missing the required parameter 'refName' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload");
      }
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling getV3ProjectsIdBuildsArtifactsRefNameDownload");
      }

      let pathParams = {
        'id': id,
        'ref_name': refName
      };
      let queryParams = {
        'job': job
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/artifacts/{ref_name}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBuildsBuildId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific build of a project
     * Get a specific build of a project
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    getV3ProjectsIdBuildsBuildId(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildId");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildId");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBuildsBuildIdArtifacts operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdArtifactsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download the artifacts file from build
     * This feature was introduced in GitLab 8.5
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdArtifactsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdBuildsBuildIdArtifacts(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildIdArtifacts");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildIdArtifacts");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/artifacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdBuildsBuildIdTrace operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdTraceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a trace of a specific build of a project
     * Get a trace of a specific build of a project
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~getV3ProjectsIdBuildsBuildIdTraceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdBuildsBuildIdTrace(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdBuildsBuildIdTrace");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling getV3ProjectsIdBuildsBuildIdTrace");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/trace', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdDeployKeys operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdDeployKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project's deploy keys
     * Get a specific project's deploy keys
     * @param {String} id The ID of the project
     * @param {module:api/ProjectsApi~getV3ProjectsIdDeployKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3ProjectsIdDeployKeys(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdDeployKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdDeployKeysKeyId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdDeployKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single deploy key
     * Get single deploy key
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~getV3ProjectsIdDeployKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3ProjectsIdDeployKeysKeyId(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdDeployKeysKeyId");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getV3ProjectsIdDeployKeysKeyId");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdDeployments operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all deployments of the project
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getV3ProjectsIdDeployments(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdDeployments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdDeploymentsDeploymentId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdDeploymentsDeploymentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific deployment
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} deploymentId The deployment ID
     * @param {module:api/ProjectsApi~getV3ProjectsIdDeploymentsDeploymentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getV3ProjectsIdDeploymentsDeploymentId(id, deploymentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdDeploymentsDeploymentId");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getV3ProjectsIdDeploymentsDeploymentId");
      }

      let pathParams = {
        'id': id,
        'deployment_id': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deployments/{deployment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdEnvironments operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all environments of the project
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    getV3ProjectsIdEnvironments(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdEnvironments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/environments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdEvents operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events for a single project
     * Get events for a single project
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    getV3ProjectsIdEvents(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;
      return this.apiClient.callApi(
        '/v3/projects/{id}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdHooks operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdHooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project hooks
     * Get project hooks
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHook}
     */
    getV3ProjectsIdHooks(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdHooks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectHook;
      return this.apiClient.callApi(
        '/v3/projects/{id}/hooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdHooksHookId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdHooksHookIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project hook
     * Get a project hook
     * @param {String} id The ID of a project
     * @param {Number} hookId The ID of a project hook
     * @param {module:api/ProjectsApi~getV3ProjectsIdHooksHookIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHook}
     */
    getV3ProjectsIdHooksHookId(id, hookId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdHooksHookId");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling getV3ProjectsIdHooksHookId");
      }

      let pathParams = {
        'id': id,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectHook;
      return this.apiClient.callApi(
        '/v3/projects/{id}/hooks/{hook_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssues operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project issues
     * Get a list of project issues
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'all')] Return opened, closed, or all issues
     * @param {Number} [iid] Return the issue having the given `iid`
     * @param {String} [labels] Comma-separated list of label names
     * @param {String} [milestone] Return issues for a specific milestone
     * @param {module:model/String} [orderBy = 'created_at')] Return issues ordered by `created_at` or `updated_at` fields.
     * @param {module:model/String} [sort = 'desc')] Return issues sorted in `asc` or `desc` order.
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    getV3ProjectsIdIssues(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'state': opts['state'],
        'iid': opts['iid'],
        'labels': opts['labels'],
        'milestone': opts['milestone'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single project issue
     * Get a single project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    getV3ProjectsIdIssuesIssueId(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueId");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of an Issue, Merge Request or Snippet
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdIssuesIssueIdAwardEmoji(id, issueId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdAwardEmoji");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(awardId, id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {Number} noteId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(id, issueId, noteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId,
        'note_id': noteId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(awardId, id, issueId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'issue_id': issueId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesIssueIdTimeStats operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdTimeStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show time stats for a project issue
     * Show time stats for a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesIssueIdTimeStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdIssuesIssueIdTimeStats(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesIssueIdTimeStats");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling getV3ProjectsIdIssuesIssueIdTimeStats");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/time_stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdIssuesNoteableIdNotes(id, noteableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdIssuesNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{noteable_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdIssuesNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteId The ID of a note
     * @param {Number} noteableId The ID of the noteable
     * @param {module:api/ProjectsApi~getV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteId, noteableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'note_id': noteId,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdKeys operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific project's deploy keys
     * Get a specific project's deploy keys
     * @param {String} id The ID of the project
     * @param {module:api/ProjectsApi~getV3ProjectsIdKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3ProjectsIdKeys(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdKeysKeyId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get single deploy key
     * Get single deploy key
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~getV3ProjectsIdKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3ProjectsIdKeysKeyId(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdKeysKeyId");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getV3ProjectsIdKeysKeyId");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdLabels operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all labels of the project
     * Get all labels of the project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    getV3ProjectsIdLabels(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMembers operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param {String} id The project ID
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query string to search for members
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    getV3ProjectsIdMembers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/projects/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMembersUserId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param {String} id The project ID
     * @param {Number} userId The user ID of the member
     * @param {module:api/ProjectsApi~getV3ProjectsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    getV3ProjectsIdMembersUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getV3ProjectsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/projects/{id}/members/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestMergeRequestId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single merge request
     * This endpoint is deprecated and will be removed in GitLab 9.0.
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a merge request
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    getV3ProjectsIdMergeRequestMergeRequestId(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestMergeRequestIdChanges operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequestChanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequestChanges}
     */
    getV3ProjectsIdMergeRequestMergeRequestIdChanges(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdChanges");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdChanges");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequestChanges;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/closes_issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestMergeRequestIdComments operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    getV3ProjectsIdMergeRequestMergeRequestIdComments(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdComments");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdComments");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestMergeRequestIdCommits operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestMergeRequestIdCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommit}
     */
    getV3ProjectsIdMergeRequestMergeRequestIdCommits(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestMergeRequestIdCommits");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestMergeRequestIdCommits");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoCommit;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequests operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List merge requests
     * List merge requests
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'all')] Return opened, closed, merged, or all merge requests
     * @param {module:model/String} [orderBy = 'created_at')] Return merge requests ordered by `created_at` or `updated_at` fields.
     * @param {module:model/String} [sort = 'desc')] Return merge requests sorted in `asc` or `desc` order.
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Array.<Number>} [iid] The IID of the merge requests
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    getV3ProjectsIdMergeRequests(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'state': opts['state'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
        'iid': this.apiClient.buildCollectionParam(opts['iid'], 'csv')
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single merge request
     * Get a single merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    getV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of an Issue, Merge Request or Snippet
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(awardId, id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdChanges operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequestChanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show the merge request changes
     * Show the merge request changes
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequestChanges}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdChanges(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdChanges");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdChanges");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequestChanges;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/changes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List issues that will be closed on merge
     * List issues that will be closed on merge
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/closes_issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdComments operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the comments of a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdComments(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdComments");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdComments");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdCommits operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the commits of a merge request
     * Get the commits of a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommit}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdCommits(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdCommits");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdCommits");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoCommit;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {Number} noteId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(id, mergeRequestId, noteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId,
        'note_id': noteId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(awardId, id, mergeRequestId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'merge_request_id': mergeRequestId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show time stats for a project merge_request
     * Show time stats for a project merge_request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a project merge_request
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/time_stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdVersions operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequestDiff} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of merge request diff versions
     * This feature was introduced in GitLab 8.12.
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a merge request
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequestDiff}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdVersions(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersions");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersions");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequestDiff;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequestDiffFull} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single merge request diff version
     * This feature was introduced in GitLab 8.12.
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a merge request
     * @param {Number} versionId The ID of a merge request diff version
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequestDiffFull}
     */
    getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(id, mergeRequestId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequestDiffFull;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/versions/{version_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdMergeRequestsNoteableIdNotes(id, noteableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{noteable_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteId The ID of a note
     * @param {Number} noteableId The ID of the noteable
     * @param {module:api/ProjectsApi~getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteId, noteableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'note_id': noteId,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMilestones operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMilestonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project milestones
     * Get a list of project milestones
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'all')] Return \"active\", \"closed\", or \"all\" milestones
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Array.<Number>} [iid] The IID of the milestone
     * @param {module:api/ProjectsApi~getV3ProjectsIdMilestonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    getV3ProjectsIdMilestones(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMilestones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'state': opts['state'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
        'iid': this.apiClient.buildCollectionParam(opts['iid'], 'csv')
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/v3/projects/{id}/milestones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMilestonesMilestoneId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMilestonesMilestoneIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single project milestone
     * Get a single project milestone
     * @param {String} id The ID of a project
     * @param {Number} milestoneId The ID of a project milestone
     * @param {module:api/ProjectsApi~getV3ProjectsIdMilestonesMilestoneIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    getV3ProjectsIdMilestonesMilestoneId(id, milestoneId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMilestonesMilestoneId");
      }
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling getV3ProjectsIdMilestonesMilestoneId");
      }

      let pathParams = {
        'id': id,
        'milestone_id': milestoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/v3/projects/{id}/milestones/{milestone_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdMilestonesMilestoneIdIssues operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdMilestonesMilestoneIdIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issues for a single project milestone
     * Get all issues for a single project milestone
     * @param {String} id The ID of a project
     * @param {Number} milestoneId The ID of a project milestone
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdMilestonesMilestoneIdIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    getV3ProjectsIdMilestonesMilestoneIdIssues(id, milestoneId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdMilestonesMilestoneIdIssues");
      }
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling getV3ProjectsIdMilestonesMilestoneIdIssues");
      }

      let pathParams = {
        'id': id,
        'milestone_id': milestoneId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/milestones/{milestone_id}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdNotificationSettings operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param {String} id The group ID or project ID or project NAMESPACE/PROJECT_NAME
     * @param {module:api/ProjectsApi~getV3ProjectsIdNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    getV3ProjectsIdNotificationSettings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdNotificationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationSetting;
      return this.apiClient.callApi(
        '/v3/projects/{id}/notification_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdPipelines operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdPipelinesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Pipelines of the project
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:model/String} [scope] Either running, branches, or tags
     * @param {module:api/ProjectsApi~getV3ProjectsIdPipelinesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    getV3ProjectsIdPipelines(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdPipelines");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/v3/projects/{id}/pipelines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdPipelinesPipelineId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdPipelinesPipelineIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a specific pipeline for the project
     * This feature was introduced in GitLab 8.11
     * @param {String} id The project ID
     * @param {Number} pipelineId The pipeline ID
     * @param {module:api/ProjectsApi~getV3ProjectsIdPipelinesPipelineIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    getV3ProjectsIdPipelinesPipelineId(id, pipelineId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdPipelinesPipelineId");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling getV3ProjectsIdPipelinesPipelineId");
      }

      let pathParams = {
        'id': id,
        'pipeline_id': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/v3/projects/{id}/pipelines/{pipeline_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryArchive operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryArchiveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an archive of the repository
     * Get an archive of the repository
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {String} [sha] The commit sha of the archive to be downloaded
     * @param {String} [format] The archive format
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryArchive(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryArchive");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'sha': opts['sha'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/archive', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryBlobsSha operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryBlobsShaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param {String} id The ID of a project
     * @param {String} sha The commit, branch name, or tag name
     * @param {String} filepath The path to the file to display
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryBlobsShaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryBlobsSha(id, sha, filepath, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBlobsSha");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryBlobsSha");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling getV3ProjectsIdRepositoryBlobsSha");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
        'filepath': filepath
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/blobs/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryBranches operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryBranchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project repository branches
     * Get a project repository branches
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoBranch}
     */
    getV3ProjectsIdRepositoryBranches(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBranches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoBranch;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryBranchesBranch operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryBranchesBranchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single branch
     * Get a single branch
     * @param {String} id The ID of a project
     * @param {String} branch The name of the branch
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryBranchesBranchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoBranch}
     */
    getV3ProjectsIdRepositoryBranchesBranch(id, branch, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryBranchesBranch");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getV3ProjectsIdRepositoryBranchesBranch");
      }

      let pathParams = {
        'id': id,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoBranch;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches/{branch}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommits operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project repository commits
     * Get a project repository commits
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {String} [refName] The name of a repository branch or tag, if not given the default branch is used
     * @param {String} [since] Only commits after or in this date will be returned
     * @param {String} [until] Only commits before or in this date will be returned
     * @param {Number} [page = 0)] The page for pagination
     * @param {Number} [perPage = 20)] The number of results per page
     * @param {String} [path] The file path
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommit}
     */
    getV3ProjectsIdRepositoryCommits(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'ref_name': opts['refName'],
        'since': opts['since'],
        'until': opts['until'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'path': opts['path']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoCommit;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsSha operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommitDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific commit of a project
     * Get a specific commit of a project
     * @param {String} id The ID of a project
     * @param {String} sha A commit sha, or the name of a branch or tag
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommitDetail}
     */
    getV3ProjectsIdRepositoryCommitsSha(id, sha, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsSha");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsSha");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoCommitDetail;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsShaBlob operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaBlobCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a raw file contents
     * Get a raw file contents
     * @param {String} id The ID of a project
     * @param {String} sha The commit, branch name, or tag name
     * @param {String} filepath The path to the file to display
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaBlobCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryCommitsShaBlob(id, sha, filepath, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaBlob");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaBlob");
      }
      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling getV3ProjectsIdRepositoryCommitsShaBlob");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
        'filepath': filepath
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/blob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsShaBuilds operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get builds for a specific commit of a project
     * Get builds for a specific commit of a project
     * @param {String} id The ID of a project
     * @param {String} sha The SHA id of a commit
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope] The scope of builds to show
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    getV3ProjectsIdRepositoryCommitsShaBuilds(id, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaBuilds");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaBuilds");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
        'scope': opts['scope'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/builds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsShaComments operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's comments
     * Get a commit's comments
     * @param {String} id The ID of a project
     * @param {String} sha A commit sha, or the name of a branch or tag
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitNote}
     */
    getV3ProjectsIdRepositoryCommitsShaComments(id, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaComments");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaComments");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsShaDiff operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaDiffCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the diff for a specific commit of a project
     * Get the diff for a specific commit of a project
     * @param {String} id The ID of a project
     * @param {String} sha A commit sha, or the name of a branch or tag
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaDiffCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryCommitsShaDiff(id, sha, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaDiff");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaDiff");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/diff', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCommitsShaStatuses operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a commit's statuses
     * Get a commit's statuses
     * @param {String} id The ID of a project
     * @param {String} sha The commit hash
     * @param {Object} opts Optional parameters
     * @param {String} [ref] The ref
     * @param {String} [stage] The stage
     * @param {String} [name] The name
     * @param {String} [all] Show all statuses, default: false
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCommitsShaStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitStatus}
     */
    getV3ProjectsIdRepositoryCommitsShaStatuses(id, sha, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCommitsShaStatuses");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryCommitsShaStatuses");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
        'ref': opts['ref'],
        'stage': opts['stage'],
        'name': opts['name'],
        'all': opts['all'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CommitStatus;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryCompare operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryCompareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Compare} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare two branches, tags, or commits
     * Compare two branches, tags, or commits
     * @param {String} id The ID of a project
     * @param {String} from The commit, branch name, or tag name to start comparison
     * @param {String} to The commit, branch name, or tag name to stop comparison
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryCompareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Compare}
     */
    getV3ProjectsIdRepositoryCompare(id, from, to, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryCompare");
      }
      // verify the required parameter 'from' is set
      if (from === undefined || from === null) {
        throw new Error("Missing the required parameter 'from' when calling getV3ProjectsIdRepositoryCompare");
      }
      // verify the required parameter 'to' is set
      if (to === undefined || to === null) {
        throw new Error("Missing the required parameter 'to' when calling getV3ProjectsIdRepositoryCompare");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'from': from,
        'to': to
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Compare;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/compare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryContributors operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryContributorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Contributor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get repository contributors
     * Get repository contributors
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryContributorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Contributor}
     */
    getV3ProjectsIdRepositoryContributors(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryContributors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Contributor;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/contributors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryFiles operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a file from repository
     * Get a file from repository
     * @param {String} id The project ID
     * @param {String} filePath The path to the file. Ex. lib/class.rb
     * @param {String} ref The name of branch, tag, or commit
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryFiles(id, filePath, ref, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling getV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling getV3ProjectsIdRepositoryFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'file_path': filePath,
        'ref': ref
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryRawBlobsSha operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryRawBlobsShaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a raw blob contents by blob sha
     * Get a raw blob contents by blob sha
     * @param {String} id The ID of a project
     * @param {String} sha The commit, branch name, or tag name
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryRawBlobsShaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdRepositoryRawBlobsSha(id, sha, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryRawBlobsSha");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling getV3ProjectsIdRepositoryRawBlobsSha");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/raw_blobs/{sha}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryTags operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project repository tags
     * Get a project repository tags
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoTag}
     */
    getV3ProjectsIdRepositoryTags(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoTag;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryTagsTagName operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryTagsTagNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single repository tag
     * Get a single repository tag
     * @param {String} id The ID of a project
     * @param {String} tagName The name of the tag
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryTagsTagNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoTag}
     */
    getV3ProjectsIdRepositoryTagsTagName(id, tagName, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTagsTagName");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling getV3ProjectsIdRepositoryTagsTagName");
      }

      let pathParams = {
        'id': id,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoTag;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags/{tag_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRepositoryTree operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRepositoryTreeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoTreeObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a project repository tree
     * Get a project repository tree
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {String} [refName] The name of a repository branch or tag, if not given the default branch is used
     * @param {String} [path] The path of the tree
     * @param {Boolean} [recursive] Used to get a recursive tree
     * @param {module:api/ProjectsApi~getV3ProjectsIdRepositoryTreeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoTreeObject}
     */
    getV3ProjectsIdRepositoryTree(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRepositoryTree");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'ref_name': opts['refName'],
        'path': opts['path'],
        'recursive': opts['recursive']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoTreeObject;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tree', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdRunners operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdRunnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get runners available for project
     * Get runners available for project
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope] The scope of specific runners to show
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdRunnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    getV3ProjectsIdRunners(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdRunners");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'scope': opts['scope'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/projects/{id}/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdServicesServiceSlug operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdServicesServiceSlugCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the service settings for project
     * Get the service settings for project
     * @param {module:model/String} serviceSlug The name of the service
     * @param {Number} id 
     * @param {module:api/ProjectsApi~getV3ProjectsIdServicesServiceSlugCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectService}
     */
    getV3ProjectsIdServicesServiceSlug(serviceSlug, id, callback) {
      let postBody = null;
      // verify the required parameter 'serviceSlug' is set
      if (serviceSlug === undefined || serviceSlug === null) {
        throw new Error("Missing the required parameter 'serviceSlug' when calling getV3ProjectsIdServicesServiceSlug");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdServicesServiceSlug");
      }

      let pathParams = {
        'service_slug': serviceSlug,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectService;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/{service_slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippets operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project snippets
     * Get all project snippets
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSnippet}
     */
    getV3ProjectsIdSnippets(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectSnippet;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +noteable+ notes
     * Get a list of project +noteable+ notes
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdSnippetsNoteableIdNotes(id, noteableId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdSnippetsNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{noteable_id}/notes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single +noteable+ note
     * Get a single +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteId The ID of a note
     * @param {Number} noteableId The ID of the noteable
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    getV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteId, noteableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling getV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'note_id': noteId,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single project snippet
     * Get a single project snippet
     * @param {String} id The ID of a project
     * @param {Number} snippetId The ID of a project snippet
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSnippet}
     */
    getV3ProjectsIdSnippetsSnippetId(id, snippetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetId");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectSnippet;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {String} id The ID of a project
     * @param {Number} snippetId The ID of an Issue, Merge Request or Snippet
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdSnippetsSnippetIdAwardEmoji(id, snippetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmoji");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(awardId, id, snippetId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of project +awardable+ award emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {Number} noteId 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(id, snippetId, noteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId,
        'note_id': noteId
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific award emoji
     * This feature was introduced in 8.9
     * @param {Number} awardId The ID of the award
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {Number} noteId 
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(awardId, id, snippetId, noteId, callback) {
      let postBody = null;
      // verify the required parameter 'awardId' is set
      if (awardId === undefined || awardId === null) {
        throw new Error("Missing the required parameter 'awardId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId");
      }

      let pathParams = {
        'award_id': awardId,
        'id': id,
        'snippet_id': snippetId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji/{award_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdSnippetsSnippetIdRaw operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdRawCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a raw project snippet
     * Get a raw project snippet
     * @param {String} id The ID of a project
     * @param {Number} snippetId The ID of a project snippet
     * @param {module:api/ProjectsApi~getV3ProjectsIdSnippetsSnippetIdRawCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3ProjectsIdSnippetsSnippetIdRaw(id, snippetId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdSnippetsSnippetIdRaw");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getV3ProjectsIdSnippetsSnippetIdRaw");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdTriggers operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdTriggersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get triggers list
     * Get triggers list
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    getV3ProjectsIdTriggers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdTriggers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/v3/projects/{id}/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdTriggersToken operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdTriggersTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific trigger of a project
     * Get specific trigger of a project
     * @param {String} id The ID of a project
     * @param {String} token The unique token of trigger
     * @param {module:api/ProjectsApi~getV3ProjectsIdTriggersTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    getV3ProjectsIdTriggersToken(id, token, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdTriggersToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling getV3ProjectsIdTriggersToken");
      }

      let pathParams = {
        'id': id,
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/v3/projects/{id}/triggers/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdUsers operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBasic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the users list of a project
     * Get the users list of a project
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {String} [search] Return list of users matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBasic}
     */
    getV3ProjectsIdUsers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserBasic;
      return this.apiClient.callApi(
        '/v3/projects/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdVariables operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project variables
     * Get project variables
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsIdVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getV3ProjectsIdVariables(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/v3/projects/{id}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsIdVariablesKey operation.
     * @callback module:api/ProjectsApi~getV3ProjectsIdVariablesKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific variable from a project
     * Get a specific variable from a project
     * @param {String} id The ID of a project
     * @param {String} key The key of the variable
     * @param {module:api/ProjectsApi~getV3ProjectsIdVariablesKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    getV3ProjectsIdVariablesKey(id, key, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3ProjectsIdVariablesKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getV3ProjectsIdVariablesKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/v3/projects/{id}/variables/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsOwned operation.
     * @callback module:api/ProjectsApi~getV3ProjectsOwnedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an owned projects list for authenticated user
     * Get an owned projects list for authenticated user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {Boolean} [statistics] Include project statistics
     * @param {module:api/ProjectsApi~getV3ProjectsOwnedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicProjectDetails}
     */
    getV3ProjectsOwned(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'simple': opts['simple'],
        'statistics': opts['statistics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicProjectDetails;
      return this.apiClient.callApi(
        '/v3/projects/owned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsSearchQuery operation.
     * @callback module:api/ProjectsApi~getV3ProjectsSearchQueryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for projects the current user has access to
     * Search for projects the current user has access to
     * @param {String} query The project name to be searched
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/ProjectsApi~getV3ProjectsSearchQueryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getV3ProjectsSearchQuery(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getV3ProjectsSearchQuery");
      }

      let pathParams = {
        'query': query
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/search/{query}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsStarred operation.
     * @callback module:api/ProjectsApi~getV3ProjectsStarredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets starred project for the authenticated user
     * Gets starred project for the authenticated user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {module:api/ProjectsApi~getV3ProjectsStarredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicProjectDetails}
     */
    getV3ProjectsStarred(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'simple': opts['simple']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicProjectDetails;
      return this.apiClient.callApi(
        '/v3/projects/starred', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3ProjectsVisible operation.
     * @callback module:api/ProjectsApi~getV3ProjectsVisibleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicProjectDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of visible projects for authenticated user
     * Get a list of visible projects for authenticated user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {module:api/ProjectsApi~getV3ProjectsVisibleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicProjectDetails}
     */
    getV3ProjectsVisible(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'simple': opts['simple']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BasicProjectDetails;
      return this.apiClient.callApi(
        '/v3/projects/visible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3Projects operation.
     * @callback module:api/ProjectsApi~postV3ProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project
     * Create new project
     * @param {module:model/PostV3ProjectsRequest} postV3ProjectsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3Projects(postV3ProjectsRequest, callback) {
      let postBody = postV3ProjectsRequest;
      // verify the required parameter 'postV3ProjectsRequest' is set
      if (postV3ProjectsRequest === undefined || postV3ProjectsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsRequest' when calling postV3Projects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsForkId operation.
     * @callback module:api/ProjectsApi~postV3ProjectsForkIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fork new project for the current user or provided namespace.
     * Fork new project for the current user or provided namespace.
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/PostV3ProjectsForkIdRequest} [postV3ProjectsForkIdRequest] 
     * @param {module:api/ProjectsApi~postV3ProjectsForkIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3ProjectsForkId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['postV3ProjectsForkIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsForkId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/fork/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdAccessRequests operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdAccessRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessRequester} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests access for the authenticated user to a project.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {module:api/ProjectsApi~postV3ProjectsIdAccessRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessRequester}
     */
    postV3ProjectsIdAccessRequests(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdAccessRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessRequester;
      return this.apiClient.callApi(
        '/v3/projects/{id}/access_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdArchive operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdArchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive a project
     * Archive a project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~postV3ProjectsIdArchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3ProjectsIdArchive(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdArchive");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/{id}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBoardsBoardIdLists operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBoardsBoardIdListsCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new board list
     * This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {Number} boardId The ID of a board
     * @param {module:model/PostV3ProjectsIdBoardsBoardIdListsRequest} postV3ProjectsIdBoardsBoardIdListsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdBoardsBoardIdListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    postV3ProjectsIdBoardsBoardIdLists(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest, callback) {
      let postBody = postV3ProjectsIdBoardsBoardIdListsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBoardsBoardIdLists");
      }
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling postV3ProjectsIdBoardsBoardIdLists");
      }
      // verify the required parameter 'postV3ProjectsIdBoardsBoardIdListsRequest' is set
      if (postV3ProjectsIdBoardsBoardIdListsRequest === undefined || postV3ProjectsIdBoardsBoardIdListsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdBoardsBoardIdListsRequest' when calling postV3ProjectsIdBoardsBoardIdLists");
      }

      let pathParams = {
        'id': id,
        'board_id': boardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards/{board_id}/lists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBuildsBuildIdArtifactsKeep operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdArtifactsKeepCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Keep the artifacts to prevent them from being deleted
     * Keep the artifacts to prevent them from being deleted
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdArtifactsKeepCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    postV3ProjectsIdBuildsBuildIdArtifactsKeep(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdArtifactsKeep");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdArtifactsKeep");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/artifacts/keep', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBuildsBuildIdCancel operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a specific build of a project
     * Cancel a specific build of a project
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    postV3ProjectsIdBuildsBuildIdCancel(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdCancel");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdCancel");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBuildsBuildIdErase operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdEraseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Erase build (remove artifacts and build trace)
     * Erase build (remove artifacts and build trace)
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdEraseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    postV3ProjectsIdBuildsBuildIdErase(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdErase");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdErase");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/erase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBuildsBuildIdPlay operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdPlayCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a manual build
     * This feature was added in GitLab 8.11
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a Build
     * @param {module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdPlayCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    postV3ProjectsIdBuildsBuildIdPlay(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdPlay");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdPlay");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/play', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdBuildsBuildIdRetry operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdRetryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry a specific build of a project
     * Retry a specific build of a project
     * @param {String} id The ID of a project
     * @param {Number} buildId The ID of a build
     * @param {module:api/ProjectsApi~postV3ProjectsIdBuildsBuildIdRetryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    postV3ProjectsIdBuildsBuildIdRetry(id, buildId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdBuildsBuildIdRetry");
      }
      // verify the required parameter 'buildId' is set
      if (buildId === undefined || buildId === null) {
        throw new Error("Missing the required parameter 'buildId' when calling postV3ProjectsIdBuildsBuildIdRetry");
      }

      let pathParams = {
        'id': id,
        'build_id': buildId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Build;
      return this.apiClient.callApi(
        '/v3/projects/{id}/builds/{build_id}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdDeployKeys operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdDeployKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param {String} id The ID of the project
     * @param {module:model/PostV3ProjectsIdDeployKeysRequest} postV3ProjectsIdDeployKeysRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdDeployKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    postV3ProjectsIdDeployKeys(id, postV3ProjectsIdDeployKeysRequest, callback) {
      let postBody = postV3ProjectsIdDeployKeysRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdDeployKeys");
      }
      // verify the required parameter 'postV3ProjectsIdDeployKeysRequest' is set
      if (postV3ProjectsIdDeployKeysRequest === undefined || postV3ProjectsIdDeployKeysRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdDeployKeysRequest' when calling postV3ProjectsIdDeployKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdDeployKeysKeyIdEnable operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdDeployKeysKeyIdEnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~postV3ProjectsIdDeployKeysKeyIdEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    postV3ProjectsIdDeployKeysKeyIdEnable(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdDeployKeysKeyIdEnable");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling postV3ProjectsIdDeployKeysKeyIdEnable");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/deploy_keys/{key_id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdEnvironments operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new environment
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {module:model/PostV3ProjectsIdEnvironmentsRequest} postV3ProjectsIdEnvironmentsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    postV3ProjectsIdEnvironments(id, postV3ProjectsIdEnvironmentsRequest, callback) {
      let postBody = postV3ProjectsIdEnvironmentsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdEnvironments");
      }
      // verify the required parameter 'postV3ProjectsIdEnvironmentsRequest' is set
      if (postV3ProjectsIdEnvironmentsRequest === undefined || postV3ProjectsIdEnvironmentsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdEnvironmentsRequest' when calling postV3ProjectsIdEnvironments");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/environments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdForkForkedFromId operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdForkForkedFromIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark this project as forked from another
     * Mark this project as forked from another
     * @param {String} id The ID of a project
     * @param {String} forkedFromId The ID of the project it was forked from
     * @param {module:api/ProjectsApi~postV3ProjectsIdForkForkedFromIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdForkForkedFromId(id, forkedFromId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdForkForkedFromId");
      }
      // verify the required parameter 'forkedFromId' is set
      if (forkedFromId === undefined || forkedFromId === null) {
        throw new Error("Missing the required parameter 'forkedFromId' when calling postV3ProjectsIdForkForkedFromId");
      }

      let pathParams = {
        'id': id,
        'forked_from_id': forkedFromId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/fork/{forked_from_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdHooks operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdHooksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add hook to project
     * Add hook to project
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdHooksRequest} postV3ProjectsIdHooksRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdHooksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHook}
     */
    postV3ProjectsIdHooks(id, postV3ProjectsIdHooksRequest, callback) {
      let postBody = postV3ProjectsIdHooksRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdHooks");
      }
      // verify the required parameter 'postV3ProjectsIdHooksRequest' is set
      if (postV3ProjectsIdHooksRequest === undefined || postV3ProjectsIdHooksRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdHooksRequest' when calling postV3ProjectsIdHooks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectHook;
      return this.apiClient.callApi(
        '/v3/projects/{id}/hooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssues operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project issue
     * Create a new project issue
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdIssuesRequest} postV3ProjectsIdIssuesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    postV3ProjectsIdIssues(id, postV3ProjectsIdIssuesRequest, callback) {
      let postBody = postV3ProjectsIdIssuesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssues");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesRequest' is set
      if (postV3ProjectsIdIssuesRequest === undefined || postV3ProjectsIdIssuesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesRequest' when calling postV3ProjectsIdIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdAddSpentTime operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdAddSpentTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add spent time for a project issue
     * Add spent time for a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest} postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdAddSpentTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdIssuesIssueIdAddSpentTime(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === undefined || postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdIssuesIssueIdAddSpentTime");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/add_spent_time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdIssuesIssueIdAwardEmoji(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdIssuesIssueIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdMove operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdMoveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move an existing issue
     * Move an existing issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdMoveRequest} postV3ProjectsIdIssuesIssueIdMoveRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdMoveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    postV3ProjectsIdIssuesIssueIdMove(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdMoveRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdMove");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdMove");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdMoveRequest' is set
      if (postV3ProjectsIdIssuesIssueIdMoveRequest === undefined || postV3ProjectsIdIssuesIssueIdMoveRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdMoveRequest' when calling postV3ProjectsIdIssuesIssueIdMove");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} issueId 
     * @param {Number} noteId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/notes/{note_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdResetSpentTime operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdResetSpentTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset spent time for a project issue
     * Reset spent time for a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdResetSpentTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdIssuesIssueIdResetSpentTime(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdResetSpentTime");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdResetSpentTime");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/reset_spent_time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdResetTimeEstimate operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdResetTimeEstimateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the time estimate for a project issue
     * Reset the time estimate for a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdResetTimeEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdIssuesIssueIdResetTimeEstimate(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdResetTimeEstimate");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdResetTimeEstimate");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/reset_time_estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdTimeEstimate operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdTimeEstimateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a time estimate for a project issue
     * Set a time estimate for a project issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest} postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdTimeEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdIssuesIssueIdTimeEstimate(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === undefined || postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdIssuesIssueIdTimeEstimate");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/time_estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesIssueIdTodo operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdTodoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of an issuable
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesIssueIdTodoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    postV3ProjectsIdIssuesIssueIdTodo(id, issueId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesIssueIdTodo");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling postV3ProjectsIdIssuesIssueIdTodo");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Todo;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}/todo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {module:model/PostV3ProjectsIdIssuesNoteableIdNotesRequest} postV3ProjectsIdIssuesNoteableIdNotesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    postV3ProjectsIdIssuesNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, callback) {
      let postBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling postV3ProjectsIdIssuesNoteableIdNotes");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
      if (postV3ProjectsIdIssuesNoteableIdNotesRequest === undefined || postV3ProjectsIdIssuesNoteableIdNotesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdIssuesNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{noteable_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdIssuesSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdIssuesSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~postV3ProjectsIdIssuesSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    postV3ProjectsIdIssuesSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdIssuesSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdIssuesSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{subscribable_id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdKeys operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new deploy key to currently authenticated user
     * Add new deploy key to currently authenticated user
     * @param {String} id The ID of the project
     * @param {module:model/PostV3ProjectsIdDeployKeysRequest} postV3ProjectsIdDeployKeysRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    postV3ProjectsIdKeys(id, postV3ProjectsIdDeployKeysRequest, callback) {
      let postBody = postV3ProjectsIdDeployKeysRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdKeys");
      }
      // verify the required parameter 'postV3ProjectsIdDeployKeysRequest' is set
      if (postV3ProjectsIdDeployKeysRequest === undefined || postV3ProjectsIdDeployKeysRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdDeployKeysRequest' when calling postV3ProjectsIdKeys");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdKeysKeyIdEnable operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdKeysKeyIdEnableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a deploy key for a project
     * This feature was added in GitLab 8.11
     * @param {String} id The ID of the project
     * @param {Number} keyId The ID of the deploy key
     * @param {module:api/ProjectsApi~postV3ProjectsIdKeysKeyIdEnableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    postV3ProjectsIdKeysKeyIdEnable(id, keyId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdKeysKeyIdEnable");
      }
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling postV3ProjectsIdKeysKeyIdEnable");
      }

      let pathParams = {
        'id': id,
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/projects/{id}/keys/{key_id}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdLabels operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new label
     * Create a new label
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdLabelsRequest} postV3ProjectsIdLabelsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    postV3ProjectsIdLabels(id, postV3ProjectsIdLabelsRequest, callback) {
      let postBody = postV3ProjectsIdLabelsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdLabels");
      }
      // verify the required parameter 'postV3ProjectsIdLabelsRequest' is set
      if (postV3ProjectsIdLabelsRequest === undefined || postV3ProjectsIdLabelsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdLabelsRequest' when calling postV3ProjectsIdLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdLabelsSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdLabelsSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~postV3ProjectsIdLabelsSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    postV3ProjectsIdLabelsSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdLabelsSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdLabelsSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels/{subscribable_id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMembers operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param {String} id The project ID
     * @param {module:model/PostV3GroupsIdMembersRequest} postV3GroupsIdMembersRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    postV3ProjectsIdMembers(id, postV3GroupsIdMembersRequest, callback) {
      let postBody = postV3GroupsIdMembersRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMembers");
      }
      // verify the required parameter 'postV3GroupsIdMembersRequest' is set
      if (postV3GroupsIdMembersRequest === undefined || postV3GroupsIdMembersRequest === null) {
        throw new Error("Missing the required parameter 'postV3GroupsIdMembersRequest' when calling postV3ProjectsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/projects/{id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel merge if \"Merge When Pipeline Succeeds\" is enabled
     * Cancel merge if \"Merge When Pipeline Succeeds\" is enabled
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/cancel_merge_when_build_succeeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestMergeRequestIdComments operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:model/PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest} postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestMergeRequestIdCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    postV3ProjectsIdMergeRequestMergeRequestIdComments(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, callback) {
      let postBody = postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments");
      }
      // verify the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' is set
      if (postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest === undefined || postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' when calling postV3ProjectsIdMergeRequestMergeRequestIdComments");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    postV3ProjectsIdMergeRequestSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdMergeRequestSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{subscribable_id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequests operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a merge request
     * Create a merge request
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdMergeRequestsRequest} postV3ProjectsIdMergeRequestsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    postV3ProjectsIdMergeRequests(id, postV3ProjectsIdMergeRequestsRequest, callback) {
      let postBody = postV3ProjectsIdMergeRequestsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequests");
      }
      // verify the required parameter 'postV3ProjectsIdMergeRequestsRequest' is set
      if (postV3ProjectsIdMergeRequestsRequest === undefined || postV3ProjectsIdMergeRequestsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdMergeRequestsRequest' when calling postV3ProjectsIdMergeRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add spent time for a project merge_request
     * Add spent time for a project merge_request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a project merge_request
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest} postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === undefined || postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/add_spent_time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel merge if \"Merge When Pipeline Succeeds\" is enabled
     * Cancel merge if \"Merge When Pipeline Succeeds\" is enabled
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/cancel_merge_when_build_succeeds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdComments operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MRNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post a comment to a merge request
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {module:model/PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest} postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MRNote}
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdComments(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest, callback) {
      let postBody = postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments");
      }
      // verify the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' is set
      if (postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest === undefined || postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdComments");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MRNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} mergeRequestId 
     * @param {Number} noteId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/notes/{note_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset spent time for a project merge_request
     * Reset spent time for a project merge_request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a project merge_request
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/reset_spent_time', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the time estimate for a project merge_request
     * Reset the time estimate for a project merge_request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a project merge_request
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/reset_time_estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set a time estimate for a project merge_request
     * Set a time estimate for a project merge_request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of a project merge_request
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest} postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === undefined || postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/time_estimate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsMergeRequestIdTodo operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdTodoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Todo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a todo on an issuable
     * Create a todo on an issuable
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId The ID of an issuable
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsMergeRequestIdTodoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Todo}
     */
    postV3ProjectsIdMergeRequestsMergeRequestIdTodo(id, mergeRequestId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTodo");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling postV3ProjectsIdMergeRequestsMergeRequestIdTodo");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Todo;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/todo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {module:model/PostV3ProjectsIdIssuesNoteableIdNotesRequest} postV3ProjectsIdIssuesNoteableIdNotesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    postV3ProjectsIdMergeRequestsNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, callback) {
      let postBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
      if (postV3ProjectsIdIssuesNoteableIdNotesRequest === undefined || postV3ProjectsIdIssuesNoteableIdNotesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdMergeRequestsNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{noteable_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMergeRequestsSubscribableIdSubscription operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Subscribe to a resource
     * Subscribe to a resource
     * @param {String} id The ID of a project
     * @param {String} subscribableId The ID of a resource
     * @param {module:api/ProjectsApi~postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    postV3ProjectsIdMergeRequestsSubscribableIdSubscription(id, subscribableId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMergeRequestsSubscribableIdSubscription");
      }
      // verify the required parameter 'subscribableId' is set
      if (subscribableId === undefined || subscribableId === null) {
        throw new Error("Missing the required parameter 'subscribableId' when calling postV3ProjectsIdMergeRequestsSubscribableIdSubscription");
      }

      let pathParams = {
        'id': id,
        'subscribable_id': subscribableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{subscribable_id}/subscription', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdMilestones operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdMilestonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project milestone
     * Create a new project milestone
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdMilestonesRequest} postV3ProjectsIdMilestonesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdMilestonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    postV3ProjectsIdMilestones(id, postV3ProjectsIdMilestonesRequest, callback) {
      let postBody = postV3ProjectsIdMilestonesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdMilestones");
      }
      // verify the required parameter 'postV3ProjectsIdMilestonesRequest' is set
      if (postV3ProjectsIdMilestonesRequest === undefined || postV3ProjectsIdMilestonesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdMilestonesRequest' when calling postV3ProjectsIdMilestones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/v3/projects/{id}/milestones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdPipeline operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdPipelineCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new pipeline
     * This feature was introduced in GitLab 8.14
     * @param {String} id The project ID
     * @param {module:model/PostV3ProjectsIdPipelineRequest} postV3ProjectsIdPipelineRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    postV3ProjectsIdPipeline(id, postV3ProjectsIdPipelineRequest, callback) {
      let postBody = postV3ProjectsIdPipelineRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdPipeline");
      }
      // verify the required parameter 'postV3ProjectsIdPipelineRequest' is set
      if (postV3ProjectsIdPipelineRequest === undefined || postV3ProjectsIdPipelineRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdPipelineRequest' when calling postV3ProjectsIdPipeline");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/v3/projects/{id}/pipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdPipelinesPipelineIdCancel operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdPipelinesPipelineIdCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel all builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} pipelineId The pipeline ID
     * @param {module:api/ProjectsApi~postV3ProjectsIdPipelinesPipelineIdCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    postV3ProjectsIdPipelinesPipelineIdCancel(id, pipelineId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdPipelinesPipelineIdCancel");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling postV3ProjectsIdPipelinesPipelineIdCancel");
      }

      let pathParams = {
        'id': id,
        'pipeline_id': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/v3/projects/{id}/pipelines/{pipeline_id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdPipelinesPipelineIdRetry operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdPipelinesPipelineIdRetryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retry failed builds in the pipeline
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} pipelineId The pipeline ID
     * @param {module:api/ProjectsApi~postV3ProjectsIdPipelinesPipelineIdRetryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    postV3ProjectsIdPipelinesPipelineIdRetry(id, pipelineId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdPipelinesPipelineIdRetry");
      }
      // verify the required parameter 'pipelineId' is set
      if (pipelineId === undefined || pipelineId === null) {
        throw new Error("Missing the required parameter 'pipelineId' when calling postV3ProjectsIdPipelinesPipelineIdRetry");
      }

      let pathParams = {
        'id': id,
        'pipeline_id': pipelineId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/v3/projects/{id}/pipelines/{pipeline_id}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRefReftriggerBuilds operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRefReftriggerBuildsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a GitLab project build
     * Trigger a GitLab project build
     * @param {String} id The ID of a project
     * @param {String} ref The commit sha or name of a branch or tag
     * @param {module:model/PostV3ProjectsIdRefRefTriggerBuildsRequest} postV3ProjectsIdRefRefTriggerBuildsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRefReftriggerBuildsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerRequest}
     */
    postV3ProjectsIdRefReftriggerBuilds(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest, callback) {
      let postBody = postV3ProjectsIdRefRefTriggerBuildsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRefReftriggerBuilds");
      }
      // verify the required parameter 'ref' is set
      if (ref === undefined || ref === null) {
        throw new Error("Missing the required parameter 'ref' when calling postV3ProjectsIdRefReftriggerBuilds");
      }
      // verify the required parameter 'postV3ProjectsIdRefRefTriggerBuildsRequest' is set
      if (postV3ProjectsIdRefRefTriggerBuildsRequest === undefined || postV3ProjectsIdRefRefTriggerBuildsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRefRefTriggerBuildsRequest' when calling postV3ProjectsIdRefReftriggerBuilds");
      }

      let pathParams = {
        'id': id,
        'ref': ref
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TriggerRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/(ref/{ref}/)trigger/builds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryBranches operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryBranchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create branch
     * Create branch
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdRepositoryBranchesRequest} postV3ProjectsIdRepositoryBranchesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryBranchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoBranch}
     */
    postV3ProjectsIdRepositoryBranches(id, postV3ProjectsIdRepositoryBranchesRequest, callback) {
      let postBody = postV3ProjectsIdRepositoryBranchesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryBranches");
      }
      // verify the required parameter 'postV3ProjectsIdRepositoryBranchesRequest' is set
      if (postV3ProjectsIdRepositoryBranchesRequest === undefined || postV3ProjectsIdRepositoryBranchesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRepositoryBranchesRequest' when calling postV3ProjectsIdRepositoryBranches");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoBranch;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryCommits operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommitDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit multiple file changes as one commit
     * This feature was introduced in GitLab 8.13
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdRepositoryCommitsRequest} postV3ProjectsIdRepositoryCommitsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommitDetail}
     */
    postV3ProjectsIdRepositoryCommits(id, postV3ProjectsIdRepositoryCommitsRequest, callback) {
      let postBody = postV3ProjectsIdRepositoryCommitsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommits");
      }
      // verify the required parameter 'postV3ProjectsIdRepositoryCommitsRequest' is set
      if (postV3ProjectsIdRepositoryCommitsRequest === undefined || postV3ProjectsIdRepositoryCommitsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsRequest' when calling postV3ProjectsIdRepositoryCommits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoCommitDetail;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryCommitsShaCherryPick operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsShaCherryPickCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoCommit} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cherry pick commit into a branch
     * This feature was introduced in GitLab 8.15
     * @param {String} id The ID of a project
     * @param {String} sha A commit sha to be cherry picked
     * @param {module:model/PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest} postV3ProjectsIdRepositoryCommitsShaCherryPickRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsShaCherryPickCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoCommit}
     */
    postV3ProjectsIdRepositoryCommitsShaCherryPick(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest, callback) {
      let postBody = postV3ProjectsIdRepositoryCommitsShaCherryPickRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick");
      }
      // verify the required parameter 'postV3ProjectsIdRepositoryCommitsShaCherryPickRequest' is set
      if (postV3ProjectsIdRepositoryCommitsShaCherryPickRequest === undefined || postV3ProjectsIdRepositoryCommitsShaCherryPickRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsShaCherryPickRequest' when calling postV3ProjectsIdRepositoryCommitsShaCherryPick");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoCommit;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/cherry_pick', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryCommitsShaComments operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsShaCommentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitNote} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post comment to commit
     * Post comment to commit
     * @param {String} id The ID of a project
     * @param {String} sha The commit's SHA
     * @param {module:model/PostV3ProjectsIdRepositoryCommitsShaCommentsRequest} postV3ProjectsIdRepositoryCommitsShaCommentsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryCommitsShaCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitNote}
     */
    postV3ProjectsIdRepositoryCommitsShaComments(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest, callback) {
      let postBody = postV3ProjectsIdRepositoryCommitsShaCommentsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryCommitsShaComments");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling postV3ProjectsIdRepositoryCommitsShaComments");
      }
      // verify the required parameter 'postV3ProjectsIdRepositoryCommitsShaCommentsRequest' is set
      if (postV3ProjectsIdRepositoryCommitsShaCommentsRequest === undefined || postV3ProjectsIdRepositoryCommitsShaCommentsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRepositoryCommitsShaCommentsRequest' when calling postV3ProjectsIdRepositoryCommitsShaComments");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommitNote;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/commits/{sha}/comments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryFiles operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new file in repository
     * Create new file in repository
     * @param {String} id The project ID
     * @param {module:model/PutV3ProjectsIdRepositoryFilesRequest} putV3ProjectsIdRepositoryFilesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdRepositoryFiles(id, putV3ProjectsIdRepositoryFilesRequest, callback) {
      let postBody = putV3ProjectsIdRepositoryFilesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'putV3ProjectsIdRepositoryFilesRequest' is set
      if (putV3ProjectsIdRepositoryFilesRequest === undefined || putV3ProjectsIdRepositoryFilesRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdRepositoryFilesRequest' when calling postV3ProjectsIdRepositoryFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryTags operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoTag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new repository tag
     * Create a new repository tag
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdRepositoryTagsRequest} postV3ProjectsIdRepositoryTagsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoTag}
     */
    postV3ProjectsIdRepositoryTags(id, postV3ProjectsIdRepositoryTagsRequest, callback) {
      let postBody = postV3ProjectsIdRepositoryTagsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryTags");
      }
      // verify the required parameter 'postV3ProjectsIdRepositoryTagsRequest' is set
      if (postV3ProjectsIdRepositoryTagsRequest === undefined || postV3ProjectsIdRepositoryTagsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRepositoryTagsRequest' when calling postV3ProjectsIdRepositoryTags");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoTag;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRepositoryTagsTagNameRelease operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRepositoryTagsTagNameReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a release note to a tag
     * Add a release note to a tag
     * @param {String} id The ID of a project
     * @param {String} tagName The name of the tag
     * @param {module:model/PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest} putV3ProjectsIdRepositoryTagsTagNameReleaseRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRepositoryTagsTagNameReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    postV3ProjectsIdRepositoryTagsTagNameRelease(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, callback) {
      let postBody = putV3ProjectsIdRepositoryTagsTagNameReleaseRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRepositoryTagsTagNameRelease");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling postV3ProjectsIdRepositoryTagsTagNameRelease");
      }
      // verify the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' is set
      if (putV3ProjectsIdRepositoryTagsTagNameReleaseRequest === undefined || putV3ProjectsIdRepositoryTagsTagNameReleaseRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' when calling postV3ProjectsIdRepositoryTagsTagNameRelease");
      }

      let pathParams = {
        'id': id,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags/{tag_name}/release', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdRunners operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdRunnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a runner for a project
     * Enable a runner for a project
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdRunnersRequest} postV3ProjectsIdRunnersRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdRunnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    postV3ProjectsIdRunners(id, postV3ProjectsIdRunnersRequest, callback) {
      let postBody = postV3ProjectsIdRunnersRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdRunners");
      }
      // verify the required parameter 'postV3ProjectsIdRunnersRequest' is set
      if (postV3ProjectsIdRunnersRequest === undefined || postV3ProjectsIdRunnersRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdRunnersRequest' when calling postV3ProjectsIdRunners");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/projects/{id}/runners', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdServicesMattermostSlashCommandsTrigger operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdServicesMattermostSlashCommandsTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a slash command for mattermost-slash-commands
     * Added in GitLab 8.13
     * @param {String} id The ID of a project
     * @param {module:model/PutV3ProjectsIdServicesMattermostSlashCommandsRequest} putV3ProjectsIdServicesMattermostSlashCommandsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdServicesMattermostSlashCommandsTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdServicesMattermostSlashCommandsTrigger(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, callback) {
      let postBody = putV3ProjectsIdServicesMattermostSlashCommandsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdServicesMattermostSlashCommandsTrigger");
      }
      // verify the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' is set
      if (putV3ProjectsIdServicesMattermostSlashCommandsRequest === undefined || putV3ProjectsIdServicesMattermostSlashCommandsRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' when calling postV3ProjectsIdServicesMattermostSlashCommandsTrigger");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/mattermost_slash_commands/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdServicesSlackSlashCommandsTrigger operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdServicesSlackSlashCommandsTriggerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Trigger a slash command for slack-slash-commands
     * Added in GitLab 8.13
     * @param {String} id The ID of a project
     * @param {module:model/PutV3ProjectsIdServicesSlackSlashCommandsRequest} putV3ProjectsIdServicesSlackSlashCommandsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdServicesSlackSlashCommandsTriggerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdServicesSlackSlashCommandsTrigger(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, callback) {
      let postBody = putV3ProjectsIdServicesSlackSlashCommandsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdServicesSlackSlashCommandsTrigger");
      }
      // verify the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' is set
      if (putV3ProjectsIdServicesSlackSlashCommandsRequest === undefined || putV3ProjectsIdServicesSlackSlashCommandsRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' when calling postV3ProjectsIdServicesSlackSlashCommandsTrigger");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/slack_slash_commands/trigger', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdShare operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectGroupLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share the project with a group
     * Share the project with a group
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdShareRequest} postV3ProjectsIdShareRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectGroupLink}
     */
    postV3ProjectsIdShare(id, postV3ProjectsIdShareRequest, callback) {
      let postBody = postV3ProjectsIdShareRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdShare");
      }
      // verify the required parameter 'postV3ProjectsIdShareRequest' is set
      if (postV3ProjectsIdShareRequest === undefined || postV3ProjectsIdShareRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdShareRequest' when calling postV3ProjectsIdShare");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectGroupLink;
      return this.apiClient.callApi(
        '/v3/projects/{id}/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdSnippets operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdSnippetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new project snippet
     * Create a new project snippet
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdSnippetsRequest} postV3ProjectsIdSnippetsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdSnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSnippet}
     */
    postV3ProjectsIdSnippets(id, postV3ProjectsIdSnippetsRequest, callback) {
      let postBody = postV3ProjectsIdSnippetsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdSnippets");
      }
      // verify the required parameter 'postV3ProjectsIdSnippetsRequest' is set
      if (postV3ProjectsIdSnippetsRequest === undefined || postV3ProjectsIdSnippetsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdSnippetsRequest' when calling postV3ProjectsIdSnippets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectSnippet;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdSnippetsNoteableIdNotes operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdSnippetsNoteableIdNotesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new +noteable+ note
     * Create a new +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {module:model/PostV3ProjectsIdIssuesNoteableIdNotesRequest} postV3ProjectsIdIssuesNoteableIdNotesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdSnippetsNoteableIdNotesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    postV3ProjectsIdSnippetsNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest, callback) {
      let postBody = postV3ProjectsIdIssuesNoteableIdNotesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsNoteableIdNotes");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling postV3ProjectsIdSnippetsNoteableIdNotes");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' is set
      if (postV3ProjectsIdIssuesNoteableIdNotesRequest === undefined || postV3ProjectsIdIssuesNoteableIdNotesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesNoteableIdNotesRequest' when calling postV3ProjectsIdSnippetsNoteableIdNotes");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{noteable_id}/notes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdSnippetsSnippetIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdSnippetsSnippetIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdSnippetsSnippetIdAwardEmoji(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdSnippetsSnippetIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AwardEmoji} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Award a new Emoji
     * This feature was introduced in 8.9
     * @param {Number} id 
     * @param {Number} snippetId 
     * @param {Number} noteId 
     * @param {module:model/PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest} postV3ProjectsIdIssuesIssueIdAwardEmojiRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AwardEmoji}
     */
    postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest, callback) {
      let postBody = postV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }
      // verify the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' is set
      if (postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === undefined || postV3ProjectsIdIssuesIssueIdAwardEmojiRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdIssuesIssueIdAwardEmojiRequest' when calling postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AwardEmoji;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}/notes/{note_id}/award_emoji', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdStar operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdStarCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Star a project
     * Star a project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~postV3ProjectsIdStarCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3ProjectsIdStar(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdStar");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/{id}/star', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdStatusesSha operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdStatusesShaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post status to a commit
     * Post status to a commit
     * @param {String} id The ID of a project
     * @param {String} sha The commit hash
     * @param {module:model/PostV3ProjectsIdStatusesShaRequest} postV3ProjectsIdStatusesShaRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdStatusesShaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitStatus}
     */
    postV3ProjectsIdStatusesSha(id, sha, postV3ProjectsIdStatusesShaRequest, callback) {
      let postBody = postV3ProjectsIdStatusesShaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdStatusesSha");
      }
      // verify the required parameter 'sha' is set
      if (sha === undefined || sha === null) {
        throw new Error("Missing the required parameter 'sha' when calling postV3ProjectsIdStatusesSha");
      }
      // verify the required parameter 'postV3ProjectsIdStatusesShaRequest' is set
      if (postV3ProjectsIdStatusesShaRequest === undefined || postV3ProjectsIdStatusesShaRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdStatusesShaRequest' when calling postV3ProjectsIdStatusesSha");
      }

      let pathParams = {
        'id': id,
        'sha': sha
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommitStatus;
      return this.apiClient.callApi(
        '/v3/projects/{id}/statuses/{sha}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdTriggers operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdTriggersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a trigger
     * Create a trigger
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~postV3ProjectsIdTriggersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    postV3ProjectsIdTriggers(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdTriggers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/v3/projects/{id}/triggers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdUnarchive operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdUnarchiveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive a project
     * Unarchive a project
     * @param {String} id The ID of a project
     * @param {module:api/ProjectsApi~postV3ProjectsIdUnarchiveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3ProjectsIdUnarchive(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdUnarchive");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/{id}/unarchive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdUploads operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdUploadsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a file
     * Upload a file
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdUploadsRequest} postV3ProjectsIdUploadsRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postV3ProjectsIdUploads(id, postV3ProjectsIdUploadsRequest, callback) {
      let postBody = postV3ProjectsIdUploadsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdUploads");
      }
      // verify the required parameter 'postV3ProjectsIdUploadsRequest' is set
      if (postV3ProjectsIdUploadsRequest === undefined || postV3ProjectsIdUploadsRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdUploadsRequest' when calling postV3ProjectsIdUploads");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json', 'multipart/form-data'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsIdVariables operation.
     * @callback module:api/ProjectsApi~postV3ProjectsIdVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new variable in a project
     * Create a new variable in a project
     * @param {String} id The ID of a project
     * @param {module:model/PostV3ProjectsIdVariablesRequest} postV3ProjectsIdVariablesRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsIdVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    postV3ProjectsIdVariables(id, postV3ProjectsIdVariablesRequest, callback) {
      let postBody = postV3ProjectsIdVariablesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3ProjectsIdVariables");
      }
      // verify the required parameter 'postV3ProjectsIdVariablesRequest' is set
      if (postV3ProjectsIdVariablesRequest === undefined || postV3ProjectsIdVariablesRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdVariablesRequest' when calling postV3ProjectsIdVariables");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/v3/projects/{id}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3ProjectsUserUserId operation.
     * @callback module:api/ProjectsApi~postV3ProjectsUserUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new project for a specified user. Only available to admin users.
     * Create new project for a specified user. Only available to admin users.
     * @param {Number} userId The ID of a user
     * @param {module:model/PostV3ProjectsUserUserIdRequest} postV3ProjectsUserUserIdRequest 
     * @param {module:api/ProjectsApi~postV3ProjectsUserUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    postV3ProjectsUserUserId(userId, postV3ProjectsUserUserIdRequest, callback) {
      let postBody = postV3ProjectsUserUserIdRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling postV3ProjectsUserUserId");
      }
      // verify the required parameter 'postV3ProjectsUserUserIdRequest' is set
      if (postV3ProjectsUserUserIdRequest === undefined || postV3ProjectsUserUserIdRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsUserUserIdRequest' when calling postV3ProjectsUserUserId");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/user/{user_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project
     * Update an existing project
     * @param {String} id The ID of a project
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdRequest} [putV3ProjectsIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    putV3ProjectsId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdAccessRequestsUserIdApprove operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdAccessRequestsUserIdApproveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} userId The user ID of the access requester
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3GroupsIdAccessRequestsUserIdApproveRequest} [putV3GroupsIdAccessRequestsUserIdApproveRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdAccessRequestsUserIdApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    putV3ProjectsIdAccessRequestsUserIdApprove(id, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3GroupsIdAccessRequestsUserIdApproveRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdAccessRequestsUserIdApprove");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putV3ProjectsIdAccessRequestsUserIdApprove");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/projects/{id}/access_requests/{user_id}/approve', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdBoardsBoardIdListsListId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdBoardsBoardIdListsListIdCallback
     * @param {String} error Error message, if any.
     * @param {Array} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a board list to a new position
     * This feature was introduced in 8.13
     * @param {String} id The ID of a project
     * @param {Number} boardId The ID of a board
     * @param {Number} listId The ID of a list
     * @param {module:model/PutV3ProjectsIdBoardsBoardIdListsListIdRequest} putV3ProjectsIdBoardsBoardIdListsListIdRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdBoardsBoardIdListsListIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array}
     */
    putV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest, callback) {
      let postBody = putV3ProjectsIdBoardsBoardIdListsListIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'boardId' is set
      if (boardId === undefined || boardId === null) {
        throw new Error("Missing the required parameter 'boardId' when calling putV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling putV3ProjectsIdBoardsBoardIdListsListId");
      }
      // verify the required parameter 'putV3ProjectsIdBoardsBoardIdListsListIdRequest' is set
      if (putV3ProjectsIdBoardsBoardIdListsListIdRequest === undefined || putV3ProjectsIdBoardsBoardIdListsListIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdBoardsBoardIdListsListIdRequest' when calling putV3ProjectsIdBoardsBoardIdListsListId");
      }

      let pathParams = {
        'id': id,
        'board_id': boardId,
        'list_id': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Array;
      return this.apiClient.callApi(
        '/v3/projects/{id}/boards/{board_id}/lists/{list_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdEnvironmentsEnvironmentId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdEnvironmentsEnvironmentIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Environment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing environment
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The project ID
     * @param {Number} environmentId The environment ID
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdEnvironmentsEnvironmentIdRequest} [putV3ProjectsIdEnvironmentsEnvironmentIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdEnvironmentsEnvironmentIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Environment}
     */
    putV3ProjectsIdEnvironmentsEnvironmentId(id, environmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdEnvironmentsEnvironmentIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdEnvironmentsEnvironmentId");
      }
      // verify the required parameter 'environmentId' is set
      if (environmentId === undefined || environmentId === null) {
        throw new Error("Missing the required parameter 'environmentId' when calling putV3ProjectsIdEnvironmentsEnvironmentId");
      }

      let pathParams = {
        'id': id,
        'environment_id': environmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Environment;
      return this.apiClient.callApi(
        '/v3/projects/{id}/environments/{environment_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdHooksHookId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdHooksHookIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project hook
     * Update an existing project hook
     * @param {String} id The ID of a project
     * @param {Number} hookId The ID of the hook to update
     * @param {module:model/PostV3ProjectsIdHooksRequest} postV3ProjectsIdHooksRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdHooksHookIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectHook}
     */
    putV3ProjectsIdHooksHookId(id, hookId, postV3ProjectsIdHooksRequest, callback) {
      let postBody = postV3ProjectsIdHooksRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdHooksHookId");
      }
      // verify the required parameter 'hookId' is set
      if (hookId === undefined || hookId === null) {
        throw new Error("Missing the required parameter 'hookId' when calling putV3ProjectsIdHooksHookId");
      }
      // verify the required parameter 'postV3ProjectsIdHooksRequest' is set
      if (postV3ProjectsIdHooksRequest === undefined || postV3ProjectsIdHooksRequest === null) {
        throw new Error("Missing the required parameter 'postV3ProjectsIdHooksRequest' when calling putV3ProjectsIdHooksHookId");
      }

      let pathParams = {
        'id': id,
        'hook_id': hookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectHook;
      return this.apiClient.callApi(
        '/v3/projects/{id}/hooks/{hook_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdIssuesIssueId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdIssuesIssueIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing issue
     * Update an existing issue
     * @param {String} id The ID of a project
     * @param {Number} issueId The ID of a project issue
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdIssuesIssueIdRequest} [putV3ProjectsIdIssuesIssueIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdIssuesIssueIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    putV3ProjectsIdIssuesIssueId(id, issueId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdIssuesIssueIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdIssuesIssueId");
      }
      // verify the required parameter 'issueId' is set
      if (issueId === undefined || issueId === null) {
        throw new Error("Missing the required parameter 'issueId' when calling putV3ProjectsIdIssuesIssueId");
      }

      let pathParams = {
        'id': id,
        'issue_id': issueId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{issue_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdIssuesNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:model/PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest} putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdIssuesNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    putV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, callback) {
      let postBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }
      // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
      if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === undefined || putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdIssuesNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/issues/{noteable_id}/notes/{note_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdLabels operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdLabelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing label. At least one optional parameter is required.
     * Update an existing label. At least one optional parameter is required.
     * @param {String} id The ID of a project
     * @param {module:model/PutV3ProjectsIdLabelsRequest} putV3ProjectsIdLabelsRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    putV3ProjectsIdLabels(id, putV3ProjectsIdLabelsRequest, callback) {
      let postBody = putV3ProjectsIdLabelsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdLabels");
      }
      // verify the required parameter 'putV3ProjectsIdLabelsRequest' is set
      if (putV3ProjectsIdLabelsRequest === undefined || putV3ProjectsIdLabelsRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdLabelsRequest' when calling putV3ProjectsIdLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/v3/projects/{id}/labels', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMembersUserId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param {String} id The project ID
     * @param {Number} userId The user ID of the new member
     * @param {module:model/PutV3GroupsIdMembersUserIdRequest} putV3GroupsIdMembersUserIdRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    putV3ProjectsIdMembersUserId(id, userId, putV3GroupsIdMembersUserIdRequest, callback) {
      let postBody = putV3GroupsIdMembersUserIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putV3ProjectsIdMembersUserId");
      }
      // verify the required parameter 'putV3GroupsIdMembersUserIdRequest' is set
      if (putV3GroupsIdMembersUserIdRequest === undefined || putV3GroupsIdMembersUserIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3GroupsIdMembersUserIdRequest' when calling putV3ProjectsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/projects/{id}/members/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMergeRequestMergeRequestId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMergeRequestMergeRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a merge request
     * Update a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdRequest} [putV3ProjectsIdMergeRequestMergeRequestIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMergeRequestMergeRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    putV3ProjectsIdMergeRequestMergeRequestId(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdMergeRequestMergeRequestIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestMergeRequestId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestMergeRequestId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMergeRequestMergeRequestIdMerge operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMergeRequestMergeRequestIdMergeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge a merge request
     * Merge a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest} [putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMergeRequestMergeRequestIdMergeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    putV3ProjectsIdMergeRequestMergeRequestIdMerge(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestMergeRequestIdMerge");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestMergeRequestIdMerge");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_request/{merge_request_id}/merge', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMergeRequestsMergeRequestId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMergeRequestsMergeRequestIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a merge request
     * Update a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdRequest} [putV3ProjectsIdMergeRequestMergeRequestIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMergeRequestsMergeRequestIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    putV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdMergeRequestMergeRequestIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsMergeRequestId");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestsMergeRequestId");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMergeRequestsMergeRequestIdMerge operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMergeRequestsMergeRequestIdMergeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MergeRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge a merge request
     * Merge a merge request
     * @param {String} id The ID of a project
     * @param {Number} mergeRequestId 
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest} [putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMergeRequestsMergeRequestIdMergeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MergeRequest}
     */
    putV3ProjectsIdMergeRequestsMergeRequestIdMerge(id, mergeRequestId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsMergeRequestIdMerge");
      }
      // verify the required parameter 'mergeRequestId' is set
      if (mergeRequestId === undefined || mergeRequestId === null) {
        throw new Error("Missing the required parameter 'mergeRequestId' when calling putV3ProjectsIdMergeRequestsMergeRequestIdMerge");
      }

      let pathParams = {
        'id': id,
        'merge_request_id': mergeRequestId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MergeRequest;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{merge_request_id}/merge', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:model/PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest} putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, callback) {
      let postBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
      if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === undefined || putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/merge_requests/{noteable_id}/notes/{note_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdMilestonesMilestoneId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdMilestonesMilestoneIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Milestone} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project milestone
     * Update an existing project milestone
     * @param {String} id The ID of a project
     * @param {Number} milestoneId The ID of a project milestone
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdMilestonesMilestoneIdRequest} [putV3ProjectsIdMilestonesMilestoneIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdMilestonesMilestoneIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Milestone}
     */
    putV3ProjectsIdMilestonesMilestoneId(id, milestoneId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdMilestonesMilestoneIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdMilestonesMilestoneId");
      }
      // verify the required parameter 'milestoneId' is set
      if (milestoneId === undefined || milestoneId === null) {
        throw new Error("Missing the required parameter 'milestoneId' when calling putV3ProjectsIdMilestonesMilestoneId");
      }

      let pathParams = {
        'id': id,
        'milestone_id': milestoneId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Milestone;
      return this.apiClient.callApi(
        '/v3/projects/{id}/milestones/{milestone_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdNotificationSettings operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param {String} id The group ID or project ID or project NAMESPACE/PROJECT_NAME
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdNotificationSettingsRequest} [putV3ProjectsIdNotificationSettingsRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    putV3ProjectsIdNotificationSettings(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdNotificationSettingsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdNotificationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationSetting;
      return this.apiClient.callApi(
        '/v3/projects/{id}/notification_settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdRepositoryBranchesBranchProtect operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdRepositoryBranchesBranchProtectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Protect a single branch
     * Protect a single branch
     * @param {String} id The ID of a project
     * @param {String} branch The name of the branch
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdRepositoryBranchesBranchProtectRequest} [putV3ProjectsIdRepositoryBranchesBranchProtectRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdRepositoryBranchesBranchProtectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoBranch}
     */
    putV3ProjectsIdRepositoryBranchesBranchProtect(id, branch, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdRepositoryBranchesBranchProtectRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryBranchesBranchProtect");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling putV3ProjectsIdRepositoryBranchesBranchProtect");
      }

      let pathParams = {
        'id': id,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RepoBranch;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches/{branch}/protect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdRepositoryBranchesBranchUnprotect operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdRepositoryBranchesBranchUnprotectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RepoBranch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unprotect a single branch
     * Unprotect a single branch
     * @param {String} id The ID of a project
     * @param {String} branch The name of the branch
     * @param {module:api/ProjectsApi~putV3ProjectsIdRepositoryBranchesBranchUnprotectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RepoBranch}
     */
    putV3ProjectsIdRepositoryBranchesBranchUnprotect(id, branch, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryBranchesBranchUnprotect");
      }
      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling putV3ProjectsIdRepositoryBranchesBranchUnprotect");
      }

      let pathParams = {
        'id': id,
        'branch': branch
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RepoBranch;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/branches/{branch}/unprotect', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdRepositoryFiles operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdRepositoryFilesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update existing file in repository
     * Update existing file in repository
     * @param {String} id The project ID
     * @param {module:model/PutV3ProjectsIdRepositoryFilesRequest} putV3ProjectsIdRepositoryFilesRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdRepositoryFilesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdRepositoryFiles(id, putV3ProjectsIdRepositoryFilesRequest, callback) {
      let postBody = putV3ProjectsIdRepositoryFilesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryFiles");
      }
      // verify the required parameter 'putV3ProjectsIdRepositoryFilesRequest' is set
      if (putV3ProjectsIdRepositoryFilesRequest === undefined || putV3ProjectsIdRepositoryFilesRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdRepositoryFilesRequest' when calling putV3ProjectsIdRepositoryFiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/files', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdRepositoryTagsTagNameRelease operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdRepositoryTagsTagNameReleaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Release} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a tag's release note
     * Update a tag's release note
     * @param {String} id The ID of a project
     * @param {String} tagName The name of the tag
     * @param {module:model/PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest} putV3ProjectsIdRepositoryTagsTagNameReleaseRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdRepositoryTagsTagNameReleaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Release}
     */
    putV3ProjectsIdRepositoryTagsTagNameRelease(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest, callback) {
      let postBody = putV3ProjectsIdRepositoryTagsTagNameReleaseRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdRepositoryTagsTagNameRelease");
      }
      // verify the required parameter 'tagName' is set
      if (tagName === undefined || tagName === null) {
        throw new Error("Missing the required parameter 'tagName' when calling putV3ProjectsIdRepositoryTagsTagNameRelease");
      }
      // verify the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' is set
      if (putV3ProjectsIdRepositoryTagsTagNameReleaseRequest === undefined || putV3ProjectsIdRepositoryTagsTagNameReleaseRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdRepositoryTagsTagNameReleaseRequest' when calling putV3ProjectsIdRepositoryTagsTagNameRelease");
      }

      let pathParams = {
        'id': id,
        'tag_name': tagName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Release;
      return this.apiClient.callApi(
        '/v3/projects/{id}/repository/tags/{tag_name}/release', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesAsana operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesAsanaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set asana service for project
     * Set asana service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesAsanaRequest} putV3ProjectsIdServicesAsanaRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesAsanaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesAsana(id, putV3ProjectsIdServicesAsanaRequest, callback) {
      let postBody = putV3ProjectsIdServicesAsanaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesAsana");
      }
      // verify the required parameter 'putV3ProjectsIdServicesAsanaRequest' is set
      if (putV3ProjectsIdServicesAsanaRequest === undefined || putV3ProjectsIdServicesAsanaRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesAsanaRequest' when calling putV3ProjectsIdServicesAsana");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/asana', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesAssembla operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesAssemblaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set assembla service for project
     * Set assembla service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesAssemblaRequest} putV3ProjectsIdServicesAssemblaRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesAssemblaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesAssembla(id, putV3ProjectsIdServicesAssemblaRequest, callback) {
      let postBody = putV3ProjectsIdServicesAssemblaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesAssembla");
      }
      // verify the required parameter 'putV3ProjectsIdServicesAssemblaRequest' is set
      if (putV3ProjectsIdServicesAssemblaRequest === undefined || putV3ProjectsIdServicesAssemblaRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesAssemblaRequest' when calling putV3ProjectsIdServicesAssembla");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/assembla', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesBamboo operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesBambooCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set bamboo service for project
     * Set bamboo service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesBambooRequest} putV3ProjectsIdServicesBambooRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesBambooCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesBamboo(id, putV3ProjectsIdServicesBambooRequest, callback) {
      let postBody = putV3ProjectsIdServicesBambooRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBamboo");
      }
      // verify the required parameter 'putV3ProjectsIdServicesBambooRequest' is set
      if (putV3ProjectsIdServicesBambooRequest === undefined || putV3ProjectsIdServicesBambooRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesBambooRequest' when calling putV3ProjectsIdServicesBamboo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/bamboo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesBugzilla operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesBugzillaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set bugzilla service for project
     * Set bugzilla service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesBugzillaRequest} putV3ProjectsIdServicesBugzillaRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesBugzillaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesBugzilla(id, putV3ProjectsIdServicesBugzillaRequest, callback) {
      let postBody = putV3ProjectsIdServicesBugzillaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBugzilla");
      }
      // verify the required parameter 'putV3ProjectsIdServicesBugzillaRequest' is set
      if (putV3ProjectsIdServicesBugzillaRequest === undefined || putV3ProjectsIdServicesBugzillaRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesBugzillaRequest' when calling putV3ProjectsIdServicesBugzilla");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/bugzilla', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesBuildkite operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesBuildkiteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set buildkite service for project
     * Set buildkite service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesBuildkiteRequest} putV3ProjectsIdServicesBuildkiteRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesBuildkiteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesBuildkite(id, putV3ProjectsIdServicesBuildkiteRequest, callback) {
      let postBody = putV3ProjectsIdServicesBuildkiteRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBuildkite");
      }
      // verify the required parameter 'putV3ProjectsIdServicesBuildkiteRequest' is set
      if (putV3ProjectsIdServicesBuildkiteRequest === undefined || putV3ProjectsIdServicesBuildkiteRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesBuildkiteRequest' when calling putV3ProjectsIdServicesBuildkite");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/buildkite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesBuildsEmail operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesBuildsEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set builds-email service for project
     * Set builds-email service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesBuildsEmailRequest} putV3ProjectsIdServicesBuildsEmailRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesBuildsEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesBuildsEmail(id, putV3ProjectsIdServicesBuildsEmailRequest, callback) {
      let postBody = putV3ProjectsIdServicesBuildsEmailRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesBuildsEmail");
      }
      // verify the required parameter 'putV3ProjectsIdServicesBuildsEmailRequest' is set
      if (putV3ProjectsIdServicesBuildsEmailRequest === undefined || putV3ProjectsIdServicesBuildsEmailRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesBuildsEmailRequest' when calling putV3ProjectsIdServicesBuildsEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/builds-email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesCampfire operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesCampfireCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set campfire service for project
     * Set campfire service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesCampfireRequest} putV3ProjectsIdServicesCampfireRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesCampfireCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesCampfire(id, putV3ProjectsIdServicesCampfireRequest, callback) {
      let postBody = putV3ProjectsIdServicesCampfireRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesCampfire");
      }
      // verify the required parameter 'putV3ProjectsIdServicesCampfireRequest' is set
      if (putV3ProjectsIdServicesCampfireRequest === undefined || putV3ProjectsIdServicesCampfireRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesCampfireRequest' when calling putV3ProjectsIdServicesCampfire");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/campfire', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesCustomIssueTracker operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesCustomIssueTrackerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set custom-issue-tracker service for project
     * Set custom-issue-tracker service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesBugzillaRequest} putV3ProjectsIdServicesBugzillaRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesCustomIssueTrackerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesCustomIssueTracker(id, putV3ProjectsIdServicesBugzillaRequest, callback) {
      let postBody = putV3ProjectsIdServicesBugzillaRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesCustomIssueTracker");
      }
      // verify the required parameter 'putV3ProjectsIdServicesBugzillaRequest' is set
      if (putV3ProjectsIdServicesBugzillaRequest === undefined || putV3ProjectsIdServicesBugzillaRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesBugzillaRequest' when calling putV3ProjectsIdServicesCustomIssueTracker");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/custom-issue-tracker', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesDroneCi operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesDroneCiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set drone-ci service for project
     * Set drone-ci service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesDroneCiRequest} putV3ProjectsIdServicesDroneCiRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesDroneCiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesDroneCi(id, putV3ProjectsIdServicesDroneCiRequest, callback) {
      let postBody = putV3ProjectsIdServicesDroneCiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesDroneCi");
      }
      // verify the required parameter 'putV3ProjectsIdServicesDroneCiRequest' is set
      if (putV3ProjectsIdServicesDroneCiRequest === undefined || putV3ProjectsIdServicesDroneCiRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesDroneCiRequest' when calling putV3ProjectsIdServicesDroneCi");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/drone-ci', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesEmailsOnPush operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesEmailsOnPushCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set emails-on-push service for project
     * Set emails-on-push service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesEmailsOnPushRequest} putV3ProjectsIdServicesEmailsOnPushRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesEmailsOnPushCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesEmailsOnPush(id, putV3ProjectsIdServicesEmailsOnPushRequest, callback) {
      let postBody = putV3ProjectsIdServicesEmailsOnPushRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesEmailsOnPush");
      }
      // verify the required parameter 'putV3ProjectsIdServicesEmailsOnPushRequest' is set
      if (putV3ProjectsIdServicesEmailsOnPushRequest === undefined || putV3ProjectsIdServicesEmailsOnPushRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesEmailsOnPushRequest' when calling putV3ProjectsIdServicesEmailsOnPush");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/emails-on-push', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesExternalWiki operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesExternalWikiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set external-wiki service for project
     * Set external-wiki service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesExternalWikiRequest} putV3ProjectsIdServicesExternalWikiRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesExternalWikiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesExternalWiki(id, putV3ProjectsIdServicesExternalWikiRequest, callback) {
      let postBody = putV3ProjectsIdServicesExternalWikiRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesExternalWiki");
      }
      // verify the required parameter 'putV3ProjectsIdServicesExternalWikiRequest' is set
      if (putV3ProjectsIdServicesExternalWikiRequest === undefined || putV3ProjectsIdServicesExternalWikiRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesExternalWikiRequest' when calling putV3ProjectsIdServicesExternalWiki");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/external-wiki', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesFlowdock operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesFlowdockCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set flowdock service for project
     * Set flowdock service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesFlowdockRequest} putV3ProjectsIdServicesFlowdockRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesFlowdockCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesFlowdock(id, putV3ProjectsIdServicesFlowdockRequest, callback) {
      let postBody = putV3ProjectsIdServicesFlowdockRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesFlowdock");
      }
      // verify the required parameter 'putV3ProjectsIdServicesFlowdockRequest' is set
      if (putV3ProjectsIdServicesFlowdockRequest === undefined || putV3ProjectsIdServicesFlowdockRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesFlowdockRequest' when calling putV3ProjectsIdServicesFlowdock");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/flowdock', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesGemnasium operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesGemnasiumCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set gemnasium service for project
     * Set gemnasium service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesGemnasiumRequest} putV3ProjectsIdServicesGemnasiumRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesGemnasiumCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesGemnasium(id, putV3ProjectsIdServicesGemnasiumRequest, callback) {
      let postBody = putV3ProjectsIdServicesGemnasiumRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesGemnasium");
      }
      // verify the required parameter 'putV3ProjectsIdServicesGemnasiumRequest' is set
      if (putV3ProjectsIdServicesGemnasiumRequest === undefined || putV3ProjectsIdServicesGemnasiumRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesGemnasiumRequest' when calling putV3ProjectsIdServicesGemnasium");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/gemnasium', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesHipchat operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesHipchatCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set hipchat service for project
     * Set hipchat service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesHipchatRequest} putV3ProjectsIdServicesHipchatRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesHipchatCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesHipchat(id, putV3ProjectsIdServicesHipchatRequest, callback) {
      let postBody = putV3ProjectsIdServicesHipchatRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesHipchat");
      }
      // verify the required parameter 'putV3ProjectsIdServicesHipchatRequest' is set
      if (putV3ProjectsIdServicesHipchatRequest === undefined || putV3ProjectsIdServicesHipchatRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesHipchatRequest' when calling putV3ProjectsIdServicesHipchat");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/hipchat', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesIrker operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesIrkerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set irker service for project
     * Set irker service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesIrkerRequest} putV3ProjectsIdServicesIrkerRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesIrkerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesIrker(id, putV3ProjectsIdServicesIrkerRequest, callback) {
      let postBody = putV3ProjectsIdServicesIrkerRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesIrker");
      }
      // verify the required parameter 'putV3ProjectsIdServicesIrkerRequest' is set
      if (putV3ProjectsIdServicesIrkerRequest === undefined || putV3ProjectsIdServicesIrkerRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesIrkerRequest' when calling putV3ProjectsIdServicesIrker");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/irker', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesJira operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesJiraCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set jira service for project
     * Set jira service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesJiraRequest} putV3ProjectsIdServicesJiraRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesJiraCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesJira(id, putV3ProjectsIdServicesJiraRequest, callback) {
      let postBody = putV3ProjectsIdServicesJiraRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesJira");
      }
      // verify the required parameter 'putV3ProjectsIdServicesJiraRequest' is set
      if (putV3ProjectsIdServicesJiraRequest === undefined || putV3ProjectsIdServicesJiraRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesJiraRequest' when calling putV3ProjectsIdServicesJira");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/jira', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesKubernetes operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesKubernetesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set kubernetes service for project
     * Set kubernetes service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesKubernetesRequest} putV3ProjectsIdServicesKubernetesRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesKubernetesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesKubernetes(id, putV3ProjectsIdServicesKubernetesRequest, callback) {
      let postBody = putV3ProjectsIdServicesKubernetesRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesKubernetes");
      }
      // verify the required parameter 'putV3ProjectsIdServicesKubernetesRequest' is set
      if (putV3ProjectsIdServicesKubernetesRequest === undefined || putV3ProjectsIdServicesKubernetesRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesKubernetesRequest' when calling putV3ProjectsIdServicesKubernetes");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/kubernetes', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesMattermost operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesMattermostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set mattermost service for project
     * Set mattermost service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesMattermostRequest} putV3ProjectsIdServicesMattermostRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesMattermostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesMattermost(id, putV3ProjectsIdServicesMattermostRequest, callback) {
      let postBody = putV3ProjectsIdServicesMattermostRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesMattermost");
      }
      // verify the required parameter 'putV3ProjectsIdServicesMattermostRequest' is set
      if (putV3ProjectsIdServicesMattermostRequest === undefined || putV3ProjectsIdServicesMattermostRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesMattermostRequest' when calling putV3ProjectsIdServicesMattermost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/mattermost', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesMattermostSlashCommands operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesMattermostSlashCommandsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set mattermost-slash-commands service for project
     * Set mattermost-slash-commands service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesMattermostSlashCommandsRequest} putV3ProjectsIdServicesMattermostSlashCommandsRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesMattermostSlashCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesMattermostSlashCommands(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest, callback) {
      let postBody = putV3ProjectsIdServicesMattermostSlashCommandsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesMattermostSlashCommands");
      }
      // verify the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' is set
      if (putV3ProjectsIdServicesMattermostSlashCommandsRequest === undefined || putV3ProjectsIdServicesMattermostSlashCommandsRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesMattermostSlashCommandsRequest' when calling putV3ProjectsIdServicesMattermostSlashCommands");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/mattermost-slash-commands', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesPipelinesEmail operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesPipelinesEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set pipelines-email service for project
     * Set pipelines-email service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesPipelinesEmailRequest} putV3ProjectsIdServicesPipelinesEmailRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesPipelinesEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesPipelinesEmail(id, putV3ProjectsIdServicesPipelinesEmailRequest, callback) {
      let postBody = putV3ProjectsIdServicesPipelinesEmailRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPipelinesEmail");
      }
      // verify the required parameter 'putV3ProjectsIdServicesPipelinesEmailRequest' is set
      if (putV3ProjectsIdServicesPipelinesEmailRequest === undefined || putV3ProjectsIdServicesPipelinesEmailRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesPipelinesEmailRequest' when calling putV3ProjectsIdServicesPipelinesEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/pipelines-email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesPivotaltracker operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesPivotaltrackerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set pivotaltracker service for project
     * Set pivotaltracker service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesPivotaltrackerRequest} putV3ProjectsIdServicesPivotaltrackerRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesPivotaltrackerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesPivotaltracker(id, putV3ProjectsIdServicesPivotaltrackerRequest, callback) {
      let postBody = putV3ProjectsIdServicesPivotaltrackerRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPivotaltracker");
      }
      // verify the required parameter 'putV3ProjectsIdServicesPivotaltrackerRequest' is set
      if (putV3ProjectsIdServicesPivotaltrackerRequest === undefined || putV3ProjectsIdServicesPivotaltrackerRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesPivotaltrackerRequest' when calling putV3ProjectsIdServicesPivotaltracker");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/pivotaltracker', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesPushover operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesPushoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set pushover service for project
     * Set pushover service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesPushoverRequest} putV3ProjectsIdServicesPushoverRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesPushoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesPushover(id, putV3ProjectsIdServicesPushoverRequest, callback) {
      let postBody = putV3ProjectsIdServicesPushoverRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesPushover");
      }
      // verify the required parameter 'putV3ProjectsIdServicesPushoverRequest' is set
      if (putV3ProjectsIdServicesPushoverRequest === undefined || putV3ProjectsIdServicesPushoverRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesPushoverRequest' when calling putV3ProjectsIdServicesPushover");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/pushover', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesRedmine operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesRedmineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set redmine service for project
     * Set redmine service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesRedmineRequest} putV3ProjectsIdServicesRedmineRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesRedmineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesRedmine(id, putV3ProjectsIdServicesRedmineRequest, callback) {
      let postBody = putV3ProjectsIdServicesRedmineRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesRedmine");
      }
      // verify the required parameter 'putV3ProjectsIdServicesRedmineRequest' is set
      if (putV3ProjectsIdServicesRedmineRequest === undefined || putV3ProjectsIdServicesRedmineRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesRedmineRequest' when calling putV3ProjectsIdServicesRedmine");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/redmine', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesSlack operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesSlackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set slack service for project
     * Set slack service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesSlackRequest} putV3ProjectsIdServicesSlackRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesSlackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesSlack(id, putV3ProjectsIdServicesSlackRequest, callback) {
      let postBody = putV3ProjectsIdServicesSlackRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesSlack");
      }
      // verify the required parameter 'putV3ProjectsIdServicesSlackRequest' is set
      if (putV3ProjectsIdServicesSlackRequest === undefined || putV3ProjectsIdServicesSlackRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesSlackRequest' when calling putV3ProjectsIdServicesSlack");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/slack', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesSlackSlashCommands operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesSlackSlashCommandsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set slack-slash-commands service for project
     * Set slack-slash-commands service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesSlackSlashCommandsRequest} putV3ProjectsIdServicesSlackSlashCommandsRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesSlackSlashCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesSlackSlashCommands(id, putV3ProjectsIdServicesSlackSlashCommandsRequest, callback) {
      let postBody = putV3ProjectsIdServicesSlackSlashCommandsRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesSlackSlashCommands");
      }
      // verify the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' is set
      if (putV3ProjectsIdServicesSlackSlashCommandsRequest === undefined || putV3ProjectsIdServicesSlackSlashCommandsRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesSlackSlashCommandsRequest' when calling putV3ProjectsIdServicesSlackSlashCommands");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/slack-slash-commands', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdServicesTeamcity operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdServicesTeamcityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set teamcity service for project
     * Set teamcity service for project
     * @param {Number} id 
     * @param {module:model/PutV3ProjectsIdServicesTeamcityRequest} putV3ProjectsIdServicesTeamcityRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdServicesTeamcityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    putV3ProjectsIdServicesTeamcity(id, putV3ProjectsIdServicesTeamcityRequest, callback) {
      let postBody = putV3ProjectsIdServicesTeamcityRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdServicesTeamcity");
      }
      // verify the required parameter 'putV3ProjectsIdServicesTeamcityRequest' is set
      if (putV3ProjectsIdServicesTeamcityRequest === undefined || putV3ProjectsIdServicesTeamcityRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdServicesTeamcityRequest' when calling putV3ProjectsIdServicesTeamcity");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/projects/{id}/services/teamcity', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdSnippetsNoteableIdNotesNoteId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Note} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing +noteable+ note
     * Update an existing +noteable+ note
     * @param {String} id The ID of a project
     * @param {Number} noteableId The ID of the noteable
     * @param {Number} noteId The ID of a note
     * @param {module:model/PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest} putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest 
     * @param {module:api/ProjectsApi~putV3ProjectsIdSnippetsNoteableIdNotesNoteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Note}
     */
    putV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest, callback) {
      let postBody = putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteableId' is set
      if (noteableId === undefined || noteableId === null) {
        throw new Error("Missing the required parameter 'noteableId' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'noteId' is set
      if (noteId === undefined || noteId === null) {
        throw new Error("Missing the required parameter 'noteId' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }
      // verify the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' is set
      if (putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === undefined || putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest' when calling putV3ProjectsIdSnippetsNoteableIdNotesNoteId");
      }

      let pathParams = {
        'id': id,
        'noteable_id': noteableId,
        'note_id': noteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Note;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{noteable_id}/notes/{note_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdSnippetsSnippetId operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdSnippetsSnippetIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing project snippet
     * Update an existing project snippet
     * @param {String} id The ID of a project
     * @param {Number} snippetId The ID of a project snippet
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdSnippetsSnippetIdRequest} [putV3ProjectsIdSnippetsSnippetIdRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdSnippetsSnippetIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectSnippet}
     */
    putV3ProjectsIdSnippetsSnippetId(id, snippetId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdSnippetsSnippetIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdSnippetsSnippetId");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling putV3ProjectsIdSnippetsSnippetId");
      }

      let pathParams = {
        'id': id,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectSnippet;
      return this.apiClient.callApi(
        '/v3/projects/{id}/snippets/{snippet_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3ProjectsIdVariablesKey operation.
     * @callback module:api/ProjectsApi~putV3ProjectsIdVariablesKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Variable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing variable from a project
     * Update an existing variable from a project
     * @param {String} id The ID of a project
     * @param {String} key The key of the variable
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3ProjectsIdVariablesKeyRequest} [putV3ProjectsIdVariablesKeyRequest] 
     * @param {module:api/ProjectsApi~putV3ProjectsIdVariablesKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Variable}
     */
    putV3ProjectsIdVariablesKey(id, key, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3ProjectsIdVariablesKeyRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3ProjectsIdVariablesKey");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling putV3ProjectsIdVariablesKey");
      }

      let pathParams = {
        'id': id,
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Variable;
      return this.apiClient.callApi(
        '/v3/projects/{id}/variables/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
