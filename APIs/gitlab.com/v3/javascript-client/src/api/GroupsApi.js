/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessRequester from '../model/AccessRequester';
import Group from '../model/Group';
import GroupDetail from '../model/GroupDetail';
import Issue from '../model/Issue';
import Member from '../model/Member';
import NotificationSetting from '../model/NotificationSetting';
import PostV3GroupsIdMembersRequest from '../model/PostV3GroupsIdMembersRequest';
import PostV3GroupsRequest from '../model/PostV3GroupsRequest';
import Project from '../model/Project';
import PutV3GroupsIdAccessRequestsUserIdApproveRequest from '../model/PutV3GroupsIdAccessRequestsUserIdApproveRequest';
import PutV3GroupsIdMembersUserIdRequest from '../model/PutV3GroupsIdMembersUserIdRequest';
import PutV3GroupsIdNotificationSettingsRequest from '../model/PutV3GroupsIdNotificationSettingsRequest';
import PutV3GroupsIdRequest from '../model/PutV3GroupsIdRequest';

/**
* Groups service.
* @module api/GroupsApi
* @version v3
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV3GroupsId operation.
     * @callback module:api/GroupsApi~deleteV3GroupsIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a group.
     * Remove a group.
     * @param {String} id The ID of a group
     * @param {module:api/GroupsApi~deleteV3GroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3GroupsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3GroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/groups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3GroupsIdAccessRequestsUserId operation.
     * @callback module:api/GroupsApi~deleteV3GroupsIdAccessRequestsUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The group ID
     * @param {Number} userId The user ID of the access requester
     * @param {module:api/GroupsApi~deleteV3GroupsIdAccessRequestsUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3GroupsIdAccessRequestsUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3GroupsIdAccessRequestsUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteV3GroupsIdAccessRequestsUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/groups/{id}/access_requests/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3GroupsIdMembersUserId operation.
     * @callback module:api/GroupsApi~deleteV3GroupsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param {String} id The group ID
     * @param {Number} userId The user ID of the member
     * @param {module:api/GroupsApi~deleteV3GroupsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3GroupsIdMembersUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3GroupsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteV3GroupsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/groups/{id}/members/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3Groups operation.
     * @callback module:api/GroupsApi~getV3GroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a groups list
     * Get a groups list
     * @param {Object} opts Optional parameters
     * @param {Boolean} [statistics] Include project statistics
     * @param {Boolean} [allAvailable] Show all group that you have access to
     * @param {String} [search] Search for a specific group
     * @param {module:model/String} [orderBy = 'name')] Order by name or path
     * @param {module:model/String} [sort = 'asc')] Sort by asc (ascending) or desc (descending)
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Array.<Number>} [skipGroups] Array of group ids to exclude from list
     * @param {module:api/GroupsApi~getV3GroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getV3Groups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'statistics': opts['statistics'],
        'all_available': opts['allAvailable'],
        'search': opts['search'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
        'skip_groups': this.apiClient.buildCollectionParam(opts['skipGroups'], 'csv')
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v3/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsId operation.
     * @callback module:api/GroupsApi~getV3GroupsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single group, with containing projects.
     * Get a single group, with containing projects.
     * @param {String} id The ID of a group
     * @param {module:api/GroupsApi~getV3GroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupDetail}
     */
    getV3GroupsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupDetail;
      return this.apiClient.callApi(
        '/v3/groups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdAccessRequests operation.
     * @callback module:api/GroupsApi~getV3GroupsIdAccessRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessRequester} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of access requests for a group.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The group ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/GroupsApi~getV3GroupsIdAccessRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessRequester}
     */
    getV3GroupsIdAccessRequests(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdAccessRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessRequester;
      return this.apiClient.callApi(
        '/v3/groups/{id}/access_requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdIssues operation.
     * @callback module:api/GroupsApi~getV3GroupsIdIssuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Issue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of group issues
     * Get a list of group issues
     * @param {String} id The ID of a group
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [state = 'opened')] Return opened, closed, or all issues
     * @param {String} [labels] Comma-separated list of label names
     * @param {String} [milestone] Return issues for a specific milestone
     * @param {module:model/String} [orderBy = 'created_at')] Return issues ordered by `created_at` or `updated_at` fields.
     * @param {module:model/String} [sort = 'desc')] Return issues sorted in `asc` or `desc` order.
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/GroupsApi~getV3GroupsIdIssuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Issue}
     */
    getV3GroupsIdIssues(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdIssues");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'state': opts['state'],
        'labels': opts['labels'],
        'milestone': opts['milestone'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Issue;
      return this.apiClient.callApi(
        '/v3/groups/{id}/issues', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdMembers operation.
     * @callback module:api/GroupsApi~getV3GroupsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param {String} id The group ID
     * @param {Object} opts Optional parameters
     * @param {String} [query] A query string to search for members
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/GroupsApi~getV3GroupsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    getV3GroupsIdMembers(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': opts['query'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/groups/{id}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdMembersUserId operation.
     * @callback module:api/GroupsApi~getV3GroupsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param {String} id The group ID
     * @param {Number} userId The user ID of the member
     * @param {module:api/GroupsApi~getV3GroupsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    getV3GroupsIdMembersUserId(id, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getV3GroupsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/groups/{id}/members/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdNotificationSettings operation.
     * @callback module:api/GroupsApi~getV3GroupsIdNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param {String} id The group ID or project ID or project NAMESPACE/PROJECT_NAME
     * @param {module:api/GroupsApi~getV3GroupsIdNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    getV3GroupsIdNotificationSettings(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdNotificationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NotificationSetting;
      return this.apiClient.callApi(
        '/v3/groups/{id}/notification_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsIdProjects operation.
     * @callback module:api/GroupsApi~getV3GroupsIdProjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of projects in this group.
     * Get a list of projects in this group.
     * @param {String} id The ID of a group
     * @param {Object} opts Optional parameters
     * @param {Boolean} [archived] Limit by archived status
     * @param {module:model/String} [visibility] Limit by visibility
     * @param {String} [search] Return list of authorized projects matching the search criteria
     * @param {module:model/String} [orderBy = 'created_at')] Return projects ordered by field
     * @param {module:model/String} [sort = 'desc')] Return projects sorted in ascending and descending order
     * @param {Boolean} [simple] Return only the ID, URL, name, and path of each project
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/GroupsApi~getV3GroupsIdProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Project}
     */
    getV3GroupsIdProjects(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3GroupsIdProjects");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'archived': opts['archived'],
        'visibility': opts['visibility'],
        'search': opts['search'],
        'order_by': opts['orderBy'],
        'sort': opts['sort'],
        'simple': opts['simple'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;
      return this.apiClient.callApi(
        '/v3/groups/{id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3GroupsOwned operation.
     * @callback module:api/GroupsApi~getV3GroupsOwnedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of owned groups for authenticated user
     * Get list of owned groups for authenticated user
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {Boolean} [statistics] Include project statistics
     * @param {module:api/GroupsApi~getV3GroupsOwnedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    getV3GroupsOwned(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'statistics': opts['statistics']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v3/groups/owned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3Groups operation.
     * @callback module:api/GroupsApi~postV3GroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a group. Available only for users who can create groups.
     * Create a group. Available only for users who can create groups.
     * @param {module:model/PostV3GroupsRequest} postV3GroupsRequest 
     * @param {module:api/GroupsApi~postV3GroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    postV3Groups(postV3GroupsRequest, callback) {
      let postBody = postV3GroupsRequest;
      // verify the required parameter 'postV3GroupsRequest' is set
      if (postV3GroupsRequest === undefined || postV3GroupsRequest === null) {
        throw new Error("Missing the required parameter 'postV3GroupsRequest' when calling postV3Groups");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v3/groups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3GroupsIdAccessRequests operation.
     * @callback module:api/GroupsApi~postV3GroupsIdAccessRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessRequester} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Requests access for the authenticated user to a group.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The group ID
     * @param {module:api/GroupsApi~postV3GroupsIdAccessRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessRequester}
     */
    postV3GroupsIdAccessRequests(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3GroupsIdAccessRequests");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessRequester;
      return this.apiClient.callApi(
        '/v3/groups/{id}/access_requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3GroupsIdMembers operation.
     * @callback module:api/GroupsApi~postV3GroupsIdMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param {String} id The group ID
     * @param {module:model/PostV3GroupsIdMembersRequest} postV3GroupsIdMembersRequest 
     * @param {module:api/GroupsApi~postV3GroupsIdMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    postV3GroupsIdMembers(id, postV3GroupsIdMembersRequest, callback) {
      let postBody = postV3GroupsIdMembersRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3GroupsIdMembers");
      }
      // verify the required parameter 'postV3GroupsIdMembersRequest' is set
      if (postV3GroupsIdMembersRequest === undefined || postV3GroupsIdMembersRequest === null) {
        throw new Error("Missing the required parameter 'postV3GroupsIdMembersRequest' when calling postV3GroupsIdMembers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/groups/{id}/members', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3GroupsIdProjectsProjectId operation.
     * @callback module:api/GroupsApi~postV3GroupsIdProjectsProjectIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GroupDetail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transfer a project to the group namespace. Available only for admin.
     * Transfer a project to the group namespace. Available only for admin.
     * @param {String} id The ID of a group
     * @param {String} projectId The ID or path of the project
     * @param {module:api/GroupsApi~postV3GroupsIdProjectsProjectIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GroupDetail}
     */
    postV3GroupsIdProjectsProjectId(id, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postV3GroupsIdProjectsProjectId");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postV3GroupsIdProjectsProjectId");
      }

      let pathParams = {
        'id': id,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GroupDetail;
      return this.apiClient.callApi(
        '/v3/groups/{id}/projects/{project_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3GroupsId operation.
     * @callback module:api/GroupsApi~putV3GroupsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a group. Available only for users who can administrate groups.
     * Update a group. Available only for users who can administrate groups.
     * @param {String} id The ID of a group
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3GroupsIdRequest} [putV3GroupsIdRequest] 
     * @param {module:api/GroupsApi~putV3GroupsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    putV3GroupsId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3GroupsIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3GroupsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/v3/groups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3GroupsIdAccessRequestsUserIdApprove operation.
     * @callback module:api/GroupsApi~putV3GroupsIdAccessRequestsUserIdApproveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param {String} id The group ID
     * @param {Number} userId The user ID of the access requester
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3GroupsIdAccessRequestsUserIdApproveRequest} [putV3GroupsIdAccessRequestsUserIdApproveRequest] 
     * @param {module:api/GroupsApi~putV3GroupsIdAccessRequestsUserIdApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    putV3GroupsIdAccessRequestsUserIdApprove(id, userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3GroupsIdAccessRequestsUserIdApproveRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3GroupsIdAccessRequestsUserIdApprove");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putV3GroupsIdAccessRequestsUserIdApprove");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/groups/{id}/access_requests/{user_id}/approve', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3GroupsIdMembersUserId operation.
     * @callback module:api/GroupsApi~putV3GroupsIdMembersUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Member} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param {String} id The group ID
     * @param {Number} userId The user ID of the new member
     * @param {module:model/PutV3GroupsIdMembersUserIdRequest} putV3GroupsIdMembersUserIdRequest 
     * @param {module:api/GroupsApi~putV3GroupsIdMembersUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Member}
     */
    putV3GroupsIdMembersUserId(id, userId, putV3GroupsIdMembersUserIdRequest, callback) {
      let postBody = putV3GroupsIdMembersUserIdRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3GroupsIdMembersUserId");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling putV3GroupsIdMembersUserId");
      }
      // verify the required parameter 'putV3GroupsIdMembersUserIdRequest' is set
      if (putV3GroupsIdMembersUserIdRequest === undefined || putV3GroupsIdMembersUserIdRequest === null) {
        throw new Error("Missing the required parameter 'putV3GroupsIdMembersUserIdRequest' when calling putV3GroupsIdMembersUserId");
      }

      let pathParams = {
        'id': id,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Member;
      return this.apiClient.callApi(
        '/v3/groups/{id}/members/{user_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3GroupsIdNotificationSettings operation.
     * @callback module:api/GroupsApi~putV3GroupsIdNotificationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NotificationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param {String} id The group ID or project ID or project NAMESPACE/PROJECT_NAME
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3GroupsIdNotificationSettingsRequest} [putV3GroupsIdNotificationSettingsRequest] 
     * @param {module:api/GroupsApi~putV3GroupsIdNotificationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NotificationSetting}
     */
    putV3GroupsIdNotificationSettings(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3GroupsIdNotificationSettingsRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3GroupsIdNotificationSettings");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NotificationSetting;
      return this.apiClient.callApi(
        '/v3/groups/{id}/notification_settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
