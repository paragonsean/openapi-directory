/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PutV3RunnersIdRequest from '../model/PutV3RunnersIdRequest';
import Runner from '../model/Runner';
import RunnerDetails from '../model/RunnerDetails';

/**
* Runners service.
* @module api/RunnersApi
* @version v3
*/
export default class RunnersApi {

    /**
    * Constructs a new RunnersApi. 
    * @alias module:api/RunnersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV3RunnersId operation.
     * @callback module:api/RunnersApi~deleteV3RunnersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a runner
     * Remove a runner
     * @param {Number} id The ID of the runner
     * @param {module:api/RunnersApi~deleteV3RunnersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    deleteV3RunnersId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3RunnersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/runners/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3Runners operation.
     * @callback module:api/RunnersApi~getV3RunnersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get runners available for user
     * Get runners available for user
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope] The scope of specific runners to show
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/RunnersApi~getV3RunnersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    getV3Runners(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'scope': opts['scope'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/runners', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3RunnersAll operation.
     * @callback module:api/RunnersApi~getV3RunnersAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Runner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all runners - shared and specific
     * Get all runners - shared and specific
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [scope] The scope of specific runners to show
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/RunnersApi~getV3RunnersAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Runner}
     */
    getV3RunnersAll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'scope': opts['scope'],
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Runner;
      return this.apiClient.callApi(
        '/v3/runners/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3RunnersId operation.
     * @callback module:api/RunnersApi~getV3RunnersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunnerDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get runner's details
     * Get runner's details
     * @param {Number} id The ID of the runner
     * @param {module:api/RunnersApi~getV3RunnersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunnerDetails}
     */
    getV3RunnersId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3RunnersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RunnerDetails;
      return this.apiClient.callApi(
        '/v3/runners/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3RunnersId operation.
     * @callback module:api/RunnersApi~putV3RunnersIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RunnerDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update runner's details
     * Update runner's details
     * @param {Number} id The ID of the runner
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3RunnersIdRequest} [putV3RunnersIdRequest] 
     * @param {module:api/RunnersApi~putV3RunnersIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RunnerDetails}
     */
    putV3RunnersId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3RunnersIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3RunnersId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RunnerDetails;
      return this.apiClient.callApi(
        '/v3/runners/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
