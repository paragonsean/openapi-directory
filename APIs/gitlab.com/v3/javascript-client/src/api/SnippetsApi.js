/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PersonalSnippet from '../model/PersonalSnippet';
import PostV3SnippetsRequest from '../model/PostV3SnippetsRequest';
import PutV3SnippetsIdRequest from '../model/PutV3SnippetsIdRequest';

/**
* Snippets service.
* @module api/SnippetsApi
* @version v3
*/
export default class SnippetsApi {

    /**
    * Constructs a new SnippetsApi. 
    * @alias module:api/SnippetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV3SnippetsId operation.
     * @callback module:api/SnippetsApi~deleteV3SnippetsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove snippet
     * This feature was introduced in GitLab 8.15.
     * @param {Number} id The ID of a snippet
     * @param {module:api/SnippetsApi~deleteV3SnippetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    deleteV3SnippetsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteV3SnippetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3Snippets operation.
     * @callback module:api/SnippetsApi~getV3SnippetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a snippets list for authenticated user
     * This feature was introduced in GitLab 8.15.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/SnippetsApi~getV3SnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    getV3Snippets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3SnippetsId operation.
     * @callback module:api/SnippetsApi~getV3SnippetsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single snippet
     * This feature was introduced in GitLab 8.15.
     * @param {Number} id The ID of a snippet
     * @param {module:api/SnippetsApi~getV3SnippetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    getV3SnippetsId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3SnippetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3SnippetsIdRaw operation.
     * @callback module:api/SnippetsApi~getV3SnippetsIdRawCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a raw snippet
     * This feature was introduced in GitLab 8.15.
     * @param {Number} id The ID of a snippet
     * @param {module:api/SnippetsApi~getV3SnippetsIdRawCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getV3SnippetsIdRaw(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getV3SnippetsIdRaw");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/snippets/{id}/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3SnippetsPublic operation.
     * @callback module:api/SnippetsApi~getV3SnippetsPublicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all public snippets current_user has access to
     * This feature was introduced in GitLab 8.15.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Current page number
     * @param {Number} [perPage] Number of items per page
     * @param {module:api/SnippetsApi~getV3SnippetsPublicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    getV3SnippetsPublic(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets/public', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3Snippets operation.
     * @callback module:api/SnippetsApi~postV3SnippetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new snippet
     * This feature was introduced in GitLab 8.15.
     * @param {module:model/PostV3SnippetsRequest} postV3SnippetsRequest 
     * @param {module:api/SnippetsApi~postV3SnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    postV3Snippets(postV3SnippetsRequest, callback) {
      let postBody = postV3SnippetsRequest;
      // verify the required parameter 'postV3SnippetsRequest' is set
      if (postV3SnippetsRequest === undefined || postV3SnippetsRequest === null) {
        throw new Error("Missing the required parameter 'postV3SnippetsRequest' when calling postV3Snippets");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putV3SnippetsId operation.
     * @callback module:api/SnippetsApi~putV3SnippetsIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonalSnippet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing snippet
     * This feature was introduced in GitLab 8.15.
     * @param {Number} id The ID of a snippet
     * @param {Object} opts Optional parameters
     * @param {module:model/PutV3SnippetsIdRequest} [putV3SnippetsIdRequest] 
     * @param {module:api/SnippetsApi~putV3SnippetsIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonalSnippet}
     */
    putV3SnippetsId(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['putV3SnippetsIdRequest'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putV3SnippetsId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_query', 'private_token_header'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PersonalSnippet;
      return this.apiClient.callApi(
        '/v3/snippets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
