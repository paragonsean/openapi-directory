/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Gitlab);
  }
}(this, function(expect, Gitlab) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Gitlab.UserPublic();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserPublic', function() {
    it('should create an instance of UserPublic', function() {
      // uncomment below and update the code to test UserPublic
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be.a(Gitlab.UserPublic);
    });

    it('should have the property avatarUrl (base name: "avatar_url")', function() {
      // uncomment below and update the code to test the property avatarUrl
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property bio (base name: "bio")', function() {
      // uncomment below and update the code to test the property bio
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property canCreateGroup (base name: "can_create_group")', function() {
      // uncomment below and update the code to test the property canCreateGroup
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property canCreateProject (base name: "can_create_project")', function() {
      // uncomment below and update the code to test the property canCreateProject
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property colorSchemeId (base name: "color_scheme_id")', function() {
      // uncomment below and update the code to test the property colorSchemeId
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property confirmedAt (base name: "confirmed_at")', function() {
      // uncomment below and update the code to test the property confirmedAt
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property currentSignInAt (base name: "current_sign_in_at")', function() {
      // uncomment below and update the code to test the property currentSignInAt
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property external (base name: "external")', function() {
      // uncomment below and update the code to test the property external
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property identities (base name: "identities")', function() {
      // uncomment below and update the code to test the property identities
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property isAdmin (base name: "is_admin")', function() {
      // uncomment below and update the code to test the property isAdmin
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property lastSignInAt (base name: "last_sign_in_at")', function() {
      // uncomment below and update the code to test the property lastSignInAt
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property linkedin (base name: "linkedin")', function() {
      // uncomment below and update the code to test the property linkedin
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property location (base name: "location")', function() {
      // uncomment below and update the code to test the property location
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property projectsLimit (base name: "projects_limit")', function() {
      // uncomment below and update the code to test the property projectsLimit
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property skype (base name: "skype")', function() {
      // uncomment below and update the code to test the property skype
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property themeId (base name: "theme_id")', function() {
      // uncomment below and update the code to test the property themeId
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property twitter (base name: "twitter")', function() {
      // uncomment below and update the code to test the property twitter
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property twoFactorEnabled (base name: "two_factor_enabled")', function() {
      // uncomment below and update the code to test the property twoFactorEnabled
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "username")', function() {
      // uncomment below and update the code to test the property username
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property webUrl (base name: "web_url")', function() {
      // uncomment below and update the code to test the property webUrl
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

    it('should have the property websiteUrl (base name: "website_url")', function() {
      // uncomment below and update the code to test the property websiteUrl
      //var instance = new Gitlab.UserPublic();
      //expect(instance).to.be();
    });

  });

}));
