/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Gitlab);
  }
}(this, function(expect, Gitlab) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Gitlab.PutV3ApplicationSettingsRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PutV3ApplicationSettingsRequest', function() {
    it('should create an instance of PutV3ApplicationSettingsRequest', function() {
      // uncomment below and update the code to test PutV3ApplicationSettingsRequest
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be.a(Gitlab.PutV3ApplicationSettingsRequest);
    });

    it('should have the property defaultBranchProtection (base name: "default_branch_protection")', function() {
      // uncomment below and update the code to test the property defaultBranchProtection
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property defaultProjectVisibility (base name: "default_project_visibility")', function() {
      // uncomment below and update the code to test the property defaultProjectVisibility
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property defaultSnippetVisibility (base name: "default_snippet_visibility")', function() {
      // uncomment below and update the code to test the property defaultSnippetVisibility
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property defaultGroupVisibility (base name: "default_group_visibility")', function() {
      // uncomment below and update the code to test the property defaultGroupVisibility
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property restrictedVisibilityLevels (base name: "restricted_visibility_levels")', function() {
      // uncomment below and update the code to test the property restrictedVisibilityLevels
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property importSources (base name: "import_sources")', function() {
      // uncomment below and update the code to test the property importSources
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property disabledOauthSignInSources (base name: "disabled_oauth_sign_in_sources")', function() {
      // uncomment below and update the code to test the property disabledOauthSignInSources
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property enabledGitAccessProtocol (base name: "enabled_git_access_protocol")', function() {
      // uncomment below and update the code to test the property enabledGitAccessProtocol
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property gravatarEnabled (base name: "gravatar_enabled")', function() {
      // uncomment below and update the code to test the property gravatarEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property defaultProjectsLimit (base name: "default_projects_limit")', function() {
      // uncomment below and update the code to test the property defaultProjectsLimit
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property maxAttachmentSize (base name: "max_attachment_size")', function() {
      // uncomment below and update the code to test the property maxAttachmentSize
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sessionExpireDelay (base name: "session_expire_delay")', function() {
      // uncomment below and update the code to test the property sessionExpireDelay
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property userOauthApplications (base name: "user_oauth_applications")', function() {
      // uncomment below and update the code to test the property userOauthApplications
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property userDefaultExternal (base name: "user_default_external")', function() {
      // uncomment below and update the code to test the property userDefaultExternal
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property signupEnabled (base name: "signup_enabled")', function() {
      // uncomment below and update the code to test the property signupEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sendUserConfirmationEmail (base name: "send_user_confirmation_email")', function() {
      // uncomment below and update the code to test the property sendUserConfirmationEmail
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property domainWhitelist (base name: "domain_whitelist")', function() {
      // uncomment below and update the code to test the property domainWhitelist
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property domainBlacklistEnabled (base name: "domain_blacklist_enabled")', function() {
      // uncomment below and update the code to test the property domainBlacklistEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property domainBlacklist (base name: "domain_blacklist")', function() {
      // uncomment below and update the code to test the property domainBlacklist
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property afterSignUpText (base name: "after_sign_up_text")', function() {
      // uncomment below and update the code to test the property afterSignUpText
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property signinEnabled (base name: "signin_enabled")', function() {
      // uncomment below and update the code to test the property signinEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property requireTwoFactorAuthentication (base name: "require_two_factor_authentication")', function() {
      // uncomment below and update the code to test the property requireTwoFactorAuthentication
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property twoFactorGracePeriod (base name: "two_factor_grace_period")', function() {
      // uncomment below and update the code to test the property twoFactorGracePeriod
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property homePageUrl (base name: "home_page_url")', function() {
      // uncomment below and update the code to test the property homePageUrl
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property afterSignOutPath (base name: "after_sign_out_path")', function() {
      // uncomment below and update the code to test the property afterSignOutPath
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property signInText (base name: "sign_in_text")', function() {
      // uncomment below and update the code to test the property signInText
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property helpPageText (base name: "help_page_text")', function() {
      // uncomment below and update the code to test the property helpPageText
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sharedRunnersEnabled (base name: "shared_runners_enabled")', function() {
      // uncomment below and update the code to test the property sharedRunnersEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sharedRunnersText (base name: "shared_runners_text")', function() {
      // uncomment below and update the code to test the property sharedRunnersText
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property maxArtifactsSize (base name: "max_artifacts_size")', function() {
      // uncomment below and update the code to test the property maxArtifactsSize
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property containerRegistryTokenExpireDelay (base name: "container_registry_token_expire_delay")', function() {
      // uncomment below and update the code to test the property containerRegistryTokenExpireDelay
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsEnabled (base name: "metrics_enabled")', function() {
      // uncomment below and update the code to test the property metricsEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsHost (base name: "metrics_host")', function() {
      // uncomment below and update the code to test the property metricsHost
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsPort (base name: "metrics_port")', function() {
      // uncomment below and update the code to test the property metricsPort
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsPoolSize (base name: "metrics_pool_size")', function() {
      // uncomment below and update the code to test the property metricsPoolSize
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsTimeout (base name: "metrics_timeout")', function() {
      // uncomment below and update the code to test the property metricsTimeout
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsMethodCallThreshold (base name: "metrics_method_call_threshold")', function() {
      // uncomment below and update the code to test the property metricsMethodCallThreshold
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsSampleInterval (base name: "metrics_sample_interval")', function() {
      // uncomment below and update the code to test the property metricsSampleInterval
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property metricsPacketSize (base name: "metrics_packet_size")', function() {
      // uncomment below and update the code to test the property metricsPacketSize
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sidekiqThrottlingEnabled (base name: "sidekiq_throttling_enabled")', function() {
      // uncomment below and update the code to test the property sidekiqThrottlingEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sidekiqThrottlingQueus (base name: "sidekiq_throttling_queus")', function() {
      // uncomment below and update the code to test the property sidekiqThrottlingQueus
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sidekiqThrottlingFactor (base name: "sidekiq_throttling_factor")', function() {
      // uncomment below and update the code to test the property sidekiqThrottlingFactor
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property recaptchaEnabled (base name: "recaptcha_enabled")', function() {
      // uncomment below and update the code to test the property recaptchaEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property recaptchaSiteKey (base name: "recaptcha_site_key")', function() {
      // uncomment below and update the code to test the property recaptchaSiteKey
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property recaptchaPrivateKey (base name: "recaptcha_private_key")', function() {
      // uncomment below and update the code to test the property recaptchaPrivateKey
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property akismetEnabled (base name: "akismet_enabled")', function() {
      // uncomment below and update the code to test the property akismetEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property akismetApiKey (base name: "akismet_api_key")', function() {
      // uncomment below and update the code to test the property akismetApiKey
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property adminNotificationEmail (base name: "admin_notification_email")', function() {
      // uncomment below and update the code to test the property adminNotificationEmail
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sentryEnabled (base name: "sentry_enabled")', function() {
      // uncomment below and update the code to test the property sentryEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sentryDsn (base name: "sentry_dsn")', function() {
      // uncomment below and update the code to test the property sentryDsn
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property repositoryStorage (base name: "repository_storage")', function() {
      // uncomment below and update the code to test the property repositoryStorage
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property repositoryChecksEnabled (base name: "repository_checks_enabled")', function() {
      // uncomment below and update the code to test the property repositoryChecksEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property kodingEnabled (base name: "koding_enabled")', function() {
      // uncomment below and update the code to test the property kodingEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property kodingUrl (base name: "koding_url")', function() {
      // uncomment below and update the code to test the property kodingUrl
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property plantumlEnabled (base name: "plantuml_enabled")', function() {
      // uncomment below and update the code to test the property plantumlEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property plantumlUrl (base name: "plantuml_url")', function() {
      // uncomment below and update the code to test the property plantumlUrl
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property versionCheckEnabled (base name: "version_check_enabled")', function() {
      // uncomment below and update the code to test the property versionCheckEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property emailAuthorInBody (base name: "email_author_in_body")', function() {
      // uncomment below and update the code to test the property emailAuthorInBody
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property htmlEmailsEnabled (base name: "html_emails_enabled")', function() {
      // uncomment below and update the code to test the property htmlEmailsEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property housekeepingEnabled (base name: "housekeeping_enabled")', function() {
      // uncomment below and update the code to test the property housekeepingEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property housekeepingBitmapsEnabled (base name: "housekeeping_bitmaps_enabled")', function() {
      // uncomment below and update the code to test the property housekeepingBitmapsEnabled
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property housekeepingIncrementalRepackPeriod (base name: "housekeeping_incremental_repack_period")', function() {
      // uncomment below and update the code to test the property housekeepingIncrementalRepackPeriod
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property housekeepingFullRepackPeriod (base name: "housekeeping_full_repack_period")', function() {
      // uncomment below and update the code to test the property housekeepingFullRepackPeriod
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

    it('should have the property housekeepingGcPeriod (base name: "housekeeping_gc_period")', function() {
      // uncomment below and update the code to test the property housekeepingGcPeriod
      //var instance = new Gitlab.PutV3ApplicationSettingsRequest();
      //expect(instance).to.be();
    });

  });

}));
