/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Gitlab);
  }
}(this, function(expect, Gitlab) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Gitlab.PostV3ProjectsRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PostV3ProjectsRequest', function() {
    it('should create an instance of PostV3ProjectsRequest', function() {
      // uncomment below and update the code to test PostV3ProjectsRequest
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be.a(Gitlab.PostV3ProjectsRequest);
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property issuesEnabled (base name: "issues_enabled")', function() {
      // uncomment below and update the code to test the property issuesEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property mergeRequestsEnabled (base name: "merge_requests_enabled")', function() {
      // uncomment below and update the code to test the property mergeRequestsEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property wikiEnabled (base name: "wiki_enabled")', function() {
      // uncomment below and update the code to test the property wikiEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property buildsEnabled (base name: "builds_enabled")', function() {
      // uncomment below and update the code to test the property buildsEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property snippetsEnabled (base name: "snippets_enabled")', function() {
      // uncomment below and update the code to test the property snippetsEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property sharedRunnersEnabled (base name: "shared_runners_enabled")', function() {
      // uncomment below and update the code to test the property sharedRunnersEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property containerRegistryEnabled (base name: "container_registry_enabled")', function() {
      // uncomment below and update the code to test the property containerRegistryEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property lfsEnabled (base name: "lfs_enabled")', function() {
      // uncomment below and update the code to test the property lfsEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property _public (base name: "public")', function() {
      // uncomment below and update the code to test the property _public
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property visibilityLevel (base name: "visibility_level")', function() {
      // uncomment below and update the code to test the property visibilityLevel
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property publicBuilds (base name: "public_builds")', function() {
      // uncomment below and update the code to test the property publicBuilds
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property requestAccessEnabled (base name: "request_access_enabled")', function() {
      // uncomment below and update the code to test the property requestAccessEnabled
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property onlyAllowMergeIfBuildSucceeds (base name: "only_allow_merge_if_build_succeeds")', function() {
      // uncomment below and update the code to test the property onlyAllowMergeIfBuildSucceeds
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property onlyAllowMergeIfAllDiscussionsAreResolved (base name: "only_allow_merge_if_all_discussions_are_resolved")', function() {
      // uncomment below and update the code to test the property onlyAllowMergeIfAllDiscussionsAreResolved
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property namespaceId (base name: "namespace_id")', function() {
      // uncomment below and update the code to test the property namespaceId
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

    it('should have the property importUrl (base name: "import_url")', function() {
      // uncomment below and update the code to test the property importUrl
      //var instance = new Gitlab.PostV3ProjectsRequest();
      //expect(instance).to.be();
    });

  });

}));
