/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PutV3ApplicationSettingsRequest
 */
public class PutV3ApplicationSettingsRequestTest {
    private final PutV3ApplicationSettingsRequest model = new PutV3ApplicationSettingsRequest();

    /**
     * Model tests for PutV3ApplicationSettingsRequest
     */
    @Test
    public void testPutV3ApplicationSettingsRequest() {
        // TODO: test PutV3ApplicationSettingsRequest
    }

    /**
     * Test the property 'defaultBranchProtection'
     */
    @Test
    public void defaultBranchProtectionTest() {
        // TODO: test defaultBranchProtection
    }

    /**
     * Test the property 'defaultProjectVisibility'
     */
    @Test
    public void defaultProjectVisibilityTest() {
        // TODO: test defaultProjectVisibility
    }

    /**
     * Test the property 'defaultSnippetVisibility'
     */
    @Test
    public void defaultSnippetVisibilityTest() {
        // TODO: test defaultSnippetVisibility
    }

    /**
     * Test the property 'defaultGroupVisibility'
     */
    @Test
    public void defaultGroupVisibilityTest() {
        // TODO: test defaultGroupVisibility
    }

    /**
     * Test the property 'restrictedVisibilityLevels'
     */
    @Test
    public void restrictedVisibilityLevelsTest() {
        // TODO: test restrictedVisibilityLevels
    }

    /**
     * Test the property 'importSources'
     */
    @Test
    public void importSourcesTest() {
        // TODO: test importSources
    }

    /**
     * Test the property 'disabledOauthSignInSources'
     */
    @Test
    public void disabledOauthSignInSourcesTest() {
        // TODO: test disabledOauthSignInSources
    }

    /**
     * Test the property 'enabledGitAccessProtocol'
     */
    @Test
    public void enabledGitAccessProtocolTest() {
        // TODO: test enabledGitAccessProtocol
    }

    /**
     * Test the property 'gravatarEnabled'
     */
    @Test
    public void gravatarEnabledTest() {
        // TODO: test gravatarEnabled
    }

    /**
     * Test the property 'defaultProjectsLimit'
     */
    @Test
    public void defaultProjectsLimitTest() {
        // TODO: test defaultProjectsLimit
    }

    /**
     * Test the property 'maxAttachmentSize'
     */
    @Test
    public void maxAttachmentSizeTest() {
        // TODO: test maxAttachmentSize
    }

    /**
     * Test the property 'sessionExpireDelay'
     */
    @Test
    public void sessionExpireDelayTest() {
        // TODO: test sessionExpireDelay
    }

    /**
     * Test the property 'userOauthApplications'
     */
    @Test
    public void userOauthApplicationsTest() {
        // TODO: test userOauthApplications
    }

    /**
     * Test the property 'userDefaultExternal'
     */
    @Test
    public void userDefaultExternalTest() {
        // TODO: test userDefaultExternal
    }

    /**
     * Test the property 'signupEnabled'
     */
    @Test
    public void signupEnabledTest() {
        // TODO: test signupEnabled
    }

    /**
     * Test the property 'sendUserConfirmationEmail'
     */
    @Test
    public void sendUserConfirmationEmailTest() {
        // TODO: test sendUserConfirmationEmail
    }

    /**
     * Test the property 'domainWhitelist'
     */
    @Test
    public void domainWhitelistTest() {
        // TODO: test domainWhitelist
    }

    /**
     * Test the property 'domainBlacklistEnabled'
     */
    @Test
    public void domainBlacklistEnabledTest() {
        // TODO: test domainBlacklistEnabled
    }

    /**
     * Test the property 'domainBlacklist'
     */
    @Test
    public void domainBlacklistTest() {
        // TODO: test domainBlacklist
    }

    /**
     * Test the property 'afterSignUpText'
     */
    @Test
    public void afterSignUpTextTest() {
        // TODO: test afterSignUpText
    }

    /**
     * Test the property 'signinEnabled'
     */
    @Test
    public void signinEnabledTest() {
        // TODO: test signinEnabled
    }

    /**
     * Test the property 'requireTwoFactorAuthentication'
     */
    @Test
    public void requireTwoFactorAuthenticationTest() {
        // TODO: test requireTwoFactorAuthentication
    }

    /**
     * Test the property 'twoFactorGracePeriod'
     */
    @Test
    public void twoFactorGracePeriodTest() {
        // TODO: test twoFactorGracePeriod
    }

    /**
     * Test the property 'homePageUrl'
     */
    @Test
    public void homePageUrlTest() {
        // TODO: test homePageUrl
    }

    /**
     * Test the property 'afterSignOutPath'
     */
    @Test
    public void afterSignOutPathTest() {
        // TODO: test afterSignOutPath
    }

    /**
     * Test the property 'signInText'
     */
    @Test
    public void signInTextTest() {
        // TODO: test signInText
    }

    /**
     * Test the property 'helpPageText'
     */
    @Test
    public void helpPageTextTest() {
        // TODO: test helpPageText
    }

    /**
     * Test the property 'sharedRunnersEnabled'
     */
    @Test
    public void sharedRunnersEnabledTest() {
        // TODO: test sharedRunnersEnabled
    }

    /**
     * Test the property 'sharedRunnersText'
     */
    @Test
    public void sharedRunnersTextTest() {
        // TODO: test sharedRunnersText
    }

    /**
     * Test the property 'maxArtifactsSize'
     */
    @Test
    public void maxArtifactsSizeTest() {
        // TODO: test maxArtifactsSize
    }

    /**
     * Test the property 'containerRegistryTokenExpireDelay'
     */
    @Test
    public void containerRegistryTokenExpireDelayTest() {
        // TODO: test containerRegistryTokenExpireDelay
    }

    /**
     * Test the property 'metricsEnabled'
     */
    @Test
    public void metricsEnabledTest() {
        // TODO: test metricsEnabled
    }

    /**
     * Test the property 'metricsHost'
     */
    @Test
    public void metricsHostTest() {
        // TODO: test metricsHost
    }

    /**
     * Test the property 'metricsPort'
     */
    @Test
    public void metricsPortTest() {
        // TODO: test metricsPort
    }

    /**
     * Test the property 'metricsPoolSize'
     */
    @Test
    public void metricsPoolSizeTest() {
        // TODO: test metricsPoolSize
    }

    /**
     * Test the property 'metricsTimeout'
     */
    @Test
    public void metricsTimeoutTest() {
        // TODO: test metricsTimeout
    }

    /**
     * Test the property 'metricsMethodCallThreshold'
     */
    @Test
    public void metricsMethodCallThresholdTest() {
        // TODO: test metricsMethodCallThreshold
    }

    /**
     * Test the property 'metricsSampleInterval'
     */
    @Test
    public void metricsSampleIntervalTest() {
        // TODO: test metricsSampleInterval
    }

    /**
     * Test the property 'metricsPacketSize'
     */
    @Test
    public void metricsPacketSizeTest() {
        // TODO: test metricsPacketSize
    }

    /**
     * Test the property 'sidekiqThrottlingEnabled'
     */
    @Test
    public void sidekiqThrottlingEnabledTest() {
        // TODO: test sidekiqThrottlingEnabled
    }

    /**
     * Test the property 'sidekiqThrottlingQueus'
     */
    @Test
    public void sidekiqThrottlingQueusTest() {
        // TODO: test sidekiqThrottlingQueus
    }

    /**
     * Test the property 'sidekiqThrottlingFactor'
     */
    @Test
    public void sidekiqThrottlingFactorTest() {
        // TODO: test sidekiqThrottlingFactor
    }

    /**
     * Test the property 'recaptchaEnabled'
     */
    @Test
    public void recaptchaEnabledTest() {
        // TODO: test recaptchaEnabled
    }

    /**
     * Test the property 'recaptchaSiteKey'
     */
    @Test
    public void recaptchaSiteKeyTest() {
        // TODO: test recaptchaSiteKey
    }

    /**
     * Test the property 'recaptchaPrivateKey'
     */
    @Test
    public void recaptchaPrivateKeyTest() {
        // TODO: test recaptchaPrivateKey
    }

    /**
     * Test the property 'akismetEnabled'
     */
    @Test
    public void akismetEnabledTest() {
        // TODO: test akismetEnabled
    }

    /**
     * Test the property 'akismetApiKey'
     */
    @Test
    public void akismetApiKeyTest() {
        // TODO: test akismetApiKey
    }

    /**
     * Test the property 'adminNotificationEmail'
     */
    @Test
    public void adminNotificationEmailTest() {
        // TODO: test adminNotificationEmail
    }

    /**
     * Test the property 'sentryEnabled'
     */
    @Test
    public void sentryEnabledTest() {
        // TODO: test sentryEnabled
    }

    /**
     * Test the property 'sentryDsn'
     */
    @Test
    public void sentryDsnTest() {
        // TODO: test sentryDsn
    }

    /**
     * Test the property 'repositoryStorage'
     */
    @Test
    public void repositoryStorageTest() {
        // TODO: test repositoryStorage
    }

    /**
     * Test the property 'repositoryChecksEnabled'
     */
    @Test
    public void repositoryChecksEnabledTest() {
        // TODO: test repositoryChecksEnabled
    }

    /**
     * Test the property 'kodingEnabled'
     */
    @Test
    public void kodingEnabledTest() {
        // TODO: test kodingEnabled
    }

    /**
     * Test the property 'kodingUrl'
     */
    @Test
    public void kodingUrlTest() {
        // TODO: test kodingUrl
    }

    /**
     * Test the property 'plantumlEnabled'
     */
    @Test
    public void plantumlEnabledTest() {
        // TODO: test plantumlEnabled
    }

    /**
     * Test the property 'plantumlUrl'
     */
    @Test
    public void plantumlUrlTest() {
        // TODO: test plantumlUrl
    }

    /**
     * Test the property 'versionCheckEnabled'
     */
    @Test
    public void versionCheckEnabledTest() {
        // TODO: test versionCheckEnabled
    }

    /**
     * Test the property 'emailAuthorInBody'
     */
    @Test
    public void emailAuthorInBodyTest() {
        // TODO: test emailAuthorInBody
    }

    /**
     * Test the property 'htmlEmailsEnabled'
     */
    @Test
    public void htmlEmailsEnabledTest() {
        // TODO: test htmlEmailsEnabled
    }

    /**
     * Test the property 'housekeepingEnabled'
     */
    @Test
    public void housekeepingEnabledTest() {
        // TODO: test housekeepingEnabled
    }

    /**
     * Test the property 'housekeepingBitmapsEnabled'
     */
    @Test
    public void housekeepingBitmapsEnabledTest() {
        // TODO: test housekeepingBitmapsEnabled
    }

    /**
     * Test the property 'housekeepingIncrementalRepackPeriod'
     */
    @Test
    public void housekeepingIncrementalRepackPeriodTest() {
        // TODO: test housekeepingIncrementalRepackPeriod
    }

    /**
     * Test the property 'housekeepingFullRepackPeriod'
     */
    @Test
    public void housekeepingFullRepackPeriodTest() {
        // TODO: test housekeepingFullRepackPeriod
    }

    /**
     * Test the property 'housekeepingGcPeriod'
     */
    @Test
    public void housekeepingGcPeriodTest() {
        // TODO: test housekeepingGcPeriod
    }

}
