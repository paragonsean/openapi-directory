/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.PostV3UserKeysRequest;
import org.openapitools.client.model.PostV3UsersIdEmailsRequest;
import org.openapitools.client.model.PostV3UsersRequest;
import org.openapitools.client.model.PutV3UsersIdRequest;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.UserBasic;
import org.openapitools.client.model.UserPublic;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete a user. Available only for admins.
     *
     * Delete a user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3UsersIdTest() throws ApiException {
        Integer id = null;
        Email response = api.deleteV3UsersId(id);
        // TODO: test validations
    }

    /**
     * Delete an email address of a specified user. Available only for admins.
     *
     * Delete an email address of a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3UsersIdEmailsEmailIdTest() throws ApiException {
        Integer id = null;
        Integer emailId = null;
        Email response = api.deleteV3UsersIdEmailsEmailId(id, emailId);
        // TODO: test validations
    }

    /**
     * Delete an existing SSH key from a specified user. Available only for admins.
     *
     * Delete an existing SSH key from a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3UsersIdKeysKeyIdTest() throws ApiException {
        Integer id = null;
        Integer keyId = null;
        SSHKey response = api.deleteV3UsersIdKeysKeyId(id, keyId);
        // TODO: test validations
    }

    /**
     * Get the list of users
     *
     * Get the list of users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3UsersTest() throws ApiException {
        String username = null;
        String search = null;
        Boolean active = null;
        Boolean external = null;
        Boolean blocked = null;
        Integer page = null;
        Integer perPage = null;
        UserBasic response = api.getV3Users(username, search, active, external, blocked, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a single user
     *
     * Get a single user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3UsersIdTest() throws ApiException {
        Integer id = null;
        UserBasic response = api.getV3UsersId(id);
        // TODO: test validations
    }

    /**
     * Get the emails addresses of a specified user. Available only for admins.
     *
     * Get the emails addresses of a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3UsersIdEmailsTest() throws ApiException {
        Integer id = null;
        Email response = api.getV3UsersIdEmails(id);
        // TODO: test validations
    }

    /**
     * Get the contribution events of a specified user
     *
     * This feature was introduced in GitLab 8.13.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3UsersIdEventsTest() throws ApiException {
        Integer id = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.getV3UsersIdEvents(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the SSH keys of a specified user. Available only for admins.
     *
     * Get the SSH keys of a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3UsersIdKeysTest() throws ApiException {
        Integer id = null;
        SSHKey response = api.getV3UsersIdKeys(id);
        // TODO: test validations
    }

    /**
     * Create a user. Available only for admins.
     *
     * Create a user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3UsersTest() throws ApiException {
        PostV3UsersRequest postV3UsersRequest = null;
        UserPublic response = api.postV3Users(postV3UsersRequest);
        // TODO: test validations
    }

    /**
     * Add an email address to a specified user. Available only for admins.
     *
     * Add an email address to a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3UsersIdEmailsTest() throws ApiException {
        Integer id = null;
        PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest = null;
        Email response = api.postV3UsersIdEmails(id, postV3UsersIdEmailsRequest);
        // TODO: test validations
    }

    /**
     * Add an SSH key to a specified user. Available only for admins.
     *
     * Add an SSH key to a specified user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3UsersIdKeysTest() throws ApiException {
        Integer id = null;
        PostV3UserKeysRequest postV3UserKeysRequest = null;
        SSHKey response = api.postV3UsersIdKeys(id, postV3UserKeysRequest);
        // TODO: test validations
    }

    /**
     * Update a user. Available only for admins.
     *
     * Update a user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3UsersIdTest() throws ApiException {
        Integer id = null;
        PutV3UsersIdRequest putV3UsersIdRequest = null;
        UserPublic response = api.putV3UsersId(id, putV3UsersIdRequest);
        // TODO: test validations
    }

    /**
     * Block a user. Available only for admins.
     *
     * Block a user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3UsersIdBlockTest() throws ApiException {
        Integer id = null;
        api.putV3UsersIdBlock(id);
        // TODO: test validations
    }

    /**
     * Unblock a user. Available only for admins.
     *
     * Unblock a user. Available only for admins.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3UsersIdUnblockTest() throws ApiException {
        Integer id = null;
        api.putV3UsersIdUnblock(id);
        // TODO: test validations
    }

}
