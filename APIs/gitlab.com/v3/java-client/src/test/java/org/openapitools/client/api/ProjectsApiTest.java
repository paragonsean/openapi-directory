/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccessRequester;
import org.openapitools.client.model.AwardEmoji;
import org.openapitools.client.model.BasicProjectDetails;
import org.openapitools.client.model.Board;
import org.openapitools.client.model.Build;
import org.openapitools.client.model.CommitNote;
import org.openapitools.client.model.CommitStatus;
import org.openapitools.client.model.Compare;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.Deployment;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.Label;
import org.openapitools.client.model.MRNote;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.MergeRequest;
import org.openapitools.client.model.MergeRequestChanges;
import org.openapitools.client.model.MergeRequestDiff;
import org.openapitools.client.model.MergeRequestDiffFull;
import org.openapitools.client.model.Milestone;
import org.openapitools.client.model.ModelList;
import org.openapitools.client.model.Note;
import org.openapitools.client.model.NotificationSetting;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PostV3GroupsIdMembersRequest;
import org.openapitools.client.model.PostV3ProjectsForkIdRequest;
import org.openapitools.client.model.PostV3ProjectsIdBoardsBoardIdListsRequest;
import org.openapitools.client.model.PostV3ProjectsIdDeployKeysRequest;
import org.openapitools.client.model.PostV3ProjectsIdEnvironmentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdHooksRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesIssueIdMoveRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesNoteableIdNotesRequest;
import org.openapitools.client.model.PostV3ProjectsIdIssuesRequest;
import org.openapitools.client.model.PostV3ProjectsIdLabelsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMergeRequestsRequest;
import org.openapitools.client.model.PostV3ProjectsIdMilestonesRequest;
import org.openapitools.client.model.PostV3ProjectsIdPipelineRequest;
import org.openapitools.client.model.PostV3ProjectsIdRefRefTriggerBuildsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryBranchesRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryCommitsShaCommentsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRepositoryTagsRequest;
import org.openapitools.client.model.PostV3ProjectsIdRunnersRequest;
import org.openapitools.client.model.PostV3ProjectsIdShareRequest;
import org.openapitools.client.model.PostV3ProjectsIdSnippetsRequest;
import org.openapitools.client.model.PostV3ProjectsIdStatusesShaRequest;
import org.openapitools.client.model.PostV3ProjectsIdUploadsRequest;
import org.openapitools.client.model.PostV3ProjectsIdVariablesRequest;
import org.openapitools.client.model.PostV3ProjectsRequest;
import org.openapitools.client.model.PostV3ProjectsUserUserIdRequest;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.ProjectGroupLink;
import org.openapitools.client.model.ProjectHook;
import org.openapitools.client.model.ProjectService;
import org.openapitools.client.model.ProjectSnippet;
import org.openapitools.client.model.ProjectWithAccess;
import org.openapitools.client.model.PutV3GroupsIdAccessRequestsUserIdApproveRequest;
import org.openapitools.client.model.PutV3GroupsIdMembersUserIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdBoardsBoardIdListsListIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdEnvironmentsEnvironmentIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdIssuesIssueIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdLabelsRequest;
import org.openapitools.client.model.PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest;
import org.openapitools.client.model.PutV3ProjectsIdMergeRequestMergeRequestIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdMilestonesMilestoneIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdNotificationSettingsRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryBranchesBranchProtectRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryFilesRequest;
import org.openapitools.client.model.PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest;
import org.openapitools.client.model.PutV3ProjectsIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesAsanaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesAssemblaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBambooRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBugzillaRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBuildkiteRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesBuildsEmailRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesCampfireRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesDroneCiRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesEmailsOnPushRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesExternalWikiRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesFlowdockRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesGemnasiumRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesHipchatRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesIrkerRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesJiraRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesKubernetesRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesMattermostRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesMattermostSlashCommandsRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPipelinesEmailRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPivotaltrackerRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesPushoverRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesRedmineRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesSlackRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesSlackSlashCommandsRequest;
import org.openapitools.client.model.PutV3ProjectsIdServicesTeamcityRequest;
import org.openapitools.client.model.PutV3ProjectsIdSnippetsSnippetIdRequest;
import org.openapitools.client.model.PutV3ProjectsIdVariablesKeyRequest;
import org.openapitools.client.model.Release;
import org.openapitools.client.model.RepoBranch;
import org.openapitools.client.model.RepoCommit;
import org.openapitools.client.model.RepoCommitDetail;
import org.openapitools.client.model.RepoTag;
import org.openapitools.client.model.RepoTreeObject;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.Todo;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.TriggerRequest;
import org.openapitools.client.model.UserBasic;
import org.openapitools.client.model.Variable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Remove a project
     *
     * Remove a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdTest() throws ApiException {
        String id = null;
        api.deleteV3ProjectsId(id);
        // TODO: test validations
    }

    /**
     * Denies an access request for the given user.
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdAccessRequestsUserIdTest() throws ApiException {
        String id = null;
        Integer userId = null;
        api.deleteV3ProjectsIdAccessRequestsUserId(id, userId);
        // TODO: test validations
    }

    /**
     * Delete a board list
     *
     * This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdBoardsBoardIdListsListIdTest() throws ApiException {
        String id = null;
        Integer boardId = null;
        Integer listId = null;
        ModelList response = api.deleteV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId);
        // TODO: test validations
    }

    /**
     * Delete deploy key for a project
     *
     * Delete deploy key for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdDeployKeysKeyIdTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.deleteV3ProjectsIdDeployKeysKeyId(id, keyId);
        // TODO: test validations
    }

    /**
     * Disable a deploy key for a project
     *
     * This feature was added in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdDeployKeysKeyIdDisableTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.deleteV3ProjectsIdDeployKeysKeyIdDisable(id, keyId);
        // TODO: test validations
    }

    /**
     * Deletes an existing environment
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdEnvironmentsEnvironmentIdTest() throws ApiException {
        String id = null;
        Integer environmentId = null;
        Environment response = api.deleteV3ProjectsIdEnvironmentsEnvironmentId(id, environmentId);
        // TODO: test validations
    }

    /**
     * Remove a forked_from relationship
     *
     * Remove a forked_from relationship
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdForkTest() throws ApiException {
        String id = null;
        api.deleteV3ProjectsIdFork(id);
        // TODO: test validations
    }

    /**
     * Deletes project hook
     *
     * Deletes project hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdHooksHookIdTest() throws ApiException {
        String id = null;
        Integer hookId = null;
        ProjectHook response = api.deleteV3ProjectsIdHooksHookId(id, hookId);
        // TODO: test validations
    }

    /**
     * Delete a project issue
     *
     * Delete a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdIssuesIssueIdTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        api.deleteV3ProjectsIdIssuesIssueId(id, issueId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer issueId = null;
        AwardEmoji response = api.deleteV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(awardId, id, issueId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer issueId = null;
        Integer noteId = null;
        AwardEmoji response = api.deleteV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(awardId, id, issueId, noteId);
        // TODO: test validations
    }

    /**
     * Delete a +noteable+ note
     *
     * Delete a +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdIssuesNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        Note response = api.deleteV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteableId, noteId);
        // TODO: test validations
    }

    /**
     * Unsubscribe from a resource
     *
     * Unsubscribe from a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdIssuesSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        Issue response = api.deleteV3ProjectsIdIssuesSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Delete deploy key for a project
     *
     * Delete deploy key for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdKeysKeyIdTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.deleteV3ProjectsIdKeysKeyId(id, keyId);
        // TODO: test validations
    }

    /**
     * Disable a deploy key for a project
     *
     * This feature was added in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdKeysKeyIdDisableTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.deleteV3ProjectsIdKeysKeyIdDisable(id, keyId);
        // TODO: test validations
    }

    /**
     * Delete an existing label
     *
     * Delete an existing label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdLabelsTest() throws ApiException {
        String id = null;
        String name = null;
        Label response = api.deleteV3ProjectsIdLabels(id, name);
        // TODO: test validations
    }

    /**
     * Unsubscribe from a resource
     *
     * Unsubscribe from a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdLabelsSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        Label response = api.deleteV3ProjectsIdLabelsSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Removes a user from a group or project.
     *
     * Removes a user from a group or project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMembersUserIdTest() throws ApiException {
        String id = null;
        Integer userId = null;
        api.deleteV3ProjectsIdMembersUserId(id, userId);
        // TODO: test validations
    }

    /**
     * Unsubscribe from a resource
     *
     * Unsubscribe from a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        MergeRequest response = api.deleteV3ProjectsIdMergeRequestSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Delete a merge request
     *
     * Delete a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestsMergeRequestIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        api.deleteV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer mergeRequestId = null;
        AwardEmoji response = api.deleteV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(awardId, id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer mergeRequestId = null;
        Integer noteId = null;
        AwardEmoji response = api.deleteV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(awardId, id, mergeRequestId, noteId);
        // TODO: test validations
    }

    /**
     * Delete a +noteable+ note
     *
     * Delete a +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        Note response = api.deleteV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteableId, noteId);
        // TODO: test validations
    }

    /**
     * Unsubscribe from a resource
     *
     * Unsubscribe from a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdMergeRequestsSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        MergeRequest response = api.deleteV3ProjectsIdMergeRequestsSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Delete a branch
     *
     * Delete a branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdRepositoryBranchesBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        api.deleteV3ProjectsIdRepositoryBranchesBranch(id, branch);
        // TODO: test validations
    }

    /**
     * Delete an existing file in repository
     *
     * Delete an existing file in repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdRepositoryFilesTest() throws ApiException {
        String id = null;
        String filePath = null;
        String branchName = null;
        String commitMessage = null;
        String authorEmail = null;
        String authorName = null;
        api.deleteV3ProjectsIdRepositoryFiles(id, filePath, branchName, commitMessage, authorEmail, authorName);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdRepositoryMergedBranchesTest() throws ApiException {
        String id = null;
        api.deleteV3ProjectsIdRepositoryMergedBranches(id);
        // TODO: test validations
    }

    /**
     * Delete a repository tag
     *
     * Delete a repository tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdRepositoryTagsTagNameTest() throws ApiException {
        String id = null;
        String tagName = null;
        api.deleteV3ProjectsIdRepositoryTagsTagName(id, tagName);
        // TODO: test validations
    }

    /**
     * Disable project&#39;s runner
     *
     * Disable project&#39;s runner
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdRunnersRunnerIdTest() throws ApiException {
        String id = null;
        Integer runnerId = null;
        Runner response = api.deleteV3ProjectsIdRunnersRunnerId(id, runnerId);
        // TODO: test validations
    }

    /**
     * Delete a service for project
     *
     * Delete a service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdServicesServiceSlugTest() throws ApiException {
        String serviceSlug = null;
        Integer id = null;
        api.deleteV3ProjectsIdServicesServiceSlug(serviceSlug, id);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdShareGroupIdTest() throws ApiException {
        String id = null;
        Integer groupId = null;
        api.deleteV3ProjectsIdShareGroupId(id, groupId);
        // TODO: test validations
    }

    /**
     * Delete a +noteable+ note
     *
     * Delete a +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdSnippetsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        Note response = api.deleteV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteableId, noteId);
        // TODO: test validations
    }

    /**
     * Delete a project snippet
     *
     * Delete a project snippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdSnippetsSnippetIdTest() throws ApiException {
        String id = null;
        Integer snippetId = null;
        api.deleteV3ProjectsIdSnippetsSnippetId(id, snippetId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer snippetId = null;
        AwardEmoji response = api.deleteV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(awardId, id, snippetId);
        // TODO: test validations
    }

    /**
     * Delete a +awardables+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer snippetId = null;
        Integer noteId = null;
        AwardEmoji response = api.deleteV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(awardId, id, snippetId, noteId);
        // TODO: test validations
    }

    /**
     * Unstar a project
     *
     * Unstar a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdStarTest() throws ApiException {
        String id = null;
        Project response = api.deleteV3ProjectsIdStar(id);
        // TODO: test validations
    }

    /**
     * Delete a trigger
     *
     * Delete a trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdTriggersTokenTest() throws ApiException {
        String id = null;
        String token = null;
        Trigger response = api.deleteV3ProjectsIdTriggersToken(id, token);
        // TODO: test validations
    }

    /**
     * Delete an existing variable from a project
     *
     * Delete an existing variable from a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteV3ProjectsIdVariablesKeyTest() throws ApiException {
        String id = null;
        String key = null;
        Variable response = api.deleteV3ProjectsIdVariablesKey(id, key);
        // TODO: test validations
    }

    /**
     * Get a projects list for authenticated user
     *
     * Get a projects list for authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsTest() throws ApiException {
        String orderBy = null;
        String sort = null;
        Boolean archived = null;
        String visibility = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        Boolean simple = null;
        BasicProjectDetails response = api.getV3Projects(orderBy, sort, archived, visibility, search, page, perPage, simple);
        // TODO: test validations
    }

    /**
     * Get all projects for admin user
     *
     * Get all projects for admin user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsAllTest() throws ApiException {
        String orderBy = null;
        String sort = null;
        Boolean archived = null;
        String visibility = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        Boolean simple = null;
        Boolean statistics = null;
        BasicProjectDetails response = api.getV3ProjectsAll(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics);
        // TODO: test validations
    }

    /**
     * Get a single project
     *
     * Get a single project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdTest() throws ApiException {
        String id = null;
        ProjectWithAccess response = api.getV3ProjectsId(id);
        // TODO: test validations
    }

    /**
     * Gets a list of access requests for a project.
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdAccessRequestsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        AccessRequester response = api.getV3ProjectsIdAccessRequests(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get all project boards
     *
     * This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBoardsTest() throws ApiException {
        String id = null;
        Board response = api.getV3ProjectsIdBoards(id);
        // TODO: test validations
    }

    /**
     * Get the lists of a project board
     *
     * Does not include &#x60;backlog&#x60; and &#x60;done&#x60; lists. This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBoardsBoardIdListsTest() throws ApiException {
        String id = null;
        Integer boardId = null;
        ModelList response = api.getV3ProjectsIdBoardsBoardIdLists(id, boardId);
        // TODO: test validations
    }

    /**
     * Get a list of a project board
     *
     * This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBoardsBoardIdListsListIdTest() throws ApiException {
        String id = null;
        Integer boardId = null;
        Integer listId = null;
        ModelList response = api.getV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId);
        // TODO: test validations
    }

    /**
     * Get a project builds
     *
     * Get a project builds
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBuildsTest() throws ApiException {
        String id = null;
        String scope = null;
        Integer page = null;
        Integer perPage = null;
        Build response = api.getV3ProjectsIdBuilds(id, scope, page, perPage);
        // TODO: test validations
    }

    /**
     * Download the artifacts file from build
     *
     * This feature was introduced in GitLab 8.10
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBuildsArtifactsRefNameDownloadTest() throws ApiException {
        String id = null;
        String refName = null;
        String job = null;
        api.getV3ProjectsIdBuildsArtifactsRefNameDownload(id, refName, job);
        // TODO: test validations
    }

    /**
     * Get a specific build of a project
     *
     * Get a specific build of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBuildsBuildIdTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.getV3ProjectsIdBuildsBuildId(id, buildId);
        // TODO: test validations
    }

    /**
     * Download the artifacts file from build
     *
     * This feature was introduced in GitLab 8.5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBuildsBuildIdArtifactsTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        api.getV3ProjectsIdBuildsBuildIdArtifacts(id, buildId);
        // TODO: test validations
    }

    /**
     * Get a trace of a specific build of a project
     *
     * Get a trace of a specific build of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdBuildsBuildIdTraceTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        api.getV3ProjectsIdBuildsBuildIdTrace(id, buildId);
        // TODO: test validations
    }

    /**
     * Get a specific project&#39;s deploy keys
     *
     * Get a specific project&#39;s deploy keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdDeployKeysTest() throws ApiException {
        String id = null;
        SSHKey response = api.getV3ProjectsIdDeployKeys(id);
        // TODO: test validations
    }

    /**
     * Get single deploy key
     *
     * Get single deploy key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdDeployKeysKeyIdTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.getV3ProjectsIdDeployKeysKeyId(id, keyId);
        // TODO: test validations
    }

    /**
     * Get all deployments of the project
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdDeploymentsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        Deployment response = api.getV3ProjectsIdDeployments(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Gets a specific deployment
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdDeploymentsDeploymentIdTest() throws ApiException {
        String id = null;
        Integer deploymentId = null;
        Deployment response = api.getV3ProjectsIdDeploymentsDeploymentId(id, deploymentId);
        // TODO: test validations
    }

    /**
     * Get all environments of the project
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdEnvironmentsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        Environment response = api.getV3ProjectsIdEnvironments(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get events for a single project
     *
     * Get events for a single project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdEventsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        Event response = api.getV3ProjectsIdEvents(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get project hooks
     *
     * Get project hooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdHooksTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        ProjectHook response = api.getV3ProjectsIdHooks(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a project hook
     *
     * Get a project hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdHooksHookIdTest() throws ApiException {
        String id = null;
        Integer hookId = null;
        ProjectHook response = api.getV3ProjectsIdHooksHookId(id, hookId);
        // TODO: test validations
    }

    /**
     * Get a list of project issues
     *
     * Get a list of project issues
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesTest() throws ApiException {
        String id = null;
        String state = null;
        Integer iid = null;
        String labels = null;
        String milestone = null;
        String orderBy = null;
        String sort = null;
        Integer page = null;
        Integer perPage = null;
        Issue response = api.getV3ProjectsIdIssues(id, state, iid, labels, milestone, orderBy, sort, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a single project issue
     *
     * Get a single project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        Issue response = api.getV3ProjectsIdIssuesIssueId(id, issueId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdAwardEmojiTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdIssuesIssueIdAwardEmoji(id, issueId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer issueId = null;
        AwardEmoji response = api.getV3ProjectsIdIssuesIssueIdAwardEmojiAwardId(awardId, id, issueId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer issueId = null;
        Integer noteId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(id, issueId, noteId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer issueId = null;
        Integer noteId = null;
        AwardEmoji response = api.getV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiAwardId(awardId, id, issueId, noteId);
        // TODO: test validations
    }

    /**
     * Show time stats for a project issue
     *
     * Show time stats for a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesIssueIdTimeStatsTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        api.getV3ProjectsIdIssuesIssueIdTimeStats(id, issueId);
        // TODO: test validations
    }

    /**
     * Get a list of project +noteable+ notes
     *
     * Get a list of project +noteable+ notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer page = null;
        Integer perPage = null;
        Note response = api.getV3ProjectsIdIssuesNoteableIdNotes(id, noteableId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a single +noteable+ note
     *
     * Get a single +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdIssuesNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteId = null;
        Integer noteableId = null;
        Note response = api.getV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteId, noteableId);
        // TODO: test validations
    }

    /**
     * Get a specific project&#39;s deploy keys
     *
     * Get a specific project&#39;s deploy keys
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdKeysTest() throws ApiException {
        String id = null;
        SSHKey response = api.getV3ProjectsIdKeys(id);
        // TODO: test validations
    }

    /**
     * Get single deploy key
     *
     * Get single deploy key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdKeysKeyIdTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.getV3ProjectsIdKeysKeyId(id, keyId);
        // TODO: test validations
    }

    /**
     * Get all labels of the project
     *
     * Get all labels of the project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdLabelsTest() throws ApiException {
        String id = null;
        Label response = api.getV3ProjectsIdLabels(id);
        // TODO: test validations
    }

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     *
     * Gets a list of group or project members viewable by the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMembersTest() throws ApiException {
        String id = null;
        String query = null;
        Integer page = null;
        Integer perPage = null;
        Member response = api.getV3ProjectsIdMembers(id, query, page, perPage);
        // TODO: test validations
    }

    /**
     * Gets a member of a group or project.
     *
     * Gets a member of a group or project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMembersUserIdTest() throws ApiException {
        String id = null;
        Integer userId = null;
        Member response = api.getV3ProjectsIdMembersUserId(id, userId);
        // TODO: test validations
    }

    /**
     * Get a single merge request
     *
     * This endpoint is deprecated and will be removed in GitLab 9.0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestMergeRequestIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequest response = api.getV3ProjectsIdMergeRequestMergeRequestId(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Show the merge request changes
     *
     * Show the merge request changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestMergeRequestIdChangesTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequestChanges response = api.getV3ProjectsIdMergeRequestMergeRequestIdChanges(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * List issues that will be closed on merge
     *
     * List issues that will be closed on merge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestMergeRequestIdClosesIssuesTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer page = null;
        Integer perPage = null;
        MRNote response = api.getV3ProjectsIdMergeRequestMergeRequestIdClosesIssues(id, mergeRequestId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the comments of a merge request
     *
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestMergeRequestIdCommentsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer page = null;
        Integer perPage = null;
        MRNote response = api.getV3ProjectsIdMergeRequestMergeRequestIdComments(id, mergeRequestId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the commits of a merge request
     *
     * Get the commits of a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestMergeRequestIdCommitsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        RepoCommit response = api.getV3ProjectsIdMergeRequestMergeRequestIdCommits(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * List merge requests
     *
     * List merge requests
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsTest() throws ApiException {
        String id = null;
        String state = null;
        String orderBy = null;
        String sort = null;
        Integer page = null;
        Integer perPage = null;
        List<Integer> iid = null;
        MergeRequest response = api.getV3ProjectsIdMergeRequests(id, state, orderBy, sort, page, perPage, iid);
        // TODO: test validations
    }

    /**
     * Get a single merge request
     *
     * Get a single merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequest response = api.getV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(id, mergeRequestId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer mergeRequestId = null;
        AwardEmoji response = api.getV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiAwardId(awardId, id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Show the merge request changes
     *
     * Show the merge request changes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdChangesTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequestChanges response = api.getV3ProjectsIdMergeRequestsMergeRequestIdChanges(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * List issues that will be closed on merge
     *
     * List issues that will be closed on merge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssuesTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer page = null;
        Integer perPage = null;
        MRNote response = api.getV3ProjectsIdMergeRequestsMergeRequestIdClosesIssues(id, mergeRequestId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the comments of a merge request
     *
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdCommentsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer page = null;
        Integer perPage = null;
        MRNote response = api.getV3ProjectsIdMergeRequestsMergeRequestIdComments(id, mergeRequestId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the commits of a merge request
     *
     * Get the commits of a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdCommitsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        RepoCommit response = api.getV3ProjectsIdMergeRequestsMergeRequestIdCommits(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer mergeRequestId = null;
        Integer noteId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(id, mergeRequestId, noteId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer mergeRequestId = null;
        Integer noteId = null;
        AwardEmoji response = api.getV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiAwardId(awardId, id, mergeRequestId, noteId);
        // TODO: test validations
    }

    /**
     * Show time stats for a project merge_request
     *
     * Show time stats for a project merge_request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdTimeStatsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        api.getV3ProjectsIdMergeRequestsMergeRequestIdTimeStats(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Get a list of merge request diff versions
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequestDiff response = api.getV3ProjectsIdMergeRequestsMergeRequestIdVersions(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Get a single merge request diff version
     *
     * This feature was introduced in GitLab 8.12.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Integer versionId = null;
        MergeRequestDiffFull response = api.getV3ProjectsIdMergeRequestsMergeRequestIdVersionsVersionId(id, mergeRequestId, versionId);
        // TODO: test validations
    }

    /**
     * Get a list of project +noteable+ notes
     *
     * Get a list of project +noteable+ notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer page = null;
        Integer perPage = null;
        Note response = api.getV3ProjectsIdMergeRequestsNoteableIdNotes(id, noteableId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a single +noteable+ note
     *
     * Get a single +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteId = null;
        Integer noteableId = null;
        Note response = api.getV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteId, noteableId);
        // TODO: test validations
    }

    /**
     * Get a list of project milestones
     *
     * Get a list of project milestones
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMilestonesTest() throws ApiException {
        String id = null;
        String state = null;
        Integer page = null;
        Integer perPage = null;
        List<Integer> iid = null;
        Milestone response = api.getV3ProjectsIdMilestones(id, state, page, perPage, iid);
        // TODO: test validations
    }

    /**
     * Get a single project milestone
     *
     * Get a single project milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMilestonesMilestoneIdTest() throws ApiException {
        String id = null;
        Integer milestoneId = null;
        Milestone response = api.getV3ProjectsIdMilestonesMilestoneId(id, milestoneId);
        // TODO: test validations
    }

    /**
     * Get all issues for a single project milestone
     *
     * Get all issues for a single project milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdMilestonesMilestoneIdIssuesTest() throws ApiException {
        String id = null;
        Integer milestoneId = null;
        Integer page = null;
        Integer perPage = null;
        Issue response = api.getV3ProjectsIdMilestonesMilestoneIdIssues(id, milestoneId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get project level notification level settings, defaults to Global
     *
     * This feature was introduced in GitLab 8.12
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdNotificationSettingsTest() throws ApiException {
        String id = null;
        NotificationSetting response = api.getV3ProjectsIdNotificationSettings(id);
        // TODO: test validations
    }

    /**
     * Get all Pipelines of the project
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdPipelinesTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String scope = null;
        Pipeline response = api.getV3ProjectsIdPipelines(id, page, perPage, scope);
        // TODO: test validations
    }

    /**
     * Gets a specific pipeline for the project
     *
     * This feature was introduced in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdPipelinesPipelineIdTest() throws ApiException {
        String id = null;
        Integer pipelineId = null;
        Pipeline response = api.getV3ProjectsIdPipelinesPipelineId(id, pipelineId);
        // TODO: test validations
    }

    /**
     * Get an archive of the repository
     *
     * Get an archive of the repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryArchiveTest() throws ApiException {
        String id = null;
        String sha = null;
        String format = null;
        api.getV3ProjectsIdRepositoryArchive(id, sha, format);
        // TODO: test validations
    }

    /**
     * Get a raw file contents
     *
     * Get a raw file contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryBlobsShaTest() throws ApiException {
        String id = null;
        String sha = null;
        String filepath = null;
        api.getV3ProjectsIdRepositoryBlobsSha(id, sha, filepath);
        // TODO: test validations
    }

    /**
     * Get a project repository branches
     *
     * Get a project repository branches
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryBranchesTest() throws ApiException {
        String id = null;
        RepoBranch response = api.getV3ProjectsIdRepositoryBranches(id);
        // TODO: test validations
    }

    /**
     * Get a single branch
     *
     * Get a single branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryBranchesBranchTest() throws ApiException {
        String id = null;
        String branch = null;
        RepoBranch response = api.getV3ProjectsIdRepositoryBranchesBranch(id, branch);
        // TODO: test validations
    }

    /**
     * Get a project repository commits
     *
     * Get a project repository commits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsTest() throws ApiException {
        String id = null;
        String refName = null;
        String since = null;
        String until = null;
        Integer page = null;
        Integer perPage = null;
        String path = null;
        RepoCommit response = api.getV3ProjectsIdRepositoryCommits(id, refName, since, until, page, perPage, path);
        // TODO: test validations
    }

    /**
     * Get a specific commit of a project
     *
     * Get a specific commit of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaTest() throws ApiException {
        String id = null;
        String sha = null;
        RepoCommitDetail response = api.getV3ProjectsIdRepositoryCommitsSha(id, sha);
        // TODO: test validations
    }

    /**
     * Get a raw file contents
     *
     * Get a raw file contents
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaBlobTest() throws ApiException {
        String id = null;
        String sha = null;
        String filepath = null;
        api.getV3ProjectsIdRepositoryCommitsShaBlob(id, sha, filepath);
        // TODO: test validations
    }

    /**
     * Get builds for a specific commit of a project
     *
     * Get builds for a specific commit of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaBuildsTest() throws ApiException {
        String id = null;
        String sha = null;
        String scope = null;
        Integer page = null;
        Integer perPage = null;
        Build response = api.getV3ProjectsIdRepositoryCommitsShaBuilds(id, sha, scope, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a commit&#39;s comments
     *
     * Get a commit&#39;s comments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaCommentsTest() throws ApiException {
        String id = null;
        String sha = null;
        Integer page = null;
        Integer perPage = null;
        CommitNote response = api.getV3ProjectsIdRepositoryCommitsShaComments(id, sha, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the diff for a specific commit of a project
     *
     * Get the diff for a specific commit of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaDiffTest() throws ApiException {
        String id = null;
        String sha = null;
        api.getV3ProjectsIdRepositoryCommitsShaDiff(id, sha);
        // TODO: test validations
    }

    /**
     * Get a commit&#39;s statuses
     *
     * Get a commit&#39;s statuses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCommitsShaStatusesTest() throws ApiException {
        String id = null;
        String sha = null;
        String ref = null;
        String stage = null;
        String name = null;
        String all = null;
        Integer page = null;
        Integer perPage = null;
        CommitStatus response = api.getV3ProjectsIdRepositoryCommitsShaStatuses(id, sha, ref, stage, name, all, page, perPage);
        // TODO: test validations
    }

    /**
     * Compare two branches, tags, or commits
     *
     * Compare two branches, tags, or commits
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryCompareTest() throws ApiException {
        String id = null;
        String from = null;
        String to = null;
        Compare response = api.getV3ProjectsIdRepositoryCompare(id, from, to);
        // TODO: test validations
    }

    /**
     * Get repository contributors
     *
     * Get repository contributors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryContributorsTest() throws ApiException {
        String id = null;
        Contributor response = api.getV3ProjectsIdRepositoryContributors(id);
        // TODO: test validations
    }

    /**
     * Get a file from repository
     *
     * Get a file from repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryFilesTest() throws ApiException {
        String id = null;
        String filePath = null;
        String ref = null;
        api.getV3ProjectsIdRepositoryFiles(id, filePath, ref);
        // TODO: test validations
    }

    /**
     * Get a raw blob contents by blob sha
     *
     * Get a raw blob contents by blob sha
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryRawBlobsShaTest() throws ApiException {
        String id = null;
        String sha = null;
        api.getV3ProjectsIdRepositoryRawBlobsSha(id, sha);
        // TODO: test validations
    }

    /**
     * Get a project repository tags
     *
     * Get a project repository tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryTagsTest() throws ApiException {
        String id = null;
        RepoTag response = api.getV3ProjectsIdRepositoryTags(id);
        // TODO: test validations
    }

    /**
     * Get a single repository tag
     *
     * Get a single repository tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryTagsTagNameTest() throws ApiException {
        String id = null;
        String tagName = null;
        RepoTag response = api.getV3ProjectsIdRepositoryTagsTagName(id, tagName);
        // TODO: test validations
    }

    /**
     * Get a project repository tree
     *
     * Get a project repository tree
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRepositoryTreeTest() throws ApiException {
        String id = null;
        String refName = null;
        String path = null;
        Boolean recursive = null;
        RepoTreeObject response = api.getV3ProjectsIdRepositoryTree(id, refName, path, recursive);
        // TODO: test validations
    }

    /**
     * Get runners available for project
     *
     * Get runners available for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdRunnersTest() throws ApiException {
        String id = null;
        String scope = null;
        Integer page = null;
        Integer perPage = null;
        Runner response = api.getV3ProjectsIdRunners(id, scope, page, perPage);
        // TODO: test validations
    }

    /**
     * Get the service settings for project
     *
     * Get the service settings for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdServicesServiceSlugTest() throws ApiException {
        String serviceSlug = null;
        Integer id = null;
        ProjectService response = api.getV3ProjectsIdServicesServiceSlug(serviceSlug, id);
        // TODO: test validations
    }

    /**
     * Get all project snippets
     *
     * Get all project snippets
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        ProjectSnippet response = api.getV3ProjectsIdSnippets(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a list of project +noteable+ notes
     *
     * Get a list of project +noteable+ notes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer page = null;
        Integer perPage = null;
        Note response = api.getV3ProjectsIdSnippetsNoteableIdNotes(id, noteableId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a single +noteable+ note
     *
     * Get a single +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteId = null;
        Integer noteableId = null;
        Note response = api.getV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteId, noteableId);
        // TODO: test validations
    }

    /**
     * Get a single project snippet
     *
     * Get a single project snippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdTest() throws ApiException {
        String id = null;
        Integer snippetId = null;
        ProjectSnippet response = api.getV3ProjectsIdSnippetsSnippetId(id, snippetId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdAwardEmojiTest() throws ApiException {
        String id = null;
        Integer snippetId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdSnippetsSnippetIdAwardEmoji(id, snippetId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer snippetId = null;
        AwardEmoji response = api.getV3ProjectsIdSnippetsSnippetIdAwardEmojiAwardId(awardId, id, snippetId);
        // TODO: test validations
    }

    /**
     * Get a list of project +awardable+ award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer snippetId = null;
        Integer noteId = null;
        Integer page = null;
        Integer perPage = null;
        AwardEmoji response = api.getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(id, snippetId, noteId, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific award emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardIdTest() throws ApiException {
        Integer awardId = null;
        Integer id = null;
        Integer snippetId = null;
        Integer noteId = null;
        AwardEmoji response = api.getV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiAwardId(awardId, id, snippetId, noteId);
        // TODO: test validations
    }

    /**
     * Get a raw project snippet
     *
     * Get a raw project snippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdSnippetsSnippetIdRawTest() throws ApiException {
        String id = null;
        Integer snippetId = null;
        api.getV3ProjectsIdSnippetsSnippetIdRaw(id, snippetId);
        // TODO: test validations
    }

    /**
     * Get triggers list
     *
     * Get triggers list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdTriggersTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        Trigger response = api.getV3ProjectsIdTriggers(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get specific trigger of a project
     *
     * Get specific trigger of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdTriggersTokenTest() throws ApiException {
        String id = null;
        String token = null;
        Trigger response = api.getV3ProjectsIdTriggersToken(id, token);
        // TODO: test validations
    }

    /**
     * Get the users list of a project
     *
     * Get the users list of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdUsersTest() throws ApiException {
        String id = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        UserBasic response = api.getV3ProjectsIdUsers(id, search, page, perPage);
        // TODO: test validations
    }

    /**
     * Get project variables
     *
     * Get project variables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdVariablesTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        Variable response = api.getV3ProjectsIdVariables(id, page, perPage);
        // TODO: test validations
    }

    /**
     * Get a specific variable from a project
     *
     * Get a specific variable from a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsIdVariablesKeyTest() throws ApiException {
        String id = null;
        String key = null;
        Variable response = api.getV3ProjectsIdVariablesKey(id, key);
        // TODO: test validations
    }

    /**
     * Get an owned projects list for authenticated user
     *
     * Get an owned projects list for authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsOwnedTest() throws ApiException {
        String orderBy = null;
        String sort = null;
        Boolean archived = null;
        String visibility = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        Boolean simple = null;
        Boolean statistics = null;
        BasicProjectDetails response = api.getV3ProjectsOwned(orderBy, sort, archived, visibility, search, page, perPage, simple, statistics);
        // TODO: test validations
    }

    /**
     * Search for projects the current user has access to
     *
     * Search for projects the current user has access to
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsSearchQueryTest() throws ApiException {
        String query = null;
        String orderBy = null;
        String sort = null;
        Integer page = null;
        Integer perPage = null;
        Project response = api.getV3ProjectsSearchQuery(query, orderBy, sort, page, perPage);
        // TODO: test validations
    }

    /**
     * Gets starred project for the authenticated user
     *
     * Gets starred project for the authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsStarredTest() throws ApiException {
        String orderBy = null;
        String sort = null;
        Boolean archived = null;
        String visibility = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        Boolean simple = null;
        BasicProjectDetails response = api.getV3ProjectsStarred(orderBy, sort, archived, visibility, search, page, perPage, simple);
        // TODO: test validations
    }

    /**
     * Get a list of visible projects for authenticated user
     *
     * Get a list of visible projects for authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getV3ProjectsVisibleTest() throws ApiException {
        String orderBy = null;
        String sort = null;
        Boolean archived = null;
        String visibility = null;
        String search = null;
        Integer page = null;
        Integer perPage = null;
        Boolean simple = null;
        BasicProjectDetails response = api.getV3ProjectsVisible(orderBy, sort, archived, visibility, search, page, perPage, simple);
        // TODO: test validations
    }

    /**
     * Create new project
     *
     * Create new project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsTest() throws ApiException {
        PostV3ProjectsRequest postV3ProjectsRequest = null;
        Project response = api.postV3Projects(postV3ProjectsRequest);
        // TODO: test validations
    }

    /**
     * Fork new project for the current user or provided namespace.
     *
     * Fork new project for the current user or provided namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsForkIdTest() throws ApiException {
        String id = null;
        PostV3ProjectsForkIdRequest postV3ProjectsForkIdRequest = null;
        Project response = api.postV3ProjectsForkId(id, postV3ProjectsForkIdRequest);
        // TODO: test validations
    }

    /**
     * Requests access for the authenticated user to a project.
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdAccessRequestsTest() throws ApiException {
        String id = null;
        AccessRequester response = api.postV3ProjectsIdAccessRequests(id);
        // TODO: test validations
    }

    /**
     * Archive a project
     *
     * Archive a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdArchiveTest() throws ApiException {
        String id = null;
        Project response = api.postV3ProjectsIdArchive(id);
        // TODO: test validations
    }

    /**
     * Create a new board list
     *
     * This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBoardsBoardIdListsTest() throws ApiException {
        String id = null;
        Integer boardId = null;
        PostV3ProjectsIdBoardsBoardIdListsRequest postV3ProjectsIdBoardsBoardIdListsRequest = null;
        ModelList response = api.postV3ProjectsIdBoardsBoardIdLists(id, boardId, postV3ProjectsIdBoardsBoardIdListsRequest);
        // TODO: test validations
    }

    /**
     * Keep the artifacts to prevent them from being deleted
     *
     * Keep the artifacts to prevent them from being deleted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBuildsBuildIdArtifactsKeepTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.postV3ProjectsIdBuildsBuildIdArtifactsKeep(id, buildId);
        // TODO: test validations
    }

    /**
     * Cancel a specific build of a project
     *
     * Cancel a specific build of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBuildsBuildIdCancelTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.postV3ProjectsIdBuildsBuildIdCancel(id, buildId);
        // TODO: test validations
    }

    /**
     * Erase build (remove artifacts and build trace)
     *
     * Erase build (remove artifacts and build trace)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBuildsBuildIdEraseTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.postV3ProjectsIdBuildsBuildIdErase(id, buildId);
        // TODO: test validations
    }

    /**
     * Trigger a manual build
     *
     * This feature was added in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBuildsBuildIdPlayTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.postV3ProjectsIdBuildsBuildIdPlay(id, buildId);
        // TODO: test validations
    }

    /**
     * Retry a specific build of a project
     *
     * Retry a specific build of a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdBuildsBuildIdRetryTest() throws ApiException {
        String id = null;
        Integer buildId = null;
        Build response = api.postV3ProjectsIdBuildsBuildIdRetry(id, buildId);
        // TODO: test validations
    }

    /**
     * Add new deploy key to currently authenticated user
     *
     * Add new deploy key to currently authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdDeployKeysTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest = null;
        SSHKey response = api.postV3ProjectsIdDeployKeys(id, postV3ProjectsIdDeployKeysRequest);
        // TODO: test validations
    }

    /**
     * Enable a deploy key for a project
     *
     * This feature was added in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdDeployKeysKeyIdEnableTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.postV3ProjectsIdDeployKeysKeyIdEnable(id, keyId);
        // TODO: test validations
    }

    /**
     * Creates a new environment
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdEnvironmentsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdEnvironmentsRequest postV3ProjectsIdEnvironmentsRequest = null;
        Environment response = api.postV3ProjectsIdEnvironments(id, postV3ProjectsIdEnvironmentsRequest);
        // TODO: test validations
    }

    /**
     * Mark this project as forked from another
     *
     * Mark this project as forked from another
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdForkForkedFromIdTest() throws ApiException {
        String id = null;
        String forkedFromId = null;
        api.postV3ProjectsIdForkForkedFromId(id, forkedFromId);
        // TODO: test validations
    }

    /**
     * Add hook to project
     *
     * Add hook to project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdHooksTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest = null;
        ProjectHook response = api.postV3ProjectsIdHooks(id, postV3ProjectsIdHooksRequest);
        // TODO: test validations
    }

    /**
     * Create a new project issue
     *
     * Create a new project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdIssuesRequest postV3ProjectsIdIssuesRequest = null;
        Issue response = api.postV3ProjectsIdIssues(id, postV3ProjectsIdIssuesRequest);
        // TODO: test validations
    }

    /**
     * Add spent time for a project issue
     *
     * Add spent time for a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdAddSpentTimeTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest = null;
        api.postV3ProjectsIdIssuesIssueIdAddSpentTime(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer issueId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdIssuesIssueIdAwardEmoji(id, issueId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Move an existing issue
     *
     * Move an existing issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdMoveTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        PostV3ProjectsIdIssuesIssueIdMoveRequest postV3ProjectsIdIssuesIssueIdMoveRequest = null;
        Issue response = api.postV3ProjectsIdIssuesIssueIdMove(id, issueId, postV3ProjectsIdIssuesIssueIdMoveRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer issueId = null;
        Integer noteId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdIssuesIssueIdNotesNoteIdAwardEmoji(id, issueId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Reset spent time for a project issue
     *
     * Reset spent time for a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdResetSpentTimeTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        api.postV3ProjectsIdIssuesIssueIdResetSpentTime(id, issueId);
        // TODO: test validations
    }

    /**
     * Reset the time estimate for a project issue
     *
     * Reset the time estimate for a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdResetTimeEstimateTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        api.postV3ProjectsIdIssuesIssueIdResetTimeEstimate(id, issueId);
        // TODO: test validations
    }

    /**
     * Set a time estimate for a project issue
     *
     * Set a time estimate for a project issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdTimeEstimateTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest = null;
        api.postV3ProjectsIdIssuesIssueIdTimeEstimate(id, issueId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
        // TODO: test validations
    }

    /**
     * Create a todo on an issuable
     *
     * Create a todo on an issuable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesIssueIdTodoTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        Todo response = api.postV3ProjectsIdIssuesIssueIdTodo(id, issueId);
        // TODO: test validations
    }

    /**
     * Create a new +noteable+ note
     *
     * Create a new +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest = null;
        Note response = api.postV3ProjectsIdIssuesNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        // TODO: test validations
    }

    /**
     * Subscribe to a resource
     *
     * Subscribe to a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdIssuesSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        Issue response = api.postV3ProjectsIdIssuesSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Add new deploy key to currently authenticated user
     *
     * Add new deploy key to currently authenticated user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdKeysTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdDeployKeysRequest postV3ProjectsIdDeployKeysRequest = null;
        SSHKey response = api.postV3ProjectsIdKeys(id, postV3ProjectsIdDeployKeysRequest);
        // TODO: test validations
    }

    /**
     * Enable a deploy key for a project
     *
     * This feature was added in GitLab 8.11
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdKeysKeyIdEnableTest() throws ApiException {
        String id = null;
        Integer keyId = null;
        SSHKey response = api.postV3ProjectsIdKeysKeyIdEnable(id, keyId);
        // TODO: test validations
    }

    /**
     * Create a new label
     *
     * Create a new label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdLabelsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdLabelsRequest postV3ProjectsIdLabelsRequest = null;
        Label response = api.postV3ProjectsIdLabels(id, postV3ProjectsIdLabelsRequest);
        // TODO: test validations
    }

    /**
     * Subscribe to a resource
     *
     * Subscribe to a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdLabelsSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        Label response = api.postV3ProjectsIdLabelsSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Adds a member to a group or project.
     *
     * Adds a member to a group or project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMembersTest() throws ApiException {
        String id = null;
        PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest = null;
        Member response = api.postV3ProjectsIdMembers(id, postV3GroupsIdMembersRequest);
        // TODO: test validations
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     *
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceedsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequest response = api.postV3ProjectsIdMergeRequestMergeRequestIdCancelMergeWhenBuildSucceeds(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Post a comment to a merge request
     *
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestMergeRequestIdCommentsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest = null;
        MRNote response = api.postV3ProjectsIdMergeRequestMergeRequestIdComments(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest);
        // TODO: test validations
    }

    /**
     * Subscribe to a resource
     *
     * Subscribe to a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        MergeRequest response = api.postV3ProjectsIdMergeRequestSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Create a merge request
     *
     * Create a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest = null;
        MergeRequest response = api.postV3ProjectsIdMergeRequests(id, postV3ProjectsIdMergeRequestsRequest);
        // TODO: test validations
    }

    /**
     * Add spent time for a project merge_request
     *
     * Add spent time for a project merge_request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTimeTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest = null;
        api.postV3ProjectsIdMergeRequestsMergeRequestIdAddSpentTime(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer mergeRequestId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdMergeRequestsMergeRequestIdAwardEmoji(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     *
     * Cancel merge if \&quot;Merge When Pipeline Succeeds\&quot; is enabled
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceedsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        MergeRequest response = api.postV3ProjectsIdMergeRequestsMergeRequestIdCancelMergeWhenBuildSucceeds(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Post a comment to a merge request
     *
     * Duplicate. DEPRECATED and WILL BE REMOVED in 9.0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdCommentsTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PostV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest = null;
        MRNote response = api.postV3ProjectsIdMergeRequestsMergeRequestIdComments(id, mergeRequestId, postV3ProjectsIdMergeRequestMergeRequestIdCommentsRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer mergeRequestId = null;
        Integer noteId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdMergeRequestsMergeRequestIdNotesNoteIdAwardEmoji(id, mergeRequestId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Reset spent time for a project merge_request
     *
     * Reset spent time for a project merge_request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTimeTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        api.postV3ProjectsIdMergeRequestsMergeRequestIdResetSpentTime(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Reset the time estimate for a project merge_request
     *
     * Reset the time estimate for a project merge_request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimateTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        api.postV3ProjectsIdMergeRequestsMergeRequestIdResetTimeEstimate(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Set a time estimate for a project merge_request
     *
     * Set a time estimate for a project merge_request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimateTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PostV3ProjectsIdIssuesIssueIdAddSpentTimeRequest postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest = null;
        api.postV3ProjectsIdMergeRequestsMergeRequestIdTimeEstimate(id, mergeRequestId, postV3ProjectsIdIssuesIssueIdAddSpentTimeRequest);
        // TODO: test validations
    }

    /**
     * Create a todo on an issuable
     *
     * Create a todo on an issuable
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsMergeRequestIdTodoTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        Todo response = api.postV3ProjectsIdMergeRequestsMergeRequestIdTodo(id, mergeRequestId);
        // TODO: test validations
    }

    /**
     * Create a new +noteable+ note
     *
     * Create a new +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest = null;
        Note response = api.postV3ProjectsIdMergeRequestsNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        // TODO: test validations
    }

    /**
     * Subscribe to a resource
     *
     * Subscribe to a resource
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMergeRequestsSubscribableIdSubscriptionTest() throws ApiException {
        String id = null;
        String subscribableId = null;
        MergeRequest response = api.postV3ProjectsIdMergeRequestsSubscribableIdSubscription(id, subscribableId);
        // TODO: test validations
    }

    /**
     * Create a new project milestone
     *
     * Create a new project milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdMilestonesTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdMilestonesRequest postV3ProjectsIdMilestonesRequest = null;
        Milestone response = api.postV3ProjectsIdMilestones(id, postV3ProjectsIdMilestonesRequest);
        // TODO: test validations
    }

    /**
     * Create a new pipeline
     *
     * This feature was introduced in GitLab 8.14
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdPipelineTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdPipelineRequest postV3ProjectsIdPipelineRequest = null;
        Pipeline response = api.postV3ProjectsIdPipeline(id, postV3ProjectsIdPipelineRequest);
        // TODO: test validations
    }

    /**
     * Cancel all builds in the pipeline
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdPipelinesPipelineIdCancelTest() throws ApiException {
        String id = null;
        Integer pipelineId = null;
        Pipeline response = api.postV3ProjectsIdPipelinesPipelineIdCancel(id, pipelineId);
        // TODO: test validations
    }

    /**
     * Retry failed builds in the pipeline
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdPipelinesPipelineIdRetryTest() throws ApiException {
        String id = null;
        Integer pipelineId = null;
        Pipeline response = api.postV3ProjectsIdPipelinesPipelineIdRetry(id, pipelineId);
        // TODO: test validations
    }

    /**
     * Trigger a GitLab project build
     *
     * Trigger a GitLab project build
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRefReftriggerBuildsTest() throws ApiException {
        String id = null;
        String ref = null;
        PostV3ProjectsIdRefRefTriggerBuildsRequest postV3ProjectsIdRefRefTriggerBuildsRequest = null;
        TriggerRequest response = api.postV3ProjectsIdRefReftriggerBuilds(id, ref, postV3ProjectsIdRefRefTriggerBuildsRequest);
        // TODO: test validations
    }

    /**
     * Create branch
     *
     * Create branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryBranchesTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdRepositoryBranchesRequest postV3ProjectsIdRepositoryBranchesRequest = null;
        RepoBranch response = api.postV3ProjectsIdRepositoryBranches(id, postV3ProjectsIdRepositoryBranchesRequest);
        // TODO: test validations
    }

    /**
     * Commit multiple file changes as one commit
     *
     * This feature was introduced in GitLab 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryCommitsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdRepositoryCommitsRequest postV3ProjectsIdRepositoryCommitsRequest = null;
        RepoCommitDetail response = api.postV3ProjectsIdRepositoryCommits(id, postV3ProjectsIdRepositoryCommitsRequest);
        // TODO: test validations
    }

    /**
     * Cherry pick commit into a branch
     *
     * This feature was introduced in GitLab 8.15
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryCommitsShaCherryPickTest() throws ApiException {
        String id = null;
        String sha = null;
        PostV3ProjectsIdRepositoryCommitsShaCherryPickRequest postV3ProjectsIdRepositoryCommitsShaCherryPickRequest = null;
        RepoCommit response = api.postV3ProjectsIdRepositoryCommitsShaCherryPick(id, sha, postV3ProjectsIdRepositoryCommitsShaCherryPickRequest);
        // TODO: test validations
    }

    /**
     * Post comment to commit
     *
     * Post comment to commit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryCommitsShaCommentsTest() throws ApiException {
        String id = null;
        String sha = null;
        PostV3ProjectsIdRepositoryCommitsShaCommentsRequest postV3ProjectsIdRepositoryCommitsShaCommentsRequest = null;
        CommitNote response = api.postV3ProjectsIdRepositoryCommitsShaComments(id, sha, postV3ProjectsIdRepositoryCommitsShaCommentsRequest);
        // TODO: test validations
    }

    /**
     * Create new file in repository
     *
     * Create new file in repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryFilesTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest = null;
        api.postV3ProjectsIdRepositoryFiles(id, putV3ProjectsIdRepositoryFilesRequest);
        // TODO: test validations
    }

    /**
     * Create a new repository tag
     *
     * Create a new repository tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryTagsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdRepositoryTagsRequest postV3ProjectsIdRepositoryTagsRequest = null;
        RepoTag response = api.postV3ProjectsIdRepositoryTags(id, postV3ProjectsIdRepositoryTagsRequest);
        // TODO: test validations
    }

    /**
     * Add a release note to a tag
     *
     * Add a release note to a tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRepositoryTagsTagNameReleaseTest() throws ApiException {
        String id = null;
        String tagName = null;
        PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest = null;
        Release response = api.postV3ProjectsIdRepositoryTagsTagNameRelease(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest);
        // TODO: test validations
    }

    /**
     * Enable a runner for a project
     *
     * Enable a runner for a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdRunnersTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdRunnersRequest postV3ProjectsIdRunnersRequest = null;
        Runner response = api.postV3ProjectsIdRunners(id, postV3ProjectsIdRunnersRequest);
        // TODO: test validations
    }

    /**
     * Trigger a slash command for mattermost-slash-commands
     *
     * Added in GitLab 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdServicesMattermostSlashCommandsTriggerTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest = null;
        api.postV3ProjectsIdServicesMattermostSlashCommandsTrigger(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest);
        // TODO: test validations
    }

    /**
     * Trigger a slash command for slack-slash-commands
     *
     * Added in GitLab 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdServicesSlackSlashCommandsTriggerTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest = null;
        api.postV3ProjectsIdServicesSlackSlashCommandsTrigger(id, putV3ProjectsIdServicesSlackSlashCommandsRequest);
        // TODO: test validations
    }

    /**
     * Share the project with a group
     *
     * Share the project with a group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdShareTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdShareRequest postV3ProjectsIdShareRequest = null;
        ProjectGroupLink response = api.postV3ProjectsIdShare(id, postV3ProjectsIdShareRequest);
        // TODO: test validations
    }

    /**
     * Create a new project snippet
     *
     * Create a new project snippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdSnippetsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdSnippetsRequest postV3ProjectsIdSnippetsRequest = null;
        ProjectSnippet response = api.postV3ProjectsIdSnippets(id, postV3ProjectsIdSnippetsRequest);
        // TODO: test validations
    }

    /**
     * Create a new +noteable+ note
     *
     * Create a new +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdSnippetsNoteableIdNotesTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        PostV3ProjectsIdIssuesNoteableIdNotesRequest postV3ProjectsIdIssuesNoteableIdNotesRequest = null;
        Note response = api.postV3ProjectsIdSnippetsNoteableIdNotes(id, noteableId, postV3ProjectsIdIssuesNoteableIdNotesRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdSnippetsSnippetIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer snippetId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdSnippetsSnippetIdAwardEmoji(id, snippetId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Award a new Emoji
     *
     * This feature was introduced in 8.9
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmojiTest() throws ApiException {
        Integer id = null;
        Integer snippetId = null;
        Integer noteId = null;
        PostV3ProjectsIdIssuesIssueIdAwardEmojiRequest postV3ProjectsIdIssuesIssueIdAwardEmojiRequest = null;
        AwardEmoji response = api.postV3ProjectsIdSnippetsSnippetIdNotesNoteIdAwardEmoji(id, snippetId, noteId, postV3ProjectsIdIssuesIssueIdAwardEmojiRequest);
        // TODO: test validations
    }

    /**
     * Star a project
     *
     * Star a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdStarTest() throws ApiException {
        String id = null;
        Project response = api.postV3ProjectsIdStar(id);
        // TODO: test validations
    }

    /**
     * Post status to a commit
     *
     * Post status to a commit
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdStatusesShaTest() throws ApiException {
        String id = null;
        String sha = null;
        PostV3ProjectsIdStatusesShaRequest postV3ProjectsIdStatusesShaRequest = null;
        CommitStatus response = api.postV3ProjectsIdStatusesSha(id, sha, postV3ProjectsIdStatusesShaRequest);
        // TODO: test validations
    }

    /**
     * Create a trigger
     *
     * Create a trigger
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdTriggersTest() throws ApiException {
        String id = null;
        Trigger response = api.postV3ProjectsIdTriggers(id);
        // TODO: test validations
    }

    /**
     * Unarchive a project
     *
     * Unarchive a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdUnarchiveTest() throws ApiException {
        String id = null;
        Project response = api.postV3ProjectsIdUnarchive(id);
        // TODO: test validations
    }

    /**
     * Upload a file
     *
     * Upload a file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdUploadsTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdUploadsRequest postV3ProjectsIdUploadsRequest = null;
        api.postV3ProjectsIdUploads(id, postV3ProjectsIdUploadsRequest);
        // TODO: test validations
    }

    /**
     * Create a new variable in a project
     *
     * Create a new variable in a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsIdVariablesTest() throws ApiException {
        String id = null;
        PostV3ProjectsIdVariablesRequest postV3ProjectsIdVariablesRequest = null;
        Variable response = api.postV3ProjectsIdVariables(id, postV3ProjectsIdVariablesRequest);
        // TODO: test validations
    }

    /**
     * Create new project for a specified user. Only available to admin users.
     *
     * Create new project for a specified user. Only available to admin users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postV3ProjectsUserUserIdTest() throws ApiException {
        Integer userId = null;
        PostV3ProjectsUserUserIdRequest postV3ProjectsUserUserIdRequest = null;
        Project response = api.postV3ProjectsUserUserId(userId, postV3ProjectsUserUserIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project
     *
     * Update an existing project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdRequest putV3ProjectsIdRequest = null;
        Project response = api.putV3ProjectsId(id, putV3ProjectsIdRequest);
        // TODO: test validations
    }

    /**
     * Approves an access request for the given user.
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdAccessRequestsUserIdApproveTest() throws ApiException {
        String id = null;
        Integer userId = null;
        PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest = null;
        Member response = api.putV3ProjectsIdAccessRequestsUserIdApprove(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest);
        // TODO: test validations
    }

    /**
     * Moves a board list to a new position
     *
     * This feature was introduced in 8.13
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdBoardsBoardIdListsListIdTest() throws ApiException {
        String id = null;
        Integer boardId = null;
        Integer listId = null;
        PutV3ProjectsIdBoardsBoardIdListsListIdRequest putV3ProjectsIdBoardsBoardIdListsListIdRequest = null;
        ModelList response = api.putV3ProjectsIdBoardsBoardIdListsListId(id, boardId, listId, putV3ProjectsIdBoardsBoardIdListsListIdRequest);
        // TODO: test validations
    }

    /**
     * Updates an existing environment
     *
     * This feature was introduced in GitLab 8.11.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdEnvironmentsEnvironmentIdTest() throws ApiException {
        String id = null;
        Integer environmentId = null;
        PutV3ProjectsIdEnvironmentsEnvironmentIdRequest putV3ProjectsIdEnvironmentsEnvironmentIdRequest = null;
        Environment response = api.putV3ProjectsIdEnvironmentsEnvironmentId(id, environmentId, putV3ProjectsIdEnvironmentsEnvironmentIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project hook
     *
     * Update an existing project hook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdHooksHookIdTest() throws ApiException {
        String id = null;
        Integer hookId = null;
        PostV3ProjectsIdHooksRequest postV3ProjectsIdHooksRequest = null;
        ProjectHook response = api.putV3ProjectsIdHooksHookId(id, hookId, postV3ProjectsIdHooksRequest);
        // TODO: test validations
    }

    /**
     * Update an existing issue
     *
     * Update an existing issue
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdIssuesIssueIdTest() throws ApiException {
        String id = null;
        Integer issueId = null;
        PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest = null;
        Issue response = api.putV3ProjectsIdIssuesIssueId(id, issueId, putV3ProjectsIdIssuesIssueIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing +noteable+ note
     *
     * Update an existing +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdIssuesNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest = null;
        Note response = api.putV3ProjectsIdIssuesNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing label. At least one optional parameter is required.
     *
     * Update an existing label. At least one optional parameter is required.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdLabelsTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdLabelsRequest putV3ProjectsIdLabelsRequest = null;
        Label response = api.putV3ProjectsIdLabels(id, putV3ProjectsIdLabelsRequest);
        // TODO: test validations
    }

    /**
     * Updates a member of a group or project.
     *
     * Updates a member of a group or project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMembersUserIdTest() throws ApiException {
        String id = null;
        Integer userId = null;
        PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest = null;
        Member response = api.putV3ProjectsIdMembersUserId(id, userId, putV3GroupsIdMembersUserIdRequest);
        // TODO: test validations
    }

    /**
     * Update a merge request
     *
     * Update a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMergeRequestMergeRequestIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest = null;
        MergeRequest response = api.putV3ProjectsIdMergeRequestMergeRequestId(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest);
        // TODO: test validations
    }

    /**
     * Merge a merge request
     *
     * Merge a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMergeRequestMergeRequestIdMergeTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest = null;
        MergeRequest response = api.putV3ProjectsIdMergeRequestMergeRequestIdMerge(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest);
        // TODO: test validations
    }

    /**
     * Update a merge request
     *
     * Update a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMergeRequestsMergeRequestIdTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PutV3ProjectsIdMergeRequestMergeRequestIdRequest putV3ProjectsIdMergeRequestMergeRequestIdRequest = null;
        MergeRequest response = api.putV3ProjectsIdMergeRequestsMergeRequestId(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdRequest);
        // TODO: test validations
    }

    /**
     * Merge a merge request
     *
     * Merge a merge request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMergeRequestsMergeRequestIdMergeTest() throws ApiException {
        String id = null;
        Integer mergeRequestId = null;
        PutV3ProjectsIdMergeRequestMergeRequestIdMergeRequest putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest = null;
        MergeRequest response = api.putV3ProjectsIdMergeRequestsMergeRequestIdMerge(id, mergeRequestId, putV3ProjectsIdMergeRequestMergeRequestIdMergeRequest);
        // TODO: test validations
    }

    /**
     * Update an existing +noteable+ note
     *
     * Update an existing +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMergeRequestsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest = null;
        Note response = api.putV3ProjectsIdMergeRequestsNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project milestone
     *
     * Update an existing project milestone
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdMilestonesMilestoneIdTest() throws ApiException {
        String id = null;
        Integer milestoneId = null;
        PutV3ProjectsIdMilestonesMilestoneIdRequest putV3ProjectsIdMilestonesMilestoneIdRequest = null;
        Milestone response = api.putV3ProjectsIdMilestonesMilestoneId(id, milestoneId, putV3ProjectsIdMilestonesMilestoneIdRequest);
        // TODO: test validations
    }

    /**
     * Update project level notification level settings, defaults to Global
     *
     * This feature was introduced in GitLab 8.12
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdNotificationSettingsTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdNotificationSettingsRequest putV3ProjectsIdNotificationSettingsRequest = null;
        NotificationSetting response = api.putV3ProjectsIdNotificationSettings(id, putV3ProjectsIdNotificationSettingsRequest);
        // TODO: test validations
    }

    /**
     * Protect a single branch
     *
     * Protect a single branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdRepositoryBranchesBranchProtectTest() throws ApiException {
        String id = null;
        String branch = null;
        PutV3ProjectsIdRepositoryBranchesBranchProtectRequest putV3ProjectsIdRepositoryBranchesBranchProtectRequest = null;
        RepoBranch response = api.putV3ProjectsIdRepositoryBranchesBranchProtect(id, branch, putV3ProjectsIdRepositoryBranchesBranchProtectRequest);
        // TODO: test validations
    }

    /**
     * Unprotect a single branch
     *
     * Unprotect a single branch
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdRepositoryBranchesBranchUnprotectTest() throws ApiException {
        String id = null;
        String branch = null;
        RepoBranch response = api.putV3ProjectsIdRepositoryBranchesBranchUnprotect(id, branch);
        // TODO: test validations
    }

    /**
     * Update existing file in repository
     *
     * Update existing file in repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdRepositoryFilesTest() throws ApiException {
        String id = null;
        PutV3ProjectsIdRepositoryFilesRequest putV3ProjectsIdRepositoryFilesRequest = null;
        api.putV3ProjectsIdRepositoryFiles(id, putV3ProjectsIdRepositoryFilesRequest);
        // TODO: test validations
    }

    /**
     * Update a tag&#39;s release note
     *
     * Update a tag&#39;s release note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdRepositoryTagsTagNameReleaseTest() throws ApiException {
        String id = null;
        String tagName = null;
        PutV3ProjectsIdRepositoryTagsTagNameReleaseRequest putV3ProjectsIdRepositoryTagsTagNameReleaseRequest = null;
        Release response = api.putV3ProjectsIdRepositoryTagsTagNameRelease(id, tagName, putV3ProjectsIdRepositoryTagsTagNameReleaseRequest);
        // TODO: test validations
    }

    /**
     * Set asana service for project
     *
     * Set asana service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesAsanaTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesAsanaRequest putV3ProjectsIdServicesAsanaRequest = null;
        api.putV3ProjectsIdServicesAsana(id, putV3ProjectsIdServicesAsanaRequest);
        // TODO: test validations
    }

    /**
     * Set assembla service for project
     *
     * Set assembla service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesAssemblaTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesAssemblaRequest putV3ProjectsIdServicesAssemblaRequest = null;
        api.putV3ProjectsIdServicesAssembla(id, putV3ProjectsIdServicesAssemblaRequest);
        // TODO: test validations
    }

    /**
     * Set bamboo service for project
     *
     * Set bamboo service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesBambooTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesBambooRequest putV3ProjectsIdServicesBambooRequest = null;
        api.putV3ProjectsIdServicesBamboo(id, putV3ProjectsIdServicesBambooRequest);
        // TODO: test validations
    }

    /**
     * Set bugzilla service for project
     *
     * Set bugzilla service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesBugzillaTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest = null;
        api.putV3ProjectsIdServicesBugzilla(id, putV3ProjectsIdServicesBugzillaRequest);
        // TODO: test validations
    }

    /**
     * Set buildkite service for project
     *
     * Set buildkite service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesBuildkiteTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesBuildkiteRequest putV3ProjectsIdServicesBuildkiteRequest = null;
        api.putV3ProjectsIdServicesBuildkite(id, putV3ProjectsIdServicesBuildkiteRequest);
        // TODO: test validations
    }

    /**
     * Set builds-email service for project
     *
     * Set builds-email service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesBuildsEmailTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesBuildsEmailRequest putV3ProjectsIdServicesBuildsEmailRequest = null;
        api.putV3ProjectsIdServicesBuildsEmail(id, putV3ProjectsIdServicesBuildsEmailRequest);
        // TODO: test validations
    }

    /**
     * Set campfire service for project
     *
     * Set campfire service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesCampfireTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesCampfireRequest putV3ProjectsIdServicesCampfireRequest = null;
        api.putV3ProjectsIdServicesCampfire(id, putV3ProjectsIdServicesCampfireRequest);
        // TODO: test validations
    }

    /**
     * Set custom-issue-tracker service for project
     *
     * Set custom-issue-tracker service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesCustomIssueTrackerTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesBugzillaRequest putV3ProjectsIdServicesBugzillaRequest = null;
        api.putV3ProjectsIdServicesCustomIssueTracker(id, putV3ProjectsIdServicesBugzillaRequest);
        // TODO: test validations
    }

    /**
     * Set drone-ci service for project
     *
     * Set drone-ci service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesDroneCiTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesDroneCiRequest putV3ProjectsIdServicesDroneCiRequest = null;
        api.putV3ProjectsIdServicesDroneCi(id, putV3ProjectsIdServicesDroneCiRequest);
        // TODO: test validations
    }

    /**
     * Set emails-on-push service for project
     *
     * Set emails-on-push service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesEmailsOnPushTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesEmailsOnPushRequest putV3ProjectsIdServicesEmailsOnPushRequest = null;
        api.putV3ProjectsIdServicesEmailsOnPush(id, putV3ProjectsIdServicesEmailsOnPushRequest);
        // TODO: test validations
    }

    /**
     * Set external-wiki service for project
     *
     * Set external-wiki service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesExternalWikiTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesExternalWikiRequest putV3ProjectsIdServicesExternalWikiRequest = null;
        api.putV3ProjectsIdServicesExternalWiki(id, putV3ProjectsIdServicesExternalWikiRequest);
        // TODO: test validations
    }

    /**
     * Set flowdock service for project
     *
     * Set flowdock service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesFlowdockTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesFlowdockRequest putV3ProjectsIdServicesFlowdockRequest = null;
        api.putV3ProjectsIdServicesFlowdock(id, putV3ProjectsIdServicesFlowdockRequest);
        // TODO: test validations
    }

    /**
     * Set gemnasium service for project
     *
     * Set gemnasium service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesGemnasiumTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesGemnasiumRequest putV3ProjectsIdServicesGemnasiumRequest = null;
        api.putV3ProjectsIdServicesGemnasium(id, putV3ProjectsIdServicesGemnasiumRequest);
        // TODO: test validations
    }

    /**
     * Set hipchat service for project
     *
     * Set hipchat service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesHipchatTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesHipchatRequest putV3ProjectsIdServicesHipchatRequest = null;
        api.putV3ProjectsIdServicesHipchat(id, putV3ProjectsIdServicesHipchatRequest);
        // TODO: test validations
    }

    /**
     * Set irker service for project
     *
     * Set irker service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesIrkerTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesIrkerRequest putV3ProjectsIdServicesIrkerRequest = null;
        api.putV3ProjectsIdServicesIrker(id, putV3ProjectsIdServicesIrkerRequest);
        // TODO: test validations
    }

    /**
     * Set jira service for project
     *
     * Set jira service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesJiraTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest = null;
        api.putV3ProjectsIdServicesJira(id, putV3ProjectsIdServicesJiraRequest);
        // TODO: test validations
    }

    /**
     * Set kubernetes service for project
     *
     * Set kubernetes service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesKubernetesTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesKubernetesRequest putV3ProjectsIdServicesKubernetesRequest = null;
        api.putV3ProjectsIdServicesKubernetes(id, putV3ProjectsIdServicesKubernetesRequest);
        // TODO: test validations
    }

    /**
     * Set mattermost service for project
     *
     * Set mattermost service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesMattermostTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesMattermostRequest putV3ProjectsIdServicesMattermostRequest = null;
        api.putV3ProjectsIdServicesMattermost(id, putV3ProjectsIdServicesMattermostRequest);
        // TODO: test validations
    }

    /**
     * Set mattermost-slash-commands service for project
     *
     * Set mattermost-slash-commands service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesMattermostSlashCommandsTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesMattermostSlashCommandsRequest putV3ProjectsIdServicesMattermostSlashCommandsRequest = null;
        api.putV3ProjectsIdServicesMattermostSlashCommands(id, putV3ProjectsIdServicesMattermostSlashCommandsRequest);
        // TODO: test validations
    }

    /**
     * Set pipelines-email service for project
     *
     * Set pipelines-email service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesPipelinesEmailTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesPipelinesEmailRequest putV3ProjectsIdServicesPipelinesEmailRequest = null;
        api.putV3ProjectsIdServicesPipelinesEmail(id, putV3ProjectsIdServicesPipelinesEmailRequest);
        // TODO: test validations
    }

    /**
     * Set pivotaltracker service for project
     *
     * Set pivotaltracker service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesPivotaltrackerTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesPivotaltrackerRequest putV3ProjectsIdServicesPivotaltrackerRequest = null;
        api.putV3ProjectsIdServicesPivotaltracker(id, putV3ProjectsIdServicesPivotaltrackerRequest);
        // TODO: test validations
    }

    /**
     * Set pushover service for project
     *
     * Set pushover service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesPushoverTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesPushoverRequest putV3ProjectsIdServicesPushoverRequest = null;
        api.putV3ProjectsIdServicesPushover(id, putV3ProjectsIdServicesPushoverRequest);
        // TODO: test validations
    }

    /**
     * Set redmine service for project
     *
     * Set redmine service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesRedmineTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesRedmineRequest putV3ProjectsIdServicesRedmineRequest = null;
        api.putV3ProjectsIdServicesRedmine(id, putV3ProjectsIdServicesRedmineRequest);
        // TODO: test validations
    }

    /**
     * Set slack service for project
     *
     * Set slack service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesSlackTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesSlackRequest putV3ProjectsIdServicesSlackRequest = null;
        api.putV3ProjectsIdServicesSlack(id, putV3ProjectsIdServicesSlackRequest);
        // TODO: test validations
    }

    /**
     * Set slack-slash-commands service for project
     *
     * Set slack-slash-commands service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesSlackSlashCommandsTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesSlackSlashCommandsRequest putV3ProjectsIdServicesSlackSlashCommandsRequest = null;
        api.putV3ProjectsIdServicesSlackSlashCommands(id, putV3ProjectsIdServicesSlackSlashCommandsRequest);
        // TODO: test validations
    }

    /**
     * Set teamcity service for project
     *
     * Set teamcity service for project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdServicesTeamcityTest() throws ApiException {
        Integer id = null;
        PutV3ProjectsIdServicesTeamcityRequest putV3ProjectsIdServicesTeamcityRequest = null;
        api.putV3ProjectsIdServicesTeamcity(id, putV3ProjectsIdServicesTeamcityRequest);
        // TODO: test validations
    }

    /**
     * Update an existing +noteable+ note
     *
     * Update an existing +noteable+ note
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdSnippetsNoteableIdNotesNoteIdTest() throws ApiException {
        String id = null;
        Integer noteableId = null;
        Integer noteId = null;
        PutV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest = null;
        Note response = api.putV3ProjectsIdSnippetsNoteableIdNotesNoteId(id, noteableId, noteId, putV3ProjectsIdIssuesNoteableIdNotesNoteIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing project snippet
     *
     * Update an existing project snippet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdSnippetsSnippetIdTest() throws ApiException {
        String id = null;
        Integer snippetId = null;
        PutV3ProjectsIdSnippetsSnippetIdRequest putV3ProjectsIdSnippetsSnippetIdRequest = null;
        ProjectSnippet response = api.putV3ProjectsIdSnippetsSnippetId(id, snippetId, putV3ProjectsIdSnippetsSnippetIdRequest);
        // TODO: test validations
    }

    /**
     * Update an existing variable from a project
     *
     * Update an existing variable from a project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putV3ProjectsIdVariablesKeyTest() throws ApiException {
        String id = null;
        String key = null;
        PutV3ProjectsIdVariablesKeyRequest putV3ProjectsIdVariablesKeyRequest = null;
        Variable response = api.putV3ProjectsIdVariablesKey(id, key, putV3ProjectsIdVariablesKeyRequest);
        // TODO: test validations
    }

}
