/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get the service settings for project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectService {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private String active;

  public static final String SERIALIZED_NAME_BUILD_EVENTS = "build_events";
  @SerializedName(SERIALIZED_NAME_BUILD_EVENTS)
  private String buildEvents;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUES_EVENTS = "issues_events";
  @SerializedName(SERIALIZED_NAME_ISSUES_EVENTS)
  private String issuesEvents;

  public static final String SERIALIZED_NAME_MERGE_REQUESTS_EVENTS = "merge_requests_events";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUESTS_EVENTS)
  private String mergeRequestsEvents;

  public static final String SERIALIZED_NAME_NOTE_EVENTS = "note_events";
  @SerializedName(SERIALIZED_NAME_NOTE_EVENTS)
  private String noteEvents;

  public static final String SERIALIZED_NAME_PIPELINE_EVENTS = "pipeline_events";
  @SerializedName(SERIALIZED_NAME_PIPELINE_EVENTS)
  private String pipelineEvents;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public static final String SERIALIZED_NAME_PUSH_EVENTS = "push_events";
  @SerializedName(SERIALIZED_NAME_PUSH_EVENTS)
  private String pushEvents;

  public static final String SERIALIZED_NAME_TAG_PUSH_EVENTS = "tag_push_events";
  @SerializedName(SERIALIZED_NAME_TAG_PUSH_EVENTS)
  private String tagPushEvents;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public ProjectService() {
  }

  public ProjectService active(String active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public String getActive() {
    return active;
  }

  public void setActive(String active) {
    this.active = active;
  }


  public ProjectService buildEvents(String buildEvents) {
    this.buildEvents = buildEvents;
    return this;
  }

  /**
   * Get buildEvents
   * @return buildEvents
   */
  @javax.annotation.Nullable
  public String getBuildEvents() {
    return buildEvents;
  }

  public void setBuildEvents(String buildEvents) {
    this.buildEvents = buildEvents;
  }


  public ProjectService createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ProjectService id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProjectService issuesEvents(String issuesEvents) {
    this.issuesEvents = issuesEvents;
    return this;
  }

  /**
   * Get issuesEvents
   * @return issuesEvents
   */
  @javax.annotation.Nullable
  public String getIssuesEvents() {
    return issuesEvents;
  }

  public void setIssuesEvents(String issuesEvents) {
    this.issuesEvents = issuesEvents;
  }


  public ProjectService mergeRequestsEvents(String mergeRequestsEvents) {
    this.mergeRequestsEvents = mergeRequestsEvents;
    return this;
  }

  /**
   * Get mergeRequestsEvents
   * @return mergeRequestsEvents
   */
  @javax.annotation.Nullable
  public String getMergeRequestsEvents() {
    return mergeRequestsEvents;
  }

  public void setMergeRequestsEvents(String mergeRequestsEvents) {
    this.mergeRequestsEvents = mergeRequestsEvents;
  }


  public ProjectService noteEvents(String noteEvents) {
    this.noteEvents = noteEvents;
    return this;
  }

  /**
   * Get noteEvents
   * @return noteEvents
   */
  @javax.annotation.Nullable
  public String getNoteEvents() {
    return noteEvents;
  }

  public void setNoteEvents(String noteEvents) {
    this.noteEvents = noteEvents;
  }


  public ProjectService pipelineEvents(String pipelineEvents) {
    this.pipelineEvents = pipelineEvents;
    return this;
  }

  /**
   * Get pipelineEvents
   * @return pipelineEvents
   */
  @javax.annotation.Nullable
  public String getPipelineEvents() {
    return pipelineEvents;
  }

  public void setPipelineEvents(String pipelineEvents) {
    this.pipelineEvents = pipelineEvents;
  }


  public ProjectService properties(String properties) {
    this.properties = properties;
    return this;
  }

  /**
   * Get properties
   * @return properties
   */
  @javax.annotation.Nullable
  public String getProperties() {
    return properties;
  }

  public void setProperties(String properties) {
    this.properties = properties;
  }


  public ProjectService pushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
    return this;
  }

  /**
   * Get pushEvents
   * @return pushEvents
   */
  @javax.annotation.Nullable
  public String getPushEvents() {
    return pushEvents;
  }

  public void setPushEvents(String pushEvents) {
    this.pushEvents = pushEvents;
  }


  public ProjectService tagPushEvents(String tagPushEvents) {
    this.tagPushEvents = tagPushEvents;
    return this;
  }

  /**
   * Get tagPushEvents
   * @return tagPushEvents
   */
  @javax.annotation.Nullable
  public String getTagPushEvents() {
    return tagPushEvents;
  }

  public void setTagPushEvents(String tagPushEvents) {
    this.tagPushEvents = tagPushEvents;
  }


  public ProjectService title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProjectService updatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public String getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(String updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectService projectService = (ProjectService) o;
    return Objects.equals(this.active, projectService.active) &&
        Objects.equals(this.buildEvents, projectService.buildEvents) &&
        Objects.equals(this.createdAt, projectService.createdAt) &&
        Objects.equals(this.id, projectService.id) &&
        Objects.equals(this.issuesEvents, projectService.issuesEvents) &&
        Objects.equals(this.mergeRequestsEvents, projectService.mergeRequestsEvents) &&
        Objects.equals(this.noteEvents, projectService.noteEvents) &&
        Objects.equals(this.pipelineEvents, projectService.pipelineEvents) &&
        Objects.equals(this.properties, projectService.properties) &&
        Objects.equals(this.pushEvents, projectService.pushEvents) &&
        Objects.equals(this.tagPushEvents, projectService.tagPushEvents) &&
        Objects.equals(this.title, projectService.title) &&
        Objects.equals(this.updatedAt, projectService.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, buildEvents, createdAt, id, issuesEvents, mergeRequestsEvents, noteEvents, pipelineEvents, properties, pushEvents, tagPushEvents, title, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectService {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    buildEvents: ").append(toIndentedString(buildEvents)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuesEvents: ").append(toIndentedString(issuesEvents)).append("\n");
    sb.append("    mergeRequestsEvents: ").append(toIndentedString(mergeRequestsEvents)).append("\n");
    sb.append("    noteEvents: ").append(toIndentedString(noteEvents)).append("\n");
    sb.append("    pipelineEvents: ").append(toIndentedString(pipelineEvents)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    pushEvents: ").append(toIndentedString(pushEvents)).append("\n");
    sb.append("    tagPushEvents: ").append(toIndentedString(tagPushEvents)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("build_events");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("issues_events");
    openapiFields.add("merge_requests_events");
    openapiFields.add("note_events");
    openapiFields.add("pipeline_events");
    openapiFields.add("properties");
    openapiFields.add("push_events");
    openapiFields.add("tag_push_events");
    openapiFields.add("title");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectService
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectService.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectService is not found in the empty JSON string", ProjectService.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectService.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectService` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) && !jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      if ((jsonObj.get("build_events") != null && !jsonObj.get("build_events").isJsonNull()) && !jsonObj.get("build_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `build_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("build_events").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issues_events") != null && !jsonObj.get("issues_events").isJsonNull()) && !jsonObj.get("issues_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_events").toString()));
      }
      if ((jsonObj.get("merge_requests_events") != null && !jsonObj.get("merge_requests_events").isJsonNull()) && !jsonObj.get("merge_requests_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_requests_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_requests_events").toString()));
      }
      if ((jsonObj.get("note_events") != null && !jsonObj.get("note_events").isJsonNull()) && !jsonObj.get("note_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note_events").toString()));
      }
      if ((jsonObj.get("pipeline_events") != null && !jsonObj.get("pipeline_events").isJsonNull()) && !jsonObj.get("pipeline_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_events").toString()));
      }
      if ((jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) && !jsonObj.get("properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }
      if ((jsonObj.get("push_events") != null && !jsonObj.get("push_events").isJsonNull()) && !jsonObj.get("push_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_events").toString()));
      }
      if ((jsonObj.get("tag_push_events") != null && !jsonObj.get("tag_push_events").isJsonNull()) && !jsonObj.get("tag_push_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_push_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_push_events").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectService.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectService' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectService> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectService.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectService>() {
           @Override
           public void write(JsonWriter out, ProjectService value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectService read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectService given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectService
   * @throws IOException if the JSON string is invalid with respect to ProjectService
   */
  public static ProjectService fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectService.class);
  }

  /**
   * Convert an instance of ProjectService to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

