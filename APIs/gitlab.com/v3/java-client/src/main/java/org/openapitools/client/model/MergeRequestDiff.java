/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This feature was introduced in GitLab 8.12.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MergeRequestDiff {
  public static final String SERIALIZED_NAME_BASE_COMMIT_SHA = "base_commit_sha";
  @SerializedName(SERIALIZED_NAME_BASE_COMMIT_SHA)
  private String baseCommitSha;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_HEAD_COMMIT_SHA = "head_commit_sha";
  @SerializedName(SERIALIZED_NAME_HEAD_COMMIT_SHA)
  private String headCommitSha;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MERGE_REQUEST_ID = "merge_request_id";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUEST_ID)
  private String mergeRequestId;

  public static final String SERIALIZED_NAME_REAL_SIZE = "real_size";
  @SerializedName(SERIALIZED_NAME_REAL_SIZE)
  private String realSize;

  public static final String SERIALIZED_NAME_START_COMMIT_SHA = "start_commit_sha";
  @SerializedName(SERIALIZED_NAME_START_COMMIT_SHA)
  private String startCommitSha;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public MergeRequestDiff() {
  }

  public MergeRequestDiff baseCommitSha(String baseCommitSha) {
    this.baseCommitSha = baseCommitSha;
    return this;
  }

  /**
   * Get baseCommitSha
   * @return baseCommitSha
   */
  @javax.annotation.Nullable
  public String getBaseCommitSha() {
    return baseCommitSha;
  }

  public void setBaseCommitSha(String baseCommitSha) {
    this.baseCommitSha = baseCommitSha;
  }


  public MergeRequestDiff createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public MergeRequestDiff headCommitSha(String headCommitSha) {
    this.headCommitSha = headCommitSha;
    return this;
  }

  /**
   * Get headCommitSha
   * @return headCommitSha
   */
  @javax.annotation.Nullable
  public String getHeadCommitSha() {
    return headCommitSha;
  }

  public void setHeadCommitSha(String headCommitSha) {
    this.headCommitSha = headCommitSha;
  }


  public MergeRequestDiff id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MergeRequestDiff mergeRequestId(String mergeRequestId) {
    this.mergeRequestId = mergeRequestId;
    return this;
  }

  /**
   * Get mergeRequestId
   * @return mergeRequestId
   */
  @javax.annotation.Nullable
  public String getMergeRequestId() {
    return mergeRequestId;
  }

  public void setMergeRequestId(String mergeRequestId) {
    this.mergeRequestId = mergeRequestId;
  }


  public MergeRequestDiff realSize(String realSize) {
    this.realSize = realSize;
    return this;
  }

  /**
   * Get realSize
   * @return realSize
   */
  @javax.annotation.Nullable
  public String getRealSize() {
    return realSize;
  }

  public void setRealSize(String realSize) {
    this.realSize = realSize;
  }


  public MergeRequestDiff startCommitSha(String startCommitSha) {
    this.startCommitSha = startCommitSha;
    return this;
  }

  /**
   * Get startCommitSha
   * @return startCommitSha
   */
  @javax.annotation.Nullable
  public String getStartCommitSha() {
    return startCommitSha;
  }

  public void setStartCommitSha(String startCommitSha) {
    this.startCommitSha = startCommitSha;
  }


  public MergeRequestDiff state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MergeRequestDiff mergeRequestDiff = (MergeRequestDiff) o;
    return Objects.equals(this.baseCommitSha, mergeRequestDiff.baseCommitSha) &&
        Objects.equals(this.createdAt, mergeRequestDiff.createdAt) &&
        Objects.equals(this.headCommitSha, mergeRequestDiff.headCommitSha) &&
        Objects.equals(this.id, mergeRequestDiff.id) &&
        Objects.equals(this.mergeRequestId, mergeRequestDiff.mergeRequestId) &&
        Objects.equals(this.realSize, mergeRequestDiff.realSize) &&
        Objects.equals(this.startCommitSha, mergeRequestDiff.startCommitSha) &&
        Objects.equals(this.state, mergeRequestDiff.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseCommitSha, createdAt, headCommitSha, id, mergeRequestId, realSize, startCommitSha, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MergeRequestDiff {\n");
    sb.append("    baseCommitSha: ").append(toIndentedString(baseCommitSha)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    headCommitSha: ").append(toIndentedString(headCommitSha)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mergeRequestId: ").append(toIndentedString(mergeRequestId)).append("\n");
    sb.append("    realSize: ").append(toIndentedString(realSize)).append("\n");
    sb.append("    startCommitSha: ").append(toIndentedString(startCommitSha)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base_commit_sha");
    openapiFields.add("created_at");
    openapiFields.add("head_commit_sha");
    openapiFields.add("id");
    openapiFields.add("merge_request_id");
    openapiFields.add("real_size");
    openapiFields.add("start_commit_sha");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MergeRequestDiff
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MergeRequestDiff.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MergeRequestDiff is not found in the empty JSON string", MergeRequestDiff.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MergeRequestDiff.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MergeRequestDiff` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("base_commit_sha") != null && !jsonObj.get("base_commit_sha").isJsonNull()) && !jsonObj.get("base_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base_commit_sha").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("head_commit_sha") != null && !jsonObj.get("head_commit_sha").isJsonNull()) && !jsonObj.get("head_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `head_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("head_commit_sha").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("merge_request_id") != null && !jsonObj.get("merge_request_id").isJsonNull()) && !jsonObj.get("merge_request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_request_id").toString()));
      }
      if ((jsonObj.get("real_size") != null && !jsonObj.get("real_size").isJsonNull()) && !jsonObj.get("real_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `real_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("real_size").toString()));
      }
      if ((jsonObj.get("start_commit_sha") != null && !jsonObj.get("start_commit_sha").isJsonNull()) && !jsonObj.get("start_commit_sha").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_commit_sha` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_commit_sha").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MergeRequestDiff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MergeRequestDiff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MergeRequestDiff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MergeRequestDiff.class));

       return (TypeAdapter<T>) new TypeAdapter<MergeRequestDiff>() {
           @Override
           public void write(JsonWriter out, MergeRequestDiff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MergeRequestDiff read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MergeRequestDiff given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MergeRequestDiff
   * @throws IOException if the JSON string is invalid with respect to MergeRequestDiff
   */
  public static MergeRequestDiff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MergeRequestDiff.class);
  }

  /**
   * Convert an instance of MergeRequestDiff to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

