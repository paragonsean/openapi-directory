/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdRequest {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ISSUES_ENABLED = "issues_enabled";
  @SerializedName(SERIALIZED_NAME_ISSUES_ENABLED)
  private Boolean issuesEnabled;

  public static final String SERIALIZED_NAME_MERGE_REQUESTS_ENABLED = "merge_requests_enabled";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUESTS_ENABLED)
  private Boolean mergeRequestsEnabled;

  public static final String SERIALIZED_NAME_WIKI_ENABLED = "wiki_enabled";
  @SerializedName(SERIALIZED_NAME_WIKI_ENABLED)
  private Boolean wikiEnabled;

  public static final String SERIALIZED_NAME_BUILDS_ENABLED = "builds_enabled";
  @SerializedName(SERIALIZED_NAME_BUILDS_ENABLED)
  private Boolean buildsEnabled;

  public static final String SERIALIZED_NAME_SNIPPETS_ENABLED = "snippets_enabled";
  @SerializedName(SERIALIZED_NAME_SNIPPETS_ENABLED)
  private Boolean snippetsEnabled;

  public static final String SERIALIZED_NAME_SHARED_RUNNERS_ENABLED = "shared_runners_enabled";
  @SerializedName(SERIALIZED_NAME_SHARED_RUNNERS_ENABLED)
  private Boolean sharedRunnersEnabled;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY_ENABLED = "container_registry_enabled";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY_ENABLED)
  private Boolean containerRegistryEnabled;

  public static final String SERIALIZED_NAME_LFS_ENABLED = "lfs_enabled";
  @SerializedName(SERIALIZED_NAME_LFS_ENABLED)
  private Boolean lfsEnabled;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private Boolean _public;

  /**
   * Create a public project. The same as visibility_level &#x3D; 20.
   */
  @JsonAdapter(VisibilityLevelEnum.Adapter.class)
  public enum VisibilityLevelEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20);

    private Integer value;

    VisibilityLevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityLevelEnum fromValue(Integer value) {
      for (VisibilityLevelEnum b : VisibilityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityLevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VisibilityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      VisibilityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY_LEVEL = "visibility_level";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_LEVEL)
  private VisibilityLevelEnum visibilityLevel;

  public static final String SERIALIZED_NAME_PUBLIC_BUILDS = "public_builds";
  @SerializedName(SERIALIZED_NAME_PUBLIC_BUILDS)
  private Boolean publicBuilds;

  public static final String SERIALIZED_NAME_REQUEST_ACCESS_ENABLED = "request_access_enabled";
  @SerializedName(SERIALIZED_NAME_REQUEST_ACCESS_ENABLED)
  private Boolean requestAccessEnabled;

  public static final String SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_BUILD_SUCCEEDS = "only_allow_merge_if_build_succeeds";
  @SerializedName(SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_BUILD_SUCCEEDS)
  private Boolean onlyAllowMergeIfBuildSucceeds;

  public static final String SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED = "only_allow_merge_if_all_discussions_are_resolved";
  @SerializedName(SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED)
  private Boolean onlyAllowMergeIfAllDiscussionsAreResolved;

  public PutV3ProjectsIdRequest() {
  }

  public PutV3ProjectsIdRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the project
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutV3ProjectsIdRequest defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * The default branch of the project
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public PutV3ProjectsIdRequest path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path of the repository
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public PutV3ProjectsIdRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the project
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutV3ProjectsIdRequest issuesEnabled(Boolean issuesEnabled) {
    this.issuesEnabled = issuesEnabled;
    return this;
  }

  /**
   * Flag indication if the issue tracker is enabled
   * @return issuesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIssuesEnabled() {
    return issuesEnabled;
  }

  public void setIssuesEnabled(Boolean issuesEnabled) {
    this.issuesEnabled = issuesEnabled;
  }


  public PutV3ProjectsIdRequest mergeRequestsEnabled(Boolean mergeRequestsEnabled) {
    this.mergeRequestsEnabled = mergeRequestsEnabled;
    return this;
  }

  /**
   * Flag indication if merge requests are enabled
   * @return mergeRequestsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMergeRequestsEnabled() {
    return mergeRequestsEnabled;
  }

  public void setMergeRequestsEnabled(Boolean mergeRequestsEnabled) {
    this.mergeRequestsEnabled = mergeRequestsEnabled;
  }


  public PutV3ProjectsIdRequest wikiEnabled(Boolean wikiEnabled) {
    this.wikiEnabled = wikiEnabled;
    return this;
  }

  /**
   * Flag indication if the wiki is enabled
   * @return wikiEnabled
   */
  @javax.annotation.Nullable
  public Boolean getWikiEnabled() {
    return wikiEnabled;
  }

  public void setWikiEnabled(Boolean wikiEnabled) {
    this.wikiEnabled = wikiEnabled;
  }


  public PutV3ProjectsIdRequest buildsEnabled(Boolean buildsEnabled) {
    this.buildsEnabled = buildsEnabled;
    return this;
  }

  /**
   * Flag indication if builds are enabled
   * @return buildsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBuildsEnabled() {
    return buildsEnabled;
  }

  public void setBuildsEnabled(Boolean buildsEnabled) {
    this.buildsEnabled = buildsEnabled;
  }


  public PutV3ProjectsIdRequest snippetsEnabled(Boolean snippetsEnabled) {
    this.snippetsEnabled = snippetsEnabled;
    return this;
  }

  /**
   * Flag indication if snippets are enabled
   * @return snippetsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSnippetsEnabled() {
    return snippetsEnabled;
  }

  public void setSnippetsEnabled(Boolean snippetsEnabled) {
    this.snippetsEnabled = snippetsEnabled;
  }


  public PutV3ProjectsIdRequest sharedRunnersEnabled(Boolean sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
    return this;
  }

  /**
   * Flag indication if shared runners are enabled for that project
   * @return sharedRunnersEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSharedRunnersEnabled() {
    return sharedRunnersEnabled;
  }

  public void setSharedRunnersEnabled(Boolean sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
  }


  public PutV3ProjectsIdRequest containerRegistryEnabled(Boolean containerRegistryEnabled) {
    this.containerRegistryEnabled = containerRegistryEnabled;
    return this;
  }

  /**
   * Flag indication if the container registry is enabled for that project
   * @return containerRegistryEnabled
   */
  @javax.annotation.Nullable
  public Boolean getContainerRegistryEnabled() {
    return containerRegistryEnabled;
  }

  public void setContainerRegistryEnabled(Boolean containerRegistryEnabled) {
    this.containerRegistryEnabled = containerRegistryEnabled;
  }


  public PutV3ProjectsIdRequest lfsEnabled(Boolean lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
    return this;
  }

  /**
   * Flag indication if Git LFS is enabled for that project
   * @return lfsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLfsEnabled() {
    return lfsEnabled;
  }

  public void setLfsEnabled(Boolean lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
  }


  public PutV3ProjectsIdRequest _public(Boolean _public) {
    this._public = _public;
    return this;
  }

  /**
   * Create a public project. The same as visibility_level &#x3D; 20.
   * @return _public
   */
  @javax.annotation.Nullable
  public Boolean getPublic() {
    return _public;
  }

  public void setPublic(Boolean _public) {
    this._public = _public;
  }


  public PutV3ProjectsIdRequest visibilityLevel(VisibilityLevelEnum visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
    return this;
  }

  /**
   * Create a public project. The same as visibility_level &#x3D; 20.
   * @return visibilityLevel
   */
  @javax.annotation.Nullable
  public VisibilityLevelEnum getVisibilityLevel() {
    return visibilityLevel;
  }

  public void setVisibilityLevel(VisibilityLevelEnum visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
  }


  public PutV3ProjectsIdRequest publicBuilds(Boolean publicBuilds) {
    this.publicBuilds = publicBuilds;
    return this;
  }

  /**
   * Perform public builds
   * @return publicBuilds
   */
  @javax.annotation.Nullable
  public Boolean getPublicBuilds() {
    return publicBuilds;
  }

  public void setPublicBuilds(Boolean publicBuilds) {
    this.publicBuilds = publicBuilds;
  }


  public PutV3ProjectsIdRequest requestAccessEnabled(Boolean requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
    return this;
  }

  /**
   * Allow users to request member access
   * @return requestAccessEnabled
   */
  @javax.annotation.Nullable
  public Boolean getRequestAccessEnabled() {
    return requestAccessEnabled;
  }

  public void setRequestAccessEnabled(Boolean requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
  }


  public PutV3ProjectsIdRequest onlyAllowMergeIfBuildSucceeds(Boolean onlyAllowMergeIfBuildSucceeds) {
    this.onlyAllowMergeIfBuildSucceeds = onlyAllowMergeIfBuildSucceeds;
    return this;
  }

  /**
   * Only allow to merge if builds succeed
   * @return onlyAllowMergeIfBuildSucceeds
   */
  @javax.annotation.Nullable
  public Boolean getOnlyAllowMergeIfBuildSucceeds() {
    return onlyAllowMergeIfBuildSucceeds;
  }

  public void setOnlyAllowMergeIfBuildSucceeds(Boolean onlyAllowMergeIfBuildSucceeds) {
    this.onlyAllowMergeIfBuildSucceeds = onlyAllowMergeIfBuildSucceeds;
  }


  public PutV3ProjectsIdRequest onlyAllowMergeIfAllDiscussionsAreResolved(Boolean onlyAllowMergeIfAllDiscussionsAreResolved) {
    this.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
    return this;
  }

  /**
   * Only allow to merge if all discussions are resolved
   * @return onlyAllowMergeIfAllDiscussionsAreResolved
   */
  @javax.annotation.Nullable
  public Boolean getOnlyAllowMergeIfAllDiscussionsAreResolved() {
    return onlyAllowMergeIfAllDiscussionsAreResolved;
  }

  public void setOnlyAllowMergeIfAllDiscussionsAreResolved(Boolean onlyAllowMergeIfAllDiscussionsAreResolved) {
    this.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdRequest putV3ProjectsIdRequest = (PutV3ProjectsIdRequest) o;
    return Objects.equals(this.name, putV3ProjectsIdRequest.name) &&
        Objects.equals(this.defaultBranch, putV3ProjectsIdRequest.defaultBranch) &&
        Objects.equals(this.path, putV3ProjectsIdRequest.path) &&
        Objects.equals(this.description, putV3ProjectsIdRequest.description) &&
        Objects.equals(this.issuesEnabled, putV3ProjectsIdRequest.issuesEnabled) &&
        Objects.equals(this.mergeRequestsEnabled, putV3ProjectsIdRequest.mergeRequestsEnabled) &&
        Objects.equals(this.wikiEnabled, putV3ProjectsIdRequest.wikiEnabled) &&
        Objects.equals(this.buildsEnabled, putV3ProjectsIdRequest.buildsEnabled) &&
        Objects.equals(this.snippetsEnabled, putV3ProjectsIdRequest.snippetsEnabled) &&
        Objects.equals(this.sharedRunnersEnabled, putV3ProjectsIdRequest.sharedRunnersEnabled) &&
        Objects.equals(this.containerRegistryEnabled, putV3ProjectsIdRequest.containerRegistryEnabled) &&
        Objects.equals(this.lfsEnabled, putV3ProjectsIdRequest.lfsEnabled) &&
        Objects.equals(this._public, putV3ProjectsIdRequest._public) &&
        Objects.equals(this.visibilityLevel, putV3ProjectsIdRequest.visibilityLevel) &&
        Objects.equals(this.publicBuilds, putV3ProjectsIdRequest.publicBuilds) &&
        Objects.equals(this.requestAccessEnabled, putV3ProjectsIdRequest.requestAccessEnabled) &&
        Objects.equals(this.onlyAllowMergeIfBuildSucceeds, putV3ProjectsIdRequest.onlyAllowMergeIfBuildSucceeds) &&
        Objects.equals(this.onlyAllowMergeIfAllDiscussionsAreResolved, putV3ProjectsIdRequest.onlyAllowMergeIfAllDiscussionsAreResolved);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, defaultBranch, path, description, issuesEnabled, mergeRequestsEnabled, wikiEnabled, buildsEnabled, snippetsEnabled, sharedRunnersEnabled, containerRegistryEnabled, lfsEnabled, _public, visibilityLevel, publicBuilds, requestAccessEnabled, onlyAllowMergeIfBuildSucceeds, onlyAllowMergeIfAllDiscussionsAreResolved);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    issuesEnabled: ").append(toIndentedString(issuesEnabled)).append("\n");
    sb.append("    mergeRequestsEnabled: ").append(toIndentedString(mergeRequestsEnabled)).append("\n");
    sb.append("    wikiEnabled: ").append(toIndentedString(wikiEnabled)).append("\n");
    sb.append("    buildsEnabled: ").append(toIndentedString(buildsEnabled)).append("\n");
    sb.append("    snippetsEnabled: ").append(toIndentedString(snippetsEnabled)).append("\n");
    sb.append("    sharedRunnersEnabled: ").append(toIndentedString(sharedRunnersEnabled)).append("\n");
    sb.append("    containerRegistryEnabled: ").append(toIndentedString(containerRegistryEnabled)).append("\n");
    sb.append("    lfsEnabled: ").append(toIndentedString(lfsEnabled)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    visibilityLevel: ").append(toIndentedString(visibilityLevel)).append("\n");
    sb.append("    publicBuilds: ").append(toIndentedString(publicBuilds)).append("\n");
    sb.append("    requestAccessEnabled: ").append(toIndentedString(requestAccessEnabled)).append("\n");
    sb.append("    onlyAllowMergeIfBuildSucceeds: ").append(toIndentedString(onlyAllowMergeIfBuildSucceeds)).append("\n");
    sb.append("    onlyAllowMergeIfAllDiscussionsAreResolved: ").append(toIndentedString(onlyAllowMergeIfAllDiscussionsAreResolved)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("default_branch");
    openapiFields.add("path");
    openapiFields.add("description");
    openapiFields.add("issues_enabled");
    openapiFields.add("merge_requests_enabled");
    openapiFields.add("wiki_enabled");
    openapiFields.add("builds_enabled");
    openapiFields.add("snippets_enabled");
    openapiFields.add("shared_runners_enabled");
    openapiFields.add("container_registry_enabled");
    openapiFields.add("lfs_enabled");
    openapiFields.add("public");
    openapiFields.add("visibility_level");
    openapiFields.add("public_builds");
    openapiFields.add("request_access_enabled");
    openapiFields.add("only_allow_merge_if_build_succeeds");
    openapiFields.add("only_allow_merge_if_all_discussions_are_resolved");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdRequest is not found in the empty JSON string", PutV3ProjectsIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `visibility_level`
      if (jsonObj.get("visibility_level") != null && !jsonObj.get("visibility_level").isJsonNull()) {
        VisibilityLevelEnum.validateJsonElement(jsonObj.get("visibility_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdRequest
   */
  public static PutV3ProjectsIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

