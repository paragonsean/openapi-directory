/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepoDiff
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepoDiff {
  public static final String SERIALIZED_NAME_A_MODE = "a_mode";
  @SerializedName(SERIALIZED_NAME_A_MODE)
  private String aMode;

  public static final String SERIALIZED_NAME_B_MODE = "b_mode";
  @SerializedName(SERIALIZED_NAME_B_MODE)
  private String bMode;

  public static final String SERIALIZED_NAME_DELETED_FILE = "deleted_file";
  @SerializedName(SERIALIZED_NAME_DELETED_FILE)
  private String deletedFile;

  public static final String SERIALIZED_NAME_DIFF = "diff";
  @SerializedName(SERIALIZED_NAME_DIFF)
  private String diff;

  public static final String SERIALIZED_NAME_NEW_FILE = "new_file";
  @SerializedName(SERIALIZED_NAME_NEW_FILE)
  private String newFile;

  public static final String SERIALIZED_NAME_NEW_PATH = "new_path";
  @SerializedName(SERIALIZED_NAME_NEW_PATH)
  private String newPath;

  public static final String SERIALIZED_NAME_OLD_PATH = "old_path";
  @SerializedName(SERIALIZED_NAME_OLD_PATH)
  private String oldPath;

  public static final String SERIALIZED_NAME_RENAMED_FILE = "renamed_file";
  @SerializedName(SERIALIZED_NAME_RENAMED_FILE)
  private String renamedFile;

  public RepoDiff() {
  }

  public RepoDiff aMode(String aMode) {
    this.aMode = aMode;
    return this;
  }

  /**
   * Get aMode
   * @return aMode
   */
  @javax.annotation.Nullable
  public String getaMode() {
    return aMode;
  }

  public void setaMode(String aMode) {
    this.aMode = aMode;
  }


  public RepoDiff bMode(String bMode) {
    this.bMode = bMode;
    return this;
  }

  /**
   * Get bMode
   * @return bMode
   */
  @javax.annotation.Nullable
  public String getbMode() {
    return bMode;
  }

  public void setbMode(String bMode) {
    this.bMode = bMode;
  }


  public RepoDiff deletedFile(String deletedFile) {
    this.deletedFile = deletedFile;
    return this;
  }

  /**
   * Get deletedFile
   * @return deletedFile
   */
  @javax.annotation.Nullable
  public String getDeletedFile() {
    return deletedFile;
  }

  public void setDeletedFile(String deletedFile) {
    this.deletedFile = deletedFile;
  }


  public RepoDiff diff(String diff) {
    this.diff = diff;
    return this;
  }

  /**
   * Get diff
   * @return diff
   */
  @javax.annotation.Nullable
  public String getDiff() {
    return diff;
  }

  public void setDiff(String diff) {
    this.diff = diff;
  }


  public RepoDiff newFile(String newFile) {
    this.newFile = newFile;
    return this;
  }

  /**
   * Get newFile
   * @return newFile
   */
  @javax.annotation.Nullable
  public String getNewFile() {
    return newFile;
  }

  public void setNewFile(String newFile) {
    this.newFile = newFile;
  }


  public RepoDiff newPath(String newPath) {
    this.newPath = newPath;
    return this;
  }

  /**
   * Get newPath
   * @return newPath
   */
  @javax.annotation.Nullable
  public String getNewPath() {
    return newPath;
  }

  public void setNewPath(String newPath) {
    this.newPath = newPath;
  }


  public RepoDiff oldPath(String oldPath) {
    this.oldPath = oldPath;
    return this;
  }

  /**
   * Get oldPath
   * @return oldPath
   */
  @javax.annotation.Nullable
  public String getOldPath() {
    return oldPath;
  }

  public void setOldPath(String oldPath) {
    this.oldPath = oldPath;
  }


  public RepoDiff renamedFile(String renamedFile) {
    this.renamedFile = renamedFile;
    return this;
  }

  /**
   * Get renamedFile
   * @return renamedFile
   */
  @javax.annotation.Nullable
  public String getRenamedFile() {
    return renamedFile;
  }

  public void setRenamedFile(String renamedFile) {
    this.renamedFile = renamedFile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepoDiff repoDiff = (RepoDiff) o;
    return Objects.equals(this.aMode, repoDiff.aMode) &&
        Objects.equals(this.bMode, repoDiff.bMode) &&
        Objects.equals(this.deletedFile, repoDiff.deletedFile) &&
        Objects.equals(this.diff, repoDiff.diff) &&
        Objects.equals(this.newFile, repoDiff.newFile) &&
        Objects.equals(this.newPath, repoDiff.newPath) &&
        Objects.equals(this.oldPath, repoDiff.oldPath) &&
        Objects.equals(this.renamedFile, repoDiff.renamedFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aMode, bMode, deletedFile, diff, newFile, newPath, oldPath, renamedFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepoDiff {\n");
    sb.append("    aMode: ").append(toIndentedString(aMode)).append("\n");
    sb.append("    bMode: ").append(toIndentedString(bMode)).append("\n");
    sb.append("    deletedFile: ").append(toIndentedString(deletedFile)).append("\n");
    sb.append("    diff: ").append(toIndentedString(diff)).append("\n");
    sb.append("    newFile: ").append(toIndentedString(newFile)).append("\n");
    sb.append("    newPath: ").append(toIndentedString(newPath)).append("\n");
    sb.append("    oldPath: ").append(toIndentedString(oldPath)).append("\n");
    sb.append("    renamedFile: ").append(toIndentedString(renamedFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("a_mode");
    openapiFields.add("b_mode");
    openapiFields.add("deleted_file");
    openapiFields.add("diff");
    openapiFields.add("new_file");
    openapiFields.add("new_path");
    openapiFields.add("old_path");
    openapiFields.add("renamed_file");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepoDiff
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepoDiff.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepoDiff is not found in the empty JSON string", RepoDiff.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepoDiff.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepoDiff` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("a_mode") != null && !jsonObj.get("a_mode").isJsonNull()) && !jsonObj.get("a_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `a_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("a_mode").toString()));
      }
      if ((jsonObj.get("b_mode") != null && !jsonObj.get("b_mode").isJsonNull()) && !jsonObj.get("b_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `b_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("b_mode").toString()));
      }
      if ((jsonObj.get("deleted_file") != null && !jsonObj.get("deleted_file").isJsonNull()) && !jsonObj.get("deleted_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_file").toString()));
      }
      if ((jsonObj.get("diff") != null && !jsonObj.get("diff").isJsonNull()) && !jsonObj.get("diff").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `diff` to be a primitive type in the JSON string but got `%s`", jsonObj.get("diff").toString()));
      }
      if ((jsonObj.get("new_file") != null && !jsonObj.get("new_file").isJsonNull()) && !jsonObj.get("new_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_file").toString()));
      }
      if ((jsonObj.get("new_path") != null && !jsonObj.get("new_path").isJsonNull()) && !jsonObj.get("new_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_path").toString()));
      }
      if ((jsonObj.get("old_path") != null && !jsonObj.get("old_path").isJsonNull()) && !jsonObj.get("old_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `old_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("old_path").toString()));
      }
      if ((jsonObj.get("renamed_file") != null && !jsonObj.get("renamed_file").isJsonNull()) && !jsonObj.get("renamed_file").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renamed_file` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renamed_file").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepoDiff.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepoDiff' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepoDiff> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepoDiff.class));

       return (TypeAdapter<T>) new TypeAdapter<RepoDiff>() {
           @Override
           public void write(JsonWriter out, RepoDiff value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepoDiff read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepoDiff given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepoDiff
   * @throws IOException if the JSON string is invalid with respect to RepoDiff
   */
  public static RepoDiff fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepoDiff.class);
  }

  /**
   * Convert an instance of RepoDiff to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

