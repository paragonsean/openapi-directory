/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessRequester;
import org.openapitools.client.model.Group;
import org.openapitools.client.model.GroupDetail;
import org.openapitools.client.model.Issue;
import org.openapitools.client.model.Member;
import org.openapitools.client.model.NotificationSetting;
import org.openapitools.client.model.PostV3GroupsIdMembersRequest;
import org.openapitools.client.model.PostV3GroupsRequest;
import org.openapitools.client.model.Project;
import org.openapitools.client.model.PutV3GroupsIdAccessRequestsUserIdApproveRequest;
import org.openapitools.client.model.PutV3GroupsIdMembersUserIdRequest;
import org.openapitools.client.model.PutV3GroupsIdNotificationSettingsRequest;
import org.openapitools.client.model.PutV3GroupsIdRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3GroupsId
     * @param id The ID of a group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3GroupsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3GroupsId(Async)");
        }

        return deleteV3GroupsIdCall(id, _callback);

    }

    /**
     * Remove a group.
     * Remove a group.
     * @param id The ID of a group (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a group. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3GroupsId(String id) throws ApiException {
        deleteV3GroupsIdWithHttpInfo(id);
    }

    /**
     * Remove a group.
     * Remove a group.
     * @param id The ID of a group (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3GroupsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3GroupsIdValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a group. (asynchronously)
     * Remove a group.
     * @param id The ID of a group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Remove a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3GroupsIdValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3GroupsIdAccessRequestsUserId
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdAccessRequestsUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/access_requests/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3GroupsIdAccessRequestsUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3GroupsIdAccessRequestsUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteV3GroupsIdAccessRequestsUserId(Async)");
        }

        return deleteV3GroupsIdAccessRequestsUserIdCall(id, userId, _callback);

    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3GroupsIdAccessRequestsUserId(String id, Integer userId) throws ApiException {
        deleteV3GroupsIdAccessRequestsUserIdWithHttpInfo(id, userId);
    }

    /**
     * Denies an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3GroupsIdAccessRequestsUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3GroupsIdAccessRequestsUserIdValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Denies an access request for the given user. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Denies an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdAccessRequestsUserIdAsync(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3GroupsIdAccessRequestsUserIdValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3GroupsIdMembersUserId
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdMembersUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3GroupsIdMembersUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3GroupsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteV3GroupsIdMembersUserId(Async)");
        }

        return deleteV3GroupsIdMembersUserIdCall(id, userId, _callback);

    }

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteV3GroupsIdMembersUserId(String id, Integer userId) throws ApiException {
        deleteV3GroupsIdMembersUserIdWithHttpInfo(id, userId);
    }

    /**
     * Removes a user from a group or project.
     * Removes a user from a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteV3GroupsIdMembersUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a user from a group or project. (asynchronously)
     * Removes a user from a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Removes a user from a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3GroupsIdMembersUserIdAsync(String id, Integer userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3Groups
     * @param statistics Include project statistics (optional)
     * @param allAvailable Show all group that you have access to (optional)
     * @param search Search for a specific group (optional)
     * @param orderBy Order by name or path (optional, default to name)
     * @param sort Sort by asc (ascending) or desc (descending) (optional, default to asc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param skipGroups Array of group ids to exclude from list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a groups list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsCall(Boolean statistics, Boolean allAvailable, String search, String orderBy, String sort, Integer page, Integer perPage, List<Integer> skipGroups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skipGroups != null) {
            localVarFormParams.put("skip_groups", skipGroups);
        }

        if (statistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statistics", statistics));
        }

        if (allAvailable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("all_available", allAvailable));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsValidateBeforeCall(Boolean statistics, Boolean allAvailable, String search, String orderBy, String sort, Integer page, Integer perPage, List<Integer> skipGroups, final ApiCallback _callback) throws ApiException {
        return getV3GroupsCall(statistics, allAvailable, search, orderBy, sort, page, perPage, skipGroups, _callback);

    }

    /**
     * Get a groups list
     * Get a groups list
     * @param statistics Include project statistics (optional)
     * @param allAvailable Show all group that you have access to (optional)
     * @param search Search for a specific group (optional)
     * @param orderBy Order by name or path (optional, default to name)
     * @param sort Sort by asc (ascending) or desc (descending) (optional, default to asc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param skipGroups Array of group ids to exclude from list (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a groups list </td><td>  -  </td></tr>
     </table>
     */
    public Group getV3Groups(Boolean statistics, Boolean allAvailable, String search, String orderBy, String sort, Integer page, Integer perPage, List<Integer> skipGroups) throws ApiException {
        ApiResponse<Group> localVarResp = getV3GroupsWithHttpInfo(statistics, allAvailable, search, orderBy, sort, page, perPage, skipGroups);
        return localVarResp.getData();
    }

    /**
     * Get a groups list
     * Get a groups list
     * @param statistics Include project statistics (optional)
     * @param allAvailable Show all group that you have access to (optional)
     * @param search Search for a specific group (optional)
     * @param orderBy Order by name or path (optional, default to name)
     * @param sort Sort by asc (ascending) or desc (descending) (optional, default to asc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param skipGroups Array of group ids to exclude from list (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a groups list </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getV3GroupsWithHttpInfo(Boolean statistics, Boolean allAvailable, String search, String orderBy, String sort, Integer page, Integer perPage, List<Integer> skipGroups) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsValidateBeforeCall(statistics, allAvailable, search, orderBy, sort, page, perPage, skipGroups, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a groups list (asynchronously)
     * Get a groups list
     * @param statistics Include project statistics (optional)
     * @param allAvailable Show all group that you have access to (optional)
     * @param search Search for a specific group (optional)
     * @param orderBy Order by name or path (optional, default to name)
     * @param sort Sort by asc (ascending) or desc (descending) (optional, default to asc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param skipGroups Array of group ids to exclude from list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a groups list </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsAsync(Boolean statistics, Boolean allAvailable, String search, String orderBy, String sort, Integer page, Integer perPage, List<Integer> skipGroups, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsValidateBeforeCall(statistics, allAvailable, search, orderBy, sort, page, perPage, skipGroups, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsId
     * @param id The ID of a group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single group, with containing projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsId(Async)");
        }

        return getV3GroupsIdCall(id, _callback);

    }

    /**
     * Get a single group, with containing projects.
     * Get a single group, with containing projects.
     * @param id The ID of a group (required)
     * @return GroupDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single group, with containing projects. </td><td>  -  </td></tr>
     </table>
     */
    public GroupDetail getV3GroupsId(String id) throws ApiException {
        ApiResponse<GroupDetail> localVarResp = getV3GroupsIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single group, with containing projects.
     * Get a single group, with containing projects.
     * @param id The ID of a group (required)
     * @return ApiResponse&lt;GroupDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single group, with containing projects. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupDetail> getV3GroupsIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<GroupDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single group, with containing projects. (asynchronously)
     * Get a single group, with containing projects.
     * @param id The ID of a group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single group, with containing projects. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdAsync(String id, final ApiCallback<GroupDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<GroupDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdAccessRequests
     * @param id The group ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdAccessRequestsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdAccessRequestsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdAccessRequests(Async)");
        }

        return getV3GroupsIdAccessRequestsCall(id, page, perPage, _callback);

    }

    /**
     * Gets a list of access requests for a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return AccessRequester
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessRequester getV3GroupsIdAccessRequests(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<AccessRequester> localVarResp = getV3GroupsIdAccessRequestsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Gets a list of access requests for a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;AccessRequester&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessRequester> getV3GroupsIdAccessRequestsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdAccessRequestsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of access requests for a group. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of access requests for a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdAccessRequestsAsync(String id, Integer page, Integer perPage, final ApiCallback<AccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdAccessRequestsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdIssues
     * @param id The ID of a group (required)
     * @param state Return opened, closed, or all issues (optional, default to opened)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of group issues </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdIssuesCall(String id, String state, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/issues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (labels != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("labels", labels));
        }

        if (milestone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("milestone", milestone));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdIssuesValidateBeforeCall(String id, String state, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdIssues(Async)");
        }

        return getV3GroupsIdIssuesCall(id, state, labels, milestone, orderBy, sort, page, perPage, _callback);

    }

    /**
     * Get a list of group issues
     * Get a list of group issues
     * @param id The ID of a group (required)
     * @param state Return opened, closed, or all issues (optional, default to opened)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Issue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of group issues </td><td>  -  </td></tr>
     </table>
     */
    public Issue getV3GroupsIdIssues(String id, String state, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Issue> localVarResp = getV3GroupsIdIssuesWithHttpInfo(id, state, labels, milestone, orderBy, sort, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of group issues
     * Get a list of group issues
     * @param id The ID of a group (required)
     * @param state Return opened, closed, or all issues (optional, default to opened)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Issue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of group issues </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Issue> getV3GroupsIdIssuesWithHttpInfo(String id, String state, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdIssuesValidateBeforeCall(id, state, labels, milestone, orderBy, sort, page, perPage, null);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of group issues (asynchronously)
     * Get a list of group issues
     * @param id The ID of a group (required)
     * @param state Return opened, closed, or all issues (optional, default to opened)
     * @param labels Comma-separated list of label names (optional)
     * @param milestone Return issues for a specific milestone (optional)
     * @param orderBy Return issues ordered by &#x60;created_at&#x60; or &#x60;updated_at&#x60; fields. (optional, default to created_at)
     * @param sort Return issues sorted in &#x60;asc&#x60; or &#x60;desc&#x60; order. (optional, default to desc)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of group issues </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdIssuesAsync(String id, String state, String labels, String milestone, String orderBy, String sort, Integer page, Integer perPage, final ApiCallback<Issue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdIssuesValidateBeforeCall(id, state, labels, milestone, orderBy, sort, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Issue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdMembers
     * @param id The group ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdMembersCall(String id, String query, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdMembersValidateBeforeCall(String id, String query, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdMembers(Async)");
        }

        return getV3GroupsIdMembersCall(id, query, page, perPage, _callback);

    }

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The group ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public Member getV3GroupsIdMembers(String id, String query, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Member> localVarResp = getV3GroupsIdMembersWithHttpInfo(id, query, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Gets a list of group or project members viewable by the authenticated user.
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The group ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> getV3GroupsIdMembersWithHttpInfo(String id, String query, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdMembersValidateBeforeCall(id, query, page, perPage, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of group or project members viewable by the authenticated user. (asynchronously)
     * Gets a list of group or project members viewable by the authenticated user.
     * @param id The group ID (required)
     * @param query A query string to search for members (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a list of group or project members viewable by the authenticated user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdMembersAsync(String id, String query, Integer page, Integer perPage, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdMembersValidateBeforeCall(id, query, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdMembersUserId
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdMembersUserIdCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdMembersUserIdValidateBeforeCall(String id, Integer userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getV3GroupsIdMembersUserId(Async)");
        }

        return getV3GroupsIdMembersUserIdCall(id, userId, _callback);

    }

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member getV3GroupsIdMembersUserId(String id, Integer userId) throws ApiException {
        ApiResponse<Member> localVarResp = getV3GroupsIdMembersUserIdWithHttpInfo(id, userId);
        return localVarResp.getData();
    }

    /**
     * Gets a member of a group or project.
     * Gets a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> getV3GroupsIdMembersUserIdWithHttpInfo(String id, Integer userId) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a member of a group or project. (asynchronously)
     * Gets a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the member (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdMembersUserIdAsync(String id, Integer userId, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdNotificationSettings
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdNotificationSettingsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/notification_settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdNotificationSettingsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdNotificationSettings(Async)");
        }

        return getV3GroupsIdNotificationSettingsCall(id, _callback);

    }

    /**
     * Get group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @return NotificationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSetting getV3GroupsIdNotificationSettings(String id) throws ApiException {
        ApiResponse<NotificationSetting> localVarResp = getV3GroupsIdNotificationSettingsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @return ApiResponse&lt;NotificationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSetting> getV3GroupsIdNotificationSettingsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdNotificationSettingsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get group level notification level settings, defaults to Global (asynchronously)
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdNotificationSettingsAsync(String id, final ApiCallback<NotificationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdNotificationSettingsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsIdProjects
     * @param id The ID of a group (required)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of projects in this group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdProjectsCall(String id, Boolean archived, String visibility, String search, String orderBy, String sort, Boolean simple, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/projects"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (archived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("archived", archived));
        }

        if (visibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("visibility", visibility));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (simple != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simple", simple));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsIdProjectsValidateBeforeCall(String id, Boolean archived, String visibility, String search, String orderBy, String sort, Boolean simple, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3GroupsIdProjects(Async)");
        }

        return getV3GroupsIdProjectsCall(id, archived, visibility, search, orderBy, sort, simple, page, perPage, _callback);

    }

    /**
     * Get a list of projects in this group.
     * Get a list of projects in this group.
     * @param id The ID of a group (required)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Project
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of projects in this group. </td><td>  -  </td></tr>
     </table>
     */
    public Project getV3GroupsIdProjects(String id, Boolean archived, String visibility, String search, String orderBy, String sort, Boolean simple, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Project> localVarResp = getV3GroupsIdProjectsWithHttpInfo(id, archived, visibility, search, orderBy, sort, simple, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get a list of projects in this group.
     * Get a list of projects in this group.
     * @param id The ID of a group (required)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Project&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of projects in this group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Project> getV3GroupsIdProjectsWithHttpInfo(String id, Boolean archived, String visibility, String search, String orderBy, String sort, Boolean simple, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsIdProjectsValidateBeforeCall(id, archived, visibility, search, orderBy, sort, simple, page, perPage, null);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of projects in this group. (asynchronously)
     * Get a list of projects in this group.
     * @param id The ID of a group (required)
     * @param archived Limit by archived status (optional)
     * @param visibility Limit by visibility (optional)
     * @param search Return list of authorized projects matching the search criteria (optional)
     * @param orderBy Return projects ordered by field (optional, default to created_at)
     * @param sort Return projects sorted in ascending and descending order (optional, default to desc)
     * @param simple Return only the ID, URL, name, and path of each project (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a list of projects in this group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsIdProjectsAsync(String id, Boolean archived, String visibility, String search, String orderBy, String sort, Boolean simple, Integer page, Integer perPage, final ApiCallback<Project> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsIdProjectsValidateBeforeCall(id, archived, visibility, search, orderBy, sort, simple, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Project>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3GroupsOwned
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of owned groups for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsOwnedCall(Integer page, Integer perPage, Boolean statistics, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/owned";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (statistics != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statistics", statistics));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3GroupsOwnedValidateBeforeCall(Integer page, Integer perPage, Boolean statistics, final ApiCallback _callback) throws ApiException {
        return getV3GroupsOwnedCall(page, perPage, statistics, _callback);

    }

    /**
     * Get list of owned groups for authenticated user
     * Get list of owned groups for authenticated user
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param statistics Include project statistics (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of owned groups for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public Group getV3GroupsOwned(Integer page, Integer perPage, Boolean statistics) throws ApiException {
        ApiResponse<Group> localVarResp = getV3GroupsOwnedWithHttpInfo(page, perPage, statistics);
        return localVarResp.getData();
    }

    /**
     * Get list of owned groups for authenticated user
     * Get list of owned groups for authenticated user
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param statistics Include project statistics (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of owned groups for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> getV3GroupsOwnedWithHttpInfo(Integer page, Integer perPage, Boolean statistics) throws ApiException {
        okhttp3.Call localVarCall = getV3GroupsOwnedValidateBeforeCall(page, perPage, statistics, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list of owned groups for authenticated user (asynchronously)
     * Get list of owned groups for authenticated user
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param statistics Include project statistics (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get list of owned groups for authenticated user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3GroupsOwnedAsync(Integer page, Integer perPage, Boolean statistics, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3GroupsOwnedValidateBeforeCall(page, perPage, statistics, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3Groups
     * @param postV3GroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a group. Available only for users who can create groups. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsCall(PostV3GroupsRequest postV3GroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3GroupsRequest;

        // create path and map variables
        String localVarPath = "/v3/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3GroupsValidateBeforeCall(PostV3GroupsRequest postV3GroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3GroupsRequest' is set
        if (postV3GroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3GroupsRequest' when calling postV3Groups(Async)");
        }

        return postV3GroupsCall(postV3GroupsRequest, _callback);

    }

    /**
     * Create a group. Available only for users who can create groups.
     * Create a group. Available only for users who can create groups.
     * @param postV3GroupsRequest  (required)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a group. Available only for users who can create groups. </td><td>  -  </td></tr>
     </table>
     */
    public Group postV3Groups(PostV3GroupsRequest postV3GroupsRequest) throws ApiException {
        ApiResponse<Group> localVarResp = postV3GroupsWithHttpInfo(postV3GroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Create a group. Available only for users who can create groups.
     * Create a group. Available only for users who can create groups.
     * @param postV3GroupsRequest  (required)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a group. Available only for users who can create groups. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> postV3GroupsWithHttpInfo(PostV3GroupsRequest postV3GroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3GroupsValidateBeforeCall(postV3GroupsRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a group. Available only for users who can create groups. (asynchronously)
     * Create a group. Available only for users who can create groups.
     * @param postV3GroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a group. Available only for users who can create groups. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsAsync(PostV3GroupsRequest postV3GroupsRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3GroupsValidateBeforeCall(postV3GroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3GroupsIdAccessRequests
     * @param id The group ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdAccessRequestsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/access_requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3GroupsIdAccessRequestsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3GroupsIdAccessRequests(Async)");
        }

        return postV3GroupsIdAccessRequestsCall(id, _callback);

    }

    /**
     * Requests access for the authenticated user to a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @return AccessRequester
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a group. </td><td>  -  </td></tr>
     </table>
     */
    public AccessRequester postV3GroupsIdAccessRequests(String id) throws ApiException {
        ApiResponse<AccessRequester> localVarResp = postV3GroupsIdAccessRequestsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Requests access for the authenticated user to a group.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @return ApiResponse&lt;AccessRequester&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessRequester> postV3GroupsIdAccessRequestsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = postV3GroupsIdAccessRequestsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Requests access for the authenticated user to a group. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Requests access for the authenticated user to a group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdAccessRequestsAsync(String id, final ApiCallback<AccessRequester> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3GroupsIdAccessRequestsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AccessRequester>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3GroupsIdMembers
     * @param id The group ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdMembersCall(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3GroupsIdMembersRequest;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/members"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3GroupsIdMembersValidateBeforeCall(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3GroupsIdMembers(Async)");
        }

        // verify the required parameter 'postV3GroupsIdMembersRequest' is set
        if (postV3GroupsIdMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3GroupsIdMembersRequest' when calling postV3GroupsIdMembers(Async)");
        }

        return postV3GroupsIdMembersCall(id, postV3GroupsIdMembersRequest, _callback);

    }

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param id The group ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member postV3GroupsIdMembers(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest) throws ApiException {
        ApiResponse<Member> localVarResp = postV3GroupsIdMembersWithHttpInfo(id, postV3GroupsIdMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Adds a member to a group or project.
     * Adds a member to a group or project.
     * @param id The group ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> postV3GroupsIdMembersWithHttpInfo(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3GroupsIdMembersValidateBeforeCall(id, postV3GroupsIdMembersRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a member to a group or project. (asynchronously)
     * Adds a member to a group or project.
     * @param id The group ID (required)
     * @param postV3GroupsIdMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Adds a member to a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdMembersAsync(String id, PostV3GroupsIdMembersRequest postV3GroupsIdMembersRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3GroupsIdMembersValidateBeforeCall(id, postV3GroupsIdMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3GroupsIdProjectsProjectId
     * @param id The ID of a group (required)
     * @param projectId The ID or path of the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transfer a project to the group namespace. Available only for admin. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdProjectsProjectIdCall(String id, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/projects/{project_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3GroupsIdProjectsProjectIdValidateBeforeCall(String id, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3GroupsIdProjectsProjectId(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postV3GroupsIdProjectsProjectId(Async)");
        }

        return postV3GroupsIdProjectsProjectIdCall(id, projectId, _callback);

    }

    /**
     * Transfer a project to the group namespace. Available only for admin.
     * Transfer a project to the group namespace. Available only for admin.
     * @param id The ID of a group (required)
     * @param projectId The ID or path of the project (required)
     * @return GroupDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transfer a project to the group namespace. Available only for admin. </td><td>  -  </td></tr>
     </table>
     */
    public GroupDetail postV3GroupsIdProjectsProjectId(String id, String projectId) throws ApiException {
        ApiResponse<GroupDetail> localVarResp = postV3GroupsIdProjectsProjectIdWithHttpInfo(id, projectId);
        return localVarResp.getData();
    }

    /**
     * Transfer a project to the group namespace. Available only for admin.
     * Transfer a project to the group namespace. Available only for admin.
     * @param id The ID of a group (required)
     * @param projectId The ID or path of the project (required)
     * @return ApiResponse&lt;GroupDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transfer a project to the group namespace. Available only for admin. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GroupDetail> postV3GroupsIdProjectsProjectIdWithHttpInfo(String id, String projectId) throws ApiException {
        okhttp3.Call localVarCall = postV3GroupsIdProjectsProjectIdValidateBeforeCall(id, projectId, null);
        Type localVarReturnType = new TypeToken<GroupDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transfer a project to the group namespace. Available only for admin. (asynchronously)
     * Transfer a project to the group namespace. Available only for admin.
     * @param id The ID of a group (required)
     * @param projectId The ID or path of the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Transfer a project to the group namespace. Available only for admin. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3GroupsIdProjectsProjectIdAsync(String id, String projectId, final ApiCallback<GroupDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3GroupsIdProjectsProjectIdValidateBeforeCall(id, projectId, _callback);
        Type localVarReturnType = new TypeToken<GroupDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3GroupsId
     * @param id The ID of a group (required)
     * @param putV3GroupsIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a group. Available only for users who can administrate groups. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdCall(String id, PutV3GroupsIdRequest putV3GroupsIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdRequest;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3GroupsIdValidateBeforeCall(String id, PutV3GroupsIdRequest putV3GroupsIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3GroupsId(Async)");
        }

        return putV3GroupsIdCall(id, putV3GroupsIdRequest, _callback);

    }

    /**
     * Update a group. Available only for users who can administrate groups.
     * Update a group. Available only for users who can administrate groups.
     * @param id The ID of a group (required)
     * @param putV3GroupsIdRequest  (optional)
     * @return Group
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a group. Available only for users who can administrate groups. </td><td>  -  </td></tr>
     </table>
     */
    public Group putV3GroupsId(String id, PutV3GroupsIdRequest putV3GroupsIdRequest) throws ApiException {
        ApiResponse<Group> localVarResp = putV3GroupsIdWithHttpInfo(id, putV3GroupsIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update a group. Available only for users who can administrate groups.
     * Update a group. Available only for users who can administrate groups.
     * @param id The ID of a group (required)
     * @param putV3GroupsIdRequest  (optional)
     * @return ApiResponse&lt;Group&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a group. Available only for users who can administrate groups. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Group> putV3GroupsIdWithHttpInfo(String id, PutV3GroupsIdRequest putV3GroupsIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3GroupsIdValidateBeforeCall(id, putV3GroupsIdRequest, null);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a group. Available only for users who can administrate groups. (asynchronously)
     * Update a group. Available only for users who can administrate groups.
     * @param id The ID of a group (required)
     * @param putV3GroupsIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a group. Available only for users who can administrate groups. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdAsync(String id, PutV3GroupsIdRequest putV3GroupsIdRequest, final ApiCallback<Group> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3GroupsIdValidateBeforeCall(id, putV3GroupsIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Group>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3GroupsIdAccessRequestsUserIdApprove
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdAccessRequestsUserIdApproveCall(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdAccessRequestsUserIdApproveRequest;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/access_requests/{user_id}/approve"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3GroupsIdAccessRequestsUserIdApproveValidateBeforeCall(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3GroupsIdAccessRequestsUserIdApprove(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putV3GroupsIdAccessRequestsUserIdApprove(Async)");
        }

        return putV3GroupsIdAccessRequestsUserIdApproveCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, _callback);

    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public Member putV3GroupsIdAccessRequestsUserIdApprove(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest) throws ApiException {
        ApiResponse<Member> localVarResp = putV3GroupsIdAccessRequestsUserIdApproveWithHttpInfo(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest);
        return localVarResp.getData();
    }

    /**
     * Approves an access request for the given user.
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> putV3GroupsIdAccessRequestsUserIdApproveWithHttpInfo(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3GroupsIdAccessRequestsUserIdApproveValidateBeforeCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Approves an access request for the given user. (asynchronously)
     * This feature was introduced in GitLab 8.11.
     * @param id The group ID (required)
     * @param userId The user ID of the access requester (required)
     * @param putV3GroupsIdAccessRequestsUserIdApproveRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Approves an access request for the given user. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdAccessRequestsUserIdApproveAsync(String id, Integer userId, PutV3GroupsIdAccessRequestsUserIdApproveRequest putV3GroupsIdAccessRequestsUserIdApproveRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3GroupsIdAccessRequestsUserIdApproveValidateBeforeCall(id, userId, putV3GroupsIdAccessRequestsUserIdApproveRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3GroupsIdMembersUserId
     * @param id The group ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdMembersUserIdCall(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdMembersUserIdRequest;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/members/{user_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3GroupsIdMembersUserIdValidateBeforeCall(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3GroupsIdMembersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling putV3GroupsIdMembersUserId(Async)");
        }

        // verify the required parameter 'putV3GroupsIdMembersUserIdRequest' is set
        if (putV3GroupsIdMembersUserIdRequest == null) {
            throw new ApiException("Missing the required parameter 'putV3GroupsIdMembersUserIdRequest' when calling putV3GroupsIdMembersUserId(Async)");
        }

        return putV3GroupsIdMembersUserIdCall(id, userId, putV3GroupsIdMembersUserIdRequest, _callback);

    }

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @return Member
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public Member putV3GroupsIdMembersUserId(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest) throws ApiException {
        ApiResponse<Member> localVarResp = putV3GroupsIdMembersUserIdWithHttpInfo(id, userId, putV3GroupsIdMembersUserIdRequest);
        return localVarResp.getData();
    }

    /**
     * Updates a member of a group or project.
     * Updates a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @return ApiResponse&lt;Member&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Member> putV3GroupsIdMembersUserIdWithHttpInfo(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, putV3GroupsIdMembersUserIdRequest, null);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a member of a group or project. (asynchronously)
     * Updates a member of a group or project.
     * @param id The group ID (required)
     * @param userId The user ID of the new member (required)
     * @param putV3GroupsIdMembersUserIdRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Updates a member of a group or project. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdMembersUserIdAsync(String id, Integer userId, PutV3GroupsIdMembersUserIdRequest putV3GroupsIdMembersUserIdRequest, final ApiCallback<Member> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3GroupsIdMembersUserIdValidateBeforeCall(id, userId, putV3GroupsIdMembersUserIdRequest, _callback);
        Type localVarReturnType = new TypeToken<Member>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3GroupsIdNotificationSettings
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3GroupsIdNotificationSettingsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdNotificationSettingsCall(String id, PutV3GroupsIdNotificationSettingsRequest putV3GroupsIdNotificationSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3GroupsIdNotificationSettingsRequest;

        // create path and map variables
        String localVarPath = "/v3/groups/{id}/notification_settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3GroupsIdNotificationSettingsValidateBeforeCall(String id, PutV3GroupsIdNotificationSettingsRequest putV3GroupsIdNotificationSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3GroupsIdNotificationSettings(Async)");
        }

        return putV3GroupsIdNotificationSettingsCall(id, putV3GroupsIdNotificationSettingsRequest, _callback);

    }

    /**
     * Update group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3GroupsIdNotificationSettingsRequest  (optional)
     * @return NotificationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public NotificationSetting putV3GroupsIdNotificationSettings(String id, PutV3GroupsIdNotificationSettingsRequest putV3GroupsIdNotificationSettingsRequest) throws ApiException {
        ApiResponse<NotificationSetting> localVarResp = putV3GroupsIdNotificationSettingsWithHttpInfo(id, putV3GroupsIdNotificationSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Update group level notification level settings, defaults to Global
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3GroupsIdNotificationSettingsRequest  (optional)
     * @return ApiResponse&lt;NotificationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NotificationSetting> putV3GroupsIdNotificationSettingsWithHttpInfo(String id, PutV3GroupsIdNotificationSettingsRequest putV3GroupsIdNotificationSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3GroupsIdNotificationSettingsValidateBeforeCall(id, putV3GroupsIdNotificationSettingsRequest, null);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update group level notification level settings, defaults to Global (asynchronously)
     * This feature was introduced in GitLab 8.12
     * @param id The group ID or project ID or project NAMESPACE/PROJECT_NAME (required)
     * @param putV3GroupsIdNotificationSettingsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update group level notification level settings, defaults to Global </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3GroupsIdNotificationSettingsAsync(String id, PutV3GroupsIdNotificationSettingsRequest putV3GroupsIdNotificationSettingsRequest, final ApiCallback<NotificationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3GroupsIdNotificationSettingsValidateBeforeCall(id, putV3GroupsIdNotificationSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<NotificationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
