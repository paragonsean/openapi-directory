/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3SnippetsIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3SnippetsIdRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  /**
   * The visibility level of the snippet
   */
  @JsonAdapter(VisibilityLevelEnum.Adapter.class)
  public enum VisibilityLevelEnum {
    NUMBER_0(0),
    
    NUMBER_10(10),
    
    NUMBER_20(20);

    private Integer value;

    VisibilityLevelEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VisibilityLevelEnum fromValue(Integer value) {
      for (VisibilityLevelEnum b : VisibilityLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VisibilityLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VisibilityLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VisibilityLevelEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return VisibilityLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      VisibilityLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VISIBILITY_LEVEL = "visibility_level";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_LEVEL)
  private VisibilityLevelEnum visibilityLevel;

  public PutV3SnippetsIdRequest() {
  }

  public PutV3SnippetsIdRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of a snippet
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PutV3SnippetsIdRequest fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * The name of a snippet file
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public PutV3SnippetsIdRequest content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of a snippet
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public PutV3SnippetsIdRequest visibilityLevel(VisibilityLevelEnum visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
    return this;
  }

  /**
   * The visibility level of the snippet
   * @return visibilityLevel
   */
  @javax.annotation.Nullable
  public VisibilityLevelEnum getVisibilityLevel() {
    return visibilityLevel;
  }

  public void setVisibilityLevel(VisibilityLevelEnum visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3SnippetsIdRequest putV3SnippetsIdRequest = (PutV3SnippetsIdRequest) o;
    return Objects.equals(this.title, putV3SnippetsIdRequest.title) &&
        Objects.equals(this.fileName, putV3SnippetsIdRequest.fileName) &&
        Objects.equals(this.content, putV3SnippetsIdRequest.content) &&
        Objects.equals(this.visibilityLevel, putV3SnippetsIdRequest.visibilityLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, fileName, content, visibilityLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3SnippetsIdRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    visibilityLevel: ").append(toIndentedString(visibilityLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("file_name");
    openapiFields.add("content");
    openapiFields.add("visibility_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3SnippetsIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3SnippetsIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3SnippetsIdRequest is not found in the empty JSON string", PutV3SnippetsIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3SnippetsIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3SnippetsIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      // validate the optional field `visibility_level`
      if (jsonObj.get("visibility_level") != null && !jsonObj.get("visibility_level").isJsonNull()) {
        VisibilityLevelEnum.validateJsonElement(jsonObj.get("visibility_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3SnippetsIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3SnippetsIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3SnippetsIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3SnippetsIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3SnippetsIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3SnippetsIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3SnippetsIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3SnippetsIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3SnippetsIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3SnippetsIdRequest
   */
  public static PutV3SnippetsIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3SnippetsIdRequest.class);
  }

  /**
   * Convert an instance of PutV3SnippetsIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

