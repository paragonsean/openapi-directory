/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdServicesJiraRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdServicesJiraRequest {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "project_key";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_JIRA_ISSUE_TRANSITION_ID = "jira_issue_transition_id";
  @SerializedName(SERIALIZED_NAME_JIRA_ISSUE_TRANSITION_ID)
  private Integer jiraIssueTransitionId;

  public static final String SERIALIZED_NAME_COMMIT_EVENTS = "commit_events";
  @SerializedName(SERIALIZED_NAME_COMMIT_EVENTS)
  private String commitEvents;

  public static final String SERIALIZED_NAME_MERGE_REQUEST_EVENTS = "merge_request_events";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUEST_EVENTS)
  private String mergeRequestEvents;

  public PutV3ProjectsIdServicesJiraRequest() {
  }

  public PutV3ProjectsIdServicesJiraRequest url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL to the JIRA project which is being linked to this GitLab project, e.g., https://jira.example.com
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public PutV3ProjectsIdServicesJiraRequest projectKey(String projectKey) {
    this.projectKey = projectKey;
    return this;
  }

  /**
   * The short identifier for your JIRA project, all uppercase, e.g., PROJ
   * @return projectKey
   */
  @javax.annotation.Nonnull
  public String getProjectKey() {
    return projectKey;
  }

  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public PutV3ProjectsIdServicesJiraRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of the user created to be used with GitLab/JIRA
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public PutV3ProjectsIdServicesJiraRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of the user created to be used with GitLab/JIRA
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public PutV3ProjectsIdServicesJiraRequest jiraIssueTransitionId(Integer jiraIssueTransitionId) {
    this.jiraIssueTransitionId = jiraIssueTransitionId;
    return this;
  }

  /**
   * The ID of a transition that moves issues to a closed state. You can find this number under the JIRA workflow administration (**Administration &gt; Issues &gt; Workflows**) by selecting **View** under **Operations** of the desired workflow of your project. The ID of each state can be found inside the parenthesis of each transition name under the **Transitions (id)** column ([see screenshot][trans]). By default, this ID is set to &#x60;2&#x60;
   * @return jiraIssueTransitionId
   */
  @javax.annotation.Nullable
  public Integer getJiraIssueTransitionId() {
    return jiraIssueTransitionId;
  }

  public void setJiraIssueTransitionId(Integer jiraIssueTransitionId) {
    this.jiraIssueTransitionId = jiraIssueTransitionId;
  }


  public PutV3ProjectsIdServicesJiraRequest commitEvents(String commitEvents) {
    this.commitEvents = commitEvents;
    return this;
  }

  /**
   * Event will be triggered when a commit is created/updated
   * @return commitEvents
   */
  @javax.annotation.Nullable
  public String getCommitEvents() {
    return commitEvents;
  }

  public void setCommitEvents(String commitEvents) {
    this.commitEvents = commitEvents;
  }


  public PutV3ProjectsIdServicesJiraRequest mergeRequestEvents(String mergeRequestEvents) {
    this.mergeRequestEvents = mergeRequestEvents;
    return this;
  }

  /**
   * Event will be triggered when a merge request is created/updated/merged
   * @return mergeRequestEvents
   */
  @javax.annotation.Nullable
  public String getMergeRequestEvents() {
    return mergeRequestEvents;
  }

  public void setMergeRequestEvents(String mergeRequestEvents) {
    this.mergeRequestEvents = mergeRequestEvents;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdServicesJiraRequest putV3ProjectsIdServicesJiraRequest = (PutV3ProjectsIdServicesJiraRequest) o;
    return Objects.equals(this.url, putV3ProjectsIdServicesJiraRequest.url) &&
        Objects.equals(this.projectKey, putV3ProjectsIdServicesJiraRequest.projectKey) &&
        Objects.equals(this.username, putV3ProjectsIdServicesJiraRequest.username) &&
        Objects.equals(this.password, putV3ProjectsIdServicesJiraRequest.password) &&
        Objects.equals(this.jiraIssueTransitionId, putV3ProjectsIdServicesJiraRequest.jiraIssueTransitionId) &&
        Objects.equals(this.commitEvents, putV3ProjectsIdServicesJiraRequest.commitEvents) &&
        Objects.equals(this.mergeRequestEvents, putV3ProjectsIdServicesJiraRequest.mergeRequestEvents);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, projectKey, username, password, jiraIssueTransitionId, commitEvents, mergeRequestEvents);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdServicesJiraRequest {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    jiraIssueTransitionId: ").append(toIndentedString(jiraIssueTransitionId)).append("\n");
    sb.append("    commitEvents: ").append(toIndentedString(commitEvents)).append("\n");
    sb.append("    mergeRequestEvents: ").append(toIndentedString(mergeRequestEvents)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("project_key");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("jira_issue_transition_id");
    openapiFields.add("commit_events");
    openapiFields.add("merge_request_events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("project_key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdServicesJiraRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdServicesJiraRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdServicesJiraRequest is not found in the empty JSON string", PutV3ProjectsIdServicesJiraRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdServicesJiraRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdServicesJiraRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutV3ProjectsIdServicesJiraRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("project_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_key").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("commit_events") != null && !jsonObj.get("commit_events").isJsonNull()) && !jsonObj.get("commit_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commit_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commit_events").toString()));
      }
      if ((jsonObj.get("merge_request_events") != null && !jsonObj.get("merge_request_events").isJsonNull()) && !jsonObj.get("merge_request_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_request_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_request_events").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdServicesJiraRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdServicesJiraRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdServicesJiraRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdServicesJiraRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdServicesJiraRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdServicesJiraRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdServicesJiraRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdServicesJiraRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdServicesJiraRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdServicesJiraRequest
   */
  public static PutV3ProjectsIdServicesJiraRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdServicesJiraRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdServicesJiraRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

