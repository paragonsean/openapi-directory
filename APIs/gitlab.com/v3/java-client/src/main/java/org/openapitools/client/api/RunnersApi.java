/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PutV3RunnersIdRequest;
import org.openapitools.client.model.Runner;
import org.openapitools.client.model.RunnerDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RunnersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RunnersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RunnersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3RunnersId
     * @param id The ID of the runner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a runner </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3RunnersIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/runners/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3RunnersIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3RunnersId(Async)");
        }

        return deleteV3RunnersIdCall(id, _callback);

    }

    /**
     * Remove a runner
     * Remove a runner
     * @param id The ID of the runner (required)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a runner </td><td>  -  </td></tr>
     </table>
     */
    public Runner deleteV3RunnersId(Integer id) throws ApiException {
        ApiResponse<Runner> localVarResp = deleteV3RunnersIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Remove a runner
     * Remove a runner
     * @param id The ID of the runner (required)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a runner </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> deleteV3RunnersIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3RunnersIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a runner (asynchronously)
     * Remove a runner
     * @param id The ID of the runner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Remove a runner </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3RunnersIdAsync(Integer id, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3RunnersIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3Runners
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersCall(String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/runners";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3RunnersValidateBeforeCall(String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getV3RunnersCall(scope, page, perPage, _callback);

    }

    /**
     * Get runners available for user
     * Get runners available for user
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for user </td><td>  -  </td></tr>
     </table>
     */
    public Runner getV3Runners(String scope, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Runner> localVarResp = getV3RunnersWithHttpInfo(scope, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get runners available for user
     * Get runners available for user
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> getV3RunnersWithHttpInfo(String scope, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3RunnersValidateBeforeCall(scope, page, perPage, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get runners available for user (asynchronously)
     * Get runners available for user
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runners available for user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersAsync(String scope, Integer page, Integer perPage, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3RunnersValidateBeforeCall(scope, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3RunnersAll
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all runners - shared and specific </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersAllCall(String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/runners/all";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3RunnersAllValidateBeforeCall(String scope, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getV3RunnersAllCall(scope, page, perPage, _callback);

    }

    /**
     * Get all runners - shared and specific
     * Get all runners - shared and specific
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Runner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all runners - shared and specific </td><td>  -  </td></tr>
     </table>
     */
    public Runner getV3RunnersAll(String scope, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Runner> localVarResp = getV3RunnersAllWithHttpInfo(scope, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get all runners - shared and specific
     * Get all runners - shared and specific
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Runner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all runners - shared and specific </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Runner> getV3RunnersAllWithHttpInfo(String scope, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3RunnersAllValidateBeforeCall(scope, page, perPage, null);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all runners - shared and specific (asynchronously)
     * Get all runners - shared and specific
     * @param scope The scope of specific runners to show (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get all runners - shared and specific </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersAllAsync(String scope, Integer page, Integer perPage, final ApiCallback<Runner> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3RunnersAllValidateBeforeCall(scope, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Runner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3RunnersId
     * @param id The ID of the runner (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/runners/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3RunnersIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3RunnersId(Async)");
        }

        return getV3RunnersIdCall(id, _callback);

    }

    /**
     * Get runner&#39;s details
     * Get runner&#39;s details
     * @param id The ID of the runner (required)
     * @return RunnerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public RunnerDetails getV3RunnersId(Integer id) throws ApiException {
        ApiResponse<RunnerDetails> localVarResp = getV3RunnersIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get runner&#39;s details
     * Get runner&#39;s details
     * @param id The ID of the runner (required)
     * @return ApiResponse&lt;RunnerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunnerDetails> getV3RunnersIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3RunnersIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RunnerDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get runner&#39;s details (asynchronously)
     * Get runner&#39;s details
     * @param id The ID of the runner (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3RunnersIdAsync(Integer id, final ApiCallback<RunnerDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3RunnersIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RunnerDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3RunnersId
     * @param id The ID of the runner (required)
     * @param putV3RunnersIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3RunnersIdCall(Integer id, PutV3RunnersIdRequest putV3RunnersIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3RunnersIdRequest;

        // create path and map variables
        String localVarPath = "/v3/runners/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3RunnersIdValidateBeforeCall(Integer id, PutV3RunnersIdRequest putV3RunnersIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3RunnersId(Async)");
        }

        return putV3RunnersIdCall(id, putV3RunnersIdRequest, _callback);

    }

    /**
     * Update runner&#39;s details
     * Update runner&#39;s details
     * @param id The ID of the runner (required)
     * @param putV3RunnersIdRequest  (optional)
     * @return RunnerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public RunnerDetails putV3RunnersId(Integer id, PutV3RunnersIdRequest putV3RunnersIdRequest) throws ApiException {
        ApiResponse<RunnerDetails> localVarResp = putV3RunnersIdWithHttpInfo(id, putV3RunnersIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update runner&#39;s details
     * Update runner&#39;s details
     * @param id The ID of the runner (required)
     * @param putV3RunnersIdRequest  (optional)
     * @return ApiResponse&lt;RunnerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RunnerDetails> putV3RunnersIdWithHttpInfo(Integer id, PutV3RunnersIdRequest putV3RunnersIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3RunnersIdValidateBeforeCall(id, putV3RunnersIdRequest, null);
        Type localVarReturnType = new TypeToken<RunnerDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update runner&#39;s details (asynchronously)
     * Update runner&#39;s details
     * @param id The ID of the runner (required)
     * @param putV3RunnersIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update runner&#39;s details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3RunnersIdAsync(Integer id, PutV3RunnersIdRequest putV3RunnersIdRequest, final ApiCallback<RunnerDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3RunnersIdValidateBeforeCall(id, putV3RunnersIdRequest, _callback);
        Type localVarReturnType = new TypeToken<RunnerDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
