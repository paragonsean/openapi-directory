/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3UsersIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3UsersIdRequest {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_SKYPE = "skype";
  @SerializedName(SERIALIZED_NAME_SKYPE)
  private String skype;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private String linkedin;

  public static final String SERIALIZED_NAME_TWITTER = "twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private String twitter;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "website_url";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PROJECTS_LIMIT = "projects_limit";
  @SerializedName(SERIALIZED_NAME_PROJECTS_LIMIT)
  private Integer projectsLimit;

  public static final String SERIALIZED_NAME_EXTERN_UID = "extern_uid";
  @SerializedName(SERIALIZED_NAME_EXTERN_UID)
  private String externUid;

  public static final String SERIALIZED_NAME_PROVIDER = "provider";
  @SerializedName(SERIALIZED_NAME_PROVIDER)
  private String provider;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_ADMIN = "admin";
  @SerializedName(SERIALIZED_NAME_ADMIN)
  private Boolean admin;

  public static final String SERIALIZED_NAME_CAN_CREATE_GROUP = "can_create_group";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_GROUP)
  private Boolean canCreateGroup;

  public static final String SERIALIZED_NAME_CONFIRM = "confirm";
  @SerializedName(SERIALIZED_NAME_CONFIRM)
  private Boolean confirm;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private Boolean external;

  public PutV3UsersIdRequest() {
  }

  public PutV3UsersIdRequest email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of the user
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public PutV3UsersIdRequest password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of the new user
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public PutV3UsersIdRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the user
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PutV3UsersIdRequest username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of the user
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public PutV3UsersIdRequest skype(String skype) {
    this.skype = skype;
    return this;
  }

  /**
   * The Skype username
   * @return skype
   */
  @javax.annotation.Nullable
  public String getSkype() {
    return skype;
  }

  public void setSkype(String skype) {
    this.skype = skype;
  }


  public PutV3UsersIdRequest linkedin(String linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * The LinkedIn username
   * @return linkedin
   */
  @javax.annotation.Nullable
  public String getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(String linkedin) {
    this.linkedin = linkedin;
  }


  public PutV3UsersIdRequest twitter(String twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * The Twitter username
   * @return twitter
   */
  @javax.annotation.Nullable
  public String getTwitter() {
    return twitter;
  }

  public void setTwitter(String twitter) {
    this.twitter = twitter;
  }


  public PutV3UsersIdRequest websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * The website of the user
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }


  public PutV3UsersIdRequest organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * The organization of the user
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public PutV3UsersIdRequest projectsLimit(Integer projectsLimit) {
    this.projectsLimit = projectsLimit;
    return this;
  }

  /**
   * The number of projects a user can create
   * @return projectsLimit
   */
  @javax.annotation.Nullable
  public Integer getProjectsLimit() {
    return projectsLimit;
  }

  public void setProjectsLimit(Integer projectsLimit) {
    this.projectsLimit = projectsLimit;
  }


  public PutV3UsersIdRequest externUid(String externUid) {
    this.externUid = externUid;
    return this;
  }

  /**
   * The external authentication provider UID
   * @return externUid
   */
  @javax.annotation.Nullable
  public String getExternUid() {
    return externUid;
  }

  public void setExternUid(String externUid) {
    this.externUid = externUid;
  }


  public PutV3UsersIdRequest provider(String provider) {
    this.provider = provider;
    return this;
  }

  /**
   * The external provider
   * @return provider
   */
  @javax.annotation.Nullable
  public String getProvider() {
    return provider;
  }

  public void setProvider(String provider) {
    this.provider = provider;
  }


  public PutV3UsersIdRequest bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * The biography of the user
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public PutV3UsersIdRequest location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The location of the user
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public PutV3UsersIdRequest admin(Boolean admin) {
    this.admin = admin;
    return this;
  }

  /**
   * Flag indicating the user is an administrator
   * @return admin
   */
  @javax.annotation.Nullable
  public Boolean getAdmin() {
    return admin;
  }

  public void setAdmin(Boolean admin) {
    this.admin = admin;
  }


  public PutV3UsersIdRequest canCreateGroup(Boolean canCreateGroup) {
    this.canCreateGroup = canCreateGroup;
    return this;
  }

  /**
   * Flag indicating the user can create groups
   * @return canCreateGroup
   */
  @javax.annotation.Nullable
  public Boolean getCanCreateGroup() {
    return canCreateGroup;
  }

  public void setCanCreateGroup(Boolean canCreateGroup) {
    this.canCreateGroup = canCreateGroup;
  }


  public PutV3UsersIdRequest confirm(Boolean confirm) {
    this.confirm = confirm;
    return this;
  }

  /**
   * Flag indicating the account needs to be confirmed
   * @return confirm
   */
  @javax.annotation.Nullable
  public Boolean getConfirm() {
    return confirm;
  }

  public void setConfirm(Boolean confirm) {
    this.confirm = confirm;
  }


  public PutV3UsersIdRequest external(Boolean external) {
    this.external = external;
    return this;
  }

  /**
   * Flag indicating the user is an external user
   * @return external
   */
  @javax.annotation.Nullable
  public Boolean getExternal() {
    return external;
  }

  public void setExternal(Boolean external) {
    this.external = external;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3UsersIdRequest putV3UsersIdRequest = (PutV3UsersIdRequest) o;
    return Objects.equals(this.email, putV3UsersIdRequest.email) &&
        Objects.equals(this.password, putV3UsersIdRequest.password) &&
        Objects.equals(this.name, putV3UsersIdRequest.name) &&
        Objects.equals(this.username, putV3UsersIdRequest.username) &&
        Objects.equals(this.skype, putV3UsersIdRequest.skype) &&
        Objects.equals(this.linkedin, putV3UsersIdRequest.linkedin) &&
        Objects.equals(this.twitter, putV3UsersIdRequest.twitter) &&
        Objects.equals(this.websiteUrl, putV3UsersIdRequest.websiteUrl) &&
        Objects.equals(this.organization, putV3UsersIdRequest.organization) &&
        Objects.equals(this.projectsLimit, putV3UsersIdRequest.projectsLimit) &&
        Objects.equals(this.externUid, putV3UsersIdRequest.externUid) &&
        Objects.equals(this.provider, putV3UsersIdRequest.provider) &&
        Objects.equals(this.bio, putV3UsersIdRequest.bio) &&
        Objects.equals(this.location, putV3UsersIdRequest.location) &&
        Objects.equals(this.admin, putV3UsersIdRequest.admin) &&
        Objects.equals(this.canCreateGroup, putV3UsersIdRequest.canCreateGroup) &&
        Objects.equals(this.confirm, putV3UsersIdRequest.confirm) &&
        Objects.equals(this.external, putV3UsersIdRequest.external);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, password, name, username, skype, linkedin, twitter, websiteUrl, organization, projectsLimit, externUid, provider, bio, location, admin, canCreateGroup, confirm, external);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3UsersIdRequest {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    skype: ").append(toIndentedString(skype)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    projectsLimit: ").append(toIndentedString(projectsLimit)).append("\n");
    sb.append("    externUid: ").append(toIndentedString(externUid)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    admin: ").append(toIndentedString(admin)).append("\n");
    sb.append("    canCreateGroup: ").append(toIndentedString(canCreateGroup)).append("\n");
    sb.append("    confirm: ").append(toIndentedString(confirm)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("password");
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("skype");
    openapiFields.add("linkedin");
    openapiFields.add("twitter");
    openapiFields.add("website_url");
    openapiFields.add("organization");
    openapiFields.add("projects_limit");
    openapiFields.add("extern_uid");
    openapiFields.add("provider");
    openapiFields.add("bio");
    openapiFields.add("location");
    openapiFields.add("admin");
    openapiFields.add("can_create_group");
    openapiFields.add("confirm");
    openapiFields.add("external");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3UsersIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3UsersIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3UsersIdRequest is not found in the empty JSON string", PutV3UsersIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3UsersIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3UsersIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("skype") != null && !jsonObj.get("skype").isJsonNull()) && !jsonObj.get("skype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skype").toString()));
      }
      if ((jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) && !jsonObj.get("linkedin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin").toString()));
      }
      if ((jsonObj.get("twitter") != null && !jsonObj.get("twitter").isJsonNull()) && !jsonObj.get("twitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter").toString()));
      }
      if ((jsonObj.get("website_url") != null && !jsonObj.get("website_url").isJsonNull()) && !jsonObj.get("website_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_url").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("extern_uid") != null && !jsonObj.get("extern_uid").isJsonNull()) && !jsonObj.get("extern_uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extern_uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extern_uid").toString()));
      }
      if ((jsonObj.get("provider") != null && !jsonObj.get("provider").isJsonNull()) && !jsonObj.get("provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provider").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3UsersIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3UsersIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3UsersIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3UsersIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3UsersIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3UsersIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3UsersIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3UsersIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3UsersIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3UsersIdRequest
   */
  public static PutV3UsersIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3UsersIdRequest.class);
  }

  /**
   * Convert an instance of PutV3UsersIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

