/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3ProjectsIdIssuesIssueIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3ProjectsIdIssuesIssueIdRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  /**
   * State of the issue
   */
  @JsonAdapter(StateEventEnum.Adapter.class)
  public enum StateEventEnum {
    REOPEN("reopen"),
    
    CLOSE("close");

    private String value;

    StateEventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEventEnum fromValue(String value) {
      for (StateEventEnum b : StateEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE_EVENT = "state_event";
  @SerializedName(SERIALIZED_NAME_STATE_EVENT)
  private StateEventEnum stateEvent;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  public static final String SERIALIZED_NAME_MILESTONE_ID = "milestone_id";
  @SerializedName(SERIALIZED_NAME_MILESTONE_ID)
  private Integer milestoneId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private String labels;

  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private String dueDate;

  public static final String SERIALIZED_NAME_CONFIDENTIAL = "confidential";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL)
  private Boolean confidential;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public PutV3ProjectsIdIssuesIssueIdRequest() {
  }

  public PutV3ProjectsIdIssuesIssueIdRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of an issue
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date time when the issue was updated. Available only for admins and project owners.
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest stateEvent(StateEventEnum stateEvent) {
    this.stateEvent = stateEvent;
    return this;
  }

  /**
   * State of the issue
   * @return stateEvent
   */
  @javax.annotation.Nullable
  public StateEventEnum getStateEvent() {
    return stateEvent;
  }

  public void setStateEvent(StateEventEnum stateEvent) {
    this.stateEvent = stateEvent;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of an issue
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest assigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
    return this;
  }

  /**
   * The ID of a user to assign issue
   * @return assigneeId
   */
  @javax.annotation.Nullable
  public Integer getAssigneeId() {
    return assigneeId;
  }

  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest milestoneId(Integer milestoneId) {
    this.milestoneId = milestoneId;
    return this;
  }

  /**
   * The ID of a milestone to assign issue
   * @return milestoneId
   */
  @javax.annotation.Nullable
  public Integer getMilestoneId() {
    return milestoneId;
  }

  public void setMilestoneId(Integer milestoneId) {
    this.milestoneId = milestoneId;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest labels(String labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Comma-separated list of label names
   * @return labels
   */
  @javax.annotation.Nullable
  public String getLabels() {
    return labels;
  }

  public void setLabels(String labels) {
    this.labels = labels;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Date time string in the format YEAR-MONTH-DAY
   * @return dueDate
   */
  @javax.annotation.Nullable
  public String getDueDate() {
    return dueDate;
  }

  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest confidential(Boolean confidential) {
    this.confidential = confidential;
    return this;
  }

  /**
   * Boolean parameter if the issue should be confidential
   * @return confidential
   */
  @javax.annotation.Nullable
  public Boolean getConfidential() {
    return confidential;
  }

  public void setConfidential(Boolean confidential) {
    this.confidential = confidential;
  }


  public PutV3ProjectsIdIssuesIssueIdRequest createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3ProjectsIdIssuesIssueIdRequest putV3ProjectsIdIssuesIssueIdRequest = (PutV3ProjectsIdIssuesIssueIdRequest) o;
    return Objects.equals(this.title, putV3ProjectsIdIssuesIssueIdRequest.title) &&
        Objects.equals(this.updatedAt, putV3ProjectsIdIssuesIssueIdRequest.updatedAt) &&
        Objects.equals(this.stateEvent, putV3ProjectsIdIssuesIssueIdRequest.stateEvent) &&
        Objects.equals(this.description, putV3ProjectsIdIssuesIssueIdRequest.description) &&
        Objects.equals(this.assigneeId, putV3ProjectsIdIssuesIssueIdRequest.assigneeId) &&
        Objects.equals(this.milestoneId, putV3ProjectsIdIssuesIssueIdRequest.milestoneId) &&
        Objects.equals(this.labels, putV3ProjectsIdIssuesIssueIdRequest.labels) &&
        Objects.equals(this.dueDate, putV3ProjectsIdIssuesIssueIdRequest.dueDate) &&
        Objects.equals(this.confidential, putV3ProjectsIdIssuesIssueIdRequest.confidential) &&
        Objects.equals(this.createdAt, putV3ProjectsIdIssuesIssueIdRequest.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, updatedAt, stateEvent, description, assigneeId, milestoneId, labels, dueDate, confidential, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3ProjectsIdIssuesIssueIdRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    stateEvent: ").append(toIndentedString(stateEvent)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    milestoneId: ").append(toIndentedString(milestoneId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    confidential: ").append(toIndentedString(confidential)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("updated_at");
    openapiFields.add("state_event");
    openapiFields.add("description");
    openapiFields.add("assignee_id");
    openapiFields.add("milestone_id");
    openapiFields.add("labels");
    openapiFields.add("due_date");
    openapiFields.add("confidential");
    openapiFields.add("created_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3ProjectsIdIssuesIssueIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3ProjectsIdIssuesIssueIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3ProjectsIdIssuesIssueIdRequest is not found in the empty JSON string", PutV3ProjectsIdIssuesIssueIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3ProjectsIdIssuesIssueIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3ProjectsIdIssuesIssueIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("state_event") != null && !jsonObj.get("state_event").isJsonNull()) && !jsonObj.get("state_event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_event").toString()));
      }
      // validate the optional field `state_event`
      if (jsonObj.get("state_event") != null && !jsonObj.get("state_event").isJsonNull()) {
        StateEventEnum.validateJsonElement(jsonObj.get("state_event"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      if ((jsonObj.get("due_date") != null && !jsonObj.get("due_date").isJsonNull()) && !jsonObj.get("due_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `due_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("due_date").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3ProjectsIdIssuesIssueIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3ProjectsIdIssuesIssueIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3ProjectsIdIssuesIssueIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3ProjectsIdIssuesIssueIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3ProjectsIdIssuesIssueIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3ProjectsIdIssuesIssueIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3ProjectsIdIssuesIssueIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3ProjectsIdIssuesIssueIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3ProjectsIdIssuesIssueIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3ProjectsIdIssuesIssueIdRequest
   */
  public static PutV3ProjectsIdIssuesIssueIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3ProjectsIdIssuesIssueIdRequest.class);
  }

  /**
   * Convert an instance of PutV3ProjectsIdIssuesIssueIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

