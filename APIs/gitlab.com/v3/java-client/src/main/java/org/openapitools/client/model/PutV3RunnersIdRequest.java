/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutV3RunnersIdRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutV3RunnersIdRequest {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List<String> tagList = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUN_UNTAGGED = "run_untagged";
  @SerializedName(SERIALIZED_NAME_RUN_UNTAGGED)
  private Boolean runUntagged;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private Boolean locked;

  public PutV3RunnersIdRequest() {
  }

  public PutV3RunnersIdRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the runner
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutV3RunnersIdRequest active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * The state of a runner
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PutV3RunnersIdRequest tagList(List<String> tagList) {
    this.tagList = tagList;
    return this;
  }

  public PutV3RunnersIdRequest addTagListItem(String tagListItem) {
    if (this.tagList == null) {
      this.tagList = new ArrayList<>();
    }
    this.tagList.add(tagListItem);
    return this;
  }

  /**
   * The list of tags for a runner
   * @return tagList
   */
  @javax.annotation.Nullable
  public List<String> getTagList() {
    return tagList;
  }

  public void setTagList(List<String> tagList) {
    this.tagList = tagList;
  }


  public PutV3RunnersIdRequest runUntagged(Boolean runUntagged) {
    this.runUntagged = runUntagged;
    return this;
  }

  /**
   * Flag indicating the runner can execute untagged jobs
   * @return runUntagged
   */
  @javax.annotation.Nullable
  public Boolean getRunUntagged() {
    return runUntagged;
  }

  public void setRunUntagged(Boolean runUntagged) {
    this.runUntagged = runUntagged;
  }


  public PutV3RunnersIdRequest locked(Boolean locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Flag indicating the runner is locked
   * @return locked
   */
  @javax.annotation.Nullable
  public Boolean getLocked() {
    return locked;
  }

  public void setLocked(Boolean locked) {
    this.locked = locked;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutV3RunnersIdRequest putV3RunnersIdRequest = (PutV3RunnersIdRequest) o;
    return Objects.equals(this.description, putV3RunnersIdRequest.description) &&
        Objects.equals(this.active, putV3RunnersIdRequest.active) &&
        Objects.equals(this.tagList, putV3RunnersIdRequest.tagList) &&
        Objects.equals(this.runUntagged, putV3RunnersIdRequest.runUntagged) &&
        Objects.equals(this.locked, putV3RunnersIdRequest.locked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, active, tagList, runUntagged, locked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutV3RunnersIdRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    runUntagged: ").append(toIndentedString(runUntagged)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("active");
    openapiFields.add("tag_list");
    openapiFields.add("run_untagged");
    openapiFields.add("locked");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutV3RunnersIdRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutV3RunnersIdRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutV3RunnersIdRequest is not found in the empty JSON string", PutV3RunnersIdRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutV3RunnersIdRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutV3RunnersIdRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull() && !jsonObj.get("tag_list").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be an array in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutV3RunnersIdRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutV3RunnersIdRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutV3RunnersIdRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutV3RunnersIdRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutV3RunnersIdRequest>() {
           @Override
           public void write(JsonWriter out, PutV3RunnersIdRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutV3RunnersIdRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutV3RunnersIdRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutV3RunnersIdRequest
   * @throws IOException if the JSON string is invalid with respect to PutV3RunnersIdRequest
   */
  public static PutV3RunnersIdRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutV3RunnersIdRequest.class);
  }

  /**
   * Convert an instance of PutV3RunnersIdRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

