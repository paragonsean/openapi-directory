/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BasicProjectDetails;
import org.openapitools.client.model.Namespace;
import org.openapitools.client.model.ProjectStatistics;
import org.openapitools.client.model.UserBasic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get a single project
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectWithAccess {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private String archived;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_BUILDS_ENABLED = "builds_enabled";
  @SerializedName(SERIALIZED_NAME_BUILDS_ENABLED)
  private String buildsEnabled;

  public static final String SERIALIZED_NAME_CONTAINER_REGISTRY_ENABLED = "container_registry_enabled";
  @SerializedName(SERIALIZED_NAME_CONTAINER_REGISTRY_ENABLED)
  private String containerRegistryEnabled;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_DEFAULT_BRANCH = "default_branch";
  @SerializedName(SERIALIZED_NAME_DEFAULT_BRANCH)
  private String defaultBranch;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FORKED_FROM_PROJECT = "forked_from_project";
  @SerializedName(SERIALIZED_NAME_FORKED_FROM_PROJECT)
  private BasicProjectDetails forkedFromProject;

  public static final String SERIALIZED_NAME_FORKS_COUNT = "forks_count";
  @SerializedName(SERIALIZED_NAME_FORKS_COUNT)
  private String forksCount;

  public static final String SERIALIZED_NAME_HTTP_URL_TO_REPO = "http_url_to_repo";
  @SerializedName(SERIALIZED_NAME_HTTP_URL_TO_REPO)
  private String httpUrlToRepo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUES_ENABLED = "issues_enabled";
  @SerializedName(SERIALIZED_NAME_ISSUES_ENABLED)
  private String issuesEnabled;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_AT = "last_activity_at";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_AT)
  private String lastActivityAt;

  public static final String SERIALIZED_NAME_LFS_ENABLED = "lfs_enabled";
  @SerializedName(SERIALIZED_NAME_LFS_ENABLED)
  private String lfsEnabled;

  public static final String SERIALIZED_NAME_MERGE_REQUESTS_ENABLED = "merge_requests_enabled";
  @SerializedName(SERIALIZED_NAME_MERGE_REQUESTS_ENABLED)
  private String mergeRequestsEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_WITH_NAMESPACE = "name_with_namespace";
  @SerializedName(SERIALIZED_NAME_NAME_WITH_NAMESPACE)
  private String nameWithNamespace;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private Namespace namespace;

  public static final String SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED = "only_allow_merge_if_all_discussions_are_resolved";
  @SerializedName(SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_ALL_DISCUSSIONS_ARE_RESOLVED)
  private String onlyAllowMergeIfAllDiscussionsAreResolved;

  public static final String SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_BUILD_SUCCEEDS = "only_allow_merge_if_build_succeeds";
  @SerializedName(SERIALIZED_NAME_ONLY_ALLOW_MERGE_IF_BUILD_SUCCEEDS)
  private String onlyAllowMergeIfBuildSucceeds;

  public static final String SERIALIZED_NAME_OPEN_ISSUES_COUNT = "open_issues_count";
  @SerializedName(SERIALIZED_NAME_OPEN_ISSUES_COUNT)
  private String openIssuesCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private UserBasic owner;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PATH_WITH_NAMESPACE = "path_with_namespace";
  @SerializedName(SERIALIZED_NAME_PATH_WITH_NAMESPACE)
  private String pathWithNamespace;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private String permissions;

  public static final String SERIALIZED_NAME_PUBLIC = "public";
  @SerializedName(SERIALIZED_NAME_PUBLIC)
  private String _public;

  public static final String SERIALIZED_NAME_PUBLIC_BUILDS = "public_builds";
  @SerializedName(SERIALIZED_NAME_PUBLIC_BUILDS)
  private String publicBuilds;

  public static final String SERIALIZED_NAME_REQUEST_ACCESS_ENABLED = "request_access_enabled";
  @SerializedName(SERIALIZED_NAME_REQUEST_ACCESS_ENABLED)
  private String requestAccessEnabled;

  public static final String SERIALIZED_NAME_RUNNERS_TOKEN = "runners_token";
  @SerializedName(SERIALIZED_NAME_RUNNERS_TOKEN)
  private String runnersToken;

  public static final String SERIALIZED_NAME_SHARED_RUNNERS_ENABLED = "shared_runners_enabled";
  @SerializedName(SERIALIZED_NAME_SHARED_RUNNERS_ENABLED)
  private String sharedRunnersEnabled;

  public static final String SERIALIZED_NAME_SHARED_WITH_GROUPS = "shared_with_groups";
  @SerializedName(SERIALIZED_NAME_SHARED_WITH_GROUPS)
  private String sharedWithGroups;

  public static final String SERIALIZED_NAME_SNIPPETS_ENABLED = "snippets_enabled";
  @SerializedName(SERIALIZED_NAME_SNIPPETS_ENABLED)
  private String snippetsEnabled;

  public static final String SERIALIZED_NAME_SSH_URL_TO_REPO = "ssh_url_to_repo";
  @SerializedName(SERIALIZED_NAME_SSH_URL_TO_REPO)
  private String sshUrlToRepo;

  public static final String SERIALIZED_NAME_STAR_COUNT = "star_count";
  @SerializedName(SERIALIZED_NAME_STAR_COUNT)
  private String starCount;

  public static final String SERIALIZED_NAME_STATISTICS = "statistics";
  @SerializedName(SERIALIZED_NAME_STATISTICS)
  private ProjectStatistics statistics;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_VISIBILITY_LEVEL = "visibility_level";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_LEVEL)
  private String visibilityLevel;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_WIKI_ENABLED = "wiki_enabled";
  @SerializedName(SERIALIZED_NAME_WIKI_ENABLED)
  private String wikiEnabled;

  public ProjectWithAccess() {
  }

  public ProjectWithAccess archived(String archived) {
    this.archived = archived;
    return this;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public String getArchived() {
    return archived;
  }

  public void setArchived(String archived) {
    this.archived = archived;
  }


  public ProjectWithAccess avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public ProjectWithAccess buildsEnabled(String buildsEnabled) {
    this.buildsEnabled = buildsEnabled;
    return this;
  }

  /**
   * Get buildsEnabled
   * @return buildsEnabled
   */
  @javax.annotation.Nullable
  public String getBuildsEnabled() {
    return buildsEnabled;
  }

  public void setBuildsEnabled(String buildsEnabled) {
    this.buildsEnabled = buildsEnabled;
  }


  public ProjectWithAccess containerRegistryEnabled(String containerRegistryEnabled) {
    this.containerRegistryEnabled = containerRegistryEnabled;
    return this;
  }

  /**
   * Get containerRegistryEnabled
   * @return containerRegistryEnabled
   */
  @javax.annotation.Nullable
  public String getContainerRegistryEnabled() {
    return containerRegistryEnabled;
  }

  public void setContainerRegistryEnabled(String containerRegistryEnabled) {
    this.containerRegistryEnabled = containerRegistryEnabled;
  }


  public ProjectWithAccess createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public ProjectWithAccess creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * Get creatorId
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public ProjectWithAccess defaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
    return this;
  }

  /**
   * Get defaultBranch
   * @return defaultBranch
   */
  @javax.annotation.Nullable
  public String getDefaultBranch() {
    return defaultBranch;
  }

  public void setDefaultBranch(String defaultBranch) {
    this.defaultBranch = defaultBranch;
  }


  public ProjectWithAccess description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProjectWithAccess forkedFromProject(BasicProjectDetails forkedFromProject) {
    this.forkedFromProject = forkedFromProject;
    return this;
  }

  /**
   * Get forkedFromProject
   * @return forkedFromProject
   */
  @javax.annotation.Nullable
  public BasicProjectDetails getForkedFromProject() {
    return forkedFromProject;
  }

  public void setForkedFromProject(BasicProjectDetails forkedFromProject) {
    this.forkedFromProject = forkedFromProject;
  }


  public ProjectWithAccess forksCount(String forksCount) {
    this.forksCount = forksCount;
    return this;
  }

  /**
   * Get forksCount
   * @return forksCount
   */
  @javax.annotation.Nullable
  public String getForksCount() {
    return forksCount;
  }

  public void setForksCount(String forksCount) {
    this.forksCount = forksCount;
  }


  public ProjectWithAccess httpUrlToRepo(String httpUrlToRepo) {
    this.httpUrlToRepo = httpUrlToRepo;
    return this;
  }

  /**
   * Get httpUrlToRepo
   * @return httpUrlToRepo
   */
  @javax.annotation.Nullable
  public String getHttpUrlToRepo() {
    return httpUrlToRepo;
  }

  public void setHttpUrlToRepo(String httpUrlToRepo) {
    this.httpUrlToRepo = httpUrlToRepo;
  }


  public ProjectWithAccess id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ProjectWithAccess issuesEnabled(String issuesEnabled) {
    this.issuesEnabled = issuesEnabled;
    return this;
  }

  /**
   * Get issuesEnabled
   * @return issuesEnabled
   */
  @javax.annotation.Nullable
  public String getIssuesEnabled() {
    return issuesEnabled;
  }

  public void setIssuesEnabled(String issuesEnabled) {
    this.issuesEnabled = issuesEnabled;
  }


  public ProjectWithAccess lastActivityAt(String lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
    return this;
  }

  /**
   * Get lastActivityAt
   * @return lastActivityAt
   */
  @javax.annotation.Nullable
  public String getLastActivityAt() {
    return lastActivityAt;
  }

  public void setLastActivityAt(String lastActivityAt) {
    this.lastActivityAt = lastActivityAt;
  }


  public ProjectWithAccess lfsEnabled(String lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
    return this;
  }

  /**
   * Get lfsEnabled
   * @return lfsEnabled
   */
  @javax.annotation.Nullable
  public String getLfsEnabled() {
    return lfsEnabled;
  }

  public void setLfsEnabled(String lfsEnabled) {
    this.lfsEnabled = lfsEnabled;
  }


  public ProjectWithAccess mergeRequestsEnabled(String mergeRequestsEnabled) {
    this.mergeRequestsEnabled = mergeRequestsEnabled;
    return this;
  }

  /**
   * Get mergeRequestsEnabled
   * @return mergeRequestsEnabled
   */
  @javax.annotation.Nullable
  public String getMergeRequestsEnabled() {
    return mergeRequestsEnabled;
  }

  public void setMergeRequestsEnabled(String mergeRequestsEnabled) {
    this.mergeRequestsEnabled = mergeRequestsEnabled;
  }


  public ProjectWithAccess name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectWithAccess nameWithNamespace(String nameWithNamespace) {
    this.nameWithNamespace = nameWithNamespace;
    return this;
  }

  /**
   * Get nameWithNamespace
   * @return nameWithNamespace
   */
  @javax.annotation.Nullable
  public String getNameWithNamespace() {
    return nameWithNamespace;
  }

  public void setNameWithNamespace(String nameWithNamespace) {
    this.nameWithNamespace = nameWithNamespace;
  }


  public ProjectWithAccess namespace(Namespace namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * Get namespace
   * @return namespace
   */
  @javax.annotation.Nullable
  public Namespace getNamespace() {
    return namespace;
  }

  public void setNamespace(Namespace namespace) {
    this.namespace = namespace;
  }


  public ProjectWithAccess onlyAllowMergeIfAllDiscussionsAreResolved(String onlyAllowMergeIfAllDiscussionsAreResolved) {
    this.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
    return this;
  }

  /**
   * Get onlyAllowMergeIfAllDiscussionsAreResolved
   * @return onlyAllowMergeIfAllDiscussionsAreResolved
   */
  @javax.annotation.Nullable
  public String getOnlyAllowMergeIfAllDiscussionsAreResolved() {
    return onlyAllowMergeIfAllDiscussionsAreResolved;
  }

  public void setOnlyAllowMergeIfAllDiscussionsAreResolved(String onlyAllowMergeIfAllDiscussionsAreResolved) {
    this.onlyAllowMergeIfAllDiscussionsAreResolved = onlyAllowMergeIfAllDiscussionsAreResolved;
  }


  public ProjectWithAccess onlyAllowMergeIfBuildSucceeds(String onlyAllowMergeIfBuildSucceeds) {
    this.onlyAllowMergeIfBuildSucceeds = onlyAllowMergeIfBuildSucceeds;
    return this;
  }

  /**
   * Get onlyAllowMergeIfBuildSucceeds
   * @return onlyAllowMergeIfBuildSucceeds
   */
  @javax.annotation.Nullable
  public String getOnlyAllowMergeIfBuildSucceeds() {
    return onlyAllowMergeIfBuildSucceeds;
  }

  public void setOnlyAllowMergeIfBuildSucceeds(String onlyAllowMergeIfBuildSucceeds) {
    this.onlyAllowMergeIfBuildSucceeds = onlyAllowMergeIfBuildSucceeds;
  }


  public ProjectWithAccess openIssuesCount(String openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
    return this;
  }

  /**
   * Get openIssuesCount
   * @return openIssuesCount
   */
  @javax.annotation.Nullable
  public String getOpenIssuesCount() {
    return openIssuesCount;
  }

  public void setOpenIssuesCount(String openIssuesCount) {
    this.openIssuesCount = openIssuesCount;
  }


  public ProjectWithAccess owner(UserBasic owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public UserBasic getOwner() {
    return owner;
  }

  public void setOwner(UserBasic owner) {
    this.owner = owner;
  }


  public ProjectWithAccess path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ProjectWithAccess pathWithNamespace(String pathWithNamespace) {
    this.pathWithNamespace = pathWithNamespace;
    return this;
  }

  /**
   * Get pathWithNamespace
   * @return pathWithNamespace
   */
  @javax.annotation.Nullable
  public String getPathWithNamespace() {
    return pathWithNamespace;
  }

  public void setPathWithNamespace(String pathWithNamespace) {
    this.pathWithNamespace = pathWithNamespace;
  }


  public ProjectWithAccess permissions(String permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public String getPermissions() {
    return permissions;
  }

  public void setPermissions(String permissions) {
    this.permissions = permissions;
  }


  public ProjectWithAccess _public(String _public) {
    this._public = _public;
    return this;
  }

  /**
   * Get _public
   * @return _public
   */
  @javax.annotation.Nullable
  public String getPublic() {
    return _public;
  }

  public void setPublic(String _public) {
    this._public = _public;
  }


  public ProjectWithAccess publicBuilds(String publicBuilds) {
    this.publicBuilds = publicBuilds;
    return this;
  }

  /**
   * Get publicBuilds
   * @return publicBuilds
   */
  @javax.annotation.Nullable
  public String getPublicBuilds() {
    return publicBuilds;
  }

  public void setPublicBuilds(String publicBuilds) {
    this.publicBuilds = publicBuilds;
  }


  public ProjectWithAccess requestAccessEnabled(String requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
    return this;
  }

  /**
   * Get requestAccessEnabled
   * @return requestAccessEnabled
   */
  @javax.annotation.Nullable
  public String getRequestAccessEnabled() {
    return requestAccessEnabled;
  }

  public void setRequestAccessEnabled(String requestAccessEnabled) {
    this.requestAccessEnabled = requestAccessEnabled;
  }


  public ProjectWithAccess runnersToken(String runnersToken) {
    this.runnersToken = runnersToken;
    return this;
  }

  /**
   * Get runnersToken
   * @return runnersToken
   */
  @javax.annotation.Nullable
  public String getRunnersToken() {
    return runnersToken;
  }

  public void setRunnersToken(String runnersToken) {
    this.runnersToken = runnersToken;
  }


  public ProjectWithAccess sharedRunnersEnabled(String sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
    return this;
  }

  /**
   * Get sharedRunnersEnabled
   * @return sharedRunnersEnabled
   */
  @javax.annotation.Nullable
  public String getSharedRunnersEnabled() {
    return sharedRunnersEnabled;
  }

  public void setSharedRunnersEnabled(String sharedRunnersEnabled) {
    this.sharedRunnersEnabled = sharedRunnersEnabled;
  }


  public ProjectWithAccess sharedWithGroups(String sharedWithGroups) {
    this.sharedWithGroups = sharedWithGroups;
    return this;
  }

  /**
   * Get sharedWithGroups
   * @return sharedWithGroups
   */
  @javax.annotation.Nullable
  public String getSharedWithGroups() {
    return sharedWithGroups;
  }

  public void setSharedWithGroups(String sharedWithGroups) {
    this.sharedWithGroups = sharedWithGroups;
  }


  public ProjectWithAccess snippetsEnabled(String snippetsEnabled) {
    this.snippetsEnabled = snippetsEnabled;
    return this;
  }

  /**
   * Get snippetsEnabled
   * @return snippetsEnabled
   */
  @javax.annotation.Nullable
  public String getSnippetsEnabled() {
    return snippetsEnabled;
  }

  public void setSnippetsEnabled(String snippetsEnabled) {
    this.snippetsEnabled = snippetsEnabled;
  }


  public ProjectWithAccess sshUrlToRepo(String sshUrlToRepo) {
    this.sshUrlToRepo = sshUrlToRepo;
    return this;
  }

  /**
   * Get sshUrlToRepo
   * @return sshUrlToRepo
   */
  @javax.annotation.Nullable
  public String getSshUrlToRepo() {
    return sshUrlToRepo;
  }

  public void setSshUrlToRepo(String sshUrlToRepo) {
    this.sshUrlToRepo = sshUrlToRepo;
  }


  public ProjectWithAccess starCount(String starCount) {
    this.starCount = starCount;
    return this;
  }

  /**
   * Get starCount
   * @return starCount
   */
  @javax.annotation.Nullable
  public String getStarCount() {
    return starCount;
  }

  public void setStarCount(String starCount) {
    this.starCount = starCount;
  }


  public ProjectWithAccess statistics(ProjectStatistics statistics) {
    this.statistics = statistics;
    return this;
  }

  /**
   * Get statistics
   * @return statistics
   */
  @javax.annotation.Nullable
  public ProjectStatistics getStatistics() {
    return statistics;
  }

  public void setStatistics(ProjectStatistics statistics) {
    this.statistics = statistics;
  }


  public ProjectWithAccess tagList(String tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Get tagList
   * @return tagList
   */
  @javax.annotation.Nullable
  public String getTagList() {
    return tagList;
  }

  public void setTagList(String tagList) {
    this.tagList = tagList;
  }


  public ProjectWithAccess visibilityLevel(String visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
    return this;
  }

  /**
   * Get visibilityLevel
   * @return visibilityLevel
   */
  @javax.annotation.Nullable
  public String getVisibilityLevel() {
    return visibilityLevel;
  }

  public void setVisibilityLevel(String visibilityLevel) {
    this.visibilityLevel = visibilityLevel;
  }


  public ProjectWithAccess webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public ProjectWithAccess wikiEnabled(String wikiEnabled) {
    this.wikiEnabled = wikiEnabled;
    return this;
  }

  /**
   * Get wikiEnabled
   * @return wikiEnabled
   */
  @javax.annotation.Nullable
  public String getWikiEnabled() {
    return wikiEnabled;
  }

  public void setWikiEnabled(String wikiEnabled) {
    this.wikiEnabled = wikiEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectWithAccess projectWithAccess = (ProjectWithAccess) o;
    return Objects.equals(this.archived, projectWithAccess.archived) &&
        Objects.equals(this.avatarUrl, projectWithAccess.avatarUrl) &&
        Objects.equals(this.buildsEnabled, projectWithAccess.buildsEnabled) &&
        Objects.equals(this.containerRegistryEnabled, projectWithAccess.containerRegistryEnabled) &&
        Objects.equals(this.createdAt, projectWithAccess.createdAt) &&
        Objects.equals(this.creatorId, projectWithAccess.creatorId) &&
        Objects.equals(this.defaultBranch, projectWithAccess.defaultBranch) &&
        Objects.equals(this.description, projectWithAccess.description) &&
        Objects.equals(this.forkedFromProject, projectWithAccess.forkedFromProject) &&
        Objects.equals(this.forksCount, projectWithAccess.forksCount) &&
        Objects.equals(this.httpUrlToRepo, projectWithAccess.httpUrlToRepo) &&
        Objects.equals(this.id, projectWithAccess.id) &&
        Objects.equals(this.issuesEnabled, projectWithAccess.issuesEnabled) &&
        Objects.equals(this.lastActivityAt, projectWithAccess.lastActivityAt) &&
        Objects.equals(this.lfsEnabled, projectWithAccess.lfsEnabled) &&
        Objects.equals(this.mergeRequestsEnabled, projectWithAccess.mergeRequestsEnabled) &&
        Objects.equals(this.name, projectWithAccess.name) &&
        Objects.equals(this.nameWithNamespace, projectWithAccess.nameWithNamespace) &&
        Objects.equals(this.namespace, projectWithAccess.namespace) &&
        Objects.equals(this.onlyAllowMergeIfAllDiscussionsAreResolved, projectWithAccess.onlyAllowMergeIfAllDiscussionsAreResolved) &&
        Objects.equals(this.onlyAllowMergeIfBuildSucceeds, projectWithAccess.onlyAllowMergeIfBuildSucceeds) &&
        Objects.equals(this.openIssuesCount, projectWithAccess.openIssuesCount) &&
        Objects.equals(this.owner, projectWithAccess.owner) &&
        Objects.equals(this.path, projectWithAccess.path) &&
        Objects.equals(this.pathWithNamespace, projectWithAccess.pathWithNamespace) &&
        Objects.equals(this.permissions, projectWithAccess.permissions) &&
        Objects.equals(this._public, projectWithAccess._public) &&
        Objects.equals(this.publicBuilds, projectWithAccess.publicBuilds) &&
        Objects.equals(this.requestAccessEnabled, projectWithAccess.requestAccessEnabled) &&
        Objects.equals(this.runnersToken, projectWithAccess.runnersToken) &&
        Objects.equals(this.sharedRunnersEnabled, projectWithAccess.sharedRunnersEnabled) &&
        Objects.equals(this.sharedWithGroups, projectWithAccess.sharedWithGroups) &&
        Objects.equals(this.snippetsEnabled, projectWithAccess.snippetsEnabled) &&
        Objects.equals(this.sshUrlToRepo, projectWithAccess.sshUrlToRepo) &&
        Objects.equals(this.starCount, projectWithAccess.starCount) &&
        Objects.equals(this.statistics, projectWithAccess.statistics) &&
        Objects.equals(this.tagList, projectWithAccess.tagList) &&
        Objects.equals(this.visibilityLevel, projectWithAccess.visibilityLevel) &&
        Objects.equals(this.webUrl, projectWithAccess.webUrl) &&
        Objects.equals(this.wikiEnabled, projectWithAccess.wikiEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, avatarUrl, buildsEnabled, containerRegistryEnabled, createdAt, creatorId, defaultBranch, description, forkedFromProject, forksCount, httpUrlToRepo, id, issuesEnabled, lastActivityAt, lfsEnabled, mergeRequestsEnabled, name, nameWithNamespace, namespace, onlyAllowMergeIfAllDiscussionsAreResolved, onlyAllowMergeIfBuildSucceeds, openIssuesCount, owner, path, pathWithNamespace, permissions, _public, publicBuilds, requestAccessEnabled, runnersToken, sharedRunnersEnabled, sharedWithGroups, snippetsEnabled, sshUrlToRepo, starCount, statistics, tagList, visibilityLevel, webUrl, wikiEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectWithAccess {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    buildsEnabled: ").append(toIndentedString(buildsEnabled)).append("\n");
    sb.append("    containerRegistryEnabled: ").append(toIndentedString(containerRegistryEnabled)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    defaultBranch: ").append(toIndentedString(defaultBranch)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    forkedFromProject: ").append(toIndentedString(forkedFromProject)).append("\n");
    sb.append("    forksCount: ").append(toIndentedString(forksCount)).append("\n");
    sb.append("    httpUrlToRepo: ").append(toIndentedString(httpUrlToRepo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuesEnabled: ").append(toIndentedString(issuesEnabled)).append("\n");
    sb.append("    lastActivityAt: ").append(toIndentedString(lastActivityAt)).append("\n");
    sb.append("    lfsEnabled: ").append(toIndentedString(lfsEnabled)).append("\n");
    sb.append("    mergeRequestsEnabled: ").append(toIndentedString(mergeRequestsEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameWithNamespace: ").append(toIndentedString(nameWithNamespace)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    onlyAllowMergeIfAllDiscussionsAreResolved: ").append(toIndentedString(onlyAllowMergeIfAllDiscussionsAreResolved)).append("\n");
    sb.append("    onlyAllowMergeIfBuildSucceeds: ").append(toIndentedString(onlyAllowMergeIfBuildSucceeds)).append("\n");
    sb.append("    openIssuesCount: ").append(toIndentedString(openIssuesCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathWithNamespace: ").append(toIndentedString(pathWithNamespace)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    _public: ").append(toIndentedString(_public)).append("\n");
    sb.append("    publicBuilds: ").append(toIndentedString(publicBuilds)).append("\n");
    sb.append("    requestAccessEnabled: ").append(toIndentedString(requestAccessEnabled)).append("\n");
    sb.append("    runnersToken: ").append(toIndentedString(runnersToken)).append("\n");
    sb.append("    sharedRunnersEnabled: ").append(toIndentedString(sharedRunnersEnabled)).append("\n");
    sb.append("    sharedWithGroups: ").append(toIndentedString(sharedWithGroups)).append("\n");
    sb.append("    snippetsEnabled: ").append(toIndentedString(snippetsEnabled)).append("\n");
    sb.append("    sshUrlToRepo: ").append(toIndentedString(sshUrlToRepo)).append("\n");
    sb.append("    starCount: ").append(toIndentedString(starCount)).append("\n");
    sb.append("    statistics: ").append(toIndentedString(statistics)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    visibilityLevel: ").append(toIndentedString(visibilityLevel)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    wikiEnabled: ").append(toIndentedString(wikiEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("avatar_url");
    openapiFields.add("builds_enabled");
    openapiFields.add("container_registry_enabled");
    openapiFields.add("created_at");
    openapiFields.add("creator_id");
    openapiFields.add("default_branch");
    openapiFields.add("description");
    openapiFields.add("forked_from_project");
    openapiFields.add("forks_count");
    openapiFields.add("http_url_to_repo");
    openapiFields.add("id");
    openapiFields.add("issues_enabled");
    openapiFields.add("last_activity_at");
    openapiFields.add("lfs_enabled");
    openapiFields.add("merge_requests_enabled");
    openapiFields.add("name");
    openapiFields.add("name_with_namespace");
    openapiFields.add("namespace");
    openapiFields.add("only_allow_merge_if_all_discussions_are_resolved");
    openapiFields.add("only_allow_merge_if_build_succeeds");
    openapiFields.add("open_issues_count");
    openapiFields.add("owner");
    openapiFields.add("path");
    openapiFields.add("path_with_namespace");
    openapiFields.add("permissions");
    openapiFields.add("public");
    openapiFields.add("public_builds");
    openapiFields.add("request_access_enabled");
    openapiFields.add("runners_token");
    openapiFields.add("shared_runners_enabled");
    openapiFields.add("shared_with_groups");
    openapiFields.add("snippets_enabled");
    openapiFields.add("ssh_url_to_repo");
    openapiFields.add("star_count");
    openapiFields.add("statistics");
    openapiFields.add("tag_list");
    openapiFields.add("visibility_level");
    openapiFields.add("web_url");
    openapiFields.add("wiki_enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectWithAccess
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectWithAccess.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectWithAccess is not found in the empty JSON string", ProjectWithAccess.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectWithAccess.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectWithAccess` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("archived") != null && !jsonObj.get("archived").isJsonNull()) && !jsonObj.get("archived").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `archived` to be a primitive type in the JSON string but got `%s`", jsonObj.get("archived").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("builds_enabled") != null && !jsonObj.get("builds_enabled").isJsonNull()) && !jsonObj.get("builds_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `builds_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("builds_enabled").toString()));
      }
      if ((jsonObj.get("container_registry_enabled") != null && !jsonObj.get("container_registry_enabled").isJsonNull()) && !jsonObj.get("container_registry_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container_registry_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container_registry_enabled").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("creator_id") != null && !jsonObj.get("creator_id").isJsonNull()) && !jsonObj.get("creator_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_id").toString()));
      }
      if ((jsonObj.get("default_branch") != null && !jsonObj.get("default_branch").isJsonNull()) && !jsonObj.get("default_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `forked_from_project`
      if (jsonObj.get("forked_from_project") != null && !jsonObj.get("forked_from_project").isJsonNull()) {
        BasicProjectDetails.validateJsonElement(jsonObj.get("forked_from_project"));
      }
      if ((jsonObj.get("forks_count") != null && !jsonObj.get("forks_count").isJsonNull()) && !jsonObj.get("forks_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forks_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forks_count").toString()));
      }
      if ((jsonObj.get("http_url_to_repo") != null && !jsonObj.get("http_url_to_repo").isJsonNull()) && !jsonObj.get("http_url_to_repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_url_to_repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_url_to_repo").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issues_enabled") != null && !jsonObj.get("issues_enabled").isJsonNull()) && !jsonObj.get("issues_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issues_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issues_enabled").toString()));
      }
      if ((jsonObj.get("last_activity_at") != null && !jsonObj.get("last_activity_at").isJsonNull()) && !jsonObj.get("last_activity_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_activity_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_activity_at").toString()));
      }
      if ((jsonObj.get("lfs_enabled") != null && !jsonObj.get("lfs_enabled").isJsonNull()) && !jsonObj.get("lfs_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lfs_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lfs_enabled").toString()));
      }
      if ((jsonObj.get("merge_requests_enabled") != null && !jsonObj.get("merge_requests_enabled").isJsonNull()) && !jsonObj.get("merge_requests_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merge_requests_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merge_requests_enabled").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_with_namespace") != null && !jsonObj.get("name_with_namespace").isJsonNull()) && !jsonObj.get("name_with_namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_with_namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_with_namespace").toString()));
      }
      // validate the optional field `namespace`
      if (jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) {
        Namespace.validateJsonElement(jsonObj.get("namespace"));
      }
      if ((jsonObj.get("only_allow_merge_if_all_discussions_are_resolved") != null && !jsonObj.get("only_allow_merge_if_all_discussions_are_resolved").isJsonNull()) && !jsonObj.get("only_allow_merge_if_all_discussions_are_resolved").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `only_allow_merge_if_all_discussions_are_resolved` to be a primitive type in the JSON string but got `%s`", jsonObj.get("only_allow_merge_if_all_discussions_are_resolved").toString()));
      }
      if ((jsonObj.get("only_allow_merge_if_build_succeeds") != null && !jsonObj.get("only_allow_merge_if_build_succeeds").isJsonNull()) && !jsonObj.get("only_allow_merge_if_build_succeeds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `only_allow_merge_if_build_succeeds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("only_allow_merge_if_build_succeeds").toString()));
      }
      if ((jsonObj.get("open_issues_count") != null && !jsonObj.get("open_issues_count").isJsonNull()) && !jsonObj.get("open_issues_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `open_issues_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("open_issues_count").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        UserBasic.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("path_with_namespace") != null && !jsonObj.get("path_with_namespace").isJsonNull()) && !jsonObj.get("path_with_namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_with_namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_with_namespace").toString()));
      }
      if ((jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) && !jsonObj.get("permissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      if ((jsonObj.get("public") != null && !jsonObj.get("public").isJsonNull()) && !jsonObj.get("public").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public").toString()));
      }
      if ((jsonObj.get("public_builds") != null && !jsonObj.get("public_builds").isJsonNull()) && !jsonObj.get("public_builds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_builds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_builds").toString()));
      }
      if ((jsonObj.get("request_access_enabled") != null && !jsonObj.get("request_access_enabled").isJsonNull()) && !jsonObj.get("request_access_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_access_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_access_enabled").toString()));
      }
      if ((jsonObj.get("runners_token") != null && !jsonObj.get("runners_token").isJsonNull()) && !jsonObj.get("runners_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runners_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runners_token").toString()));
      }
      if ((jsonObj.get("shared_runners_enabled") != null && !jsonObj.get("shared_runners_enabled").isJsonNull()) && !jsonObj.get("shared_runners_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_runners_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_runners_enabled").toString()));
      }
      if ((jsonObj.get("shared_with_groups") != null && !jsonObj.get("shared_with_groups").isJsonNull()) && !jsonObj.get("shared_with_groups").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shared_with_groups` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shared_with_groups").toString()));
      }
      if ((jsonObj.get("snippets_enabled") != null && !jsonObj.get("snippets_enabled").isJsonNull()) && !jsonObj.get("snippets_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippets_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippets_enabled").toString()));
      }
      if ((jsonObj.get("ssh_url_to_repo") != null && !jsonObj.get("ssh_url_to_repo").isJsonNull()) && !jsonObj.get("ssh_url_to_repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ssh_url_to_repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ssh_url_to_repo").toString()));
      }
      if ((jsonObj.get("star_count") != null && !jsonObj.get("star_count").isJsonNull()) && !jsonObj.get("star_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `star_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("star_count").toString()));
      }
      // validate the optional field `statistics`
      if (jsonObj.get("statistics") != null && !jsonObj.get("statistics").isJsonNull()) {
        ProjectStatistics.validateJsonElement(jsonObj.get("statistics"));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("visibility_level") != null && !jsonObj.get("visibility_level").isJsonNull()) && !jsonObj.get("visibility_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility_level").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
      if ((jsonObj.get("wiki_enabled") != null && !jsonObj.get("wiki_enabled").isJsonNull()) && !jsonObj.get("wiki_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wiki_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wiki_enabled").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectWithAccess.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectWithAccess' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectWithAccess> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectWithAccess.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectWithAccess>() {
           @Override
           public void write(JsonWriter out, ProjectWithAccess value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectWithAccess read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectWithAccess given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectWithAccess
   * @throws IOException if the JSON string is invalid with respect to ProjectWithAccess
   */
  public static ProjectWithAccess fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectWithAccess.class);
  }

  /**
   * Convert an instance of ProjectWithAccess to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

