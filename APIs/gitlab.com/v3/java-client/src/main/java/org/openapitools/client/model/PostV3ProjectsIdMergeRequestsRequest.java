/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostV3ProjectsIdMergeRequestsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostV3ProjectsIdMergeRequestsRequest {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SOURCE_BRANCH = "source_branch";
  @SerializedName(SERIALIZED_NAME_SOURCE_BRANCH)
  private String sourceBranch;

  public static final String SERIALIZED_NAME_TARGET_BRANCH = "target_branch";
  @SerializedName(SERIALIZED_NAME_TARGET_BRANCH)
  private String targetBranch;

  public static final String SERIALIZED_NAME_TARGET_PROJECT_ID = "target_project_id";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT_ID)
  private Integer targetProjectId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ASSIGNEE_ID = "assignee_id";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_ID)
  private Integer assigneeId;

  public static final String SERIALIZED_NAME_MILESTONE_ID = "milestone_id";
  @SerializedName(SERIALIZED_NAME_MILESTONE_ID)
  private Integer milestoneId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private String labels;

  public static final String SERIALIZED_NAME_REMOVE_SOURCE_BRANCH = "remove_source_branch";
  @SerializedName(SERIALIZED_NAME_REMOVE_SOURCE_BRANCH)
  private Boolean removeSourceBranch;

  public PostV3ProjectsIdMergeRequestsRequest() {
  }

  public PostV3ProjectsIdMergeRequestsRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the merge request
   * @return title
   */
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PostV3ProjectsIdMergeRequestsRequest sourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
    return this;
  }

  /**
   * The source branch
   * @return sourceBranch
   */
  @javax.annotation.Nonnull
  public String getSourceBranch() {
    return sourceBranch;
  }

  public void setSourceBranch(String sourceBranch) {
    this.sourceBranch = sourceBranch;
  }


  public PostV3ProjectsIdMergeRequestsRequest targetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
    return this;
  }

  /**
   * The target branch
   * @return targetBranch
   */
  @javax.annotation.Nonnull
  public String getTargetBranch() {
    return targetBranch;
  }

  public void setTargetBranch(String targetBranch) {
    this.targetBranch = targetBranch;
  }


  public PostV3ProjectsIdMergeRequestsRequest targetProjectId(Integer targetProjectId) {
    this.targetProjectId = targetProjectId;
    return this;
  }

  /**
   * The target project of the merge request defaults to the :id of the project
   * @return targetProjectId
   */
  @javax.annotation.Nullable
  public Integer getTargetProjectId() {
    return targetProjectId;
  }

  public void setTargetProjectId(Integer targetProjectId) {
    this.targetProjectId = targetProjectId;
  }


  public PostV3ProjectsIdMergeRequestsRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the merge request
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PostV3ProjectsIdMergeRequestsRequest assigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
    return this;
  }

  /**
   * The ID of a user to assign the merge request
   * @return assigneeId
   */
  @javax.annotation.Nullable
  public Integer getAssigneeId() {
    return assigneeId;
  }

  public void setAssigneeId(Integer assigneeId) {
    this.assigneeId = assigneeId;
  }


  public PostV3ProjectsIdMergeRequestsRequest milestoneId(Integer milestoneId) {
    this.milestoneId = milestoneId;
    return this;
  }

  /**
   * The ID of a milestone to assign the merge request
   * @return milestoneId
   */
  @javax.annotation.Nullable
  public Integer getMilestoneId() {
    return milestoneId;
  }

  public void setMilestoneId(Integer milestoneId) {
    this.milestoneId = milestoneId;
  }


  public PostV3ProjectsIdMergeRequestsRequest labels(String labels) {
    this.labels = labels;
    return this;
  }

  /**
   * Comma-separated list of label names
   * @return labels
   */
  @javax.annotation.Nullable
  public String getLabels() {
    return labels;
  }

  public void setLabels(String labels) {
    this.labels = labels;
  }


  public PostV3ProjectsIdMergeRequestsRequest removeSourceBranch(Boolean removeSourceBranch) {
    this.removeSourceBranch = removeSourceBranch;
    return this;
  }

  /**
   * Remove source branch when merging
   * @return removeSourceBranch
   */
  @javax.annotation.Nullable
  public Boolean getRemoveSourceBranch() {
    return removeSourceBranch;
  }

  public void setRemoveSourceBranch(Boolean removeSourceBranch) {
    this.removeSourceBranch = removeSourceBranch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostV3ProjectsIdMergeRequestsRequest postV3ProjectsIdMergeRequestsRequest = (PostV3ProjectsIdMergeRequestsRequest) o;
    return Objects.equals(this.title, postV3ProjectsIdMergeRequestsRequest.title) &&
        Objects.equals(this.sourceBranch, postV3ProjectsIdMergeRequestsRequest.sourceBranch) &&
        Objects.equals(this.targetBranch, postV3ProjectsIdMergeRequestsRequest.targetBranch) &&
        Objects.equals(this.targetProjectId, postV3ProjectsIdMergeRequestsRequest.targetProjectId) &&
        Objects.equals(this.description, postV3ProjectsIdMergeRequestsRequest.description) &&
        Objects.equals(this.assigneeId, postV3ProjectsIdMergeRequestsRequest.assigneeId) &&
        Objects.equals(this.milestoneId, postV3ProjectsIdMergeRequestsRequest.milestoneId) &&
        Objects.equals(this.labels, postV3ProjectsIdMergeRequestsRequest.labels) &&
        Objects.equals(this.removeSourceBranch, postV3ProjectsIdMergeRequestsRequest.removeSourceBranch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, sourceBranch, targetBranch, targetProjectId, description, assigneeId, milestoneId, labels, removeSourceBranch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostV3ProjectsIdMergeRequestsRequest {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    sourceBranch: ").append(toIndentedString(sourceBranch)).append("\n");
    sb.append("    targetBranch: ").append(toIndentedString(targetBranch)).append("\n");
    sb.append("    targetProjectId: ").append(toIndentedString(targetProjectId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    assigneeId: ").append(toIndentedString(assigneeId)).append("\n");
    sb.append("    milestoneId: ").append(toIndentedString(milestoneId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    removeSourceBranch: ").append(toIndentedString(removeSourceBranch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("source_branch");
    openapiFields.add("target_branch");
    openapiFields.add("target_project_id");
    openapiFields.add("description");
    openapiFields.add("assignee_id");
    openapiFields.add("milestone_id");
    openapiFields.add("labels");
    openapiFields.add("remove_source_branch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("source_branch");
    openapiRequiredFields.add("target_branch");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostV3ProjectsIdMergeRequestsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostV3ProjectsIdMergeRequestsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostV3ProjectsIdMergeRequestsRequest is not found in the empty JSON string", PostV3ProjectsIdMergeRequestsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostV3ProjectsIdMergeRequestsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostV3ProjectsIdMergeRequestsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PostV3ProjectsIdMergeRequestsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("source_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_branch").toString()));
      }
      if (!jsonObj.get("target_branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_branch").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) && !jsonObj.get("labels").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be a primitive type in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostV3ProjectsIdMergeRequestsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostV3ProjectsIdMergeRequestsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostV3ProjectsIdMergeRequestsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostV3ProjectsIdMergeRequestsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PostV3ProjectsIdMergeRequestsRequest>() {
           @Override
           public void write(JsonWriter out, PostV3ProjectsIdMergeRequestsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostV3ProjectsIdMergeRequestsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostV3ProjectsIdMergeRequestsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostV3ProjectsIdMergeRequestsRequest
   * @throws IOException if the JSON string is invalid with respect to PostV3ProjectsIdMergeRequestsRequest
   */
  public static PostV3ProjectsIdMergeRequestsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostV3ProjectsIdMergeRequestsRequest.class);
  }

  /**
   * Convert an instance of PostV3ProjectsIdMergeRequestsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

