/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Email;
import org.openapitools.client.model.Event;
import org.openapitools.client.model.PostV3UserKeysRequest;
import org.openapitools.client.model.PostV3UsersIdEmailsRequest;
import org.openapitools.client.model.PostV3UsersRequest;
import org.openapitools.client.model.PutV3UsersIdRequest;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.UserBasic;
import org.openapitools.client.model.UserPublic;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteV3UsersId
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3UsersIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3UsersId(Async)");
        }

        return deleteV3UsersIdCall(id, _callback);

    }

    /**
     * Delete a user. Available only for admins.
     * Delete a user. Available only for admins.
     * @param id The ID of the user (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public Email deleteV3UsersId(Integer id) throws ApiException {
        ApiResponse<Email> localVarResp = deleteV3UsersIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Delete a user. Available only for admins.
     * Delete a user. Available only for admins.
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> deleteV3UsersIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = deleteV3UsersIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a user. Available only for admins. (asynchronously)
     * Delete a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdAsync(Integer id, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3UsersIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3UsersIdEmailsEmailId
     * @param id The ID of the user (required)
     * @param emailId The ID of the email (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an email address of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdEmailsEmailIdCall(Integer id, Integer emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/emails/{email_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "email_id" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3UsersIdEmailsEmailIdValidateBeforeCall(Integer id, Integer emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3UsersIdEmailsEmailId(Async)");
        }

        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling deleteV3UsersIdEmailsEmailId(Async)");
        }

        return deleteV3UsersIdEmailsEmailIdCall(id, emailId, _callback);

    }

    /**
     * Delete an email address of a specified user. Available only for admins.
     * Delete an email address of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param emailId The ID of the email (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an email address of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public Email deleteV3UsersIdEmailsEmailId(Integer id, Integer emailId) throws ApiException {
        ApiResponse<Email> localVarResp = deleteV3UsersIdEmailsEmailIdWithHttpInfo(id, emailId);
        return localVarResp.getData();
    }

    /**
     * Delete an email address of a specified user. Available only for admins.
     * Delete an email address of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param emailId The ID of the email (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an email address of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> deleteV3UsersIdEmailsEmailIdWithHttpInfo(Integer id, Integer emailId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3UsersIdEmailsEmailIdValidateBeforeCall(id, emailId, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an email address of a specified user. Available only for admins. (asynchronously)
     * Delete an email address of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param emailId The ID of the email (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an email address of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdEmailsEmailIdAsync(Integer id, Integer emailId, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3UsersIdEmailsEmailIdValidateBeforeCall(id, emailId, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteV3UsersIdKeysKeyId
     * @param id The ID of the user (required)
     * @param keyId The ID of the SSH key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing SSH key from a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdKeysKeyIdCall(Integer id, Integer keyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/keys/{key_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "key_id" + "}", localVarApiClient.escapeString(keyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteV3UsersIdKeysKeyIdValidateBeforeCall(Integer id, Integer keyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteV3UsersIdKeysKeyId(Async)");
        }

        // verify the required parameter 'keyId' is set
        if (keyId == null) {
            throw new ApiException("Missing the required parameter 'keyId' when calling deleteV3UsersIdKeysKeyId(Async)");
        }

        return deleteV3UsersIdKeysKeyIdCall(id, keyId, _callback);

    }

    /**
     * Delete an existing SSH key from a specified user. Available only for admins.
     * Delete an existing SSH key from a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param keyId The ID of the SSH key (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing SSH key from a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey deleteV3UsersIdKeysKeyId(Integer id, Integer keyId) throws ApiException {
        ApiResponse<SSHKey> localVarResp = deleteV3UsersIdKeysKeyIdWithHttpInfo(id, keyId);
        return localVarResp.getData();
    }

    /**
     * Delete an existing SSH key from a specified user. Available only for admins.
     * Delete an existing SSH key from a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param keyId The ID of the SSH key (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing SSH key from a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> deleteV3UsersIdKeysKeyIdWithHttpInfo(Integer id, Integer keyId) throws ApiException {
        okhttp3.Call localVarCall = deleteV3UsersIdKeysKeyIdValidateBeforeCall(id, keyId, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an existing SSH key from a specified user. Available only for admins. (asynchronously)
     * Delete an existing SSH key from a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param keyId The ID of the SSH key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete an existing SSH key from a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteV3UsersIdKeysKeyIdAsync(Integer id, Integer keyId, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteV3UsersIdKeysKeyIdValidateBeforeCall(id, keyId, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3Users
     * @param username Get a single user with a specific username (optional)
     * @param search Search for a username (optional)
     * @param active Filters only active users (optional)
     * @param external Filters only external users (optional)
     * @param blocked Filters only blocked users (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersCall(String username, String search, Boolean active, Boolean external, Boolean blocked, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (active != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("active", active));
        }

        if (external != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external", external));
        }

        if (blocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blocked", blocked));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UsersValidateBeforeCall(String username, String search, Boolean active, Boolean external, Boolean blocked, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getV3UsersCall(username, search, active, external, blocked, page, perPage, _callback);

    }

    /**
     * Get the list of users
     * Get the list of users
     * @param username Get a single user with a specific username (optional)
     * @param search Search for a username (optional)
     * @param active Filters only active users (optional)
     * @param external Filters only external users (optional)
     * @param blocked Filters only blocked users (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return UserBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of users </td><td>  -  </td></tr>
     </table>
     */
    public UserBasic getV3Users(String username, String search, Boolean active, Boolean external, Boolean blocked, Integer page, Integer perPage) throws ApiException {
        ApiResponse<UserBasic> localVarResp = getV3UsersWithHttpInfo(username, search, active, external, blocked, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the list of users
     * Get the list of users
     * @param username Get a single user with a specific username (optional)
     * @param search Search for a username (optional)
     * @param active Filters only active users (optional)
     * @param external Filters only external users (optional)
     * @param blocked Filters only blocked users (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;UserBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserBasic> getV3UsersWithHttpInfo(String username, String search, Boolean active, Boolean external, Boolean blocked, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3UsersValidateBeforeCall(username, search, active, external, blocked, page, perPage, null);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of users (asynchronously)
     * Get the list of users
     * @param username Get a single user with a specific username (optional)
     * @param search Search for a username (optional)
     * @param active Filters only active users (optional)
     * @param external Filters only external users (optional)
     * @param blocked Filters only blocked users (optional)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersAsync(String username, String search, Boolean active, Boolean external, Boolean blocked, Integer page, Integer perPage, final ApiCallback<UserBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UsersValidateBeforeCall(username, search, active, external, blocked, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UsersId
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UsersIdValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3UsersId(Async)");
        }

        return getV3UsersIdCall(id, _callback);

    }

    /**
     * Get a single user
     * Get a single user
     * @param id The ID of the user (required)
     * @return UserBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single user </td><td>  -  </td></tr>
     </table>
     */
    public UserBasic getV3UsersId(Integer id) throws ApiException {
        ApiResponse<UserBasic> localVarResp = getV3UsersIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a single user
     * Get a single user
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;UserBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserBasic> getV3UsersIdWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3UsersIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a single user (asynchronously)
     * Get a single user
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get a single user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdAsync(Integer id, final ApiCallback<UserBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UsersIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<UserBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UsersIdEmails
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the emails addresses of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdEmailsCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/emails"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UsersIdEmailsValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3UsersIdEmails(Async)");
        }

        return getV3UsersIdEmailsCall(id, _callback);

    }

    /**
     * Get the emails addresses of a specified user. Available only for admins.
     * Get the emails addresses of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the emails addresses of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public Email getV3UsersIdEmails(Integer id) throws ApiException {
        ApiResponse<Email> localVarResp = getV3UsersIdEmailsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the emails addresses of a specified user. Available only for admins.
     * Get the emails addresses of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the emails addresses of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> getV3UsersIdEmailsWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3UsersIdEmailsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the emails addresses of a specified user. Available only for admins. (asynchronously)
     * Get the emails addresses of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the emails addresses of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdEmailsAsync(Integer id, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UsersIdEmailsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UsersIdEvents
     * @param id The ID of the user (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the contribution events of a specified user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdEventsCall(Integer id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UsersIdEventsValidateBeforeCall(Integer id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3UsersIdEvents(Async)");
        }

        return getV3UsersIdEventsCall(id, page, perPage, _callback);

    }

    /**
     * Get the contribution events of a specified user
     * This feature was introduced in GitLab 8.13.
     * @param id The ID of the user (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return Event
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the contribution events of a specified user </td><td>  -  </td></tr>
     </table>
     */
    public Event getV3UsersIdEvents(Integer id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<Event> localVarResp = getV3UsersIdEventsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the contribution events of a specified user
     * This feature was introduced in GitLab 8.13.
     * @param id The ID of the user (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @return ApiResponse&lt;Event&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the contribution events of a specified user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Event> getV3UsersIdEventsWithHttpInfo(Integer id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getV3UsersIdEventsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contribution events of a specified user (asynchronously)
     * This feature was introduced in GitLab 8.13.
     * @param id The ID of the user (required)
     * @param page Current page number (optional)
     * @param perPage Number of items per page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the contribution events of a specified user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdEventsAsync(Integer id, Integer page, Integer perPage, final ApiCallback<Event> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UsersIdEventsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Event>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getV3UsersIdKeys
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the SSH keys of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdKeysCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getV3UsersIdKeysValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getV3UsersIdKeys(Async)");
        }

        return getV3UsersIdKeysCall(id, _callback);

    }

    /**
     * Get the SSH keys of a specified user. Available only for admins.
     * Get the SSH keys of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the SSH keys of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey getV3UsersIdKeys(Integer id) throws ApiException {
        ApiResponse<SSHKey> localVarResp = getV3UsersIdKeysWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get the SSH keys of a specified user. Available only for admins.
     * Get the SSH keys of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the SSH keys of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> getV3UsersIdKeysWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = getV3UsersIdKeysValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the SSH keys of a specified user. Available only for admins. (asynchronously)
     * Get the SSH keys of a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the SSH keys of a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getV3UsersIdKeysAsync(Integer id, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = getV3UsersIdKeysValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3Users
     * @param postV3UsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersCall(PostV3UsersRequest postV3UsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3UsersRequest;

        // create path and map variables
        String localVarPath = "/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3UsersValidateBeforeCall(PostV3UsersRequest postV3UsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'postV3UsersRequest' is set
        if (postV3UsersRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3UsersRequest' when calling postV3Users(Async)");
        }

        return postV3UsersCall(postV3UsersRequest, _callback);

    }

    /**
     * Create a user. Available only for admins.
     * Create a user. Available only for admins.
     * @param postV3UsersRequest  (required)
     * @return UserPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public UserPublic postV3Users(PostV3UsersRequest postV3UsersRequest) throws ApiException {
        ApiResponse<UserPublic> localVarResp = postV3UsersWithHttpInfo(postV3UsersRequest);
        return localVarResp.getData();
    }

    /**
     * Create a user. Available only for admins.
     * Create a user. Available only for admins.
     * @param postV3UsersRequest  (required)
     * @return ApiResponse&lt;UserPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPublic> postV3UsersWithHttpInfo(PostV3UsersRequest postV3UsersRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3UsersValidateBeforeCall(postV3UsersRequest, null);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a user. Available only for admins. (asynchronously)
     * Create a user. Available only for admins.
     * @param postV3UsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Create a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersAsync(PostV3UsersRequest postV3UsersRequest, final ApiCallback<UserPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3UsersValidateBeforeCall(postV3UsersRequest, _callback);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3UsersIdEmails
     * @param id The ID of the user (required)
     * @param postV3UsersIdEmailsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an email address to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersIdEmailsCall(Integer id, PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3UsersIdEmailsRequest;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/emails"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3UsersIdEmailsValidateBeforeCall(Integer id, PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3UsersIdEmails(Async)");
        }

        // verify the required parameter 'postV3UsersIdEmailsRequest' is set
        if (postV3UsersIdEmailsRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3UsersIdEmailsRequest' when calling postV3UsersIdEmails(Async)");
        }

        return postV3UsersIdEmailsCall(id, postV3UsersIdEmailsRequest, _callback);

    }

    /**
     * Add an email address to a specified user. Available only for admins.
     * Add an email address to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UsersIdEmailsRequest  (required)
     * @return Email
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an email address to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public Email postV3UsersIdEmails(Integer id, PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest) throws ApiException {
        ApiResponse<Email> localVarResp = postV3UsersIdEmailsWithHttpInfo(id, postV3UsersIdEmailsRequest);
        return localVarResp.getData();
    }

    /**
     * Add an email address to a specified user. Available only for admins.
     * Add an email address to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UsersIdEmailsRequest  (required)
     * @return ApiResponse&lt;Email&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an email address to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Email> postV3UsersIdEmailsWithHttpInfo(Integer id, PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3UsersIdEmailsValidateBeforeCall(id, postV3UsersIdEmailsRequest, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an email address to a specified user. Available only for admins. (asynchronously)
     * Add an email address to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UsersIdEmailsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an email address to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersIdEmailsAsync(Integer id, PostV3UsersIdEmailsRequest postV3UsersIdEmailsRequest, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3UsersIdEmailsValidateBeforeCall(id, postV3UsersIdEmailsRequest, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postV3UsersIdKeys
     * @param id The ID of the user (required)
     * @param postV3UserKeysRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an SSH key to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersIdKeysCall(Integer id, PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postV3UserKeysRequest;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/keys"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postV3UsersIdKeysValidateBeforeCall(Integer id, PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling postV3UsersIdKeys(Async)");
        }

        // verify the required parameter 'postV3UserKeysRequest' is set
        if (postV3UserKeysRequest == null) {
            throw new ApiException("Missing the required parameter 'postV3UserKeysRequest' when calling postV3UsersIdKeys(Async)");
        }

        return postV3UsersIdKeysCall(id, postV3UserKeysRequest, _callback);

    }

    /**
     * Add an SSH key to a specified user. Available only for admins.
     * Add an SSH key to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UserKeysRequest  (required)
     * @return SSHKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an SSH key to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public SSHKey postV3UsersIdKeys(Integer id, PostV3UserKeysRequest postV3UserKeysRequest) throws ApiException {
        ApiResponse<SSHKey> localVarResp = postV3UsersIdKeysWithHttpInfo(id, postV3UserKeysRequest);
        return localVarResp.getData();
    }

    /**
     * Add an SSH key to a specified user. Available only for admins.
     * Add an SSH key to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UserKeysRequest  (required)
     * @return ApiResponse&lt;SSHKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an SSH key to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SSHKey> postV3UsersIdKeysWithHttpInfo(Integer id, PostV3UserKeysRequest postV3UserKeysRequest) throws ApiException {
        okhttp3.Call localVarCall = postV3UsersIdKeysValidateBeforeCall(id, postV3UserKeysRequest, null);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an SSH key to a specified user. Available only for admins. (asynchronously)
     * Add an SSH key to a specified user. Available only for admins.
     * @param id The ID of the user (required)
     * @param postV3UserKeysRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Add an SSH key to a specified user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postV3UsersIdKeysAsync(Integer id, PostV3UserKeysRequest postV3UserKeysRequest, final ApiCallback<SSHKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = postV3UsersIdKeysValidateBeforeCall(id, postV3UserKeysRequest, _callback);
        Type localVarReturnType = new TypeToken<SSHKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3UsersId
     * @param id The ID of the user (required)
     * @param putV3UsersIdRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdCall(Integer id, PutV3UsersIdRequest putV3UsersIdRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putV3UsersIdRequest;

        // create path and map variables
        String localVarPath = "/v3/users/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3UsersIdValidateBeforeCall(Integer id, PutV3UsersIdRequest putV3UsersIdRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3UsersId(Async)");
        }

        return putV3UsersIdCall(id, putV3UsersIdRequest, _callback);

    }

    /**
     * Update a user. Available only for admins.
     * Update a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param putV3UsersIdRequest  (optional)
     * @return UserPublic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public UserPublic putV3UsersId(Integer id, PutV3UsersIdRequest putV3UsersIdRequest) throws ApiException {
        ApiResponse<UserPublic> localVarResp = putV3UsersIdWithHttpInfo(id, putV3UsersIdRequest);
        return localVarResp.getData();
    }

    /**
     * Update a user. Available only for admins.
     * Update a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param putV3UsersIdRequest  (optional)
     * @return ApiResponse&lt;UserPublic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UserPublic> putV3UsersIdWithHttpInfo(Integer id, PutV3UsersIdRequest putV3UsersIdRequest) throws ApiException {
        okhttp3.Call localVarCall = putV3UsersIdValidateBeforeCall(id, putV3UsersIdRequest, null);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a user. Available only for admins. (asynchronously)
     * Update a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param putV3UsersIdRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdAsync(Integer id, PutV3UsersIdRequest putV3UsersIdRequest, final ApiCallback<UserPublic> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3UsersIdValidateBeforeCall(id, putV3UsersIdRequest, _callback);
        Type localVarReturnType = new TypeToken<UserPublic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3UsersIdBlock
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdBlockCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/block"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3UsersIdBlockValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3UsersIdBlock(Async)");
        }

        return putV3UsersIdBlockCall(id, _callback);

    }

    /**
     * Block a user. Available only for admins.
     * Block a user. Available only for admins.
     * @param id The ID of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public void putV3UsersIdBlock(Integer id) throws ApiException {
        putV3UsersIdBlockWithHttpInfo(id);
    }

    /**
     * Block a user. Available only for admins.
     * Block a user. Available only for admins.
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3UsersIdBlockWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = putV3UsersIdBlockValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Block a user. Available only for admins. (asynchronously)
     * Block a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Block a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdBlockAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3UsersIdBlockValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for putV3UsersIdUnblock
     * @param id The ID of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unblock a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdUnblockCall(Integer id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/users/{id}/unblock"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "private_token_query", "private_token_header" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putV3UsersIdUnblockValidateBeforeCall(Integer id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling putV3UsersIdUnblock(Async)");
        }

        return putV3UsersIdUnblockCall(id, _callback);

    }

    /**
     * Unblock a user. Available only for admins.
     * Unblock a user. Available only for admins.
     * @param id The ID of the user (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unblock a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public void putV3UsersIdUnblock(Integer id) throws ApiException {
        putV3UsersIdUnblockWithHttpInfo(id);
    }

    /**
     * Unblock a user. Available only for admins.
     * Unblock a user. Available only for admins.
     * @param id The ID of the user (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unblock a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> putV3UsersIdUnblockWithHttpInfo(Integer id) throws ApiException {
        okhttp3.Call localVarCall = putV3UsersIdUnblockValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock a user. Available only for admins. (asynchronously)
     * Unblock a user. Available only for admins.
     * @param id The ID of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Unblock a user. Available only for admins. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putV3UsersIdUnblockAsync(Integer id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putV3UsersIdUnblockValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
