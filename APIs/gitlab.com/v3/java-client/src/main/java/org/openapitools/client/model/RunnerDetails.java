/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BasicProjectDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Update runner&#39;s details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RunnerDetails {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private String active;

  public static final String SERIALIZED_NAME_ARCHITECTURE = "architecture";
  @SerializedName(SERIALIZED_NAME_ARCHITECTURE)
  private String architecture;

  public static final String SERIALIZED_NAME_CONTACTED_AT = "contacted_at";
  @SerializedName(SERIALIZED_NAME_CONTACTED_AT)
  private String contactedAt;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_SHARED = "is_shared";
  @SerializedName(SERIALIZED_NAME_IS_SHARED)
  private String isShared;

  public static final String SERIALIZED_NAME_LOCKED = "locked";
  @SerializedName(SERIALIZED_NAME_LOCKED)
  private String locked;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private String platform;

  public static final String SERIALIZED_NAME_PROJECTS = "projects";
  @SerializedName(SERIALIZED_NAME_PROJECTS)
  private BasicProjectDetails projects;

  public static final String SERIALIZED_NAME_REVISION = "revision";
  @SerializedName(SERIALIZED_NAME_REVISION)
  private String revision;

  public static final String SERIALIZED_NAME_RUN_UNTAGGED = "run_untagged";
  @SerializedName(SERIALIZED_NAME_RUN_UNTAGGED)
  private String runUntagged;

  public static final String SERIALIZED_NAME_TAG_LIST = "tag_list";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private String tagList;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public RunnerDetails() {
  }

  public RunnerDetails active(String active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public String getActive() {
    return active;
  }

  public void setActive(String active) {
    this.active = active;
  }


  public RunnerDetails architecture(String architecture) {
    this.architecture = architecture;
    return this;
  }

  /**
   * Get architecture
   * @return architecture
   */
  @javax.annotation.Nullable
  public String getArchitecture() {
    return architecture;
  }

  public void setArchitecture(String architecture) {
    this.architecture = architecture;
  }


  public RunnerDetails contactedAt(String contactedAt) {
    this.contactedAt = contactedAt;
    return this;
  }

  /**
   * Get contactedAt
   * @return contactedAt
   */
  @javax.annotation.Nullable
  public String getContactedAt() {
    return contactedAt;
  }

  public void setContactedAt(String contactedAt) {
    this.contactedAt = contactedAt;
  }


  public RunnerDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RunnerDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RunnerDetails isShared(String isShared) {
    this.isShared = isShared;
    return this;
  }

  /**
   * Get isShared
   * @return isShared
   */
  @javax.annotation.Nullable
  public String getIsShared() {
    return isShared;
  }

  public void setIsShared(String isShared) {
    this.isShared = isShared;
  }


  public RunnerDetails locked(String locked) {
    this.locked = locked;
    return this;
  }

  /**
   * Get locked
   * @return locked
   */
  @javax.annotation.Nullable
  public String getLocked() {
    return locked;
  }

  public void setLocked(String locked) {
    this.locked = locked;
  }


  public RunnerDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RunnerDetails platform(String platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Get platform
   * @return platform
   */
  @javax.annotation.Nullable
  public String getPlatform() {
    return platform;
  }

  public void setPlatform(String platform) {
    this.platform = platform;
  }


  public RunnerDetails projects(BasicProjectDetails projects) {
    this.projects = projects;
    return this;
  }

  /**
   * Get projects
   * @return projects
   */
  @javax.annotation.Nullable
  public BasicProjectDetails getProjects() {
    return projects;
  }

  public void setProjects(BasicProjectDetails projects) {
    this.projects = projects;
  }


  public RunnerDetails revision(String revision) {
    this.revision = revision;
    return this;
  }

  /**
   * Get revision
   * @return revision
   */
  @javax.annotation.Nullable
  public String getRevision() {
    return revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }


  public RunnerDetails runUntagged(String runUntagged) {
    this.runUntagged = runUntagged;
    return this;
  }

  /**
   * Get runUntagged
   * @return runUntagged
   */
  @javax.annotation.Nullable
  public String getRunUntagged() {
    return runUntagged;
  }

  public void setRunUntagged(String runUntagged) {
    this.runUntagged = runUntagged;
  }


  public RunnerDetails tagList(String tagList) {
    this.tagList = tagList;
    return this;
  }

  /**
   * Get tagList
   * @return tagList
   */
  @javax.annotation.Nullable
  public String getTagList() {
    return tagList;
  }

  public void setTagList(String tagList) {
    this.tagList = tagList;
  }


  public RunnerDetails token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public RunnerDetails version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RunnerDetails runnerDetails = (RunnerDetails) o;
    return Objects.equals(this.active, runnerDetails.active) &&
        Objects.equals(this.architecture, runnerDetails.architecture) &&
        Objects.equals(this.contactedAt, runnerDetails.contactedAt) &&
        Objects.equals(this.description, runnerDetails.description) &&
        Objects.equals(this.id, runnerDetails.id) &&
        Objects.equals(this.isShared, runnerDetails.isShared) &&
        Objects.equals(this.locked, runnerDetails.locked) &&
        Objects.equals(this.name, runnerDetails.name) &&
        Objects.equals(this.platform, runnerDetails.platform) &&
        Objects.equals(this.projects, runnerDetails.projects) &&
        Objects.equals(this.revision, runnerDetails.revision) &&
        Objects.equals(this.runUntagged, runnerDetails.runUntagged) &&
        Objects.equals(this.tagList, runnerDetails.tagList) &&
        Objects.equals(this.token, runnerDetails.token) &&
        Objects.equals(this.version, runnerDetails.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, architecture, contactedAt, description, id, isShared, locked, name, platform, projects, revision, runUntagged, tagList, token, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RunnerDetails {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    architecture: ").append(toIndentedString(architecture)).append("\n");
    sb.append("    contactedAt: ").append(toIndentedString(contactedAt)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isShared: ").append(toIndentedString(isShared)).append("\n");
    sb.append("    locked: ").append(toIndentedString(locked)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    projects: ").append(toIndentedString(projects)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    runUntagged: ").append(toIndentedString(runUntagged)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("architecture");
    openapiFields.add("contacted_at");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("is_shared");
    openapiFields.add("locked");
    openapiFields.add("name");
    openapiFields.add("platform");
    openapiFields.add("projects");
    openapiFields.add("revision");
    openapiFields.add("run_untagged");
    openapiFields.add("tag_list");
    openapiFields.add("token");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RunnerDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RunnerDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RunnerDetails is not found in the empty JSON string", RunnerDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RunnerDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RunnerDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("active") != null && !jsonObj.get("active").isJsonNull()) && !jsonObj.get("active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active").toString()));
      }
      if ((jsonObj.get("architecture") != null && !jsonObj.get("architecture").isJsonNull()) && !jsonObj.get("architecture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `architecture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("architecture").toString()));
      }
      if ((jsonObj.get("contacted_at") != null && !jsonObj.get("contacted_at").isJsonNull()) && !jsonObj.get("contacted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contacted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contacted_at").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("is_shared") != null && !jsonObj.get("is_shared").isJsonNull()) && !jsonObj.get("is_shared").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_shared` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_shared").toString()));
      }
      if ((jsonObj.get("locked") != null && !jsonObj.get("locked").isJsonNull()) && !jsonObj.get("locked").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locked` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locked").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `projects`
      if (jsonObj.get("projects") != null && !jsonObj.get("projects").isJsonNull()) {
        BasicProjectDetails.validateJsonElement(jsonObj.get("projects"));
      }
      if ((jsonObj.get("revision") != null && !jsonObj.get("revision").isJsonNull()) && !jsonObj.get("revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision").toString()));
      }
      if ((jsonObj.get("run_untagged") != null && !jsonObj.get("run_untagged").isJsonNull()) && !jsonObj.get("run_untagged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_untagged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_untagged").toString()));
      }
      if ((jsonObj.get("tag_list") != null && !jsonObj.get("tag_list").isJsonNull()) && !jsonObj.get("tag_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_list").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RunnerDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RunnerDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RunnerDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RunnerDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<RunnerDetails>() {
           @Override
           public void write(JsonWriter out, RunnerDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RunnerDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RunnerDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RunnerDetails
   * @throws IOException if the JSON string is invalid with respect to RunnerDetails
   */
  public static RunnerDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RunnerDetails.class);
  }

  /**
   * Convert an instance of RunnerDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

