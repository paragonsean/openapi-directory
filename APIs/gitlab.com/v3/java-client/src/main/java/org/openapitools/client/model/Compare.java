/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RepoCommit;
import org.openapitools.client.model.RepoDiff;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Compare two branches, tags, or commits
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Compare {
  public static final String SERIALIZED_NAME_COMMIT = "commit";
  @SerializedName(SERIALIZED_NAME_COMMIT)
  private RepoCommit commit;

  public static final String SERIALIZED_NAME_COMMITS = "commits";
  @SerializedName(SERIALIZED_NAME_COMMITS)
  private RepoCommit commits;

  public static final String SERIALIZED_NAME_COMPARE_SAME_REF = "compare_same_ref";
  @SerializedName(SERIALIZED_NAME_COMPARE_SAME_REF)
  private String compareSameRef;

  public static final String SERIALIZED_NAME_COMPARE_TIMEOUT = "compare_timeout";
  @SerializedName(SERIALIZED_NAME_COMPARE_TIMEOUT)
  private String compareTimeout;

  public static final String SERIALIZED_NAME_DIFFS = "diffs";
  @SerializedName(SERIALIZED_NAME_DIFFS)
  private RepoDiff diffs;

  public Compare() {
  }

  public Compare commit(RepoCommit commit) {
    this.commit = commit;
    return this;
  }

  /**
   * Get commit
   * @return commit
   */
  @javax.annotation.Nullable
  public RepoCommit getCommit() {
    return commit;
  }

  public void setCommit(RepoCommit commit) {
    this.commit = commit;
  }


  public Compare commits(RepoCommit commits) {
    this.commits = commits;
    return this;
  }

  /**
   * Get commits
   * @return commits
   */
  @javax.annotation.Nullable
  public RepoCommit getCommits() {
    return commits;
  }

  public void setCommits(RepoCommit commits) {
    this.commits = commits;
  }


  public Compare compareSameRef(String compareSameRef) {
    this.compareSameRef = compareSameRef;
    return this;
  }

  /**
   * Get compareSameRef
   * @return compareSameRef
   */
  @javax.annotation.Nullable
  public String getCompareSameRef() {
    return compareSameRef;
  }

  public void setCompareSameRef(String compareSameRef) {
    this.compareSameRef = compareSameRef;
  }


  public Compare compareTimeout(String compareTimeout) {
    this.compareTimeout = compareTimeout;
    return this;
  }

  /**
   * Get compareTimeout
   * @return compareTimeout
   */
  @javax.annotation.Nullable
  public String getCompareTimeout() {
    return compareTimeout;
  }

  public void setCompareTimeout(String compareTimeout) {
    this.compareTimeout = compareTimeout;
  }


  public Compare diffs(RepoDiff diffs) {
    this.diffs = diffs;
    return this;
  }

  /**
   * Get diffs
   * @return diffs
   */
  @javax.annotation.Nullable
  public RepoDiff getDiffs() {
    return diffs;
  }

  public void setDiffs(RepoDiff diffs) {
    this.diffs = diffs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Compare compare = (Compare) o;
    return Objects.equals(this.commit, compare.commit) &&
        Objects.equals(this.commits, compare.commits) &&
        Objects.equals(this.compareSameRef, compare.compareSameRef) &&
        Objects.equals(this.compareTimeout, compare.compareTimeout) &&
        Objects.equals(this.diffs, compare.diffs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commit, commits, compareSameRef, compareTimeout, diffs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Compare {\n");
    sb.append("    commit: ").append(toIndentedString(commit)).append("\n");
    sb.append("    commits: ").append(toIndentedString(commits)).append("\n");
    sb.append("    compareSameRef: ").append(toIndentedString(compareSameRef)).append("\n");
    sb.append("    compareTimeout: ").append(toIndentedString(compareTimeout)).append("\n");
    sb.append("    diffs: ").append(toIndentedString(diffs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("commit");
    openapiFields.add("commits");
    openapiFields.add("compare_same_ref");
    openapiFields.add("compare_timeout");
    openapiFields.add("diffs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Compare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Compare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Compare is not found in the empty JSON string", Compare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Compare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Compare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `commit`
      if (jsonObj.get("commit") != null && !jsonObj.get("commit").isJsonNull()) {
        RepoCommit.validateJsonElement(jsonObj.get("commit"));
      }
      // validate the optional field `commits`
      if (jsonObj.get("commits") != null && !jsonObj.get("commits").isJsonNull()) {
        RepoCommit.validateJsonElement(jsonObj.get("commits"));
      }
      if ((jsonObj.get("compare_same_ref") != null && !jsonObj.get("compare_same_ref").isJsonNull()) && !jsonObj.get("compare_same_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_same_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_same_ref").toString()));
      }
      if ((jsonObj.get("compare_timeout") != null && !jsonObj.get("compare_timeout").isJsonNull()) && !jsonObj.get("compare_timeout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `compare_timeout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("compare_timeout").toString()));
      }
      // validate the optional field `diffs`
      if (jsonObj.get("diffs") != null && !jsonObj.get("diffs").isJsonNull()) {
        RepoDiff.validateJsonElement(jsonObj.get("diffs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Compare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Compare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Compare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Compare.class));

       return (TypeAdapter<T>) new TypeAdapter<Compare>() {
           @Override
           public void write(JsonWriter out, Compare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Compare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Compare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Compare
   * @throws IOException if the JSON string is invalid with respect to Compare
   */
  public static Compare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Compare.class);
  }

  /**
   * Convert an instance of Compare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

