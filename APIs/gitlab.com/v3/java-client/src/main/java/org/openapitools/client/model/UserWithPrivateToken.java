/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Identity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Login to get token
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserWithPrivateToken {
  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private String bio;

  public static final String SERIALIZED_NAME_CAN_CREATE_GROUP = "can_create_group";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_GROUP)
  private String canCreateGroup;

  public static final String SERIALIZED_NAME_CAN_CREATE_PROJECT = "can_create_project";
  @SerializedName(SERIALIZED_NAME_CAN_CREATE_PROJECT)
  private String canCreateProject;

  public static final String SERIALIZED_NAME_COLOR_SCHEME_ID = "color_scheme_id";
  @SerializedName(SERIALIZED_NAME_COLOR_SCHEME_ID)
  private String colorSchemeId;

  public static final String SERIALIZED_NAME_CONFIRMED_AT = "confirmed_at";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_AT)
  private String confirmedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CURRENT_SIGN_IN_AT = "current_sign_in_at";
  @SerializedName(SERIALIZED_NAME_CURRENT_SIGN_IN_AT)
  private String currentSignInAt;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL = "external";
  @SerializedName(SERIALIZED_NAME_EXTERNAL)
  private String external;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IDENTITIES = "identities";
  @SerializedName(SERIALIZED_NAME_IDENTITIES)
  private Identity identities;

  public static final String SERIALIZED_NAME_IS_ADMIN = "is_admin";
  @SerializedName(SERIALIZED_NAME_IS_ADMIN)
  private String isAdmin;

  public static final String SERIALIZED_NAME_LAST_SIGN_IN_AT = "last_sign_in_at";
  @SerializedName(SERIALIZED_NAME_LAST_SIGN_IN_AT)
  private String lastSignInAt;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private String linkedin;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PRIVATE_TOKEN = "private_token";
  @SerializedName(SERIALIZED_NAME_PRIVATE_TOKEN)
  private String privateToken;

  public static final String SERIALIZED_NAME_PROJECTS_LIMIT = "projects_limit";
  @SerializedName(SERIALIZED_NAME_PROJECTS_LIMIT)
  private String projectsLimit;

  public static final String SERIALIZED_NAME_SKYPE = "skype";
  @SerializedName(SERIALIZED_NAME_SKYPE)
  private String skype;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_THEME_ID = "theme_id";
  @SerializedName(SERIALIZED_NAME_THEME_ID)
  private String themeId;

  public static final String SERIALIZED_NAME_TWITTER = "twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private String twitter;

  public static final String SERIALIZED_NAME_TWO_FACTOR_ENABLED = "two_factor_enabled";
  @SerializedName(SERIALIZED_NAME_TWO_FACTOR_ENABLED)
  private String twoFactorEnabled;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public static final String SERIALIZED_NAME_WEBSITE_URL = "website_url";
  @SerializedName(SERIALIZED_NAME_WEBSITE_URL)
  private String websiteUrl;

  public UserWithPrivateToken() {
  }

  public UserWithPrivateToken avatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
    return this;
  }

  /**
   * Get avatarUrl
   * @return avatarUrl
   */
  @javax.annotation.Nullable
  public String getAvatarUrl() {
    return avatarUrl;
  }

  public void setAvatarUrl(String avatarUrl) {
    this.avatarUrl = avatarUrl;
  }


  public UserWithPrivateToken bio(String bio) {
    this.bio = bio;
    return this;
  }

  /**
   * Get bio
   * @return bio
   */
  @javax.annotation.Nullable
  public String getBio() {
    return bio;
  }

  public void setBio(String bio) {
    this.bio = bio;
  }


  public UserWithPrivateToken canCreateGroup(String canCreateGroup) {
    this.canCreateGroup = canCreateGroup;
    return this;
  }

  /**
   * Get canCreateGroup
   * @return canCreateGroup
   */
  @javax.annotation.Nullable
  public String getCanCreateGroup() {
    return canCreateGroup;
  }

  public void setCanCreateGroup(String canCreateGroup) {
    this.canCreateGroup = canCreateGroup;
  }


  public UserWithPrivateToken canCreateProject(String canCreateProject) {
    this.canCreateProject = canCreateProject;
    return this;
  }

  /**
   * Get canCreateProject
   * @return canCreateProject
   */
  @javax.annotation.Nullable
  public String getCanCreateProject() {
    return canCreateProject;
  }

  public void setCanCreateProject(String canCreateProject) {
    this.canCreateProject = canCreateProject;
  }


  public UserWithPrivateToken colorSchemeId(String colorSchemeId) {
    this.colorSchemeId = colorSchemeId;
    return this;
  }

  /**
   * Get colorSchemeId
   * @return colorSchemeId
   */
  @javax.annotation.Nullable
  public String getColorSchemeId() {
    return colorSchemeId;
  }

  public void setColorSchemeId(String colorSchemeId) {
    this.colorSchemeId = colorSchemeId;
  }


  public UserWithPrivateToken confirmedAt(String confirmedAt) {
    this.confirmedAt = confirmedAt;
    return this;
  }

  /**
   * Get confirmedAt
   * @return confirmedAt
   */
  @javax.annotation.Nullable
  public String getConfirmedAt() {
    return confirmedAt;
  }

  public void setConfirmedAt(String confirmedAt) {
    this.confirmedAt = confirmedAt;
  }


  public UserWithPrivateToken createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public UserWithPrivateToken currentSignInAt(String currentSignInAt) {
    this.currentSignInAt = currentSignInAt;
    return this;
  }

  /**
   * Get currentSignInAt
   * @return currentSignInAt
   */
  @javax.annotation.Nullable
  public String getCurrentSignInAt() {
    return currentSignInAt;
  }

  public void setCurrentSignInAt(String currentSignInAt) {
    this.currentSignInAt = currentSignInAt;
  }


  public UserWithPrivateToken email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserWithPrivateToken external(String external) {
    this.external = external;
    return this;
  }

  /**
   * Get external
   * @return external
   */
  @javax.annotation.Nullable
  public String getExternal() {
    return external;
  }

  public void setExternal(String external) {
    this.external = external;
  }


  public UserWithPrivateToken id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserWithPrivateToken identities(Identity identities) {
    this.identities = identities;
    return this;
  }

  /**
   * Get identities
   * @return identities
   */
  @javax.annotation.Nullable
  public Identity getIdentities() {
    return identities;
  }

  public void setIdentities(Identity identities) {
    this.identities = identities;
  }


  public UserWithPrivateToken isAdmin(String isAdmin) {
    this.isAdmin = isAdmin;
    return this;
  }

  /**
   * Get isAdmin
   * @return isAdmin
   */
  @javax.annotation.Nullable
  public String getIsAdmin() {
    return isAdmin;
  }

  public void setIsAdmin(String isAdmin) {
    this.isAdmin = isAdmin;
  }


  public UserWithPrivateToken lastSignInAt(String lastSignInAt) {
    this.lastSignInAt = lastSignInAt;
    return this;
  }

  /**
   * Get lastSignInAt
   * @return lastSignInAt
   */
  @javax.annotation.Nullable
  public String getLastSignInAt() {
    return lastSignInAt;
  }

  public void setLastSignInAt(String lastSignInAt) {
    this.lastSignInAt = lastSignInAt;
  }


  public UserWithPrivateToken linkedin(String linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * Get linkedin
   * @return linkedin
   */
  @javax.annotation.Nullable
  public String getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(String linkedin) {
    this.linkedin = linkedin;
  }


  public UserWithPrivateToken location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public UserWithPrivateToken name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserWithPrivateToken organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public UserWithPrivateToken privateToken(String privateToken) {
    this.privateToken = privateToken;
    return this;
  }

  /**
   * Get privateToken
   * @return privateToken
   */
  @javax.annotation.Nullable
  public String getPrivateToken() {
    return privateToken;
  }

  public void setPrivateToken(String privateToken) {
    this.privateToken = privateToken;
  }


  public UserWithPrivateToken projectsLimit(String projectsLimit) {
    this.projectsLimit = projectsLimit;
    return this;
  }

  /**
   * Get projectsLimit
   * @return projectsLimit
   */
  @javax.annotation.Nullable
  public String getProjectsLimit() {
    return projectsLimit;
  }

  public void setProjectsLimit(String projectsLimit) {
    this.projectsLimit = projectsLimit;
  }


  public UserWithPrivateToken skype(String skype) {
    this.skype = skype;
    return this;
  }

  /**
   * Get skype
   * @return skype
   */
  @javax.annotation.Nullable
  public String getSkype() {
    return skype;
  }

  public void setSkype(String skype) {
    this.skype = skype;
  }


  public UserWithPrivateToken state(String state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public UserWithPrivateToken themeId(String themeId) {
    this.themeId = themeId;
    return this;
  }

  /**
   * Get themeId
   * @return themeId
   */
  @javax.annotation.Nullable
  public String getThemeId() {
    return themeId;
  }

  public void setThemeId(String themeId) {
    this.themeId = themeId;
  }


  public UserWithPrivateToken twitter(String twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * Get twitter
   * @return twitter
   */
  @javax.annotation.Nullable
  public String getTwitter() {
    return twitter;
  }

  public void setTwitter(String twitter) {
    this.twitter = twitter;
  }


  public UserWithPrivateToken twoFactorEnabled(String twoFactorEnabled) {
    this.twoFactorEnabled = twoFactorEnabled;
    return this;
  }

  /**
   * Get twoFactorEnabled
   * @return twoFactorEnabled
   */
  @javax.annotation.Nullable
  public String getTwoFactorEnabled() {
    return twoFactorEnabled;
  }

  public void setTwoFactorEnabled(String twoFactorEnabled) {
    this.twoFactorEnabled = twoFactorEnabled;
  }


  public UserWithPrivateToken username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public UserWithPrivateToken webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }


  public UserWithPrivateToken websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

  /**
   * Get websiteUrl
   * @return websiteUrl
   */
  @javax.annotation.Nullable
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWithPrivateToken userWithPrivateToken = (UserWithPrivateToken) o;
    return Objects.equals(this.avatarUrl, userWithPrivateToken.avatarUrl) &&
        Objects.equals(this.bio, userWithPrivateToken.bio) &&
        Objects.equals(this.canCreateGroup, userWithPrivateToken.canCreateGroup) &&
        Objects.equals(this.canCreateProject, userWithPrivateToken.canCreateProject) &&
        Objects.equals(this.colorSchemeId, userWithPrivateToken.colorSchemeId) &&
        Objects.equals(this.confirmedAt, userWithPrivateToken.confirmedAt) &&
        Objects.equals(this.createdAt, userWithPrivateToken.createdAt) &&
        Objects.equals(this.currentSignInAt, userWithPrivateToken.currentSignInAt) &&
        Objects.equals(this.email, userWithPrivateToken.email) &&
        Objects.equals(this.external, userWithPrivateToken.external) &&
        Objects.equals(this.id, userWithPrivateToken.id) &&
        Objects.equals(this.identities, userWithPrivateToken.identities) &&
        Objects.equals(this.isAdmin, userWithPrivateToken.isAdmin) &&
        Objects.equals(this.lastSignInAt, userWithPrivateToken.lastSignInAt) &&
        Objects.equals(this.linkedin, userWithPrivateToken.linkedin) &&
        Objects.equals(this.location, userWithPrivateToken.location) &&
        Objects.equals(this.name, userWithPrivateToken.name) &&
        Objects.equals(this.organization, userWithPrivateToken.organization) &&
        Objects.equals(this.privateToken, userWithPrivateToken.privateToken) &&
        Objects.equals(this.projectsLimit, userWithPrivateToken.projectsLimit) &&
        Objects.equals(this.skype, userWithPrivateToken.skype) &&
        Objects.equals(this.state, userWithPrivateToken.state) &&
        Objects.equals(this.themeId, userWithPrivateToken.themeId) &&
        Objects.equals(this.twitter, userWithPrivateToken.twitter) &&
        Objects.equals(this.twoFactorEnabled, userWithPrivateToken.twoFactorEnabled) &&
        Objects.equals(this.username, userWithPrivateToken.username) &&
        Objects.equals(this.webUrl, userWithPrivateToken.webUrl) &&
        Objects.equals(this.websiteUrl, userWithPrivateToken.websiteUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatarUrl, bio, canCreateGroup, canCreateProject, colorSchemeId, confirmedAt, createdAt, currentSignInAt, email, external, id, identities, isAdmin, lastSignInAt, linkedin, location, name, organization, privateToken, projectsLimit, skype, state, themeId, twitter, twoFactorEnabled, username, webUrl, websiteUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWithPrivateToken {\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    canCreateGroup: ").append(toIndentedString(canCreateGroup)).append("\n");
    sb.append("    canCreateProject: ").append(toIndentedString(canCreateProject)).append("\n");
    sb.append("    colorSchemeId: ").append(toIndentedString(colorSchemeId)).append("\n");
    sb.append("    confirmedAt: ").append(toIndentedString(confirmedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentSignInAt: ").append(toIndentedString(currentSignInAt)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    external: ").append(toIndentedString(external)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identities: ").append(toIndentedString(identities)).append("\n");
    sb.append("    isAdmin: ").append(toIndentedString(isAdmin)).append("\n");
    sb.append("    lastSignInAt: ").append(toIndentedString(lastSignInAt)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    privateToken: ").append(toIndentedString(privateToken)).append("\n");
    sb.append("    projectsLimit: ").append(toIndentedString(projectsLimit)).append("\n");
    sb.append("    skype: ").append(toIndentedString(skype)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    themeId: ").append(toIndentedString(themeId)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("    twoFactorEnabled: ").append(toIndentedString(twoFactorEnabled)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar_url");
    openapiFields.add("bio");
    openapiFields.add("can_create_group");
    openapiFields.add("can_create_project");
    openapiFields.add("color_scheme_id");
    openapiFields.add("confirmed_at");
    openapiFields.add("created_at");
    openapiFields.add("current_sign_in_at");
    openapiFields.add("email");
    openapiFields.add("external");
    openapiFields.add("id");
    openapiFields.add("identities");
    openapiFields.add("is_admin");
    openapiFields.add("last_sign_in_at");
    openapiFields.add("linkedin");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("organization");
    openapiFields.add("private_token");
    openapiFields.add("projects_limit");
    openapiFields.add("skype");
    openapiFields.add("state");
    openapiFields.add("theme_id");
    openapiFields.add("twitter");
    openapiFields.add("two_factor_enabled");
    openapiFields.add("username");
    openapiFields.add("web_url");
    openapiFields.add("website_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserWithPrivateToken
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserWithPrivateToken.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserWithPrivateToken is not found in the empty JSON string", UserWithPrivateToken.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserWithPrivateToken.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserWithPrivateToken` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      if ((jsonObj.get("bio") != null && !jsonObj.get("bio").isJsonNull()) && !jsonObj.get("bio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bio").toString()));
      }
      if ((jsonObj.get("can_create_group") != null && !jsonObj.get("can_create_group").isJsonNull()) && !jsonObj.get("can_create_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `can_create_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("can_create_group").toString()));
      }
      if ((jsonObj.get("can_create_project") != null && !jsonObj.get("can_create_project").isJsonNull()) && !jsonObj.get("can_create_project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `can_create_project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("can_create_project").toString()));
      }
      if ((jsonObj.get("color_scheme_id") != null && !jsonObj.get("color_scheme_id").isJsonNull()) && !jsonObj.get("color_scheme_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color_scheme_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color_scheme_id").toString()));
      }
      if ((jsonObj.get("confirmed_at") != null && !jsonObj.get("confirmed_at").isJsonNull()) && !jsonObj.get("confirmed_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmed_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmed_at").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("current_sign_in_at") != null && !jsonObj.get("current_sign_in_at").isJsonNull()) && !jsonObj.get("current_sign_in_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `current_sign_in_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("current_sign_in_at").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("external") != null && !jsonObj.get("external").isJsonNull()) && !jsonObj.get("external").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `identities`
      if (jsonObj.get("identities") != null && !jsonObj.get("identities").isJsonNull()) {
        Identity.validateJsonElement(jsonObj.get("identities"));
      }
      if ((jsonObj.get("is_admin") != null && !jsonObj.get("is_admin").isJsonNull()) && !jsonObj.get("is_admin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_admin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_admin").toString()));
      }
      if ((jsonObj.get("last_sign_in_at") != null && !jsonObj.get("last_sign_in_at").isJsonNull()) && !jsonObj.get("last_sign_in_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_sign_in_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_sign_in_at").toString()));
      }
      if ((jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) && !jsonObj.get("linkedin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedin").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("private_token") != null && !jsonObj.get("private_token").isJsonNull()) && !jsonObj.get("private_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `private_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("private_token").toString()));
      }
      if ((jsonObj.get("projects_limit") != null && !jsonObj.get("projects_limit").isJsonNull()) && !jsonObj.get("projects_limit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projects_limit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projects_limit").toString()));
      }
      if ((jsonObj.get("skype") != null && !jsonObj.get("skype").isJsonNull()) && !jsonObj.get("skype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skype").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("theme_id") != null && !jsonObj.get("theme_id").isJsonNull()) && !jsonObj.get("theme_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `theme_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("theme_id").toString()));
      }
      if ((jsonObj.get("twitter") != null && !jsonObj.get("twitter").isJsonNull()) && !jsonObj.get("twitter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter").toString()));
      }
      if ((jsonObj.get("two_factor_enabled") != null && !jsonObj.get("two_factor_enabled").isJsonNull()) && !jsonObj.get("two_factor_enabled").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `two_factor_enabled` to be a primitive type in the JSON string but got `%s`", jsonObj.get("two_factor_enabled").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
      if ((jsonObj.get("website_url") != null && !jsonObj.get("website_url").isJsonNull()) && !jsonObj.get("website_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserWithPrivateToken.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserWithPrivateToken' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserWithPrivateToken> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserWithPrivateToken.class));

       return (TypeAdapter<T>) new TypeAdapter<UserWithPrivateToken>() {
           @Override
           public void write(JsonWriter out, UserWithPrivateToken value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserWithPrivateToken read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserWithPrivateToken given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserWithPrivateToken
   * @throws IOException if the JSON string is invalid with respect to UserWithPrivateToken
   */
  public static UserWithPrivateToken fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserWithPrivateToken.class);
  }

  /**
   * Convert an instance of UserWithPrivateToken to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

