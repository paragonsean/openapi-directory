/*
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Get all projects for admin user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:58.090268-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasicProjectDetails {
  public static final String SERIALIZED_NAME_HTTP_URL_TO_REPO = "http_url_to_repo";
  @SerializedName(SERIALIZED_NAME_HTTP_URL_TO_REPO)
  private String httpUrlToRepo;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_WITH_NAMESPACE = "name_with_namespace";
  @SerializedName(SERIALIZED_NAME_NAME_WITH_NAMESPACE)
  private String nameWithNamespace;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PATH_WITH_NAMESPACE = "path_with_namespace";
  @SerializedName(SERIALIZED_NAME_PATH_WITH_NAMESPACE)
  private String pathWithNamespace;

  public static final String SERIALIZED_NAME_WEB_URL = "web_url";
  @SerializedName(SERIALIZED_NAME_WEB_URL)
  private String webUrl;

  public BasicProjectDetails() {
  }

  public BasicProjectDetails httpUrlToRepo(String httpUrlToRepo) {
    this.httpUrlToRepo = httpUrlToRepo;
    return this;
  }

  /**
   * Get httpUrlToRepo
   * @return httpUrlToRepo
   */
  @javax.annotation.Nullable
  public String getHttpUrlToRepo() {
    return httpUrlToRepo;
  }

  public void setHttpUrlToRepo(String httpUrlToRepo) {
    this.httpUrlToRepo = httpUrlToRepo;
  }


  public BasicProjectDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BasicProjectDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BasicProjectDetails nameWithNamespace(String nameWithNamespace) {
    this.nameWithNamespace = nameWithNamespace;
    return this;
  }

  /**
   * Get nameWithNamespace
   * @return nameWithNamespace
   */
  @javax.annotation.Nullable
  public String getNameWithNamespace() {
    return nameWithNamespace;
  }

  public void setNameWithNamespace(String nameWithNamespace) {
    this.nameWithNamespace = nameWithNamespace;
  }


  public BasicProjectDetails path(String path) {
    this.path = path;
    return this;
  }

  /**
   * Get path
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public BasicProjectDetails pathWithNamespace(String pathWithNamespace) {
    this.pathWithNamespace = pathWithNamespace;
    return this;
  }

  /**
   * Get pathWithNamespace
   * @return pathWithNamespace
   */
  @javax.annotation.Nullable
  public String getPathWithNamespace() {
    return pathWithNamespace;
  }

  public void setPathWithNamespace(String pathWithNamespace) {
    this.pathWithNamespace = pathWithNamespace;
  }


  public BasicProjectDetails webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }

  /**
   * Get webUrl
   * @return webUrl
   */
  @javax.annotation.Nullable
  public String getWebUrl() {
    return webUrl;
  }

  public void setWebUrl(String webUrl) {
    this.webUrl = webUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasicProjectDetails basicProjectDetails = (BasicProjectDetails) o;
    return Objects.equals(this.httpUrlToRepo, basicProjectDetails.httpUrlToRepo) &&
        Objects.equals(this.id, basicProjectDetails.id) &&
        Objects.equals(this.name, basicProjectDetails.name) &&
        Objects.equals(this.nameWithNamespace, basicProjectDetails.nameWithNamespace) &&
        Objects.equals(this.path, basicProjectDetails.path) &&
        Objects.equals(this.pathWithNamespace, basicProjectDetails.pathWithNamespace) &&
        Objects.equals(this.webUrl, basicProjectDetails.webUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(httpUrlToRepo, id, name, nameWithNamespace, path, pathWithNamespace, webUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasicProjectDetails {\n");
    sb.append("    httpUrlToRepo: ").append(toIndentedString(httpUrlToRepo)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameWithNamespace: ").append(toIndentedString(nameWithNamespace)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    pathWithNamespace: ").append(toIndentedString(pathWithNamespace)).append("\n");
    sb.append("    webUrl: ").append(toIndentedString(webUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("http_url_to_repo");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("name_with_namespace");
    openapiFields.add("path");
    openapiFields.add("path_with_namespace");
    openapiFields.add("web_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasicProjectDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasicProjectDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasicProjectDetails is not found in the empty JSON string", BasicProjectDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasicProjectDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasicProjectDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("http_url_to_repo") != null && !jsonObj.get("http_url_to_repo").isJsonNull()) && !jsonObj.get("http_url_to_repo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `http_url_to_repo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("http_url_to_repo").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("name_with_namespace") != null && !jsonObj.get("name_with_namespace").isJsonNull()) && !jsonObj.get("name_with_namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_with_namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_with_namespace").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if ((jsonObj.get("path_with_namespace") != null && !jsonObj.get("path_with_namespace").isJsonNull()) && !jsonObj.get("path_with_namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path_with_namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path_with_namespace").toString()));
      }
      if ((jsonObj.get("web_url") != null && !jsonObj.get("web_url").isJsonNull()) && !jsonObj.get("web_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `web_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("web_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasicProjectDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasicProjectDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasicProjectDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasicProjectDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BasicProjectDetails>() {
           @Override
           public void write(JsonWriter out, BasicProjectDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasicProjectDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasicProjectDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasicProjectDetails
   * @throws IOException if the JSON string is invalid with respect to BasicProjectDetails
   */
  public static BasicProjectDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasicProjectDetails.class);
  }

  /**
   * Convert an instance of BasicProjectDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

